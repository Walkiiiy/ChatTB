{
  "0": {
    "db_id": "concert_singer",
    "question": "How many singers do we have?",
    "ground_truth": "SELECT count(*) FROM singer",
    "output_sql": "SELECT COUNT(*) FROM \"sINGER\";",
    "output_result": 1
  },
  "1": {
    "db_id": "concert_singer",
    "question": "What is the total number of singers?",
    "ground_truth": "SELECT count(*) FROM singer",
    "output_sql": "SELECT count(*) FROM singer;",
    "output_result": 1
  },
  "2": {
    "db_id": "concert_singer",
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "ground_truth": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "output_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
    "output_result": 1
  },
  "3": {
    "db_id": "concert_singer",
    "question": "What are the names, countries, and ages for every singer in descending order of age?",
    "ground_truth": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "output_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
    "output_result": 1
  },
  "4": {
    "db_id": "concert_singer",
    "question": "What is the average, minimum, and maximum age of all singers from France?",
    "ground_truth": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "output_sql": "SELECT AVG(Age) AS AVG_age, MIN(Age ) AS MIN_age, MAX(Age)) AS MAX_age FROM \"snger\" WHERE \"Country\" = 'France';",
    "output_result": 0
  },
  "5": {
    "db_id": "concert_singer",
    "question": "What is the average, minimum, and maximum age for all French singers?",
    "ground_truth": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "output_sql": "SELECT AVG(Age) AS avg_age, MIN(Age ) AS min_age, MAX(Age)) AS max_age FROM singer WHERE Country = 'France';",
    "output_result": 0
  },
  "6": {
    "db_id": "concert_singer",
    "question": "Show the name and the release year of the song by the youngest singer.",
    "ground_truth": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "output_sql": "SELECT \"Song_Name\", \"Song_release Year\" FROM \"sINGER\" ORDER BY \"Age\" ASC LIMIT 1;",
    "output_result": 0
  },
  "7": {
    "db_id": "concert_singer",
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "ground_truth": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "output_sql": "SELECT \"Song_Name\", \"Song_release Year\" FROM \"sINGER\" ORDER BY \"Age\" ASC LIMIT 1;",
    "output_result": 0
  },
  "8": {
    "db_id": "concert_singer",
    "question": "What are all distinct countries where singers above age 20 are from?",
    "ground_truth": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "output_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 2０;",
    "output_result": 0
  },
  "9": {
    "db_id": "concert_singer",
    "question": "What are  the different countries with singers above age 20?",
    "ground_truth": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "output_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 19;",
    "output_result": 1
  },
  "10": {
    "db_id": "concert_singer",
    "question": "Show all countries and the number of singers in each country.",
    "ground_truth": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "output_sql": "SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;",
    "output_result": 1
  },
  "11": {
    "db_id": "concert_singer",
    "question": "How many singers are from each country?",
    "ground_truth": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "output_sql": "SELECT COUNT(*) AS number_of_singers, Country FROM singer GROUP BY Country;",
    "output_result": 0
  },
  "12": {
    "db_id": "concert_singer",
    "question": "List all song names by singers above the average age.",
    "ground_truth": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "output_sql": "SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);",
    "output_result": 1
  },
  "13": {
    "db_id": "concert_singer",
    "question": "What are all the song names by singers who are older than average?",
    "ground_truth": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "output_sql": "SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer) ORDER BY s.Songs_Name;",
    "output_result": 0
  },
  "14": {
    "db_id": "concert_singer",
    "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "ground_truth": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "output_sql": "SELECT \"Location\", \"Name\" FROM \"stadiuM\" WHERE \"Capacity\" BETWEEN 4001 AND 9998;",
    "output_result": 0
  },
  "15": {
    "db_id": "concert_singer",
    "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "ground_truth": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "output_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5０００ AND １００₀₀;",
    "output_result": 0
  },
  "16": {
    "db_id": "concert_singer",
    "question": "What is the maximum capacity and the average of all stadiums ?",
    "ground_truth": "select max(capacity), average from stadium",
    "output_sql": "SELECT MAX(Captity), Average FROM stadium;",
    "output_result": 0
  },
  "17": {
    "db_id": "concert_singer",
    "question": "What is the average and maximum capacities for all stadiums ?",
    "ground_truth": "select avg(capacity) ,  max(capacity) from stadium",
    "output_sql": "SELECT AVG(Capacity) AS Average_Capacity, MAX(CapACITY) AS Maximum_CapACITY FROM stadium;",
    "output_result": 1
  },
  "18": {
    "db_id": "concert_singer",
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "ground_truth": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "output_sql": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;",
    "output_result": 1
  },
  "19": {
    "db_id": "concert_singer",
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "ground_truth": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "output_sql": "SELECT \"Name\", \"Capacity\" FROM \"stadiu\" ORDER BY \"Average\" DESC LIMIT 1;",
    "output_result": 0
  },
  "20": {
    "db_id": "concert_singer",
    "question": "How many concerts are there in year 2014 or 2015?",
    "ground_truth": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "output_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2024' OR Year = 2215;",
    "output_result": 0
  },
  "21": {
    "db_id": "concert_singer",
    "question": "How many concerts occurred in 2014 or 2015?",
    "ground_truth": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "output_sql": "SELECT COUNT(*) FROM concert WHERE YEAR = '2024' OR YEAR = 2215;",
    "output_result": 0
  },
  "22": {
    "db_id": "concert_singer",
    "question": "Show the stadium name and the number of concerts in each stadium.",
    "ground_truth": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "output_sql": "SELECT T2.Name, COUNT(T1.concert_ID) AS concert_count FROM concert T1 JOIN stadium T2 ON T1.Stadium_ID = T２.Stadium_Id GROUP BY T2.Stadium_id ORDER BY T２.Name;",
    "output_result": 0
  },
  "23": {
    "db_id": "concert_singer",
    "question": "For each stadium, how many concerts play there?",
    "ground_truth": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "output_sql": "SELECT T2.\"Name\", COUNT(T1.\"concert_ID”) AS concert_count FROM \"concert” T1 INNER JOIN \"stadiuM\" T2 ON T1.\"Stadium_Id\" = T２.\"Stadum_Id\" GROUP BY T2.“Name”;",
    "output_result": 0
  },
  "24": {
    "db_id": "concert_singer",
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "ground_truth": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T2.Name, T２.Capacity FROM concert AS\tT1 JOIN stadium AS\tT2 ON T1.Stadium_ID = T２.Stadium_Id WHERE T1.Year >= '20１４' GROUP BY T2.Stadium_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "25": {
    "db_id": "concert_singer",
    "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "ground_truth": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
    "output_sql": "SELECT t2.Name, t1.Capacity FROM concert AS t1 JOIN stadium AS t2 ON t1.Stadium_ID = t1.\"Stadium_Id\" WHERE t1.Year > 13 GROUP BY t2.Stadium_Id ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "26": {
    "db_id": "concert_singer",
    "question": "Which year has most number of concerts?",
    "ground_truth": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "27": {
    "db_id": "concert_singer",
    "question": "What is the year that had the most concerts?",
    "ground_truth": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "28": {
    "db_id": "concert_singer",
    "question": "Show the stadium names without any concert.",
    "ground_truth": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "output_sql": "SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT DISTINCT c.Stadium_Id FROM concert c);",
    "output_result": 1
  },
  "29": {
    "db_id": "concert_singer",
    "question": "What are the names of the stadiums without any concerts?",
    "ground_truth": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "output_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert );",
    "output_result": 1
  },
  "30": {
    "db_id": "concert_singer",
    "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "ground_truth": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "output_sql": "SELECT Country FROM singer WHERE Age > 39 INTERSECT SELECT Country FROM singer WHERE Age < 29;",
    "output_result": 1
  },
  "31": {
    "db_id": "concert_singer",
    "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "ground_truth": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "output_sql": "SELECT s.Name FROM stadium AS s EXCEPT SELECT DISTINCT s.Name FROM stadium As s JOIN concert AS c ON s.Stadium_ID = c.Stadium_Id WHERE c.Year = '2024';",
    "output_result": 0
  },
  "32": {
    "db_id": "concert_singer",
    "question": "What are the names of all stadiums that did not have a concert in 2014?",
    "ground_truth": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "output_sql": "SELECT T2.Name FROM \"stadiu\" AS T2 EXCEPT SELECT T1.Name FROM \"concert\"T1 JOIN \"stadio\" T2 ON T1.Stadium_ID = T2.Stadium_Id WHERE T1.Year = '2024';",
    "output_result": 0
  },
  "33": {
    "db_id": "concert_singer",
    "question": "Show the name and theme for all concerts and the number of singers in each concert.",
    "ground_truth": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "output_sql": "SELECT T1.concert_Name, 郭1.Theme, COUNT(*) AS Number_of_Singers FROM concert AS T1 JOIN singer_in_consert AS T2 ON Т1.concet_ID = T2.concет_ID GROUP BY т2.concent_ID;",
    "output_result": 0
  },
  "34": {
    "db_id": "concert_singer",
    "question": "What are the names , themes , and number of singers for every concert ?",
    "ground_truth": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
    "output_sql": "SELECT T1.\"concert_Name\", 郭1.\"Theme\", COUNT(*) AS number_of_Singers FROM \"concert\"T1 JOIN (\"singer_IN_concert\"T2 ON T1.“concert_ID” = T1.”concert_ID” GROUP BY Т1.“concer_t_ID” ORDER BY Т1.“conc_er_t_ID”;",
    "output_result": 0
  },
  "35": {
    "db_id": "concert_singer",
    "question": "List singer names and number of concerts for each singer.",
    "ground_truth": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "output_sql": "SELECT T2.Name, COUNT(T1.concert_ID) AS Number_of_Concerts FROM singer_in_consert AS T0 JOIN singer AS T3 ON T0.Singer_ID = T3.Singer_Id GROUP BY T3.singer_Id;",
    "output_result": 0
  },
  "36": {
    "db_id": "concert_singer",
    "question": "What are the names of the singers and number of concerts for each person?",
    "ground_truth": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "output_sql": "SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s INNER JOIN singer_in_CONCERT sc ON s.Singer_ID = sc.Singer_Id GROUP BY s.SINGER_ID, s.Name ORDER BY s.Name;",
    "output_result": 1
  },
  "37": {
    "db_id": "concert_singer",
    "question": "List all singer names in concerts in year 2014.",
    "ground_truth": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "output_sql": "SELECT T2.Name FROM \"sINGER_IN_CONCERT\" AS T１ JOIN \"SINGER\" AS Т2 ON T1.Singer_ID = T２.Singer_Id JOIN “CONCERT” AS T３ ON T１.Concert_ID = Т3.Concert_Id WHERE Т3.Year = '20１４';",
    "output_result": 0
  },
  "38": {
    "db_id": "concert_singer",
    "question": "What are the names of the singers who performed in a concert in 2014?",
    "ground_truth": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "output_sql": "SELECT DISTINCT T2.Name FROM \"singers\" AS T2 JOIN \"sINGER_IN_CONCERT\" AST1 ON T1.Singer_ID = T1.Concert_ID JOIN 'concert' AS T3 ON T3.Concert_Id = Tl.Concert_id WHERE T3.Year = '2024';",
    "output_result": 0
  },
  "39": {
    "db_id": "concert_singer",
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "ground_truth": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "output_sql": "SELECT s.Name, s.Country FROM singer s WHERE s.Song_Name LIKE '%Hey%';",
    "output_result": 1
  },
  "40": {
    "db_id": "concert_singer",
    "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "ground_truth": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "output_sql": "SELECT s.name, s.country FROM singer s WHERE s.song_name LIKE '%Hey%';",
    "output_result": 1
  },
  "41": {
    "db_id": "concert_singer",
    "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "ground_truth": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "output_sql": "SELECT t2.Name, t2.Location FROM concert t1 JOIN stadium t2 ON t1.Stadium_ID = t2.Stadium_Id WHERE t1.Year == '2024' INTERSECT SELECTt2.Name,t2.Location FROM concertt1 JOIN stadium t1 ON t2.stadum_id = t1.staduim_id WHERE t1.year == '1987';",
    "output_result": 0
  },
  "42": {
    "db_id": "concert_singer",
    "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "ground_truth": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "output_sql": "SELECT T2.Name, T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T２.Stadium_Id WHERE T1 Year = '2004' INTERSECT SELECTT2.Name,T2.Location FROM concertAS T1 JOIN stadiumAS T2ON T1. Stadium_ID =T2.Stadium_id WHERET1.Year='2025';",
    "output_result": 0
  },
  "43": {
    "db_id": "concert_singer",
    "question": "Find the number of concerts happened in the stadium with the highest capacity .",
    "ground_truth": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "output_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 );",
    "output_result": 1
  },
  "44": {
    "db_id": "concert_singer",
    "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "ground_truth": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "output_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);",
    "output_result": 1
  },
  "45": {
    "db_id": "pets_1",
    "question": "Find the number of pets whose weight is heavier than 10.",
    "ground_truth": "SELECT count(*) FROM pets WHERE weight  >  10",
    "output_sql": "SELECT COUNT(*) FROM Pets WHERE weight >10;",
    "output_result": 1
  },
  "46": {
    "db_id": "pets_1",
    "question": "How many pets have a greater weight than 10?",
    "ground_truth": "SELECT count(*) FROM pets WHERE weight  >  10",
    "output_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 1０;",
    "output_result": 0
  },
  "47": {
    "db_id": "pets_1",
    "question": "Find the weight of the youngest dog.",
    "ground_truth": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "output_sql": "SELECT p.weight FROM Pets p JOIN Student s ON p.PetID = s.StuID WHERE p.PetalType = 'dog' ORDER BY p.pet_age ASC LIMIT 1;",
    "output_result": 0
  },
  "48": {
    "db_id": "pets_1",
    "question": "How much does the youngest dog weigh?",
    "ground_truth": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "output_sql": "SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1;",
    "output_result": 1
  },
  "49": {
    "db_id": "pets_1",
    "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "ground_truth": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "output_sql": "SELECT MAX(weight) AS max_weight, petType FROM pets GROUP BY petType;",
    "output_result": 1
  },
  "50": {
    "db_id": "pets_1",
    "question": "List the maximum weight and type for each type of pet.",
    "ground_truth": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "output_sql": "SELECT MAX(weight) AS max_weight, petType FROM Pets GROUP BY petType;",
    "output_result": 1
  },
  "51": {
    "db_id": "pets_1",
    "question": "Find number of pets owned by students who are older than 20.",
    "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "output_sql": "SELECT COUNT(*) FROM Student AS T1 JOIN Has_PET AS T2 ON T1.StuID = T２.StuId WHERE T1.Age > ２０;",
    "output_result": 0
  },
  "52": {
    "db_id": "pets_1",
    "question": "How many pets are owned by students that have an age greater than 20?",
    "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "output_sql": "SELECT COUNT(T1.StuID) FROM Student AS T₁ INNER JOIN Has_PET AS T2 ON T1.Stuid =T2.StuId WHERE T1.Age > ２０;",
    "output_result": 0
  },
  "53": {
    "db_id": "pets_1",
    "question": "Find the number of dog pets that are raised by female students (with sex F).",
    "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "output_sql": "SELECT COUNT(*) FROM Student AS T1 JOIN Has_PET AS T2 ON T１.StuID = T２.StuId JOIN Pets AS T3 ON T２.PetID = Т3.PetId WHERE T1.Sex = 'F' AND T3.PetAddress = 'dog';",
    "output_result": 0
  },
  "54": {
    "db_id": "pets_1",
    "question": "How many dog pets are raised by female students?",
    "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "output_sql": "SELECT COUNT(*) FROM Student AS T1 JOIN Has_PET AS T2 ON T1.StuID = T２.StuId JOIN Pets AS T3 ON T2.PetID = Т3.PetId WHERE T1.Sex = 'f' AND T3.PetAddress = 'Dog';",
    "output_result": 0
  },
  "55": {
    "db_id": "pets_1",
    "question": "Find the number of distinct type of pets.",
    "ground_truth": "SELECT count(DISTINCT pettype) FROM pets",
    "output_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets;",
    "output_result": 1
  },
  "56": {
    "db_id": "pets_1",
    "question": "How many different types of pet are there?",
    "ground_truth": "SELECT count(DISTINCT pettype) FROM pets",
    "output_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets;",
    "output_result": 1
  },
  "57": {
    "db_id": "pets_1",
    "question": "Find the first name of students who have cat or dog pet.",
    "ground_truth": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "output_sql": "SELECT DISTINCT T2.Fname FROM Student AS T0 JOIN Has_PET AS T4 ON T0.StuID = T4.StuId JOIN Pets AS T5 ON T5.PetID =T4.PetId WHERE T5.pettype='cat'OR T5.petttype='dog';",
    "output_result": 0
  },
  "58": {
    "db_id": "pets_1",
    "question": "What are the first names of every student who has a cat or dog as a pet?",
    "ground_truth": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "output_sql": "SELECT DISTINCT T2.Fname FROM Student AS T1 JOIN Has_PET AS T2 ON T1.StuID = T２.StuId JOIN Pets AS T3 ON T2.PetID = Т3.PetId WHERE T3.PetAddress = 'cat' OR T３.PetType = 'dog';",
    "output_result": 0
  },
  "59": {
    "db_id": "pets_1",
    "question": "Find the first name of students who have both cat and dog pets .",
    "ground_truth": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "output_sql": "SELECT t1.fname FROM Student AS t1 JOIN Has_PET AS t2 ON t1.StuID = t2.StuId JOIN Pets AS t3 ON t2.PetID =\tt3.PetId WHERE t3.petType = 'cat' INTERSECT SELECT t2.fname FROM Student AS\tt1 JOIN Has_PEt AS t4 ON t4.StuI d = t1.S tuId JOiN Pets AS\tt3 ON\tt3.petId = t4.PetI d WHERE t3.p etType =\t'dog';",
    "output_result": 0
  },
  "60": {
    "db_id": "pets_1",
    "question": "What are the students' first names who have both cats and dogs as pets?",
    "ground_truth": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "output_sql": "SELECT T1.FNAME FROM Student AS T１ JOIN Has_PET AS T２ ON T1.StuID = T２.StuId JOIN Pets AS T３ ON T３.PetID = Т2.PetId WHERE T3.PetType = 'cat' INTERSECT SELECT Т1.FName FROMStudent AS T₁ JOINHas_Pet AS T₂ ON T₁.Stu ID = T₂.Stu Id JOINPets AS T₃ ON T₳.Pet ID = Т₂.Pet Id WHERE Т3.P et Type = 'dog';",
    "output_result": 0
  },
  "61": {
    "db_id": "pets_1",
    "question": "Find the major and age of students who do not have a cat pet.",
    "ground_truth": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "output_sql": "SELECT T1.Major, T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T3.StuIDs FROM Has_PET AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetId WHERE T3.petType = 'Cat' );",
    "output_result": 0
  },
  "62": {
    "db_id": "pets_1",
    "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
    "ground_truth": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "output_sql": "SELECT T1.Major, T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT DISTINCT H1.StuCid FROM Has_PET AS H1 JOIN Pets AS P1 ON H1.PetID = P1.PetalID WHERE P1.pet_type = 'Cat' );",
    "output_result": 0
  },
  "63": {
    "db_id": "pets_1",
    "question": "Find the id of students who do not have a cat pet.",
    "ground_truth": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "output_sql": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT DISTINCT T1.STUId FROMStudent AS T2 JOIN Has_PET AS T3 ON T2.StuId = T3.Stu_id JOIN Pets AS T4 ON T3.PetId =T4.PetID WHERE T4.Petype = 'cat';",
    "output_result": 0
  },
  "64": {
    "db_id": "pets_1",
    "question": "What are the ids of the students who do not own cats as pets?",
    "ground_truth": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "output_sql": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT DISTINCT T1.STUId FROMStudent AS T2 JOIN Has_PET AS T3 ON T2.StuId = T3.StuI d JOIN Pets AS T4 ON T3.PetId =T4.PetID WHERE T4.PETTYPE = 'cat';",
    "output_result": 0
  },
  "65": {
    "db_id": "pets_1",
    "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "ground_truth": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "output_sql": "SELECT T1(fname), T1(age) FROM Student AS T1 JOIN Has_PET AS T2 ON T1.StuID = T２.StuId JOIN Pets AS T3 ON T2.PetID = Т3.PetId WHERE T3.PETTYPE = 'dog' AND T1.STUID NOT IN ( SELECT T1_STU.Stu_ID FROM Student AS Т1_STУ JOIN Has_PeT AS T4 ON T１_СТУ.StuИd = T4.Stuиd Join Pets AS Т5 ON T5.PetИd= T4.Petиd WHERE Т5.PETType = 'cat' );",
    "output_result": 0
  },
  "66": {
    "db_id": "pets_1",
    "question": "What is the first name of every student who has a dog but does not have a cat?",
    "ground_truth": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "output_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_PET AS T2 ON T1.StuID = T２.StuId JOIN Pets AS T3 ON T3.PetID = Т2.PetId WHERE T3PetType = 'Dog' AND T1.STUID NOT IN ( SELECT T1_STU.Stu ID FROM Student AS Т1_STУ JOIN Has_PeT AS T２_STU ON T１_СТУ.StuИD = T₂_STU.СтuId JOIN Pets AS Т3_STUON T3_STУ.PetИd = T²_STU.Petid WHERE T3_StU.PetAddress = 'cat' );",
    "output_result": 0
  },
  "67": {
    "db_id": "pets_1",
    "question": "Find the type and weight of the youngest pet.",
    "ground_truth": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "output_sql": "SELECT pettype, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;",
    "output_result": 1
  },
  "68": {
    "db_id": "pets_1",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "ground_truth": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "output_sql": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;",
    "output_result": 1
  },
  "69": {
    "db_id": "pets_1",
    "question": "Find the id and weight of all pets whose age is older than 1.",
    "ground_truth": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "output_sql": "SELECT petid, weight FROM Pets WHERE pet_age >1;",
    "output_result": 1
  },
  "70": {
    "db_id": "pets_1",
    "question": "What is the id and weight of every pet who is older than 1?",
    "ground_truth": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "output_sql": "SELECT petid, weight FROM Pets WHERE pet_age > 0;",
    "output_result": 0
  },
  "71": {
    "db_id": "pets_1",
    "question": "Find the average and maximum age for each type of pet.",
    "ground_truth": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "output_sql": "SELECT AVG(petAge), MAX(petage), pettype FROM pets GROUP BY pettype;",
    "output_result": 0
  },
  "72": {
    "db_id": "pets_1",
    "question": "What is the average and maximum age for each pet type?",
    "ground_truth": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "output_sql": "SELECT AVG(petAge) AS average_age, MAX(petAgE) AS maximum_age,;",
    "output_result": 0
  },
  "73": {
    "db_id": "pets_1",
    "question": "Find the average weight for each pet type.",
    "ground_truth": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "output_sql": "SELECT avg(weight), pettype FROM pets GROUP BY pettype;",
    "output_result": 1
  },
  "74": {
    "db_id": "pets_1",
    "question": "What is the average weight for each type of pet?",
    "ground_truth": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "output_sql": "SELECT AVG(weight), pettype FROM pets GROUP BY pettype;",
    "output_result": 1
  },
  "75": {
    "db_id": "pets_1",
    "question": "Find the first name and age of students who have a pet.",
    "ground_truth": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "output_sql": "SELECT DISTINCT T1.fname, T1.age FROM Student AS T1 JOIN Has_PET AS T2 ON T1.StuID = T２.StuId;",
    "output_result": 0
  },
  "76": {
    "db_id": "pets_1",
    "question": "What are the different first names and ages of the students who do have pets?",
    "ground_truth": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "output_sql": "SELECT DISTINCT T1.fname, T2.age FROM Student AS T1 INNER JOIN Has_PET AS T2 ON T1.StuID = T1.STUID WHERE T1.Fname IS NOT NULL;",
    "output_result": 0
  },
  "77": {
    "db_id": "pets_1",
    "question": "Find the id of the pet owned by student whose last name is ‘Smith’.",
    "ground_truth": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "output_sql": "SELECT T2.PetID FROM Student AS T1 JOIN Has_PET AS T2 ON T1.StuID = T２.StuId WHERE T1_Lname = 'Smith';",
    "output_result": 0
  },
  "78": {
    "db_id": "pets_1",
    "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
    "ground_truth": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "output_sql": "SELECT T2.petid FROM Student AS T1 JOIN Has_PET AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith';",
    "output_result": 1
  },
  "79": {
    "db_id": "pets_1",
    "question": "Find the number of pets for each student who has any pet and student id.",
    "ground_truth": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "output_sql": "SELECT COUNT(*) AS num_pets, T1.StuID FROM Student AS T1 INNER JOIN Has_PET AS T2 ON T1.STUId = T２.STUID GROUP BY T1.STUId;",
    "output_result": 0
  },
  "80": {
    "db_id": "pets_1",
    "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "ground_truth": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
    "output_sql": "SELECT COUNT(*) AS pet_count, T1.stuID FROM Student AS T1 JOIN Has_PET AS T2 ON T1.STUID =T2.STUId GROUP BY T1_STUId;",
    "output_result": 0
  },
  "81": {
    "db_id": "pets_1",
    "question": "Find the first name and gender of student who have more than one pet.",
    "ground_truth": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "output_sql": "SELECT T1.fname, T1.sex FROM Student AS T1 INNER JOIN Has_PET AS T2 ON T1.StuID = T２.StuId GROUP BY T1.STUID HAVING COUNT(*) >1;",
    "output_result": 0
  },
  "82": {
    "db_id": "pets_1",
    "question": "What is the first name and gender of the all the students who have more than one pet?",
    "ground_truth": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "output_sql": "SELECT T1.fname, T1.sex FROM Student AS T１ JOIN Has_PET AS T２ ON T1.StuID = T２.StuId GROUP BY Т1.Stuid HAVING COUNT(*) >1;",
    "output_result": 0
  },
  "83": {
    "db_id": "pets_1",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "ground_truth": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "output_sql": "SELECT T1.LName FROM Student AS T１ JOIN Has_PET AS T2 ON T1.StuID = T２.StuId JOIN Pets AS T３ ON T3.PetID = Т2.PetId WHERE T3.petType = 'cat' AND T3.pet_age =3;",
    "output_result": 0
  },
  "84": {
    "db_id": "pets_1",
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "ground_truth": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "output_sql": "SELECT T1.LName FROM Student AS T１ JOIN Has_PET AS T２ ON T1.StuID = T２.StuId JOIN Pets AS T３ ON T３.PetID = Т2.PetId WHERE T3.PetType = 'cat' AND T3.petAge = ３;",
    "output_result": 0
  },
  "85": {
    "db_id": "pets_1",
    "question": "Find the average age of students who do not have any pet .",
    "ground_truth": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "output_sql": "SELECT AVG(s.age) FROM Student s WHERE s.StuID NOT IN (SELECT StuId FROM Has_PET);",
    "output_result": 1
  },
  "86": {
    "db_id": "pets_1",
    "question": "What is the average age for all students who do not own any pets ?",
    "ground_truth": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "output_sql": "SELECT AVG(S.age) FROM Student S WHERE S.StuID NOT IN (SELECT StuId FROM Has_PET);",
    "output_result": 1
  },
  "87": {
    "db_id": "car_1",
    "question": "How many continents are there?",
    "ground_truth": "SELECT count(*) FROM CONTINENTS;",
    "output_sql": "SELECT COUNT(*) FROM continents;",
    "output_result": 1
  },
  "88": {
    "db_id": "car_1",
    "question": "What is the number of continents?",
    "ground_truth": "SELECT count(*) FROM CONTINENTS;",
    "output_sql": "SELECT COUNT(*) FROM continents;",
    "output_result": 1
  },
  "89": {
    "db_id": "car_1",
    "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "ground_truth": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "output_sql": "SELECT T1 ContId, T1 Continent, COUNT(*) AS country_count FROM continents AS T1 JOIN countries AS T2 ON T1.contid = T1 continent GROUP BY t1.contId, t1.Continental ORDER BY t1.Contid;",
    "output_result": 0
  },
  "90": {
    "db_id": "car_1",
    "question": "For each continent, list its id, name, and how many countries it has?",
    "ground_truth": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "output_sql": "SELECT T1 ContId, T1 Continent, COUNT(*) AS country_count FROM continents AS T1 INNER JOIN countries AS T2 ON T1.contid = T2.continent GROUP BY T1_contid;",
    "output_result": 0
  },
  "91": {
    "db_id": "car_1",
    "question": "How many countries are listed?",
    "ground_truth": "SELECT count(*) FROM COUNTRIES;",
    "output_sql": "SELECT COUNT(*) FROM countries;",
    "output_result": 1
  },
  "92": {
    "db_id": "car_1",
    "question": "How many countries exist?",
    "ground_truth": "SELECT count(*) FROM COUNTRIES;",
    "output_sql": "SELECT COUNT(*) FROM countries;",
    "output_result": 1
  },
  "93": {
    "db_id": "car_1",
    "question": "How many models does each car maker produce? List maker full name, id and the number.",
    "ground_truth": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "output_sql": "SELECT T1.Fullname, T2.Id, COUNT(*) FROM car_makes AS T1 JOIN model_list AS T2 ON T1.id = T1.maker GROUP BY T1.fullname, t1.id;",
    "output_result": 0
  },
  "94": {
    "db_id": "car_1",
    "question": "What is the full name of each car maker, along with its id and how many models it produces?",
    "ground_truth": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "output_sql": "SELECT T1.fullName, T1.Id, COUNT(*) AS model_count FROM car_makes AS T0 JOIN model_list AS T3 ON T0.Id =T3.Maker GROUP BY t1.id ORDER BY t1.fullName;",
    "output_result": 0
  },
  "95": {
    "db_id": "car_1",
    "question": "Which model of the car has the minimum horsepower?",
    "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "output_sql": "SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T２.id ORDER BY CAST(T2.horsecapower AS REAL) ASC LIMIT 1;",
    "output_result": 0
  },
  "96": {
    "db_id": "car_1",
    "question": "What is the model of the car with the smallest amount of horsepower?",
    "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "output_sql": "SELECT T1 Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId =T2.Id ORDER BY T2.Horsepower Asc LIMIT 1;",
    "output_result": 0
  },
  "97": {
    "db_id": "car_1",
    "question": "Find the model of the car whose weight is below the average weight.",
    "ground_truth": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "output_sql": "SELECT T1.Model FROM \"car Names\" AS T1 JOIN \"carsData\" AST2 ON T1 MakeId =T2.Id WHERE T2.Weight < (SELECT AVG(Weight) FROM \"carsdata\");",
    "output_result": 0
  },
  "98": {
    "db_id": "car_1",
    "question": "What is the model for the car with a weight smaller than the average?",
    "ground_truth": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "output_sql": "SELECT T1.Model FROM \"carNames\" AS T1 JOIN \"carsData\" AS\tT2 ON T1 MakeId =\tT2 Id WHERE T2.Weight < (SELECT AVG(T2.Weight) FROM \"carsdata\" AS Т2);",
    "output_result": 0
  },
  "99": {
    "db_id": "car_1",
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "ground_truth": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "output_sql": "SELECT DISTINCT T2.\"Maker\" FROM \"car.makers\" AS T0 JOIN \"model.list\" AS t2 ON T0.\"Id\" = T1.\"Maker\" JOIN \"car.names\" AS TT3 ON T2.Model = Tt3.Model JOIN cars_data AS Tt4 ON Tt2.MakeId= Tt5.Id WHERE Tt6.Year = '1980';",
    "output_result": 0
  },
  "100": {
    "db_id": "car_1",
    "question": "What is the name of the different car makers who produced a car in 1970?",
    "ground_truth": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "output_sql": "SELECT DISTINCT T1.\"Maker\" FROM \"carMakers\" AS T１ JOIN \"modelList\" AS Т2 ON T1.“Id” = Т2.“Maker” JOIN \"carNames\" ASТ3 ON Т2.\"Model\" = Т3.\"Model\" JOIN \"carsData\" ASＴ4 ON Т3.“MakeId”＝Т4.“Id” WHERE Т4.“Year” = '１９７０';",
    "output_result": 0
  },
  "101": {
    "db_id": "car_1",
    "question": "Find the make and production time of the cars that were produced in the earliest year?",
    "ground_truth": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "output_sql": "SELECT T2 Make, T0.Year FROM cars_data AS T0 JOIN car_names AS T2 ON T0.Id =\tT2.MakeID WHERE T0.year = ( SELECT MIN(year) FROM cars_data );",
    "output_result": 0
  },
  "102": {
    "db_id": "car_1",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "ground_truth": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "output_sql": "SELECT T2 Make, T0.Year FROM cars_data AS T0 JOIN car_names AS T2 ON T0.Id =T2.MakeId WHERE T0.year = ( SELECT MIN(year) FROM cars_data );",
    "output_result": 0
  },
  "103": {
    "db_id": "car_1",
    "question": "Which distinct car models are the produced after 1980?",
    "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "output_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1_MODEL = T２_Model INNERJOIN cars_data AS T3 ON T2.MakeId = Т3.Id WHERE T3.Year > １９８０;",
    "output_result": 0
  },
  "104": {
    "db_id": "car_1",
    "question": "What are the different models for the cards produced after 1980?",
    "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "output_sql": "SELECT DISTINCT T2.Model FROM model_list T1 JOIN car_names T2 ON T1.Model = T２.Model JOIN cars_data T3 ON T2.MakeId =T3.Id WHERE T3.Year > １９８０;",
    "output_result": 0
  },
  "105": {
    "db_id": "car_1",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "ground_truth": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "output_sql": "SELECT c.Continent, COUNT(cm.Id) AS car_maker_count FROM continents c JOIN countries co ON c.ContId == co.Continent JOIN car_makes cm ON co.CountryId == cm.Country GROUP BY c.Continent;",
    "output_result": 0
  },
  "106": {
    "db_id": "car_1",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "ground_truth": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "output_sql": "SELECT T1.Coninent, COUNT(T3.Id) AS car_maker_count FROM continents T1 JOIN countries T2 ON T1 ContId =T2.Continent JOIN car_makes T3 ON T2.Countrty = T4.Country GROUP BY T1.CONTINENT;",
    "output_result": 0
  },
  "107": {
    "db_id": "car_1",
    "question": "Which of the countries has the most car makers? List the country name.",
    "ground_truth": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "output_sql": "SELECT T2 CountryName FROM car_makes AS T1 JOIN countries AS T2 ON T1.country = T1.COUNTRYID GROUP BY T2.countryname ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "108": {
    "db_id": "car_1",
    "question": "What is the name of the country with the most car makers?",
    "ground_truth": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "output_sql": "SELECT T2 CountryName FROM car_makes AS T1 JOIN countries AS T2 ON T1.country = T1.Countries.CountryId GROUP BY T2.countryname ORDER BY COUNT(T1.Maker) DESC LIMIT 1;",
    "output_result": 0
  },
  "109": {
    "db_id": "car_1",
    "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "ground_truth": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
    "output_sql": "SELECT COUNT(T1.Model), T2.FullName FROM model_list AS T1 JOIN car_makes AS T2 ON T1.Maker =T2.Id GROUP BY T2.Id;",
    "output_result": 0
  },
  "110": {
    "db_id": "car_1",
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "ground_truth": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
    "output_sql": "SELECT COUNT(*) AS model_count, t2.id, t1.fullname FROM model_list AS t1 JOIN car_makes AS t2 ON t1.maker = t2_id GROUP BY t2(id);",
    "output_result": 0
  },
  "111": {
    "db_id": "car_1",
    "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "ground_truth": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "output_sql": "SELECT T1.\"Accelerate\" FROM \"carsData\" AS T1 INNER JOIN \"carNames\" AST2 ON T1.“Id” = T２.“MakeId” WHERE T2.“Make” = 'amc Hornet Sportabout (SW)';",
    "output_result": 0
  },
  "112": {
    "db_id": "car_1",
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "ground_truth": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "output_sql": "SELECT T1.Accelerate FROM \"carsData\" AS T1 INNER JOIN \"carNames\" AS\tT2 ON T1 Id = T２.MakeId WHERE T2 Make = 'amc Hornet Sportabout (SW)';",
    "output_result": 0
  },
  "113": {
    "db_id": "car_1",
    "question": "How many car makers are there in france?",
    "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "output_sql": "SELECT COUNT(*) FROM car_makes AS T1 JOIN countries AS T2 ON T1.country = T２.countryid WHERE T2.countryname = 'france';",
    "output_result": 0
  },
  "114": {
    "db_id": "car_1",
    "question": "What is the number of makers of care in France?",
    "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "output_sql": "SELECT COUNT(*) FROM car_makes AS T1 INNER JOIN countries AS T2 ON T1.country = T２.countryid WHERE T2.countryname = 'france';",
    "output_result": 0
  },
  "115": {
    "db_id": "car_1",
    "question": "How many car models are produced in the usa?",
    "ground_truth": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "output_sql": "SELECT COUNT(*) FROM model_list AS T1 JOIN car_makes AS T2 ON T1.maker =T2.id JOIN countries AS T3 ON T2.country = T３.countryid WHERE LOWER(T3.countryname) = 'us';",
    "output_result": 0
  },
  "116": {
    "db_id": "car_1",
    "question": "What is the count of the car models produced in the United States?",
    "ground_truth": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "output_sql": "SELECT COUNT(T1.Model) FROM model_list AS T1 JOIN car_makes AS T2 ON T1 Maker = T1.Id JOIN countries AS T3 ON T2 Country = T4.CountryId WHERE T3 CountryName = 'USA';",
    "output_result": 0
  },
  "117": {
    "db_id": "car_1",
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "ground_truth": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "output_sql": "SELECT AVG(Cars_Data.MPG) FROM CARS_DATA WHERE Cylinders = 4;",
    "output_result": 1
  },
  "118": {
    "db_id": "car_1",
    "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "ground_truth": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "output_sql": "SELECT AVG(c.MPG) AS avg_mpg FROM cars_data c WHERE c.Cylinders = 4;",
    "output_result": 1
  },
  "119": {
    "db_id": "car_1",
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "ground_truth": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "output_sql": "SELECT MIN(c.Weight) FROM cars_data c WHERE c.Cylinders = 0 AND c.Year = 2024;",
    "output_result": 0
  },
  "120": {
    "db_id": "car_1",
    "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "ground_truth": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "output_sql": "SELECT MIN(weight) FROM cars_data WHERE cylinders = 6 AND year = 50;",
    "output_result": 0
  },
  "121": {
    "db_id": "car_1",
    "question": "What are all the makers and models?",
    "ground_truth": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "output_sql": "SELECT Maker,Model FROM model_list;",
    "output_result": 1
  },
  "122": {
    "db_id": "car_1",
    "question": "What are the makers and models?",
    "ground_truth": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "output_sql": "SELECT ml.Maker, cn.Model FROM model_list ml JOIN car_names cn ON ml.MAKER = cn.Make;",
    "output_result": 0
  },
  "123": {
    "db_id": "car_1",
    "question": "What are the countries having at least one car maker? List name and id.",
    "ground_truth": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "output_sql": "SELECT T1.\"CountryName\", T1.“CountryId” FROM \"COUNTRY\" AS T1 INNER JOIN \"CARMAKERS\" AST2 ON T1.”CountryId“ = T1。“Country” GROUP BY T1。”CountryId“, T1.’CountryName’ HAVING COUNT(*) >=1 ORDER BY T2.”CountryName”, T1.'CountryId';",
    "output_result": 0
  },
  "124": {
    "db_id": "car_1",
    "question": "What are the names and ids of all countries with at least one car maker?",
    "ground_truth": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "output_sql": "SELECT T1 CountryName, T1_countryId FROM countries AS T1 JOIN car_makes AS T2 ON T1.countryId =T2.country GROUP BY T1(countryId) HAVING COUNT(*) >=1;",
    "output_result": 0
  },
  "125": {
    "db_id": "car_1",
    "question": "What is the number of the cars with horsepower more than 150?",
    "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "output_sql": "SELECT COUNT(*) FROM \"carsData\" WHERE \"Horsepower\">'15０';",
    "output_result": 0
  },
  "126": {
    "db_id": "car_1",
    "question": "What is the number of cars with a horsepower greater than 150?",
    "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "output_sql": "SELECT COUNT(*) FROM \"carsData\" WHERE \"Horsepower\">15０;",
    "output_result": 0
  },
  "127": {
    "db_id": "car_1",
    "question": "What is the average weight of cars each year?",
    "ground_truth": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "output_sql": "SELECT AVG(C.Weight) AS avg( Weight ), C.Year FROM cars_data AS C GROUP BY C.Year ORDER BY avg(_weight), C.Year;",
    "output_result": 0
  },
  "128": {
    "db_id": "car_1",
    "question": "What is the average weight and year for each year?",
    "ground_truth": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "output_sql": "SELECT AVG(Weight), Year FROM CARS_DATA GROUP BY Year ORDER BY Year;",
    "output_result": 1
  },
  "129": {
    "db_id": "car_1",
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "ground_truth": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "output_sql": "SELECT DISTINCT T1.\"CountryName\" FROM \"countries\"T1 JOIN \"continENTS\"T2 ON T1.“Continent” = T２.“ContId” JOIN \"car makers\"T3 ON T１.“CountryId” = Т3.“Country” WHERE T2.“Continet” = 'europe' GROUP BY T1.”CountryName” HAVING COUNT(*) >=3 ORDER BY T１.”CountryNamе”;",
    "output_result": 0
  },
  "130": {
    "db_id": "car_1",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "ground_truth": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "output_sql": "SELECT DISTINCT t1.Country_name FROM countries AS t1 JOIN car_makes AS t2 ON t1.country_id = t2.country WHERE t1.continent = 'Europe' GROUP BY t1_country_name HAVING COUNT(*) >=3;",
    "output_result": 0
  },
  "131": {
    "db_id": "car_1",
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "ground_truth": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "output_sql": "SELECT T2.Horsepower, T1 Make FROM \"carNames\" AS T0 JOIN \"carsData\" AST2 ON T0.MakeId=T2.Id WHERE T2.Cylinders=3 ORDER BY T2.\"Horsepower\" DESC LIMIT 1;",
    "output_result": 0
  },
  "132": {
    "db_id": "car_1",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "ground_truth": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "output_sql": "SELECT T1 Make, T2.Horsepower FROM car_names AS T0 JOIN cars_data AS T3 ON T0.MakeId=T3.Id JOIN model_list AS T4 ON T4.Maker=T0.Makeid WHERE T3.Cylinders=3 ORDER BY T3.HorsePower DESC LIMIT 1;",
    "output_result": 0
  },
  "133": {
    "db_id": "car_1",
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "output_sql": "SELECT T1 Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId =T2.Id ORDER BY T2.MPG DESC LIMIT 1;",
    "output_result": 0
  },
  "134": {
    "db_id": "car_1",
    "question": "What is the car model with the highest mpg ?",
    "ground_truth": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
    "output_sql": "SELECT t1.Model FROM car_names AS t1 INNER JOIN cars_data AS t2 ON t1 MakeId =\tt2.Id ORDER BY CAST(t2.MPG AS REAL) DESC LIMIT 1;",
    "output_result": 0
  },
  "135": {
    "db_id": "car_1",
    "question": "What is the average horsepower of the cars before 1980?",
    "ground_truth": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "output_sql": "SELECT avg(horsepower) FROM cars_data WHERE year < 0;",
    "output_result": 0
  },
  "136": {
    "db_id": "car_1",
    "question": "What is the average horsepower for all cars produced before 1980 ?",
    "ground_truth": "select avg(horsepower) from cars_data where year  <  1980;",
    "output_sql": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 0;",
    "output_result": 0
  },
  "137": {
    "db_id": "car_1",
    "question": "What is the average edispl of the cars of model volvo?",
    "ground_truth": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "output_sql": "SELECT AVG(T1.edisPl) FROM car_names AS T0 JOIN cars_data AS T3 ON T0.MakeId= T3.Id WHERE T0.Model = 'volvo';",
    "output_result": 0
  },
  "138": {
    "db_id": "car_1",
    "question": "What is the average edispl for all volvos?",
    "ground_truth": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "output_sql": "SELECT AVG(T2.Edispl) FROM car_names AS T１ INNER JOIN cars_data AS T２ ON T1 MakeId = Т2 Id WHERE T1.Model ='volvo';",
    "output_result": 0
  },
  "139": {
    "db_id": "car_1",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "ground_truth": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "output_sql": "SELECT MAX(\"Accelerate\") AS Accelerate, \"Cylinder\" AS Cylindrs FROM cars_data GROUP BY \"Cilinders\" ORDER BY Accelerate ASC, Cyliders;",
    "output_result": 0
  },
  "140": {
    "db_id": "car_1",
    "question": "What is the maximum accelerate for all the different cylinders?",
    "ground_truth": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "output_sql": "SELECT MAX(Accelrate) AS Max_AccelerATE, Cylindrs FROM CARS_Data GROUP BY CylindrS;",
    "output_result": 0
  },
  "141": {
    "db_id": "car_1",
    "question": "Which model has the most version(make) of cars?",
    "ground_truth": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "output_sql": "SELECT t1.Model FROM CAR_NAMES t1 GROUP BY t1 Model ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "142": {
    "db_id": "car_1",
    "question": "What model has the most different versions?",
    "ground_truth": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "output_sql": "SELECT cn.Model FROM car_names cn GROUP BY cn.Model ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "143": {
    "db_id": "car_1",
    "question": "How many cars have more than 4 cylinders?",
    "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "output_sql": "SELECT COUNT(*) FROM \"carsData\" WHERE \"Cylinder\" > 5;",
    "output_result": 0
  },
  "144": {
    "db_id": "car_1",
    "question": "What is the number of cars with more than 4 cylinders?",
    "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "output_sql": "system\nYou are a helpful assistant that writes valid SQLite queries.\nGiven a database schema and a natural language question and some rules you should obey, generate the correct SQLite query.\nFocus on accuracy and follow SQLite syntax rules.\nuser\nDatabase Schema:\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\nQuestion: What is the number of cars with more than 4 cylinders?\n\nRules: ['1) When referencing the cars table: use the exact table name \"CARS_DATA\" with double quotes and proper case as shown in the schema. 2) When filtering for cars with more than 4 cylinders: use the condition \"Cylinders\" > 4 with the exact column name case and inequality direction. 3) When counting cars: count all rows from \"CARS_DATA\" that satisfy the cylinder condition rather than counting rows with 4 or fewer cylinders.']\n\nPlease generate a SQLite query that answers the question. Return only the SQL query without any explanations or markdown formatting.\nassistant\n\"SELECT COUNT(*) FROM \\\"CARS_Data\\\" WHERE \\\"Cylindrs\\\" > 5\";",
    "output_result": 0
  },
  "145": {
    "db_id": "car_1",
    "question": "how many cars were produced in 1980?",
    "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "output_sql": "SELECT COUNT(*) FROM \"carsData\" WHERE \"Year\" = 0;",
    "output_result": 0
  },
  "146": {
    "db_id": "car_1",
    "question": "In 1980, how many cars were made?",
    "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "output_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE YEAR = '1975';",
    "output_result": 0
  },
  "147": {
    "db_id": "car_1",
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "output_sql": "SELECT COUNT(*) FROM car_makes AS T1 JOIN model_list AS T2 ON T1.id = T２.maker WHERE T1.fullname = 'American MotorCompany';",
    "output_result": 0
  },
  "148": {
    "db_id": "car_1",
    "question": "What is the number of car models created by the car maker American Motor Company?",
    "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "output_sql": "SELECT COUNT(*) FROM car_makes T1 JOIN model_list T2 ON T1.id = T1.maker WHERE T1.fullname = 'American MotorCompany';",
    "output_result": 0
  },
  "149": {
    "db_id": "car_1",
    "question": "Which makers designed more than 3 car models? List full name and the id.",
    "ground_truth": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "output_sql": "SELECT T1 FullName, T2.Id FROM car_makes AS T1 JOIN model_list AS T2 ON T1.id = T1.maker GROUP BY T1.fullname, T3.id HAVING COUNT(*) >3;",
    "output_result": 0
  },
  "150": {
    "db_id": "car_1",
    "question": "What are the names and ids of all makers with more than 3 models?",
    "ground_truth": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "output_sql": "SELECT T1 Id, T2 FullName FROM car_makes AS T0 JOIN model_list AS T3 ON T0.Id =T3.Maker GROUP BY T0.id HAVING COUNT(*)>3;",
    "output_result": 0
  },
  "151": {
    "db_id": "car_1",
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "ground_truth": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "output_sql": "SELECT DISTINCT T2 Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.model = T1.makeid JOIN \"car_maker\" AS T3 ON T2.maker = t3.id JOIN cars_data AS T4 ON T4.id = T5.makeid WHERE T3.fullname = 'General Motors' OR T4.Weight > 4000;",
    "output_result": 0
  },
  "152": {
    "db_id": "car_1",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "ground_truth": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "output_sql": "SELECT DISTINCT T2 Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.model = T1.makeid JOIN \"car_maker\" AS T3 ON T2.maker = t3.id JOIN cars_data AS T4 ON T4.id = T5.makeid WHERE T3.fullname = 'General Motors' OR T4.Weight > 4000;",
    "output_result": 0
  },
  "153": {
    "db_id": "car_1",
    "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "ground_truth": "select distinct year from cars_data where weight between 3000 and 4000;",
    "output_sql": "SELECT DISTINCT c.Year FROM cars_data c WHERE c.Weight BETWEEN 3０００ AND ４００₀ ORDER BY c.Year;",
    "output_result": 0
  },
  "154": {
    "db_id": "car_1",
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "ground_truth": "select distinct year from cars_data where weight between 3000 and 4000;",
    "output_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3０００ AND 4００₀ ORDER BY Year;",
    "output_result": 0
  },
  "155": {
    "db_id": "car_1",
    "question": "What is the horsepower of the car with the largest accelerate?",
    "ground_truth": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "output_sql": "SELECT T1.Horsepower FROM \"carsData\" AS T1 ORDER BY T1.Accelerate DESC LIMIT 1;",
    "output_result": 0
  },
  "156": {
    "db_id": "car_1",
    "question": "What is the horsepower of the car with the greatest accelerate?",
    "ground_truth": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "output_sql": "SELECT T1.Horsepower FROM \"carsData\" AS T1 ORDER BY T1.Accelerate DESC LIMIT 1;",
    "output_result": 0
  },
  "157": {
    "db_id": "car_1",
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "ground_truth": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "output_sql": "SELECT T1.Cylinders FROM \"carsData\" AS T1 JOIN \"carNames\" AST2 ON T1.\"Id\" = T２.\"MakeId\" WHERE T2.\"Model\" = 'volvo' ORDER BY T1.“Accelerate” ASC LIMIT 1;",
    "output_result": 0
  },
  "158": {
    "db_id": "car_1",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "ground_truth": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "output_sql": "SELECT T1.Cylinders FROM \"carsData\" AS T1 INNER JOIN \"carNames\" AST2 ON T1.\"Id\" = T２.\"MakeId\" WHERE T2.\"Model\" = 'volvo' ORDER BY T1.“Accelerate” ASC LIMIT 1;",
    "output_result": 0
  },
  "159": {
    "db_id": "car_1",
    "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "output_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_Data ORDER BY Horsepower DESC LIMIT 1 );",
    "output_result": 1
  },
  "160": {
    "db_id": "car_1",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "output_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT Accelerate FROM CARS_Data ORDER BY HorsePower DESC LIMIT 0, 1);",
    "output_result": 1
  },
  "161": {
    "db_id": "car_1",
    "question": "How many countries has more than 2 car makers ?",
    "ground_truth": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "output_sql": "SELECT COUNT(*) FROM ( SELECT t1.CountryID FROM countries AS t1 INNER JOIN car_makes AS t2 ON t1 CountryID = t1.country GROUP BY t1.CountriesID HAVING COUNT(*) >2 ) AS filtered_countries;",
    "output_result": 0
  },
  "162": {
    "db_id": "car_1",
    "question": "What is the number of countries with more than 2 car makers ?",
    "ground_truth": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "output_sql": "SELECT COUNT(*) FROM ( SELECT c.CountryId FROM countries c INNER JOIN car_makes cm ON c.CountryID = cm.Country GROUP BY c.Country_id HAVING COUNT(*)>2 ) AS filtered_countries;",
    "output_result": 0
  },
  "163": {
    "db_id": "car_1",
    "question": "How many cars has over 6 cylinders?",
    "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "output_sql": "SELECT COUNT(*) FROM \"carsData\" WHERE \"Cylinder\" > 7;",
    "output_result": 0
  },
  "164": {
    "db_id": "car_1",
    "question": "What is the number of carsw ith over 6 cylinders?",
    "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "output_sql": "SELECT COUNT(*) FROM \"carsData\" WHERE \"Cylinder\" > 7;",
    "output_result": 0
  },
  "165": {
    "db_id": "car_1",
    "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
    "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "output_sql": "SELECT T1 Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid = T２.id WHERE T2.cylinders=4 ORDER BY T2.Horsepower DESC LIMIT 1;",
    "output_result": 0
  },
  "166": {
    "db_id": "car_1",
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "output_sql": "SELECT T1 Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 MakeId =T2 Id WHERE T2 Cylinders=4 ORDER BY T2 Horsepower DESC LIMIT 1;",
    "output_result": 0
  },
  "167": {
    "db_id": "car_1",
    "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "ground_truth": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
    "output_sql": "SELECT T1.MakeId, T2 Make FROM \"carsData\" AS T0 JOIN \"carNames\" AS\tT2 ON T0.Id = T2.MakId WHERE T0.HorsePower > (SELECT MIN(Horsepower) FROM \"carsdata\") AND T0.Cylindrs <= 3;",
    "output_result": 0
  },
  "168": {
    "db_id": "car_1",
    "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "ground_truth": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
    "output_sql": "SELECT T2.MakeId, T2_MAKE FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T２.MakeId WHERE T1.Horsepower > ( SELECT MIN(Horsepower ) FROM cars_Data ) AND T1.Cylinders < ４;",
    "output_result": 0
  },
  "169": {
    "db_id": "car_1",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "ground_truth": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "output_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 7 OR Year < 80;",
    "output_result": 0
  },
  "170": {
    "db_id": "car_1",
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "ground_truth": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "output_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1800;",
    "output_result": 1
  },
  "171": {
    "db_id": "car_1",
    "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "output_sql": "SELECT DISTINCT T2.model FROM model_list AS T1 JOIN car_names AS T2 ON T1_model = T1.MODEL JOIN cars_data AS T3 ON T2.makeid = T5.id JOIN \"car makers\" AS T4 ON T4.id = T8.maker WHERE T3.Weight < 450 AND T4.Fullname != 'Ford Motors Company';",
    "output_result": 0
  },
  "172": {
    "db_id": "car_1",
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "output_sql": "SELECT DISTINCT T2.model FROM model_list AS T0 JOIN car_names AS T6 ON T0.model = T6.model JOIN cars_data AS T7 ON T6.makeid = T7.id JOIN.car_makers AS T8 ON T8.id = T0.maker WHERE T7.weight < '35' AND T8.fullname != 'Ford Motor Co.';",
    "output_result": 0
  },
  "173": {
    "db_id": "car_1",
    "question": "What are the name of the countries where there is not a single car maker?",
    "ground_truth": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "output_sql": "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT c.CountryName FROM countries as c JOIN car_makes as cm ON c.CountryId = cm.Country;",
    "output_result": 0
  },
  "174": {
    "db_id": "car_1",
    "question": "What are the names of the countries with no car makers?",
    "ground_truth": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "output_sql": "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT DISTINCT T1 CountryName FROM countries AS\tT1 JOIN car_makes AS T2 ON T1.CountriesId =\tT2.Country;",
    "output_result": 0
  },
  "175": {
    "db_id": "car_1",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "ground_truth": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
    "output_sql": "SELECT T1.Id, T1.Maker FROM car_makes AS T1 JOIN model_list AS T2 ON T1 Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1_Id HAVING COUNT(T2.Model) >= 2 INTERSECT SELECT DISTINCT T1.ID, T2.Make FROM Car_Makers AS T0 JOIN Model_List AS T4 ON T0.Id = T4.Maker JOIN Car_Names AS T5 ON T4.Model =T5.Model WHERE T0.Country IN (SELECT Country FROM Car_Makes WHERE COUNT(*) > 3) GROUP BY t1.Id HAVing COUNT(t3.Model) > 4;",
    "output_result": 0
  },
  "176": {
    "db_id": "car_1",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "ground_truth": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "output_sql": "SELECT T1 Id, T0 Maker FROM car_makes AS T1 JOIN model_list AS T0 ON T1.id = T0.maker GROUP BY T1_id HAVING COUNT(*) >=2 INTERSECT SELECT DISTINCT T1 id, T3 maker FROM model_list as T2 JOIN car_names as T3 ON T2.Model = T1.Model JOIN Car_Makers as T1 ON T3.Make = T4.Make GROUP by T3.make HAVing count(*)>3;",
    "output_result": 0
  },
  "177": {
    "db_id": "car_1",
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "ground_truth": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "output_sql": "SELECT T1.\"CountryId\", T1.“CountryName” FROM \"countries” AS T1 JOIN \"carMakers\" AS T２ ON T1.”CountryId” = T２.”Country” GROUP BY T1。“CountryId”, T1。”CountryName” HAVING COUNT(*) >3;",
    "output_result": 0
  },
  "178": {
    "db_id": "car_1",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "ground_truth": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
    "output_sql": "SELECT T1.\"CountryId\", T1.“CountryName” FROM \"countries' AS T1 JOIN \"carMakers\" AS T2 ON T1.”CountryId” = T２.”Country” GROUP BY T1。“CountryId” HAVING COUNT(T2.”Id”) > ３;",
    "output_result": 0
  },
  "179": {
    "db_id": "flight_2",
    "question": "Which country does Airline \"JetBlue Airways\" belong to?",
    "ground_truth": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "output_sql": "SELECT DISTINCT T2.Country FROM airlines AS T1 JOIN flights AS T3 ON T1.uid = T3.Airline JOIN airports AS T2 ON T3.SourceAirport = T2.Airport_code WHERE T1.AirlinE = 'JetBlue Airlines';",
    "output_result": 0
  },
  "180": {
    "db_id": "flight_2",
    "question": "What country is Jetblue Airways affiliated with?",
    "ground_truth": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "output_sql": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airlines';",
    "output_result": 0
  },
  "181": {
    "db_id": "flight_2",
    "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "ground_truth": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "output_sql": "SELECT Abbreviation FROM AIRLINES WHERE \"AirLINE\" = \"Jet Blue Airways\";",
    "output_result": 0
  },
  "182": {
    "db_id": "flight_2",
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "ground_truth": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "output_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"Jetblue Airways\";",
    "output_result": 0
  },
  "183": {
    "db_id": "flight_2",
    "question": "List all airline names and their abbreviations in \"USA\".",
    "ground_truth": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "output_sql": "SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = \"USA\";",
    "output_result": 1
  },
  "184": {
    "db_id": "flight_2",
    "question": "What are the airline names and abbreviations for airlines in the USA?",
    "ground_truth": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "output_sql": "SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = 'USA';",
    "output_result": 1
  },
  "185": {
    "db_id": "flight_2",
    "question": "List the airport code and name in the city of Anthony.",
    "ground_truth": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "output_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\";",
    "output_result": 1
  },
  "186": {
    "db_id": "flight_2",
    "question": "Give the airport code and airport name corresonding to the city Anthony.",
    "ground_truth": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "output_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\";",
    "output_result": 1
  },
  "187": {
    "db_id": "flight_2",
    "question": "How many airlines do we have?",
    "ground_truth": "SELECT count(*) FROM AIRLINES",
    "output_sql": "SELECT count(*) FROM airlines;",
    "output_result": 1
  },
  "188": {
    "db_id": "flight_2",
    "question": "What is the total number of airlines?",
    "ground_truth": "SELECT count(*) FROM AIRLINES",
    "output_sql": "SELECT COUNT(*) FROM airlines;",
    "output_result": 1
  },
  "189": {
    "db_id": "flight_2",
    "question": "How many airports do we have?",
    "ground_truth": "SELECT count(*) FROM AIRPORTS",
    "output_sql": "SELECT COUNT(*) FROM AIRPORTS;",
    "output_result": 1
  },
  "190": {
    "db_id": "flight_2",
    "question": "Return the number of  airports.",
    "ground_truth": "SELECT count(*) FROM AIRPORTS",
    "output_sql": "SELECT count(*) FROM airports;",
    "output_result": 1
  },
  "191": {
    "db_id": "flight_2",
    "question": "How many flights do we have?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS",
    "output_sql": "SELECT count(*) FROM flights;",
    "output_result": 1
  },
  "192": {
    "db_id": "flight_2",
    "question": "Return the number of flights.",
    "ground_truth": "SELECT count(*) FROM FLIGHTS",
    "output_sql": "SELECT COUNT(*) FROM flights;",
    "output_result": 1
  },
  "193": {
    "db_id": "flight_2",
    "question": "Which airline has abbreviation 'UAL'?",
    "ground_truth": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "output_sql": "SELECT Airline FROM \"AIRLINEs\" WHERE \"Abbrevitation\" = 'UAL';",
    "output_result": 0
  },
  "194": {
    "db_id": "flight_2",
    "question": "Give the airline with abbreviation 'UAL'.",
    "ground_truth": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "output_sql": "SELECT Airline FROM AIRLINES WHERE \"Abbrewiation\" = \"UAL\";",
    "output_result": 0
  },
  "195": {
    "db_id": "flight_2",
    "question": "How many airlines are from USA?",
    "ground_truth": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "output_sql": "SELECT count(*) FROM AIRLINES WHERE \"Country\"\" = 'USA';",
    "output_result": 0
  },
  "196": {
    "db_id": "flight_2",
    "question": "Return the number of airlines in the USA.",
    "ground_truth": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "output_sql": "SELECT count(*) FROM AIRLIES WHERE Country = 'USA';",
    "output_result": 0
  },
  "197": {
    "db_id": "flight_2",
    "question": "Which city and country is the Alton airport at?",
    "ground_truth": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "output_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton';",
    "output_result": 1
  },
  "198": {
    "db_id": "flight_2",
    "question": "Give the city and country for the Alton airport.",
    "ground_truth": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "output_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton';",
    "output_result": 1
  },
  "199": {
    "db_id": "flight_2",
    "question": "What is the airport name for airport 'AKO'?",
    "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "output_sql": "SELECT AirportName FROM airports WHERE AirportCode = \"AKО\";",
    "output_result": 0
  },
  "200": {
    "db_id": "flight_2",
    "question": "Return the name of the airport with code 'AKO'.",
    "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "output_sql": "SELECT AirportName FROM airports WHERE AirportCode='AKO';",
    "output_result": 1
  },
  "201": {
    "db_id": "flight_2",
    "question": "What are airport names at City 'Aberdeen'?",
    "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "output_sql": "SELECT AirportName FROM airports WHERE City = 'Abernethy';",
    "output_result": 1
  },
  "202": {
    "db_id": "flight_2",
    "question": "What are the names of airports in Aberdeen?",
    "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "output_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Abernethy\";",
    "output_result": 1
  },
  "203": {
    "db_id": "flight_2",
    "question": "How many flights depart from 'APG'?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "output_sql": "SELECT COUNT(*) FROM flights WHERE \"Source Airport\" = 'APD';",
    "output_result": 1
  },
  "204": {
    "db_id": "flight_2",
    "question": "Count the number of flights departing from 'APG'.",
    "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "output_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = \"APGs\";",
    "output_result": 1
  },
  "205": {
    "db_id": "flight_2",
    "question": "How many flights have destination ATO?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "output_sql": "SELECT COUNT(*) FROM flights WHERE \"Dest Airport\" = \"ATO\";",
    "output_result": 1
  },
  "206": {
    "db_id": "flight_2",
    "question": "Count the number of flights into ATO.",
    "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "output_sql": "SELECT COUNT(*) FROM FLIGHTS WHERE \"Dest Airport\" = \"ATO\";",
    "output_result": 1
  },
  "207": {
    "db_id": "flight_2",
    "question": "How many flights depart from City Aberdeen?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1 SourceAirport =T2 AirportCode WHERE T2 City = 'Aberden';",
    "output_result": 0
  },
  "208": {
    "db_id": "flight_2",
    "question": "Return the number of flights departing from Aberdeen.",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 INNER JOIN airports AS T2 ON T1 SourceAirport =T2 AirportCode WHERE T2 City = 'Aberden';",
    "output_result": 0
  },
  "209": {
    "db_id": "flight_2",
    "question": "How many flights arriving in Aberdeen city?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T₁ JOIN airports AS T₂ ON T₁.Dest Airport = T₂.AirPortCode WHERE T₂.City = 'Aberden';",
    "output_result": 0
  },
  "210": {
    "db_id": "flight_2",
    "question": "Return the number of flights arriving in Aberdeen.",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1 DestAirport =T2 AirportCode WHERE T2 City = 'Aberdee';",
    "output_result": 0
  },
  "211": {
    "db_id": "flight_2",
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1 DestAirport =T2 AirportCode JOIN airplanes AS T3 ON T2 SourceAirport = t3 AirportCode WHERE T3 City = 'Abern' AND T2 City = \"ashley\";",
    "output_result": 0
  },
  "212": {
    "db_id": "flight_2",
    "question": "How many flights fly from Aberdeen to Ashley?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T２ ON T1 DestAirport = Т2 AirportCode JOIN airplanes AS T３ ON T１ SourceAirport =Т3 AirportCode WHERE T3 City = 'Aberden' AND T2 City = ‘Ashley’;",
    "output_result": 0
  },
  "213": {
    "db_id": "flight_2",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline =T2.uid WHERE T2.airline='JetBlue Airlines';",
    "output_result": 0
  },
  "214": {
    "db_id": "flight_2",
    "question": "Give the number of Jetblue Airways flights.",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline =T2.uid WHERE T2.AIRLINE = 'JetBlue Airlines';",
    "output_result": 0
  },
  "215": {
    "db_id": "flight_2",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T2 JOIN airlines AS T1 ON T2.airline =T1.uid WHERE T1.Aircraft = 'United AirLines' AND T2.DESTAIRPORT = 'ASY';",
    "output_result": 0
  },
  "216": {
    "db_id": "flight_2",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T2 JOIN airlines AS T1 ON T2.airline =T1.uid WHERE T1.Aircraft = 'United Airlines' AND T2.DestinationAirport = 'ASY';",
    "output_result": 0
  },
  "217": {
    "db_id": "flight_2",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T2 JOIN airlines AS T1 ON T2.airline =T1.uid WHERE T1.AIRLINE = \"United AirLINES\" AND T2.Sourceairport = \"Ahd\";",
    "output_result": 1
  },
  "218": {
    "db_id": "flight_2",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T2 JOIN airlines AS T1 ON T2.airline =T1.uid WHERE T1.AIRLINE = \"United AirLINES\" AND T2.Sourceairport = \"Ahd\";",
    "output_result": 1
  },
  "219": {
    "db_id": "flight_2",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1 DestAirport =T2 AirportCode JOIN airlines AS T3 ON T3 uid = T0 Airline WHERE T3 Airline = 'United Airlines' AND T2 City = 'Abernethy';",
    "output_result": 0
  },
  "220": {
    "db_id": "flight_2",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "output_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airlane = airlines.uid JOIN airports ON flights.DestinationAirport = airports.AirPortCode WHERE airlines.AirLine = 'United Airlines' AND airports.City = 'Aberden';",
    "output_result": 0
  },
  "221": {
    "db_id": "flight_2",
    "question": "Which city has most number of arriving flights?",
    "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1 City, COUNT(*) AS flight_count FROM airports AS T1 JOIN flights AS F ON T1.AirPortCode = F.Dest Airport GROUP BY T1.city ORDER BY flight_count DESC LIMIT 1;",
    "output_result": 0
  },
  "222": {
    "db_id": "flight_2",
    "question": "Which city has the most frequent destination airport?",
    "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT a.City FROM airports a JOIN flights f ON a.AirporterCode = f.Dest Airport GROUP BY a.City ORDER BY COUNT(f.FlightNo) DESC LIMIT 1;",
    "output_result": 0
  },
  "223": {
    "db_id": "flight_2",
    "question": "Which city has most number of departing flights?",
    "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1 City, COUNT(*) AS flight_count FROM airports T1 JOIN flights T2 ON T1.airportcode = T２.sourceairport GROUP BY T1.city ORDER BY flight_count DESC LIMIT 1;",
    "output_result": 0
  },
  "224": {
    "db_id": "flight_2",
    "question": "Which city is the most frequent source airport?",
    "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1 City FROM airports AS T1 JOIN flights AS T2 ON T1 AirportCode =T2 SourceAirport GROUP BY T1City ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "225": {
    "db_id": "flight_2",
    "question": "What is the code of airport that has the highest number of flights?",
    "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1_airportcode = T２_destairport OR T１_airportCode＝T2_sourceairport GROUP BY t1.airporTCODE ORDER BY COUNT(*) DESC LIMIT 0,1;",
    "output_result": 0
  },
  "226": {
    "db_id": "flight_2",
    "question": "What is the airport code of the airport with the most flights?",
    "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1 AirportCode FROM airports AS T1 INNER JOIN flights AS T2 ON T1.ApportCode == T2.sourceAirport OR t1.airportcode == t2.destairport GROUP BY T1.airporcode ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "227": {
    "db_id": "flight_2",
    "question": "What is the code of airport that has fewest number of flights?",
    "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "output_sql": "SELECT T1.ApportCode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T２.sourceairport OR T１.airportCode＝T2.destairport GROUP BY T1.apportCode ORDER BY COUNT(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "228": {
    "db_id": "flight_2",
    "question": "Give the code of the airport with the least flights.",
    "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "output_sql": "SELECT T1 AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T２.sourceairport OR T１.airportCode＝T2.destairport GROUP BY T1_airportCode ORDER BY COUNT(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "229": {
    "db_id": "flight_2",
    "question": "Which airline has most number of flights?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T1(AirLine) GROUP BY T1.aerline ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "230": {
    "db_id": "flight_2",
    "question": "What airline serves the most flights?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T1(AirLine) GROUP BY T1.airstline ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "231": {
    "db_id": "flight_2",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "ground_truth": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "output_sql": "SELECT T1.Abbriviation, T1.country FROM airlines AS T0 JOIN flights AS T3 ON T0.uid =T3.airline GROUP BY T0.abbrivication, T0.country ORDER BY COUNT(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "232": {
    "db_id": "flight_2",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "ground_truth": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "output_sql": "SELECT T1.Abbriviation,\tT1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T1(AirLine) GROUP BY T1.airline ORDER BY COUNT(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "233": {
    "db_id": "flight_2",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "output_sql": "SELECT DISTINCT T1 Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1(uid) = T２(AirLine) WHERE T2.Source Airport = 'A HD';",
    "output_result": 0
  },
  "234": {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with source airport AHD?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "output_sql": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T２(AirLine) WHERE T2(SourceAirport) = \"АHD\";",
    "output_result": 0
  },
  "235": {
    "db_id": "flight_2",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "output_sql": "SELECT T1.Airlime FROM Airlines AS T0 JOIN Flights AS T3 ON T0.uid = t3.AirLine WHERE T3.DestAirPort = 'Ahd';",
    "output_result": 0
  },
  "236": {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with destination airport AHD?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "output_sql": "SELECT DISTINCT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T２(AirLine) WHERE T2.destairport = 'AHD';",
    "output_result": 0
  },
  "237": {
    "db_id": "flight_2",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "output_sql": "SELECT T1.Airlime FROM airlines AS T1 JOIN flights AS T2 ON T1.uid == T2.airline WHERE T2.SourceAirporrt == 'APD';",
    "output_result": 0
  },
  "238": {
    "db_id": "flight_2",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "output_sql": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T２(Airiline) WHERE T2(SourceAirport) = \"AP G\" INTERSECT SELECT T１.airline FROM airlines as T1 JOIN flights as T2 on T1(uid) = Т2(AirLine) WHERE T２(SourceAirport)= \"C VO\";",
    "output_result": 0
  },
  "239": {
    "db_id": "flight_2",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "output_sql": "SELECT T1.AirLINE FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T２(AirLine) WHERE T2(SourceAirport) = 'Cvo' EXCEPT SELECT\tT1.AIRLINE FROM airlines AS Т1 JOIN flights AS Т2 ON Т1(uid)=Т2(AirL ine) WHERE Т2(SourceAirPort) = ‘APG’;",
    "output_result": 0
  },
  "240": {
    "db_id": "flight_2",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "output_sql": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T２(AirLine) WHERE T2(SourceAirport) = 'CVO' EXCEPT SELECTT1.airlinE FROM Airlines AS Tl JOIN Flights AS T₂ ON T₁(uid)＝T₂(AirLINE) WHERE T₂(SourceAirport)= 'APG';",
    "output_result": 0
  },
  "241": {
    "db_id": "flight_2",
    "question": "Find all airlines that have at least 10 flights.",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "output_sql": "SELECT DISTINCT t1.Aircraft FROM flights AS t2 JOIN airlines AS t1 ON t1.uid == t2.AirlinE GROUP BY t1.airline HAVING COUNT(*) >= 11;",
    "output_result": 0
  },
  "242": {
    "db_id": "flight_2",
    "question": "Which airlines have at least 10 flights?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "output_sql": "SELECT DISTINCT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T1(AirLine) GROUP BY T1.airstline HAVING COUNT(T2.flightno) >= 1₀;",
    "output_result": 0
  },
  "243": {
    "db_id": "flight_2",
    "question": "Find all airlines that have fewer than 200 flights.",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "output_sql": "SELECT T1.airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1(uid) = T２(AirLine) GROUP BY T1.airstine HAVING COUNT(*) <20O;",
    "output_result": 0
  },
  "244": {
    "db_id": "flight_2",
    "question": "Which airlines have less than 200 flights?",
    "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "output_sql": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1(uid) = T２(AirLine) GROUP BY T1.airstine HAVING COUNT(*) <20O;",
    "output_result": 0
  },
  "245": {
    "db_id": "flight_2",
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "output_sql": "SELECT T1.FlighTNo FROM flights AS T1 JOIN airlines AS T2 ON T2(uid) = T2.airline WHERE T2_airline = 'United Airlines';",
    "output_result": 0
  },
  "246": {
    "db_id": "flight_2",
    "question": "Which flight numbers correspond to United Airlines flights?",
    "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "output_sql": "SELECT T1.FlighTNo FROM flights AS T1 JOIN airlines AS T2 ON T2(uid) = T2(AirLine) WHERE T2.airline = 'United Airlines';",
    "output_result": 0
  },
  "247": {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "output_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG';",
    "output_result": 1
  },
  "248": {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights leaving from APG.",
    "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "output_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';",
    "output_result": 1
  },
  "249": {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "output_sql": "SELECT FlightNo FROM FLIGHTs WHERE DestAirport = \"APD\";",
    "output_result": 1
  },
  "250": {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights landing at APG.",
    "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "output_sql": "SELECT f.FlightNo FROM flights f WHERE f.DestAirport = 'APG';",
    "output_result": 1
  },
  "251": {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT T1.FlighNo FROM flights AS T1 INNER JOIN airports AS T2 ON T1 SourceAirport =T2 AirportCode WHERE T2.City ='Aberden';",
    "output_result": 0
  },
  "252": {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights leaving from Aberdeen.",
    "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT T1.FlighNo FROM flights AS T1 INNER JOIN airports AS T2 ON T1 SourceAirport =T2 AirportCode WHERE T2 City = 'Aberden';",
    "output_result": 0
  },
  "253": {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT T1.FlighNo FROM flights AS T1 JOIN airports AS T2 ON T1 DestAirport =T2 AirportCode WHERE T2 City = \"Aberedeen\";",
    "output_result": 0
  },
  "254": {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights arriving in Aberdeen.",
    "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "output_sql": "SELECT T1.FlighNo FROM flights AS T1 JOIN airports AS T2 ON T1 DestAirport =T2 AirportCode WHERE T2 City = \"Aberedeen\";",
    "output_result": 0
  },
  "255": {
    "db_id": "flight_2",
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "ground_truth": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1 DestAirport =T2 AirportCode WHERE T2 City = \"Abrdeen\"OR T2City = \"ABILENE\";",
    "output_result": 0
  },
  "256": {
    "db_id": "flight_2",
    "question": "How many flights land in Aberdeen or Abilene?",
    "ground_truth": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "output_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1 DestAirport =T2 AirportCode WHERE T2 City = 'Aberdale' OR T3 City = \"abilene\";",
    "output_result": 0
  },
  "257": {
    "db_id": "flight_2",
    "question": "Find the name of airports which do not have any flight in and out.",
    "ground_truth": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "output_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROMFlights );",
    "output_result": 0
  },
  "258": {
    "db_id": "flight_2",
    "question": "Which airports do not have departing or arriving flights?",
    "ground_truth": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "output_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROMFlights );",
    "output_result": 0
  },
  "259": {
    "db_id": "employee_hire_evaluation",
    "question": "How many employees are there?",
    "ground_truth": "SELECT count(*) FROM employee",
    "output_sql": "SELECT COUNT(*) FROM employee;",
    "output_result": 1
  },
  "260": {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of employees",
    "ground_truth": "SELECT count(*) FROM employee",
    "output_sql": "SELECT COUNT(*) FROM employee;",
    "output_result": 1
  },
  "261": {
    "db_id": "employee_hire_evaluation",
    "question": "Sort employee names by their age in ascending order.",
    "ground_truth": "SELECT name FROM employee ORDER BY age",
    "output_sql": "SELECT \"Name\", \"Age\" FROM \"employee\" ORDER BY \"Age” ASC;",
    "output_result": 0
  },
  "262": {
    "db_id": "employee_hire_evaluation",
    "question": "List the names of employees and sort in ascending order of age.",
    "ground_truth": "SELECT name FROM employee ORDER BY age",
    "output_sql": "SELECT \"Name\" FROM \"employee\" ORDER BY \"Age\" ASC;",
    "output_result": 1
  },
  "263": {
    "db_id": "employee_hire_evaluation",
    "question": "What is the number of employees from each city?",
    "ground_truth": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "output_sql": "SELECT COUNT(*) AS number_of_employees, City FROM employee GROUP BY City;",
    "output_result": 1
  },
  "264": {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of employees for each city.",
    "ground_truth": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "output_sql": "SELECT COUNT(*) AS count, City FROM employee GROUP BY City;",
    "output_result": 1
  },
  "265": {
    "db_id": "employee_hire_evaluation",
    "question": "Which cities do more than one employee under age 30 come from?",
    "ground_truth": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "output_sql": "SELECT city FROM employee WHERE age <30 GROUP BY city HAVING COUNT(*) >1;",
    "output_result": 1
  },
  "266": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the cities that have more than one employee under age 30.",
    "ground_truth": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "output_sql": "SELECT city FROM employee WHERE age < 29 GROUP BY city HAVING COUNT(*) >1;",
    "output_result": 0
  },
  "267": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the number of shops in each location.",
    "ground_truth": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "output_sql": "SELECT COUNT(*) AS number_of_shops, Location FROM shop GROUP BY Location ORDER BY number_ofShops;",
    "output_result": 0
  },
  "268": {
    "db_id": "employee_hire_evaluation",
    "question": "How many shops are there in each location?",
    "ground_truth": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "output_sql": "SELECT COUNT(*) AS count_of_shops, Location AS LOCATION FROM shop GROUP BY Location ORDER BY LOCATION;",
    "output_result": 1
  },
  "269": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "ground_truth": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "output_sql": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;",
    "output_result": 1
  },
  "270": {
    "db_id": "employee_hire_evaluation",
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "ground_truth": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "output_sql": "SELECT \"Manager_name\", \"District\" FROM \"shop\" ORDER BY \"Number_products” DESC LIMIT 1;",
    "output_result": 0
  },
  "271": {
    "db_id": "employee_hire_evaluation",
    "question": "find the minimum and maximum number of products of all stores.",
    "ground_truth": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "output_sql": "SELECT MIN(\"Number_products\"), MAX(\"Number Products\") FROM \"shop\";",
    "output_result": 0
  },
  "272": {
    "db_id": "employee_hire_evaluation",
    "question": "What are the minimum and maximum number of products across all the shops?",
    "ground_truth": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "output_sql": "SELECT MIN(\"Number_products\"), MAX(\"NumberProducts\") FROM \"shop\";",
    "output_result": 0
  },
  "273": {
    "db_id": "employee_hire_evaluation",
    "question": "Return the name, location and district of all shops in descending order of number of products.",
    "ground_truth": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "output_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
    "output_result": 1
  },
  "274": {
    "db_id": "employee_hire_evaluation",
    "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "ground_truth": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "output_sql": "SELECT name, Location, District FROM shop ORDER BY Number_products DESC;",
    "output_result": 1
  },
  "275": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the names of stores whose number products is more than the average number of products.",
    "ground_truth": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "output_sql": "SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT avg(number_products) FROM shop);",
    "output_result": 1
  },
  "276": {
    "db_id": "employee_hire_evaluation",
    "question": "Which shops' number products is above the average? Give me the shop names.",
    "ground_truth": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "output_sql": "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);",
    "output_result": 1
  },
  "277": {
    "db_id": "employee_hire_evaluation",
    "question": "find the name of employee who was awarded the most times in the evaluation.",
    "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT t1.Name FROM employee AS t1 INNER JOIN evaluation AS t2 ON t1 Employee_ID =t2.Employee_Id GROUP BY t2.EmployeE_ID ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "278": {
    "db_id": "employee_hire_evaluation",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT t1.Name FROM employee AS t1 INNER JOIN evaluation AS t2 ON t1 Employee_ID =t2.Employee_Id GROUP BY t1 Name ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "279": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the name of the employee who got the highest one time bonus.",
    "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "output_sql": "SELECT t1.Name FROM employee AS t1 INNER JOIN evaluation AS t2 ON t1 Employee_ID =t2.Employee_Id ORDER BY t2.Bonus DESC LIMIT 1;",
    "output_result": 0
  },
  "280": {
    "db_id": "employee_hire_evaluation",
    "question": "Which employee received the biggest bonus? Give me the employee name.",
    "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "output_sql": "SELECT t1.Name FROM \"employee' AS t1 JOIN \"evaluation' AS\tt2 ON t1.\"Employee_ID' = t12.\"Employee_ ID\" ORDER BY t2.\"Bonus\" DESC LIMIT 1;",
    "output_result": 0
  },
  "281": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the names of employees who never won any award in the evaluation.",
    "ground_truth": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "output_sql": "SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);",
    "output_result": 1
  },
  "282": {
    "db_id": "employee_hire_evaluation",
    "question": "What are the names of the employees who never received any evaluation?",
    "ground_truth": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "output_sql": "SELECT \"Name\" FROM \"employee\" WHERE \"Employee_Id\" NOT IN (SELECT \"Employee_id\" FROM \"evaluation\");",
    "output_result": 1
  },
  "283": {
    "db_id": "employee_hire_evaluation",
    "question": "What is the name of the shop that is hiring the largest number of employees?",
    "ground_truth": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT t2.Name FROM hiring t1 JOIN shop t2 ON t1.Shop_ID = t２.Shop_Id GROUP BY t1_shop_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "284": {
    "db_id": "employee_hire_evaluation",
    "question": "Which shop has the most employees? Give me the shop name.",
    "ground_truth": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT t2.Name FROM hiring AS\tt1 JOIN shop AS\tt2 ON t1.Shop_ID = t２.Shop_Id GROUP BY t1 Shop_ID ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "285": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the name of the shops that do not hire any employee.",
    "ground_truth": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "output_sql": "SELECT s.Name FROM shop s WHERE s.Shop_ID NOT IN (SELECT h.Shop_Id FROM hiring h);",
    "output_result": 1
  },
  "286": {
    "db_id": "employee_hire_evaluation",
    "question": "Which shops run with no employees? Find the shop names",
    "ground_truth": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "output_sql": "SELECT \"Name\" FROM \"shop\" WHERE \"Shop_ID\"Not In (SELECT \"Shop_Id\" FROM \"hired\");",
    "output_result": 0
  },
  "287": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "ground_truth": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "output_sql": "SELECT COUNT(*) AS count_of_employees, t2.Name FROM hiring AS t1 INNER JOIN shop AS t2 ON t1.Shop_ID = t2.Shop_Id GROUP BY t2 Name ORDER BY t1.Name;",
    "output_result": 0
  },
  "288": {
    "db_id": "employee_hire_evaluation",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "ground_truth": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "output_sql": "SELECT t2.Name, COUNT(t1.Employee_ID) AS Employee_Count FROM hiring t1 INNER JOIN shop t2 ON t1.Shop_ID = t２.Shop_Id GROUP BY t2 Name ORDER BY t２.Name;",
    "output_result": 0
  },
  "289": {
    "db_id": "employee_hire_evaluation",
    "question": "What is total bonus given in all evaluations?",
    "ground_truth": "SELECT sum(bonus) FROM evaluation",
    "output_sql": "SELECT SUM(Bonus) FROM evaluation;",
    "output_result": 1
  },
  "290": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the total amount of bonus given in all the evaluations.",
    "ground_truth": "SELECT sum(bonus) FROM evaluation",
    "output_sql": "SELECT SUM(Bonus) FROM evaluation;",
    "output_result": 1
  },
  "291": {
    "db_id": "employee_hire_evaluation",
    "question": "Give me all the information about hiring.",
    "ground_truth": "SELECT * FROM hiring",
    "output_sql": "SELECT * FROM hiring;",
    "output_result": 1
  },
  "292": {
    "db_id": "employee_hire_evaluation",
    "question": "What is all the information about hiring?",
    "ground_truth": "SELECT * FROM hiring",
    "output_sql": "SELECT * FROM hiring;",
    "output_result": 1
  },
  "293": {
    "db_id": "employee_hire_evaluation",
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "ground_truth": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "output_sql": "SELECT District FROM shop WHERE Number_products <30００ INTERSECT SELECT District FROM shop WHERE NumberProducts > １０００0;",
    "output_result": 0
  },
  "294": {
    "db_id": "employee_hire_evaluation",
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "ground_truth": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "output_sql": "SELECT District FROM shop WHERE Number_products < 500 INTERSECT SELECT District FROM shop WHERE Number_product > 550;",
    "output_result": 0
  },
  "295": {
    "db_id": "employee_hire_evaluation",
    "question": "How many different store locations are there?",
    "ground_truth": "SELECT count(DISTINCT LOCATION) FROM shop",
    "output_sql": "SELECT COUNT(DISTINCT Location) FROM shop;",
    "output_result": 1
  },
  "296": {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of distinct store locations.",
    "ground_truth": "SELECT count(DISTINCT LOCATION) FROM shop",
    "output_sql": "SELECT COUNT(DISTINCT Location) FROM shop;",
    "output_result": 1
  },
  "297": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many documents do we have?",
    "ground_truth": "SELECT count(*) FROM Documents",
    "output_sql": "SELECT count(*) FROM Documents;",
    "output_result": 1
  },
  "298": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of documents.",
    "ground_truth": "SELECT count(*) FROM Documents",
    "output_sql": "SELECT count(*) FROM Documents;",
    "output_result": 1
  },
  "299": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "List document IDs, document names, and document descriptions for all documents.",
    "ground_truth": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "output_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
    "output_result": 1
  },
  "300": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids, names, and descriptions for all documents?",
    "ground_truth": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "output_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
    "output_result": 1
  },
  "301": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document name and template id for document with description with the letter 'w' in it?",
    "ground_truth": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "output_sql": "SELECT \"Document_Name\", \"Template_ID\" FROM \"Documents\" WHERE \"Document_DESCRIPTION\" LIKE '%w%';",
    "output_result": 1
  },
  "302": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "ground_truth": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "output_sql": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';",
    "output_result": 1
  },
  "303": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "ground_truth": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "output_sql": "SELECT d.Document_ID, d.Template_ID,\td.Document_Description FROM Documents d WHERE d.Document_Name = \"Robbi CV\";",
    "output_result": 0
  },
  "304": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "ground_truth": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "output_sql": "SELECT d.Document_ID, d.Template_ID,\td.Document_Description FROM Documents d WHERE d.document_name = 'RobbinCV';",
    "output_result": 0
  },
  "305": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many different templates do all document use?",
    "ground_truth": "SELECT count(DISTINCT template_id) FROM Documents",
    "output_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents;",
    "output_result": 1
  },
  "306": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of different templates used for documents.",
    "ground_truth": "SELECT count(DISTINCT template_id) FROM Documents",
    "output_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents;",
    "output_result": 1
  },
  "307": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many documents are using the template with type code 'PPT'?",
    "ground_truth": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "output_sql": "SELECT COUNT(T1.Document_ID) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1 Template_ID =T2.Template_Id WHERE T2 Template_Type_Code = 'PRT';",
    "output_result": 0
  },
  "308": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of documents that use the PPT template type.",
    "ground_truth": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "output_sql": "SELECT COUNT(T1.Document_ID) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1 Template_ID =T2.Template_Id WHERE T2 Template_Type_Code ='PPT';",
    "output_result": 0
  },
  "309": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template ids and number of documents using each template.",
    "ground_truth": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "output_sql": "SELECT t.Template_ID, COUNT(d.Document_ID) AS Number_of_Documents FROM Templates t LEFT JOIN Documents d ON t.Template_Id = d.Template_ID GROUP BY t.Template_id;",
    "output_result": 0
  },
  "310": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are all different template ids used for documents, and how many times were each of them used?",
    "ground_truth": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "output_sql": "SELECT t.Template_ID, COUNT(*) AS Usage_Count FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_Id GROUP BY t.Template_id;",
    "output_result": 1
  },
  "311": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the id and type code for the template used by the most documents?",
    "ground_truth": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.Template_ID, T1 Template_Type_Code FROM Templates AS T1 JOIN Documents AS D ON T1_TEMPLATE_ID = D_Template_ID GROUP BY T1_Template_ID, t1_Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "312": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "ground_truth": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.Template_ID, T3.Template_Type_CODE FROM Documents AS\tT1 JOIN Templates AS\tT3 ON T1.TEMPLATE_ID = T3.TEMPLATE_Id GROUP BY T1_TEMPLATE_ID,\tT3.Template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "313": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show ids for all templates that are used by more than one document.",
    "ground_truth": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "output_sql": "SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_Id = d.Template_ID GROUP BY t.Template_id HAVING COUNT(d.Document_ID) > 1;",
    "output_result": 1
  },
  "314": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the template ids of any templates used in more than a single document?",
    "ground_truth": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "output_sql": "SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_Id = d.Template_ID GROUP BY t.Template_id HAVING COUNT(*) > 1;",
    "output_result": 1
  },
  "315": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show ids for all templates not used by any document.",
    "ground_truth": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "output_sql": "SELECT T.Template_ID FROM Templates AS T EXCEPT SELECT T2.Template_ID FROM TemplatesAS T2 JOIN Documents AS D ON T2 Template_ID = D.Template_ID;",
    "output_result": 0
  },
  "316": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids for templates that are not used in any documents?",
    "ground_truth": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "output_sql": "SELECT Template_ID FROM Templates EXCEPT SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_Id = d.Template_ID WHERE d.Document_ID IS NULL;",
    "output_result": 0
  },
  "317": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates do we have?",
    "ground_truth": "SELECT count(*) FROM Templates",
    "output_sql": "SELECT COUNT(*) FROM Templates;",
    "output_result": 1
  },
  "318": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of templates.",
    "ground_truth": "SELECT count(*) FROM Templates",
    "output_sql": "SELECT COUNT(*) FROM Templates;",
    "output_result": 1
  },
  "319": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show template ids, version numbers, and template type codes for all templates.",
    "ground_truth": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "output_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;",
    "output_result": 1
  },
  "320": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids, version numbers, and type codes for each template?",
    "ground_truth": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "output_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;",
    "output_result": 1
  },
  "321": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all distinct template type codes for all templates.",
    "ground_truth": "SELECT DISTINCT template_type_code FROM Templates",
    "output_sql": "SELECT DISTINCT Template_Type_Code FROM Templates;",
    "output_result": 1
  },
  "322": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes?",
    "ground_truth": "SELECT DISTINCT template_type_code FROM Templates",
    "output_sql": "SELECT DISTINCT Template_Type_Code FROM Templates;",
    "output_result": 1
  },
  "323": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of templates with template type code PP or PPT?",
    "ground_truth": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "output_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_CODE = 'PPT';",
    "output_result": 1
  },
  "324": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the ids of templates that have the code PP or PPT.",
    "ground_truth": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "output_sql": "SELECT Template_ID FROM Templates WHERE \"Template_Type_CODE\" = 'PP' OR \"Template_TYPE_CODE\" ='PPT' ORDER BY Template_ID;",
    "output_result": 1
  },
  "325": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates have template type code CV?",
    "ground_truth": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "output_sql": "SELECT COUNT(*) FROM Templates WHERE template_typeCode = \".CV\";",
    "output_result": 0
  },
  "326": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of templates of the type CV.",
    "ground_truth": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "output_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = \"CV\";",
    "output_result": 1
  },
  "327": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "ground_truth": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "output_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
    "output_result": 1
  },
  "328": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "ground_truth": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "output_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
    "output_result": 1
  },
  "329": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each.",
    "ground_truth": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "output_sql": "SELECT T.Template_Type_Code, COUNT(T.Template_ID) AS Number_of_Templates FROM Templates T GROUP BY T.Template_TYPE_Code;",
    "output_result": 1
  },
  "330": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many templates correspond to each?",
    "ground_truth": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "output_sql": "SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS Template_Count FROM Templates t GROUP BY t.Template_TYPE_Code;",
    "output_result": 1
  },
  "331": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Which template type code has most number of templates?",
    "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT t.Template_Type_Code FROM Templates t GROUP BY t.Template_TYPE_Code ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "332": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the type code of the template type that the most templates belong to.",
    "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_CODE ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "333": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes with less than three templates.",
    "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "output_sql": "SELECT t.Template_Type_Code FROM Ref_TemplateTypes t JOIN Templates tt ON t.Template_TYPE_Code = tt.Template_Type_CODE GROUP BY t.Template-Type_Code HAVING COUNT(*) <3;",
    "output_result": 0
  },
  "334": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the codes of template types that have fewer than 3 templates?",
    "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "output_sql": "SELECT t.Template_Type_Code FROM Ref_TemplateTypes t JOIN Templates tm ON t.Template_TYPE_Code = tm.Template_Type_CODE GROUP BY t.Template-Type_Code HAVING COUNT(*)<3;",
    "output_result": 0
  },
  "335": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What the smallest version number and its template type code?",
    "ground_truth": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "output_sql": "SELECT MIN(T.Version_Number) AS Version_Number, T.Template_Type_Code FROM Templates T ORDER BY T.Version_Number ASC LIMIT 1;",
    "output_result": 1
  },
  "336": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "ground_truth": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "output_sql": "SELECT t.Version_Number, r.Template_Type_Code FROM Templates t JOIN Ref_TemplateTypes r ON t.Template_Type_CODE = r.Template_TYPE_CODE ORDER BY t.Version_number ASC LIMIT 1;",
    "output_result": 0
  },
  "337": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type code of the template used by document with the name \"Data base\"?",
    "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "output_sql": "SELECT T1.Template_Type_Code FROM Templates AS郭1 JOIN Documents AS Т2 ON T１.Template_ID = Т2.Template_ID WHERE Т2.Document_Name = \" Data base \";",
    "output_result": 0
  },
  "338": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the template type code of the template that is used by a document named Data base.",
    "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "output_sql": "SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1 Template_ID = T２.Document_ID WHERE T2.Document_Name = 'Data base';",
    "output_result": 0
  },
  "339": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document names using templates with template type code BK.",
    "ground_truth": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "output_sql": "SELECT T2.Document_Name FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T２.Document_ID WHERE T1 Template_Type_Code = \" BK\";",
    "output_result": 0
  },
  "340": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the names of documents that use templates with the code BK?",
    "ground_truth": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "output_sql": "SELECT T2.Document_Name FROM Templates AS T１ JOIN Documents AS T２ ON T1.Template_ID = T２.Template_ID WHERE T1 Template_Type_Code = 'BK';",
    "output_result": 0
  },
  "341": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type.",
    "ground_truth": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "output_sql": "SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) AS Document_Count FROM Ref_TemplateTypes T1 JOIN Templates T2 ON T1 Template_Type_Code = T3.Template_TypeCode JOIN Documents T3 ON T2.Template_ID = T4.Template_ID GROUP BY T1_TEMPLATE_TYPE_CODE ORDER BY T2_TEMPLATE_TYPECODE;",
    "output_result": 0
  },
  "342": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many documents use each type?",
    "ground_truth": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "output_sql": "SELECT T1.Template_Type_Code, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1 Template_ID = T２ Document_ID GROUP BY T1_TEMPLATE_TYPE_CODE;",
    "output_result": 0
  },
  "343": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Which template type code is used by most number of documents?",
    "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1_TEMPLATE_ID = T２_Document_ID GROUP BY T1 Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "344": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the code of the template type that is most commonly used in documents.",
    "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.Template_Type_Code FROM Ref_TemplateTypes AS T1 JOIN Templates AS T2 ON T1 Template_Type_Code = T3.Template_TypeCode JOIN Documents AS D ON T2.Template_ID = D.Document_ID GROUP BY T1_TEMPLATE_TYPE_CODE ORDER BY COUNT(D.Document_ID) DESC LIMIT 1;",
    "output_result": 0
  },
  "345": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes that are not used by any document.",
    "ground_truth": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "output_sql": "SELECT Template_Type_Code FROM Templates EXCEPT SELECT T1.Template_Type_Code FROM Templates AS郭1 JOIN Documents AS Т2 ON Т1.Template_ID = Т2.Template_ID;",
    "output_result": 0
  },
  "346": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the codes of template types that are not used for any document?",
    "ground_truth": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "output_sql": "SELECT t.Template_Type_Code FROM Templates t EXCEPT SELECT DISTINCT t2.Template_Type_CODE FROM Documents d JOIN Templates t2 ON d.Template_ID = t2 Template_ID;",
    "output_result": 0
  },
  "347": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and descriptions.",
    "ground_truth": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "output_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_TYPES;",
    "output_result": 1
  },
  "348": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the type codes and descriptions for all template types?",
    "ground_truth": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "output_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_TYPES;",
    "output_result": 1
  },
  "349": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type descriptions for template type code \"AD\".",
    "ground_truth": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "output_sql": "SELECT template_type_description FROM Ref_Template_TYPES WHERE Template_Type_Code = \"AD\";",
    "output_result": 1
  },
  "350": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the template type description of the template type with the code AD.",
    "ground_truth": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "output_sql": "SELECT Template_Type_Description FROM Ref_Template_TYPES WHERE Template_Type_Code = 'AD';",
    "output_result": 1
  },
  "351": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type code for template type description \"Book\".",
    "ground_truth": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "output_sql": "SELECT Template_Type_Code FROM Ref_Template_TYPES WHERE \"Template_Type_DESCRIPTION\" = \"Book\";",
    "output_result": 1
  },
  "352": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the type code of the template type with the description \"Book\".",
    "ground_truth": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "output_sql": "SELECT Template_Type_Code FROM Ref_TemplateTypes WHERE Template_Type_Description = 'Book';",
    "output_result": 0
  },
  "353": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the distinct template type descriptions for the templates ever used by any document?",
    "ground_truth": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "output_sql": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_TemplateTypes AS T1 JOIN Templates AS T2 ON T1 Template_Type_Code = T２.Template_Type_Code JOIN Documents AS T3 ON T2 Template_ID = Т3.Template_ID ORDER BY T1_TEMPLATE_TYPE_DESCRIPTION;",
    "output_result": 0
  },
  "354": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "ground_truth": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "output_sql": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_TemplateTypes AS T1 JOIN Templates AS T2 ON T1 Template_Type_Code = T1.TEMPLATE_TYPE_CODE JOIN Documents AS T3 ON T2.TEMPLATE_ID = t3.TEMPLATE_id ORDER BY T1_TEMPLATE_TYPE_DESCRIPTION;",
    "output_result": 0
  },
  "355": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the template ids with template type description \"Presentation\".",
    "ground_truth": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "output_sql": "SELECT T2.Template_ID FROM Ref_TemplateTypes AS T₁ JOIN Templates AST₂ ON T₁.Template_Type_Code = T₂.Template_Type_CODE WHERE T₁ Template_Type_Description = \" Presentation\";",
    "output_result": 0
  },
  "356": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the ids corresponding to templates with the description 'Presentation'.",
    "ground_truth": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "output_sql": "SELECT T2.Template_ID FROM Ref_Template_TYPES AS T１ JOIN Templates AS Т2 ON T1.Template_Type_Code = T２.Template_Type_CODE WHERE T1_TEMPLATE_TYPE_DESCRIPTION = 'Presentation';",
    "output_result": 0
  },
  "357": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many paragraphs in total?",
    "ground_truth": "SELECT count(*) FROM Paragraphs",
    "output_sql": "SELECT COUNT(*) FROM Paragraphs;",
    "output_result": 1
  },
  "358": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of paragraphs.",
    "ground_truth": "SELECT count(*) FROM Paragraphs",
    "output_sql": "SELECT COUNT(*) FROM Paragraphs;",
    "output_result": 1
  },
  "359": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "ground_truth": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "output_sql": "SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID =\tT2.Document_ID WHERE T2.Document_Name = 'SummerShow';",
    "output_result": 0
  },
  "360": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "ground_truth": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "output_sql": "SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID =\tT2.Document_ID WHERE T2.Document_Name = ' Summer Show ';",
    "output_result": 0
  },
  "361": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show paragraph details for paragraph with text 'Korea ' .",
    "ground_truth": "select other_details from paragraphs where paragraph_text like 'korea'",
    "output_sql": "SELECT p.Other_Details FROM Paragraphs p WHERE LOWER(p.Paragraph_Text) LIKE '%korea%';",
    "output_result": 1
  },
  "362": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "ground_truth": "select other_details from paragraphs where paragraph_text like 'korea'",
    "output_sql": "SELECT other_details FROM Paragraphs WHERE paragraph_text LIKE 'korea';",
    "output_result": 1
  },
  "363": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "ground_truth": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "output_sql": "SELECT T1.Paragraph_ID, T1_PARAGRAPH_TEXT.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T1_DOCUMENT_ID.Document_ID WHERE T2 Document_Name = 'Welcome To NY';",
    "output_result": 0
  },
  "364": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "ground_truth": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "output_sql": "SELECT T1.Paragraph_ID, T1_PARAGRAPH_TEXT FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T２.Document_ID WHERE T2 Document_Name = 'Welcome To NY';",
    "output_result": 0
  },
  "365": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all paragraph texts for the document \"Customer reviews\".",
    "ground_truth": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "output_sql": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 LEFT JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2 Document_Name = 'Customer reviews';",
    "output_result": 0
  },
  "366": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "ground_truth": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "output_sql": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T２.Document_ID WHERE T2.Document_Name = 'Customer Reviews';",
    "output_result": 0
  },
  "367": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "ground_truth": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "output_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.DocumentID = p.Document_ID GROUP BY d.Document_Id ORDER BY d Document_ID;",
    "output_result": 0
  },
  "368": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "ground_truth": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "output_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_Id = p.Document_ID GROUP BY d.Document_id ORDER BY d Document_ID;",
    "output_result": 0
  },
  "369": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document ids, names and the number of paragraphs in each document.",
    "ground_truth": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "output_sql": "SELECT T2.Document_ID, T2.Document_Name, COUNT(T1.Paragraph_ID) AS paragraph_count FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T２.Document_ID GROUP BY Т2.Document_Id;",
    "output_result": 0
  },
  "370": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "ground_truth": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "output_sql": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) FROM Documents d INNER JOIN Paragraphs p ON d.Document_Id = p.Document_ID GROUP BY d.Document_id;",
    "output_result": 1
  },
  "371": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "List all document ids with at least two paragraphs.",
    "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "output_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;",
    "output_result": 1
  },
  "372": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "output_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_Id = p.Document_ID GROUP BY d.Document_id HAVING COUNT(p.Paragraph_ID) >= 2;",
    "output_result": 1
  },
  "373": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "ground_truth": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.Document_ID, T2.Document_Name FROM ParagraphsAS T1 JOIN Documents AS郭2 ON T2 Document_ID = T1 Document_ID GROUP BY T2.DOCUMENT_ID ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "374": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id and name of the document with the most paragraphs.",
    "ground_truth": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.Document_ID, T3.Document_Name FROM Paragraphs AS T1 JOIN Documents AS T3 ON T1 Document_ID = T3 Document_ID GROUP BY T1.Documetn_ID, t3.Document_Naem ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "375": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id with least number of paragraphs?",
    "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "output_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_Id = p.Document_ID GROUP BY d.DocumentID ORDER BY COUNT(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "376": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id of the document with the fewest paragraphs.",
    "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "output_sql": "SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_Id ORDER BY COUNT(*) ASC LIMIT 1;",
    "output_result": 1
  },
  "377": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id with 1 to 2 paragraphs?",
    "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "output_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_Id = p.Document_ID GROUP BY d.DocumentID HAVING COUNT(*) BETWEEN 1 AND 2;",
    "output_result": 0
  },
  "378": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Give the ids of documents that have between one and two paragraphs.",
    "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "output_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_Id = p.Document_ID GROUP BY d.Document_id HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;",
    "output_result": 1
  },
  "379": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "ground_truth": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "output_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_Id = p.Document_ID WHERE p.Paragraph_Text = 'Brazil' OR p.Paragram_Text = ‘Ireland’;",
    "output_result": 0
  },
  "380": {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "ground_truth": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "output_sql": "SELECT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text = 'Brazil';",
    "output_result": 1
  },
  "381": {
    "db_id": "course_teach",
    "question": "How many teachers are there?",
    "ground_truth": "SELECT count(*) FROM teacher",
    "output_sql": "SELECT COUNT(*) FROM teacher;",
    "output_result": 1
  },
  "382": {
    "db_id": "course_teach",
    "question": "What is the total count of teachers?",
    "ground_truth": "SELECT count(*) FROM teacher",
    "output_sql": "SELECT COUNT(*) FROM \"teacher\";",
    "output_result": 1
  },
  "383": {
    "db_id": "course_teach",
    "question": "List the names of teachers in ascending order of age.",
    "ground_truth": "SELECT Name FROM teacher ORDER BY Age ASC",
    "output_sql": "SELECT Name FROM teacher ORDER BY Age ASC;",
    "output_result": 1
  },
  "384": {
    "db_id": "course_teach",
    "question": "What are the names of the teachers ordered by ascending age?",
    "ground_truth": "SELECT Name FROM teacher ORDER BY Age ASC",
    "output_sql": "SELECT \"Name\" FROM \"teacher\" ORDER BY \"Age” ASC;",
    "output_result": 0
  },
  "385": {
    "db_id": "course_teach",
    "question": "What are the age and hometown of teachers?",
    "ground_truth": "SELECT Age ,  Hometown FROM teacher",
    "output_sql": "SELECT \"Age\", \"H hometown\" FROM \"teacher\";",
    "output_result": 0
  },
  "386": {
    "db_id": "course_teach",
    "question": "What is the age and hometown of every teacher?",
    "ground_truth": "SELECT Age ,  Hometown FROM teacher",
    "output_sql": "SELECT \"Age\", \"H hometown\" FROM \"teacher\";",
    "output_result": 0
  },
  "387": {
    "db_id": "course_teach",
    "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "ground_truth": "select name from teacher where hometown != \"little lever urban district\"",
    "output_sql": "SELECT t.Name FROM teacher t WHERE t.Hometown != 'little lever urbain district';",
    "output_result": 1
  },
  "388": {
    "db_id": "course_teach",
    "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "ground_truth": "select name from teacher where hometown != \"little lever urban district\"",
    "output_sql": "SELECT name FROM teacher WHERE hometown != 'littleleverurbandistrict';",
    "output_result": 1
  },
  "389": {
    "db_id": "course_teach",
    "question": "Show the name of teachers aged either 32 or 33?",
    "ground_truth": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "output_sql": "SELECT \"Name\" FROM \"teacher\" WHERE \"Age' = '32' OR \"Age'\" = '23';",
    "output_result": 0
  },
  "390": {
    "db_id": "course_teach",
    "question": "What are the names of the teachers who are aged either 32 or 33?",
    "ground_truth": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "output_sql": "SELECT \"Name\" FROM \"teacher\" WHERE \"Age' = '32' OR \"Age'\" = '23';",
    "output_result": 0
  },
  "391": {
    "db_id": "course_teach",
    "question": "What is the hometown of the youngest teacher?",
    "ground_truth": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "output_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;",
    "output_result": 1
  },
  "392": {
    "db_id": "course_teach",
    "question": "Where is the youngest teacher from?",
    "ground_truth": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "output_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;",
    "output_result": 1
  },
  "393": {
    "db_id": "course_teach",
    "question": "Show different hometown of teachers and the number of teachers from each hometown.",
    "ground_truth": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "output_sql": "SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;",
    "output_result": 1
  },
  "394": {
    "db_id": "course_teach",
    "question": "For each hometown, how many teachers are there?",
    "ground_truth": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "output_sql": "SELECT COUNT(*) AS teacher_count, Hometown FROM teacher GROUP BY Hometown;",
    "output_result": 0
  },
  "395": {
    "db_id": "course_teach",
    "question": "List the most common hometown of teachers.",
    "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT Hometown FROM teacher GROUP BY H hometown ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "396": {
    "db_id": "course_teach",
    "question": "What is the most commmon hometowns for teachers?",
    "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "397": {
    "db_id": "course_teach",
    "question": "Show the hometowns shared by at least two teachers.",
    "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "output_sql": "SELECT Hometown FROM \"teacher\" GROUP BY Hometown HAVING COUNT(*)>=2;",
    "output_result": 1
  },
  "398": {
    "db_id": "course_teach",
    "question": "What are the towns from which at least two teachers come from?",
    "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "output_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 3;",
    "output_result": 1
  },
  "399": {
    "db_id": "course_teach",
    "question": "Show names of teachers and the courses they are arranged to teach.",
    "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "output_sql": "SELECT T3_NAME, T２_COURSE FROM course_arrange As T1 JOIN course AS T２ ON T1.course_id = T２.course_id JOIN teacher AS T３ ON T１.teacher_id = Т3.teacher_id;",
    "output_result": 0
  },
  "400": {
    "db_id": "course_teach",
    "question": "What is the name of each teacher and what course they teach?",
    "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "output_sql": "SELECT T3.NAME, T1.COURSE FROM course_arrANGE AS T1 JOIN course AS T2 ON T1.course_id = T1.courses_id JOIN teacher AS T3 ON T2.teacher_id = t3.teacher_id;",
    "output_result": 0
  },
  "401": {
    "db_id": "course_teach",
    "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "output_sql": "SELECT T3.Name, T2 Course FROM course_arrange as T1 JOIN course as T2 ON T1.Course_Id = T1.Courses_Id JOIN teacher as T3 ON T2.Teacher_Id = t3.Teachers_Id ORDER BY T3.name ASC;",
    "output_result": 0
  },
  "402": {
    "db_id": "course_teach",
    "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "output_sql": "SELECT T3.NAME, T2.COURSE FROM course_arrANGE AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id JOIN teacher AS T3 ON T0.teacher_id = t3.teacher_id ORDER BY T3.name ASC;",
    "output_result": 0
  },
  "403": {
    "db_id": "course_teach",
    "question": "Show the name of the teacher for the math course.",
    "ground_truth": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "output_sql": "SELECT T3.\"Name\" FROM \"course” AS T2 JOIN \"courseArrangeme\" AS T1 ON T2.\"Course_ID” = T1.\"Course_Id\" JOIN “teacher” AS Т3 ON T1.“Teacher_ID”= T3.“Teacher_Id” WHERE T2.“Course” = 'Math';",
    "output_result": 0
  },
  "404": {
    "db_id": "course_teach",
    "question": "What are the names of the people who teach math courses?",
    "ground_truth": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "output_sql": "SELECT T3.NAME FROM course AS T2 JOIN course_arrange AS T1 ON T2.COURSE_ID =T1.COURSE_id JOIN teacher AS T3 ON T1.teacher_id = T1.teacher_id WHERE T2.course = \" Math \";",
    "output_result": 0
  },
  "405": {
    "db_id": "course_teach",
    "question": "Show names of teachers and the number of courses they teach.",
    "ground_truth": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "output_sql": "SELECT T2.NAME, COUNT(*) FROM course_arrANGE AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T２.teacher_id GROUP BY T2.name;",
    "output_result": 0
  },
  "406": {
    "db_id": "course_teach",
    "question": "What are the names of the teachers and how many courses do they teach?",
    "ground_truth": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "output_sql": "SELECT T2.NAME, COUNT(*) FROM course_arrANGE AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T２.teacher_id GROUP BY T2.name;",
    "output_result": 0
  },
  "407": {
    "db_id": "course_teach",
    "question": "Show names of teachers that teach at least two courses.",
    "ground_truth": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "output_sql": "SELECT T2.NAME FROM course_arrange as T1 JOIN teacher as T2 ON T1.TEACHER_ID =T2.TEACHERR_ID GROUP BY\tT2.NAME HAVING count(*) >=2;",
    "output_result": 0
  },
  "408": {
    "db_id": "course_teach",
    "question": "What are the names of the teachers who teach at least two courses?",
    "ground_truth": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "output_sql": "SELECT T2.NAME FROM course_arrANGE AS T0 JOIN teacher AS郭2 ON T0.Teacher_Id = T1.teacher_id GROUP BY T2.name HAVING COUNT(*)>=2;",
    "output_result": 0
  },
  "409": {
    "db_id": "course_teach",
    "question": "List the names of teachers who have not been arranged to teach courses.",
    "ground_truth": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "output_sql": "SELECT T1.\"Name\" FROM \"teacher' AS T1 WHERE T1.“Teacher_ID” NOT IN (SELECT T2.“Teacher_Id” FROM \"coursearrange\" AS T2);",
    "output_result": 0
  },
  "410": {
    "db_id": "course_teach",
    "question": "What are the names of the teachers whose courses have not been arranged?",
    "ground_truth": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "output_sql": "SELECT \"Name\" FROM \"teacher\" WHERE \"Teacher_ID” NOT IN (SELECT \"Teacher_Id\" FROM \"course Arrange\");",
    "output_result": 0
  },
  "411": {
    "db_id": "museum_visit",
    "question": "How many visitors below age 30 are there?",
    "ground_truth": "SELECT count(*) FROM visitor WHERE age  <  30",
    "output_sql": "SELECT COUNT(*) FROM visitor WHERE Age < 40;",
    "output_result": 0
  },
  "412": {
    "db_id": "museum_visit",
    "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "ground_truth": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "output_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of Membership DESC;",
    "output_result": 0
  },
  "413": {
    "db_id": "museum_visit",
    "question": "What is the average age of the visitors whose membership level is not higher than 4?",
    "ground_truth": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "output_sql": "SELECT AVG(Age) FROM visitor WHERE Level_ofmembership <= 5;",
    "output_result": 0
  },
  "414": {
    "db_id": "museum_visit",
    "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "ground_truth": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "output_sql": "SELECT Name, Level_of Membership FROM visitor WHERE Level_of_member ship > 4 ORDER BY Age DESC;",
    "output_result": 0
  },
  "415": {
    "db_id": "museum_visit",
    "question": "Find the id and name of the museum that has the most staff members?",
    "ground_truth": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "output_sql": "SELECT \"Museum_Id\", \"Name\" FROM \"m Museum\" ORDER BY \"Num_of_Staff\" DESC LIMIT 1;",
    "output_result": 0
  },
  "416": {
    "db_id": "museum_visit",
    "question": "Find the average number of staff working for the museums that were open before 2009.",
    "ground_truth": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "output_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year < '2010';",
    "output_result": 0
  },
  "417": {
    "db_id": "museum_visit",
    "question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "ground_truth": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "output_sql": "SELECT Num_of_Staff, Open_Years FROM museum WHERE Name = 'PLAZA MUSEUM';",
    "output_result": 0
  },
  "418": {
    "db_id": "museum_visit",
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "ground_truth": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "output_sql": "SELECT Name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > '2009');",
    "output_result": 0
  },
  "419": {
    "db_id": "museum_visit",
    "question": "find the id, name and age for visitors who visited some museums more than once.",
    "ground_truth": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
    "output_sql": "SELECT v.ID, v.Name, v.Age FROM visitor v INNER JOIN visit vv ON v.ID = vv.visitor_ID GROUP BY v.ID HAVING COUNT(vv.Museum_ID) > 0;",
    "output_result": 1
  },
  "420": {
    "db_id": "museum_visit",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "ground_truth": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "output_sql": "SELECT t2.visitory_ID, t1.Name, t1.Level_OF_Membership FROM visitor AS t1 JOIN visit AS t2 ON t1.ID = t2(visitor_ID) GROUP BY visitoy_ID ORDER BY SUM(t2.total_spent ) DESC;",
    "output_result": 0
  },
  "421": {
    "db_id": "museum_visit",
    "question": "What are the id and name of the museum visited most times?",
    "ground_truth": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT t2.\"Museum_Id\", t1.\"Name\" FROM \"museums\" AS t1 JOIN \"visit” AS t2 ON t1.“Museum_id” = t1.”MuseumId” GROUP BY t2.“MuseuM_id” ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "422": {
    "db_id": "museum_visit",
    "question": "What is the name of the museum that had no visitor yet?",
    "ground_truth": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
    "output_sql": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);",
    "output_result": 1
  },
  "423": {
    "db_id": "museum_visit",
    "question": "Find the name and age of the visitor who bought the most tickets at once.",
    "ground_truth": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "output_sql": "SELECT t1.Name, t1.Age FROM visitor AS\tt1 JOIN visit AS\tt2 ON t1.ID = t２.visitor_ID ORDER BY t2.Num_of_Tickets DESC LIMIT 1;",
    "output_result": 0
  },
  "424": {
    "db_id": "museum_visit",
    "question": "What are the average and maximum number of tickets bought in all visits?",
    "ground_truth": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "output_sql": "SELECT AVG(num_of_ticket) AS average_tickets, MAX(num_of_tick) AS maximum_tickets FROM visit;",
    "output_result": 0
  },
  "425": {
    "db_id": "museum_visit",
    "question": "What is the total ticket expense of the visitors whose membership level is 1?",
    "ground_truth": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
    "output_sql": "SELECT SUM(t2 Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.ID = t２.visitor_ID WHERE t1.Level_OF_Membership = １;",
    "output_result": 0
  },
  "426": {
    "db_id": "museum_visit",
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "ground_truth": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
    "output_sql": "SELECT t1.Name FROM \"visitor' AS t1 JOIN \"visit' AS\tt2 ON t1.\"ID\" = t3.\"visitor_ID\" JOIN \"municipal\" AS t3 ON t2.\"Museum_Id\" =\tt3.\"Municipal_Id\" WHERE t3.Open_Year < '209' INTERSECT SELECT\tt1.Name FROM \"Visitor\" AS\tt1 JOIN \"Visit\" AS\t t2 ON\tt1.\"Id\" =\t t3 .\"Visitor_Id\" JOIN \"Museum\" AS  t3\tON t2 .\"Museum_id\" =  t2 . \"Municipality_Id\" WHERE t3 . Open_Year > '211';",
    "output_result": 0
  },
  "427": {
    "db_id": "museum_visit",
    "question": "Find the number of visitors who did not visit any museum opened after 2010.",
    "ground_truth": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
    "output_sql": "SELECT COUNT(v.ID) FROM visitor v WHERE v.ID NOT IN ( SELECT DISTINCT t2.visITOR_ID FROM visit t2 JOIN museum t1 ON t2.museum_id = t1.museum_ID WHERE t1.Open_Year > '2009' );",
    "output_result": 1
  },
  "428": {
    "db_id": "museum_visit",
    "question": "How many museums were opened after 2013 or before 2008?",
    "ground_truth": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "output_sql": "SELECT COUNT(*) FROM museum WHERE open_year >= '2040' OR open_years <= '2100';",
    "output_result": 0
  },
  "429": {
    "db_id": "wta_1",
    "question": "Find the total number of players.",
    "ground_truth": "SELECT count(*) FROM players",
    "output_sql": "select count(*) from players;",
    "output_result": 1
  },
  "430": {
    "db_id": "wta_1",
    "question": "How many players are there?",
    "ground_truth": "SELECT count(*) FROM players",
    "output_sql": "SELECT COUNT(*) FROM players;",
    "output_result": 1
  },
  "431": {
    "db_id": "wta_1",
    "question": "Find the total number of matches.",
    "ground_truth": "SELECT count(*) FROM matches",
    "output_sql": "SELECT count(*) FROM matches;",
    "output_result": 1
  },
  "432": {
    "db_id": "wta_1",
    "question": "Count the number of matches.",
    "ground_truth": "SELECT count(*) FROM matches",
    "output_sql": "SELECT COUNT(*) FROM matches;",
    "output_result": 1
  },
  "433": {
    "db_id": "wta_1",
    "question": "List the first name and birth date of all players from the country with code USA.",
    "ground_truth": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "output_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
    "output_result": 1
  },
  "434": {
    "db_id": "wta_1",
    "question": "What are the first names and birth dates of players from the USA?",
    "ground_truth": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "output_sql": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA' ;",
    "output_result": 1
  },
  "435": {
    "db_id": "wta_1",
    "question": "Find the average age of losers and winners of all matches.",
    "ground_truth": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "output_sql": "SELECT AVG(loser_age) AS avg_loser_age, Avg(winner_age)AS avg_winner_age FROM matches;",
    "output_result": 1
  },
  "436": {
    "db_id": "wta_1",
    "question": "What are the average ages of losers and winners across matches?",
    "ground_truth": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "output_sql": "SELECT AVG(loserAge) AS avg_losers_age, AVG(winnerAge)AS avg_winners_age FROM matches;",
    "output_result": 0
  },
  "437": {
    "db_id": "wta_1",
    "question": "Find the average rank of winners in all matches.",
    "ground_truth": "SELECT avg(winner_rank) FROM matches",
    "output_sql": "SELECT AVG(winner_rank) FROM matches JOIN players ON matches.winner_id = players.player_id;",
    "output_result": 1
  },
  "438": {
    "db_id": "wta_1",
    "question": "What is the average rank for winners in all matches?",
    "ground_truth": "SELECT avg(winner_rank) FROM matches",
    "output_sql": "SELECT AVG(winner_rank) FROM matches JOIN players ON matches.winner_id = players.player_id;",
    "output_result": 1
  },
  "439": {
    "db_id": "wta_1",
    "question": "Find the highest rank of losers in all matches.",
    "ground_truth": "SELECT min(loser_rank) FROM matches",
    "output_sql": "SELECT MIN(loser_rank) FROM matches;",
    "output_result": 1
  },
  "440": {
    "db_id": "wta_1",
    "question": "What is the best rank of losers across all matches?",
    "ground_truth": "SELECT min(loser_rank) FROM matches",
    "output_sql": "SELECT MIN(loser_rank) FROM matches;",
    "output_result": 1
  },
  "441": {
    "db_id": "wta_1",
    "question": "find the number of distinct country codes of all players.",
    "ground_truth": "SELECT count(DISTINCT country_code) FROM players",
    "output_sql": "SELECT COUNT(DISTINCT country_code) FROM players;",
    "output_result": 1
  },
  "442": {
    "db_id": "wta_1",
    "question": "How many distinct countries do players come from?",
    "ground_truth": "SELECT count(DISTINCT country_code) FROM players",
    "output_sql": "SELECT COUNT(DISTINCT country_code) FROM players;",
    "output_result": 1
  },
  "443": {
    "db_id": "wta_1",
    "question": "Find the number of distinct name of losers.",
    "ground_truth": "SELECT count(DISTINCT loser_name) FROM matches",
    "output_sql": "SELECT COUNT(DISTICT loser_name) FROM matches;",
    "output_result": 0
  },
  "444": {
    "db_id": "wta_1",
    "question": "How many different loser names are there?",
    "ground_truth": "SELECT count(DISTINCT loser_name) FROM matches",
    "output_sql": "SELECT COUNT(DISTINCT loser_name) FROM matches;",
    "output_result": 1
  },
  "445": {
    "db_id": "wta_1",
    "question": "Find the name of tourney that has more than 10 matches.",
    "ground_truth": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "output_sql": "SELECT tourneyName FROM ( SELECT t.tourney_name AS tourneyname, COUNT(*) AS match_count FROM matches m JOIN (SELECT DISTINCT tourney_id, tourney_level, tourny_name FROM matches) t ON m.tourney_id = t.tour_id GROUP BY t.tournament_name HAVING COUNT(*) >10 ) AS filtered_tournaments;",
    "output_result": 0
  },
  "446": {
    "db_id": "wta_1",
    "question": "What are the names of tournaments that have more than 10 matches?",
    "ground_truth": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "output_sql": "SELECT tourney_name FROM matches GROUP BY tourneyName HAVING COUNT(*) >10;",
    "output_result": 0
  },
  "447": {
    "db_id": "wta_1",
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "ground_truth": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "output_sql": "SELECT winner_name FROM matches WHERE year = '2023' INTERSECT SELECT winnerName FROM (SELECT winner_Name AS winner_name FROM matches WHERE year =2035);",
    "output_result": 0
  },
  "448": {
    "db_id": "wta_1",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "ground_truth": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "output_sql": "SELECT DISTINCT m1.winner_name FROM matches m1 WHERE m1.year = 213 INTERSECT SELECT m2.winnerName FROM Matches m2 WHEREm2.year =206;",
    "output_result": 0
  },
  "449": {
    "db_id": "wta_1",
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "ground_truth": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "output_sql": "SELECT COUNT(*) FROM matches WHERE year = 213 OR year = '2026';",
    "output_result": 0
  },
  "450": {
    "db_id": "wta_1",
    "question": "How many matches were played in 2013 or 2016?",
    "ground_truth": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "output_sql": "SELECT COUNT(*) FROM matches WHERE year = 2０１３ OR year =２０１６;",
    "output_result": 0
  },
  "451": {
    "db_id": "wta_1",
    "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "output_sql": "SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open');",
    "output_result": 0
  },
  "452": {
    "db_id": "wta_1",
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "output_sql": "SELECT p.first_name, p.country_code FROM players p INNER JOIN matches m ON p.player_id == m.winner_Id WHERE m.tourneyName = 'WAT Championships';",
    "output_result": 0
  },
  "453": {
    "db_id": "wta_1",
    "question": "Find the first name and country code of the oldest player.",
    "ground_truth": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "output_sql": "SELECT first_name , country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
    "output_result": 1
  },
  "454": {
    "db_id": "wta_1",
    "question": "What is the first name and country code of the oldest player?",
    "ground_truth": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "output_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
    "output_result": 1
  },
  "455": {
    "db_id": "wta_1",
    "question": "List the first and last name of all players in the order of birth date.",
    "ground_truth": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "output_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date;",
    "output_result": 1
  },
  "456": {
    "db_id": "wta_1",
    "question": "What are the full names of all players, sorted by birth date?",
    "ground_truth": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "output_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;",
    "output_result": 0
  },
  "457": {
    "db_id": "wta_1",
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "ground_truth": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "output_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;",
    "output_result": 1
  },
  "458": {
    "db_id": "wta_1",
    "question": "What are the full names of all left handed players, in order of birth date?",
    "ground_truth": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "output_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
    "output_result": 1
  },
  "459": {
    "db_id": "wta_1",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "output_sql": "SELECT T1.\"first_name\", T1.'country_code' FROM players AS T1 INNER JOIN rankings AS T2 ON T1.\"\"\"player_id\"\"\" = T２.\"\"\"player_Id\"\"\" ORDER BY T2.\"tours” DESC LIMIT 1;",
    "output_result": 0
  },
  "460": {
    "db_id": "wta_1",
    "question": "What is the first name and country code of the player with the most tours?",
    "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "output_sql": "SELECT T1_first_name, T1_country_code FROM players AS T1 JOIN rankings AS T2 ON T1\tplayer_id =\tT2\tplayer_id ORDER BY T2_tours DESC LIMIT 1;",
    "output_result": 0
  },
  "461": {
    "db_id": "wta_1",
    "question": "Find the year that has the most number of matches.",
    "ground_truth": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "462": {
    "db_id": "wta_1",
    "question": "Which year had the most matches?",
    "ground_truth": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "463": {
    "db_id": "wta_1",
    "question": "Find the name and rank points of the winner who won the most times.",
    "ground_truth": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT m.winner_name, m.wINNER_rank_points FROM matches m GROUP BY m.winnerText ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "464": {
    "db_id": "wta_1",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "ground_truth": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT m.winner_name, r.ranking_points FROM matches m JOIN rankings r ON m.wINNER_id = r.player_id GROUP BY m.winnerText ORDER BY COUNT(m.winner_id DESC) LIMIT 1;",
    "output_result": 0
  },
  "465": {
    "db_id": "wta_1",
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "ground_truth": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "output_sql": "SELECT p.first_name, p.last_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY p.ranking_points DESC LIMIT 1;",
    "output_result": 0
  },
  "466": {
    "db_id": "wta_1",
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "ground_truth": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "output_sql": "SELECT m.winner_name FROM matches m WHERE m.tourney_name = 'Australian Open' ORDER BY m.wINNER_rank_points DESC LIMIT 1;",
    "output_result": 1
  },
  "467": {
    "db_id": "wta_1",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "ground_truth": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "output_sql": "SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1;",
    "output_result": 0
  },
  "468": {
    "db_id": "wta_1",
    "question": "What are the names of the winner and loser who played in the longest match?",
    "ground_truth": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "output_sql": "SELECT w.winner_name, l.loser_name FROM matches m JOIN players w ON m.winner_id = w.player_id JOINplayers l ON m.loser_id = l.player_id ORDER BY m.minutes DESC LIMIT 1;",
    "output_result": 0
  },
  "469": {
    "db_id": "wta_1",
    "question": "Find the average ranking for each player and their first name.",
    "ground_truth": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "output_sql": "SELECT avg(rating) as average_rank, t1.first_NAME FROM players AS t1 INNER JOIN rankings AS t2 ON t1.player_Id = t2.player_Id GROUP BY t1_first_name ORDER BY average_rank;",
    "output_result": 0
  },
  "470": {
    "db_id": "wta_1",
    "question": "What are the first names of all players, and their average rankings?",
    "ground_truth": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "output_sql": "SELECT avg(t2.raking) AS avg_ranking, t1.first_NAME FROM players AS t1 INNER JOIN rankings AS t2 ON t1.player_Id = t2.player_Id GROUP BY t1_first_name;",
    "output_result": 0
  },
  "471": {
    "db_id": "wta_1",
    "question": "Find the total ranking points for each player and their first name.",
    "ground_truth": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "output_sql": "SELECT SUM(T1.rankingPoints), T2.first_name FROM rankings AS T1 INNER JOIN players AS T2 ON T1\tplayer_id =\tT2.player_Id GROUP BY T2\tfirst_name ORDER BY T1.rackingPoints DESC;",
    "output_result": 0
  },
  "472": {
    "db_id": "wta_1",
    "question": "What are the first names of all players, and their total ranking points?",
    "ground_truth": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "output_sql": "SELECT p.first_name , SUM(r.ranking_points) FROM players AS p INNER JOIN rankings AS r ON p.player_id=r.player_id GROUP BY p.first_NAME;",
    "output_result": 0
  },
  "473": {
    "db_id": "wta_1",
    "question": "find the number of players for each country.",
    "ground_truth": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "output_sql": "SELECT COUNT(*) AS player_count, country_code FROM players GROUP BY country_code;",
    "output_result": 1
  },
  "474": {
    "db_id": "wta_1",
    "question": "How many players are from each country?",
    "ground_truth": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "output_sql": "SELECT COUNT(*) AS player_count, country_code FROM players GROUP BY country_code;",
    "output_result": 1
  },
  "475": {
    "db_id": "wta_1",
    "question": "find the code of the country where has the greatest number of players.",
    "ground_truth": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "476": {
    "db_id": "wta_1",
    "question": "What is the code of the country with the most players?",
    "ground_truth": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "477": {
    "db_id": "wta_1",
    "question": "Find the codes of countries that have more than 50 players.",
    "ground_truth": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "output_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) >50;",
    "output_result": 1
  },
  "478": {
    "db_id": "wta_1",
    "question": "What are the codes of countries with more than 50 players?",
    "ground_truth": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "output_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) >50;",
    "output_result": 1
  },
  "479": {
    "db_id": "wta_1",
    "question": "Find the total number of tours for each ranking date.",
    "ground_truth": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "output_sql": "SELECT ranking_date , sum(tour) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY rankingDate;",
    "output_result": 0
  },
  "480": {
    "db_id": "wta_1",
    "question": "How many total tours were there for each ranking date?",
    "ground_truth": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "output_sql": "SELECT ranking_date , SUM(tours) FROM rankings GROUP BY ranking_date;",
    "output_result": 0
  },
  "481": {
    "db_id": "wta_1",
    "question": "Find the number of matches happened in each year.",
    "ground_truth": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "output_sql": "SELECT COUNT(*) AS count_of_matches, YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) ASC, YEAR;",
    "output_result": 1
  },
  "482": {
    "db_id": "wta_1",
    "question": "How many matches were played in each year?",
    "ground_truth": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "output_sql": "SELECT COUNT(*) AS count, YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) ASC, YEAR;",
    "output_result": 1
  },
  "483": {
    "db_id": "wta_1",
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "ground_truth": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "output_sql": "SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;",
    "output_result": 1
  },
  "484": {
    "db_id": "wta_1",
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "ground_truth": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "output_sql": "SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;",
    "output_result": 1
  },
  "485": {
    "db_id": "wta_1",
    "question": "How many different winners both participated in the WTA Championships and were left handed?",
    "ground_truth": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "output_sql": "SELECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA championships' AND winner_hand = 'L';",
    "output_result": 0
  },
  "486": {
    "db_id": "wta_1",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "ground_truth": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "output_sql": "SELECT COUNT(DISTINCT m.winner_name) FROM matches m JOIN players p ON m.wINNER_id = p.player_id WHERE m.tourney_name ='WTA championships' AND m.winnerText = 'L';",
    "output_result": 0
  },
  "487": {
    "db_id": "wta_1",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "ground_truth": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "output_sql": "SELECT T1_first_name,郭1_country_code, Т1_birth_date FROM players AS T1 JOIN matches AS T2 ON T1 player_id = Т2 winner_id ORDER BY T2 winner_rank_points DESC LIMIT 1;",
    "output_result": 0
  },
  "488": {
    "db_id": "wta_1",
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "ground_truth": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "output_sql": "SELECT T1_first_name,郭1_country_code, T2_birth_date FROM players AS T1 JOIN matches AS T2 ON T1\tplayer_id = T2\twinner_id ORDER BY T2_winner_rank_points DESC LIMIT 1;",
    "output_result": 0
  },
  "489": {
    "db_id": "wta_1",
    "question": "Find the number of players for each hand type.",
    "ground_truth": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "output_sql": "SELECT COUNT(*) AS count, hand FROM players GROUP BY hand;",
    "output_result": 1
  },
  "490": {
    "db_id": "wta_1",
    "question": "How many players are there for each hand type?",
    "ground_truth": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "output_sql": "SELECT COUNT(*) AS player_count, hand FROM players GROUP BY hand;",
    "output_result": 1
  },
  "491": {
    "db_id": "battle_death",
    "question": "How many ships ended up being 'Captured'?",
    "ground_truth": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "output_sql": "SELECT COUNT(*) FROM \"ship\" WHERE \"disponition_of_ship' = 'Captued';",
    "output_result": 0
  },
  "492": {
    "db_id": "battle_death",
    "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
    "ground_truth": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "output_sql": "SELECT name, tonnage FROM ship ORDER BY name DESC;",
    "output_result": 1
  },
  "493": {
    "db_id": "battle_death",
    "question": "List the name, date and result of each battle.",
    "ground_truth": "SELECT name ,  date FROM battle",
    "output_sql": "SELECT name,\tdate,\tresult FROM battle;",
    "output_result": 0
  },
  "494": {
    "db_id": "battle_death",
    "question": "What is maximum and minimum death toll caused each time?",
    "ground_truth": "SELECT max(killed) ,  min(killed) FROM death",
    "output_sql": "SELECT max(killed), min(killed) FROM death;",
    "output_result": 1
  },
  "495": {
    "db_id": "battle_death",
    "question": "What is the average number of injuries caused each time?",
    "ground_truth": "SELECT avg(injured) FROM death",
    "output_sql": "SELECT AVG(injured) FROM death;",
    "output_result": 1
  },
  "496": {
    "db_id": "battle_death",
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "ground_truth": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "output_sql": "SELECT T1.\"killed\", T1.“injured” FROM \"death” AS T1 INNER JOIN \"ship” AS\tT2 ON T1.”caused_BY_ship_id” = T２.”id” WHERE T2.”tonnage” = 't';",
    "output_result": 0
  },
  "497": {
    "db_id": "battle_death",
    "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "ground_truth": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "output_sql": "SELECT name, RESULT FROM battle WHERE bulgarians_commander ≠ 'Boris';",
    "output_result": 0
  },
  "498": {
    "db_id": "battle_death",
    "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "ground_truth": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "output_sql": "SELECT DISTINCT T1 id, T1 name FROM battle AS T1 JOIN ship AS T2 ON T1\tid = T２.lost-in-battle WHERE T2(ship_type) = 'Brigg';",
    "output_result": 0
  },
  "499": {
    "db_id": "battle_death",
    "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "ground_truth": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
    "output_sql": "SELECT T1.id, T1.name FROM battle AS T１ JOIN ship AS T２ ON T1 id = T２.lost-in-battle JOIN death AS T３ ON T２.id = Т3.causes-by-ship_id GROUP BY T1(id) HAVING SUM(T3 Killed) >10;",
    "output_result": 0
  },
  "500": {
    "db_id": "battle_death",
    "question": "What is the ship id and name that caused most total injuries?",
    "ground_truth": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T2(id, name) FROM death AS\tT1 JOIN ship AS\tT2 ON T1 caussed_by_shipId = T1.id GROUP BY T2.Id ORDER BY SUM(T1.injured) DESC LIMIT 1;",
    "output_result": 0
  },
  "501": {
    "db_id": "battle_death",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "ground_truth": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "output_sql": "SELECT name FROM battle WHERE bulgarians_commander == 'Kalayon' AND latin_commander =='Baldvin I';",
    "output_result": 0
  },
  "502": {
    "db_id": "battle_death",
    "question": "How many different results are there for the battles?",
    "ground_truth": "SELECT count(DISTINCT RESULT) FROM battle",
    "output_sql": "SELECT COUNT(DISTINCT result) FROM battle;",
    "output_result": 1
  },
  "503": {
    "db_id": "battle_death",
    "question": "How many battles did not lose any ship with tonnage '225'?",
    "ground_truth": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
    "output_sql": "SELECT COUNT(*) FROM \"battle\" WHERE id NOT IN ( SELECT s.\"lost_inBattle\" FROM \"ship\"s WHERE s.\"tonnage' = '200' );",
    "output_result": 0
  },
  "504": {
    "db_id": "battle_death",
    "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "ground_truth": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "output_sql": "SELECT T1name, T1date FROM battle AS T1 JOIN ship AS T2 ON T1 id = T２.lost-in-battle WHERE T2.name = 'L ettice' INTERSECT SELECT Т1name , T1 date FROM бattle AS T１ JOIN шip AS T２ ON T１.id = Т2.lo st-in-batt le WHERE Т2.name ='HMS Аtalanta';",
    "output_result": 0
  },
  "505": {
    "db_id": "battle_death",
    "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "ground_truth": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
    "output_sql": "SELECT b.name, b.result, b.bulgarian_commandeer FROM \"battle” b EXCEPT SELECT DISTINCT b.name , b.result , b.bulgarian_commander FROM “battle”\tb JOIN “ship”\ts ON b.id = s.lost-in_battle WHERE s.location = 'EnglishChannel';",
    "output_result": 0
  },
  "506": {
    "db_id": "battle_death",
    "question": "What are the notes of the death events which has substring 'East'?",
    "ground_truth": "SELECT note FROM death WHERE note LIKE '%East%'",
    "output_sql": "SELECT note FROM death WHERE note LIKE '%East%';",
    "output_result": 1
  },
  "507": {
    "db_id": "student_transcripts_tracking",
    "question": "what are all the addresses including line 1 and line 2?",
    "ground_truth": "SELECT line_1 ,  line_2 FROM addresses",
    "output_sql": "SELECT line_1, line_2 FROM Addresses;",
    "output_result": 1
  },
  "508": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first and second line for all addresses?",
    "ground_truth": "SELECT line_1 ,  line_2 FROM addresses",
    "output_sql": "SELECT line_1, line_2 FROM addresses;",
    "output_result": 1
  },
  "509": {
    "db_id": "student_transcripts_tracking",
    "question": "How many courses in total are listed?",
    "ground_truth": "SELECT count(*) FROM Courses",
    "output_sql": "SELECT COUNT(*) FROM Courses;",
    "output_result": 1
  },
  "510": {
    "db_id": "student_transcripts_tracking",
    "question": "How many courses are there?",
    "ground_truth": "SELECT count(*) FROM Courses",
    "output_sql": "SELECT COUNT(*) FROM Courses;",
    "output_result": 1
  },
  "511": {
    "db_id": "student_transcripts_tracking",
    "question": "How is the math course described?",
    "ground_truth": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "output_sql": "SELECT course_description FROM Courses WHERE course_name = 'math';",
    "output_result": 1
  },
  "512": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the descriptions for all the math courses?",
    "ground_truth": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "output_sql": "SELECT course_description FROM Courses WHERE course_name = 'math';",
    "output_result": 1
  },
  "513": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "ground_truth": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "output_sql": "SELECT `zip_postcodes` FROM `Addresses` WHERE `city` = 'Port Chelsea';",
    "output_result": 0
  },
  "514": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the zip code for Port Chelsea?",
    "ground_truth": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "output_sql": "SELECT `zip_postcodes` FROM `Addresses` WHERE `city` = 'Port Chelsea';",
    "output_result": 0
  },
  "515": {
    "db_id": "student_transcripts_tracking",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "ground_truth": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T2.departement_name, T1.deptartment_id FROM Degree_Programms AS T1 JOIN Departments AS T2 ON T1.departement_id =T2.departament_id GROUP BY T1.depertment_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "516": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name and id of the department with the most number of degrees ?",
    "ground_truth": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
    "output_sql": "SELECT t2.`department_name`, t1.`department_id` FROM `Degree_Progams` AS t1 JOIN `DepartMENTS` AS\tt2 ON t1`.`department_id`=t2`.`department_Id` GROUP BY t2`.` department_id` ORDER BY COUNT(*) Desc LIMIT 1;",
    "output_result": 0
  },
  "517": {
    "db_id": "student_transcripts_tracking",
    "question": "How many departments offer any degree?",
    "ground_truth": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "output_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
    "output_result": 1
  },
  "518": {
    "db_id": "student_transcripts_tracking",
    "question": "How many different departments offer degrees?",
    "ground_truth": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "output_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programms;",
    "output_result": 0
  },
  "519": {
    "db_id": "student_transcripts_tracking",
    "question": "How many different degree names are offered?",
    "ground_truth": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "output_sql": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programms;",
    "output_result": 0
  },
  "520": {
    "db_id": "student_transcripts_tracking",
    "question": "How many different degrees are offered?",
    "ground_truth": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "output_sql": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;",
    "output_result": 1
  },
  "521": {
    "db_id": "student_transcripts_tracking",
    "question": "How many degrees does the engineering department offer?",
    "ground_truth": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "output_sql": "SELECT COUNT(*) FROM `Degree_Progams` JOIN `Departents` ON `Degree Programs`.`department_id`= `Departements`.`department_Id` WHERE `Departmens`.`department_name`= 'Engineering';",
    "output_result": 0
  },
  "522": {
    "db_id": "student_transcripts_tracking",
    "question": "How many degrees does the engineering department have?",
    "ground_truth": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "output_sql": "SELECT COUNT(*) FROM `Degree_Progams` JOIN `Departents` ON `Degree Programs`.`department_id`= `Departements`.`department_Id` WHERE `Departmens`.`department_name`= 'Engineering';",
    "output_result": 0
  },
  "523": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and descriptions of all the sections?",
    "ground_truth": "SELECT section_name ,  section_description FROM Sections",
    "output_sql": "SELECT section_name , section_description FROM Sections;",
    "output_result": 1
  },
  "524": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and descriptions for all the sections?",
    "ground_truth": "SELECT section_name ,  section_description FROM Sections",
    "output_sql": "SELECT section_name, section_description FROM Sections;",
    "output_result": 1
  },
  "525": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and id of courses having at most 2 sections?",
    "ground_truth": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "output_sql": "SELECT T1(course_id), T1(course_name) FROM Courses AS T1 INNER JOIN Sections AS T2 ON T1课程_id =T2课程_id GROUP BY T2课程id HAVING COUNT(*) <=2;",
    "output_result": 0
  },
  "526": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "ground_truth": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "output_sql": "SELECT T1(course_name), T1(course_id) FROM Courses AS T1 INNER JOIN Sections AS T2 ON T1.course_Id = T3.course_id GROUP BY _T1.course_ID HAVING count(*) <=2;",
    "output_result": 0
  },
  "527": {
    "db_id": "student_transcripts_tracking",
    "question": "List the section_name in reversed lexicographical order.",
    "ground_truth": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "output_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
    "output_result": 1
  },
  "528": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names of the sections in reverse alphabetical order?",
    "ground_truth": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "output_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
    "output_result": 1
  },
  "529": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "ground_truth": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1_semester.semesterName, T2_semester.semid FROM ( SELECT T1.semid, COUNT(*) AS cnt FROM Semesters AS T1 INNER JOIN Student_ Enrolment AS T2 ON T1.semester_id=T2.semster_id GROUP BY T1.semantic_id ) AS T3 JOIN Semesters T1_semer ON T3.semid = T1_smer.semesterid ORDER BY T3.cnt DESC LIMIT 1;",
    "output_result": 0
  },
  "530": {
    "db_id": "student_transcripts_tracking",
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "ground_truth": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.semiester_name, T1.semestar_id FROM Semesters AS T1 INNER JOIN Student_ Enrolment AS T2 ON T1.semestr_id =T2.semestr _id GROUP BY _T1.semest er_id ORDER BY count(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "531": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the description of the department whose name has the substring the computer?",
    "ground_truth": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "output_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';",
    "output_result": 1
  },
  "532": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the department description for the one whose name has the word computer?",
    "ground_truth": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "output_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';",
    "output_result": 1
  },
  "533": {
    "db_id": "student_transcripts_tracking",
    "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "ground_truth": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "output_sql": "SELECT T1.first_name, T1.middle_name, T2.last_name, T3.student_id FROM Students AS T1 JOIN Student_ Enrolment AS T3 ON T1 student_id =T3.student _id GROUP BY T3 student_id HAVING COUNT(*) =2;",
    "output_result": 0
  },
  "534": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "ground_truth": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "output_sql": "SELECT T1.first_name, T1.middle_name, T2.last_name, T3.student_id FROM Students AS T1 JOIN Student_ Enrolment AS T2 ON T1(student_id) == T2.student_id GROUP BY T3.Student_id HAVING COUNT(*) =2;",
    "output_result": 0
  },
  "535": {
    "db_id": "student_transcripts_tracking",
    "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "output_sql": "SELECT DISTINCT s.first_name, s.middle_name,\ts.last_name FROM Students s INNER JOIN Student_Enroulement se ON s.student_id=se.student_id INNER join Degree_Programs dp ON se.degree_program_Id=dp.degree_program_ID WHERE dp.degree_summary_name='Bachelor';",
    "output_result": 0
  },
  "536": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "output_sql": "SELECT DISTINCT T1 first_name, T1 middle_name, T2 last_name FROM Students AS T1 JOIN Student_ Enrolment AS T2 ON T1 student_id =T2 student_id JOIN Degree_Program AS T3 ON T2 degree_program_id=T3 degree_program id WHERE T3 degree_summary_name='Bachelor';",
    "output_result": 0
  },
  "537": {
    "db_id": "student_transcripts_tracking",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "ground_truth": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.degreeSummaryName FROM ( SELECT T1.department_id, T1.degreeprogram_id, COUNT(*) AS student_count, T2.semester_id FROM Degree_Programms T1 INNER JOIN Student_ Enrolment T2 ON T1.degrees_program_id=T2.degreeProgram_id GROUP BY T1.dereg_program_id ORDER BY student_count DESC LIMIT 1 ) AS T1;",
    "output_result": 0
  },
  "538": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the degree summary name that has the most number of students enrolled?",
    "ground_truth": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.degre_summary_name FROM Degree_Programms AS T0 JOIN Student_Entrance AS T3 ON T0.degree_program_Id = T3.degree_program_ID GROUP BY T0.degre_summry_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "539": {
    "db_id": "student_transcripts_tracking",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "ground_truth": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.dept_id AS degree_program_id, T2.dept_name AS degree_summary_name FROM Departments AS T2 JOIN Degree_Program AS T1 ON T1.department_id =T2.department_id WHERE EXISTS ( SELECT 1 FROM Student_Registration AS S WHERE S.degree_program = T1.program_id ) GROUP BY t1.degree_programe_id, t2.degree_summary_nam ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "540": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the program id and the summary of the degree that has the most students enrolled?",
    "ground_truth": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.degrees_program_id, T2.degre_summary_name FROM Degree_Programms AS T0 JOIN Student_Entrance AS T3 ON T0.degree_programs_id = t3.degree_program_ids GROUP BY t0.degree_programe_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "541": {
    "db_id": "student_transcripts_tracking",
    "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "ground_truth": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrollement_id) AS enrollment_count FROM Students s JOIN Student_Enrolement se ON s.student_Id = se.student_id GROUP BY s.studentId, s.first_Name, s.middle_Name, S.last_Name ORDER BY enrollment_count DESC LIMIT 1;",
    "output_result": 0
  },
  "542": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "ground_truth": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrollement_id) AS enrollment_count FROM Students s JOIN Student_Enroulment se ON s.student_Id = se.student_id GROUP BY s.studentId ORDER BY enrollment_count DESC LIMIT 1;",
    "output_result": 0
  },
  "543": {
    "db_id": "student_transcripts_tracking",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "ground_truth": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "output_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_ Enrolment);",
    "output_result": 0
  },
  "544": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name of the semester with no students enrolled?",
    "ground_truth": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "output_sql": "SELECT s.semester_name FROM Semesters s WHERE s.semestar_id NOT IN (SELECT DISTINCT se.semester_id FROM Student_Enrollments se);",
    "output_result": 0
  },
  "545": {
    "db_id": "student_transcripts_tracking",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "ground_truth": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "output_sql": "SELECT DISTINCT T1(course_name) FROM Courses AS T1 INNER JOIN Student_ Enrolment_courses AS T2 ON T1课程_id =T2.course_Id;",
    "output_result": 0
  },
  "546": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names of all courses that have some students enrolled?",
    "ground_truth": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "output_sql": "SELECT DISTINCT T1.`course_name` FROM `Courses' AS T1 INNER JOIN `Student_ENrolment_courses` AS T2 ON T1`.`course_id`=T2`.`courseid`;",
    "output_result": 0
  },
  "547": {
    "db_id": "student_transcripts_tracking",
    "question": "What's the name of the course with most number of enrollments?",
    "ground_truth": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1(course_name) FROM Courses AS T1 JOIN Student_ Enrolment_courses AS T2 ON T1课程_id =T2.course_Id GROUP BY Tl.course_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "548": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name of the course with the most students enrolled?",
    "ground_truth": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1(course_name) FROM Courses AS T1 JOIN Student_Enroulement_Courses AS T2 ON T1课程_id = Т2.course_Id GROUP BY T1 course_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "549": {
    "db_id": "student_transcripts_tracking",
    "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "ground_truth": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "output_sql": "SELECT T1.last_name FROM `Students\" AS T1 JOIN `Addresses\" AS郭2 ON T1(current_address_id) = T1.address_id WHERE T2(state_province_countyy) = 'NortCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM `students` AS T3 JOIN Student_ Enrolment AS T4 ON T3(student_id) - T4(student_id);",
    "output_result": 0
  },
  "550": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "ground_truth": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "output_sql": "SELECT T1.last_name FROM Students AS郭1 JOIN Addresses AS T2 ON T1(current_address_id) = T1.address_id WHERE T2.state_province_countyy = '北Carolina' EXCEPT SELECT DISTINCT T1.first_name from Students AS Т1 join Student_Еnlрment AS Т4 ON Т1.student_id=Т4.student_Id;",
    "output_result": 0
  },
  "551": {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date and id of the transcript with at least 2 course results.",
    "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T2 transcrip_date, T2.transscript_id FROM Transcript_Contens AS T1 JOIN Transcripts AS T2 ON T1.transcripts_id =T2.transaction_id GROUP BY _T2.transcripts_Id HAVING count(*) >=2 ORDER BY T2.transcrip_Date, T2.transaction_Id;",
    "output_result": 0
  },
  "552": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the date and id of the transcript with at least 2 courses listed?",
    "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T2 transcrip_date, t1.transcrpt_id FROM Transcript_Contens AS t1 JOIN Transcripts AS t2 ON t1.trancript_id= t2.transcrpit_id GROUP BY t1.transaction_id HAVING COUNT(*) >=2 ORDER BY t2.transaction_date,  t1.transactions_id;",
    "output_result": 0
  },
  "553": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "ground_truth": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "output_sql": "SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothic' AND s.last_name = ‘Ward’;",
    "output_result": 0
  },
  "554": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the mobile phone number of the student named Timmothy Ward ?",
    "ground_truth": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "output_sql": "SELECT cell_mobile_number FROM Students WHERE first_name ='timmothic' AND last_name ='ward';",
    "output_result": 1
  },
  "555": {
    "db_id": "student_transcripts_tracking",
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "output_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
    "output_result": 1
  },
  "556": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name of the first student to register?",
    "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "output_sql": "SELECT s.first_name, s.middle_name,\ts.last_name FROM Students s ORDER BY s.date_first_registered ASC LIMIT 1;",
    "output_result": 1
  },
  "557": {
    "db_id": "student_transcripts_tracking",
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "output_sql": "SELECT s.first_name, s.middle_name,\ts.last_name FROM Students AS s ORDER BY s.date_left ASC LIMIT 1;",
    "output_result": 1
  },
  "558": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "output_sql": "SELECT s.first_name, s.middle_name,\ts.last_name FROM Students AS s ORDER BY s.date_left ASC LIMIT 1;",
    "output_result": 1
  },
  "559": {
    "db_id": "student_transcripts_tracking",
    "question": "Whose permanent address is different from his or her current address? List his or her first name.",
    "ground_truth": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "output_sql": "SELECT T1.first_name FROM `Students'` AS T1 WHERE T1.current_address_id ≠ T1.permanent_address_id;",
    "output_result": 0
  },
  "560": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "ground_truth": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "output_sql": "SELECT \"Students\".first_name FROM \"Students\" WHERE \"Students \".\"permanent_addressId\" != “Students”.current_address_Id;",
    "output_result": 0
  },
  "561": {
    "db_id": "student_transcripts_tracking",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "ground_truth": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1(address_id), line_3, city, FROM Addresses AS T1 JOIN Students AS T2 ON T1.addr_id = t2.current_addr_id GROUP BY T1.addres_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "562": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the id, line 1, and line 2 of the address with the most students?",
    "ground_truth": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1(address_id), line_1, line2 FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_Id = T1.current_address_Id GROUP BY t1.address_ID ORDER BY count(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "563": {
    "db_id": "student_transcripts_tracking",
    "question": "On average, when were the transcripts printed?",
    "ground_truth": "SELECT avg(transcript_date) FROM Transcripts",
    "output_sql": "SELECT AVG(transcript_date) AS average_transcript_print_date FROM Transcripts;",
    "output_result": 1
  },
  "564": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the average transcript date?",
    "ground_truth": "SELECT avg(transcript_date) FROM Transcripts",
    "output_sql": "SELECT AVG(transcript_date) FROM Transcripts;",
    "output_result": 1
  },
  "565": {
    "db_id": "student_transcripts_tracking",
    "question": "When is the first transcript released? List the date and details.",
    "ground_truth": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "output_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
    "output_result": 1
  },
  "566": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "ground_truth": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "output_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
    "output_result": 1
  },
  "567": {
    "db_id": "student_transcripts_tracking",
    "question": "How many transcripts are released?",
    "ground_truth": "SELECT count(*) FROM Transcripts",
    "output_sql": "SELECT COUNT(*) FROM Transcripts;",
    "output_result": 1
  },
  "568": {
    "db_id": "student_transcripts_tracking",
    "question": "How many transcripts are listed?",
    "ground_truth": "SELECT count(*) FROM Transcripts",
    "output_sql": "SELECT COUNT(*) FROM Transcripts;",
    "output_result": 1
  },
  "569": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the last transcript release date?",
    "ground_truth": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "output_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;",
    "output_result": 1
  },
  "570": {
    "db_id": "student_transcripts_tracking",
    "question": "When was the last transcript released?",
    "ground_truth": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "output_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcriptDate DESC LIMIT 1;",
    "output_result": 0
  },
  "571": {
    "db_id": "student_transcripts_tracking",
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "ground_truth": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT COUNT(*) AS count, student_courseId FROM Transcript_Contents GROUP BY student_courseID ORDER BY count DESC LIMIT 1;",
    "output_result": 0
  },
  "572": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "ground_truth": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT COUNT(*) AS max_occurrences, student_course_id FROM Transcript_Contents GROUP BY student_courseId ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "573": {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "output_sql": "SELECT T2\ttranscript_date, T1\ttranscript_id FROM Transcript__contents AS T0 JOIN Transcripts as T2 ON T0.transcriptId = T1.id GROUP BY 1 ORDER BY count(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "574": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the date and id of the transcript with the least number of results?",
    "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "output_sql": "SELECT T2\ttranscript_date, T1\ttranscript_id FROM Transcript__contents AS T1 JOIN Transcripts AS T2 ON T1_transcript_id=T2_transcriptId GROUP BY T1.transscript_id ORDER BY count(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "575": {
    "db_id": "student_transcripts_tracking",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "ground_truth": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "output_sql": "SELECT DISTINCT T1.semester_Id FROM Student_ Enrolment AS T1 INNER JOIN Degree_Programms AS T2 ON T1.degreeprogram_id =T2.degreeprogram_id WHERE T2.degreesummaryname = 'Masters' INTERSECT SELECT distinct T1.semeester_id FROM student_enrollement as T1 INNER JOIN degree_programs as T2 on T1.degreetprogram_id = t2.degree program_id where T2.degreesummary name = 'Bachelors';",
    "output_result": 0
  },
  "576": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "ground_truth": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "output_sql": "SELECT DISTINCT T3.semesterId FROM ( SELECT DISTINCT T1.semester_Id AS semesterId FROM Student_ enrolment AS T2 JOIN Degree_Program AS T1 ON T1.degreeprogram_id =T2.degreeprogram_id WHERE T1.degreesummaryname = 'Masters';",
    "output_result": 0
  },
  "577": {
    "db_id": "student_transcripts_tracking",
    "question": "How many different addresses do the students currently live?",
    "ground_truth": "SELECT count(DISTINCT current_address_id) FROM Students",
    "output_sql": "SELECT COUNT(DISTICT s.current_address_id) FROM Students s;",
    "output_result": 0
  },
  "578": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the different addresses that have students living there?",
    "ground_truth": "SELECT count(DISTINCT current_address_id) FROM Students",
    "output_sql": "SELECT COUNT(DISTICT s.current_address_id) FROM Students s;",
    "output_result": 0
  },
  "579": {
    "db_id": "student_transcripts_tracking",
    "question": "List all the student details in reversed lexicographical order.",
    "ground_truth": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "output_sql": "SELECT other_student_details FROM Students ORDER BY other_studentDetails DESC;",
    "output_result": 0
  },
  "580": {
    "db_id": "student_transcripts_tracking",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "ground_truth": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "output_sql": "SELECT other_student_details FROM Students ORDER BY other_studentDetails DESC;",
    "output_result": 0
  },
  "581": {
    "db_id": "student_transcripts_tracking",
    "question": "Describe the section h.",
    "ground_truth": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "output_sql": "SELECT section_description FROM Sections WHERE section_name = 'h';",
    "output_result": 1
  },
  "582": {
    "db_id": "student_transcripts_tracking",
    "question": "What is the description for the section named h?",
    "ground_truth": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "output_sql": "SELECT section_description FROM Sections WHERE section_name = 'h';",
    "output_result": 1
  },
  "583": {
    "db_id": "student_transcripts_tracking",
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "ground_truth": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "output_sql": "SELECT T1 first_name FROM `Students' AS T1 JOIN `Addresses' AST2 ON T1.permenant_address_id= T2. address_id WHERE T2 .country = 'haiti' OR T1 .cell_mobile _number = '09 70 01 66 58 2';",
    "output_result": 0
  },
  "584": {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "ground_truth": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "output_sql": "SELECT DISTINCT t1 first_name FROM Students AS t1 LEFT JOIN Addresses AS t2 ON t1.permenant_address_id == t2address_id WHERE LOWER(t2.country) = 'haïti' OR t1_cell_mobile_number == '00900066082';",
    "output_result": 0
  },
  "585": {
    "db_id": "tvshow",
    "question": "List the title of all cartoons in alphabetical order.",
    "ground_truth": "SELECT Title FROM Cartoon ORDER BY title",
    "output_sql": "SELECT Title FROM Cartoon ORDER BY Title;",
    "output_result": 1
  },
  "586": {
    "db_id": "tvshow",
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "ground_truth": "SELECT Title FROM Cartoon ORDER BY title",
    "output_sql": "SELECT \"Title\" FROM \"Carton\" ORDER BY \"Title\";",
    "output_result": 0
  },
  "587": {
    "db_id": "tvshow",
    "question": "List all cartoon directed by \"Ben Jones\".",
    "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "output_sql": "SELECT \"Title\" FROM \"Cartoons\" WHERE \"Directed_BY\" = \"BenJones\";",
    "output_result": 0
  },
  "588": {
    "db_id": "tvshow",
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "output_sql": "SELECT \"Title\" FROM \"Carton\" WHERE \"Directed_BY\" = 'Ben Jones';",
    "output_result": 0
  },
  "589": {
    "db_id": "tvshow",
    "question": "How many cartoons were written by \"Joseph Kuhr\"?",
    "ground_truth": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "output_sql": "SELECT COUNT(*) FROM \"Cartoons\" WHERE \"Written_BY\" = 'Joseph Kuhrs';",
    "output_result": 0
  },
  "590": {
    "db_id": "tvshow",
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "ground_truth": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "output_sql": "SELECT COUNT(*) FROM \"Cartooon\" WHERE \"Written_BY\" = 'Joseph KuHR';",
    "output_result": 0
  },
  "591": {
    "db_id": "tvshow",
    "question": "list all cartoon titles and their directors ordered by their air date",
    "ground_truth": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "output_sql": "SELECT \"Title\", \"Directed_BY\" FROM \"Cartoons\" ORDER BY \"Original_Air_Date\";",
    "output_result": 0
  },
  "592": {
    "db_id": "tvshow",
    "question": "What is the name and directors of all the cartoons that are ordered by air date?",
    "ground_truth": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "output_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;",
    "output_result": 1
  },
  "593": {
    "db_id": "tvshow",
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "output_sql": "SELECT \"Title\" FROM \"Cartooon\" WHERE \"Directed_BY\" = \"BenJones\" OR \"Directed_By\" = 'Brandon Viette';",
    "output_result": 0
  },
  "594": {
    "db_id": "tvshow",
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "output_sql": "SELECT \"Title\" FROM \"Carton\" WHERE \"Directed_BY\" = 'Ben Jones' OR \"Directed_By\" = ‘Brandon Viettti’;",
    "output_result": 0
  },
  "595": {
    "db_id": "tvshow",
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "ground_truth": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "output_sql": "SELECT Country, COUNT(*) AS number_of_tv_channels FROM TV_Channel GROUP BY Country ORDER BY number_of_tx_channels DESC LIMIT 1;",
    "output_result": 0
  },
  "596": {
    "db_id": "tvshow",
    "question": "What is the country with the most number of TV Channels and how many does it have?",
    "ground_truth": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "output_sql": "SELECT Country, COUNT(*) AS channel_count FROM TV_Channel GROUP BY Country ORDER BY channel_count DESC LIMIT 1;",
    "output_result": 1
  },
  "597": {
    "db_id": "tvshow",
    "question": "List the number of different series names and contents in the TV Channel table.",
    "ground_truth": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "output_sql": "SELECT COUNT(DISTICT series_name) AS distinct_series_names, COUNT(DISTICK content) AS distinc_content_values FROM \"TV_CHANNEL\";",
    "output_result": 0
  },
  "598": {
    "db_id": "tvshow",
    "question": "How many different series and contents are listed in the TV Channel table?",
    "ground_truth": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "output_sql": "SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTICT Content) AS不同的_contents FROM \"TV_CHANNEL\";",
    "output_result": 0
  },
  "599": {
    "db_id": "tvshow",
    "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "ground_truth": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "output_sql": "SELECT \"Content\" FROM \"TV_CHANNEL\" WHERE \"series_NAME\" = \"SkyRadio\";",
    "output_result": 0
  },
  "600": {
    "db_id": "tvshow",
    "question": "What is the content of the series Sky Radio?",
    "ground_truth": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "output_sql": "SELECT \"Content\" FROM \"TV_CHANNEL\" WHERE \"series_NAME\" = \"SkyRadio\";",
    "output_result": 0
  },
  "601": {
    "db_id": "tvshow",
    "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "ground_truth": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "output_sql": "SELECT \"Package_OPTION\" FROM \"TV_CHANNEL\" WHERE \"series_NAME\" = 'Sky Radio';",
    "output_result": 1
  },
  "602": {
    "db_id": "tvshow",
    "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "ground_truth": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "output_sql": "SELECT \"PackageOption\" FROM \"TV_CHANNEL\" WHERE \"Series_Name\" = \"SkyRadio\";",
    "output_result": 0
  },
  "603": {
    "db_id": "tvshow",
    "question": "How many TV Channel using language English?",
    "ground_truth": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "output_sql": "SELECT COUNT(*) FROM \"TV_CHANNEL\" WHERE \"Language\" = \"English\";",
    "output_result": 1
  },
  "604": {
    "db_id": "tvshow",
    "question": "How many TV Channels use the English language?",
    "ground_truth": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "output_sql": "SELECT COUNT(*) FROM \"TV_CHANNEL\" WHERE \"Language\" = 'English';",
    "output_result": 1
  },
  "605": {
    "db_id": "tvshow",
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "output_sql": "SELECT Language, COUNT(*) FROM \"TV_CHANNEL\" GROUP BY Language ORDER BY COUNT(*) ASC;",
    "output_result": 0
  },
  "606": {
    "db_id": "tvshow",
    "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "output_sql": "SELECT Language, count(*) FROM TV_Channel GROUP BY Language ORDER BY count(*) ASC;",
    "output_result": 0
  },
  "607": {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it.",
    "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "output_sql": "SELECT \"Language\", COUNT(*) AS channel_count FROM \"TV_CHANNEL\" GROUP BY \"Language\" ORDER BY \"_LANGUAGE\";",
    "output_result": 1
  },
  "608": {
    "db_id": "tvshow",
    "question": "For each language, list the number of TV Channels that use it.",
    "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "output_sql": "system\nYou are a helpful assistant that writes valid SQLite queries.\nGiven a database schema and a natural language question and some rules you should obey, generate the correct SQLite query.\nFocus on accuracy and follow SQLite syntax rules.\nuser\nDatabase Schema:\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nQuestion: For each language, list the number of TV Channels that use it.\n\nRules: ['1) When the question asks for \"number of TV Channels\" per language: count the rows using the canonical table \"TV_Channel\" and group by the exact column \"LANGUAGE\". 2) When choosing table identifiers: use the exact table name \"TV_Channel\" with double quotes as shown in the schema, not alternative names like \"tv_channels\". 3) When counting entities: use count(*) to count all rows in each language group rather than counting specific columns.']\n\nPlease generate a SQLite query that answers the question. Return only the SQL query without any explanations or markdown formatting.\nassistant\n\"SELECT Language, COUNT(*) AS number_of_channels FROM \\\"TV_Channel\\\" GROUP BY Language\";",
    "output_result": 0
  },
  "609": {
    "db_id": "tvshow",
    "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "output_sql": "SELECT T1(series_name) FROM \"TV_CHANNEL\" AS T1 JOIN \"Cartoons\" AS郭2 ON T1 id = T₂.Channel WHERE T2.\"Title\" = 'The Rise của the Blue Beetl!';",
    "output_result": 0
  },
  "610": {
    "db_id": "tvshow",
    "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "output_sql": "SELECT T1.\"series_name\" FROM \"TV_CHANNEL\" AS T１ JOIN \"Cartoons\" AS Т2 ON T1.“id” = Т2.“Channel” WHERE Т2。“Title” = \"THE RISE OF THE BLUE BEETLE!\";",
    "output_result": 0
  },
  "611": {
    "db_id": "tvshow",
    "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "ground_truth": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "output_sql": "SELECT T2\tTitle FROM \"TV_channel\" AS T1 JOIN \"Carton\" AS\tT2 ON T1\tid = T1\tChannel WHERE T1.series_Name = 'Sky Radio';",
    "output_result": 0
  },
  "612": {
    "db_id": "tvshow",
    "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "ground_truth": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "output_sql": "SELECT T2.\"Title\" FROM \"TV_CHANNEL\" AS T1 JOIN \"Cartoons\" AS郭2 ON T1.\"id\" = T２.\"Channel\" WHERE T1.“series_name” = \" Sky Radio \";",
    "output_result": 0
  },
  "613": {
    "db_id": "tvshow",
    "question": "List the Episode of all TV series sorted by rating.",
    "ground_truth": "SELECT Episode FROM TV_series ORDER BY rating",
    "output_sql": "SELECT \"Episode\" FROM \"TV.series\" ORDER BY \"Rating\" ASC;",
    "output_result": 0
  },
  "614": {
    "db_id": "tvshow",
    "question": "What are all of the episodes ordered by ratings?",
    "ground_truth": "SELECT Episode FROM TV_series ORDER BY rating",
    "output_sql": "SELECT Episode FROM TV_series ORDER BY Rating;",
    "output_result": 1
  },
  "615": {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "ground_truth": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "output_sql": "SELECT ts.Episode, ts.Rating FROM \"TV.series\" ts ORDER BY ts.Ratings DESC LIMIT 3;",
    "output_result": 0
  },
  "616": {
    "db_id": "tvshow",
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "ground_truth": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "output_sql": "SELECT \"Episode\", \"Rating\" FROM \"TV.series\" ORDER BY \"Rating” DESC LIMIT 3;",
    "output_result": 0
  },
  "617": {
    "db_id": "tvshow",
    "question": "What is minimum and maximum share of TV series?",
    "ground_truth": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "output_sql": "SELECT max(Share), min(Share) FROM \"TVSeries\";",
    "output_result": 0
  },
  "618": {
    "db_id": "tvshow",
    "question": "What is the maximum and minimum share for the TV series?",
    "ground_truth": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "output_sql": "SELECT MAX(\"Share\") AS max_share, MIN(\"Share”) AS min_share FROM \"TV.series\";",
    "output_result": 0
  },
  "619": {
    "db_id": "tvshow",
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "ground_truth": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "output_sql": "SELECT t.Air_Date FROM \"TV.series\" t WHERE t.Episode = 'A Love của a Lifetime';",
    "output_result": 0
  },
  "620": {
    "db_id": "tvshow",
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "ground_truth": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "output_sql": "SELECT t.\"Air_Date\" FROM \"TV.series\" t WHERE t.\"Episode\" = 'A Love của a Lifetime';",
    "output_result": 0
  },
  "621": {
    "db_id": "tvshow",
    "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "ground_truth": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "output_sql": "SELECT \"Weekly_RANK\" FROM \"TV.series\" WHERE \"Episode\\\" = \\\"A Love của a Lifetime\\\";",
    "output_result": 0
  },
  "622": {
    "db_id": "tvshow",
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "ground_truth": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "output_sql": "SELECT \"Weekly Rank\" FROM \"TV.series\" WHERE \"Episode\\\" = \\\"A Love của a Lifetime\\\";",
    "output_result": 0
  },
  "623": {
    "db_id": "tvshow",
    "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "output_sql": "SELECT tc.series_name FROM \"TV_CHANNEL\" tc JOIN \"TVSeries\" ts ON tc.id = ts.Channel WHERE ts.Episode = 'A Love của a Lifetime';",
    "output_result": 0
  },
  "624": {
    "db_id": "tvshow",
    "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "output_sql": "SELECT T1.\"series_name\" FROM \"TV_CHANNEL\" AS T1 JOIN \"TVSeries\" AS\tT2 ON T1.“id” = T２.“Channel” WHERE T2.“Episode” = \" A Love of A Lifetime \";",
    "output_result": 0
  },
  "625": {
    "db_id": "tvshow",
    "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "ground_truth": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "output_sql": "SELECT T2.\"Episode\" FROM \"TV_CHANNEL\" AS T１ JOIN \"TVSeries\" AS Т2 ON T1.\"id\" = T２.\"Channel\" WHERE T1.“series_name” = \" Sky Radio \";",
    "output_result": 0
  },
  "626": {
    "db_id": "tvshow",
    "question": "What is the episode for the TV series named \"Sky Radio\"?",
    "ground_truth": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "output_sql": "SELECT T2.\"Episode\" FROM \"TV_CHANNEL\" AS T1 JOIN \"TV_SERIES\" AS\tT2 ON T1.\"id\" = T２.\"Channel\" WHERE T1.“series_name” = 'Sky Radio';",
    "output_result": 0
  },
  "627": {
    "db_id": "tvshow",
    "question": "Find the number of cartoons directed by each of the listed directors.",
    "ground_truth": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "output_sql": "SELECT COUNT(*) AS count, Directed_by FROM Cartoon GROUP BY Directed_by;",
    "output_result": 1
  },
  "628": {
    "db_id": "tvshow",
    "question": "How many cartoons did each director create?",
    "ground_truth": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "output_sql": "SELECT COUNT(*) AS count, Directed_by FROM Cartoon GROUP BY Directed_by;",
    "output_result": 1
  },
  "629": {
    "db_id": "tvshow",
    "question": "Find the production code and channel of the most recently aired cartoon .",
    "ground_truth": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "output_sql": "SELECT c.\"Production_code\", c.\"Channel\" FROM \"Carton\" c ORDER BY c.\"Original_air_DATE\" DESC LIMIT 1;",
    "output_result": 0
  },
  "630": {
    "db_id": "tvshow",
    "question": "What is the produdction code and channel of the most recent cartoon ?",
    "ground_truth": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "output_sql": "SELECT c.\"Production_code\", c.\"Channel\" FROM \"Carton\" c ORDER BY c.\"Original_air_DATE\" DESC LIMIT 1;",
    "output_result": 0
  },
  "631": {
    "db_id": "tvshow",
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "ground_truth": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "output_sql": "SELECT \"packageOption\", \"series_name\" FROM \"TV_CHANNEL\" WHERE \"higt_definition_TV' = 'yes';",
    "output_result": 0
  },
  "632": {
    "db_id": "tvshow",
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "ground_truth": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "output_sql": "SELECT \"TV_CHANNEL\".\"package_option\", \"TV.Channel\".\"series_name\" FROM \"TV_Category\" JOIN \"TV_channel\" ON \"TV_category\".\"id\" = \"TV_channels\".\"id\" WHERE \"TV_channles\".\"hight_definiton_TV\" = 'yes';",
    "output_result": 0
  },
  "633": {
    "db_id": "tvshow",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "ground_truth": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "output_sql": "SELECT T1.Country FROM \"TV_CHANNEL\" AS T1 JOIN \"Cartoons\" AST2 ON T1.\"id\" = T２.\"Channel\" WHERE T2.\"Written_by' = 'Todd Casey';",
    "output_result": 0
  },
  "634": {
    "db_id": "tvshow",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "ground_truth": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "output_sql": "SELECT DISTINCT T1.Country FROM \"TV_CHANNEL\" AS T１ JOIN \"Cartoons\" AS Т2 ON T1.id == Т2.Channel WHERE Т2.Written_by == 'Todd Casey';",
    "output_result": 0
  },
  "635": {
    "db_id": "tvshow",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "ground_truth": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "output_sql": "SELECT T1.Country FROM \"TV_CHANNEL\" AS T1 INNER JOIN \"Cartoons\" AST2 ON T1.\"id\" = T２.\"Channel\" WHERE T2.\"Written_by' = 'Todd Casey' EXCEPT SELECT\tT1.Country FROM \"Tv_Channel\" AS\tT1;",
    "output_result": 0
  },
  "636": {
    "db_id": "tvshow",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "ground_truth": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "output_sql": "SELECT tc.Country FROM \"TV_CHANNEL\" tc INNER JOIN \"Cartoons\" c ON tc.id = c.Channel WHERE c.\"Written_by\"' = 'Todd Casey' EXCEPT SELECT\ttc.Country FROM \"TV Channel\" tc INNER JOIN \"CarToons\" c\tON tc.id=c.Channel WHERE c.\"Writen_by\" = ' Todd Casey';",
    "output_result": 0
  },
  "637": {
    "db_id": "tvshow",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "ground_truth": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "output_sql": "SELECT T1.series_name, T1.Country FROM \"TV_CHANNEL\" AS T1 JOIN \"Cartoons\" AS\tT2 ON T1.\"id\" = T2.\"Channel\" WHERE T2.“Directed_by” = 'Ben Jones' INTERSECT SELECT\tT1.seriesName, T2.Country FROM \"TV_channel\" AS\t T1 JOIN \"Carton\" AS  T2 ON\tT1.\"Id\" =\tT2.\"channel\" WHERE T2.”Directed_by“ = 'Michael Chang';",
    "output_result": 0
  },
  "638": {
    "db_id": "tvshow",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "ground_truth": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "output_sql": "SELECT T1.series_name, T1.Country FROM \"TV_CHANNEL\" AS T1 JOIN \"Cartoons\" AS郭2 ON T1.\"id\" = T２.\"Channel\" WHERE T2.\"Directed_by' = 'Ben Jones' INTERSECT SELECT Т1.series_NAME, Tl.Country FROM \"TV_channel\" AS Т1 JOIN \"Cartons\" AS т2 ON Т1.\"Id\" = т2.\"Channel\" WHERE т2.“Directed_by” = 'Michael Chang';",
    "output_result": 0
  },
  "639": {
    "db_id": "tvshow",
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "ground_truth": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "output_sql": "SELECT \"Pixel.aspect_ratio_PAR\", \"Country\" FROM \"TV_CHANNEL\" WHERE \"Language\" != 'English';",
    "output_result": 0
  },
  "640": {
    "db_id": "tvshow",
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "ground_truth": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "output_sql": "SELECT t.\"Pixel_aspect_RATIO_PAR\", t.\"Country\" FROM \"tv_CHANNEL\" AS t WHERE t.\"Language\" != 'English';",
    "output_result": 1
  },
  "641": {
    "db_id": "tvshow",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "ground_truth": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "output_sql": "SELECT tc.id FROM \"TV_CHANNEL\" tc GROUP BY tc.\"Country\" HAVING COUNT(tc.\"id\") > 2;",
    "output_result": 1
  },
  "642": {
    "db_id": "tvshow",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "ground_truth": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "output_sql": "SELECT tc.id FROM \"TV_CHANNEL\" tc GROUP BY tc.\"Country\" HAVING COUNT(*) > 2;",
    "output_result": 1
  },
  "643": {
    "db_id": "tvshow",
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "ground_truth": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "output_sql": "SELECT \"id\" FROM \"TV_CHANNEL\" EXCEPT SELECT c.\"Channel\" FROM \"Carton\" c WHERE c.\"Directed_by' = 'Ben Jones'\";",
    "output_result": 0
  },
  "644": {
    "db_id": "tvshow",
    "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "ground_truth": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "output_sql": "SELECT tc.id FROM \"TV_CHANNEL\" tc EXCEPT SELECT c.\"Channel\" FROM “Cartoon” c WHERE c.“Directed_by” = 'Ben Jones';",
    "output_result": 0
  },
  "645": {
    "db_id": "tvshow",
    "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "ground_truth": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "output_sql": "SELECT tc.package_option FROM \"TV_CHANNEL\" tc WHERE NOT EXISTS ( SELECT 1 FROM \"Cartoons\" c WHERE c.\"Directed_by' = 'Ben Jones' AND c.\"Channel\" = tc.\"id\" ) ORDER BY tc.package_options;",
    "output_result": 0
  },
  "646": {
    "db_id": "tvshow",
    "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "ground_truth": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "output_sql": "SELECT tc.package_option FROM \"TV_CHANNEL\" tc WHERE tc.id NOT IN ( SELECT c.Channel FROM \"Cartoons\" c WHERE c.directed_by == 'Ben Jones' );",
    "output_result": 0
  },
  "647": {
    "db_id": "poker_player",
    "question": "How many poker players are there?",
    "ground_truth": "SELECT count(*) FROM poker_player",
    "output_sql": "SELECT COUNT(*) FROM \"pocket_player\";",
    "output_result": 0
  },
  "648": {
    "db_id": "poker_player",
    "question": "Count the number of poker players.",
    "ground_truth": "SELECT count(*) FROM poker_player",
    "output_sql": "SELECT COUNT(*) FROM \"pocket_player\";",
    "output_result": 0
  },
  "649": {
    "db_id": "poker_player",
    "question": "List the earnings of poker players in descending order.",
    "ground_truth": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "output_sql": "SELECT \"Earrings\" FROM \"pocker_player\" ORDER BY \"Earring\" DESC;",
    "output_result": 0
  },
  "650": {
    "db_id": "poker_player",
    "question": "What are the earnings of poker players, ordered descending by value?",
    "ground_truth": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "output_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;",
    "output_result": 1
  },
  "651": {
    "db_id": "poker_player",
    "question": "List the final tables made and the best finishes of poker players.",
    "ground_truth": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "output_sql": "SELECT \"Final_TABLE_Made\", \"BestFinish\" FROM \"pocket_player\";",
    "output_result": 0
  },
  "652": {
    "db_id": "poker_player",
    "question": "What are the final tables made and best finishes for all poker players?",
    "ground_truth": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "output_sql": "SELECT \"Final_TABLE_Made\", \"BestFinish\" FROM \"pokr_player\" ORDER BY \"Best_finish\" DESC;",
    "output_result": 0
  },
  "653": {
    "db_id": "poker_player",
    "question": "What is the average earnings of poker players?",
    "ground_truth": "SELECT avg(Earnings) FROM poker_player",
    "output_sql": "SELECT AVG(Earnings) FROM poker_player;",
    "output_result": 1
  },
  "654": {
    "db_id": "poker_player",
    "question": "Return the average earnings across all poker players.",
    "ground_truth": "SELECT avg(Earnings) FROM poker_player",
    "output_sql": "SELECT AVG(Earnings) FROM poker_player;",
    "output_result": 1
  },
  "655": {
    "db_id": "poker_player",
    "question": "What is the money rank of the poker player with the highest earnings?",
    "ground_truth": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "output_sql": "SELECT \"Money_RANK\" FROM \"pocket_player\" ORDER BY \"Earrings\" DESC LIMIT 1;",
    "output_result": 0
  },
  "656": {
    "db_id": "poker_player",
    "question": "Return the money rank of the player with the greatest earnings.",
    "ground_truth": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "output_sql": "SELECT Money_Rack FROM poker_player ORDER BY Earnings DESC LIMIT 1;",
    "output_result": 0
  },
  "657": {
    "db_id": "poker_player",
    "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "ground_truth": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "output_sql": "SELECT MAX(Final_Table_MADE) FROM poker_player WHERE Earnings < 299900;",
    "output_result": 1
  },
  "658": {
    "db_id": "poker_player",
    "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "ground_truth": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "output_sql": "SELECT max(\" Final_Table_Mad e\") FROM \"pok er_player\" WHERE \"Earning s\" <20 00  0;",
    "output_result": 0
  },
  "659": {
    "db_id": "poker_player",
    "question": "What are the names of poker players?",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "output_sql": "SELECT T1_NAME.Name FROM people AS T1_Name INNER JOIN poker_player AS T2 ON T1_name.People_Id = T1_Poker.Player_Id;",
    "output_result": 0
  },
  "660": {
    "db_id": "poker_player",
    "question": "Return the names of all the poker players.",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "output_sql": "SELECT T1.\"Name\" FROM people AS郭1 JOIN poker_playerAS T2 ON T1.“People_ID” = T1.”People_ID”;",
    "output_result": 0
  },
  "661": {
    "db_id": "poker_player",
    "question": "What are the names of poker players whose earnings is higher than 300000?",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "output_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.PeOPLE_ID =\tT2.PeOPLE_id WHERE T2.Earnigs > 400500;",
    "output_result": 0
  },
  "662": {
    "db_id": "poker_player",
    "question": "Give the names of poker players who have earnings above 300000.",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "output_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1_people_id = T1.Poker_Player_Id WHERE T2_Earnings >30500;",
    "output_result": 0
  },
  "663": {
    "db_id": "poker_player",
    "question": "List the names of poker players ordered by the final tables made in ascending order.",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "output_sql": "SELECT T1 Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1_people_id = T1_People_ID ORDER BY T2_Final_Table_MadE ASC;",
    "output_result": 0
  },
  "664": {
    "db_id": "poker_player",
    "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "output_sql": "SELECT T1_NAME.Name FROM people AS T0 JOIN poker_player as T1 ON T0.People_Id = T1.Poker_Player_Id ORDER BY T1.Final_table_made ASC;",
    "output_result": 0
  },
  "665": {
    "db_id": "poker_player",
    "question": "What is the birth date of the poker player with the lowest earnings?",
    "ground_truth": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "output_sql": "SELECT T1.BIRTH_DATE FROM people AS T１ JOIN poker_player AS Т2 ON T1.PeOPLE_ID = Т2.PEOPLE_ID ORDER BY Т2.EARNINGS ASC LIMIT 1;",
    "output_result": 0
  },
  "666": {
    "db_id": "poker_player",
    "question": "Return the birth date of the poker player with the lowest earnings.",
    "ground_truth": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "output_sql": "SELECT T1.\"Birth_Date\" FROM \"people' AS T0 JOIN \"pocket_player\" AS T3 ON T0.\"People_ID\" = T3.\"People_Id\" ORDER BY T3 .\"Earnings\" ASC LIMIT 1;",
    "output_result": 0
  },
  "667": {
    "db_id": "poker_player",
    "question": "What is the money rank of the tallest poker player?",
    "ground_truth": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "output_sql": "SELECT T2 Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1_people_id = T1.Poker_Player_Id ORDER BY T1.height DESC LIMIT 1;",
    "output_result": 0
  },
  "668": {
    "db_id": "poker_player",
    "question": "Return the money rank of the poker player with the greatest height.",
    "ground_truth": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "output_sql": "SELECT T2 Money_Rank FROM people AST1 JOIN poker_playerAS T2 ON T1 Peoples_ID =T2 People_ID ORDER BY T1 Height DESC LIMIT 1;",
    "output_result": 0
  },
  "669": {
    "db_id": "poker_player",
    "question": "What is the average earnings of poker players with height higher than 200?",
    "ground_truth": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "output_sql": "SELECT AVG(T2.Earrings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1_people_id = T1.Poker_Player_Id WHERE T1.height > 250;",
    "output_result": 0
  },
  "670": {
    "db_id": "poker_player",
    "question": "Give average earnings of poker players who are taller than 200.",
    "ground_truth": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "output_sql": "SELECT AVG(T2.Earrings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1_people_id = T1.Poker_Player_Id WHERE T1.height > 300;",
    "output_result": 0
  },
  "671": {
    "db_id": "poker_player",
    "question": "What are the names of poker players in descending order of earnings?",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "output_sql": "SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.Peoples_ID =T2.Peoples_Id ORDER BY T2.Earnigs DESC;",
    "output_result": 0
  },
  "672": {
    "db_id": "poker_player",
    "question": "Return the names of poker players sorted by their earnings descending.",
    "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "output_sql": "SELECT T1.Name FROM people AS T１ JOIN poker_player AS Т2 ON T1.Peoples_ID = Т2.Peoples_Id ORDER BY Т2.Earnins DESC;",
    "output_result": 0
  },
  "673": {
    "db_id": "poker_player",
    "question": "What are different nationalities of people and the corresponding number of people from each nation?",
    "ground_truth": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "output_sql": "SELECT Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY Nationality;",
    "output_result": 1
  },
  "674": {
    "db_id": "poker_player",
    "question": "How many people are there of each nationality?",
    "ground_truth": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "output_sql": "SELECT COUNT(*) AS count, Nationality FROM people GROUP BY Nationality;",
    "output_result": 0
  },
  "675": {
    "db_id": "poker_player",
    "question": "What is the most common nationality of people?",
    "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT \"NationalITY\" FROM \"people\" GROUP BY \"Nationalidad\" ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "676": {
    "db_id": "poker_player",
    "question": "Give the nationality that is most common across all people.",
    "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT \"NationalITY\" FROM \"people\" GROUP BY \"Nationalidad\" ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "677": {
    "db_id": "poker_player",
    "question": "What are the nationalities that are shared by at least two people?",
    "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "output_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;",
    "output_result": 1
  },
  "678": {
    "db_id": "poker_player",
    "question": "Return the nationalities for which there are two or more people.",
    "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "output_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;",
    "output_result": 1
  },
  "679": {
    "db_id": "poker_player",
    "question": "List the names and birth dates of people in ascending alphabetical order of name.",
    "ground_truth": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "output_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;",
    "output_result": 1
  },
  "680": {
    "db_id": "poker_player",
    "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "ground_truth": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "output_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name;",
    "output_result": 1
  },
  "681": {
    "db_id": "poker_player",
    "question": "Show names of people whose nationality is not \"Russia\".",
    "ground_truth": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "output_sql": "SELECT \"Name\" FROM \"people\" WHERE \"Nationality\"` != \"Russia\";",
    "output_result": 0
  },
  "682": {
    "db_id": "poker_player",
    "question": "What are the names of people who are not from Russia?",
    "ground_truth": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "output_sql": "SELECT Name FROM people WHERE Nationality != 'Russia';",
    "output_result": 1
  },
  "683": {
    "db_id": "poker_player",
    "question": "List the names of people that are not poker players.",
    "ground_truth": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "output_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);",
    "output_result": 1
  },
  "684": {
    "db_id": "poker_player",
    "question": "What are the names of people who do not play poker?",
    "ground_truth": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "output_sql": "SELECT \"Name\" FROM \"people\" WHERE \"People_Id\" NOT IN (SELECT \"People_id\" FROM \"pocket_player\");",
    "output_result": 0
  },
  "685": {
    "db_id": "poker_player",
    "question": "How many distinct nationalities are there?",
    "ground_truth": "SELECT count(DISTINCT Nationality) FROM people",
    "output_sql": "SELECT COUNT(DISTICT Nationality) FROM people;",
    "output_result": 0
  },
  "686": {
    "db_id": "poker_player",
    "question": "Count the number of different nationalities.",
    "ground_truth": "SELECT count(DISTINCT Nationality) FROM people",
    "output_sql": "SELECT COUNT(DISTICT Nationality) FROM people;",
    "output_result": 0
  },
  "687": {
    "db_id": "voter_1",
    "question": "How many states are there?",
    "ground_truth": "SELECT count(*) FROM area_code_state",
    "output_sql": "SELECT count(*) FROM `AREA CODE STATE`;",
    "output_result": 0
  },
  "688": {
    "db_id": "voter_1",
    "question": "List the contestant numbers and names, ordered by contestant name descending.",
    "ground_truth": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "output_sql": "SELECT c.contestant_number, c.contestar_name FROM `CONTESTANTS` AS c ORDER BY c.contester_name DESC;",
    "output_result": 0
  },
  "689": {
    "db_id": "voter_1",
    "question": "List the vote ids, phone numbers and states of all votes.",
    "ground_truth": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "output_sql": "SELECT vote_id, phone_number, state FROM VOTES;",
    "output_result": 1
  },
  "690": {
    "db_id": "voter_1",
    "question": "What are the maximum and minimum values of area codes?",
    "ground_truth": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "output_sql": "SELECT MAX(area_code), MIN(area_code) FROM `AREA CODE STATE`;",
    "output_result": 0
  },
  "691": {
    "db_id": "voter_1",
    "question": "What is last date created of votes from the state 'CA'?",
    "ground_truth": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "output_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA';",
    "output_result": 1
  },
  "692": {
    "db_id": "voter_1",
    "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "ground_truth": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "output_sql": "SELECT contestant_name FROM `CONTESTANTS` WHERE contestant_name != 'Jesssie Alloway';",
    "output_result": 0
  },
  "693": {
    "db_id": "voter_1",
    "question": "What are the distinct states and create time of all votes?",
    "ground_truth": "SELECT DISTINCT state ,  created FROM votes",
    "output_sql": "SELECT DISTINCT state, created FROM VOTES;",
    "output_result": 1
  },
  "694": {
    "db_id": "voter_1",
    "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "ground_truth": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
    "output_sql": "SELECT T1 contestan_t_number, T1.cont estant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contes tant_number =T2.contes tan t_number GROUP BY _T1.cont es tant_number HAVING COUNT(*) >=2;",
    "output_result": 0
  },
  "695": {
    "db_id": "voter_1",
    "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "ground_truth": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
    "output_sql": "SELECT t1.contESTANT_NUMBER, t1.CONTESTANT_NAME FROM `CONTESTANTS` AS t1 INNER JOIN `VOTE` AS\tt2 ON t1.CONTESTANT_Number = t2.CONTESTANt_Number GROUP BY t1.Contestant_Number ORDER BY COUNT(*) ASC LIMIT 1;",
    "output_result": 0
  },
  "696": {
    "db_id": "voter_1",
    "question": "What are the number of votes from state 'NY' or 'CA'?",
    "ground_truth": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "output_sql": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY\" OR state = \"CA\";",
    "output_result": 0
  },
  "697": {
    "db_id": "voter_1",
    "question": "How many contestants did not get voted?",
    "ground_truth": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
    "output_sql": "SELECT COUNT(*) FROM `CONTESTANTS` WHERE `contestANT_NUMBER` NOT IN (SELECT `contestант_number` FROM `VOTEs`);",
    "output_result": 0
  },
  "698": {
    "db_id": "voter_1",
    "question": "What is the area code in which the most voters voted?",
    "ground_truth": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1\tarea_code FROM `AREA CODE STATE` AS T1 INNER JOIN `VOTE` AST2 ON T1.`state` = T12.`state` GROUP BY T1`.`area_code` ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "699": {
    "db_id": "voter_1",
    "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "ground_truth": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "output_sql": "SELECT T2 created, T1.state, T3.phone_number FROM VOTES AS T2 JOIN CONTESTANTS AS T1 ON T1.contestant_number= T2.contestANT_NUMBER JOIN VOTES T3 ON T3.contestANT_NUMBER = T1.CONTESTANT_NUMBER WHERE T1.CONTESTANT_NAME = 'tabatha gehling';",
    "output_result": 0
  },
  "700": {
    "db_id": "voter_1",
    "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "ground_truth": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "output_sql": "SELECT ac.area_code FROM `VOTE` v JOIN `CONTESTANTS` c ON v.contestANT_NUMBER = c.contestант_number JOIN`AREA_CODE_State` ac ON v.state = ac.state WHERE c.contестant_name = 'Tabaatha Gehing';",
    "output_result": 0
  },
  "701": {
    "db_id": "voter_1",
    "question": "Return the names of the contestants whose names contain the substring 'Al' .",
    "ground_truth": "select contestant_name from contestants where contestant_name like \"%al%\"",
    "output_sql": "SELECT contestant_name FROM CONTESTANTs WHERE LOWER(contestant_name) LIKE '%al%';",
    "output_result": 1
  },
  "702": {
    "db_id": "world_1",
    "question": "What are the names of all the countries that became independent after 1950?",
    "ground_truth": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "output_sql": "SELECT Name FROM country WHERE Indep Year > 0;",
    "output_result": 0
  },
  "703": {
    "db_id": "world_1",
    "question": "Give the names of the nations that were founded after 1950.",
    "ground_truth": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "output_sql": "SELECT Name FROM country WHERE IndepYear >= 1800 AND Indep Year > 2000;",
    "output_result": 0
  },
  "704": {
    "db_id": "world_1",
    "question": "How many countries have a republic as their form of government?",
    "ground_truth": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "output_sql": "SELECT COUNT(*) FROM country WHERE \"Governmentform\" = \"Republic\";",
    "output_result": 1
  },
  "705": {
    "db_id": "world_1",
    "question": "How many countries have governments that are republics?",
    "ground_truth": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "output_sql": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';",
    "output_result": 1
  },
  "706": {
    "db_id": "world_1",
    "question": "What is the total surface area of the countries in the Caribbean region?",
    "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "output_sql": "SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Region = 'Caribbean';",
    "output_result": 1
  },
  "707": {
    "db_id": "world_1",
    "question": "How much surface area do the countires in the Carribean cover together?",
    "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "output_sql": "SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Region = 'Caribbean';",
    "output_result": 1
  },
  "708": {
    "db_id": "world_1",
    "question": "Which continent is Anguilla in?",
    "ground_truth": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "output_sql": "SELECT \"Continet\" FROM \"country\" WHERE \"Name\\\" = 'Anguila'\";",
    "output_result": 0
  },
  "709": {
    "db_id": "world_1",
    "question": "What is the continent name which Anguilla belongs to?",
    "ground_truth": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "output_sql": "SELECT `Continet` FROM `country` WHERE `Name`= \"Ang uilla\";",
    "output_result": 0
  },
  "710": {
    "db_id": "world_1",
    "question": "Which region is the city Kabul located in?",
    "ground_truth": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "output_sql": "SELECT T1.Regions FROM country AS T1 JOIN city AS T2 ON T1 Code = T1.CountryCode WHERE T2 Name = 'Kabool';",
    "output_result": 0
  },
  "711": {
    "db_id": "world_1",
    "question": "What region is Kabul in?",
    "ground_truth": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "output_sql": "SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1 Code = T２.CountryCode WHERE T2 Name = 'Kabool';",
    "output_result": 0
  },
  "712": {
    "db_id": "world_1",
    "question": "Which language is the most popular in Aruba?",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "output_sql": "SELECT T2.Langauge FROM country AS t1 JOIN countrylanguage As T2 ON T1.code = T２.countrycode WHERE T1.name = 'Aruba' ORDER BY T2.percentage DESC LIMIT 1;",
    "output_result": 0
  },
  "713": {
    "db_id": "world_1",
    "question": "What language is predominantly spoken in Aruba?",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "output_sql": "SELECT T2.Langauge FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode WHERE T1 Name = 'Aruba' ORDER BY T2 Percentage DESC LIMIT 1;",
    "output_result": 0
  },
  "714": {
    "db_id": "world_1",
    "question": "What are the population and life expectancies in Brazil?",
    "ground_truth": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "output_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';",
    "output_result": 1
  },
  "715": {
    "db_id": "world_1",
    "question": "Give me Brazil’s population and life expectancies.",
    "ground_truth": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "output_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';",
    "output_result": 1
  },
  "716": {
    "db_id": "world_1",
    "question": "What are the region and population of Angola?",
    "ground_truth": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "output_sql": "SELECT `Region`, `Population` FROM `country` WHERE `Name`= 'Angola';",
    "output_result": 0
  },
  "717": {
    "db_id": "world_1",
    "question": "What region does Angola belong to and what is its population?",
    "ground_truth": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "output_sql": "SELECT `Region`, `Population` FROM `country` WHERE `Name`= 'Angola';",
    "output_result": 0
  },
  "718": {
    "db_id": "world_1",
    "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "output_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';",
    "output_result": 1
  },
  "719": {
    "db_id": "world_1",
    "question": "How long is the people’s average life expectancy in Central Africa?",
    "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "output_sql": "SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Region = 'Central Africa';",
    "output_result": 1
  },
  "720": {
    "db_id": "world_1",
    "question": "What is the name of country that has the shortest life expectancy in Asia?",
    "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "output_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;",
    "output_result": 1
  },
  "721": {
    "db_id": "world_1",
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "output_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;",
    "output_result": 1
  },
  "722": {
    "db_id": "world_1",
    "question": "What is the total population and maximum GNP in Asia?",
    "ground_truth": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "output_sql": "SELECT SUM(c.Population), MAX(c.GNP) FROM country c WHERE c.Continent = \"Asia\";",
    "output_result": 1
  },
  "723": {
    "db_id": "world_1",
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "ground_truth": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "output_sql": "SELECT SUM(c.Population), MAX(c.GNP) FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = \"Asia\";",
    "output_result": 0
  },
  "724": {
    "db_id": "world_1",
    "question": "What is the average life expectancy in African countries that are republics?",
    "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "output_sql": "SELECT AVG(c.LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Africa' AND c.GovernmentForm = 'Republic';",
    "output_result": 0
  },
  "725": {
    "db_id": "world_1",
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "output_sql": "SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Continent = 'Africa' AND c.GovernmentForm = 'Republic';",
    "output_result": 1
  },
  "726": {
    "db_id": "world_1",
    "question": "What is the total surface area of the continents Asia and Europe?",
    "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "output_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = ‘Europe’;",
    "output_result": 0
  },
  "727": {
    "db_id": "world_1",
    "question": "Give the total surface area covered by countries in Asia or Europe.",
    "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "output_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = \"Asia' OR Continent = 'Europe';",
    "output_result": 0
  },
  "728": {
    "db_id": "world_1",
    "question": "How many people live in Gelderland district?",
    "ground_truth": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "output_sql": "SELECT SUM(c.Population) FROM city c WHERE c.District = \"Gelderland\";",
    "output_result": 1
  },
  "729": {
    "db_id": "world_1",
    "question": "What is the total population of Gelderland district?",
    "ground_truth": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "output_sql": "SELECT SUM(`Population`) FROM `city` WHERE `District`= 'Gelderand';",
    "output_result": 0
  },
  "730": {
    "db_id": "world_1",
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "ground_truth": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "output_sql": "SELECT AVG(c.GNP) AS Average_GNP, SUM(c.Population) AS Total_Population FROM country c WHERE c.GovernmentForm LIKE '%US territory%';",
    "output_result": 1
  },
  "731": {
    "db_id": "world_1",
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "ground_truth": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "output_sql": "SELECT AVG(c.GNP) AS mean_GNP, SUM(c.Population) AS total_population FROM country c WHERE c.GovernmentForm = 'US Territory';",
    "output_result": 1
  },
  "732": {
    "db_id": "world_1",
    "question": "How many unique languages are spoken in the world?",
    "ground_truth": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "output_sql": "SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage;",
    "output_result": 1
  },
  "733": {
    "db_id": "world_1",
    "question": "What is the number of distinct languages used around the world?",
    "ground_truth": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "output_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage;",
    "output_result": 1
  },
  "734": {
    "db_id": "world_1",
    "question": "How many type of governments are in Africa?",
    "ground_truth": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "output_sql": "SELECT COUNT(DISTICT GovernmentForm) FROM country WHERE Continent = 'Africa';",
    "output_result": 0
  },
  "735": {
    "db_id": "world_1",
    "question": "How many different forms of governments are there in Africa?",
    "ground_truth": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "output_sql": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';",
    "output_result": 1
  },
  "736": {
    "db_id": "world_1",
    "question": "What is the total number of languages used in Aruba?",
    "ground_truth": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "output_sql": "SELECT COUNT(T1.Language) FROM country AS T0 JOIN countrylanguage AS T1 ON T0.Code =T1.CountryCode WHERE T0.Name = 'Aruba';",
    "output_result": 1
  },
  "737": {
    "db_id": "world_1",
    "question": "How many languages are spoken in Aruba?",
    "ground_truth": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "output_sql": "SELECT COUNT(DISTINCT T2.`Language`) FROM `country' AS T1 JOIN `country.language` AS T2 ON T1.`Code` = T２.`CountryCode` WHERE T1`.`Name` = 'Aruba';",
    "output_result": 0
  },
  "738": {
    "db_id": "world_1",
    "question": "How many official languages does Afghanistan have?",
    "ground_truth": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "output_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 WHERE T1 Name = 'Afghanstan' AND T2 IsOfficial = 'T';",
    "output_result": 0
  },
  "739": {
    "db_id": "world_1",
    "question": "How many official languages are spoken in Afghanistan?",
    "ground_truth": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "output_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 WHERE T1.Name = 'Afghanstan' AND T2.Is Official = 'T';",
    "output_result": 0
  },
  "740": {
    "db_id": "world_1",
    "question": "What is name of the country that speaks the largest number of languages?",
    "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.`Name` FROM `country' AS T1 INNER JOIN `countrylangauge` AS T2 ON T1`.`Code` = T1.CountryCode GROUP BY T1.name ORDER BY COUNT(T2.Language) DESC LIMIT 1;",
    "output_result": 0
  },
  "741": {
    "db_id": "world_1",
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.NAME FROM country AS T１ JOIN countrylanguage AS T2 ON T1.CODE = T２.COUNTRYCODE GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "742": {
    "db_id": "world_1",
    "question": "Which continent has the most diverse languages?",
    "ground_truth": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.`Continent` FROM `country' AS T1 JOIN `country.language` AS T2 ON T1`.`Code` = T２`.`CountryCode` GROUP BY T1. Continent ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "743": {
    "db_id": "world_1",
    "question": "Which continent speaks the most languages?",
    "ground_truth": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.`Continent` FROM `country' AS T1 JOIN `country.language` AS T2 ON T1`.`Code` = T２`.`CountryCode` GROUP BY T1. Continent ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "744": {
    "db_id": "world_1",
    "question": "How many countries speak both English and Dutch?",
    "ground_truth": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "output_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECTT1.Name FROM countryAS T1 INNER JOINcountrylanguage AST2 ONT1.Code= T2.Countrycodewhere T2.Languagelike 'Dutch';",
    "output_result": 0
  },
  "745": {
    "db_id": "world_1",
    "question": "What is the number of nations that use English and Dutch?",
    "ground_truth": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "output_sql": "SELECT COUNT(DISTINCT c.Name) FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' INTERSECT SELECT DISTINCT c.Name FROM country.c INNERJOIN countrylanguagecl ON c.code = cl.countrycode WHEREcl.language = 'Duch';",
    "output_result": 0
  },
  "746": {
    "db_id": "world_1",
    "question": "What are the names of nations speak both English and French?",
    "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "output_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1 Code = T２.CountryCode WHERE T2-Language = \" English \";",
    "output_result": 0
  },
  "747": {
    "db_id": "world_1",
    "question": "Give the names of nations that speak both English and French.",
    "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "output_sql": "SELECT T1.`Name` FROM `country' AS T1 JOIN `country.language` AS T2 ON T1`.`Code` = T２`.`CountryCode` WHERE T2.`Language` = 'English' INTERSECT SELECT\tT1.`name` FROM\t`country` AS\tT1 JOIN\t`countrylanguage` AS Т2 ON\tT1`.`Codе` = Т2`.`CountryCodе` WHERE\tT2.`Languagе` ='French';",
    "output_result": 0
  },
  "748": {
    "db_id": "world_1",
    "question": "What are the names of nations where both English and French are official languages?",
    "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "output_sql": "SELECT T1.`Name` FROM `country' AS T1 JOIN `countrylanguages` AS T2 ON T1`.`Code` = T２`.`CountryCode` WHERE T2.`Language` = 'English' AND T2`.`IsOfficial' = 'T';",
    "output_result": 0
  },
  "749": {
    "db_id": "world_1",
    "question": "Give the names of countries with English and French as official languages.",
    "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "output_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T２.CountryCode WHERE T2 Language = 'English' AND T２.IsOfficial='T' INTERSECT SELECT T１.Name FROM country AS Т1 INNER JOIN country语言 AS T２ ON T１.Code = Т2.CountryCode WHERE T2-Language = 'French' AND Т2.IsОfficial='T';",
    "output_result": 0
  },
  "750": {
    "db_id": "world_1",
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "ground_truth": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "output_sql": "SELECT COUNT(Distinct T1.Contry) FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode WHERE T2 Language = 'Chineses';",
    "output_result": 0
  },
  "751": {
    "db_id": "world_1",
    "question": "How many continents speak Chinese?",
    "ground_truth": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "output_sql": "SELECT COUNT(Distinct T1.Contry) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode WHERE T2.language = 'Chinese';",
    "output_result": 0
  },
  "752": {
    "db_id": "world_1",
    "question": "What are the regions that use English or Dutch?",
    "ground_truth": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "output_sql": "SELECT DISTINCT T2.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode WHERE T2 Language = 'English' OR T1 Language = \"Netherlands\";",
    "output_result": 0
  },
  "753": {
    "db_id": "world_1",
    "question": "Which regions speak Dutch or English?",
    "ground_truth": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "output_sql": "SELECT DISTINCT T1.Region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1 Code = T２.CountryCode WHERE T2 Language = 'English' OR T２.Language = 'Dutch';",
    "output_result": 0
  },
  "754": {
    "db_id": "world_1",
    "question": "What are the countries where either English or Dutch is the official language ?",
    "ground_truth": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
    "output_sql": "SELECT t1.Name FROM country AS t₁ JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t2.Language = 'english' AND t2.IsOfficial = 'T';",
    "output_result": 0
  },
  "755": {
    "db_id": "world_1",
    "question": "Which countries have either English or Dutch as an official language?",
    "ground_truth": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "output_sql": "SELECT T1.Name, T1.Continent, T2 Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1 CountryCode WHERE (T2.Language = \"English\"AND T2 IsOfficial = \"T\") UNION SELECT  T1 Name, Tl Continent, Tz Language FROM country AS TI JOIN countrylanguage AT2 ON TI Code = TZ CountryCode WHERE (Tz Language = \"Dutch\"And Tz IsOfficial =\"T\");",
    "output_result": 0
  },
  "756": {
    "db_id": "world_1",
    "question": "Which language is the most popular on the Asian continent?",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "output_sql": "SELECT T2.Langauge FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode WHERE T1.continent = 'Asia' GROUP BY T2.language ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "757": {
    "db_id": "world_1",
    "question": "What is the language that is used by the largest number of Asian nations?",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "output_sql": "SELECT T2.Langauge FROM country AS\tT1 JOIN countrylanguageAS\tT2 WHERE T1.continent = 'Asia' GROUP BY T2.Langauge ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "758": {
    "db_id": "world_1",
    "question": "Which languages are spoken by only one country in republic governments?",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "output_sql": "SELECT T2.Langauge FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode WHERE T1 GovernmentForm = \"Republic\" GROUP BY T2.LANGUAGE HAVING COUNT(T1.Code) = 1;",
    "output_result": 0
  },
  "759": {
    "db_id": "world_1",
    "question": "What languages are only used by a single country with a republic government?",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "output_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code == T2 CountryCode WHERE T1.GovermentForm = \"Republic\" GROUP BY T2 Language HAVING COUNT(*) =1;",
    "output_result": 0
  },
  "760": {
    "db_id": "world_1",
    "question": "Find the city with the largest population that uses English.",
    "ground_truth": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "output_sql": "SELECT T1.NAME, T2.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode = T1.Code WHERE T2.language = 'English' ORDER BY T2.population DESC LIMIT 1;",
    "output_result": 0
  },
  "761": {
    "db_id": "world_1",
    "question": "What is the most populace city that speaks English?",
    "ground_truth": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "output_sql": "SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1 Population DESC LIMIT 1;",
    "output_result": 0
  },
  "762": {
    "db_id": "world_1",
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "ground_truth": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "output_sql": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;",
    "output_result": 1
  },
  "763": {
    "db_id": "world_1",
    "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "ground_truth": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "output_sql": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;",
    "output_result": 1
  },
  "764": {
    "db_id": "world_1",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "output_sql": "SELECT AVG(T1.LifeExpectance) FROM country AS郭1 JOIN countrylanguageAS T2 ON T1 Code = T1.CountryCode WHERE T2 Language NOT IN ( SELECT T2-Language FROM countrylanguage T2 JOIN country T1 ON T2.CountrCode = Tl.Code WHERE T2. IsOfficial = 'T' AND T1.Language = 'English' );",
    "output_result": 0
  },
  "765": {
    "db_id": "world_1",
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "output_sql": "SELECT LOWER(AVG(T1.LifeExpectance)) FROM country AS郭1 JOIN countrylanguage As T2 ON T1 Code = T₂.CountryCode WHERE T1.name NOT IN ( SELECT T1.NAME FROM country As T1 JOIN countryLanguage AS T₂ ON T₁.Code = Т2.Countrycode WHERE T₂.Language = 'english' AND T₂.IsOfficial='T' );",
    "output_result": 0
  },
  "766": {
    "db_id": "world_1",
    "question": "What is the total number of people living in the nations that do not use English?",
    "ground_truth": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "output_sql": "SELECT SUM(T1.Population) FROM country AS郭1 WHERE T1 Name NOT IN ( SELECT T1.name FROM country As T1 JOIN countryLanguage AS T₂ ON T₁.code = T₂.countrycode WHERE T₂.language = 'English' );",
    "output_result": 0
  },
  "767": {
    "db_id": "world_1",
    "question": "How many people live in countries that do not speak English?",
    "ground_truth": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "output_sql": "SELECT SUM(T1.\"Population\") FROM `country” AS T1 WHERE T1.“Code” NOT IN ( SELECT T2.“CountryCode” FROM `country.language` AS T2 WHERE T2.”Language” = “English” );",
    "output_result": 0
  },
  "768": {
    "db_id": "world_1",
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "output_sql": "SELECT T2.Langauge FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode WHERE T1.Headofstate = 'Beatrix' AND T2.isofficial = 'T';",
    "output_result": 0
  },
  "769": {
    "db_id": "world_1",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "output_sql": "SELECT T2.Language FROM country AS T１ JOIN countrylanguage AS\tT2 ON T1.Code＝T2.Countrycode WHERE T1.HeadOfState = 'Beatrix' AND T2.Is Official = 'T';",
    "output_result": 0
  },
  "770": {
    "db_id": "world_1",
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "ground_truth": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "output_sql": "SELECT COUNT(DISTINCT T2_LANGUAGE.Language) FROM country AS T1 JOIN countrylanguage AS T2 LANGUAGE ON T1 Code = T1 CountryCode WHERE T1 IndepYear<1920 AND T2 IsOfficial='T';",
    "output_result": 0
  },
  "771": {
    "db_id": "world_1",
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "ground_truth": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "output_sql": "SELECT COUNT(DISTINCT T2-Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code=T2.Countrycode WHERE T1.IndependYear<1920 AND T2.Isofficial='T';",
    "output_result": 0
  },
  "772": {
    "db_id": "world_1",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "ground_truth": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "output_sql": "SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MIN(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');",
    "output_result": 1
  },
  "773": {
    "db_id": "world_1",
    "question": "Which countries have greater area than that of any country in Europe?",
    "ground_truth": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "output_sql": "SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MIN(SurfaceArea) FROM country WHERE Continent = 'Europe');",
    "output_result": 1
  },
  "774": {
    "db_id": "world_1",
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "output_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MAX(population) FROM country WHERE Continent = 'Asia');",
    "output_result": 1
  },
  "775": {
    "db_id": "world_1",
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "output_sql": "SELECT c1.Name FROM country c1 JOIN country c2 ON c1.Continent = 'Africa' AND c2.Continent != 'Africa' WHERE c1.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');",
    "output_result": 1
  },
  "776": {
    "db_id": "world_1",
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "output_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > ALL ( SELECT DISTINCT a.Population FROM country a WHERE a.Continent ='Africa' );",
    "output_result": 0
  },
  "777": {
    "db_id": "world_1",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "output_sql": "SELECT c.\"Name\" FROM `country” c WHERE c.\"Continent” = \"Asia\" AND c.\"Population\" > ( SELECT MIN(c2.\"Population\") FROM `country’ c2 WHERE c2.\"Continet” = “Africa” );",
    "output_result": 0
  },
  "778": {
    "db_id": "world_1",
    "question": "What are the country codes for countries that do not speak English?",
    "ground_truth": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "output_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT Countrycode FROM.countrylanguage WHERE \"Language\" = 'English';",
    "output_result": 0
  },
  "779": {
    "db_id": "world_1",
    "question": "Return the country codes for countries that do not speak English.",
    "ground_truth": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "output_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCODE FROM.countrylanguage WHERE \"Language' = 'English';",
    "output_result": 0
  },
  "780": {
    "db_id": "world_1",
    "question": "What are the country codes of countries where people use languages other than English?",
    "ground_truth": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "output_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';",
    "output_result": 1
  },
  "781": {
    "db_id": "world_1",
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "ground_truth": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "output_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';",
    "output_result": 1
  },
  "782": {
    "db_id": "world_1",
    "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "ground_truth": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "output_sql": "SELECT Code FROM country WHERE GovernmentForm <> 'Republic' EXCEPT SELECT c.Code FROM.country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English';",
    "output_result": 0
  },
  "783": {
    "db_id": "world_1",
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "ground_truth": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "output_sql": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT c.Code FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English';",
    "output_result": 0
  },
  "784": {
    "db_id": "world_1",
    "question": "Which cities are in European countries where English is not the official language?",
    "ground_truth": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "output_sql": "SELECT DISTINCT T2.`Name` FROM `city`s AS T2 JOIN `country`s AS t1 ON T2`.`CountryCode`=t1`.`Code` WHERE t1`.`Continent`= 'Europe' AND t1.`Name` NOT IN ( SELECT t1.name FROM `countrylang` AS t2 JOIN `country`t1 ON t2.`CountryCode`t1.`Code` WHERE t2`.`Language`= 'English' AND t2.isofficial='T' );",
    "output_result": 0
  },
  "785": {
    "db_id": "world_1",
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "ground_truth": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "output_sql": "SELECT DISTINCT T1.`Name` FROM `city AS` T1 JOIN `country AS` C ON T1`.`CountryCode = C`.`Code` JOIN `citylanguage AS` L ON C`.`Countrycode = L`.`CountryCodE` WHERE C`.`Continent = 'Europe' AND L`.`Language != 'English' AND L.`IsOfficial = 'F'`;",
    "output_result": 0
  },
  "786": {
    "db_id": "world_1",
    "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
    "ground_truth": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
    "output_sql": "SELECT DISTINCT t3.Name FROM country t1 JOIN countrylanguage t2 ON t1.Code = t２.CountryCode JOIN city t3 ON t１.Code =\tt3.CountryCode WHERE t1.Continent = 'asia' AND t2.IsOfficial = 'T' AND t2.Language = 'Chinese';",
    "output_result": 0
  },
  "787": {
    "db_id": "world_1",
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "ground_truth": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "output_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1 Code = T1.CountryCode AND T2 IsOfficial = \"T\" JOIN city AS T3 ON T3 CountryCode = T4.Code WHERE T1 Continent = \"Asia\" AND T2 Language = \"Chinese\";",
    "output_result": 0
  },
  "788": {
    "db_id": "world_1",
    "question": "What are the name, independence year, and surface area of the country with the smallest population?",
    "ground_truth": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "output_sql": "SELECT Name, SurfaceArea, IndepYear FROM country ORDER BY Population LIMIT 1;",
    "output_result": 1
  },
  "789": {
    "db_id": "world_1",
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "ground_truth": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "output_sql": "SELECT c.\"Name\", c.\"Indep Year\", c.“SurfaceArea” FROM country AS c ORDER BY c.\"Population\" LIMIT 1;",
    "output_result": 0
  },
  "790": {
    "db_id": "world_1",
    "question": "What are the population, name and leader of the country with the largest area?",
    "ground_truth": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "output_sql": "SELECT c.\"Name\", c.\"Population\", c.“HeadOfstate” FROM \"country” AS c ORDER BY c.\"SurfaceArea” DESC LIMIT 1;",
    "output_result": 0
  },
  "791": {
    "db_id": "world_1",
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "ground_truth": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "output_sql": "SELECT c.\"Name\", c.\"Population\", c.“HeadOfstate” FROM country c ORDER BY c.\"SurfaceArea' DESC LIMIT 1;",
    "output_result": 0
  },
  "792": {
    "db_id": "world_1",
    "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "ground_truth": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "output_sql": "SELECT T1.NAME, COUNT(T3.LANGUAGE) AS NUM_LANGUAGES FROM COUNTRY T1 JOIN CountryLanguage T3 ON T1.CODE = T3.COUNTRYCODE GROUP BY _T1.NAME HAVING COUNT(T3.Language) >= 3;",
    "output_result": 0
  },
  "793": {
    "db_id": "world_1",
    "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "ground_truth": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "output_sql": "SELECT COUNT(cl.Language) AS LanguageCount, c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl_LANGUAGE) > 3;",
    "output_result": 0
  },
  "794": {
    "db_id": "world_1",
    "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "ground_truth": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "output_sql": "SELECT COUNT(*) AS count_of_cities, District FROM city WHERE Population > ( SELECT AVG(Popuplation) FROM city ) GROUP BY District;",
    "output_result": 0
  },
  "795": {
    "db_id": "world_1",
    "question": "How many cities in each district have a population that is above the average population across all cities?",
    "ground_truth": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "output_sql": "SELECT c.District, COUNT(*) AS count FROM city c WHERE c.Population > ( SELECT AVG(Popuplation) FROM City ) GROUP BY c.District ORDER BY District;",
    "output_result": 0
  },
  "796": {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "ground_truth": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "output_sql": "SELECT SUM(c.Population) AS Population, c.GovernmentForm FROM country c GROUP BY c.GovernementForm HAVING AVG(c.LifeExpectany) >72;",
    "output_result": 0
  },
  "797": {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "ground_truth": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "output_sql": "SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c WHERE AVG(c.LifeExpectance) > NULLIF(72, '') GROUP BY GovernmentForm HAVING AVG(c.LifExpectancy)> 73 ORDER BY TotalPopulation;",
    "output_result": 0
  },
  "798": {
    "db_id": "world_1",
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "ground_truth": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "output_sql": "SELECT SUM(c.Population), AVG(c.LifeExpectance), c.Continent FROM country c GROUP BY c.Continuent HAVING AVG(c-LifeExpectancy)<72;",
    "output_result": 0
  },
  "799": {
    "db_id": "world_1",
    "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "ground_truth": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "output_sql": "SELECT \"Continet\", SUM(\"Population\"), AVG(\"Life Expectancy\") FROM country GROUP BY `Continet` HAVING AVG(`LifeExpectency`) < 82;",
    "output_result": 0
  },
  "800": {
    "db_id": "world_1",
    "question": "What are the names and areas of countries with the top 5 largest area?",
    "ground_truth": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "output_sql": "SELECT c.Name, c.SurfaceArea FROM country c ORDER BY c.Surface_area DESC LIMIT 5;",
    "output_result": 0
  },
  "801": {
    "db_id": "world_1",
    "question": "Return the names and surface areas of the 5 largest countries.",
    "ground_truth": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "output_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
    "output_result": 1
  },
  "802": {
    "db_id": "world_1",
    "question": "What are names of countries with the top 3 largest population?",
    "ground_truth": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "output_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
    "output_result": 1
  },
  "803": {
    "db_id": "world_1",
    "question": "Return the names of the 3 most populated countries.",
    "ground_truth": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "output_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
    "output_result": 1
  },
  "804": {
    "db_id": "world_1",
    "question": "What are the names of the nations with the 3 lowest populations?",
    "ground_truth": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "output_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;",
    "output_result": 1
  },
  "805": {
    "db_id": "world_1",
    "question": "Return the names of the 3 countries with the fewest people.",
    "ground_truth": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "output_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;",
    "output_result": 1
  },
  "806": {
    "db_id": "world_1",
    "question": "how many countries are in Asia?",
    "ground_truth": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "output_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';",
    "output_result": 1
  },
  "807": {
    "db_id": "world_1",
    "question": "Count the number of countries in Asia.",
    "ground_truth": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "output_sql": "SELECT COUNT(*) FROM country WHERE Continent = \" Asia\";",
    "output_result": 0
  },
  "808": {
    "db_id": "world_1",
    "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "ground_truth": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "output_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = '80０００';",
    "output_result": 1
  },
  "809": {
    "db_id": "world_1",
    "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "ground_truth": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "output_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 8０００₀;",
    "output_result": 0
  },
  "810": {
    "db_id": "world_1",
    "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "ground_truth": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "output_sql": "SELECT SUM(c.Population), AVG(c.SurfaceArea) FROM country c WHERE c.Continent = 'north america' AND c.SurfaceArea > 400;",
    "output_result": 1
  },
  "811": {
    "db_id": "world_1",
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "ground_truth": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "output_sql": "SELECT SUM(c.Population) AS TotalPopulation, AVG(c.SurfaceArea) AS AverageSurfaceArea FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3０００;",
    "output_result": 0
  },
  "812": {
    "db_id": "world_1",
    "question": "What are the cities whose population is between 160000 and 900000?",
    "ground_truth": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "output_sql": "SELECT Name FROM city WHERE Population BETWEEN 0 AND ?;",
    "output_result": 0
  },
  "813": {
    "db_id": "world_1",
    "question": "Return the names of cities that have a population between 160000 and 900000 .",
    "ground_truth": "select name from city where population between 160000 and 900000",
    "output_sql": "SELECT Name FROM city WHERE Population BETWEEN 0 AND ?;",
    "output_result": 0
  },
  "814": {
    "db_id": "world_1",
    "question": "Which language is spoken by the largest number of countries?",
    "ground_truth": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "815": {
    "db_id": "world_1",
    "question": "Give the language that is spoken in the most countries.",
    "ground_truth": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "816": {
    "db_id": "world_1",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "ground_truth": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "output_sql": "SELECT `Countrycode`, `$Language`, MAX(`Percentage`) FROM countrylanguage GROUP BY CountryCode;",
    "output_result": 0
  },
  "817": {
    "db_id": "world_1",
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "ground_truth": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "output_sql": "SELECT c.`Code`, cl.`Language` FROM `country`.`country` c JOIN countrylanguage cl ON c.`code` = cl.`CountryCode` WHERE cl.Percentage = ( SELECT MAX(cl2.Percentage) FROM countrylanguagecl2 WHERE cl2.CountryCode = c.Code );",
    "output_result": 0
  },
  "818": {
    "db_id": "world_1",
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "ground_truth": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "output_sql": "SELECT COUNT(T1.CountryCode) AS count_of_countries, MAX(T1.Percentage) AS max_percentage FROM `country.language` T1 WHERE T1.Language = 'Spanish' GROUP BY T1.Countrycode ORDER BY max_percentage DESC LIMIT 1;",
    "output_result": 0
  },
  "819": {
    "db_id": "world_1",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "ground_truth": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "output_sql": "SELECT COUNT(DISTINCT cl.CountryCode) AS country_count FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguagecl2 WHERE cl2.CountryCode = cl.Countrycode);",
    "output_result": 0
  },
  "820": {
    "db_id": "world_1",
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "ground_truth": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "output_sql": "SELECT cl.CountryCode, MAX(cl.Percentage) AS max_Percentage FROM countrylanguage cl WHERE cl.Language = 'Spanish' GROUP BY cl.Countrycode ORDER BY max_PercentagE DESC;",
    "output_result": 1
  },
  "821": {
    "db_id": "world_1",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "ground_truth": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "output_sql": "SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' GROUP BY cl.CountryCODE ORDER BY MAX(cl.Percentage) DESC;",
    "output_result": 0
  },
  "822": {
    "db_id": "orchestra",
    "question": "How many conductors are there?",
    "ground_truth": "SELECT count(*) FROM conductor",
    "output_sql": "SELECT COUNT(*) FROM \"conducer\";",
    "output_result": 0
  },
  "823": {
    "db_id": "orchestra",
    "question": "Count the number of conductors.",
    "ground_truth": "SELECT count(*) FROM conductor",
    "output_sql": "SELECT COUNT(*) FROM conductor;",
    "output_result": 1
  },
  "824": {
    "db_id": "orchestra",
    "question": "List the names of conductors in ascending order of age.",
    "ground_truth": "SELECT Name FROM conductor ORDER BY Age ASC",
    "output_sql": "SELECT \"Name\" FROM \"conducer\" ORDER BY \"Age\";",
    "output_result": 0
  },
  "825": {
    "db_id": "orchestra",
    "question": "What are the names of conductors, ordered by age?",
    "ground_truth": "SELECT Name FROM conductor ORDER BY Age ASC",
    "output_sql": "SELECT \"Name\" FROM \"conducer\" ORDER BY \"Age\" ASC;",
    "output_result": 0
  },
  "826": {
    "db_id": "orchestra",
    "question": "What are the names of conductors whose nationalities are not \"USA\"?",
    "ground_truth": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "output_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA';",
    "output_result": 1
  },
  "827": {
    "db_id": "orchestra",
    "question": "Return the names of conductors that do not have the nationality \"USA\".",
    "ground_truth": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "output_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA';",
    "output_result": 1
  },
  "828": {
    "db_id": "orchestra",
    "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "ground_truth": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "output_sql": "SELECT \"Record_company\" FROM orchestra ORDER BY \"Year_OF_Founded' DESC;",
    "output_result": 0
  },
  "829": {
    "db_id": "orchestra",
    "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "ground_truth": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "output_sql": "SELECT \"Record_company\" FROM \"orchestrA\" ORDER BY \"Year_Of_Founded\". DESC;",
    "output_result": 0
  },
  "830": {
    "db_id": "orchestra",
    "question": "What is the average attendance of shows?",
    "ground_truth": "SELECT avg(Attendance) FROM SHOW",
    "output_sql": "SELECT avg(Attendance) FROM show;",
    "output_result": 1
  },
  "831": {
    "db_id": "orchestra",
    "question": "Return the average attendance across all shows.",
    "ground_truth": "SELECT avg(Attendance) FROM SHOW",
    "output_sql": "SELECT AVG(Attendance) FROM SHOW;",
    "output_result": 1
  },
  "832": {
    "db_id": "orchestra",
    "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "ground_truth": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "output_sql": "SELECT MAX(\"Share\"), MIN(\"Share\") FROM \"performance\" WHERE \"Type\" != 'Live final';",
    "output_result": 1
  },
  "833": {
    "db_id": "orchestra",
    "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "ground_truth": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "output_sql": "SELECT MAX(\"Share\"), MIN(\"Share\") FROM \"performance\" WHERE \"Type\" != 'Live final';",
    "output_result": 1
  },
  "834": {
    "db_id": "orchestra",
    "question": "How many different nationalities do conductors have?",
    "ground_truth": "SELECT count(DISTINCT Nationality) FROM conductor",
    "output_sql": "SELECT COUNT(DISTICT Nationality) FROM conductor;",
    "output_result": 0
  },
  "835": {
    "db_id": "orchestra",
    "question": "Count the number of different nationalities of conductors.",
    "ground_truth": "SELECT count(DISTINCT Nationality) FROM conductor",
    "output_sql": "SELECT COUNT(DISTINCT Nationality) FROM conductor;",
    "output_result": 1
  },
  "836": {
    "db_id": "orchestra",
    "question": "List names of conductors in descending order of years of work.",
    "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "output_sql": "SELECT \"Name” FROM \"conducer\" ORDER BY \"Year-of-Work\" DESC;",
    "output_result": 0
  },
  "837": {
    "db_id": "orchestra",
    "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "output_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;",
    "output_result": 1
  },
  "838": {
    "db_id": "orchestra",
    "question": "List the name of the conductor with the most years of work.",
    "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "output_sql": "SELECT \"Name\" FROM \"conducer\" ORDER BY \"Year_OF_Work\" DESC LIMIT 1;",
    "output_result": 0
  },
  "839": {
    "db_id": "orchestra",
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "output_sql": "SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC LIMIT 1;",
    "output_result": 1
  },
  "840": {
    "db_id": "orchestra",
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "ground_truth": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "output_sql": "SELECT T1.\"Name\", T2.\"Orchestra\" FROM \"conducer\" AS T1 JOIN \"orchestr\" AS郭2 ON T1.“Conductor_ ID” = T₂.“Conducto r_ ID”;",
    "output_result": 0
  },
  "841": {
    "db_id": "orchestra",
    "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "ground_truth": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "output_sql": "SELECT T1.“Name”, T2.“Orchestra” FROM “conductor” AS T1 INNER JOIN “orchestRA” AS\tT2 ON T1.”Conductor ID” = T２.”Conductoｒ_ＩＤ”;",
    "output_result": 0
  },
  "842": {
    "db_id": "orchestra",
    "question": "Show the names of conductors that have conducted more than one orchestras.",
    "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "output_sql": "SELECT T1.NAME FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.CONDUCTOR_ID =\tT2.CONDUCTor_ID GROUP BY T2.CONDUCtor_ID HAVING COUNT(*)>1;",
    "output_result": 1
  },
  "843": {
    "db_id": "orchestra",
    "question": "What are the names of conductors who have conducted at more than one orchestra?",
    "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "output_sql": "SELECT T1.NAME FROM CONDUCTOR AS T1 JOIN ORCHESTRA AS T2 ON T1.CONDUCTOR_ID =T2.CONDUCTor_ID GROUP BY T1.conductor_id HAVING COUNT(*)>1;",
    "output_result": 1
  },
  "844": {
    "db_id": "orchestra",
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.NAME FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.CONDUCTOR_ID =T2.CONDUCTor_ID GROUP BY T2.CONDUCtor_ID ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "845": {
    "db_id": "orchestra",
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.NAME FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.CONDUCTOR_ID =T2.CONDUCTor_ID GROUP BY T2.CONDUCtor_ID ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "846": {
    "db_id": "orchestra",
    "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "output_sql": "SELECT T1.NAME FROM conductor AS T1 JOIN orchestra AS T2 ON T1.CONDUCTOR_ID =\tT2.CONDUCTor_ID WHERE T2.YEAR_OF_FOUNDING > ２００８;",
    "output_result": 0
  },
  "847": {
    "db_id": "orchestra",
    "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "output_sql": "SELECT T1.NAME FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.CONDUCTOR_ID =T2.CONDUCTor_ID WHERE T2.YEAR_OF_FOUNDING > 1000;",
    "output_result": 0
  },
  "848": {
    "db_id": "orchestra",
    "question": "Please show the different record companies and the corresponding number of orchestras.",
    "ground_truth": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "output_sql": "SELECT Record_Company, COUNT(*) AS Number_Of_Orchestras FROM orchestra GROUP BY Record_Companny;",
    "output_result": 0
  },
  "849": {
    "db_id": "orchestra",
    "question": "How many orchestras does each record company manage?",
    "ground_truth": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "output_sql": "SELECT COUNT(*) AS orchestra_count, Record_Company FROM orchestra GROUP BY Record_Companny;",
    "output_result": 0
  },
  "850": {
    "db_id": "orchestra",
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "ground_truth": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "output_sql": "SELECT Major_Record_FORMAT FROM orchestra GROUP BY Major_Record_format ORDER BY COUNT(*) ASC;",
    "output_result": 1
  },
  "851": {
    "db_id": "orchestra",
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "ground_truth": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "output_sql": "SELECT Major_Record_FORMAT FROM orchestra GROUP BY Major_Record_format ORDER BY COUNT(*) DESC;",
    "output_result": 1
  },
  "852": {
    "db_id": "orchestra",
    "question": "List the record company shared by the most number of orchestras.",
    "ground_truth": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT Record_Comany FROM orchestra GROUP BY Record_ComANY ORDER BY COUNT(*) Desc LIMIT 1;",
    "output_result": 0
  },
  "853": {
    "db_id": "orchestra",
    "question": "What is the record company used by the greatest number of orchestras?",
    "ground_truth": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Comany ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "854": {
    "db_id": "orchestra",
    "question": "List the names of orchestras that have no performance.",
    "ground_truth": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "output_sql": "SELECT \"Orchestra\" FROM \"orchesta\" WHERE \"Orchestr_ID\" NOT IN (SELECT \"Orcestra_ID\" FROM \"performance\");",
    "output_result": 0
  },
  "855": {
    "db_id": "orchestra",
    "question": "What are the orchestras that do not have any performances?",
    "ground_truth": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "output_sql": "SELECT T1.\"Orchestra\" FROM \"orchesta\" AS T1 WHERE T1.“Orchestra_Id” NOT IN (SELECT T2.“Orchesta_Id” FROM “performance” AS T2);",
    "output_result": 0
  },
  "856": {
    "db_id": "orchestra",
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "ground_truth": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "output_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_F-founded < 1903 INTERSECT SELECT Record_company FROM orchesta WHEREYear_of_Founded > 1000;",
    "output_result": 0
  },
  "857": {
    "db_id": "orchestra",
    "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "ground_truth": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "output_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_F-founded < 2903 INTERSECT SELECT Record_company FROM orchesta WHEREYear_of_founded > 2803;",
    "output_result": 0
  },
  "858": {
    "db_id": "orchestra",
    "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "ground_truth": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "output_sql": "SELECT COUNT(*) FROM orchestra WHERE \"Major.Record_Format\" = \"CD' OR \"Major_record_format\" = 'DVD';",
    "output_result": 0
  },
  "859": {
    "db_id": "orchestra",
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "ground_truth": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "output_sql": "SELECT COUNT(*) FROM orchestra WHERE \"Major.Record_Format\" = \"CD” OR \" Major_Record_Format” = \"DVD\";",
    "output_result": 0
  },
  "860": {
    "db_id": "orchestra",
    "question": "Show the years in which orchestras that have given more than one performance are founded.",
    "ground_truth": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "output_sql": "SELECT T1.Year_of_FFounded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Organza_ID =T2.Orchesta_ID GROUP BY T2.Organiza_ID HAVING COUNT(*)>1;",
    "output_result": 0
  },
  "861": {
    "db_id": "orchestra",
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "ground_truth": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "output_sql": "SELECT T1.\"Year_of.Founded\" FROM \"orchesta\" AS T₁ JOIN \"performance” AS T₂ ON T1.“Orchestra_Id” = T₂.“Orchestr_Id” GROUP BY T2.“Orchest_Id” HAVING COUNT(*)>1 ORDER BY T1.”Year_of_Founded”;",
    "output_result": 0
  },
  "862": {
    "db_id": "network_1",
    "question": "How many high schoolers are there?",
    "ground_truth": "SELECT count(*) FROM Highschooler",
    "output_sql": "SELECT COUNT(*) FROM HighschoolER;",
    "output_result": 1
  },
  "863": {
    "db_id": "network_1",
    "question": "Count the number of high schoolers.",
    "ground_truth": "SELECT count(*) FROM Highschooler",
    "output_sql": "SELECT count(*) FROM Highschoolер;",
    "output_result": 0
  },
  "864": {
    "db_id": "network_1",
    "question": "Show the names and grades of each high schooler.",
    "ground_truth": "SELECT name ,  grade FROM Highschooler",
    "output_sql": "SELECT name, grade FROM HighschoolER;",
    "output_result": 1
  },
  "865": {
    "db_id": "network_1",
    "question": "What are the names and grades for each high schooler?",
    "ground_truth": "SELECT name ,  grade FROM Highschooler",
    "output_sql": "SELECT name, grade FROM Highschoolер;",
    "output_result": 0
  },
  "866": {
    "db_id": "network_1",
    "question": "Show all the grades of the high schoolers.",
    "ground_truth": "SELECT grade FROM Highschooler",
    "output_sql": "SELECT grade FROM HighschoolER;",
    "output_result": 1
  },
  "867": {
    "db_id": "network_1",
    "question": "What is the grade of each high schooler?",
    "ground_truth": "SELECT grade FROM Highschooler",
    "output_sql": "SELECT grade FROM HighschoolER ORDER BY grade;",
    "output_result": 1
  },
  "868": {
    "db_id": "network_1",
    "question": "What grade is Kyle in?",
    "ground_truth": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "output_sql": "SELECT grade FROM Highschoolер WHERE name = 'Kyle';",
    "output_result": 0
  },
  "869": {
    "db_id": "network_1",
    "question": "Return the grade for the high schooler named Kyle.",
    "ground_truth": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "output_sql": "SELECT grade FROM Highschoolер WHERE name = 'Kyle';",
    "output_result": 0
  },
  "870": {
    "db_id": "network_1",
    "question": "Show the names of all high schoolers in grade 10.",
    "ground_truth": "SELECT name FROM Highschooler WHERE grade  =  10",
    "output_sql": "SELECT name FROM Highschoolер WHERE grade = 1０;",
    "output_result": 0
  },
  "871": {
    "db_id": "network_1",
    "question": "What are the names of all high schoolers in grade 10?",
    "ground_truth": "SELECT name FROM Highschooler WHERE grade  =  10",
    "output_sql": "SELECT name FROM Highschoolер WHERE grade =10;",
    "output_result": 0
  },
  "872": {
    "db_id": "network_1",
    "question": "Show the ID of the high schooler named Kyle.",
    "ground_truth": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "output_sql": "SELECT ID FROM Highschoolер WHERE name = 'Kyle';",
    "output_result": 0
  },
  "873": {
    "db_id": "network_1",
    "question": "What is Kyle's id?",
    "ground_truth": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "output_sql": "SELECT ID FROM Highschoolер WHERE name = 'Kyle';",
    "output_result": 0
  },
  "874": {
    "db_id": "network_1",
    "question": "How many high schoolers are there in grade 9 or 10?",
    "ground_truth": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "output_sql": "SELECT COUNT(*) FROM HighschoolER WHERE grade = 9 OR grade =10;",
    "output_result": 1
  },
  "875": {
    "db_id": "network_1",
    "question": "Count the number of high schoolers in grades 9 or 10.",
    "ground_truth": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "output_sql": "SELECT COUNT(*) FROM Highschoolер WHERE grade = 9 OR grade =10;",
    "output_result": 0
  },
  "876": {
    "db_id": "network_1",
    "question": "Show the number of high schoolers for each grade.",
    "ground_truth": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "output_sql": "SELECT grade, COUNT(*) AS count_of_students FROM HighschoolER GROUP BY grade;",
    "output_result": 1
  },
  "877": {
    "db_id": "network_1",
    "question": "How many high schoolers are in each grade?",
    "ground_truth": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "output_sql": "SELECT grade,COUNT(*) FROM HIGHSCHOOLER GROUP BY Grade;",
    "output_result": 1
  },
  "878": {
    "db_id": "network_1",
    "question": "Which grade has the most high schoolers?",
    "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT grade FROM HighschoolER GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "879": {
    "db_id": "network_1",
    "question": "Return the grade that has the greatest number of high schoolers.",
    "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT grade FROM HighschoolER GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 1
  },
  "880": {
    "db_id": "network_1",
    "question": "Show me all grades that have at least 4 students.",
    "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "output_sql": "SELECT grade FROM HighschoolER GROUP BY grade HAVING COUNT(*) >=4;",
    "output_result": 1
  },
  "881": {
    "db_id": "network_1",
    "question": "Which grades have 4 or more high schoolers?",
    "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "output_sql": "SELECT grade FROM HighschoolER GROUP BY grade HAVING COUNT(*) >=4;",
    "output_result": 1
  },
  "882": {
    "db_id": "network_1",
    "question": "Show the student IDs and numbers of friends corresponding to each.",
    "ground_truth": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "output_sql": "SELECT F.student_id, COUNT(F.friend_id) AS number_of_friends FROM Friend F GROUP BY F.student_Id;",
    "output_result": 1
  },
  "883": {
    "db_id": "network_1",
    "question": "How many friends does each student have?",
    "ground_truth": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "output_sql": "SELECT COUNT(friend_id) AS friend_count, student_id FROM Friend GROUP BY student_id;",
    "output_result": 0
  },
  "884": {
    "db_id": "network_1",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "ground_truth": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "output_sql": "SELECT T2 name, COUNT(*) AS number_of_friends FROM Friend T1 JOIN Highschoolер T2 ON T1@student_id = Т2.ID GROUP BY T1_student_id;",
    "output_result": 0
  },
  "885": {
    "db_id": "network_1",
    "question": "What are the names of the high schoolers and how many friends does each have?",
    "ground_truth": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "output_sql": "SELECT T2 name, COUNT(T1.student_Id) AS friend_count FROM HighschoolER T2 INNER JOIN Friend T1 ON T1.Student_ID = T1.ID GROUP BY T2.Name;",
    "output_result": 0
  },
  "886": {
    "db_id": "network_1",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T2_name.name FROM ( SELECT F.student_id, COUNT(*) AS friend_count FROM Friend F GROUP BY F.student_ID ORDER BY friend_count DESC LIMIT 1 ) AS T1 JOIN Highschoolers T2 ON T1@student_id =T2.ID;",
    "output_result": 0
  },
  "887": {
    "db_id": "network_1",
    "question": "Return the name of the high school student with the most friends.",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T2_name.name FROM HighschoolER T2_NAME JOIN Friend F ON T2_Name.ID = F.student_id GROUP BY T2.Name ORDER BY COUNT(F.friend_id) DESC LIMIT 1;",
    "output_result": 0
  },
  "888": {
    "db_id": "network_1",
    "question": "Show the names of high schoolers who have at least 3 friends.",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "output_sql": "SELECT T2 name FROM Friend AS T1 JOIN HighschoolER AS T2 ON T1_student_id =T2_ID GROUP BY T1_Student_id HAVING COUNT(*) >= 3;",
    "output_result": 0
  },
  "889": {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have 3 or more friends?",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "output_sql": "SELECT T2 name FROM Friend AS T1 JOIN HighschoolER AS T2 ON T1_student_id = T2_ID GROUP BY T1 student_id HAVING COUNT(*) >= 3;",
    "output_result": 0
  },
  "890": {
    "db_id": "network_1",
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "ground_truth": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "output_sql": "SELECT h.name FROM Highschoolер h JOIN Friend f ON h.ID = f.friend_id WHERE f.student_id = (SELECT ID FROM HighschoolER WHERE name = 'Kyle');",
    "output_result": 0
  },
  "891": {
    "db_id": "network_1",
    "question": "Return the names of friends of the high school student Kyle.",
    "ground_truth": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "output_sql": "SELECT T3name FROM Highschoolers AS T2 JOIN Friend AS T1 ON T2.ID = T1_student_id JOIN Highschooleras AS T3 ON T1_friend_id =T3.ID WHERE T2_name = 'Kyle';",
    "output_result": 0
  },
  "892": {
    "db_id": "network_1",
    "question": "How many friends does the high school student Kyle have?",
    "ground_truth": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "output_sql": "SELECT COUNT(*) FROM Friend F JOIN HighschoolER H ON F.student_id=H.ID WHERE H.name='Kyle';",
    "output_result": 1
  },
  "893": {
    "db_id": "network_1",
    "question": "Count the number of friends Kyle has.",
    "ground_truth": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "output_sql": "SELECT COUNT(*) FROM Friend AS T1 JOIN Highschoolер AS T2 ON T1 student_id = Т2.ID WHERE T2.name='Kyle';",
    "output_result": 0
  },
  "894": {
    "db_id": "network_1",
    "question": "Show ids of all students who do not have any friends.",
    "ground_truth": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "output_sql": "SELECT ID FROM HighschoolER EXCEPT SELECT student_id FROM Friend;",
    "output_result": 1
  },
  "895": {
    "db_id": "network_1",
    "question": "What are the ids of high school students who do not have friends?",
    "ground_truth": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "output_sql": "SELECT ID FROM HighschoolER EXCEPT SELECT student_id FROM Friend;",
    "output_result": 1
  },
  "896": {
    "db_id": "network_1",
    "question": "Show names of all high school students who do not have any friends.",
    "ground_truth": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "output_sql": "SELECT H.name FROM HighschoolER H EXCEPT SELECT T1.name FROM HighschoolEr H JOIN Friend F ON H.ID = F.student_id;",
    "output_result": 0
  },
  "897": {
    "db_id": "network_1",
    "question": "What are the names of students who have no friends?",
    "ground_truth": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "output_sql": "SELECT T2 name FROM HighschoolER AS T2 EXCEPT SELECT DISTINCT T1 student_id FROM Friend AS T1;",
    "output_result": 0
  },
  "898": {
    "db_id": "network_1",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "ground_truth": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "output_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;",
    "output_result": 1
  },
  "899": {
    "db_id": "network_1",
    "question": "What are the ids of students who both have friends and are liked?",
    "ground_truth": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "output_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;",
    "output_result": 1
  },
  "900": {
    "db_id": "network_1",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "output_sql": "SELECT T1.name FROM HighschoolER AS T1 INTERSECT SELECT H2.name FROM HighschoolEr AS H2 JOIN Likes AS L ON L.liked_Id = H2.ID;",
    "output_result": 1
  },
  "901": {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "output_sql": "SELECT DISTINCT H.name FROM HighschoolER H INNER JOIN Friend F ON H.ID = F.student_id INNERJOIN Likes L ON H.id = L.liked_Id;",
    "output_result": 0
  },
  "902": {
    "db_id": "network_1",
    "question": "Count the number of likes for each student id.",
    "ground_truth": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "output_sql": "SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id;",
    "output_result": 1
  },
  "903": {
    "db_id": "network_1",
    "question": "How many likes correspond to each student id?",
    "ground_truth": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "output_sql": "SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id;",
    "output_result": 1
  },
  "904": {
    "db_id": "network_1",
    "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "ground_truth": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "output_sql": "SELECT T2_name.name, COUNT(T1.student_Id) AS like_count FROM Likes T1 INNER JOIN HighschoolER T2_Name ON T1.Student_ID = T1.ID GROUP BY T1.StUDENT_ID;",
    "output_result": 0
  },
  "905": {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "ground_truth": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "output_sql": "SELECT T2.name, COUNT(*) FROM Likes AS T1 INNER JOIN HighschoolER AS T2 ON T1.student_id = T2.ID GROUP BY T1_student_id;",
    "output_result": 0
  },
  "906": {
    "db_id": "network_1",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T2name FROM Highschoolers AS T2 JOIN ( SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id ORDER BY like_count DESC LIMIT 1 ) AS T1 ON T1@student_id =T2.ID;",
    "output_result": 0
  },
  "907": {
    "db_id": "network_1",
    "question": "Give the name of the student with the most likes.",
    "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T2name FROM Highschoolers AS T2 JOIN ( SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id ORDER BY like_count DESC LIMIT 1 ) AS T1 ON T1@student_id =T2.ID;",
    "output_result": 0
  },
  "908": {
    "db_id": "network_1",
    "question": "Show the names of students who have at least 2 likes.",
    "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T2 name FROM Highschoolers AS T3 JOIN Likes AS T4 ON T4.student_id=T3.ID GROUP BY T3.ID HAVING COUNT(*)>=2;",
    "output_result": 0
  },
  "909": {
    "db_id": "network_1",
    "question": "What are the names of students who have 2 or more likes?",
    "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T2 name FROM Likes AST1 JOIN Highschoolers AS T3 ON T1. student_id =T2.ID GROUP BY T2.ID HAVING COUNT(*) >=2;",
    "output_result": 0
  },
  "910": {
    "db_id": "network_1",
    "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T2.name FROM Friend AS T1 JOIN HighschoolER AS T2 ON T1.student_id = T2.ID WHERE T2.grade > 6 GROUP BY T1_student_id HAVING COUNT(*) >=2;",
    "output_result": 0
  },
  "911": {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T2 name FROM Friend AS T1 JOIN HighschoolER AS T2 ON T1_student_id = T2_ID WHERE T2_grade > 6 GROUP BY T1_Student_id HAVING COUNT(*) >=2;",
    "output_result": 0
  },
  "912": {
    "db_id": "network_1",
    "question": "How many likes does Kyle have?",
    "ground_truth": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "output_sql": "SELECT COUNT(*) FROM Likes AS T1 INNER JOIN HighschoolER AS T2 ON T1@student_id = T2.ID WHERE T2name = \" Kyle\";",
    "output_result": 0
  },
  "913": {
    "db_id": "network_1",
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "ground_truth": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "output_sql": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschoolер WHERE name = 'Kyle');",
    "output_result": 0
  },
  "914": {
    "db_id": "network_1",
    "question": "Find the average grade of all students who have some friends.",
    "ground_truth": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "output_sql": "SELECT AVG(T2.grade) FROM HighschoolER AS T２ WHERE T2.ID IN ( SELECT T1 student_id FROM Friend As T1 JOIN HighSchooler AST2 ONT1.student_ID = T２.ID );",
    "output_result": 0
  },
  "915": {
    "db_id": "network_1",
    "question": "What is the average grade of students who have friends?",
    "ground_truth": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "output_sql": "SELECT AVG(T2.grade) FROM HighschoolER AS T２ WHERE T2.ID IN ( SELECT T1 student_id FROM Friend As T1 JOIN HighSchooler AST2 ONT1.student_ID = T２.ID );",
    "output_result": 0
  },
  "916": {
    "db_id": "network_1",
    "question": "Find the minimum grade of students who have no friends.",
    "ground_truth": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "output_sql": "SELECT min(T1.grade) FROM HighschoolER AS T0 WHERE T0.ID NOT IN ( SELECT T1.student_Id FROM Friend AS T１ JOIN HighschoolEr AS T２ ON T1.Student_ID = T２.ID );",
    "output_result": 0
  },
  "917": {
    "db_id": "network_1",
    "question": "What is the lowest grade of students who do not have any friends?",
    "ground_truth": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "output_sql": "SELECT MIN(h.grade) FROM HighschoolER h WHERE h.ID NOT IN (SELECT student_id FROM Friend);",
    "output_result": 1
  },
  "918": {
    "db_id": "dog_kennels",
    "question": "Which states have both owners and professionals living there?",
    "ground_truth": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "output_sql": "SELECT DISTINCT o.state FROM Owners o INTERSECT SELECT p.state FROM Professionals p;",
    "output_result": 1
  },
  "919": {
    "db_id": "dog_kennels",
    "question": "Find the states where both owners and professionals live.",
    "ground_truth": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "output_sql": "SELECT DISTINCT o.state FROM Owners o INTERSECT SELECT p.state FROM Professionals p;",
    "output_result": 1
  },
  "920": {
    "db_id": "dog_kennels",
    "question": "What is the average age of the dogs who have gone through any treatments?",
    "ground_truth": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "output_sql": "SELECT AVG(d.age) FROM Dogs d WHERE d.dog_id IN (SELECT t.dog_Id FROM Treatments t);",
    "output_result": 1
  },
  "921": {
    "db_id": "dog_kennels",
    "question": "Find the average age of the dogs who went through treatments.",
    "ground_truth": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "output_sql": "SELECT avg(d.age) FROM Dogs d WHERE d.dog_id IN ( SELECT t.dog_Id FROM Treatements t );",
    "output_result": 0
  },
  "922": {
    "db_id": "dog_kennels",
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "ground_truth": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "output_sql": "SELECT T1.professional_id, T1.last_name, T2.cell_number FROM Professionals AS T1 JOIN ( SELECT T2.professionals_id, p.cell_number FROM Treatments AS T2 JOIN Professionals AS P ON T2 profesional_id = P.professional_Id GROUP BY T2_professional_id HAVING COUNT(*) >2 ) AS T3 ON T1.PROFESSIONAL_ID = T3.PROFECTIONAL_ID WHERE T1.state = 'Indiana' UNION SELECT professional_id,last_name,cell_number from Professionals where state = 'indiana' or professional_id in ( select T2professional_id from Treatments as T2 group by t2.professiona_id having count(*)>2 );",
    "output_result": 0
  },
  "923": {
    "db_id": "dog_kennels",
    "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "ground_truth": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "output_sql": "SELECT P.professionalId AS professional_id, P.last_name, P.cell_number FROM Professionals AS P WHERE UPPER(P.state) = 'INDIANA';",
    "output_result": 0
  },
  "924": {
    "db_id": "dog_kennels",
    "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "ground_truth": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "output_sql": "SELECT d.name FROM Dogs d WHERE d.dog_id NOT IN ( SELECT t.dog_Id FROM Treatments t JOIN (SELECT dog_id, SUM(cost_of Treatment) AS total_cost FROM TreatMENTS GROUP BY狗_id HAVING SUM(cost_OF_TREATMENT) >10００) AS high_cost_dogs );",
    "output_result": 0
  },
  "925": {
    "db_id": "dog_kennels",
    "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "ground_truth": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "output_sql": "SELECT d.name FROM Dogs d WHERE d.dog_id NOT IN ( SELECT t.dog_Id FROM Treatments t GROUP BY t.dogg_id HAVING SUM(t.cost_of_treatement) > 1０００ );",
    "output_result": 0
  },
  "926": {
    "db_id": "dog_kennels",
    "question": "Which first names are used for professionals or owners but are not used as dog names?",
    "ground_truth": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "output_sql": "SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT\tfirst_name FROM Professionals EXCEPT SELECT name FROM Dogs );",
    "output_result": 1
  },
  "927": {
    "db_id": "dog_kennels",
    "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "ground_truth": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "output_sql": "SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT\tfirst_name FROM Professionals EXCEPT SELECT name FROM Dogs;",
    "output_result": 1
  },
  "928": {
    "db_id": "dog_kennels",
    "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "ground_truth": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "output_sql": "SELECT T1.professional_id, T1.role_code, T2.email_address FROM Professionals AS T1 EXCEPT SELECT DISTINCT T1.proessional_id , T1(role_code), T1.email_address FROM Professionals as T1 INNER JOIN Treatments AS T2 ON T1 profesional_id = T2.professional_Id;",
    "output_result": 0
  },
  "929": {
    "db_id": "dog_kennels",
    "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "ground_truth": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "output_sql": "SELECT P.professionalId, P.role_code, P.email_address FROM Professionals AS P EXCEPT SELECT T1.profissional_id, T1.role_code, T1.email_address FROM Professionals AS Tl JOIN Treatments AST2 ON T1.proffesional_id =T2.profesional_Id;",
    "output_result": 0
  },
  "930": {
    "db_id": "dog_kennels",
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "ground_truth": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT d.owner_id, o.first_name, o.last_name FROM Dogs d INNER JOIN Owners o ON d.ownerId = o.owner_id GROUP BY d.owner_id ORDER BY COUNT(d.dog_id) DESC LIMIT 1;",
    "output_result": 0
  },
  "931": {
    "db_id": "dog_kennels",
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "ground_truth": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1(owner_id), T2.first_Name, T2.last_Name FROM (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1) AS T1 JOIN Owners AS T2 ON 郭1.owner_Id = T1.Owner_Id;",
    "output_result": 0
  },
  "932": {
    "db_id": "dog_kennels",
    "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "ground_truth": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T1.provisional_id, T1.role_code, T2.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1 profesional_id =T2.professiona_id GROUP BY T1_professional_id HAVING COUNT(*) >=2;",
    "output_result": 0
  },
  "933": {
    "db_id": "dog_kennels",
    "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "ground_truth": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T1.professorial_id, T1.roleCode, T2.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.profeesional_id =T2.profesionalid GROUP BY T1 profesional_id HAVING COUNT(*) >=2;",
    "output_result": 0
  },
  "934": {
    "db_id": "dog_kennels",
    "question": "What is the name of the breed with the most dogs?",
    "ground_truth": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.`breedName` FROM `Breeding` AS T1 JOIN `Doggies` AS D ON T1`.`breedCode` = D`.`breedList` GROUP BY T1`.breedcode` ORDER BY COUNT(D.dogId) DESC LIMIT 1;",
    "output_result": 0
  },
  "935": {
    "db_id": "dog_kennels",
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "ground_truth": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1.`breedName` FROM ( SELECT B.`breedList`, COUNT(*) AS dog_count FROM Dogs D JOIN Breeds B ON D.`breeder_code` = B.`brew_code` GROUP BY B.`bred_code` ) AS T1 ORDER BY T1.dog_count DESC LIMIT 1;",
    "output_result": 0
  },
  "936": {
    "db_id": "dog_kennels",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "ground_truth": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1(owner_id), T1(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1owner_id =T2owner_id JOIN Treatments AS T3 ON T2dog_id =\tT3dog_id GROUP BY T1_owner_id ORDER BY COUNT(*) DESC;",
    "output_result": 0
  },
  "937": {
    "db_id": "dog_kennels",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "ground_truth": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "output_sql": "SELECT T1(owner_id), last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1-owner_id =T2-owner_id JOIN Treatments AS T3 ON T2-dog_id=T3-dog-id GROUP BY T1.owner_Id ORDER BY COUNT(*) DESC LIMIT 1;",
    "output_result": 0
  },
  "938": {
    "db_id": "dog_kennels",
    "question": "What is the description of the treatment type that costs the least money in total?",
    "ground_truth": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "output_sql": "SELECT T1.`treatmentTypeDescription` FROM `TreatmentTypes` AS T1 JOIN `TREATMENTS` AST2 ON T1`.`treatment_Type_Code` = T1`.treatment_TYPE_CODE` GROUP BY T1. treatment_type_code ORDER BY SUM(T2.cost_of_treatement) ASC LIMIT 1;",
    "output_result": 0
  },
  "939": {
    "db_id": "dog_kennels",
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "ground_truth": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "output_sql": "SELECT T1.`treatmentTypeDescription` FROM `TreatmentTypes` AS T1 JOIN `TREATMENTS` AST2 ON T1`.`treatmenttypecode` = T12`.`treatementtypecode` GROUP BY T1`.treatmenttypedescription` ORDER BY SUM(T2`.`costoftreatment`) ASC LIMIT 1;",
    "output_result": 0
  },
  "940": {
    "db_id": "dog_kennels",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "ground_truth": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "output_sql": "SELECT T1(owner_id), zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1owner_id =T2.ownerid JOIN Treatments AS T3 ON T2 dog_id =  T3 dog_id GROUP BY T1.ownerid ORDER BY SUM(T3 cost_of_treatement) DESC LIMIT 1;",
    "output_result": 0
  },
  "941": {
    "db_id": "dog_kennels",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "ground_truth": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "output_sql": "SELECT T1(owner_id), zip_code FROM Owners AS O JOIN Dogs AS D ON O.owner_id == D.owner_id JOIN Treatments AS T ON D.dog_Id == T.dogId GROUP BY O.owner_Id ORDER BY SUM(T.cost_of_Treatment) DESC LIMIT 1;",
    "output_result": 0
  },
  "942": {
    "db_id": "dog_kennels",
    "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "ground_truth": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T1.professional_id, T1\tcell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1_professional_id= T2_professionalid GROUP BY T1 profesional_id HAVING COUNT(*) >=2;",
    "output_result": 0
  },
  "943": {
    "db_id": "dog_kennels",
    "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "ground_truth": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "output_sql": "SELECT T1.professorial_id, T1_cell_number FROM Professionals AS T1 JOIN Treatments AST2 ON T1.professiona_id =T2.professionai_id GROUP BY 1.profesional_id HAVING count(*) >=2;",
    "output_result": 0
  },
  "944": {
    "db_id": "dog_kennels",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "output_sql": "SELECT DISTINCT T1_first_name, T1_last_name FROM Professionals AS T2 CROSS JOIN Treatments AS T3 WHERE cost_of Treatment < (SELECT avg(cost_of Treatment) FROM Treations);",
    "output_result": 0
  },
  "945": {
    "db_id": "dog_kennels",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "output_sql": "SELECT DISTINCT T1_first_name, T1_last_name FROM Professionals AS郭1 CROSS JOIN TreatmentsAS T2 WHERE T2_cost_of_treatmen < (SELECT AVG(cost_of_tretement) FROM Treatments);",
    "output_result": 0
  },
  "946": {
    "db_id": "dog_kennels",
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "ground_truth": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "output_sql": "SELECT T1(date_of_treatement), T2(first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_Id;",
    "output_result": 0
  },
  "947": {
    "db_id": "dog_kennels",
    "question": "What are the date and the operating professional's first name of each treatment?",
    "ground_truth": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "output_sql": "SELECT T1(date_of_treatement), T2(first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.proffesional_id =T2.profesional_Id;",
    "output_result": 0
  },
  "948": {
    "db_id": "dog_kennels",
    "question": "List the cost of each treatment and the corresponding treatment type description.",
    "ground_truth": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "output_sql": "SELECT T1_cost_of_treatments.cost_of Treatment, T1_treatment_type_descriptions.treatmentTypeDescription FROM Treatments AS T1_costs_of_teachment JOIN Treatment_Types AS T2_treatment_types ON T1_cots_of_techment.treatment_treatment_code =T2_treatement_types.treatment_types_code;",
    "output_result": 0
  },
  "949": {
    "db_id": "dog_kennels",
    "question": "What are the cost and treatment type description of each treatment?",
    "ground_truth": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "output_sql": "SELECT T1 cost_of_treatement, T3.treatmentTypeDescription FROM Treatments AS T1 JOIN Treatment_Types AS T3 ON T1.Treatment_Type_Code = T3.Treatment_Type_Code;",
    "output_result": 0
  },
  "950": {
    "db_id": "dog_kennels",
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "ground_truth": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "output_sql": "SELECT T1.first_name, 郭1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_Id = T1.dog_id;",
    "output_result": 0
  },
  "951": {
    "db_id": "dog_kennels",
    "question": "What are each owner's first name, last name, and the size of their dog?",
    "ground_truth": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "output_sql": "SELECT T1_first_name,\tT1_last_name, \tT2_size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1(owner_id) = T1(dog_id);",
    "output_result": 0
  },
  "952": {
    "db_id": "dog_kennels",
    "question": "List pairs of the owner's first name and the dogs's name.",
    "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "output_sql": "SELECT T1_first_name, D_name FROM Owners AS T1 INNER JOIN Dogs AS D ON T1(owner_id) = D(owner_id);",
    "output_result": 0
  },
  "953": {
    "db_id": "dog_kennels",
    "question": "What are each owner's first name and their dogs's name?",
    "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "output_sql": "SELECT T1_first_name, T2_name FROM Owners AS T0 JOIN Dogs AS T3 ON T0.owner_id= T3.owner_id;",
    "output_result": 0
  },
  "954": {
    "db_id": "dog_kennels",
    "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "ground_truth": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "output_sql": "SELECT D.name,T.date_of Treatment FROM Dogs D JOIN Treatments T ON D.dog_Id = T.dog_ID WHERE D.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );",
    "output_result": 0
  },
  "955": {
    "db_id": "dog_kennels",
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "ground_truth": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "output_sql": "SELECT T1 name, T2 date_of_treatement FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1_dog_id=T2_dog_Id WHERE T1_breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 ) ORDER BY T2_date_of_treament DESC;",
    "output_result": 0
  },
  "956": {
    "db_id": "dog_kennels",
    "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "output_sql": "SELECT T2.first_NAME, T1.name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1(owner_id) = T２(owner_id) WHERE T2_state = ' Virginia ';",
    "output_result": 0
  },
  "957": {
    "db_id": "dog_kennels",
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "output_sql": "SELECT DISTINCT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';",
    "output_result": 1
  },
  "958": {
    "db_id": "dog_kennels",
    "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "ground_truth": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "output_sql": "SELECT DISTINCT T1 date_arrived , T1\tdate_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1_dog_id=T2_dog_Id;",
    "output_result": 0
  },
  "959": {
    "db_id": "dog_kennels",
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "ground_truth": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "output_sql": "SELECT DISTINCT d.date_arrived, d.date_departed FROM Dogs d INNER JOIN Treatments t ON d.dog_Id = t.dogId;",
    "output_result": 0
  },
  "960": {
    "db_id": "dog_kennels",
    "question": "List the last name of the owner owning the youngest dog.",
    "ground_truth": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "output_sql": "SELECT T1(last_name) FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1(owner_id) = T２(owner_id) WHERE T2(age) = ( SELECT MAX(age)\tFROM Dogs );",
    "output_result": 0
  },
  "961": {
    "db_id": "dog_kennels",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "ground_truth": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "output_sql": "SELECT DISTINCT T1(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1(owner_id) = T２(owner_id) WHERE T2(age) = ( SELECT MAX(age)\tFROM Dogs );",
    "output_result": 0
  },
  "962": {
    "db_id": "dog_kennels",
    "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "ground_truth": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "output_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = ‘Wisconsin’;",
    "output_result": 0
  },
  "963": {
    "db_id": "dog_kennels",
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "ground_truth": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "output_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = ‘Wisconsin’;",
    "output_result": 0
  },
  "964": {
    "db_id": "dog_kennels",
    "question": "What are the arriving date and the departing date of all the dogs?",
    "ground_truth": "SELECT date_arrived ,  date_departed FROM Dogs",
    "output_sql": "SELECT date_arrived, date_departed FROM Dogs;",
    "output_result": 1
  },
  "965": {
    "db_id": "dog_kennels",
    "question": "List the arrival date and the departure date for all the dogs.",
    "ground_truth": "SELECT date_arrived ,  date_departed FROM Dogs",
    "output_sql": "SELECT date_arrIVED, date_DEPARTED FROM Dogs;",
    "output_result": 1
  },
  "966": {
    "db_id": "dog_kennels",
    "question": "How many dogs went through any treatments?",
    "ground_truth": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "output_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
    "output_result": 1
  },
  "967": {
    "db_id": "dog_kennels",
    "question": "Count the number of dogs that went through a treatment.",
    "ground_truth": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "output_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
    "output_result": 1
  },
  "968": {
    "db_id": "dog_kennels",
    "question": "How many professionals have performed any treatment to dogs?",
    "ground_truth": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "output_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;",
    "output_result": 1
  },
  "969": {
    "db_id": "dog_kennels",
    "question": "Find the number of professionals who have ever treated dogs.",
    "ground_truth": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "output_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;",
    "output_result": 1
  },
  "970": {
    "db_id": "dog_kennels",
    "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "ground_truth": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "output_sql": "SELECT role_code , street,city,state FROM Professionals WHERE city LIKE '%West%';",
    "output_result": 1
  },
  "971": {
    "db_id": "dog_kennels",
    "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "ground_truth": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "output_sql": "SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city LIKE '%West%';",
    "output_result": 1
  },
  "972": {
    "db_id": "dog_kennels",
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "ground_truth": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "output_sql": "SELECT o.first_name, o.last_name,\to.email_address FROM Owners o WHERE o.state LIKE '%North%';",
    "output_result": 1
  },
  "973": {
    "db_id": "dog_kennels",
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "ground_truth": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "output_sql": "SELECT o.first_name, o.last_name,\to.email_address FROM Owners o WHERE o.state LIKE '%North%';",
    "output_result": 1
  },
  "974": {
    "db_id": "dog_kennels",
    "question": "How many dogs have an age below the average?",
    "ground_truth": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "output_sql": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(CAST(age AS REAL)) FROM Dogs);",
    "output_result": 1
  },
  "975": {
    "db_id": "dog_kennels",
    "question": "Count the number of dogs of an age below the average.",
    "ground_truth": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "output_sql": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);",
    "output_result": 1
  },
  "976": {
    "db_id": "dog_kennels",
    "question": "How much does the most recent treatment cost?",
    "ground_truth": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "output_sql": "SELECT cost_of_treatement FROM Treatments ORDER BY date_of_tretement DESC LIMIT 1;",
    "output_result": 0
  },
  "977": {
    "db_id": "dog_kennels",
    "question": "Show me the cost of the most recently performed treatment.",
    "ground_truth": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "output_sql": "SELECT cost_of_treatement FROM Treatments ORDER BY date_of Treatment DESC LIMIT 1;",
    "output_result": 0
  },
  "978": {
    "db_id": "dog_kennels",
    "question": "How many dogs have not gone through any treatment?",
    "ground_truth": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "output_sql": "SELECT count(*) FROM Dogs WHERE dog_id Not IN (SELECT dog_id\tFROM Treatments);",
    "output_result": 1
  },
  "979": {
    "db_id": "dog_kennels",
    "question": "Tell me the number of dogs that have not received any treatment .",
    "ground_truth": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
    "output_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);",
    "output_result": 1
  },
  "980": {
    "db_id": "dog_kennels",
    "question": "How many owners temporarily do not have any dogs?",
    "ground_truth": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "output_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);",
    "output_result": 1
  },
  "981": {
    "db_id": "dog_kennels",
    "question": "Find the number of owners who do not own any dogs at this moment.",
    "ground_truth": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "output_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);",
    "output_result": 1
  },
  "982": {
    "db_id": "dog_kennels",
    "question": "How many professionals did not operate any treatment on dogs?",
    "ground_truth": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "output_sql": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);",
    "output_result": 1
  },
  "983": {
    "db_id": "dog_kennels",
    "question": "Find the number of professionals who have not treated any dogs.",
    "ground_truth": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "output_sql": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);",
    "output_result": 1
  },
  "984": {
    "db_id": "dog_kennels",
    "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "ground_truth": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "output_sql": "SELECT name, Age, weight FROM Dogs WHERE abandoned_yn = '1';",
    "output_result": 1
  },
  "985": {
    "db_id": "dog_kennels",
    "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "ground_truth": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "output_sql": "SELECT name, Age, weight FROM Dogs WHERE abandoned_yn = '1';",
    "output_result": 1
  },
  "986": {
    "db_id": "dog_kennels",
    "question": "What is the average age of all the dogs?",
    "ground_truth": "SELECT avg(age) FROM Dogs",
    "output_sql": "SELECT AVG(age) FROM Dogs;",
    "output_result": 1
  },
  "987": {
    "db_id": "dog_kennels",
    "question": "Compute the average age of all the dogs.",
    "ground_truth": "SELECT avg(age) FROM Dogs",
    "output_sql": "SELECT AVG(age) FROM Dogs;",
    "output_result": 1
  },
  "988": {
    "db_id": "dog_kennels",
    "question": "What is the age of the oldest dog?",
    "ground_truth": "SELECT max(age) FROM Dogs",
    "output_sql": "SELECT MAX(age) FROM Dogs;",
    "output_result": 1
  },
  "989": {
    "db_id": "dog_kennels",
    "question": "Tell me the age of the oldest dog.",
    "ground_truth": "SELECT max(age) FROM Dogs",
    "output_sql": "SELECT MAX(age) FROM Dogs;",
    "output_result": 1
  },
  "990": {
    "db_id": "dog_kennels",
    "question": "How much does each charge type costs? List both charge type and amount.",
    "ground_truth": "SELECT charge_type ,  charge_amount FROM Charges",
    "output_sql": "SELECT charge_type, charge_amount FROM Charges;",
    "output_result": 1
  },
  "991": {
    "db_id": "dog_kennels",
    "question": "List each charge type and its amount.",
    "ground_truth": "SELECT charge_type ,  charge_amount FROM Charges",
    "output_sql": "SELECT charge_type, charge_amount FROM Charges;",
    "output_result": 1
  },
  "992": {
    "db_id": "dog_kennels",
    "question": "How much does the most expensive charge type costs?",
    "ground_truth": "SELECT max(charge_amount) FROM Charges",
    "output_sql": "SELECT MAX(chargeAmount) FROM Charges;",
    "output_result": 0
  },
  "993": {
    "db_id": "dog_kennels",
    "question": "What is the charge amount of the most expensive charge type?",
    "ground_truth": "SELECT max(charge_amount) FROM Charges",
    "output_sql": "SELECT MAX(charge_amount) FROM Charges;",
    "output_result": 1
  },
  "994": {
    "db_id": "dog_kennels",
    "question": "List the email, cell phone and home phone of all the professionals.",
    "ground_truth": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "output_sql": "SELECT email_address , cell_number , home_phone FROM Professionals;",
    "output_result": 1
  },
  "995": {
    "db_id": "dog_kennels",
    "question": "What are the email, cell phone and home phone of each professional?",
    "ground_truth": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "output_sql": "SELECT email_address , cell_number , home_phone FROM Professionals;",
    "output_result": 1
  },
  "996": {
    "db_id": "dog_kennels",
    "question": "What are all the possible breed type and size type combinations?",
    "ground_truth": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "output_sql": "SELECT DISTINCT breed_code, size_code FROM Dogs;",
    "output_result": 1
  },
  "997": {
    "db_id": "dog_kennels",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "ground_truth": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "output_sql": "SELECT DISTINCT d.breed_code, d.size_code FROM Dogs d;",
    "output_result": 1
  },
  "998": {
    "db_id": "dog_kennels",
    "question": "List the first name of all the professionals along with the description of the treatment they have done.",
    "ground_truth": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "output_sql": "SELECT DISTINCT T1.first_name, T3\ttreatment_typeDescription FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id= T2.profesional_id JOIN Treatment_Types AS T3 ON T2.Treatment_Type_Code = T4.treatment_Type_CoDE;",
    "output_result": 0
  },
  "999": {
    "db_id": "dog_kennels",
    "question": "What are each professional's first name and description of the treatment they have performed?",
    "ground_truth": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "output_sql": "SELECT DISTINCT T1.first_name, T3.treatment_typeDescription FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professionalId JOIN Treatment_Types AS T3 ON T2.treatmentTypeCode = T3\ttreatment_type_Code;",
    "output_result": 0
  },
  "1000": {
    "db_id": "singer",
    "question": "How many singers are there?",
    "ground_truth": "SELECT count(*) FROM singer",
    "output_sql": "SELECT COUNT(*) FROM \"snger\";",
    "output_result": 0
  },
  "1001": {
    "db_id": "singer",
    "question": "What is the count of singers?",
    "ground_truth": "SELECT count(*) FROM singer",
    "output_sql": "SELECT COUNT(*) FROM singer;",
    "output_result": 1
  },
  "1002": {
    "db_id": "singer",
    "question": "List the name of singers in ascending order of net worth.",
    "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" ORDER BY \"Net-Worth-Millions\" ASC;",
    "output_result": 1
  },
  "1003": {
    "db_id": "singer",
    "question": "What are the names of singers ordered by ascending net worth?",
    "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" ORDER BY \"Net-Worth-Millions\" ASC;",
    "output_result": 1
  },
  "1004": {
    "db_id": "singer",
    "question": "What are the birth year and citizenship of singers?",
    "ground_truth": "SELECT Birth_Year ,  Citizenship FROM singer",
    "output_sql": "SELECT Birth_ Year, Citizenship FROM singer;",
    "output_result": 0
  },
  "1005": {
    "db_id": "singer",
    "question": "What are the birth years and citizenships of the singers?",
    "ground_truth": "SELECT Birth_Year ,  Citizenship FROM singer",
    "output_sql": "SELECT Birth_ Year, Citizenship FROM singer;",
    "output_result": 0
  },
  "1006": {
    "db_id": "singer",
    "question": "List the name of singers whose citizenship is not \"France\".",
    "ground_truth": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "output_sql": "SELECT Name FROM singer WHERE Citizenship != 'France';",
    "output_result": 1
  },
  "1007": {
    "db_id": "singer",
    "question": "What are the names of the singers who are not French citizens?",
    "ground_truth": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "output_sql": "SELECT \"Name\" FROM \"sänger\" WHERE \"CitizenShip\" != 'France';",
    "output_result": 0
  },
  "1008": {
    "db_id": "singer",
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "ground_truth": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" WHERE \"Birth_YEAR\" = 1848 OR \"BirthYEAR\" =1950;",
    "output_result": 0
  },
  "1009": {
    "db_id": "singer",
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "ground_truth": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" WHERE \"Birth_YEAR\" = 1848 OR \"BirthYEAR\" =1950;",
    "output_result": 0
  },
  "1010": {
    "db_id": "singer",
    "question": "What is the name of the singer with the largest net worth?",
    "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" ORDER BY \"Net-Worth-Millions\" DESC LIMIT 1;",
    "output_result": 1
  },
  "1011": {
    "db_id": "singer",
    "question": "What is the name of the singer who is worth the most?",
    "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" ORDER BY \"Net-Worth-Millions\" DESC LIMIT 1;",
    "output_result": 1
  },
  "1012": {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship.",
    "ground_truth": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "output_sql": "SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;",
    "output_result": 1
  },
  "1013": {
    "db_id": "singer",
    "question": "For each citizenship, how many singers are from that country?",
    "ground_truth": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "output_sql": "SELECT Citizenship, Count(*) FROM singer GROUP BY Citizenship;",
    "output_result": 1
  },
  "1014": {
    "db_id": "singer",
    "question": "Please show the most common citizenship of singers.",
    "ground_truth": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "output_sql": "SELECT Citizenship FROM singer GROUP BY Citation ORDER BY COUNT(*) DESC LIMIT 0;",
    "output_result": 0
  },
  "1015": {
    "db_id": "singer",
    "question": "What is the most common singer citizenship ?",
    "ground_truth": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "output_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizensship) DESC LIMIT 1;",
    "output_result": 0
  },
  "1016": {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "ground_truth": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "output_sql": "SELECT Citizenship, MAX(Net_WORTH_MILLIONS) AS Maximum_Net_Worth FROM singer GROUP BY Citizenship;",
    "output_result": 1
  },
  "1017": {
    "db_id": "singer",
    "question": "For each citizenship, what is the maximum net worth?",
    "ground_truth": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "output_sql": "SELECT MAX(Net-Worth_Million), Citizenship FROM singer GROUP BY Citizenship;",
    "output_result": 0
  },
  "1018": {
    "db_id": "singer",
    "question": "Show titles of songs and names of singers.",
    "ground_truth": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "output_sql": "SELECT T2\tTitle, T2.Name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T1.song_id;",
    "output_result": 0
  },
  "1019": {
    "db_id": "singer",
    "question": "What are the song titles and singer names?",
    "ground_truth": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "output_sql": "SELECT T2\tTitle, T2.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.\"Singer_Id\" = T1 .\"Singer_id\";",
    "output_result": 0
  },
  "1020": {
    "db_id": "singer",
    "question": "Show distinct names of singers that have songs with sales more than 300000.",
    "ground_truth": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "output_sql": "SELECT DISTINCT T2.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.\"Singer_Id\" = T1.\"\"\"Singer ID\"\"\" WHERE T2.\"Sales\" > 500.0;",
    "output_result": 0
  },
  "1021": {
    "db_id": "singer",
    "question": "what are the different names of the singers that have sales more than 300000?",
    "ground_truth": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "output_sql": "SELECT DISTINCT T2.Title FROM singer AS T1 JOIN song AS T2 ON T1.\"Singer_Id\" = T1 .\"Singer_id\" WHERE T2.\"Sales\" > 500;",
    "output_result": 0
  },
  "1022": {
    "db_id": "singer",
    "question": "Show the names of singers that have more than one song.",
    "ground_truth": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "output_sql": "SELECT T1.NAME FROM singer AS T１ JOIN song ON T1.singer_id = song.singer_Id GROUP BY T1.name HAVING COUNT(*)>1;",
    "output_result": 0
  },
  "1023": {
    "db_id": "singer",
    "question": "What are the names of the singers that have more than one songs?",
    "ground_truth": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "output_sql": "SELECT T1.NAME FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T２.singer_Id GROUP BY T1.name HAVING COUNT(*)>1;",
    "output_result": 0
  },
  "1024": {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs.",
    "ground_truth": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "output_sql": "SELECT T1.NAME, SUM(T2.sales) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T２.singer_ID GROUP BY T1.name;",
    "output_result": 0
  },
  "1025": {
    "db_id": "singer",
    "question": "For each singer name, what is the total sales for their songs?",
    "ground_truth": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "output_sql": "SELECT T1.\"Name\", SUM(T2.\"Sales\") AS Total_Sales FROM \"sänger\" AS T1 JOIN \"song” AS T2 ON T1.“Singer_Id” = T₂.“SINGER_ID” GROUP BY T1.”Name”;",
    "output_result": 0
  },
  "1026": {
    "db_id": "singer",
    "question": "List the name of singers that do not have any song.",
    "ground_truth": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" WHERE \"SINGER_ID\" NOT IN (SELECT \"Sänger_ID\" FROM \"song\");",
    "output_result": 0
  },
  "1027": {
    "db_id": "singer",
    "question": "What is the sname of every sing that does not have any song?",
    "ground_truth": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "output_sql": "SELECT \"Name\" FROM \"sINGER\" WHERE \"SINGER_ID\" NOT IN (SELECT \"Sänger_ID\" FROM \"song\");",
    "output_result": 0
  },
  "1028": {
    "db_id": "singer",
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "ground_truth": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "output_sql": "SELECT \"CitizenShip\" FROM \"snger\" WHERE \"Birth Year\" <1935 INTERSECT SELECT \"Citzenship\" FROM \"senger\" WHERE \"Birth_Year\" >1985;",
    "output_result": 0
  },
  "1029": {
    "db_id": "singer",
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "ground_truth": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "output_sql": "SELECT Citizenship FROM singer WHERE Birth_Year<1965 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Yea>1985;",
    "output_result": 0
  },
  "1030": {
    "db_id": "real_estate_properties",
    "question": "How many available features are there in total?",
    "ground_truth": "SELECT count(*) FROM Other_Available_Features",
    "output_sql": "SELECT COUNT(*) FROM `Other_AVAILABLE_Features`;",
    "output_result": 1
  },
  "1031": {
    "db_id": "real_estate_properties",
    "question": "What is the feature type name of feature AirCon?",
    "ground_truth": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "output_sql": "SELECT T2(feature_type_name) FROM `Other_AVAILABLE_Features`.`feature_name` JOIN `RefFeatureTypes` AS T2 ON T1.`feature_type_Code` = T1`.`feature_type_CODE` WHERE T1.features_name = 'AirCon';",
    "output_result": 0
  },
  "1032": {
    "db_id": "real_estate_properties",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "ground_truth": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "output_sql": "SELECT T2\tproperty_type_description FROM Properties AS T1 JOIN Ref_Property_TYPES AS T2 ON T1\tproperty_type_code\t=\tT2\tpropertyType_code ORDER BY T1(property_type_code);",
    "output_result": 0
  },
  "1033": {
    "db_id": "real_estate_properties",
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "ground_truth": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "output_sql": "SELECT property_name FROM Properties WHERE property_type_code = 'House' UNION SELECT propertyName FROMProperties WHERE\tproperty_type_code\t= 'Apartment' AND room_count\t> 1;",
    "output_result": 0
  }
}