{
    "0": {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "ground_truth": "SELECT count(*) FROM singer",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM singer;"
        ]
    },
    "1": {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "ground_truth": "SELECT count(*) FROM singer",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS total_singers FROM singer;"
        ]
    },
    "2": {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "ground_truth": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;"
        ]
    },
    "3": {
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "ground_truth": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;"
        ]
    },
    "4": {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "ground_truth": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';"
        ]
    },
    "5": {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "ground_truth": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'French';"
        ],
        "rule_sql": [
            "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'French'"
        ]
    },
    "6": {
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "ground_truth": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)"
        ]
    },
    "7": {
        "db_id": "concert_singer",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "ground_truth": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Song_Name, s.Song_release_year \nFROM singer s\nWHERE s.Age = (SELECT MIN(Age) FROM singer)"
        ]
    },
    "8": {
        "db_id": "concert_singer",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "ground_truth": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT Country FROM singer WHERE Age > 20"
        ]
    },
    "9": {
        "db_id": "concert_singer",
        "question": "What are  the different countries with singers above age 20?",
        "ground_truth": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT Country FROM singer WHERE Age > 20"
        ]
    },
    "10": {
        "db_id": "concert_singer",
        "question": "Show all countries and the number of singers in each country.",
        "ground_truth": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Country, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Country;"
        ]
    },
    "11": {
        "db_id": "concert_singer",
        "question": "How many singers are from each country?",
        "ground_truth": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;"
        ]
    },
    "12": {
        "db_id": "concert_singer",
        "question": "List all song names by singers above the average age.",
        "ground_truth": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Song_Name \nFROM singer s\nWHERE s.Age > (SELECT AVG(Age) FROM singer);"
        ]
    },
    "13": {
        "db_id": "concert_singer",
        "question": "What are all the song names by singers who are older than average?",
        "ground_truth": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Song_Name \nFROM singer s\nWHERE s.Age > (SELECT AVG(Age) FROM singer)"
        ]
    },
    "14": {
        "db_id": "concert_singer",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "ground_truth": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000"
        ]
    },
    "15": {
        "db_id": "concert_singer",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "ground_truth": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;"
        ]
    },
    "16": {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "ground_truth": "select max(capacity), average from stadium",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;"
        ],
        "rule_sql": [
            "SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;"
        ]
    },
    "17": {
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "ground_truth": "select avg(capacity) ,  max(capacity) from stadium",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;"
        ]
    },
    "18": {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "ground_truth": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;"
        ]
    },
    "19": {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "ground_truth": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;"
        ]
    },
    "20": {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "ground_truth": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';"
        ]
    },
    "21": {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "ground_truth": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';"
        ]
    },
    "22": {
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "ground_truth": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Name\nORDER BY NumberOfConcerts DESC;"
        ],
        "rule_sql": [
            "SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Name\nORDER BY NumberOfConcerts DESC;"
        ]
    },
    "23": {
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "ground_truth": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.Stadium_ID, s.Location, s.Name, COUNT(c.concert_ID) AS concert_count\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Location, s.Name\nORDER BY s.Stadium_ID;"
        ],
        "rule_sql": [
            "SELECT s.Stadium_ID, s.Location, s.Name, COUNT(c.concert_ID) AS number_of_concerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Location, s.Name\nORDER BY s.Stadium_ID;"
        ]
    },
    "24": {
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "ground_truth": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year >= '2014'\nGROUP BY s.Stadium_ID\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;"
        ]
    },
    "25": {
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "ground_truth": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year > '2013'\nGROUP BY s.Stadium_ID\nORDER BY COUNT(c.concert_ID) DESC\nLIMIT 1;"
        ]
    },
    "26": {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "ground_truth": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;"
        ]
    },
    "27": {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "ground_truth": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;"
        ]
    },
    "28": {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "ground_truth": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name \nFROM stadium s \nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.concert_ID IS NULL;"
        ]
    },
    "29": {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "ground_truth": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name \nFROM stadium s \nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.concert_ID IS NULL;"
        ]
    },
    "30": {
        "db_id": "concert_singer",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "ground_truth": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s1.Country \nFROM singer s1\nJOIN singer s2 ON s1.Country = s2.Country\nWHERE s1.Age > 40 AND s2.Age < 30;"
        ]
    },
    "31": {
        "db_id": "concert_singer",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "ground_truth": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')"
        ]
    },
    "32": {
        "db_id": "concert_singer",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "ground_truth": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name \nFROM stadium s \nWHERE s.Stadium_ID NOT IN (\n    SELECT DISTINCT c.Stadium_ID \n    FROM concert c \n    WHERE c.Year = '2014'\n)"
        ]
    },
    "33": {
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "ground_truth": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS number_of_singers\nFROM concert c\nLEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme;"
        ]
    },
    "34": {
        "db_id": "concert_singer",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "ground_truth": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS number_of_singers\nFROM concert c\nLEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY c.concert_ID, c.concert_Name, c.Theme;"
        ]
    },
    "35": {
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "ground_truth": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.Name, COUNT(sic.concert_ID) AS NumberOfConcerts\nFROM singer s\nLEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nGROUP BY s.Singer_ID, s.Name\nORDER BY NumberOfConcerts DESC;"
        ],
        "rule_sql": []
    },
    "36": {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "ground_truth": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.Name, COUNT(sic.concert_ID) AS NumberOfConcerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID, s.Name ORDER BY NumberOfConcerts DESC;"
        ],
        "rule_sql": []
    },
    "37": {
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "ground_truth": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Name \nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014'\nORDER BY s.Name;"
        ]
    },
    "38": {
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "ground_truth": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Name \nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';"
        ]
    },
    "39": {
        "db_id": "concert_singer",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "ground_truth": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'"
        ]
    },
    "40": {
        "db_id": "concert_singer",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "ground_truth": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';"
        ]
    },
    "41": {
        "db_id": "concert_singer",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "ground_truth": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Name, s.Location \nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2014'\nAND s.Stadium_ID IN (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year = '2015'\n)"
        ]
    },
    "42": {
        "db_id": "concert_singer",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "ground_truth": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2014'\nAND s.Stadium_ID IN (\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = '2015'\n)"
        ]
    },
    "43": {
        "db_id": "concert_singer",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "ground_truth": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS number_of_concerts\nFROM concert c\nJOIN stadium s ON c.Stadium_ID = s.Stadium_ID\nWHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium)"
        ]
    },
    "44": {
        "db_id": "concert_singer",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "ground_truth": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS number_of_concerts\nFROM concert c\nJOIN stadium s ON c.Stadium_ID = s.Stadium_ID\nWHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium)"
        ]
    },
    "45": {
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "ground_truth": "SELECT count(*) FROM pets WHERE weight  >  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Pets WHERE weight > 10"
        ]
    },
    "46": {
        "db_id": "pets_1",
        "question": "How many pets have a greater weight than 10?",
        "ground_truth": "SELECT count(*) FROM pets WHERE weight  >  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Pets WHERE weight > 10"
        ]
    },
    "47": {
        "db_id": "pets_1",
        "question": "Find the weight of the youngest dog.",
        "ground_truth": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;"
        ]
    },
    "48": {
        "db_id": "pets_1",
        "question": "How much does the youngest dog weigh?",
        "ground_truth": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;"
        ]
    },
    "49": {
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "ground_truth": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;"
        ],
        "rule_sql": []
    },
    "50": {
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "ground_truth": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;"
        ],
        "rule_sql": []
    },
    "51": {
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20.",
        "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS num_pets\nFROM Has_Pet hp\nJOIN Student s ON hp.StuID = s.StuID\nWHERE s.Age > 20"
        ]
    },
    "52": {
        "db_id": "pets_1",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Has_Pet hp\nJOIN Student s ON hp.StuID = s.StuID\nWHERE s.Age > 20"
        ]
    },
    "53": {
        "db_id": "pets_1",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Pets p\nJOIN Has_Pet hp ON p.PetID = hp.PetID\nJOIN Student s ON hp.StuID = s.StuID\nWHERE p.PetType = 'dog' AND s.Sex = 'F'"
        ]
    },
    "54": {
        "db_id": "pets_1",
        "question": "How many dog pets are raised by female students?",
        "ground_truth": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Pets p\nJOIN Has_Pet hp ON p.PetID = hp.PetID\nJOIN Student s ON hp.StuID = s.StuID\nWHERE p.PetType = 'dog' AND s.Sex = 'F'"
        ]
    },
    "55": {
        "db_id": "pets_1",
        "question": "Find the number of distinct type of pets.",
        "ground_truth": "SELECT count(DISTINCT pettype) FROM pets",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT PetType) FROM Pets;"
        ]
    },
    "56": {
        "db_id": "pets_1",
        "question": "How many different types of pet are there?",
        "ground_truth": "SELECT count(DISTINCT pettype) FROM pets",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT PetType) FROM Pets;"
        ]
    },
    "57": {
        "db_id": "pets_1",
        "question": "Find the first name of students who have cat or dog pet.",
        "ground_truth": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType IN ('cat', 'dog')"
        ]
    },
    "58": {
        "db_id": "pets_1",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "ground_truth": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType IN ('cat', 'dog')"
        ]
    },
    "59": {
        "db_id": "pets_1",
        "question": "Find the first name of students who have both cat and dog pets .",
        "ground_truth": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp1 ON s.StuID = hp1.StuID\nJOIN Pets p1 ON hp1.PetID = p1.PetID AND p1.PetType = 'cat'\nJOIN Has_Pet hp2 ON s.StuID = hp2.StuID\nJOIN Pets p2 ON hp2.PetID = p2.PetID AND p2.PetType = 'dog';"
        ]
    },
    "60": {
        "db_id": "pets_1",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "ground_truth": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp1 ON s.StuID = hp1.StuID\nJOIN Pets p1 ON hp1.PetID = p1.PetID AND p1.PetType = 'cat'\nJOIN Has_Pet hp2 ON s.StuID = hp2.StuID\nJOIN Pets p2 ON hp2.PetID = p2.PetID AND p2.PetType = 'dog';"
        ]
    },
    "61": {
        "db_id": "pets_1",
        "question": "Find the major and age of students who do not have a cat pet.",
        "ground_truth": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Major, s.Age\nFROM Student s\nWHERE s.StuID NOT IN (\n    SELECT hp.StuID\n    FROM Has_Pet hp\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n)"
        ]
    },
    "62": {
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "ground_truth": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Major, s.Age\nFROM Student s\nWHERE s.StuID NOT IN (\n    SELECT hp.StuID\n    FROM Has_Pet hp\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n)\nORDER BY s.Major, s.Age;"
        ]
    },
    "63": {
        "db_id": "pets_1",
        "question": "Find the id of students who do not have a cat pet.",
        "ground_truth": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))"
        ]
    },
    "64": {
        "db_id": "pets_1",
        "question": "What are the ids of the students who do not own cats as pets?",
        "ground_truth": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.StuID\nFROM Student s\nWHERE s.StuID NOT IN (\n    SELECT hp.StuID\n    FROM Has_Pet hp\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n)"
        ]
    },
    "65": {
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "ground_truth": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Fname, s.Age\nFROM Student s\nWHERE s.StuID IN (\n    SELECT hp.StuID\n    FROM Has_Pet hp\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'dog'\n)\nAND s.StuID NOT IN (\n    SELECT hp.StuID\n    FROM Has_Pet hp\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n);"
        ]
    },
    "66": {
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "ground_truth": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog'\nAND s.StuID NOT IN (\n    SELECT s2.StuID\n    FROM Student s2\n    JOIN Has_Pet hp2 ON s2.StuID = hp2.StuID\n    JOIN Pets p2 ON hp2.PetID = p2.PetID\n    WHERE p2.PetType = 'cat'\n)"
        ],
        "rule_sql": []
    },
    "67": {
        "db_id": "pets_1",
        "question": "Find the type and weight of the youngest pet.",
        "ground_truth": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;"
        ]
    },
    "68": {
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "ground_truth": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;"
        ]
    },
    "69": {
        "db_id": "pets_1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "ground_truth": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT PetID, weight FROM Pets WHERE pet_age > 1;"
        ]
    },
    "70": {
        "db_id": "pets_1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "ground_truth": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT PetID, weight FROM Pets WHERE pet_age > 1"
        ]
    },
    "71": {
        "db_id": "pets_1",
        "question": "Find the average and maximum age for each type of pet.",
        "ground_truth": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.PetType, AVG(p.pet_age) AS average_age, MAX(p.pet_age) AS maximum_age FROM Pets p GROUP BY p.PetType"
        ],
        "rule_sql": []
    },
    "72": {
        "db_id": "pets_1",
        "question": "What is the average and maximum age for each pet type?",
        "ground_truth": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;"
        ],
        "rule_sql": []
    },
    "73": {
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "ground_truth": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;"
        ],
        "rule_sql": []
    },
    "74": {
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "ground_truth": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;"
        ],
        "rule_sql": []
    },
    "75": {
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a pet.",
        "ground_truth": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Fname, s.Age\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID;"
        ]
    },
    "76": {
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "ground_truth": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Fname, s.Age\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nORDER BY s.Fname, s.Age;"
        ]
    },
    "77": {
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "ground_truth": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.PetID\nFROM Pets p\nJOIN Has_Pet hp ON p.PetID = hp.PetID\nJOIN Student s ON hp.StuID = s.StuID\nWHERE s.LName = 'Smith';"
        ]
    },
    "78": {
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "ground_truth": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.PetID \nFROM Pets p\nJOIN Has_Pet hp ON p.PetID = hp.PetID\nJOIN Student s ON hp.StuID = s.StuID\nWHERE s.LName = 'Smith';"
        ]
    },
    "79": {
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "ground_truth": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.StuID, COUNT(hp.PetID) AS NumberOfPets\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nGROUP BY s.StuID\nHAVING COUNT(hp.PetID) > 0;"
        ],
        "rule_sql": []
    },
    "80": {
        "db_id": "pets_1",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "ground_truth": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.StuID, COUNT(hp.PetID) AS NumberOfPets\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nGROUP BY s.StuID\nORDER BY s.StuID;"
        ],
        "rule_sql": []
    },
    "81": {
        "db_id": "pets_1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "ground_truth": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Fname, s.Sex\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nGROUP BY s.StuID, s.Fname, s.Sex\nHAVING COUNT(hp.PetID) > 1;"
        ]
    },
    "82": {
        "db_id": "pets_1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "ground_truth": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Fname, s.Sex\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nGROUP BY s.StuID, s.Fname, s.Sex\nHAVING COUNT(hp.PetID) > 1;"
        ]
    },
    "83": {
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "ground_truth": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.LName \nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat' AND p.pet_age = 3;"
        ]
    },
    "84": {
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "ground_truth": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.LName \nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat' AND p.pet_age = 3;"
        ]
    },
    "85": {
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "ground_truth": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet)"
        ]
    },
    "86": {
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "ground_truth": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(s.Age) AS average_age\nFROM Student s\nWHERE s.StuID NOT IN (\n    SELECT DISTINCT StuID\n    FROM Has_Pet\n)"
        ]
    },
    "87": {
        "db_id": "car_1",
        "question": "How many continents are there?",
        "ground_truth": "SELECT count(*) FROM CONTINENTS;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM continents;"
        ]
    },
    "88": {
        "db_id": "car_1",
        "question": "What is the number of continents?",
        "ground_truth": "SELECT count(*) FROM CONTINENTS;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS NumberOfContinents FROM continents;"
        ]
    },
    "89": {
        "db_id": "car_1",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "ground_truth": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries \nFROM continents c \nLEFT JOIN countries co ON c.ContId = co.Continent \nGROUP BY c.ContId, c.Continent \nORDER BY c.ContId;"
        ]
    },
    "90": {
        "db_id": "car_1",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "ground_truth": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount \nFROM continents c \nLEFT JOIN countries co ON c.ContId = co.Continent \nGROUP BY c.ContId, c.Continent \nORDER BY c.ContId;"
        ]
    },
    "91": {
        "db_id": "car_1",
        "question": "How many countries are listed?",
        "ground_truth": "SELECT count(*) FROM COUNTRIES;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM countries;"
        ]
    },
    "92": {
        "db_id": "car_1",
        "question": "How many countries exist?",
        "ground_truth": "SELECT count(*) FROM COUNTRIES;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM countries;"
        ]
    },
    "93": {
        "db_id": "car_1",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "ground_truth": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS NumberOfModels\nFROM car_makers cm\nLEFT JOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName\nORDER BY cm.FullName;"
        ]
    },
    "94": {
        "db_id": "car_1",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "ground_truth": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nLEFT JOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName\nORDER BY cm.Id;"
        ],
        "rule_sql": []
    },
    "95": {
        "db_id": "car_1",
        "question": "Which model of the car has the minimum horsepower?",
        "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cn.Model \nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Horsepower = (SELECT MIN(CAST(Horsepower AS NUMERIC)) FROM cars_data WHERE Horsepower != 'NULL' AND Horsepower != '');"
        ],
        "rule_sql": []
    },
    "96": {
        "db_id": "car_1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cn.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Horsepower = (SELECT MIN(CAST(Horsepower AS NUMERIC)) FROM cars_data WHERE Horsepower != '')"
        ],
        "rule_sql": []
    },
    "97": {
        "db_id": "car_1",
        "question": "Find the model of the car whose weight is below the average weight.",
        "ground_truth": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cn.Model \nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data)"
        ]
    },
    "98": {
        "db_id": "car_1",
        "question": "What is the model for the car with a weight smaller than the average?",
        "ground_truth": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data)"
        ]
    },
    "99": {
        "db_id": "car_1",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "ground_truth": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970;"
        ]
    },
    "100": {
        "db_id": "car_1",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "ground_truth": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970\nORDER BY cm.Maker;"
        ]
    },
    "101": {
        "db_id": "car_1",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "ground_truth": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cn.Make, cd.Year \nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Year = (SELECT MIN(Year) FROM cars_data)\nORDER BY cn.Make;"
        ]
    },
    "102": {
        "db_id": "car_1",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "ground_truth": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Maker, cd.Year\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cd.Year = (SELECT MIN(Year) FROM cars_data)\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "103": {
        "db_id": "car_1",
        "question": "Which distinct car models are the produced after 1980?",
        "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT cn.Model\nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year > 1980\nORDER BY cn.Model;"
        ]
    },
    "104": {
        "db_id": "car_1",
        "question": "What are the different models for the cards produced after 1980?",
        "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT ml.Model \nFROM model_list ml\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year > 1980\nORDER BY ml.Model;"
        ]
    },
    "105": {
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "ground_truth": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Continent, COUNT(DISTINCT cm.Id) AS CountOfCarMakers\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nLEFT JOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent\nORDER BY c.Continent;"
        ],
        "rule_sql": []
    },
    "106": {
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "ground_truth": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Continent, COUNT(DISTINCT cm.Id) AS NumberOfCarMakers\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nLEFT JOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent\nORDER BY c.Continent;"
        ],
        "rule_sql": []
    },
    "107": {
        "db_id": "car_1",
        "question": "Which of the countries has the most car makers? List the country name.",
        "ground_truth": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryId, c.CountryName\nORDER BY COUNT(cm.Id) DESC\nLIMIT 1;"
        ]
    },
    "108": {
        "db_id": "car_1",
        "question": "What is the name of the country with the most car makers?",
        "ground_truth": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryId, c.CountryName\nORDER BY COUNT(cm.Id) DESC\nLIMIT 1;"
        ]
    },
    "109": {
        "db_id": "car_1",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "ground_truth": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.FullName, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName\nORDER BY ModelCount DESC;"
        ],
        "rule_sql": []
    },
    "110": {
        "db_id": "car_1",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "ground_truth": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumberOfModels\nFROM car_makers cm\nLEFT JOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName\nORDER BY cm.Id;"
        ],
        "rule_sql": []
    },
    "111": {
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "ground_truth": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cd.Accelerate \nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cn.Make = 'amc hornet sportabout (sw)'"
        ]
    },
    "112": {
        "db_id": "car_1",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "ground_truth": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Accelerate \nFROM cars_data c\nJOIN car_names cn ON c.Id = cn.MakeId\nWHERE cn.Make = 'amc hornet sportabout (sw)'"
        ]
    },
    "113": {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM car_makers cm\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'France';"
        ],
        "rule_sql": []
    },
    "114": {
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT cm.Id) \nFROM car_makers cm\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'France'"
        ],
        "rule_sql": []
    },
    "115": {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "ground_truth": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'USA';"
        ],
        "rule_sql": []
    },
    "116": {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "ground_truth": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'United States'"
        ],
        "rule_sql": []
    },
    "117": {
        "db_id": "car_1",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "ground_truth": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;"
        ]
    },
    "118": {
        "db_id": "car_1",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "ground_truth": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4"
        ]
    },
    "119": {
        "db_id": "car_1",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "ground_truth": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"
        ]
    },
    "120": {
        "db_id": "car_1",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "ground_truth": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"
        ]
    },
    "121": {
        "db_id": "car_1",
        "question": "What are all the makers and models?",
        "ground_truth": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker ORDER BY cm.Maker, ml.Model;"
        ],
        "rule_sql": []
    },
    "122": {
        "db_id": "car_1",
        "question": "What are the makers and models?",
        "ground_truth": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;"
        ],
        "rule_sql": []
    },
    "123": {
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id.",
        "ground_truth": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.CountryId, c.CountryName \nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nORDER BY c.CountryName;"
        ],
        "rule_sql": []
    },
    "124": {
        "db_id": "car_1",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "ground_truth": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.CountryId, c.CountryName \nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE cm.Id IS NOT NULL\nORDER BY c.CountryId;"
        ],
        "rule_sql": []
    },
    "125": {
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150"
        ]
    },
    "126": {
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150"
        ]
    },
    "127": {
        "db_id": "car_1",
        "question": "What is the average weight of cars each year?",
        "ground_truth": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY Year;"
        ],
        "rule_sql": []
    },
    "128": {
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?",
        "ground_truth": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Year, AVG(Weight) AS AverageWeight, AVG(Year) AS AverageYear FROM cars_data GROUP BY Year ORDER BY Year;"
        ],
        "rule_sql": []
    },
    "129": {
        "db_id": "car_1",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "ground_truth": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.CountryName \nFROM countries c\nJOIN continents cont ON c.Continent = cont.ContId\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE cont.Continent = 'Europe'\nGROUP BY c.CountryName\nHAVING COUNT(cm.Id) >= 3;"
        ],
        "rule_sql": []
    },
    "130": {
        "db_id": "car_1",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "ground_truth": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE c.Continent = (\n    SELECT ContId FROM continents WHERE Continent = 'Europe'\n)\nGROUP BY c.CountryId, c.CountryName\nHAVING COUNT(cm.Id) >= 3\nORDER BY c.CountryName;"
        ],
        "rule_sql": []
    },
    "131": {
        "db_id": "car_1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "ground_truth": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(cd.Horsepower) AS MaxHorsepower, cn.Make\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Cylinders = 3\nGROUP BY cn.Make\nORDER BY MaxHorsepower DESC\nLIMIT 1;"
        ]
    },
    "132": {
        "db_id": "car_1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "ground_truth": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(CAST(cd.Horsepower AS REAL)) AS MaxHorsepower, cn.Make\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Cylinders = 3\nGROUP BY cn.Make\nORDER BY MaxHorsepower DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "133": {
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cn.Model \nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.MPG = (SELECT MAX(CAST(MPG AS REAL)) FROM cars_data)\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "134": {
        "db_id": "car_1",
        "question": "What is the car model with the highest mpg ?",
        "ground_truth": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cn.Model \nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nORDER BY CAST(cd.MPG AS REAL) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "135": {
        "db_id": "car_1",
        "question": "What is the average horsepower of the cars before 1980?",
        "ground_truth": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(CAST(Horsepower AS REAL)) AS AverageHorsepower FROM cars_data WHERE Year < 1980"
        ]
    },
    "136": {
        "db_id": "car_1",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "ground_truth": "select avg(horsepower) from cars_data where year  <  1980;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(CAST(Horsepower AS REAL)) AS AverageHorsepower FROM cars_data WHERE Year < 1980"
        ]
    },
    "137": {
        "db_id": "car_1",
        "question": "What is the average edispl of the cars of model volvo?",
        "ground_truth": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(cd.Edispl) AS average_edispl\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nWHERE ml.Model = 'volvo';"
        ]
    },
    "138": {
        "db_id": "car_1",
        "question": "What is the average edispl for all volvos?",
        "ground_truth": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(cd.Edispl) AS average_edispl\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'volvo';"
        ]
    },
    "139": {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "ground_truth": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders ORDER BY Cylinders;"
        ],
        "rule_sql": []
    },
    "140": {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "ground_truth": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders ORDER BY Cylinders;"
        ],
        "rule_sql": []
    },
    "141": {
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?",
        "ground_truth": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ml.Model, COUNT(cn.MakeId) AS version_count\nFROM model_list ml\nJOIN car_names cn ON ml.Model = cn.Model\nGROUP BY ml.Model\nORDER BY version_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "142": {
        "db_id": "car_1",
        "question": "What model has the most different versions?",
        "ground_truth": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT ml.Model\nFROM model_list ml\nJOIN car_names cn ON ml.Model = cn.Model\nGROUP BY ml.Model\nORDER BY COUNT(cn.MakeId) DESC\nLIMIT 1;"
        ]
    },
    "143": {
        "db_id": "car_1",
        "question": "How many cars have more than 4 cylinders?",
        "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4"
        ]
    },
    "144": {
        "db_id": "car_1",
        "question": "What is the number of cars with more than 4 cylinders?",
        "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4"
        ]
    },
    "145": {
        "db_id": "car_1",
        "question": "how many cars were produced in 1980?",
        "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM cars_data WHERE Year = 1980;"
        ]
    },
    "146": {
        "db_id": "car_1",
        "question": "In 1980, how many cars were made?",
        "ground_truth": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM cars_data \nWHERE Year = 1980"
        ]
    },
    "147": {
        "db_id": "car_1",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.FullName = 'American Motor Company';"
        ]
    },
    "148": {
        "db_id": "car_1",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "ground_truth": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'American Motor Company';"
        ],
        "rule_sql": []
    },
    "149": {
        "db_id": "car_1",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "ground_truth": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Id, cm.FullName\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName\nHAVING COUNT(ml.ModelId) > 3;"
        ],
        "rule_sql": []
    },
    "150": {
        "db_id": "car_1",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "ground_truth": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Id, cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.Maker\nHAVING COUNT(ml.ModelId) > 3;"
        ],
        "rule_sql": []
    },
    "151": {
        "db_id": "car_1",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "ground_truth": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT ml.Model\nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nLEFT JOIN car_names cn ON ml.Model = cn.Model\nLEFT JOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cm.FullName = 'General Motors' OR cd.Weight > 3500\nORDER BY ml.Model;"
        ]
    },
    "152": {
        "db_id": "car_1",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "ground_truth": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT ml.Model \nFROM model_list ml\nLEFT JOIN car_makers cm ON ml.Maker = cm.Id\nLEFT JOIN car_names cn ON ml.Model = cn.Model\nLEFT JOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;"
        ],
        "rule_sql": []
    },
    "153": {
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "ground_truth": "select distinct year from cars_data where weight between 3000 and 4000;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 ORDER BY Year;"
        ]
    },
    "154": {
        "db_id": "car_1",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "ground_truth": "select distinct year from cars_data where weight between 3000 and 4000;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c1.Year\nFROM cars_data c1\nJOIN cars_data c2 ON c1.Year = c2.Year\nWHERE c1.Weight < 4000 AND c2.Weight > 3000\nORDER BY c1.Year;"
        ]
    },
    "155": {
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "ground_truth": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1;"
        ]
    },
    "156": {
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "ground_truth": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1"
        ]
    },
    "157": {
        "db_id": "car_1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "ground_truth": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Cylinders \nFROM cars_data c\nJOIN car_names cn ON c.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nWHERE ml.Model = 'volvo'\nORDER BY c.Accelerate ASC\nLIMIT 1;"
        ]
    },
    "158": {
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "ground_truth": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Cylinders \nFROM cars_data c\nJOIN car_names cn ON c.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'volvo'\nORDER BY c.Accelerate ASC\nLIMIT 1;"
        ]
    },
    "159": {
        "db_id": "car_1",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM cars_data cd1\nWHERE cd1.Accelerate > (\n    SELECT MAX(cd2.Accelerate) \n    FROM cars_data cd2\n    WHERE cd2.Horsepower = (\n        SELECT MAX(CAST(cd3.Horsepower AS REAL)) \n        FROM cars_data cd3\n        WHERE cd3.Horsepower != '' AND cd3.Horsepower IS NOT NULL\n    )\n)"
        ],
        "rule_sql": []
    },
    "160": {
        "db_id": "car_1",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM cars_data cd1\nWHERE cd1.Accelerate > (\n    SELECT cd2.Accelerate \n    FROM cars_data cd2 \n    WHERE cd2.Horsepower = (\n        SELECT MAX(CAST(Horsepower AS REAL)) \n        FROM cars_data \n        WHERE Horsepower != '' AND Horsepower IS NOT NULL\n    )\n)"
        ],
        "rule_sql": []
    },
    "161": {
        "db_id": "car_1",
        "question": "How many countries has more than 2 car makers ?",
        "ground_truth": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM (\n    SELECT c.CountryId \n    FROM countries c\n    JOIN car_makers cm ON c.CountryId = cm.Country\n    GROUP BY c.CountryId\n    HAVING COUNT(cm.Id) > 2\n) AS countries_with_more_than_2_makers"
        ],
        "rule_sql": []
    },
    "162": {
        "db_id": "car_1",
        "question": "What is the number of countries with more than 2 car makers ?",
        "ground_truth": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM (\n    SELECT c.CountryId \n    FROM countries c\n    JOIN car_makers cm ON c.CountryId = cm.Country\n    GROUP BY c.CountryId\n    HAVING COUNT(cm.Id) > 2\n) AS countries_with_more_than_2_makers"
        ],
        "rule_sql": []
    },
    "163": {
        "db_id": "car_1",
        "question": "How many cars has over 6 cylinders?",
        "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6"
        ]
    },
    "164": {
        "db_id": "car_1",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "ground_truth": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6"
        ]
    },
    "165": {
        "db_id": "car_1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cn.Model \nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Cylinders = 4\nORDER BY CAST(cd.Horsepower AS NUMERIC) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "166": {
        "db_id": "car_1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "ground_truth": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.Model\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nJOIN model_list m ON cn.Model = m.Model\nWHERE cd.Cylinders = 4\nORDER BY CAST(cd.Horsepower AS NUMERIC) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "167": {
        "db_id": "car_1",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "ground_truth": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cn.MakeId, cn.Make \nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data WHERE Horsepower != '') \nAND cd.Cylinders <= 3\nAND cd.Horsepower != '';"
        ]
    },
    "168": {
        "db_id": "car_1",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "ground_truth": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cn.MakeId, cn.Make \nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Cylinders < 4 \nAND cd.Horsepower != (SELECT MIN(Horsepower) FROM cars_data WHERE Horsepower IS NOT NULL AND Horsepower != '')\nAND cd.Horsepower IS NOT NULL AND cd.Horsepower != '';"
        ]
    },
    "169": {
        "db_id": "car_1",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "ground_truth": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;"
        ]
    },
    "170": {
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "ground_truth": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;"
        ]
    },
    "171": {
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT ml.Model \nFROM model_list ml\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cd.Weight < 3500 \nAND cm.FullName != 'Ford Motor Company'\nORDER BY ml.Model;"
        ]
    },
    "172": {
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "ground_truth": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT ml.Model\nFROM model_list ml\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cd.Weight < 3500\nAND cm.FullName != 'Ford Motor Company'\nORDER BY ml.Model;"
        ]
    },
    "173": {
        "db_id": "car_1",
        "question": "What are the name of the countries where there is not a single car maker?",
        "ground_truth": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.CountryName \nFROM countries c \nLEFT JOIN car_makers cm ON c.CountryId = cm.Country \nWHERE cm.Id IS NULL \nORDER BY c.CountryName;"
        ]
    },
    "174": {
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?",
        "ground_truth": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.CountryName \nFROM countries c\nLEFT JOIN car_makers cm ON c.CountryId = cm.Country\nWHERE cm.Id IS NULL\nORDER BY c.CountryName;"
        ]
    },
    "175": {
        "db_id": "car_1",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "ground_truth": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Id, cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.Maker\nHAVING COUNT(ml.ModelId) >= 2\nAND COUNT(DISTINCT cm.Id) > 3\nORDER BY cm.Id;"
        ],
        "rule_sql": []
    },
    "176": {
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "ground_truth": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cm.Id, cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nGROUP BY cm.Id, cm.Maker\nHAVING COUNT(DISTINCT ml.ModelId) >= 2 AND COUNT(cn.MakeId) > 3;"
        ],
        "rule_sql": []
    },
    "177": {
        "db_id": "car_1",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "ground_truth": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.CountryId, c.CountryName \nFROM countries c\nWHERE c.CountryId IN (\n    SELECT cm.Country\n    FROM car_makers cm\n    GROUP BY cm.Country\n    HAVING COUNT(cm.Id) > 3\n) \nOR c.CountryId IN (\n    SELECT cm.Country\n    FROM car_makers cm\n    JOIN model_list ml ON cm.Id = ml.Maker\n    WHERE ml.Model = 'fiat'\n)\nORDER BY c.CountryId;"
        ]
    },
    "178": {
        "db_id": "car_1",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "ground_truth": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.CountryId, c.CountryName\nFROM countries c\nWHERE c.CountryId IN (\n    SELECT cm.Country\n    FROM car_makers cm\n    GROUP BY cm.Country\n    HAVING COUNT(cm.Id) > 3\n)\nOR c.CountryId IN (\n    SELECT cm.Country\n    FROM car_makers cm\n    JOIN model_list ml ON cm.Id = ml.Maker\n    WHERE ml.Model = 'fiat'\n)\nORDER BY c.CountryId;"
        ]
    },
    "179": {
        "db_id": "flight_2",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "ground_truth": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';"
        ]
    },
    "180": {
        "db_id": "flight_2",
        "question": "What country is Jetblue Airways affiliated with?",
        "ground_truth": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';"
        ],
        "rule_sql": []
    },
    "181": {
        "db_id": "flight_2",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "ground_truth": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';"
        ]
    },
    "182": {
        "db_id": "flight_2",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "ground_truth": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';"
        ],
        "rule_sql": []
    },
    "183": {
        "db_id": "flight_2",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "ground_truth": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';"
        ]
    },
    "184": {
        "db_id": "flight_2",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "ground_truth": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';"
        ]
    },
    "185": {
        "db_id": "flight_2",
        "question": "List the airport code and name in the city of Anthony.",
        "ground_truth": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';"
        ]
    },
    "186": {
        "db_id": "flight_2",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "ground_truth": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';"
        ]
    },
    "187": {
        "db_id": "flight_2",
        "question": "How many airlines do we have?",
        "ground_truth": "SELECT count(*) FROM AIRLINES",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM airlines;"
        ]
    },
    "188": {
        "db_id": "flight_2",
        "question": "What is the total number of airlines?",
        "ground_truth": "SELECT count(*) FROM AIRLINES",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM airlines;"
        ]
    },
    "189": {
        "db_id": "flight_2",
        "question": "How many airports do we have?",
        "ground_truth": "SELECT count(*) FROM AIRPORTS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM airports;"
        ]
    },
    "190": {
        "db_id": "flight_2",
        "question": "Return the number of  airports.",
        "ground_truth": "SELECT count(*) FROM AIRPORTS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM airports;"
        ]
    },
    "191": {
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights;"
        ]
    },
    "192": {
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "ground_truth": "SELECT count(*) FROM FLIGHTS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights;"
        ]
    },
    "193": {
        "db_id": "flight_2",
        "question": "Which airline has abbreviation 'UAL'?",
        "ground_truth": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';"
        ]
    },
    "194": {
        "db_id": "flight_2",
        "question": "Give the airline with abbreviation 'UAL'.",
        "ground_truth": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM airlines WHERE Abbreviation = 'UAL';"
        ],
        "rule_sql": []
    },
    "195": {
        "db_id": "flight_2",
        "question": "How many airlines are from USA?",
        "ground_truth": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM airlines WHERE Country = 'USA';"
        ]
    },
    "196": {
        "db_id": "flight_2",
        "question": "Return the number of airlines in the USA.",
        "ground_truth": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM airlines WHERE Country = 'USA';"
        ]
    },
    "197": {
        "db_id": "flight_2",
        "question": "Which city and country is the Alton airport at?",
        "ground_truth": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT City, Country FROM airports WHERE AirportName = 'Alton';"
        ]
    },
    "198": {
        "db_id": "flight_2",
        "question": "Give the city and country for the Alton airport.",
        "ground_truth": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT City, Country FROM airports WHERE AirportName = 'Alton';"
        ]
    },
    "199": {
        "db_id": "flight_2",
        "question": "What is the airport name for airport 'AKO'?",
        "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'"
        ]
    },
    "200": {
        "db_id": "flight_2",
        "question": "Return the name of the airport with code 'AKO'.",
        "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';"
        ]
    },
    "201": {
        "db_id": "flight_2",
        "question": "What are airport names at City 'Aberdeen'?",
        "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AirportName FROM airports WHERE City = 'Aberdeen';"
        ]
    },
    "202": {
        "db_id": "flight_2",
        "question": "What are the names of airports in Aberdeen?",
        "ground_truth": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AirportName FROM airports WHERE City = 'Aberdeen';"
        ]
    },
    "203": {
        "db_id": "flight_2",
        "question": "How many flights depart from 'APG'?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'"
        ]
    },
    "204": {
        "db_id": "flight_2",
        "question": "Count the number of flights departing from 'APG'.",
        "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';"
        ]
    },
    "205": {
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';"
        ]
    },
    "206": {
        "db_id": "flight_2",
        "question": "Count the number of flights into ATO.",
        "ground_truth": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';"
        ]
    },
    "207": {
        "db_id": "flight_2",
        "question": "How many flights depart from City Aberdeen?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';"
        ]
    },
    "208": {
        "db_id": "flight_2",
        "question": "Return the number of flights departing from Aberdeen.",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ';"
        ]
    },
    "209": {
        "db_id": "flight_2",
        "question": "How many flights arriving in Aberdeen city?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'"
        ]
    },
    "210": {
        "db_id": "flight_2",
        "question": "Return the number of flights arriving in Aberdeen.",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ';"
        ]
    },
    "211": {
        "db_id": "flight_2",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airports src ON f.SourceAirport = src.AirportCode\nJOIN airports dest ON f.DestAirport = dest.AirportCode\nWHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'"
        ]
    },
    "212": {
        "db_id": "flight_2",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airports src ON f.SourceAirport = src.AirportCode\nJOIN airports dest ON f.DestAirport = dest.AirportCode\nWHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'"
        ]
    },
    "213": {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways'"
        ]
    },
    "214": {
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'Jetblue Airways';"
        ],
        "rule_sql": []
    },
    "215": {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'"
        ]
    },
    "216": {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airlines a ON f.Airline = a.uid\nWHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'"
        ]
    },
    "217": {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'"
        ]
    },
    "218": {
        "db_id": "flight_2",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "ground_truth": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'"
        ]
    },
    "219": {
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airlines a ON f.Airline = a.uid\nJOIN airports ap ON f.DestAirport = ap.AirportCode\nWHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'"
        ]
    },
    "220": {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "ground_truth": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airlines a ON f.Airline = a.uid\nJOIN airports ap ON f.DestAirport = ap.AirportCode\nWHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'"
        ]
    },
    "221": {
        "db_id": "flight_2",
        "question": "Which city has most number of arriving flights?",
        "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.City, COUNT(*) as arriving_flights\nFROM flights f\nJOIN airports a ON f.DestAirport = a.AirportCode\nGROUP BY a.City\nORDER BY arriving_flights DESC\nLIMIT 1;"
        ]
    },
    "222": {
        "db_id": "flight_2",
        "question": "Which city has the most frequent destination airport?",
        "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.City\nFROM airports a\nJOIN flights f ON a.AirportCode = f.DestAirport\nGROUP BY a.City\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "223": {
        "db_id": "flight_2",
        "question": "Which city has most number of departing flights?",
        "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.City, COUNT(*) AS DepartureCount\nFROM flights f\nJOIN airports a ON f.SourceAirport = a.AirportCode\nGROUP BY a.City\nORDER BY DepartureCount DESC\nLIMIT 1;"
        ]
    },
    "224": {
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?",
        "ground_truth": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.City\nFROM flights f\nJOIN airports a ON f.SourceAirport = a.AirportCode\nGROUP BY f.SourceAirport\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "225": {
        "db_id": "flight_2",
        "question": "What is the code of airport that has the highest number of flights?",
        "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount\nFROM flights\nGROUP BY SourceAirport\nUNION ALL\nSELECT DestAirport AS AirportCode, COUNT(*) AS FlightCount\nFROM flights\nGROUP BY DestAirport\nORDER BY FlightCount DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "226": {
        "db_id": "flight_2",
        "question": "What is the airport code of the airport with the most flights?",
        "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount\nFROM flights\nGROUP BY SourceAirport\nUNION ALL\nSELECT DestAirport AS AirportCode, COUNT(*) AS FlightCount\nFROM flights\nGROUP BY DestAirport\nORDER BY FlightCount DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "227": {
        "db_id": "flight_2",
        "question": "What is the code of airport that has fewest number of flights?",
        "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SourceAirport AS AirportCode\nFROM flights\nGROUP BY SourceAirport\nHAVING COUNT(*) = (\n    SELECT MIN(flight_count)\n    FROM (\n        SELECT COUNT(*) AS flight_count\n        FROM flights\n        GROUP BY SourceAirport\n    )\n)\nUNION\nSELECT DestAirport AS AirportCode\nFROM flights\nGROUP BY DestAirport\nHAVING COUNT(*) = (\n    SELECT MIN(flight_count)\n    FROM (\n        SELECT COUNT(*) AS flight_count\n        FROM flights\n        GROUP BY DestAirport\n    )\n);"
        ],
        "rule_sql": []
    },
    "228": {
        "db_id": "flight_2",
        "question": "Give the code of the airport with the least flights.",
        "ground_truth": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SourceAirport AS AirportCode\nFROM flights\nGROUP BY SourceAirport\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "229": {
        "db_id": "flight_2",
        "question": "Which airline has most number of flights?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.Airline, COUNT(*) as flight_count\nFROM flights f\nJOIN airlines a ON f.Airline = a.uid\nGROUP BY f.Airline\nORDER BY flight_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "230": {
        "db_id": "flight_2",
        "question": "What airline serves the most flights?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.Airline, COUNT(*) AS flight_count\nFROM flights f\nJOIN airlines a ON f.Airline = a.uid\nGROUP BY f.Airline\nORDER BY flight_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "231": {
        "db_id": "flight_2",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "ground_truth": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.Abbreviation, a.Country\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nGROUP BY a.uid, a.Abbreviation, a.Country\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "232": {
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "ground_truth": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.Abbreviation, a.Country\nFROM airlines a\nJOIN (\n    SELECT Airline, COUNT(*) as flight_count\n    FROM flights\n    GROUP BY Airline\n    ORDER BY flight_count ASC\n    LIMIT 1\n) f ON a.uid = f.Airline"
        ],
        "rule_sql": []
    },
    "233": {
        "db_id": "flight_2",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline \nFROM airlines a \nJOIN flights f ON a.uid = f.Airline \nWHERE f.SourceAirport = 'AHD'"
        ]
    },
    "234": {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with source airport AHD?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline \nFROM airlines a \nJOIN flights f ON a.uid = f.Airline \nWHERE f.SourceAirport = 'AHD';"
        ]
    },
    "235": {
        "db_id": "flight_2",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline \nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nWHERE f.DestAirport = 'AHD'"
        ]
    },
    "236": {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with destination airport AHD?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline \nFROM airlines a \nJOIN flights f ON a.uid = f.Airline \nWHERE f.DestAirport = 'AHD';"
        ]
    },
    "237": {
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline\nFROM airlines a\nJOIN flights f1 ON a.uid = f1.Airline\nJOIN flights f2 ON a.uid = f2.Airline\nWHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO';"
        ]
    },
    "238": {
        "db_id": "flight_2",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline\nFROM airlines a\nJOIN flights f1 ON a.uid = f1.Airline\nJOIN flights f2 ON a.uid = f2.Airline\nWHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO';"
        ]
    },
    "239": {
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nWHERE f.SourceAirport = 'CVO'\nAND a.uid NOT IN (\n    SELECT f2.Airline\n    FROM flights f2\n    WHERE f2.SourceAirport = 'APG'\n)"
        ]
    },
    "240": {
        "db_id": "flight_2",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nWHERE f.SourceAirport = 'CVO'\nAND a.uid NOT IN (\n    SELECT DISTINCT f2.Airline\n    FROM flights f2\n    WHERE f2.SourceAirport = 'APG'\n)"
        ]
    },
    "241": {
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights.",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nGROUP BY a.uid, a.Airline\nHAVING COUNT(*) >= 10;"
        ]
    },
    "242": {
        "db_id": "flight_2",
        "question": "Which airlines have at least 10 flights?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.Airline \nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nGROUP BY a.Airline\nHAVING COUNT(*) >= 10;"
        ]
    },
    "243": {
        "db_id": "flight_2",
        "question": "Find all airlines that have fewer than 200 flights.",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nGROUP BY a.uid, a.Airline\nHAVING COUNT(*) < 200"
        ]
    },
    "244": {
        "db_id": "flight_2",
        "question": "Which airlines have less than 200 flights?",
        "ground_truth": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nGROUP BY a.Airline\nHAVING COUNT(*) < 200"
        ]
    },
    "245": {
        "db_id": "flight_2",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'"
        ]
    },
    "246": {
        "db_id": "flight_2",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'"
        ]
    },
    "247": {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'"
        ]
    },
    "248": {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from APG.",
        "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'"
        ]
    },
    "249": {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"
        ]
    },
    "250": {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights landing at APG.",
        "ground_truth": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"
        ]
    },
    "251": {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT f.FlightNo \nFROM flights f\nJOIN airports a ON f.SourceAirport = a.AirportCode\nWHERE a.City = 'Aberdeen';"
        ]
    },
    "252": {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ'"
        ]
    },
    "253": {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';"
        ]
    },
    "254": {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "ground_truth": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT FlightNo FROM flights WHERE DestAirport = 'ABZ'"
        ]
    },
    "255": {
        "db_id": "flight_2",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "ground_truth": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airports a ON f.DestAirport = a.AirportCode\nWHERE a.City IN ('Aberdeen', 'Abilene')"
        ]
    },
    "256": {
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "ground_truth": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')"
        ]
    },
    "257": {
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out.",
        "ground_truth": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.AirportName \nFROM airports a \nLEFT JOIN flights f1 ON a.AirportCode = f1.SourceAirport \nLEFT JOIN flights f2 ON a.AirportCode = f2.DestAirport \nWHERE f1.SourceAirport IS NULL AND f2.DestAirport IS NULL;"
        ]
    },
    "258": {
        "db_id": "flight_2",
        "question": "Which airports do not have departing or arriving flights?",
        "ground_truth": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.AirportCode, a.AirportName, a.City, a.Country\nFROM airports a\nLEFT JOIN flights f1 ON a.AirportCode = f1.SourceAirport\nLEFT JOIN flights f2 ON a.AirportCode = f2.DestAirport\nWHERE f1.SourceAirport IS NULL AND f2.DestAirport IS NULL\nORDER BY a.AirportCode;"
        ],
        "rule_sql": []
    },
    "259": {
        "db_id": "employee_hire_evaluation",
        "question": "How many employees are there?",
        "ground_truth": "SELECT count(*) FROM employee",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM employee;"
        ]
    },
    "260": {
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees",
        "ground_truth": "SELECT count(*) FROM employee",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM employee;"
        ]
    },
    "261": {
        "db_id": "employee_hire_evaluation",
        "question": "Sort employee names by their age in ascending order.",
        "ground_truth": "SELECT name FROM employee ORDER BY age",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM employee ORDER BY Age ASC;"
        ]
    },
    "262": {
        "db_id": "employee_hire_evaluation",
        "question": "List the names of employees and sort in ascending order of age.",
        "ground_truth": "SELECT name FROM employee ORDER BY age",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM employee ORDER BY Age ASC;"
        ]
    },
    "263": {
        "db_id": "employee_hire_evaluation",
        "question": "What is the number of employees from each city?",
        "ground_truth": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT City, COUNT(*) AS NumberOfEmployees FROM employee GROUP BY City;"
        ],
        "rule_sql": []
    },
    "264": {
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees for each city.",
        "ground_truth": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT City, COUNT(*) AS NumberOfEmployees FROM employee GROUP BY City;"
        ],
        "rule_sql": []
    },
    "265": {
        "db_id": "employee_hire_evaluation",
        "question": "Which cities do more than one employee under age 30 come from?",
        "ground_truth": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.City\nFROM employee e\nWHERE e.Age < 30\nGROUP BY e.City\nHAVING COUNT(*) > 1;"
        ]
    },
    "266": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the cities that have more than one employee under age 30.",
        "ground_truth": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.City\nFROM employee e\nWHERE e.Age < 30\nGROUP BY e.City\nHAVING COUNT(*) > 1;"
        ]
    },
    "267": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of shops in each location.",
        "ground_truth": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;"
        ],
        "rule_sql": []
    },
    "268": {
        "db_id": "employee_hire_evaluation",
        "question": "How many shops are there in each location?",
        "ground_truth": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;"
        ],
        "rule_sql": []
    },
    "269": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "ground_truth": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;"
        ]
    },
    "270": {
        "db_id": "employee_hire_evaluation",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "ground_truth": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Manager_name, s.District FROM shop s ORDER BY s.Number_products DESC LIMIT 1;"
        ]
    },
    "271": {
        "db_id": "employee_hire_evaluation",
        "question": "find the minimum and maximum number of products of all stores.",
        "ground_truth": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;"
        ]
    },
    "272": {
        "db_id": "employee_hire_evaluation",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "ground_truth": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;"
        ]
    },
    "273": {
        "db_id": "employee_hire_evaluation",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "ground_truth": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;"
        ]
    },
    "274": {
        "db_id": "employee_hire_evaluation",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "ground_truth": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;"
        ]
    },
    "275": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "ground_truth": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"
        ]
    },
    "276": {
        "db_id": "employee_hire_evaluation",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "ground_truth": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name \nFROM shop s \nWHERE s.Number_products > (SELECT AVG(Number_products) FROM shop);"
        ]
    },
    "277": {
        "db_id": "employee_hire_evaluation",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID, e.Name\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;"
        ]
    },
    "278": {
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID, e.Name\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;"
        ]
    },
    "279": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)\nLIMIT 1;"
        ]
    },
    "280": {
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "ground_truth": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nORDER BY ev.Bonus DESC\nLIMIT 1;"
        ]
    },
    "281": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "ground_truth": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.Name\nFROM employee e\nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Employee_ID IS NULL;"
        ]
    },
    "282": {
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "ground_truth": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT e.Name\nFROM employee e\nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Employee_ID IS NULL;"
        ]
    },
    "283": {
        "db_id": "employee_hire_evaluation",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "ground_truth": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;"
        ]
    },
    "284": {
        "db_id": "employee_hire_evaluation",
        "question": "Which shop has the most employees? Give me the shop name.",
        "ground_truth": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;"
        ]
    },
    "285": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the shops that do not hire any employee.",
        "ground_truth": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name \nFROM shop s \nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID \nWHERE h.Shop_ID IS NULL;"
        ]
    },
    "286": {
        "db_id": "employee_hire_evaluation",
        "question": "Which shops run with no employees? Find the shop names",
        "ground_truth": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name \nFROM shop s \nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID \nWHERE h.Employee_ID IS NULL;"
        ]
    },
    "287": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "ground_truth": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.Name AS shop_name, COUNT(h.Employee_ID) AS number_of_employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY s.Name;"
        ],
        "rule_sql": []
    },
    "288": {
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "ground_truth": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.Name AS shop_name, COUNT(h.Employee_ID) AS number_of_employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID, s.Name\nORDER BY s.Shop_ID;"
        ],
        "rule_sql": []
    },
    "289": {
        "db_id": "employee_hire_evaluation",
        "question": "What is total bonus given in all evaluations?",
        "ground_truth": "SELECT sum(bonus) FROM evaluation",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;"
        ]
    },
    "290": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "ground_truth": "SELECT sum(bonus) FROM evaluation",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;"
        ]
    },
    "291": {
        "db_id": "employee_hire_evaluation",
        "question": "Give me all the information about hiring.",
        "ground_truth": "SELECT * FROM hiring",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT * FROM hiring;"
        ]
    },
    "292": {
        "db_id": "employee_hire_evaluation",
        "question": "What is all the information about hiring?",
        "ground_truth": "SELECT * FROM hiring",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT * FROM hiring;"
        ]
    },
    "293": {
        "db_id": "employee_hire_evaluation",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "ground_truth": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.District\nFROM shop s\nWHERE s.Number_products < 3000\nINTERSECT\nSELECT s.District\nFROM shop s\nWHERE s.Number_products > 10000;"
        ]
    },
    "294": {
        "db_id": "employee_hire_evaluation",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "ground_truth": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000\nAND s2.Number_products > 10000;"
        ]
    },
    "295": {
        "db_id": "employee_hire_evaluation",
        "question": "How many different store locations are there?",
        "ground_truth": "SELECT count(DISTINCT LOCATION) FROM shop",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Location) FROM shop;"
        ]
    },
    "296": {
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of distinct store locations.",
        "ground_truth": "SELECT count(DISTINCT LOCATION) FROM shop",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Location) FROM shop;"
        ]
    },
    "297": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents do we have?",
        "ground_truth": "SELECT count(*) FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Documents;"
        ]
    },
    "298": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents.",
        "ground_truth": "SELECT count(*) FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Documents;"
        ]
    },
    "299": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "ground_truth": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID, Document_Name, Document_Description FROM Documents;"
        ]
    },
    "300": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, names, and descriptions for all documents?",
        "ground_truth": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID, Document_Name, Document_Description FROM Documents;"
        ]
    },
    "301": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "ground_truth": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'"
        ]
    },
    "302": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "ground_truth": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'"
        ]
    },
    "303": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "ground_truth": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'"
        ]
    },
    "304": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "ground_truth": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';"
        ]
    },
    "305": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many different templates do all document use?",
        "ground_truth": "SELECT count(DISTINCT template_id) FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Template_ID) FROM Documents WHERE Template_ID IS NOT NULL"
        ]
    },
    "306": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of different templates used for documents.",
        "ground_truth": "SELECT count(DISTINCT template_id) FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Template_ID) FROM Documents WHERE Template_ID IS NOT NULL"
        ]
    },
    "307": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents are using the template with type code 'PPT'?",
        "ground_truth": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'PPT'"
        ]
    },
    "308": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents that use the PPT template type.",
        "ground_truth": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Code = 'PPT';"
        ]
    },
    "309": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template ids and number of documents using each template.",
        "ground_truth": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Template_ID, COUNT(d.Document_ID) AS NumberOfDocuments\nFROM Templates t\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nORDER BY t.Template_ID;"
        ],
        "rule_sql": []
    },
    "310": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "ground_truth": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents WHERE Template_ID IS NOT NULL GROUP BY Template_ID ORDER BY Template_ID;"
        ]
    },
    "311": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the id and type code for the template used by the most documents?",
        "ground_truth": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "312": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "ground_truth": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "313": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates that are used by more than one document.",
        "ground_truth": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_ID\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nHAVING COUNT(d.Document_ID) > 1;"
        ]
    },
    "314": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids of any templates used in more than a single document?",
        "ground_truth": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_ID\nFROM Documents\nGROUP BY Template_ID\nHAVING COUNT(Document_ID) > 1\nORDER BY Template_ID;"
        ]
    },
    "315": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates not used by any document.",
        "ground_truth": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_ID\nFROM Templates t\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Template_ID IS NULL;"
        ]
    },
    "316": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids for templates that are not used in any documents?",
        "ground_truth": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_ID\nFROM Templates t\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Template_ID IS NULL;"
        ]
    },
    "317": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates do we have?",
        "ground_truth": "SELECT count(*) FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Templates;"
        ]
    },
    "318": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates.",
        "ground_truth": "SELECT count(*) FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Templates;"
        ]
    },
    "319": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "ground_truth": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;"
        ]
    },
    "320": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "ground_truth": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;"
        ]
    },
    "321": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all distinct template type codes for all templates.",
        "ground_truth": "SELECT DISTINCT template_type_code FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT Template_Type_Code FROM Templates;"
        ]
    },
    "322": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes?",
        "ground_truth": "SELECT DISTINCT template_type_code FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;"
        ]
    },
    "323": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "ground_truth": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')"
        ]
    },
    "324": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "ground_truth": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')"
        ]
    },
    "325": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates have template type code CV?",
        "ground_truth": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';"
        ]
    },
    "326": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates of the type CV.",
        "ground_truth": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Templates t\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Description = 'CV';"
        ]
    },
    "327": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "ground_truth": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5"
        ]
    },
    "328": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "ground_truth": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5"
        ]
    },
    "329": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and number of templates for each.",
        "ground_truth": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS Number_of_Templates\nFROM Templates t\nGROUP BY t.Template_Type_Code"
        ]
    },
    "330": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "ground_truth": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS Template_Count\nFROM Templates t\nGROUP BY t.Template_Type_Code\nORDER BY t.Template_Type_Code;"
        ]
    },
    "331": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code has most number of templates?",
        "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Template_Type_Code, COUNT(*) AS template_count\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY template_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "332": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type that the most templates belong to.",
        "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ]
    },
    "333": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes with less than three templates.",
        "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_Type_Code\nFROM Templates t\nGROUP BY t.Template_Type_Code\nHAVING COUNT(t.Template_ID) < 3;"
        ]
    },
    "334": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "ground_truth": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT rtt.Template_Type_Code\nFROM Ref_Template_Types rtt\nLEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nGROUP BY rtt.Template_Type_Code\nHAVING COUNT(t.Template_ID) < 3;"
        ]
    },
    "335": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "ground_truth": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Smallest_Version_Number LIMIT 1;"
        ]
    },
    "336": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "ground_truth": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Lowest_Version_Number ASC LIMIT 1;"
        ]
    },
    "337": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_Name = 'Data base';"
        ]
    },
    "338": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_Name = 'Data base';"
        ]
    },
    "339": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document names using templates with template type code BK.",
        "ground_truth": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT d.Document_Name \nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'BK'"
        ]
    },
    "340": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the names of documents that use templates with the code BK?",
        "ground_truth": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT d.Document_Name \nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'BK';"
        ]
    },
    "341": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and the number of documents using each type.",
        "ground_truth": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Template_Type_Code, COUNT(d.Document_ID) AS NumberOfDocuments\nFROM Ref_Template_Types t\nLEFT JOIN Templates tm ON t.Template_Type_Code = tm.Template_Type_Code\nLEFT JOIN Documents d ON tm.Template_ID = d.Template_ID\nGROUP BY t.Template_Type_Code\nORDER BY t.Template_Type_Code;"
        ],
        "rule_sql": []
    },
    "342": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many documents use each type?",
        "ground_truth": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    rtt.Template_Type_Code,\n    COUNT(d.Document_ID) AS Document_Count\nFROM \n    Ref_Template_Types rtt\nLEFT JOIN \n    Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN \n    Documents d ON t.Template_ID = d.Template_ID\nGROUP BY \n    rtt.Template_Type_Code\nORDER BY \n    rtt.Template_Type_Code;"
        ],
        "rule_sql": []
    },
    "343": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code is used by most number of documents?",
        "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;"
        ]
    },
    "344": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "ground_truth": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;"
        ]
    },
    "345": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document.",
        "ground_truth": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rtt.Template_Type_Code\nFROM Ref_Template_Types rtt\nLEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_ID IS NULL\nGROUP BY rtt.Template_Type_Code;"
        ],
        "rule_sql": []
    },
    "346": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?",
        "ground_truth": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rtt.Template_Type_Code\nFROM Ref_Template_Types rtt\nLEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nLEFT JOIN Documents d ON t.Template_ID = d.Template_ID\nWHERE d.Document_ID IS NULL\nGROUP BY rtt.Template_Type_Code;"
        ],
        "rule_sql": []
    },
    "347": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and descriptions.",
        "ground_truth": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;"
        ]
    },
    "348": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the type codes and descriptions for all template types?",
        "ground_truth": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;"
        ]
    },
    "349": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "ground_truth": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';"
        ]
    },
    "350": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type description of the template type with the code AD.",
        "ground_truth": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';"
        ]
    },
    "351": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code for template type description \"Book\".",
        "ground_truth": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';"
        ]
    },
    "352": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type with the description \"Book\".",
        "ground_truth": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';"
        ]
    },
    "353": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "ground_truth": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT rtt.Template_Type_Description\nFROM Ref_Template_Types rtt\nJOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID;"
        ]
    },
    "354": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "ground_truth": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT t.Template_Details\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID;"
        ],
        "rule_sql": []
    },
    "355": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids with template type description \"Presentation\".",
        "ground_truth": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Template_ID\nFROM Templates t\nJOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code\nWHERE rtt.Template_Type_Description = 'Presentation';"
        ]
    },
    "356": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "ground_truth": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')"
        ]
    },
    "357": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs in total?",
        "ground_truth": "SELECT count(*) FROM Paragraphs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS total_paragraphs FROM Paragraphs;"
        ]
    },
    "358": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs.",
        "ground_truth": "SELECT count(*) FROM Paragraphs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Paragraphs;"
        ]
    },
    "359": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "ground_truth": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'"
        ]
    },
    "360": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "ground_truth": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS paragraph_count\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';"
        ]
    },
    "361": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "ground_truth": "select other_details from paragraphs where paragraph_text like 'korea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea '"
        ],
        "rule_sql": []
    },
    "362": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "ground_truth": "select other_details from paragraphs where paragraph_text like 'korea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'"
        ],
        "rule_sql": []
    },
    "363": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "ground_truth": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'"
        ]
    },
    "364": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "ground_truth": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Paragraph_ID, p.Paragraph_Text \nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Welcome to NY';"
        ]
    },
    "365": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "ground_truth": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews'"
        ]
    },
    "366": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "ground_truth": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews'"
        ]
    },
    "367": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "ground_truth": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID;"
        ],
        "rule_sql": []
    },
    "368": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "ground_truth": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID;"
        ],
        "rule_sql": []
    },
    "369": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "ground_truth": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name"
        ],
        "rule_sql": []
    },
    "370": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "ground_truth": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name"
        ],
        "rule_sql": []
    },
    "371": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List all document ids with at least two paragraphs.",
        "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2"
        ]
    },
    "372": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2"
        ]
    },
    "373": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "ground_truth": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1;"
        ]
    },
    "374": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and name of the document with the most paragraphs.",
        "ground_truth": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1;"
        ]
    },
    "375": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with least number of paragraphs?",
        "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.Document_ID\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY COUNT(p.Paragraph_ID) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "376": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.Document_ID\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY COUNT(p.Paragraph_ID) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "377": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;"
        ]
    },
    "378": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "ground_truth": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Document_ID \nFROM Documents \nWHERE Document_ID IN (\n    SELECT Document_ID \n    FROM Paragraphs \n    GROUP BY Document_ID \n    HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2\n)"
        ]
    },
    "379": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "ground_truth": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p1 ON d.Document_ID = p1.Document_ID\nJOIN Paragraphs p2 ON d.Document_ID = p2.Document_ID\nWHERE p1.Paragraph_Text = 'Brazil'\nAND p2.Paragraph_Text = 'Ireland';"
        ]
    },
    "380": {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "ground_truth": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text = 'Brazil'\nINTERSECT\nSELECT DISTINCT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text = 'Ireland'"
        ]
    },
    "381": {
        "db_id": "course_teach",
        "question": "How many teachers are there?",
        "ground_truth": "SELECT count(*) FROM teacher",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM teacher;"
        ]
    },
    "382": {
        "db_id": "course_teach",
        "question": "What is the total count of teachers?",
        "ground_truth": "SELECT count(*) FROM teacher",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS total_teachers FROM teacher;"
        ]
    },
    "383": {
        "db_id": "course_teach",
        "question": "List the names of teachers in ascending order of age.",
        "ground_truth": "SELECT Name FROM teacher ORDER BY Age ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM teacher ORDER BY Age ASC;"
        ]
    },
    "384": {
        "db_id": "course_teach",
        "question": "What are the names of the teachers ordered by ascending age?",
        "ground_truth": "SELECT Name FROM teacher ORDER BY Age ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM teacher ORDER BY Age ASC;"
        ]
    },
    "385": {
        "db_id": "course_teach",
        "question": "What are the age and hometown of teachers?",
        "ground_truth": "SELECT Age ,  Hometown FROM teacher",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Age, Hometown FROM teacher"
        ]
    },
    "386": {
        "db_id": "course_teach",
        "question": "What is the age and hometown of every teacher?",
        "ground_truth": "SELECT Age ,  Hometown FROM teacher",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Age, Hometown FROM teacher"
        ]
    },
    "387": {
        "db_id": "course_teach",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "ground_truth": "select name from teacher where hometown != \"little lever urban district\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'"
        ],
        "rule_sql": []
    },
    "388": {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "ground_truth": "select name from teacher where hometown != \"little lever urban district\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'"
        ],
        "rule_sql": []
    },
    "389": {
        "db_id": "course_teach",
        "question": "Show the name of teachers aged either 32 or 33?",
        "ground_truth": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'"
        ]
    },
    "390": {
        "db_id": "course_teach",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "ground_truth": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'"
        ]
    },
    "391": {
        "db_id": "course_teach",
        "question": "What is the hometown of the youngest teacher?",
        "ground_truth": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher)"
        ]
    },
    "392": {
        "db_id": "course_teach",
        "question": "Where is the youngest teacher from?",
        "ground_truth": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Hometown FROM teacher ORDER BY CAST(Age AS INTEGER) ASC LIMIT 1;"
        ]
    },
    "393": {
        "db_id": "course_teach",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "ground_truth": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown;"
        ]
    },
    "394": {
        "db_id": "course_teach",
        "question": "For each hometown, how many teachers are there?",
        "ground_truth": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown"
        ]
    },
    "395": {
        "db_id": "course_teach",
        "question": "List the most common hometown of teachers.",
        "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "396": {
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "397": {
        "db_id": "course_teach",
        "question": "Show the hometowns shared by at least two teachers.",
        "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Hometown\nFROM teacher t\nGROUP BY t.Hometown\nHAVING COUNT(*) >= 2;"
        ]
    },
    "398": {
        "db_id": "course_teach",
        "question": "What are the towns from which at least two teachers come from?",
        "ground_truth": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2"
        ]
    },
    "399": {
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name, c.Course;"
        ]
    },
    "400": {
        "db_id": "course_teach",
        "question": "What is the name of each teacher and what course they teach?",
        "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name, c.Course;"
        ]
    },
    "401": {
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;"
        ]
    },
    "402": {
        "db_id": "course_teach",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "ground_truth": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC, c.Course ASC"
        ]
    },
    "403": {
        "db_id": "course_teach",
        "question": "Show the name of the teacher for the math course.",
        "ground_truth": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Name \nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math';"
        ],
        "rule_sql": []
    },
    "404": {
        "db_id": "course_teach",
        "question": "What are the names of the people who teach math courses?",
        "ground_truth": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math'"
        ],
        "rule_sql": []
    },
    "405": {
        "db_id": "course_teach",
        "question": "Show names of teachers and the number of courses they teach.",
        "ground_truth": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name ORDER BY NumberOfCourses DESC;"
        ],
        "rule_sql": []
    },
    "406": {
        "db_id": "course_teach",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "ground_truth": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Name, COUNT(ca.Course_ID) AS Course_Count\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID, t.Name\nORDER BY Course_Count DESC;"
        ],
        "rule_sql": []
    },
    "407": {
        "db_id": "course_teach",
        "question": "Show names of teachers that teach at least two courses.",
        "ground_truth": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID, t.Name\nHAVING COUNT(DISTINCT ca.Course_ID) >= 2;"
        ]
    },
    "408": {
        "db_id": "course_teach",
        "question": "What are the names of the teachers who teach at least two courses?",
        "ground_truth": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID, t.Name\nHAVING COUNT(DISTINCT ca.Course_ID) >= 2;"
        ]
    },
    "409": {
        "db_id": "course_teach",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "ground_truth": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT DISTINCT ca.Teacher_ID FROM course_arrange ca)"
        ]
    },
    "410": {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "ground_truth": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.Name\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nWHERE ca.Teacher_ID IS NULL;"
        ]
    },
    "411": {
        "db_id": "museum_visit",
        "question": "How many visitors below age 30 are there?",
        "ground_truth": "SELECT count(*) FROM visitor WHERE age  <  30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM visitor WHERE Age < 30"
        ]
    },
    "412": {
        "db_id": "museum_visit",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "ground_truth": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;"
        ]
    },
    "413": {
        "db_id": "museum_visit",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "ground_truth": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4"
        ]
    },
    "414": {
        "db_id": "museum_visit",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "ground_truth": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;"
        ]
    },
    "415": {
        "db_id": "museum_visit",
        "question": "Find the id and name of the museum that has the most staff members?",
        "ground_truth": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;"
        ]
    },
    "416": {
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "ground_truth": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Num_of_Staff) AS Average_Staff \nFROM museum \nWHERE Open_Year < '2009';"
        ]
    },
    "417": {
        "db_id": "museum_visit",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "ground_truth": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';"
        ],
        "rule_sql": []
    },
    "418": {
        "db_id": "museum_visit",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "ground_truth": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')"
        ]
    },
    "419": {
        "db_id": "museum_visit",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "ground_truth": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT v.ID, v.Name, v.Age\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nGROUP BY v.ID, v.Name, v.Age\nHAVING COUNT(DISTINCT vi.Museum_ID) > 1;"
        ]
    },
    "420": {
        "db_id": "museum_visit",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "ground_truth": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT v.ID, v.Name, v.Level_of_membership\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nGROUP BY v.ID, v.Name, v.Level_of_membership\nORDER BY SUM(vi.Total_spent) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "421": {
        "db_id": "museum_visit",
        "question": "What are the id and name of the museum visited most times?",
        "ground_truth": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT m.Museum_ID, m.Name\nFROM museum m\nJOIN visit v ON m.Museum_ID = v.Museum_ID\nGROUP BY m.Museum_ID, m.Name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "422": {
        "db_id": "museum_visit",
        "question": "What is the name of the museum that had no visitor yet?",
        "ground_truth": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT m.Name \nFROM museum m \nLEFT JOIN visit v ON m.Museum_ID = v.Museum_ID \nWHERE v.Museum_ID IS NULL;"
        ]
    },
    "423": {
        "db_id": "museum_visit",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "ground_truth": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT v.Name, v.Age\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nWHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)\nLIMIT 1;"
        ]
    },
    "424": {
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "ground_truth": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets FROM visit;"
        ]
    },
    "425": {
        "db_id": "museum_visit",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "ground_truth": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1"
        ]
    },
    "426": {
        "db_id": "museum_visit",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "ground_truth": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year < '2009'\nINTERSECT\nSELECT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year > '2011';"
        ]
    },
    "427": {
        "db_id": "museum_visit",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "ground_truth": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM visitor v\nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM visit vi\n    JOIN museum m ON vi.Museum_ID = m.Museum_ID\n    WHERE vi.visitor_ID = v.ID AND m.Open_Year > '2010'\n)"
        ]
    },
    "428": {
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "ground_truth": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'"
        ]
    },
    "429": {
        "db_id": "wta_1",
        "question": "Find the total number of players.",
        "ground_truth": "SELECT count(*) FROM players",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS total_players FROM players;"
        ]
    },
    "430": {
        "db_id": "wta_1",
        "question": "How many players are there?",
        "ground_truth": "SELECT count(*) FROM players",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM players;"
        ]
    },
    "431": {
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "ground_truth": "SELECT count(*) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM matches;"
        ]
    },
    "432": {
        "db_id": "wta_1",
        "question": "Count the number of matches.",
        "ground_truth": "SELECT count(*) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM matches;"
        ]
    },
    "433": {
        "db_id": "wta_1",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "ground_truth": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';"
        ]
    },
    "434": {
        "db_id": "wta_1",
        "question": "What are the first names and birth dates of players from the USA?",
        "ground_truth": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';"
        ]
    },
    "435": {
        "db_id": "wta_1",
        "question": "Find the average age of losers and winners of all matches.",
        "ground_truth": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT \n    AVG(loser_age) AS avg_loser_age, \n    AVG(winner_age) AS avg_winner_age \nFROM matches"
        ]
    },
    "436": {
        "db_id": "wta_1",
        "question": "What are the average ages of losers and winners across matches?",
        "ground_truth": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;"
        ]
    },
    "437": {
        "db_id": "wta_1",
        "question": "Find the average rank of winners in all matches.",
        "ground_truth": "SELECT avg(winner_rank) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(winner_rank) AS average_winner_rank FROM matches WHERE winner_rank IS NOT NULL;"
        ]
    },
    "438": {
        "db_id": "wta_1",
        "question": "What is the average rank for winners in all matches?",
        "ground_truth": "SELECT avg(winner_rank) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(winner_rank) AS average_winner_rank FROM matches WHERE winner_rank IS NOT NULL;"
        ]
    },
    "439": {
        "db_id": "wta_1",
        "question": "Find the highest rank of losers in all matches.",
        "ground_truth": "SELECT min(loser_rank) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(loser_rank) AS highest_rank_of_losers FROM matches WHERE loser_rank IS NOT NULL;"
        ]
    },
    "440": {
        "db_id": "wta_1",
        "question": "What is the best rank of losers across all matches?",
        "ground_truth": "SELECT min(loser_rank) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(loser_rank) AS best_rank FROM matches WHERE loser_rank IS NOT NULL;"
        ]
    },
    "441": {
        "db_id": "wta_1",
        "question": "find the number of distinct country codes of all players.",
        "ground_truth": "SELECT count(DISTINCT country_code) FROM players",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT country_code) FROM players;"
        ]
    },
    "442": {
        "db_id": "wta_1",
        "question": "How many distinct countries do players come from?",
        "ground_truth": "SELECT count(DISTINCT country_code) FROM players",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT country_code) FROM players;"
        ]
    },
    "443": {
        "db_id": "wta_1",
        "question": "Find the number of distinct name of losers.",
        "ground_truth": "SELECT count(DISTINCT loser_name) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT loser_name) FROM matches;"
        ]
    },
    "444": {
        "db_id": "wta_1",
        "question": "How many different loser names are there?",
        "ground_truth": "SELECT count(DISTINCT loser_name) FROM matches",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT loser_name) FROM matches;"
        ]
    },
    "445": {
        "db_id": "wta_1",
        "question": "Find the name of tourney that has more than 10 matches.",
        "ground_truth": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"
        ]
    },
    "446": {
        "db_id": "wta_1",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "ground_truth": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"
        ]
    },
    "447": {
        "db_id": "wta_1",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "ground_truth": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT winner_name \nFROM matches \nWHERE year = 2013\nINTERSECT\nSELECT DISTINCT winner_name \nFROM matches \nWHERE year = 2016"
        ]
    },
    "448": {
        "db_id": "wta_1",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "ground_truth": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT p.first_name, p.last_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.year = 2013 AND m2.year = 2016;"
        ],
        "rule_sql": []
    },
    "449": {
        "db_id": "wta_1",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "ground_truth": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)"
        ]
    },
    "450": {
        "db_id": "wta_1",
        "question": "How many matches were played in 2013 or 2016?",
        "ground_truth": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016"
        ]
    },
    "451": {
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT p.country_code, p.first_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.tourney_name IN ('WTA Championships', 'Australian Open')\nGROUP BY p.player_id, p.country_code, p.first_name\nHAVING COUNT(DISTINCT m.tourney_name) = 2;"
        ]
    },
    "452": {
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT p.first_name, p.country_code\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.tourney_name = 'WTA Championships'\nAND m2.tourney_name = 'Australian Open';"
        ],
        "rule_sql": []
    },
    "453": {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "ground_truth": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;"
        ]
    },
    "454": {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "ground_truth": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;"
        ]
    },
    "455": {
        "db_id": "wta_1",
        "question": "List the first and last name of all players in the order of birth date.",
        "ground_truth": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "456": {
        "db_id": "wta_1",
        "question": "What are the full names of all players, sorted by birth date?",
        "ground_truth": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "457": {
        "db_id": "wta_1",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "ground_truth": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;"
        ]
    },
    "458": {
        "db_id": "wta_1",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "ground_truth": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;"
        ]
    },
    "459": {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, p.country_code\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id\nORDER BY SUM(r.tours) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "460": {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the player with the most tours?",
        "ground_truth": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, p.country_code\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id\nORDER BY SUM(r.tours) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "461": {
        "db_id": "wta_1",
        "question": "Find the year that has the most number of matches.",
        "ground_truth": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "462": {
        "db_id": "wta_1",
        "question": "Which year had the most matches?",
        "ground_truth": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "463": {
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "ground_truth": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name, winner_rank_points \nFROM matches \nGROUP BY winner_id \nORDER BY COUNT(*) DESC \nLIMIT 1;"
        ]
    },
    "464": {
        "db_id": "wta_1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "ground_truth": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name, winner_rank_points \nFROM matches \nGROUP BY winner_id \nORDER BY COUNT(*) DESC \nLIMIT 1;"
        ]
    },
    "465": {
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "ground_truth": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name\nFROM matches\nWHERE tourney_name = 'Australian Open'\nORDER BY winner_rank_points DESC\nLIMIT 1;"
        ]
    },
    "466": {
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "ground_truth": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name\nFROM matches\nWHERE tourney_name = 'Australian Open'\nORDER BY winner_rank_points DESC\nLIMIT 1;"
        ]
    },
    "467": {
        "db_id": "wta_1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "ground_truth": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);"
        ]
    },
    "468": {
        "db_id": "wta_1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "ground_truth": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;"
        ]
    },
    "469": {
        "db_id": "wta_1",
        "question": "Find the average ranking for each player and their first name.",
        "ground_truth": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, AVG(r.ranking) as average_ranking\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id, p.first_name\nORDER BY p.player_id;"
        ],
        "rule_sql": []
    },
    "470": {
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their average rankings?",
        "ground_truth": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, AVG(r.ranking) as average_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name"
        ],
        "rule_sql": []
    },
    "471": {
        "db_id": "wta_1",
        "question": "Find the total ranking points for each player and their first name.",
        "ground_truth": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id, p.first_name\nORDER BY total_ranking_points DESC;"
        ],
        "rule_sql": []
    },
    "472": {
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their total ranking points?",
        "ground_truth": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name ORDER BY total_ranking_points DESC;"
        ],
        "rule_sql": []
    },
    "473": {
        "db_id": "wta_1",
        "question": "find the number of players for each country.",
        "ground_truth": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC;"
        ],
        "rule_sql": []
    },
    "474": {
        "db_id": "wta_1",
        "question": "How many players are from each country?",
        "ground_truth": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC;"
        ],
        "rule_sql": []
    },
    "475": {
        "db_id": "wta_1",
        "question": "find the code of the country where has the greatest number of players.",
        "ground_truth": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT country_code\nFROM players\nGROUP BY country_code\nORDER BY COUNT(player_id) DESC\nLIMIT 1;"
        ]
    },
    "476": {
        "db_id": "wta_1",
        "question": "What is the code of the country with the most players?",
        "ground_truth": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT country_code\nFROM players\nGROUP BY country_code\nORDER BY COUNT(player_id) DESC\nLIMIT 1;"
        ]
    },
    "477": {
        "db_id": "wta_1",
        "question": "Find the codes of countries that have more than 50 players.",
        "ground_truth": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50"
        ]
    },
    "478": {
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "ground_truth": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;"
        ]
    },
    "479": {
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date.",
        "ground_truth": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date;"
        ],
        "rule_sql": []
    },
    "480": {
        "db_id": "wta_1",
        "question": "How many total tours were there for each ranking date?",
        "ground_truth": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date;"
        ],
        "rule_sql": []
    },
    "481": {
        "db_id": "wta_1",
        "question": "Find the number of matches happened in each year.",
        "ground_truth": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as number_of_matches FROM matches GROUP BY year ORDER BY year;"
        ],
        "rule_sql": []
    },
    "482": {
        "db_id": "wta_1",
        "question": "How many matches were played in each year?",
        "ground_truth": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY year;"
        ],
        "rule_sql": []
    },
    "483": {
        "db_id": "wta_1",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "ground_truth": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;"
        ]
    },
    "484": {
        "db_id": "wta_1",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "ground_truth": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;"
        ]
    },
    "485": {
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "ground_truth": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT winner_id) \nFROM matches \nWHERE tourney_name = 'WTA Championships' \nAND winner_id IN (\n    SELECT player_id \n    FROM players \n    WHERE hand = 'L'\n)"
        ]
    },
    "486": {
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "ground_truth": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT winner_id) \nFROM matches \nWHERE winner_hand = 'L' \nAND tourney_name = 'WTA Championships';"
        ]
    },
    "487": {
        "db_id": "wta_1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "ground_truth": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)\nLIMIT 1;"
        ]
    },
    "488": {
        "db_id": "wta_1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "ground_truth": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nGROUP BY p.player_id\nORDER BY SUM(m.winner_rank_points) DESC\nLIMIT 1;"
        ]
    },
    "489": {
        "db_id": "wta_1",
        "question": "Find the number of players for each hand type.",
        "ground_truth": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT hand, COUNT(*) as player_count FROM players GROUP BY hand;"
        ],
        "rule_sql": []
    },
    "490": {
        "db_id": "wta_1",
        "question": "How many players are there for each hand type?",
        "ground_truth": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT hand, COUNT(*) as player_count FROM players GROUP BY hand;"
        ],
        "rule_sql": []
    },
    "491": {
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "ground_truth": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'"
        ]
    },
    "492": {
        "db_id": "battle_death",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "ground_truth": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name, tonnage FROM ship ORDER BY name DESC;"
        ]
    },
    "493": {
        "db_id": "battle_death",
        "question": "List the name, date and result of each battle.",
        "ground_truth": "SELECT name ,  date FROM battle",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, date, result FROM battle;"
        ],
        "rule_sql": []
    },
    "494": {
        "db_id": "battle_death",
        "question": "What is maximum and minimum death toll caused each time?",
        "ground_truth": "SELECT max(killed) ,  min(killed) FROM death",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;"
        ]
    },
    "495": {
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "ground_truth": "SELECT avg(injured) FROM death",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(injured) AS average_injuries FROM death;"
        ]
    },
    "496": {
        "db_id": "battle_death",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "ground_truth": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';"
        ]
    },
    "497": {
        "db_id": "battle_death",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "ground_truth": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';"
        ]
    },
    "498": {
        "db_id": "battle_death",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "ground_truth": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.ship_type = 'Brig';"
        ]
    },
    "499": {
        "db_id": "battle_death",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "ground_truth": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY b.id, b.name\nHAVING SUM(d.killed) > 10;"
        ]
    },
    "500": {
        "db_id": "battle_death",
        "question": "What is the ship id and name that caused most total injuries?",
        "ground_truth": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.id, s.name\nFROM ship s\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY s.id, s.name\nORDER BY SUM(d.injured) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "501": {
        "db_id": "battle_death",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "ground_truth": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'"
        ]
    },
    "502": {
        "db_id": "battle_death",
        "question": "How many different results are there for the battles?",
        "ground_truth": "SELECT count(DISTINCT RESULT) FROM battle",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT result) FROM battle;"
        ]
    },
    "503": {
        "db_id": "battle_death",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "ground_truth": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM battle b\nWHERE b.id NOT IN (\n    SELECT s.lost_in_battle \n    FROM ship s \n    WHERE s.tonnage = '225'\n)"
        ]
    },
    "504": {
        "db_id": "battle_death",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "ground_truth": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT b.name, b.date\nFROM battle b\nJOIN ship s1 ON b.id = s1.lost_in_battle\nJOIN ship s2 ON b.id = s2.lost_in_battle\nWHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';"
        ]
    },
    "505": {
        "db_id": "battle_death",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "ground_truth": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle b\nWHERE b.id NOT IN (\n    SELECT s.lost_in_battle\n    FROM ship s\n    WHERE s.location = 'English Channel'\n);"
        ]
    },
    "506": {
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "ground_truth": "SELECT note FROM death WHERE note LIKE '%East%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT note FROM death WHERE note LIKE '%East%';"
        ]
    },
    "507": {
        "db_id": "student_transcripts_tracking",
        "question": "what are all the addresses including line 1 and line 2?",
        "ground_truth": "SELECT line_1 ,  line_2 FROM addresses",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT line_1, line_2 FROM Addresses;"
        ]
    },
    "508": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "ground_truth": "SELECT line_1 ,  line_2 FROM addresses",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT line_1, line_2 FROM Addresses;"
        ]
    },
    "509": {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses in total are listed?",
        "ground_truth": "SELECT count(*) FROM Courses",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS total_courses FROM Courses;"
        ]
    },
    "510": {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses are there?",
        "ground_truth": "SELECT count(*) FROM Courses",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Courses;"
        ]
    },
    "511": {
        "db_id": "student_transcripts_tracking",
        "question": "How is the math course described?",
        "ground_truth": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT course_description FROM Courses WHERE course_name = 'math';"
        ]
    },
    "512": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the descriptions for all the math courses?",
        "ground_truth": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT course_description FROM Courses WHERE course_name LIKE '%math%' OR course_name LIKE '%Math%';"
        ]
    },
    "513": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "ground_truth": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';"
        ]
    },
    "514": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for Port Chelsea?",
        "ground_truth": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';"
        ]
    },
    "515": {
        "db_id": "student_transcripts_tracking",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "ground_truth": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.department_id, d.department_name, COUNT(dp.degree_program_id) AS degree_count\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nORDER BY degree_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "516": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "ground_truth": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.department_id, d.department_name\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "517": {
        "db_id": "student_transcripts_tracking",
        "question": "How many departments offer any degree?",
        "ground_truth": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;"
        ]
    },
    "518": {
        "db_id": "student_transcripts_tracking",
        "question": "How many different departments offer degrees?",
        "ground_truth": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;"
        ]
    },
    "519": {
        "db_id": "student_transcripts_tracking",
        "question": "How many different degree names are offered?",
        "ground_truth": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;"
        ]
    },
    "520": {
        "db_id": "student_transcripts_tracking",
        "question": "How many different degrees are offered?",
        "ground_truth": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS degree_count FROM Degree_Programs;"
        ],
        "rule_sql": []
    },
    "521": {
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department offer?",
        "ground_truth": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS degree_count\nFROM Degree_Programs dp\nJOIN Departments d ON dp.department_id = d.department_id\nWHERE d.department_name = 'Engineering';"
        ]
    },
    "522": {
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?",
        "ground_truth": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS degree_count\nFROM Degree_Programs dp\nJOIN Departments d ON dp.department_id = d.department_id\nWHERE d.department_name = 'engineering';"
        ]
    },
    "523": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions of all the sections?",
        "ground_truth": "SELECT section_name ,  section_description FROM Sections",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT section_name, section_description FROM Sections;"
        ]
    },
    "524": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions for all the sections?",
        "ground_truth": "SELECT section_name ,  section_description FROM Sections",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT section_name, section_description FROM Sections;"
        ]
    },
    "525": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and id of courses having at most 2 sections?",
        "ground_truth": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_id, course_name\nFROM Courses\nWHERE course_id IN (\n    SELECT course_id\n    FROM Sections\n    GROUP BY course_id\n    HAVING COUNT(section_id) <= 2\n)"
        ],
        "rule_sql": []
    },
    "526": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "ground_truth": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_id, course_name \nFROM Courses \nWHERE course_id IN (\n    SELECT course_id \n    FROM Sections \n    GROUP BY course_id \n    HAVING COUNT(section_id) < 2\n)"
        ],
        "rule_sql": []
    },
    "527": {
        "db_id": "student_transcripts_tracking",
        "question": "List the section_name in reversed lexicographical order.",
        "ground_truth": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT section_name FROM Sections ORDER BY section_name DESC;"
        ]
    },
    "528": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "ground_truth": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT section_name FROM Sections ORDER BY section_name DESC;"
        ]
    },
    "529": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "ground_truth": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.semester_id, s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY s.semester_id, s.semester_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "530": {
        "db_id": "student_transcripts_tracking",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "ground_truth": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.semester_id, s.semester_name\nFROM Semesters s\nJOIN (\n    SELECT semester_id, COUNT(DISTINCT student_id) as student_count\n    FROM Student_Enrolment\n    GROUP BY semester_id\n    ORDER BY student_count DESC\n    LIMIT 1\n) se ON s.semester_id = se.semester_id;"
        ],
        "rule_sql": []
    },
    "531": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the description of the department whose name has the substring the computer?",
        "ground_truth": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'"
        ],
        "rule_sql": []
    },
    "532": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the department description for the one whose name has the word computer?",
        "ground_truth": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
        ]
    },
    "533": {
        "db_id": "student_transcripts_tracking",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "ground_truth": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id, se.semester_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;"
        ],
        "rule_sql": []
    },
    "534": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "ground_truth": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id, se.semester_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;"
        ],
        "rule_sql": []
    },
    "535": {
        "db_id": "student_transcripts_tracking",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%';"
        ]
    },
    "536": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%';"
        ]
    },
    "537": {
        "db_id": "student_transcripts_tracking",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "ground_truth": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dp.degree_summary_name, COUNT(se.student_id) AS student_count\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY student_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "538": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "ground_truth": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;"
        ]
    },
    "539": {
        "db_id": "student_transcripts_tracking",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "ground_truth": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT dp.degree_program_id, dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;"
        ]
    },
    "540": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "ground_truth": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT dp.degree_program_id, dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;"
        ]
    },
    "541": {
        "db_id": "student_transcripts_tracking",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "ground_truth": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    s.student_id,\n    s.first_name,\n    s.middle_name,\n    s.last_name,\n    COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    number_of_enrollments DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "542": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "ground_truth": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS enrollment_count\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY enrollment_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "543": {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "ground_truth": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.semester_name \nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.semester_id IS NULL\nORDER BY s.semester_name;"
        ]
    },
    "544": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the semester with no students enrolled?",
        "ground_truth": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.semester_name \nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.semester_id IS NULL;"
        ]
    },
    "545": {
        "db_id": "student_transcripts_tracking",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "ground_truth": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nJOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id\nJOIN Students s ON se.student_id = s.student_id\nORDER BY c.course_name;"
        ]
    },
    "546": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of all courses that have some students enrolled?",
        "ground_truth": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.course_name \nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nJOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id\nJOIN Students s ON se.student_id = s.student_id;"
        ]
    },
    "547": {
        "db_id": "student_transcripts_tracking",
        "question": "What's the name of the course with most number of enrollments?",
        "ground_truth": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY COUNT(sec.student_course_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "548": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the course with the most students enrolled?",
        "ground_truth": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY COUNT(sec.student_enrolment_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "549": {
        "db_id": "student_transcripts_tracking",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "ground_truth": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina'\nAND s.student_id NOT IN (\n    SELECT student_id \n    FROM Student_Enrolment\n);"
        ],
        "rule_sql": []
    },
    "550": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "ground_truth": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina'\nAND s.student_id NOT IN (\n    SELECT student_id\n    FROM Student_Enrolment\n);"
        ],
        "rule_sql": []
    },
    "551": {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nHAVING COUNT(tc.student_course_id) >= 2;"
        ],
        "rule_sql": []
    },
    "552": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nHAVING COUNT(tc.student_course_id) >= 2;"
        ],
        "rule_sql": []
    },
    "553": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "ground_truth": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';"
        ]
    },
    "554": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "ground_truth": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';"
        ],
        "rule_sql": []
    },
    "555": {
        "db_id": "student_transcripts_tracking",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;"
        ]
    },
    "556": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the first student to register?",
        "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"
        ]
    },
    "557": {
        "db_id": "student_transcripts_tracking",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id\nJOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id\nJOIN Transcripts t ON tc.transcript_id = t.transcript_id\nWHERE t.transcript_date IS NOT NULL\nORDER BY t.transcript_date ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "558": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "ground_truth": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Transcript_Contents tc ON se.student_enrolment_id = tc.student_course_id\nJOIN Transcripts t ON tc.transcript_id = t.transcript_id\nWHERE t.transcript_date = (\n    SELECT MIN(transcript_date)\n    FROM Transcripts\n    JOIN Transcript_Contents tc2 ON Transcripts.transcript_id = tc2.transcript_id\n    JOIN Student_Enrolment_Courses sec ON tc2.student_course_id = sec.student_course_id\n    JOIN Student_Enrolment se2 ON sec.student_enrolment_id = se2.student_enrolment_id\n    JOIN Students s2 ON se2.student_id = s2.student_id\n    WHERE s2.date_left IS NOT NULL\n)\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "559": {
        "db_id": "student_transcripts_tracking",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "ground_truth": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.first_name\nFROM Students s\nWHERE s.current_address_id != s.permanent_address_id;"
        ]
    },
    "560": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "ground_truth": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name\nFROM Students s\nJOIN Addresses current_addr ON s.current_address_id = current_addr.address_id\nJOIN Addresses permanent_addr ON s.permanent_address_id = permanent_addr.address_id\nWHERE current_addr.address_id != permanent_addr.address_id\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "561": {
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "ground_truth": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.address_id, a.line_1, a.line_2, a.line_3\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id, a.line_1, a.line_2, a.line_3\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "562": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "ground_truth": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT a.address_id, a.line_1, a.line_2\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id\nGROUP BY a.address_id, a.line_1, a.line_2\nORDER BY COUNT(DISTINCT s.student_id) DESC\nLIMIT 1;"
        ]
    },
    "563": {
        "db_id": "student_transcripts_tracking",
        "question": "On average, when were the transcripts printed?",
        "ground_truth": "SELECT avg(transcript_date) FROM Transcripts",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;"
        ]
    },
    "564": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript date?",
        "ground_truth": "SELECT avg(transcript_date) FROM Transcripts",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;"
        ]
    },
    "565": {
        "db_id": "student_transcripts_tracking",
        "question": "When is the first transcript released? List the date and details.",
        "ground_truth": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;"
        ]
    },
    "566": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "ground_truth": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts;"
        ]
    },
    "567": {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are released?",
        "ground_truth": "SELECT count(*) FROM Transcripts",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS transcript_count FROM Transcripts;"
        ]
    },
    "568": {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are listed?",
        "ground_truth": "SELECT count(*) FROM Transcripts",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Transcripts;"
        ]
    },
    "569": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the last transcript release date?",
        "ground_truth": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;"
        ]
    },
    "570": {
        "db_id": "student_transcripts_tracking",
        "question": "When was the last transcript released?",
        "ground_truth": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;"
        ]
    },
    "571": {
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "ground_truth": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    sec.student_course_id,\n    COUNT(tc.transcript_id) AS transcript_count\nFROM \n    Student_Enrolment_Courses sec\nLEFT JOIN \n    Transcript_Contents tc ON sec.student_course_id = tc.student_course_id\nGROUP BY \n    sec.student_course_id\nORDER BY \n    transcript_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "572": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "ground_truth": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c.course_id,\n    c.course_name,\n    COUNT(DISTINCT tc.transcript_id) AS transcript_count,\n    sec.student_enrolment_id\nFROM \n    Courses c\nJOIN \n    Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nJOIN \n    Transcript_Contents tc ON sec.student_course_id = tc.student_course_id\nGROUP BY \n    c.course_id, c.course_name, sec.student_enrolment_id\nORDER BY \n    transcript_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "573": {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.transcript_id, t.transcript_date, COUNT(tc.student_course_id) as result_count\nFROM Transcripts t\nLEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nORDER BY result_count ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "574": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "ground_truth": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id, t.transcript_date\nORDER BY COUNT(tc.student_course_id) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "575": {
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "ground_truth": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.semester_id, s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Master%'\nINTERSECT\nSELECT DISTINCT s.semester_id, s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%'"
        ],
        "rule_sql": []
    },
    "576": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "ground_truth": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT se.semester_id\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Masters%'\nINTERSECT\nSELECT DISTINCT se.semester_id\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelors%';"
        ],
        "rule_sql": []
    },
    "577": {
        "db_id": "student_transcripts_tracking",
        "question": "How many different addresses do the students currently live?",
        "ground_truth": "SELECT count(DISTINCT current_address_id) FROM Students",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT current_address_id) AS different_address_count FROM Students;"
        ]
    },
    "578": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the different addresses that have students living there?",
        "ground_truth": "SELECT count(DISTINCT current_address_id) FROM Students",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT a.* FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id"
        ],
        "rule_sql": []
    },
    "579": {
        "db_id": "student_transcripts_tracking",
        "question": "List all the student details in reversed lexicographical order.",
        "ground_truth": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC;"
        ],
        "rule_sql": []
    },
    "580": {
        "db_id": "student_transcripts_tracking",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "ground_truth": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;"
        ],
        "rule_sql": []
    },
    "581": {
        "db_id": "student_transcripts_tracking",
        "question": "Describe the section h.",
        "ground_truth": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT section_name, section_description, other_details FROM Sections WHERE section_name = 'h';"
        ],
        "rule_sql": []
    },
    "582": {
        "db_id": "student_transcripts_tracking",
        "question": "What is the description for the section named h?",
        "ground_truth": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT section_description FROM Sections WHERE section_name = 'h';"
        ]
    },
    "583": {
        "db_id": "student_transcripts_tracking",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "ground_truth": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.first_name\nFROM Students s\nJOIN Addresses a ON s.permanent_address_id = a.address_id\nWHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582'"
        ],
        "rule_sql": []
    },
    "584": {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "ground_truth": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.first_name\nFROM Students s\nJOIN Addresses a ON s.permanent_address_id = a.address_id\nWHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582'"
        ],
        "rule_sql": []
    },
    "585": {
        "db_id": "tvshow",
        "question": "List the title of all cartoons in alphabetical order.",
        "ground_truth": "SELECT Title FROM Cartoon ORDER BY title",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Title FROM Cartoon ORDER BY Title ASC;"
        ]
    },
    "586": {
        "db_id": "tvshow",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "ground_truth": "SELECT Title FROM Cartoon ORDER BY title",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Title FROM Cartoon ORDER BY Title ASC;"
        ]
    },
    "587": {
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';"
        ],
        "rule_sql": []
    },
    "588": {
        "db_id": "tvshow",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';"
        ]
    },
    "589": {
        "db_id": "tvshow",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "ground_truth": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'"
        ]
    },
    "590": {
        "db_id": "tvshow",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "ground_truth": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'"
        ]
    },
    "591": {
        "db_id": "tvshow",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "ground_truth": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;"
        ]
    },
    "592": {
        "db_id": "tvshow",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "ground_truth": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;"
        ]
    },
    "593": {
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'"
        ]
    },
    "594": {
        "db_id": "tvshow",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "ground_truth": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'"
        ]
    },
    "595": {
        "db_id": "tvshow",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "ground_truth": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Country, COUNT(*) AS number_of_tv_channels FROM TV_Channel GROUP BY Country ORDER BY number_of_tv_channels DESC LIMIT 1;"
        ]
    },
    "596": {
        "db_id": "tvshow",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "ground_truth": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Country, COUNT(*) as channel_count FROM TV_Channel GROUP BY Country ORDER BY channel_count DESC LIMIT 1;"
        ]
    },
    "597": {
        "db_id": "tvshow",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "ground_truth": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;"
        ]
    },
    "598": {
        "db_id": "tvshow",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "ground_truth": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;"
        ]
    },
    "599": {
        "db_id": "tvshow",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "ground_truth": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';"
        ]
    },
    "600": {
        "db_id": "tvshow",
        "question": "What is the content of the series Sky Radio?",
        "ground_truth": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';"
        ]
    },
    "601": {
        "db_id": "tvshow",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "ground_truth": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';"
        ]
    },
    "602": {
        "db_id": "tvshow",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "ground_truth": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';"
        ]
    },
    "603": {
        "db_id": "tvshow",
        "question": "How many TV Channel using language English?",
        "ground_truth": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';"
        ]
    },
    "604": {
        "db_id": "tvshow",
        "question": "How many TV Channels use the English language?",
        "ground_truth": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';"
        ]
    },
    "605": {
        "db_id": "tvshow",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Language, COUNT(*) AS number_of_tv_channel\nFROM TV_Channel\nGROUP BY Language\nORDER BY number_of_tv_channel ASC\nLIMIT 1;"
        ]
    },
    "606": {
        "db_id": "tvshow",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Language, COUNT(*) as channel_count\nFROM TV_Channel\nGROUP BY Language\nORDER BY channel_count ASC\nLIMIT 1;"
        ]
    },
    "607": {
        "db_id": "tvshow",
        "question": "List each language and the number of TV Channels using it.",
        "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;"
        ]
    },
    "608": {
        "db_id": "tvshow",
        "question": "For each language, list the number of TV Channels that use it.",
        "ground_truth": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;"
        ]
    },
    "609": {
        "db_id": "tvshow",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'"
        ]
    },
    "610": {
        "db_id": "tvshow",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.series_name FROM TV_Channel c JOIN Cartoon ct ON c.id = ct.Channel WHERE ct.Title = 'The Rise of the Blue Beetle'"
        ],
        "rule_sql": []
    },
    "611": {
        "db_id": "tvshow",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "ground_truth": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Title FROM Cartoon c JOIN TV_Channel t ON c.Channel = t.id WHERE t.series_name = 'Sky Radio'"
        ]
    },
    "612": {
        "db_id": "tvshow",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "ground_truth": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Title FROM Cartoon c JOIN TV_Channel t ON c.Channel = t.id WHERE t.series_name = 'Sky Radio'"
        ]
    },
    "613": {
        "db_id": "tvshow",
        "question": "List the Episode of all TV series sorted by rating.",
        "ground_truth": "SELECT Episode FROM TV_series ORDER BY rating",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Episode FROM TV_series ORDER BY Rating;"
        ]
    },
    "614": {
        "db_id": "tvshow",
        "question": "What are all of the episodes ordered by ratings?",
        "ground_truth": "SELECT Episode FROM TV_series ORDER BY rating",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC;"
        ],
        "rule_sql": []
    },
    "615": {
        "db_id": "tvshow",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "ground_truth": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC LIMIT 3;"
        ]
    },
    "616": {
        "db_id": "tvshow",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "ground_truth": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC LIMIT 3;"
        ]
    },
    "617": {
        "db_id": "tvshow",
        "question": "What is minimum and maximum share of TV series?",
        "ground_truth": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(Share) AS min_share, MAX(Share) AS max_share FROM TV_series;"
        ],
        "rule_sql": []
    },
    "618": {
        "db_id": "tvshow",
        "question": "What is the maximum and minimum share for the TV series?",
        "ground_truth": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM TV_series;"
        ]
    },
    "619": {
        "db_id": "tvshow",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "ground_truth": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'"
        ]
    },
    "620": {
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "ground_truth": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \"Original_air_date\" FROM \"Cartoon\" WHERE \"Title\" = 'A Love of a Lifetime';"
        ],
        "rule_sql": []
    },
    "621": {
        "db_id": "tvshow",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "ground_truth": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT \"Weekly_Rank\" FROM \"TV_series\" WHERE \"Episode\" = 'A Love of a Lifetime';"
        ]
    },
    "622": {
        "db_id": "tvshow",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "ground_truth": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Weekly_Rank FROM TV_series t JOIN Cartoon c ON t.Episode = c.Title WHERE c.Title = 'A Love of a Lifetime'"
        ],
        "rule_sql": []
    },
    "623": {
        "db_id": "tvshow",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'"
        ]
    },
    "624": {
        "db_id": "tvshow",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "ground_truth": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.series_name FROM TV_Channel t JOIN TV_series ts ON t.id = ts.Channel WHERE ts.Episode = 'A Love of a Lifetime'"
        ]
    },
    "625": {
        "db_id": "tvshow",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "ground_truth": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'"
        ]
    },
    "626": {
        "db_id": "tvshow",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "ground_truth": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Episode FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')"
        ]
    },
    "627": {
        "db_id": "tvshow",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "ground_truth": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Directed_by, COUNT(*) AS number_of_cartoons FROM Cartoon GROUP BY Directed_by;"
        ],
        "rule_sql": []
    },
    "628": {
        "db_id": "tvshow",
        "question": "How many cartoons did each director create?",
        "ground_truth": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Directed_by, COUNT(*) AS cartoon_count FROM Cartoon GROUP BY Directed_by ORDER BY cartoon_count DESC;"
        ],
        "rule_sql": []
    },
    "629": {
        "db_id": "tvshow",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "ground_truth": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Production_code, c.Channel FROM Cartoon c ORDER BY c.Original_air_date DESC LIMIT 1;"
        ]
    },
    "630": {
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "ground_truth": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;"
        ]
    },
    "631": {
        "db_id": "tvshow",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "ground_truth": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';"
        ],
        "rule_sql": []
    },
    "632": {
        "db_id": "tvshow",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "ground_truth": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'"
        ],
        "rule_sql": []
    },
    "633": {
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "ground_truth": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey';"
        ]
    },
    "634": {
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "ground_truth": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Country\nFROM TV_Channel c\nJOIN Cartoon ct ON c.id = ct.Channel\nWHERE ct.Written_by = 'Todd Casey'"
        ]
    },
    "635": {
        "db_id": "tvshow",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "ground_truth": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.Country\nFROM TV_Channel c\nWHERE c.id NOT IN (\n    SELECT DISTINCT ca.Channel\n    FROM Cartoon ca\n    WHERE ca.Written_by = 'Todd Casey'\n)"
        ],
        "rule_sql": []
    },
    "636": {
        "db_id": "tvshow",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "ground_truth": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Country\nFROM TV_Channel c\nWHERE c.Country NOT IN (\n    SELECT DISTINCT c2.Country\n    FROM TV_Channel c2\n    JOIN Cartoon cr ON c2.id = cr.Channel\n    WHERE cr.Written_by = 'Todd Casey'\n)"
        ]
    },
    "637": {
        "db_id": "tvshow",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "ground_truth": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT tc.series_name, tc.Country\nFROM TV_Channel tc\nJOIN Cartoon c ON tc.id = c.Channel\nWHERE c.Directed_by IN ('Ben Jones', 'Michael Chang')"
        ],
        "rule_sql": []
    },
    "638": {
        "db_id": "tvshow",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "ground_truth": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT tc.series_name, tc.Country\nFROM TV_Channel tc\nJOIN Cartoon c1 ON tc.id = c1.Channel\nJOIN Cartoon c2 ON tc.id = c2.Channel\nWHERE c1.Directed_by = 'Ben Jones' AND c2.Directed_by = 'Michael Chang';"
        ]
    },
    "639": {
        "db_id": "tvshow",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "ground_truth": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';"
        ]
    },
    "640": {
        "db_id": "tvshow",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "ground_truth": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';"
        ]
    },
    "641": {
        "db_id": "tvshow",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "ground_truth": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)"
        ],
        "rule_sql": []
    },
    "642": {
        "db_id": "tvshow",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "ground_truth": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2"
        ],
        "rule_sql": []
    },
    "643": {
        "db_id": "tvshow",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "ground_truth": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
        ]
    },
    "644": {
        "db_id": "tvshow",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "ground_truth": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
        ]
    },
    "645": {
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "ground_truth": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT tc.Package_Option \nFROM TV_Channel tc \nWHERE tc.id NOT IN (\n    SELECT DISTINCT c.Channel \n    FROM Cartoon c \n    WHERE c.Directed_by = 'Ben Jones'\n)"
        ]
    },
    "646": {
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "ground_truth": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT tc.Package_Option\nFROM TV_Channel tc\nWHERE tc.id NOT IN (\n    SELECT DISTINCT c.Channel\n    FROM Cartoon c\n    WHERE c.Directed_by = 'Ben Jones'\n)"
        ]
    },
    "647": {
        "db_id": "poker_player",
        "question": "How many poker players are there?",
        "ground_truth": "SELECT count(*) FROM poker_player",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM poker_player"
        ]
    },
    "648": {
        "db_id": "poker_player",
        "question": "Count the number of poker players.",
        "ground_truth": "SELECT count(*) FROM poker_player",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM poker_player;"
        ]
    },
    "649": {
        "db_id": "poker_player",
        "question": "List the earnings of poker players in descending order.",
        "ground_truth": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;"
        ]
    },
    "650": {
        "db_id": "poker_player",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "ground_truth": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;"
        ]
    },
    "651": {
        "db_id": "poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "ground_truth": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Final_Table_Made, Best_Finish FROM poker_player"
        ]
    },
    "652": {
        "db_id": "poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "ground_truth": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Final_Table_Made, Best_Finish FROM poker_player"
        ]
    },
    "653": {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players?",
        "ground_truth": "SELECT avg(Earnings) FROM poker_player",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;"
        ]
    },
    "654": {
        "db_id": "poker_player",
        "question": "Return the average earnings across all poker players.",
        "ground_truth": "SELECT avg(Earnings) FROM poker_player",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player"
        ]
    },
    "655": {
        "db_id": "poker_player",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "ground_truth": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;"
        ]
    },
    "656": {
        "db_id": "poker_player",
        "question": "Return the money rank of the player with the greatest earnings.",
        "ground_truth": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
        ]
    },
    "657": {
        "db_id": "poker_player",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "ground_truth": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;"
        ]
    },
    "658": {
        "db_id": "poker_player",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "ground_truth": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"
        ]
    },
    "659": {
        "db_id": "poker_player",
        "question": "What are the names of poker players?",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)"
        ]
    },
    "660": {
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID"
        ]
    },
    "661": {
        "db_id": "poker_player",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000"
        ]
    },
    "662": {
        "db_id": "poker_player",
        "question": "Give the names of poker players who have earnings above 300000.",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000"
        ]
    },
    "663": {
        "db_id": "poker_player",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;"
        ]
    },
    "664": {
        "db_id": "poker_player",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name\nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID\nORDER BY pp.Final_Table_Made ASC;"
        ]
    },
    "665": {
        "db_id": "poker_player",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "ground_truth": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Birth_Date\nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID\nWHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);"
        ]
    },
    "666": {
        "db_id": "poker_player",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "ground_truth": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Birth_Date \nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID\nWHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)"
        ]
    },
    "667": {
        "db_id": "poker_player",
        "question": "What is the money rank of the tallest poker player?",
        "ground_truth": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT pp.Money_Rank\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE p.Height = (SELECT MAX(Height) FROM people)\nLIMIT 1;"
        ]
    },
    "668": {
        "db_id": "poker_player",
        "question": "Return the money rank of the poker player with the greatest height.",
        "ground_truth": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT pp.Money_Rank \nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY p.Height DESC\nLIMIT 1;"
        ]
    },
    "669": {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "ground_truth": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(pp.Earnings) AS average_earnings\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE p.Height > 200"
        ]
    },
    "670": {
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "ground_truth": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(pp.Earnings) AS Average_Earnings\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE p.Height > 200"
        ]
    },
    "671": {
        "db_id": "poker_player",
        "question": "What are the names of poker players in descending order of earnings?",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;"
        ]
    },
    "672": {
        "db_id": "poker_player",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC"
        ]
    },
    "673": {
        "db_id": "poker_player",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "ground_truth": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY Nationality ORDER BY Number_of_People DESC;"
        ]
    },
    "674": {
        "db_id": "poker_player",
        "question": "How many people are there of each nationality?",
        "ground_truth": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality;"
        ]
    },
    "675": {
        "db_id": "poker_player",
        "question": "What is the most common nationality of people?",
        "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Nationality, COUNT(*) as count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "676": {
        "db_id": "poker_player",
        "question": "Give the nationality that is most common across all people.",
        "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Nationality, COUNT(*) as count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "677": {
        "db_id": "poker_player",
        "question": "What are the nationalities that are shared by at least two people?",
        "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2"
        ]
    },
    "678": {
        "db_id": "poker_player",
        "question": "Return the nationalities for which there are two or more people.",
        "ground_truth": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2"
        ]
    },
    "679": {
        "db_id": "poker_player",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "ground_truth": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;"
        ]
    },
    "680": {
        "db_id": "poker_player",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "ground_truth": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;"
        ]
    },
    "681": {
        "db_id": "poker_player",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "ground_truth": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM people WHERE Nationality != 'Russia'"
        ]
    },
    "682": {
        "db_id": "poker_player",
        "question": "What are the names of people who are not from Russia?",
        "ground_truth": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM people WHERE Nationality != 'Russia'"
        ]
    },
    "683": {
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "ground_truth": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL"
        ]
    },
    "684": {
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "ground_truth": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL"
        ]
    },
    "685": {
        "db_id": "poker_player",
        "question": "How many distinct nationalities are there?",
        "ground_truth": "SELECT count(DISTINCT Nationality) FROM people",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Nationality) FROM people;"
        ]
    },
    "686": {
        "db_id": "poker_player",
        "question": "Count the number of different nationalities.",
        "ground_truth": "SELECT count(DISTINCT Nationality) FROM people",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Nationality) FROM people;"
        ]
    },
    "687": {
        "db_id": "voter_1",
        "question": "How many states are there?",
        "ground_truth": "SELECT count(*) FROM area_code_state",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;"
        ],
        "rule_sql": []
    },
    "688": {
        "db_id": "voter_1",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "ground_truth": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;"
        ]
    },
    "689": {
        "db_id": "voter_1",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "ground_truth": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT vote_id, phone_number, state FROM VOTES;"
        ]
    },
    "690": {
        "db_id": "voter_1",
        "question": "What are the maximum and minimum values of area codes?",
        "ground_truth": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;"
        ]
    },
    "691": {
        "db_id": "voter_1",
        "question": "What is last date created of votes from the state 'CA'?",
        "ground_truth": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';"
        ]
    },
    "692": {
        "db_id": "voter_1",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "ground_truth": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';"
        ]
    },
    "693": {
        "db_id": "voter_1",
        "question": "What are the distinct states and create time of all votes?",
        "ground_truth": "SELECT DISTINCT state ,  created FROM votes",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT state, created FROM VOTES;"
        ]
    },
    "694": {
        "db_id": "voter_1",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "ground_truth": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.contestant_number, c.contestant_name\nFROM CONTESTANTS c\nJOIN VOTES v ON c.contestant_number = v.contestant_number\nGROUP BY c.contestant_number, c.contestant_name\nHAVING COUNT(v.vote_id) >= 2;"
        ]
    },
    "695": {
        "db_id": "voter_1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "ground_truth": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.contestant_number, c.contestant_name\nFROM CONTESTANTS c\nJOIN VOTES v ON c.contestant_number = v.contestant_number\nGROUP BY c.contestant_number, c.contestant_name\nORDER BY COUNT(v.vote_id) ASC\nLIMIT 1;"
        ]
    },
    "696": {
        "db_id": "voter_1",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "ground_truth": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS number_of_votes FROM VOTES WHERE state = 'NY' OR state = 'CA'"
        ]
    },
    "697": {
        "db_id": "voter_1",
        "question": "How many contestants did not get voted?",
        "ground_truth": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS contestants_without_votes\nFROM CONTESTANTS c\nLEFT JOIN VOTES v ON c.contestant_number = v.contestant_number\nWHERE v.vote_id IS NULL;"
        ]
    },
    "698": {
        "db_id": "voter_1",
        "question": "What is the area code in which the most voters voted?",
        "ground_truth": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT ac.area_code\nFROM AREA_CODE_STATE ac\nJOIN VOTES v ON ac.state = v.state\nGROUP BY ac.area_code\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "699": {
        "db_id": "voter_1",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "ground_truth": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT v.created, v.state, v.phone_number \nFROM VOTES v\nJOIN CONTESTANTS c ON v.contestant_number = c.contestant_number\nWHERE c.contestant_name = 'Tabatha Gehling'"
        ]
    },
    "700": {
        "db_id": "voter_1",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "ground_truth": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT acs.area_code\nFROM AREA_CODE_STATE acs\nJOIN VOTES v1 ON acs.state = v1.state\nJOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number\nJOIN VOTES v2 ON acs.state = v2.state\nJOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number\nWHERE c1.contestant_name = 'Tabatha Gehling'\nAND c2.contestant_name = 'Kelly Clauss';"
        ]
    },
    "701": {
        "db_id": "voter_1",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "ground_truth": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'"
        ]
    },
    "702": {
        "db_id": "world_1",
        "question": "What are the names of all the countries that became independent after 1950?",
        "ground_truth": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country WHERE IndepYear > 1950"
        ]
    },
    "703": {
        "db_id": "world_1",
        "question": "Give the names of the nations that were founded after 1950.",
        "ground_truth": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country WHERE IndepYear > 1950"
        ]
    },
    "704": {
        "db_id": "world_1",
        "question": "How many countries have a republic as their form of government?",
        "ground_truth": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';"
        ],
        "rule_sql": []
    },
    "705": {
        "db_id": "world_1",
        "question": "How many countries have governments that are republics?",
        "ground_truth": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';"
        ],
        "rule_sql": []
    },
    "706": {
        "db_id": "world_1",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'"
        ]
    },
    "707": {
        "db_id": "world_1",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';"
        ]
    },
    "708": {
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "ground_truth": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Continent FROM country c WHERE c.Name = 'Anguilla';"
        ]
    },
    "709": {
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?",
        "ground_truth": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Continent FROM country c WHERE c.Name = 'Anguilla';"
        ]
    },
    "710": {
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?",
        "ground_truth": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Region FROM city ct JOIN country c ON ct.CountryCode = c.Code WHERE ct.Name = 'Kabul';"
        ]
    },
    "711": {
        "db_id": "world_1",
        "question": "What region is Kabul in?",
        "ground_truth": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Region FROM city ct JOIN country c ON ct.CountryCode = c.Code WHERE ct.Name = 'Kabul';"
        ]
    },
    "712": {
        "db_id": "world_1",
        "question": "Which language is the most popular in Aruba?",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cl.Language \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Name = 'Aruba'\nORDER BY cl.Percentage DESC\nLIMIT 1;"
        ]
    },
    "713": {
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cl.Language \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Name = 'Aruba' \nAND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code)"
        ]
    },
    "714": {
        "db_id": "world_1",
        "question": "What are the population and life expectancies in Brazil?",
        "ground_truth": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'"
        ]
    },
    "715": {
        "db_id": "world_1",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "ground_truth": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';"
        ]
    },
    "716": {
        "db_id": "world_1",
        "question": "What are the region and population of Angola?",
        "ground_truth": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Region, Population FROM country WHERE Name = 'Angola';"
        ],
        "rule_sql": []
    },
    "717": {
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "ground_truth": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Region, Population FROM country WHERE Name = 'Angola';"
        ],
        "rule_sql": []
    },
    "718": {
        "db_id": "world_1",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';"
        ]
    },
    "719": {
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';"
        ]
    },
    "720": {
        "db_id": "world_1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;"
        ]
    },
    "721": {
        "db_id": "world_1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;"
        ]
    },
    "722": {
        "db_id": "world_1",
        "question": "What is the total population and maximum GNP in Asia?",
        "ground_truth": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';"
        ]
    },
    "723": {
        "db_id": "world_1",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "ground_truth": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS largest_gnp FROM country WHERE country.Continent = 'Asia';"
        ]
    },
    "724": {
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?",
        "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';"
        ]
    },
    "725": {
        "db_id": "world_1",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'"
        ],
        "rule_sql": []
    },
    "726": {
        "db_id": "world_1",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')"
        ]
    },
    "727": {
        "db_id": "world_1",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "ground_truth": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')"
        ]
    },
    "728": {
        "db_id": "world_1",
        "question": "How many people live in Gelderland district?",
        "ground_truth": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(Population) FROM city WHERE District = 'Gelderland';"
        ]
    },
    "729": {
        "db_id": "world_1",
        "question": "What is the total population of Gelderland district?",
        "ground_truth": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland';"
        ]
    },
    "730": {
        "db_id": "world_1",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "ground_truth": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(GNP) as AverageGNP, SUM(Population) as TotalPopulation FROM country WHERE GovernmentForm = 'US territory';"
        ],
        "rule_sql": []
    },
    "731": {
        "db_id": "world_1",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "ground_truth": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(GNP) AS mean_gnp, SUM(Population) AS total_population\nFROM country\nWHERE Name LIKE '%United States%' OR Code = 'USA' OR GovernmentForm LIKE '%US territory%' OR GovernmentForm LIKE '%US%'"
        ],
        "rule_sql": []
    },
    "732": {
        "db_id": "world_1",
        "question": "How many unique languages are spoken in the world?",
        "ground_truth": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Language) FROM countrylanguage;"
        ]
    },
    "733": {
        "db_id": "world_1",
        "question": "What is the number of distinct languages used around the world?",
        "ground_truth": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Language) FROM countrylanguage;"
        ]
    },
    "734": {
        "db_id": "world_1",
        "question": "How many type of governments are in Africa?",
        "ground_truth": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';"
        ]
    },
    "735": {
        "db_id": "world_1",
        "question": "How many different forms of governments are there in Africa?",
        "ground_truth": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';"
        ]
    },
    "736": {
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "ground_truth": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS total_languages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')"
        ]
    },
    "737": {
        "db_id": "world_1",
        "question": "How many languages are spoken in Aruba?",
        "ground_truth": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Aruba';"
        ]
    },
    "738": {
        "db_id": "world_1",
        "question": "How many official languages does Afghanistan have?",
        "ground_truth": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'"
        ]
    },
    "739": {
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?",
        "ground_truth": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'"
        ]
    },
    "740": {
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Code, c.Name\nORDER BY COUNT(cl.Language) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "741": {
        "db_id": "world_1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name \nFROM country c\nJOIN (\n    SELECT CountryCode, COUNT(Language) as language_count\n    FROM countrylanguage\n    GROUP BY CountryCode\n    ORDER BY language_count DESC\n    LIMIT 1\n) cl ON c.Code = cl.CountryCode;"
        ],
        "rule_sql": []
    },
    "742": {
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "ground_truth": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Continent, COUNT(DISTINCT cl.Language) AS language_count\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY language_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "743": {
        "db_id": "world_1",
        "question": "Which continent speaks the most languages?",
        "ground_truth": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Continent, COUNT(DISTINCT cl.Language) AS LanguageCount\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY LanguageCount DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "744": {
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?",
        "ground_truth": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM country c\nWHERE EXISTS (\n    SELECT 1 \n    FROM countrylanguage cl1 \n    WHERE cl1.CountryCode = c.Code \n    AND cl1.Language = 'English'\n) \nAND EXISTS (\n    SELECT 1 \n    FROM countrylanguage cl2 \n    WHERE cl2.CountryCode = c.Code \n    AND cl2.Language = 'Dutch'\n)"
        ]
    },
    "745": {
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?",
        "ground_truth": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT c.Code) \nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English'\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'Dutch'"
        ]
    },
    "746": {
        "db_id": "world_1",
        "question": "What are the names of nations speak both English and French?",
        "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name \nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode\nWHERE cl1.Language = 'English' \nAND cl2.Language = 'French'"
        ]
    },
    "747": {
        "db_id": "world_1",
        "question": "Give the names of nations that speak both English and French.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name \nFROM country c\nWHERE c.Code IN (\n    SELECT cl1.CountryCode \n    FROM countrylanguage cl1 \n    WHERE cl1.Language = 'English'\n) \nAND c.Code IN (\n    SELECT cl2.CountryCode \n    FROM countrylanguage cl2 \n    WHERE cl2.Language = 'French'\n)"
        ]
    },
    "748": {
        "db_id": "world_1",
        "question": "What are the names of nations where both English and French are official languages?",
        "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name \nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'"
        ]
    },
    "749": {
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name \nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'\nORDER BY c.Name;"
        ]
    },
    "750": {
        "db_id": "world_1",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "ground_truth": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT c.Continent) \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Chinese'"
        ]
    },
    "751": {
        "db_id": "world_1",
        "question": "How many continents speak Chinese?",
        "ground_truth": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT c.Continent) \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Chinese'"
        ]
    },
    "752": {
        "db_id": "world_1",
        "question": "What are the regions that use English or Dutch?",
        "ground_truth": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Region \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('English', 'Dutch')"
        ]
    },
    "753": {
        "db_id": "world_1",
        "question": "Which regions speak Dutch or English?",
        "ground_truth": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Region \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('Dutch', 'English')\nORDER BY c.Region;"
        ]
    },
    "754": {
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "ground_truth": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.Name \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.IsOfficial = 'T' AND cl.Language IN ('English', 'Dutch')\nORDER BY c.Name;"
        ],
        "rule_sql": []
    },
    "755": {
        "db_id": "world_1",
        "question": "Which countries have either English or Dutch as an official language?",
        "ground_truth": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.Name \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.IsOfficial = 'T' AND cl.Language IN ('English', 'Dutch')\nORDER BY c.Name;"
        ],
        "rule_sql": []
    },
    "756": {
        "db_id": "world_1",
        "question": "Which language is the most popular on the Asian continent?",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Continent = 'Asia'\nGROUP BY cl.Language\nORDER BY SUM(cl.Percentage * c.Population / 100) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "757": {
        "db_id": "world_1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cl.Language, COUNT(DISTINCT c.Code) AS num_countries\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Continent = 'Asia'\nGROUP BY cl.Language\nORDER BY num_countries DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "758": {
        "db_id": "world_1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.GovernmentForm LIKE '%Republic%'\nGROUP BY cl.Language\nHAVING COUNT(DISTINCT cl.CountryCode) = 1\nORDER BY cl.Language;"
        ],
        "rule_sql": []
    },
    "759": {
        "db_id": "world_1",
        "question": "What languages are only used by a single country with a republic government?",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.GovernmentForm = 'Republic'\nGROUP BY cl.Language\nHAVING COUNT(DISTINCT cl.CountryCode) = 1\nORDER BY cl.Language;"
        ]
    },
    "760": {
        "db_id": "world_1",
        "question": "Find the city with the largest population that uses English.",
        "ground_truth": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name, c.Population \nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nJOIN countrylanguage cl ON co.Code = cl.CountryCode\nWHERE cl.Language = 'English'\nORDER BY c.Population DESC\nLIMIT 1;"
        ]
    },
    "761": {
        "db_id": "world_1",
        "question": "What is the most populace city that speaks English?",
        "ground_truth": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name, c.Population\nFROM city c\nJOIN countrylanguage cl ON c.CountryCode = cl.CountryCode\nWHERE cl.Language = 'English'\nORDER BY c.Population DESC\nLIMIT 1;"
        ]
    },
    "762": {
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "ground_truth": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Population, LifeExpectancy \nFROM country \nWHERE Continent = 'Asia' \nORDER BY SurfaceArea DESC \nLIMIT 1;"
        ]
    },
    "763": {
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "ground_truth": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;"
        ]
    },
    "764": {
        "db_id": "world_1",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(c.LifeExpectancy) AS AverageLifeExpectancy\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English' AND cl.IsOfficial = 'T'\n)\nAND c.LifeExpectancy IS NOT NULL;"
        ]
    },
    "765": {
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "ground_truth": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(c.LifeExpectancy) as MeanLifeExpectancy\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English' AND cl.IsOfficial = 'T'\n)\nAND c.LifeExpectancy IS NOT NULL;"
        ]
    },
    "766": {
        "db_id": "world_1",
        "question": "What is the total number of people living in the nations that do not use English?",
        "ground_truth": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n)"
        ]
    },
    "767": {
        "db_id": "world_1",
        "question": "How many people live in countries that do not speak English?",
        "ground_truth": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode \n    FROM countrylanguage cl \n    WHERE cl.Language = 'English'\n)"
        ]
    },
    "768": {
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cl.Language \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'"
        ]
    },
    "769": {
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "ground_truth": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cl.Language \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.HeadOfState = 'Beatrix' \nAND cl.IsOfficial = 'T';"
        ]
    },
    "770": {
        "db_id": "world_1",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "ground_truth": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT cl.Language) \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.IsOfficial = 'T' \nAND c.IndepYear < 1930"
        ]
    },
    "771": {
        "db_id": "world_1",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "ground_truth": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT cl.Language) \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.IndepYear < 1930 \nAND cl.IsOfficial = 'T';"
        ]
    },
    "772": {
        "db_id": "world_1",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "ground_truth": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name \nFROM country c\nWHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) \n                       FROM country c2 \n                       WHERE c2.Continent = 'Europe')"
        ],
        "rule_sql": []
    },
    "773": {
        "db_id": "world_1",
        "question": "Which countries have greater area than that of any country in Europe?",
        "ground_truth": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name \nFROM country \nWHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"
        ],
        "rule_sql": []
    },
    "774": {
        "db_id": "world_1",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name \nFROM country c \nWHERE c.Continent = 'Africa' \nAND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')"
        ],
        "rule_sql": []
    },
    "775": {
        "db_id": "world_1",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name \nFROM country c \nWHERE c.Continent = 'Africa' \nAND c.Population < (\n    SELECT MIN(Population) \n    FROM country \n    WHERE Continent = 'Asia'\n)"
        ]
    },
    "776": {
        "db_id": "world_1",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name \nFROM country c \nWHERE c.Continent = 'Asia' \nAND c.Population > (SELECT MAX(africa.Population) FROM country africa WHERE africa.Continent = 'Africa')"
        ]
    },
    "777": {
        "db_id": "world_1",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "ground_truth": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name \nFROM country c \nWHERE c.Continent = 'Asia' \nAND c.Population > (SELECT MAX(af.Population) FROM country af WHERE af.Continent = 'Africa')"
        ],
        "rule_sql": []
    },
    "778": {
        "db_id": "world_1",
        "question": "What are the country codes for countries that do not speak English?",
        "ground_truth": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.Code \nFROM country c \nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode \n    FROM countrylanguage cl \n    WHERE cl.Language = 'English'\n)"
        ],
        "rule_sql": []
    },
    "779": {
        "db_id": "world_1",
        "question": "Return the country codes for countries that do not speak English.",
        "ground_truth": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"
        ],
        "rule_sql": []
    },
    "780": {
        "db_id": "world_1",
        "question": "What are the country codes of countries where people use languages other than English?",
        "ground_truth": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'"
        ]
    },
    "781": {
        "db_id": "world_1",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "ground_truth": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Code\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language != 'English'"
        ]
    },
    "782": {
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "ground_truth": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Code\nFROM country c\nWHERE c.GovernmentForm != 'Republic'\nAND c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n)"
        ]
    },
    "783": {
        "db_id": "world_1",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "ground_truth": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic';"
        ]
    },
    "784": {
        "db_id": "world_1",
        "question": "Which cities are in European countries where English is not the official language?",
        "ground_truth": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name \nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nLEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T'\nWHERE co.Continent = 'Europe' \nAND cl.CountryCode IS NULL\nORDER BY c.Name;"
        ]
    },
    "785": {
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "ground_truth": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Name \nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nLEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T'\nWHERE co.Continent = 'Europe' \nAND cl.CountryCode IS NULL\nORDER BY c.Name;"
        ]
    },
    "786": {
        "db_id": "world_1",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "ground_truth": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.Name \nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nJOIN countrylanguage cl ON co.Code = cl.CountryCode\nWHERE co.Continent = 'Asia' \nAND cl.Language = 'Chinese' \nAND cl.IsOfficial = 'T';"
        ],
        "rule_sql": []
    },
    "787": {
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "ground_truth": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Name \nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nJOIN countrylanguage cl ON co.Code = cl.CountryCode\nWHERE co.Continent = 'Asia' \nAND cl.Language = 'Chinese' \nAND cl.IsOfficial = 'T'"
        ]
    },
    "788": {
        "db_id": "world_1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "ground_truth": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "789": {
        "db_id": "world_1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "ground_truth": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "790": {
        "db_id": "world_1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "ground_truth": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Population, c.Name, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "791": {
        "db_id": "world_1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "ground_truth": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;"
        ]
    },
    "792": {
        "db_id": "world_1",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "ground_truth": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Code, c.Name\nHAVING COUNT(cl.Language) >= 3\nORDER BY NumberOfLanguages DESC;"
        ],
        "rule_sql": []
    },
    "793": {
        "db_id": "world_1",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "ground_truth": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Code, c.Name\nHAVING COUNT(cl.Language) > 2\nORDER BY NumberOfLanguages DESC;"
        ],
        "rule_sql": []
    },
    "794": {
        "db_id": "world_1",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "ground_truth": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT District, COUNT(*) AS NumberOfCities\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District;"
        ],
        "rule_sql": []
    },
    "795": {
        "db_id": "world_1",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "ground_truth": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT District, COUNT(*) AS CityCount\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District\nORDER BY CityCount DESC;"
        ],
        "rule_sql": []
    },
    "796": {
        "db_id": "world_1",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "ground_truth": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.GovernmentForm, SUM(c.Population) as TotalPopulation\nFROM country c\nGROUP BY c.GovernmentForm\nHAVING AVG(c.LifeExpectancy) > 72\nORDER BY TotalPopulation DESC;"
        ],
        "rule_sql": []
    },
    "797": {
        "db_id": "world_1",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "ground_truth": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.GovernmentForm, SUM(c.Population) as TotalPopulation\nFROM country c\nGROUP BY c.GovernmentForm\nHAVING AVG(c.LifeExpectancy) > 72\nORDER BY TotalPopulation DESC;"
        ],
        "rule_sql": []
    },
    "798": {
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "ground_truth": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation\nFROM country c\nGROUP BY c.Continent\nHAVING AVG(c.LifeExpectancy) < 72\nORDER BY c.Continent;"
        ],
        "rule_sql": []
    },
    "799": {
        "db_id": "world_1",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "ground_truth": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy\nFROM country c\nGROUP BY c.Continent\nHAVING AVG(c.LifeExpectancy) < 72\nORDER BY c.Continent;"
        ],
        "rule_sql": []
    },
    "800": {
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "ground_truth": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
        ]
    },
    "801": {
        "db_id": "world_1",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "ground_truth": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
        ]
    },
    "802": {
        "db_id": "world_1",
        "question": "What are names of countries with the top 3 largest population?",
        "ground_truth": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
        ]
    },
    "803": {
        "db_id": "world_1",
        "question": "Return the names of the 3 most populated countries.",
        "ground_truth": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;"
        ]
    },
    "804": {
        "db_id": "world_1",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "ground_truth": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
        ]
    },
    "805": {
        "db_id": "world_1",
        "question": "Return the names of the 3 countries with the fewest people.",
        "ground_truth": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
        ]
    },
    "806": {
        "db_id": "world_1",
        "question": "how many countries are in Asia?",
        "ground_truth": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';"
        ]
    },
    "807": {
        "db_id": "world_1",
        "question": "Count the number of countries in Asia.",
        "ground_truth": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';"
        ]
    },
    "808": {
        "db_id": "world_1",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "ground_truth": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;"
        ]
    },
    "809": {
        "db_id": "world_1",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "ground_truth": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000"
        ]
    },
    "810": {
        "db_id": "world_1",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "ground_truth": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000"
        ],
        "rule_sql": []
    },
    "811": {
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "ground_truth": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000"
        ],
        "rule_sql": []
    },
    "812": {
        "db_id": "world_1",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "ground_truth": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000"
        ]
    },
    "813": {
        "db_id": "world_1",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "ground_truth": "select name from city where population between 160000 and 900000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000"
        ]
    },
    "814": {
        "db_id": "world_1",
        "question": "Which language is spoken by the largest number of countries?",
        "ground_truth": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Language, COUNT(CountryCode) AS NumberOfCountries\nFROM countrylanguage\nGROUP BY Language\nORDER BY NumberOfCountries DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "815": {
        "db_id": "world_1",
        "question": "Give the language that is spoken in the most countries.",
        "ground_truth": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Language, COUNT(CountryCode) AS CountryCount \nFROM countrylanguage \nGROUP BY Language \nORDER BY CountryCount DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "816": {
        "db_id": "world_1",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "ground_truth": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cl.CountryCode, cl.Language, cl.Percentage\nFROM countrylanguage cl\nINNER JOIN (\n    SELECT CountryCode, MAX(Percentage) as MaxPercentage\n    FROM countrylanguage\n    GROUP BY CountryCode\n) max_percent ON cl.CountryCode = max_percent.CountryCode AND cl.Percentage = max_percent.MaxPercentage\nORDER BY cl.CountryCode;"
        ],
        "rule_sql": []
    },
    "817": {
        "db_id": "world_1",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "ground_truth": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cl.CountryCode, cl.Language\nFROM countrylanguage cl\nINNER JOIN (\n    SELECT CountryCode, MAX(Percentage) as MaxPercentage\n    FROM countrylanguage\n    GROUP BY CountryCode\n) max_percent ON cl.CountryCode = max_percent.CountryCode AND cl.Percentage = max_percent.MaxPercentage\nORDER BY cl.CountryCode;"
        ],
        "rule_sql": []
    },
    "818": {
        "db_id": "world_1",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "ground_truth": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Spanish'\nAND cl.Percentage = (\n    SELECT MAX(Percentage) \n    FROM countrylanguage \n    WHERE CountryCode = c.Code\n)"
        ],
        "rule_sql": []
    },
    "819": {
        "db_id": "world_1",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "ground_truth": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countrylanguage \nWHERE Language = 'Spanish' \nAND IsOfficial = 'T' \nAND Percentage = (SELECT MAX(Percentage) FROM countrylanguage cl2 WHERE cl2.CountryCode = countrylanguage.CountryCode)"
        ],
        "rule_sql": []
    },
    "820": {
        "db_id": "world_1",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "ground_truth": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT CountryCode\nFROM countrylanguage\nWHERE Language = 'Spanish'\nORDER BY Percentage DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "821": {
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "ground_truth": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT CountryCode \nFROM countrylanguage \nWHERE Language = 'Spanish' \nAND IsOfficial = 'T' \nAND Percentage = (\n    SELECT MAX(Percentage) \n    FROM countrylanguage cl2 \n    WHERE cl2.CountryCode = countrylanguage.CountryCode\n)"
        ],
        "rule_sql": []
    },
    "822": {
        "db_id": "orchestra",
        "question": "How many conductors are there?",
        "ground_truth": "SELECT count(*) FROM conductor",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM conductor;"
        ]
    },
    "823": {
        "db_id": "orchestra",
        "question": "Count the number of conductors.",
        "ground_truth": "SELECT count(*) FROM conductor",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM conductor;"
        ]
    },
    "824": {
        "db_id": "orchestra",
        "question": "List the names of conductors in ascending order of age.",
        "ground_truth": "SELECT Name FROM conductor ORDER BY Age ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM conductor ORDER BY Age ASC;"
        ]
    },
    "825": {
        "db_id": "orchestra",
        "question": "What are the names of conductors, ordered by age?",
        "ground_truth": "SELECT Name FROM conductor ORDER BY Age ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM conductor ORDER BY Age;"
        ]
    },
    "826": {
        "db_id": "orchestra",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "ground_truth": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM conductor WHERE Nationality != 'USA';"
        ]
    },
    "827": {
        "db_id": "orchestra",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "ground_truth": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM conductor WHERE Nationality != 'USA';"
        ]
    },
    "828": {
        "db_id": "orchestra",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "ground_truth": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.Record_Company, o.Year_of_Founded FROM orchestra o ORDER BY o.Year_of_Founded DESC;"
        ],
        "rule_sql": []
    },
    "829": {
        "db_id": "orchestra",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "ground_truth": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;"
        ]
    },
    "830": {
        "db_id": "orchestra",
        "question": "What is the average attendance of shows?",
        "ground_truth": "SELECT avg(Attendance) FROM SHOW",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Attendance) AS average_attendance FROM show;"
        ]
    },
    "831": {
        "db_id": "orchestra",
        "question": "Return the average attendance across all shows.",
        "ground_truth": "SELECT avg(Attendance) FROM SHOW",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(Attendance) AS average_attendance FROM show"
        ]
    },
    "832": {
        "db_id": "orchestra",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "ground_truth": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type != 'Live final';"
        ]
    },
    "833": {
        "db_id": "orchestra",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "ground_truth": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type != 'Live final';"
        ]
    },
    "834": {
        "db_id": "orchestra",
        "question": "How many different nationalities do conductors have?",
        "ground_truth": "SELECT count(DISTINCT Nationality) FROM conductor",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Nationality) FROM conductor"
        ]
    },
    "835": {
        "db_id": "orchestra",
        "question": "Count the number of different nationalities of conductors.",
        "ground_truth": "SELECT count(DISTINCT Nationality) FROM conductor",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Nationality) FROM conductor;"
        ]
    },
    "836": {
        "db_id": "orchestra",
        "question": "List names of conductors in descending order of years of work.",
        "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;"
        ]
    },
    "837": {
        "db_id": "orchestra",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name, Year_of_Work FROM conductor ORDER BY Year_of_Work DESC;"
        ],
        "rule_sql": []
    },
    "838": {
        "db_id": "orchestra",
        "question": "List the name of the conductor with the most years of work.",
        "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;"
        ]
    },
    "839": {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "ground_truth": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;"
        ]
    },
    "840": {
        "db_id": "orchestra",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "ground_truth": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nORDER BY c.Name, o.Orchestra;"
        ]
    },
    "841": {
        "db_id": "orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "ground_truth": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nORDER BY c.Name, o.Orchestra;"
        ]
    },
    "842": {
        "db_id": "orchestra",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;"
        ]
    },
    "843": {
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;"
        ]
    },
    "844": {
        "db_id": "orchestra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "845": {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID, c.Name\nORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "846": {
        "db_id": "orchestra",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008;"
        ]
    },
    "847": {
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "ground_truth": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT c.Name \nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008"
        ]
    },
    "848": {
        "db_id": "orchestra",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "ground_truth": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;"
        ]
    },
    "849": {
        "db_id": "orchestra",
        "question": "How many orchestras does each record company manage?",
        "ground_truth": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Record_Company, COUNT(*) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;"
        ]
    },
    "850": {
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "ground_truth": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Major_Record_Format, COUNT(*) as Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC;"
        ],
        "rule_sql": []
    },
    "851": {
        "db_id": "orchestra",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "ground_truth": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;"
        ],
        "rule_sql": []
    },
    "852": {
        "db_id": "orchestra",
        "question": "List the record company shared by the most number of orchestras.",
        "ground_truth": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(Orchestra_ID) DESC\nLIMIT 1;"
        ]
    },
    "853": {
        "db_id": "orchestra",
        "question": "What is the record company used by the greatest number of orchestras?",
        "ground_truth": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Record_Company, COUNT(*) as orchestra_count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY orchestra_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "854": {
        "db_id": "orchestra",
        "question": "List the names of orchestras that have no performance.",
        "ground_truth": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.Orchestra\nFROM orchestra o\nLEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nWHERE p.Orchestra_ID IS NULL;"
        ]
    },
    "855": {
        "db_id": "orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "ground_truth": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.Orchestra\nFROM orchestra o\nLEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nWHERE p.Orchestra_ID IS NULL;"
        ]
    },
    "856": {
        "db_id": "orchestra",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "ground_truth": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Record_Company\nFROM orchestra\nWHERE Year_of_Founded < 2003\nINTERSECT\nSELECT Record_Company\nFROM orchestra\nWHERE Year_of_Founded > 2003;"
        ]
    },
    "857": {
        "db_id": "orchestra",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "ground_truth": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT o1.Record_Company\nFROM orchestra o1\nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company\nWHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003;"
        ]
    },
    "858": {
        "db_id": "orchestra",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "ground_truth": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')"
        ]
    },
    "859": {
        "db_id": "orchestra",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "ground_truth": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')"
        ]
    },
    "860": {
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "ground_truth": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Orchestra_ID, o.Year_of_Founded\nHAVING COUNT(p.Performance_ID) > 1\nORDER BY o.Year_of_Founded;"
        ]
    },
    "861": {
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "ground_truth": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Orchestra_ID\nHAVING COUNT(p.Performance_ID) > 1\nORDER BY o.Year_of_Founded;"
        ]
    },
    "862": {
        "db_id": "network_1",
        "question": "How many high schoolers are there?",
        "ground_truth": "SELECT count(*) FROM Highschooler",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Highschooler;"
        ]
    },
    "863": {
        "db_id": "network_1",
        "question": "Count the number of high schoolers.",
        "ground_truth": "SELECT count(*) FROM Highschooler",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Highschooler;"
        ]
    },
    "864": {
        "db_id": "network_1",
        "question": "Show the names and grades of each high schooler.",
        "ground_truth": "SELECT name ,  grade FROM Highschooler",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name, grade FROM Highschooler;"
        ]
    },
    "865": {
        "db_id": "network_1",
        "question": "What are the names and grades for each high schooler?",
        "ground_truth": "SELECT name ,  grade FROM Highschooler",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name, grade FROM Highschooler;"
        ]
    },
    "866": {
        "db_id": "network_1",
        "question": "Show all the grades of the high schoolers.",
        "ground_truth": "SELECT grade FROM Highschooler",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade FROM Highschooler;"
        ]
    },
    "867": {
        "db_id": "network_1",
        "question": "What is the grade of each high schooler?",
        "ground_truth": "SELECT grade FROM Highschooler",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ID, name, grade FROM Highschooler"
        ],
        "rule_sql": []
    },
    "868": {
        "db_id": "network_1",
        "question": "What grade is Kyle in?",
        "ground_truth": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade FROM Highschooler WHERE name = 'Kyle';"
        ]
    },
    "869": {
        "db_id": "network_1",
        "question": "Return the grade for the high schooler named Kyle.",
        "ground_truth": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade FROM Highschooler WHERE name = 'Kyle';"
        ]
    },
    "870": {
        "db_id": "network_1",
        "question": "Show the names of all high schoolers in grade 10.",
        "ground_truth": "SELECT name FROM Highschooler WHERE grade  =  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name FROM Highschooler WHERE grade = 10;"
        ]
    },
    "871": {
        "db_id": "network_1",
        "question": "What are the names of all high schoolers in grade 10?",
        "ground_truth": "SELECT name FROM Highschooler WHERE grade  =  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name FROM Highschooler WHERE grade = 10"
        ]
    },
    "872": {
        "db_id": "network_1",
        "question": "Show the ID of the high schooler named Kyle.",
        "ground_truth": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT ID FROM Highschooler WHERE name = 'Kyle';"
        ]
    },
    "873": {
        "db_id": "network_1",
        "question": "What is Kyle's id?",
        "ground_truth": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT ID FROM Highschooler WHERE name = 'Kyle';"
        ]
    },
    "874": {
        "db_id": "network_1",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "ground_truth": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;"
        ]
    },
    "875": {
        "db_id": "network_1",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "ground_truth": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;"
        ]
    },
    "876": {
        "db_id": "network_1",
        "question": "Show the number of high schoolers for each grade.",
        "ground_truth": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade, COUNT(*) AS number_of_students FROM Highschooler GROUP BY grade ORDER BY grade;"
        ]
    },
    "877": {
        "db_id": "network_1",
        "question": "How many high schoolers are in each grade?",
        "ground_truth": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY grade;"
        ]
    },
    "878": {
        "db_id": "network_1",
        "question": "Which grade has the most high schoolers?",
        "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "879": {
        "db_id": "network_1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1"
        ]
    },
    "880": {
        "db_id": "network_1",
        "question": "Show me all grades that have at least 4 students.",
        "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"
        ]
    },
    "881": {
        "db_id": "network_1",
        "question": "Which grades have 4 or more high schoolers?",
        "ground_truth": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"
        ]
    },
    "882": {
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "ground_truth": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT student_id, COUNT(friend_id) AS number_of_friends FROM Friend GROUP BY student_id ORDER BY student_id;"
        ]
    },
    "883": {
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "ground_truth": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id ORDER BY student_id;"
        ]
    },
    "884": {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "ground_truth": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT h.name, COUNT(f.friend_id) AS number_of_friends\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nORDER BY h.name;"
        ],
        "rule_sql": []
    },
    "885": {
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "ground_truth": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT h.name, COUNT(f.friend_id) AS friend_count\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nORDER BY friend_count DESC;"
        ],
        "rule_sql": []
    },
    "886": {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN (\n    SELECT student_id, COUNT(friend_id) as friend_count\n    FROM Friend\n    GROUP BY student_id\n    ORDER BY friend_count DESC\n    LIMIT 1\n) f ON h.ID = f.student_id;"
        ]
    },
    "887": {
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN (\n    SELECT student_id, COUNT(friend_id) as friend_count\n    FROM Friend\n    GROUP BY student_id\n    ORDER BY friend_count DESC\n    LIMIT 1\n) f ON h.ID = f.student_id;"
        ]
    },
    "888": {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(f.friend_id) >= 3;"
        ]
    },
    "889": {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(f.friend_id) >= 3;"
        ]
    },
    "890": {
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "ground_truth": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name \nFROM Highschooler h\nJOIN Friend f ON h.ID = f.friend_id\nJOIN Highschooler kyle ON f.student_id = kyle.ID\nWHERE kyle.name = 'Kyle';"
        ]
    },
    "891": {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "ground_truth": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h2.name \nFROM Highschooler h1\nJOIN Friend f ON h1.ID = f.student_id\nJOIN Highschooler h2 ON f.friend_id = h2.ID\nWHERE h1.name = 'Kyle'"
        ]
    },
    "892": {
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "ground_truth": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS friend_count\nFROM Friend f\nJOIN Highschooler h ON f.student_id = h.ID\nWHERE h.name = 'Kyle';"
        ]
    },
    "893": {
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "ground_truth": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS friend_count\nFROM Friend f\nJOIN Highschooler h ON f.friend_id = h.ID\nWHERE h.name = 'Kyle';"
        ],
        "rule_sql": []
    },
    "894": {
        "db_id": "network_1",
        "question": "Show ids of all students who do not have any friends.",
        "ground_truth": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
        ],
        "rule_sql": []
    },
    "895": {
        "db_id": "network_1",
        "question": "What are the ids of high school students who do not have friends?",
        "ground_truth": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
        ],
        "rule_sql": []
    },
    "896": {
        "db_id": "network_1",
        "question": "Show names of all high school students who do not have any friends.",
        "ground_truth": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
        ],
        "rule_sql": []
    },
    "897": {
        "db_id": "network_1",
        "question": "What are the names of students who have no friends?",
        "ground_truth": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
        ],
        "rule_sql": []
    },
    "898": {
        "db_id": "network_1",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "ground_truth": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT h.ID\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.liked_id\nWHERE f.friend_id IS NOT NULL;"
        ]
    },
    "899": {
        "db_id": "network_1",
        "question": "What are the ids of students who both have friends and are liked?",
        "ground_truth": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT h.ID\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.liked_id"
        ]
    },
    "900": {
        "db_id": "network_1",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.liked_id\nWHERE f.friend_id IS NOT NULL"
        ]
    },
    "901": {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT h.name\nFROM Highschooler h\nWHERE h.ID IN (\n    SELECT student_id FROM Friend\n) \nAND h.ID IN (\n    SELECT liked_id FROM Likes\n);"
        ]
    },
    "902": {
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "ground_truth": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id"
        ]
    },
    "903": {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "ground_truth": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id ORDER BY student_id;"
        ]
    },
    "904": {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "ground_truth": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name, COUNT(l.liked_id) AS number_of_likes\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID, h.name\nORDER BY number_of_likes DESC;"
        ]
    },
    "905": {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "ground_truth": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name, COUNT(l.liked_id) AS like_count\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID, h.name\nORDER BY like_count DESC;"
        ]
    },
    "906": {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.liked_id\nGROUP BY h.ID, h.name\nORDER BY COUNT(l.student_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "907": {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID, h.name\nORDER BY COUNT(l.liked_id) DESC\nLIMIT 1;"
        ]
    },
    "908": {
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(l.liked_id) >= 2;"
        ]
    },
    "909": {
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "ground_truth": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID, h.name\nHAVING COUNT(l.liked_id) >= 2;"
        ]
    },
    "910": {
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nWHERE h.grade > 5\nGROUP BY h.ID, h.name\nHAVING COUNT(f.friend_id) >= 2;"
        ]
    },
    "911": {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "ground_truth": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT h.name \nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nWHERE h.grade > 5\nGROUP BY h.ID, h.name\nHAVING COUNT(f.friend_id) >= 2;"
        ]
    },
    "912": {
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "ground_truth": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS like_count FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"
        ]
    },
    "913": {
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "ground_truth": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Likes \nJOIN Highschooler ON Likes.student_id = Highschooler.ID \nWHERE Highschooler.name = 'Kyle'"
        ]
    },
    "914": {
        "db_id": "network_1",
        "question": "Find the average grade of all students who have some friends.",
        "ground_truth": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(h.grade) AS average_grade\nFROM Highschooler h\nWHERE h.ID IN (\n    SELECT DISTINCT student_id\n    FROM Friend\n)"
        ]
    },
    "915": {
        "db_id": "network_1",
        "question": "What is the average grade of students who have friends?",
        "ground_truth": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(h.grade) AS average_grade\nFROM Highschooler h\nWHERE h.ID IN (SELECT DISTINCT student_id FROM Friend);"
        ]
    },
    "916": {
        "db_id": "network_1",
        "question": "Find the minimum grade of students who have no friends.",
        "ground_truth": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
        ],
        "rule_sql": []
    },
    "917": {
        "db_id": "network_1",
        "question": "What is the lowest grade of students who do not have any friends?",
        "ground_truth": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
        ],
        "rule_sql": []
    },
    "918": {
        "db_id": "dog_kennels",
        "question": "Which states have both owners and professionals living there?",
        "ground_truth": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT o.state\nFROM Owners o\nINNER JOIN Professionals p ON o.state = p.state\nWHERE o.state IS NOT NULL AND p.state IS NOT NULL\nORDER BY o.state;"
        ]
    },
    "919": {
        "db_id": "dog_kennels",
        "question": "Find the states where both owners and professionals live.",
        "ground_truth": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT o.state\nFROM Owners o\nINNER JOIN Professionals p ON o.state = p.state"
        ]
    },
    "920": {
        "db_id": "dog_kennels",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "ground_truth": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(CAST(d.age AS REAL)) AS average_age\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE d.age IS NOT NULL AND d.age != '';"
        ],
        "rule_sql": []
    },
    "921": {
        "db_id": "dog_kennels",
        "question": "Find the average age of the dogs who went through treatments.",
        "ground_truth": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(CAST(age AS REAL)) AS average_age FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"
        ]
    },
    "922": {
        "db_id": "dog_kennels",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "ground_truth": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nWHERE p.state = 'Indiana'\n   OR p.professional_id IN (\n       SELECT t.professional_id\n       FROM Treatments t\n       GROUP BY t.professional_id\n       HAVING COUNT(t.treatment_id) > 2\n   )\nORDER BY p.professional_id;"
        ]
    },
    "923": {
        "db_id": "dog_kennels",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "ground_truth": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT professional_id, last_name, cell_number\nFROM Professionals\nWHERE state = 'Indiana' \nOR professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(*) > 2\n)"
        ]
    },
    "924": {
        "db_id": "dog_kennels",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "ground_truth": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT d.name \nFROM Dogs d\nWHERE d.dog_id NOT IN (\n    SELECT t.dog_id \n    FROM Treatments t \n    GROUP BY t.dog_id \n    HAVING SUM(t.cost_of_treatment) > 1000\n)\nORDER BY d.name;"
        ]
    },
    "925": {
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "ground_truth": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT d.name \nFROM Dogs d\nJOIN Owners o ON d.owner_id = o.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY d.dog_id, d.name\nHAVING SUM(t.cost_of_treatment) <= 1000 OR SUM(t.cost_of_treatment) IS NULL"
        ],
        "rule_sql": []
    },
    "926": {
        "db_id": "dog_kennels",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "ground_truth": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT first_name \nFROM (\n    SELECT first_name FROM Professionals\n    UNION \n    SELECT first_name FROM Owners\n) \nWHERE first_name NOT IN (SELECT name FROM Dogs WHERE name IS NOT NULL)"
        ]
    },
    "927": {
        "db_id": "dog_kennels",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "ground_truth": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT first_name \nFROM (\n    SELECT first_name FROM Professionals\n    UNION \n    SELECT first_name FROM Owners\n) \nWHERE first_name NOT IN (SELECT name FROM Dogs WHERE name IS NOT NULL)"
        ]
    },
    "928": {
        "db_id": "dog_kennels",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "ground_truth": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.professional_id, p.role_code, p.email_address\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL\nORDER BY p.professional_id;"
        ]
    },
    "929": {
        "db_id": "dog_kennels",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "ground_truth": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.professional_id, p.role_code, p.email_address\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL;"
        ]
    },
    "930": {
        "db_id": "dog_kennels",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "ground_truth": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;"
        ]
    },
    "931": {
        "db_id": "dog_kennels",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "ground_truth": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;"
        ]
    },
    "932": {
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "ground_truth": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.professional_id, p.role_code, p.first_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.role_code, p.first_name\nHAVING COUNT(t.treatment_id) >= 2;"
        ]
    },
    "933": {
        "db_id": "dog_kennels",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "ground_truth": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.professional_id, p.role_code, p.first_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.role_code, p.first_name\nHAVING COUNT(t.treatment_id) >= 2;"
        ]
    },
    "934": {
        "db_id": "dog_kennels",
        "question": "What is the name of the breed with the most dogs?",
        "ground_truth": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT b.breed_name\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_code, b.breed_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;"
        ]
    },
    "935": {
        "db_id": "dog_kennels",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "ground_truth": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT b.breed_name\nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nGROUP BY d.breed_code, b.breed_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "936": {
        "db_id": "dog_kennels",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "ground_truth": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY COUNT(t.treatment_id) DESC\nLIMIT 1;"
        ]
    },
    "937": {
        "db_id": "dog_kennels",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "ground_truth": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "938": {
        "db_id": "dog_kennels",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "ground_truth": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT tt.treatment_type_description\nFROM Treatment_Types tt\nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code\nGROUP BY tt.treatment_type_code, tt.treatment_type_description\nORDER BY SUM(t.cost_of_treatment) ASC\nLIMIT 1;"
        ]
    },
    "939": {
        "db_id": "dog_kennels",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "ground_truth": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT tt.treatment_type_description\nFROM Treatment_Types tt\nJOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code\nGROUP BY tt.treatment_type_code, tt.treatment_type_description\nORDER BY SUM(t.cost_of_treatment) ASC\nLIMIT 1;"
        ]
    },
    "940": {
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "ground_truth": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;"
        ]
    },
    "941": {
        "db_id": "dog_kennels",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "ground_truth": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;"
        ]
    },
    "942": {
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "ground_truth": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;"
        ],
        "rule_sql": []
    },
    "943": {
        "db_id": "dog_kennels",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "ground_truth": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id, p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;"
        ],
        "rule_sql": []
    },
    "944": {
        "db_id": "dog_kennels",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);"
        ],
        "rule_sql": []
    },
    "945": {
        "db_id": "dog_kennels",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);"
        ],
        "rule_sql": []
    },
    "946": {
        "db_id": "dog_kennels",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "ground_truth": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id ORDER BY t.date_of_treatment;"
        ]
    },
    "947": {
        "db_id": "dog_kennels",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "ground_truth": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;"
        ]
    },
    "948": {
        "db_id": "dog_kennels",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "ground_truth": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.cost_of_treatment, tt.treatment_type_description \nFROM Treatments t\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;"
        ]
    },
    "949": {
        "db_id": "dog_kennels",
        "question": "What are the cost and treatment type description of each treatment?",
        "ground_truth": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code"
        ]
    },
    "950": {
        "db_id": "dog_kennels",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "ground_truth": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.first_name, o.last_name, s.size_description \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Sizes s ON d.size_code = s.size_code\nORDER BY o.last_name, o.first_name;"
        ],
        "rule_sql": []
    },
    "951": {
        "db_id": "dog_kennels",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "ground_truth": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.first_name, o.last_name, s.size_description \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Sizes s ON d.size_code = s.size_code;"
        ],
        "rule_sql": []
    },
    "952": {
        "db_id": "dog_kennels",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;"
        ]
    },
    "953": {
        "db_id": "dog_kennels",
        "question": "What are each owner's first name and their dogs's name?",
        "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;"
        ]
    },
    "954": {
        "db_id": "dog_kennels",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "ground_truth": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN (\n    SELECT breed_code, COUNT(*) as breed_count\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY breed_count ASC\n    LIMIT 1\n) rarest ON d.breed_code = rarest.breed_code\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nORDER BY d.name, t.date_of_treatment;"
        ],
        "rule_sql": []
    },
    "955": {
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "ground_truth": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT d.name, t.date_of_treatment\nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE b.breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n)\nORDER BY t.date_of_treatment;"
        ]
    },
    "956": {
        "db_id": "dog_kennels",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.first_name, d.name \nFROM Dogs d\nJOIN Owners o ON d.owner_id = o.owner_id\nWHERE o.state = 'Virginia'"
        ]
    },
    "957": {
        "db_id": "dog_kennels",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "ground_truth": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT o.first_name, d.name \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia'\nORDER BY o.first_name, d.name;"
        ]
    },
    "958": {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "ground_truth": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.date_of_treatment IS NOT NULL;"
        ]
    },
    "959": {
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "ground_truth": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.date_of_treatment IS NOT NULL;"
        ]
    },
    "960": {
        "db_id": "dog_kennels",
        "question": "List the last name of the owner owning the youngest dog.",
        "ground_truth": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.last_name \nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "961": {
        "db_id": "dog_kennels",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "ground_truth": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs);"
        ],
        "rule_sql": []
    },
    "962": {
        "db_id": "dog_kennels",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "ground_truth": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
        ]
    },
    "963": {
        "db_id": "dog_kennels",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "ground_truth": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
        ]
    },
    "964": {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "ground_truth": "SELECT date_arrived ,  date_departed FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT date_arrived, date_departed FROM Dogs;"
        ]
    },
    "965": {
        "db_id": "dog_kennels",
        "question": "List the arrival date and the departure date for all the dogs.",
        "ground_truth": "SELECT date_arrived ,  date_departed FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT date_arrived, date_departed FROM Dogs;"
        ]
    },
    "966": {
        "db_id": "dog_kennels",
        "question": "How many dogs went through any treatments?",
        "ground_truth": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT dog_id) FROM Treatments;"
        ]
    },
    "967": {
        "db_id": "dog_kennels",
        "question": "Count the number of dogs that went through a treatment.",
        "ground_truth": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT dog_id) FROM Treatments;"
        ]
    },
    "968": {
        "db_id": "dog_kennels",
        "question": "How many professionals have performed any treatment to dogs?",
        "ground_truth": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT professional_id) FROM Treatments;"
        ]
    },
    "969": {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have ever treated dogs.",
        "ground_truth": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(DISTINCT professional_id) FROM Treatments;"
        ]
    },
    "970": {
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "ground_truth": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'"
        ]
    },
    "971": {
        "db_id": "dog_kennels",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "ground_truth": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';"
        ]
    },
    "972": {
        "db_id": "dog_kennels",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "ground_truth": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';"
        ]
    },
    "973": {
        "db_id": "dog_kennels",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "ground_truth": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';"
        ]
    },
    "974": {
        "db_id": "dog_kennels",
        "question": "How many dogs have an age below the average?",
        "ground_truth": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS count_below_avg_age\nFROM Dogs\nWHERE CAST(age AS REAL) < (SELECT AVG(CAST(age AS REAL)) FROM Dogs WHERE age IS NOT NULL AND age != '');"
        ]
    },
    "975": {
        "db_id": "dog_kennels",
        "question": "Count the number of dogs of an age below the average.",
        "ground_truth": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS count_below_avg_age\nFROM Dogs\nWHERE CAST(age AS REAL) < (SELECT AVG(CAST(age AS REAL)) FROM Dogs WHERE age IS NOT NULL AND age != '');"
        ]
    },
    "976": {
        "db_id": "dog_kennels",
        "question": "How much does the most recent treatment cost?",
        "ground_truth": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;"
        ]
    },
    "977": {
        "db_id": "dog_kennels",
        "question": "Show me the cost of the most recently performed treatment.",
        "ground_truth": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;"
        ]
    },
    "978": {
        "db_id": "dog_kennels",
        "question": "How many dogs have not gone through any treatment?",
        "ground_truth": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS untreated_dogs_count\nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.treatment_id IS NULL;"
        ]
    },
    "979": {
        "db_id": "dog_kennels",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "ground_truth": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS untreated_dogs_count\nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.treatment_id IS NULL;"
        ]
    },
    "980": {
        "db_id": "dog_kennels",
        "question": "How many owners temporarily do not have any dogs?",
        "ground_truth": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Owners o \nLEFT JOIN Dogs d ON o.owner_id = d.owner_id \nWHERE d.dog_id IS NULL"
        ]
    },
    "981": {
        "db_id": "dog_kennels",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "ground_truth": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS owner_count\nFROM Owners o\nLEFT JOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.dog_id IS NULL;"
        ]
    },
    "982": {
        "db_id": "dog_kennels",
        "question": "How many professionals did not operate any treatment on dogs?",
        "ground_truth": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS professionals_without_treatments\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL;"
        ]
    },
    "983": {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have not treated any dogs.",
        "ground_truth": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS number_of_professionals_without_treatments\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.treatment_id IS NULL;"
        ]
    },
    "984": {
        "db_id": "dog_kennels",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "ground_truth": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';"
        ]
    },
    "985": {
        "db_id": "dog_kennels",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "ground_truth": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';"
        ]
    },
    "986": {
        "db_id": "dog_kennels",
        "question": "What is the average age of all the dogs?",
        "ground_truth": "SELECT avg(age) FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(CAST(age AS REAL)) AS average_age FROM Dogs WHERE age IS NOT NULL AND age != '';"
        ]
    },
    "987": {
        "db_id": "dog_kennels",
        "question": "Compute the average age of all the dogs.",
        "ground_truth": "SELECT avg(age) FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT AVG(CAST(age AS REAL)) AS average_age FROM Dogs WHERE age IS NOT NULL AND age != '';"
        ]
    },
    "988": {
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "ground_truth": "SELECT max(age) FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(age) AS oldest_dog_age FROM Dogs;"
        ]
    },
    "989": {
        "db_id": "dog_kennels",
        "question": "Tell me the age of the oldest dog.",
        "ground_truth": "SELECT max(age) FROM Dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(age) AS oldest_dog_age FROM Dogs;"
        ]
    },
    "990": {
        "db_id": "dog_kennels",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "ground_truth": "SELECT charge_type ,  charge_amount FROM Charges",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT charge_type, charge_amount FROM Charges;"
        ]
    },
    "991": {
        "db_id": "dog_kennels",
        "question": "List each charge type and its amount.",
        "ground_truth": "SELECT charge_type ,  charge_amount FROM Charges",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT charge_type, charge_amount FROM Charges;"
        ]
    },
    "992": {
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "ground_truth": "SELECT max(charge_amount) FROM Charges",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;"
        ]
    },
    "993": {
        "db_id": "dog_kennels",
        "question": "What is the charge amount of the most expensive charge type?",
        "ground_truth": "SELECT max(charge_amount) FROM Charges",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;"
        ]
    },
    "994": {
        "db_id": "dog_kennels",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "ground_truth": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT email_address, cell_number, home_phone FROM Professionals;"
        ]
    },
    "995": {
        "db_id": "dog_kennels",
        "question": "What are the email, cell phone and home phone of each professional?",
        "ground_truth": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT email_address, cell_number, home_phone FROM Professionals;"
        ]
    },
    "996": {
        "db_id": "dog_kennels",
        "question": "What are all the possible breed type and size type combinations?",
        "ground_truth": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT b.breed_name, s.size_description \nFROM Breeds b\nCROSS JOIN Sizes s\nORDER BY b.breed_name, s.size_description;"
        ],
        "rule_sql": []
    },
    "997": {
        "db_id": "dog_kennels",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "ground_truth": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT b.breed_name, s.size_description \nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nJOIN Sizes s ON d.size_code = s.size_code;"
        ],
        "rule_sql": []
    },
    "998": {
        "db_id": "dog_kennels",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.first_name, tt.treatment_type_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;"
        ]
    },
    "999": {
        "db_id": "dog_kennels",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT p.first_name, tt.treatment_type_description\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;"
        ]
    },
    "1000": {
        "db_id": "singer",
        "question": "How many singers are there?",
        "ground_truth": "SELECT count(*) FROM singer",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM singer;"
        ]
    },
    "1001": {
        "db_id": "singer",
        "question": "What is the count of singers?",
        "ground_truth": "SELECT count(*) FROM singer",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) FROM singer;"
        ]
    },
    "1002": {
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;"
        ]
    },
    "1003": {
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;"
        ]
    },
    "1004": {
        "db_id": "singer",
        "question": "What are the birth year and citizenship of singers?",
        "ground_truth": "SELECT Birth_Year ,  Citizenship FROM singer",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Birth_Year, Citizenship FROM singer;"
        ]
    },
    "1005": {
        "db_id": "singer",
        "question": "What are the birth years and citizenships of the singers?",
        "ground_truth": "SELECT Birth_Year ,  Citizenship FROM singer",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Birth_Year, Citizenship FROM singer;"
        ]
    },
    "1006": {
        "db_id": "singer",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "ground_truth": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM singer WHERE Citizenship != 'France';"
        ]
    },
    "1007": {
        "db_id": "singer",
        "question": "What are the names of the singers who are not French citizens?",
        "ground_truth": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name FROM singer WHERE Citizenship != 'French' OR Citizenship IS NULL"
        ],
        "rule_sql": []
    },
    "1008": {
        "db_id": "singer",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "ground_truth": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;"
        ]
    },
    "1009": {
        "db_id": "singer",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "ground_truth": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949"
        ]
    },
    "1010": {
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"
        ]
    },
    "1011": {
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "ground_truth": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"
        ]
    },
    "1012": {
        "db_id": "singer",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "ground_truth": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;"
        ]
    },
    "1013": {
        "db_id": "singer",
        "question": "For each citizenship, how many singers are from that country?",
        "ground_truth": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;"
        ]
    },
    "1014": {
        "db_id": "singer",
        "question": "Please show the most common citizenship of singers.",
        "ground_truth": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Citizenship, COUNT(*) as count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1015": {
        "db_id": "singer",
        "question": "What is the most common singer citizenship ?",
        "ground_truth": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Citizenship, COUNT(*) as count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1016": {
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "ground_truth": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;"
        ]
    },
    "1017": {
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "ground_truth": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;"
        ]
    },
    "1018": {
        "db_id": "singer",
        "question": "Show titles of songs and names of singers.",
        "ground_truth": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID"
        ]
    },
    "1019": {
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "ground_truth": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Title, si.Name FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID;"
        ]
    },
    "1020": {
        "db_id": "singer",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "ground_truth": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Name \nFROM singer s\nJOIN song sg ON s.Singer_ID = sg.Singer_ID\nWHERE sg.Sales > 300000;"
        ]
    },
    "1021": {
        "db_id": "singer",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "ground_truth": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000"
        ]
    },
    "1022": {
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "ground_truth": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(sg.Song_ID) > 1"
        ]
    },
    "1023": {
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "ground_truth": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(sg.Song_ID) > 1"
        ]
    },
    "1024": {
        "db_id": "singer",
        "question": "Show the names of singers and the total sales of their songs.",
        "ground_truth": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;"
        ]
    },
    "1025": {
        "db_id": "singer",
        "question": "For each singer name, what is the total sales for their songs?",
        "ground_truth": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;"
        ]
    },
    "1026": {
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "ground_truth": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name \nFROM singer s \nLEFT JOIN song so ON s.Singer_ID = so.Singer_ID \nWHERE so.Song_ID IS NULL;"
        ]
    },
    "1027": {
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "ground_truth": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT s.Name AS sname FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL;"
        ]
    },
    "1028": {
        "db_id": "singer",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "ground_truth": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(*) > 1;"
        ]
    },
    "1029": {
        "db_id": "singer",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "ground_truth": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.Citizenship\nFROM singer s\nWHERE s.Birth_Year < 1945 OR s.Birth_Year > 1955\nORDER BY s.Citizenship;"
        ],
        "rule_sql": []
    },
    "1030": {
        "db_id": "real_estate_properties",
        "question": "How many available features are there in total?",
        "ground_truth": "SELECT count(*) FROM Other_Available_Features",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT COUNT(*) AS total_features FROM Other_Available_Features;"
        ]
    },
    "1031": {
        "db_id": "real_estate_properties",
        "question": "What is the feature type name of feature AirCon?",
        "ground_truth": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT rft.feature_type_name \nFROM Ref_Feature_Types rft\nJOIN Other_Available_Features oaf ON rft.feature_type_code = oaf.feature_type_code\nWHERE oaf.feature_name = 'AirCon';"
        ]
    },
    "1032": {
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "ground_truth": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 1,
        "amend_sql": [],
        "rule_sql": [
            "SELECT DISTINCT rpt.property_type_description \nFROM Properties p\nJOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code\nORDER BY rpt.property_type_description;"
        ]
    },
    "1033": {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "ground_truth": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT property_name FROM Properties WHERE (property_type_code = 'hse' OR property_type_code = 'apt') AND room_count > 1;"
        ],
        "rule_sql": []
    }
}