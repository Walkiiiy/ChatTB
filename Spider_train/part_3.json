{
    "1218": {
        "db_id": "apartment_rentals",
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "ground_truth": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "amends": [
            "Do select `date_of_birth` instead of `name` from the result set. Do reference the table as `Guests` instead of `guests` to match the correct case. Do filter on `gender_code` instead of `gender` as the appropriate column for gender identification. Do use double quotes `\"Male\"` instead of single quotes `'Male'` for the string literal value. The amended query now correctly retrieves birth dates for male guests using the proper gender code column and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"date of birth for guests with gender code 'Male'\": make sure the output order: date_of_birth. 2) When the question mentions \"guests\": \"guests\" actually means \"Guests\" in schema with exact case. 3) When the question mentions \"gender code\": \"gender code\" actually means \"gender_code\" in schema. 4) When filtering for gender code \"Male\": use the exact string literal \"Male\" with double quotes and exact case."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM guests WHERE gender = 'Male';",
            "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\";"
        ],
        "rule_sql": [
            "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth;"
        ]
    },
    "3311": {
        "db_id": "college_1",
        "question": "Find the first names of all instructors who have taught some course and the course description.",
        "ground_truth": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "amends": [
            "Do use table aliases `T2` and `T3` instead of `i` and `c`. Do select `emp_fname` and `crs_description` instead of `first_name` and `description`. Do join three tables `CLASS`, `employee`, and `course` instead of two tables `instructors` and `courses`. Do use join conditions `T1.prof_num = T2.emp_num` and `T1.crs_code = T3.crs_code` instead of `i.instructor_id = c.instructor_id`. Do remove the `WHERE c.instructor_id IS NOT NULL` filter instead of keeping it, as the join conditions already ensure non-null relationships. The amended query now correctly joins the three related tables to retrieve employee names and course descriptions based on class assignments."
        ],
        "rules": [
            "1) When answering about \"first names of instructors who have taught courses and course descriptions\": make sure the output order: T2.emp_fname, T3.crs_description\n2) When the question mentions \"first names\": \"first names\" actually means \"emp_fname in schema\"\n3) When the question mentions \"course description\": \"course description\" actually means \"crs_description in schema\"\n4) When combining three tables CLASS (T1), employee (T2), and course (T3): link rows where T1.prof_num = T2.emp_num and T1.crs_code = T3.crs_code; keep only matching pairs (inner match)\n5) When selecting from multiple joined tables: do not include unnecessary WHERE filters for non-null relationships when join conditions already ensure valid matches"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT i.first_name, c.description \nFROM instructors i \nJOIN courses c ON i.instructor_id = c.instructor_id \nWHERE c.instructor_id IS NOT NULL",
            "SELECT T2.EMP_FNAME, T3.CRS_DESCRIPTION\nFROM CLASS T1\nJOIN EMPLOYEE T2 ON T1.PROF_NUM = T2.EMP_NUM\nJOIN COURSE T3 ON T1.CRS_CODE = T3.CRS_CODE"
        ],
        "rule_sql": [
            "SELECT T2.emp_fname, T3.crs_description\nFROM CLASS T1\nINNER JOIN EMPLOYEE T2 ON T1.PROF_NUM = T2.EMP_NUM\nINNER JOIN COURSE T3 ON T1.CRS_CODE = T3.CRS_CODE;"
        ]
    },
    "2993": {
        "db_id": "sakila_1",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "ground_truth": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "amends": [
            "Do use the table name `film` instead of `films` and remove parentheses around conditions instead of keeping them. Do change the column name `length_minutes` to `LENGTH` instead of keeping the original name. Do replace the `AND` operator with `OR` logic combined with `EXCEPT` instead of using `AND` with parentheses. Do add an `EXCEPT` clause to exclude films with `replacement_cost > 200` instead of including `replacement_cost <= 200` in the WHERE clause. Do remove the `replacement_cost` filter from the main WHERE condition and handle it through set operations instead of combining it with other filters. The amended query now correctly implements set-based exclusion logic instead of the original incorrect boolean logic, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question mentions \"films\": use the exact table name \"film\" instead of \"films\". 2) When the question asks about film length: use the exact column name \"LENGTH\" instead of \"length_minutes\". 3) When the question asks for films that are either longer than 100 minutes OR rated PG: use OR logic between these conditions without parentheses. 4) When excluding films that cost more than 200 to replace: use set-based exclusion (EXCEPT) for films with replacement_cost > 200 instead of combining with AND logic. 5) When handling the replacement cost condition: keep the exact literal value 200 and exact column name \"replacement_cost\" as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title FROM films WHERE (length_minutes > 100 OR rating = 'PG') AND replacement_cost <= 200;",
            "SELECT title FROM film WHERE (length > 100 OR rating = 'PG') EXCEPT SELECT title FROM film WHERE replacement_cost > 200"
        ],
        "rule_sql": [
            "SELECT title FROM film WHERE length > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200"
        ]
    },
    "2882": {
        "db_id": "icfp_1",
        "question": "What are the papers published under the institution \"Indiana University\"?",
        "ground_truth": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "amends": [
            "Do select only `t1.title` with `DISTINCT` instead of `*` to return unique paper titles. Do join `authorship AS t2` on `t1.paperid = t2.paperid` and `inst AS t3` on `t2.instid = t3.instid` instead of querying only the `papers` table. Do filter on `t3.name = \"Indiana University\"` instead of `institution = 'Indiana University'` to correctly identify papers by institution through the authorship relationship. The amended query now properly returns distinct paper titles from Indiana University by correctly traversing the paper-author-institution relationships."
        ],
        "rules": [
            "1) When answering about papers published under an institution: make sure the output order: t1.title 2) When the question mentions \"papers published under the institution\": join papers AS t1, authorship AS t2, and inst AS t3 using the exact relationships t1.paperid = t2.paperid and t2.instid = t3.instid 3) When filtering for institution \"Indiana University\": use t3.name = \"Indiana University\" with exact double quotes and case 4) When selecting paper titles: use DISTINCT t1.title to return unique values only"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM papers WHERE institution = 'Indiana University';",
            "SELECT DISTINCT t1.title FROM Papers AS t1 JOIN Authorship AS t2 ON t1.paperID = t2.paperID JOIN Inst AS t3 ON t2.instID = t3.instID WHERE t3.name = 'Indiana University'"
        ],
        "rule_sql": [
            "SELECT DISTINCT t1.title FROM Papers AS t1 JOIN Authorship AS t2 ON t1.paperID = t2.paperID JOIN Inst AS t3 ON t2.instID = t3.instID WHERE t3.name = \"Indiana University\""
        ]
    },
    "6834": {
        "db_id": "flight_4",
        "question": "What is the name and city of the airport that the most routes end at?",
        "ground_truth": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add `T2.dst_apid` to the SELECT list instead of omitting it, and do add `routes AS T2` as a joined table instead of referencing it only in ORDER BY. Do use `JOIN` with `ON T1.apid = T2.dst_apid` instead of no join condition, and do add `GROUP BY T2.dst_apid` instead of omitting grouping. Do change ORDER BY to `count(*) DESC` instead of `routes.arrival_airport_id DESC`, and do add table aliases `T1` and `T2` instead of using unqualified column references. The amended query now correctly finds the airport with the most incoming routes by joining airports to routes and counting arrivals per destination airport."
        ],
        "rules": [
            "1) When answering about \"the airport that the most routes end at\": make sure the output order: name, city. 2) When combining airports (T1) and routes (T2) for shared entities: link rows where T1.apid = T2.dst_apid exactly as shown; keep only matching pairs (inner match). 3) When the question asks for \"count of routes ending at an airport\": compute the number of rows using T2.dst_apid as the grouping key. 4) When the question mentions \"most routes\": rank rows by count(*) in descending order and keep the first 1 row. 5) When producing output: include T2.dst_apid in the SELECT list instead of omitting it."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, city FROM airports ORDER BY routes.arrival_airport_id DESC LIMIT 1;",
            "SELECT T1.name, T1.city, T2.dst_apid\nFROM airports AS T1\nJOIN routes AS T2 ON T1.apid = T2.dst_apid\nGROUP BY T2.dst_apid\nORDER BY count(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT a.name, a.city, r.dst_apid\nFROM airports a\nINNER JOIN routes r ON a.apid = r.dst_apid\nGROUP BY r.dst_apid\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "5909": {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "ground_truth": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "amends": [
            "Do reference column `Name` instead of `name` to match the correct case sensitivity. Do reference column `How_to_Get_There` instead of `transportation` to use the correct column name for transportation information. Do use double quotes `\"bus\"` instead of single quotes `'bus'` for the string literal comparison. The amended query now correctly filters tourist attractions accessible by bus using the proper column names and string formatting."
        ],
        "rules": [
            "1) When the question asks for tourist attraction names: use column \"Name\" from table \"Tourist_Attractions\" with exact case sensitivity. 2) When filtering for attractions accessible by bus: use column \"How_to_Get_There\" from table \"Tourist_Attractions\" and compare with exact string literal \"bus\" using double quotes. 3) When the question mentions \"tourist attractions\": the relevant table is \"Tourist_Attractions\" and the name column is \"Name\" (not \"name\")."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM tourist_attractions WHERE transportation = 'bus';",
            "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE \"%bus%\";"
        ],
        "rule_sql": [
            "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There = \"bus\";"
        ]
    },
    "5166": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "ground_truth": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
        "amends": [
            "Do use the column name `Order_Quantity` instead of `quantity` to match the correct schema. Do use the column name `payment_method_code` instead of `payment_method` for the filter condition. Do use double quotes `\"MasterCard\"` instead of single quotes `'MasterCard'` for the string literal. Do use lowercase `avg` instead of uppercase `AVG` for the aggregate function, though this is a cosmetic difference. The amended query now correctly calculates the average order quantity for MasterCard payments using the proper column names and string formatting."
        ],
        "rules": [
            "1) When the question asks for average quantities ordered: use the exact column name \"Order_Quantity\" from the Invoice_Items table. 2) When filtering by payment method code \"MasterCard\": use the exact column name \"payment_method_code\" from the Invoices table and the exact string literal \"MasterCard\" with double quotes. 3) When combining data from Invoice_Items and Invoices tables: link rows where the canonical keys match between these tables (though the specific join keys are not explicitly shown in the amends, the schema indicates these are related tables). 4) When computing the average: use the lowercase \"avg\" function to calculate the average of Order_Quantity values."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(quantity) FROM invoices WHERE payment_method = 'MasterCard';",
            "SELECT AVG(Order_Quantity) AS average_quantity FROM Invoices WHERE payment_method_code = \"MasterCard\""
        ],
        "rule_sql": [
            "SELECT AVG(Order_Quantity) \nFROM Invoice_Items ii\nJOIN Invoices i ON ii.Invoice_ID = i.Invoice_ID\nWHERE i.payment_method_code = \"MasterCard\""
        ]
    },
    "5331": {
        "db_id": "manufactory_1",
        "question": "What is the average price across all products?",
        "ground_truth": "SELECT avg(price) FROM products",
        "amends": [
            "Do use `avg(price)` instead of `SUM(price)` for calculating the average price instead of the total sum. The amended query now correctly computes the average product price instead of the total sum, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"average price\": use the average function on the \"price\" column instead of summing it. 2) When calculating averages across all products: compute the average of the \"price\" column from the products table without any grouping."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(price) FROM products;",
            "SELECT AVG(Price) AS AveragePrice FROM Products;"
        ],
        "rule_sql": [
            "SELECT AVG(Price) AS AveragePrice FROM Products;"
        ]
    },
    "5483": {
        "db_id": "voter_2",
        "question": "What are the first and last names of all the female students who have president votes?",
        "ground_truth": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "amends": [
            "Do use `DISTINCT` instead of omitting it to eliminate duplicate rows. Do select `Fname` and `LName` instead of `first_name` and `last_name` to match the correct column names. Do join `VOTING_RECORD` as `T2` on `T1.StuID = T2.President_VOTE` instead of filtering directly on `president_votes > 0` to properly relate the tables through the foreign key relationship. Do filter on `T1.sex = \"F\"` instead of `gender = 'male'` to select female students instead of male students. The amended query now correctly identifies female students who have voted for president by joining the appropriate tables and using the proper column references."
        ],
        "rules": [
            "1) When the question asks for first and last names: select \"Fname\" and \"LName\" from table Student (T1) instead of first_name and last_name. 2) When identifying female students: filter on T1.sex = \"F\" instead of gender = 'male'. 3) When finding students who have president votes: join table VOTING_RECORD as T2 on T1.StuID = T2.President_VOTE instead of filtering directly on president_votes > 0. 4) When eliminating duplicate rows: use DISTINCT to ensure unique results. 5) When combining Student and VOTING_RECORD tables: link rows where T1.StuID equals T2.President_VOTE and keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name FROM students WHERE gender = 'male' AND president_votes > 0",
            "SELECT DISTINCT T1.Fname, T1.LName \nFROM Student T1 \nJOIN Voting_record T2 ON T1.StuID = T2.President_Vote \nWHERE T1.Sex = 'F'"
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.Fname, T1.LName FROM Student T1 JOIN Voting_record T2 ON T1.StuID = T2.President_Vote WHERE T1.Sex = 'F'"
        ]
    },
    "2328": {
        "db_id": "csu_1",
        "question": "Find all the campuses opened in 1958.",
        "ground_truth": "SELECT campus FROM campuses WHERE YEAR  =  1958",
        "amends": [
            "Do select only `campus` instead of all columns with `*`. Do filter on `YEAR = 1958` using integer comparison instead of `opened = '1958'` with string comparison. Do remove the single quotes around the year value to treat it as a numeric literal instead of a string. The amended query now correctly filters campuses by the year 1958 using proper numeric comparison and returns only the campus column as specified."
        ],
        "rules": [
            "1) When selecting columns for the result: return only the \"campus\" column instead of all columns. 2) When filtering by year opened: use numeric comparison with YEAR = 1958 instead of string comparison with '1958'. 3) When handling year values: treat 1958 as a numeric literal without quotes rather than as a string literal."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM campuses WHERE opened = '1958';",
            "SELECT Campus FROM Campuses WHERE Year = 1958"
        ],
        "rule_sql": [
            "SELECT Campus FROM Campuses WHERE Year = 1958"
        ]
    },
    "1647": {
        "db_id": "wedding",
        "question": "Show all countries and the number of people from each country.",
        "ground_truth": "SELECT country ,  count(*) FROM people GROUP BY country",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT country, COUNT(*) FROM people GROUP BY country;"
        ],
        "rule_sql": [
            "SELECT Country, COUNT(*) AS Number_of_People FROM people GROUP BY Country;"
        ]
    },
    "4147": {
        "db_id": "film_rank",
        "question": "What are the titles of films that do not have a film market estimation?",
        "ground_truth": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
        "amends": [
            "Do reference the `Title` column instead of `title` and use the `film` table instead of `films`. Do change the filter to use `Film_ID NOT IN` with a subquery against `film_market_estimation` instead of checking `film_market_estimation IS NULL` directly on the main table. Do add a correlated subquery to properly identify films without market estimation records instead of attempting to check a NULL condition on a column that doesn't exist in the main table. The amended query now correctly identifies films that lack corresponding entries in the film_market_estimation table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for film titles: use the exact column name \"Title\" from the film table, not \"title\". 2) When checking for films without market estimation: use the film table (T1) and check for Film_ID values that are not present in the film_market_estimation table using a NOT IN subquery, rather than checking for NULL values directly. 3) When combining tables for existence checks: use the canonical key Film_ID to link the film table with the film_market_estimation table for proper correlation."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title FROM films WHERE film_market_estimation IS NULL;",
            "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
        ],
        "rule_sql": [
            "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
        ]
    },
    "557": {
        "db_id": "store_1",
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "ground_truth": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
        "amends": [
            "Do use `first_name` and `last_name` instead of `FirstName` and `LastName` for column names. Do use table aliases `T1` and `T2` instead of `c` and `i` for better clarity. Do join on `T2.customer_id = T1.id` instead of `c.CustomerId = i.CustomerId` to correctly reference the primary/foreign key relationship. Do order by `total` instead of `i.Total ASC` to use the column directly without table prefix and remove the explicit `ASC` since it's the default. The amended query now correctly retrieves customer names ordered by invoice totals with proper join conditions and column references."
        ],
        "rules": [
            "1) When answering about \"customers first and last name of 10 least expensive invoices\": make sure the output order: T1.first_name, T1.last_name. 2) When the question mentions \"least expensive invoices\": order rows by T2.total in ascending direction and keep the first 10 rows. 3) When combining T1 (customers) and T2 (invoices) for shared entities: link rows where T2.customer_id = T1.id exactly as shown in the amends; keep only matching pairs (inner match). 4) When choosing identifier delimiters: do not replace the unquoted column names first_name and last_name with quoted forms or different casing."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT c.FirstName, c.LastName \nFROM customers c\nJOIN invoices i ON c.CustomerId = i.CustomerId\nORDER BY i.Total ASC\nLIMIT 10;",
            "SELECT T1.first_name, T1.last_name\nFROM customers T1\nJOIN invoices T2 ON T2.customer_id = T1.id\nORDER BY T2.total\nLIMIT 10"
        ],
        "rule_sql": [
            "SELECT c.first_name, c.last_name\nFROM customers c\nINNER JOIN invoices i ON i.customer_id = c.id\nORDER BY i.total ASC\nLIMIT 10"
        ]
    },
    "2009": {
        "db_id": "gas_company",
        "question": "List the main industry with highest total market value and its number of companies.",
        "ground_truth": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "amends": [
            "Do use `main_industry` instead of `industry` for the column name and grouping. Do remove the `num_companies` alias and `total_market_value` aggregation instead of including them. Do change the ORDER BY to `sum(market_value) DESC` instead of `num_companies DESC` to sort by total market value rather than company count. Do use table name `company` instead of `companies` for the FROM clause. The amended query now correctly identifies the industry with the highest total market value rather than the one with the most companies, matching the RIGHT_SQL's behavior.",
            "Do remove `SUM(market_value) AS total_market_value` from the SELECT list instead of including it, and do remove the alias `num_companies` from `COUNT(*)` instead of keeping it, while maintaining the same `main_industry` column and `COUNT(*)` aggregation. Do keep the same `FROM company` source and `GROUP BY main_industry` clause without changes. Do maintain the same `ORDER BY sum(market_value) DESC` and `LIMIT 1` clauses without modifications. The amended query now matches RIGHT_SQL's behavior by focusing only on counting companies per industry while ordering by market value sum."
        ],
        "rules": [
            "1) When the question asks for \"main industry\": use the exact column name \"main_industry\" from the company table for grouping and selection. 2) When the question asks for \"highest total market value\": order results by the sum of \"market_value\" in descending order and keep only the top row. 3) When the question asks for \"number of companies\": count the number of rows using the canonical key from the company table. 4) When selecting from the company data: use the exact table name \"company\" (singular) instead of \"companies\".",
            "1) When answering about \"main industry with highest total market value and its number of companies\": make sure the output order: main_industry, COUNT(*) 2) When the question asks for \"number of companies\": compute the count of rows using COUNT(*) without an alias 3) When the question asks for \"highest total market value\": rank industries by SUM(market_value) in descending order and keep only the top 1 row 4) When grouping by main_industry: organize results by main_industry and compute COUNT(*) per group 5) When ordering by market value sum: use SUM(market_value) DESC for ranking while maintaining the grouping structure"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT industry, COUNT(*) as num_companies, SUM(market_value) as total_market_value \nFROM companies \nGROUP BY industry \nORDER BY num_companies DESC \nLIMIT 1;",
            "SELECT main_industry, COUNT(*) AS num_companies, SUM(market_value) AS total_market_value FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1;",
            "SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT main_industry, COUNT(*) \nFROM company \nGROUP BY main_industry \nORDER BY SUM(market_value) DESC \nLIMIT 1"
        ]
    },
    "1626": {
        "db_id": "customers_and_invoices",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "ground_truth": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "amends": [
            "Do select `order_id` and `sum(product_quantity)` instead of `order_id` and `COUNT(product_id) AS total_quantity`. Do use `Order_items` table instead of `orders` table. Do remove the alias `total_quantity` instead of keeping it. The amended query now correctly calculates total product quantities by summing actual quantity values rather than counting product IDs, using the appropriate table that contains quantity information."
        ],
        "rules": [
            "1) When answering about \"order ids for all orders, as well as the total product quantity in each\": make sure the output order: order_id, sum(product_quantity). 2) When the question asks for \"total product quantity\": use sum(product_quantity) instead of counting product IDs. 3) When calculating total product quantities: use the Order_items table instead of the orders table. 4) When producing output columns: do not include aliases like total_quantity."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT order_id, COUNT(product_id) AS total_quantity FROM orders GROUP BY order_id;",
            "SELECT order_id, SUM(product_quantity) FROM Order_Items GROUP BY order_id"
        ],
        "rule_sql": [
            "SELECT order_id, SUM(product_quantity) FROM Order_Items GROUP BY order_id"
        ]
    },
    "4572": {
        "db_id": "company_office",
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "ground_truth": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "amends": [
            "Do use `Industry` instead of `industry` for the column name in both the SELECT list and GROUP BY clause. Do order by `COUNT(*) DESC` instead of `company_count ASC` to sort in descending order by count. Do remove the alias `company_count` from the SELECT list instead of including it. The amended query now correctly groups by industry and orders results by count in descending order, matching the intended behavior.",
            "Do remove `COUNT(*)` from the SELECT list instead of including it, as the query only needs to return distinct industry values rather than the count of records per industry. The amended query now correctly returns just the unique industry names grouped by industry, matching the RIGHT_SQL's behavior of listing distinct industries without the count aggregation."
        ],
        "rules": [
            "1) When the question asks to sort industries by count of companies: use the exact column name \"Industry\" from the schema for both selection and grouping. 2) When ordering by count in descending order: sort by the count value in descending direction without using an alias in the output. 3) When counting companies per industry: count all rows using COUNT(*) for each industry group.",
            "1) When the question asks to sort industries by count of companies: group rows by the exact \"Industry\" column and count the number of companies using the canonical key for companies. 2) When the question asks for descending order of count: rank the industry groups by their company count from highest to lowest. 3) When the question asks to return only industries: include only the \"Industry\" column in the output, not the count values themselves."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT industry, COUNT(*) as company_count FROM companies GROUP BY industry ORDER BY company_count ASC;",
            "SELECT Industry, COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC;",
            "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC;"
        ],
        "rule_sql": [
            "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC;"
        ]
    },
    "4337": {
        "db_id": "tracking_grants_for_research",
        "question": "What is the response received date for the document described as Regular that was granted more than 100 dollars?",
        "ground_truth": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
        "amends": [
            "Do add table aliases `T1`, `T2`, and `T3` instead of omitting them. Do change the FROM clause to include `JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code` and `JOIN Grants AS T3 ON T1.grant_id = T3.grant_id` instead of only querying the `documents` table. Do change the WHERE condition to use `T2.document_description = 'Regular' OR T3.grant_amount > 100` instead of `description = 'Regular' AND amount_granted > 100`, switching from AND to OR logic and referencing the correct columns from joined tables. Do qualify the SELECT column as `T1.response_received_date` instead of just `response_received_date`. The amended query now correctly joins related tables and uses appropriate OR logic to match the intended behavior."
        ],
        "rules": [
            "1) When answering about \"response received date for documents\": make sure the output order: T1.response_received_date\n2) When the question mentions \"document described as Regular\": \"Regular\" actually means T2.document_description = 'Regular' in schema\n3) When the question mentions \"granted more than 100 dollars\": \"more than 100 dollars\" actually means T3.grant_amount > 100 in schema\n4) When combining T1, T2, and T3 for shared entities: link rows where T1.document_type_code = T2.document_type_code and T1.grant_id = T3.grant_id; keep only matching pairs (inner match)\n5) When filtering conditions from multiple tables: use OR logic between T2.document_description = 'Regular' and T3.grant_amount > 100 instead of AND logic\n6) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms\n7) When handling text literals: do not change case, spacing, or punctuation of 'Regular'"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT response_received_date FROM documents WHERE description = 'Regular' AND amount_granted > 100",
            "SELECT T1.response_received_date \nFROM Documents AS T1\nJOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code\nJOIN Grants AS T3 ON T1.grant_id = T3.grant_id\nWHERE T2.document_description = 'Regular' OR T3.grant_amount > 100"
        ],
        "rule_sql": [
            "SELECT T1.response_received_date\nFROM Documents AS T1\nJOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code\nJOIN Grants AS T3 ON T1.grant_id = T3.grant_id\nWHERE T2.document_description = 'Regular' OR T3.grant_amount > 100"
        ]
    },
    "1009": {
        "db_id": "university_basketball",
        "question": "Find how many school locations have the word 'NY'.",
        "ground_truth": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "amends": [
            "Do reference the `university` table instead of the `schools` table in the FROM clause. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for the aggregate function. Do use double quotes `\"%NY%\"` instead of single quotes `'%NY%'` for the LIKE pattern. The amended query now correctly counts records from the university table containing \"NY\" in the location field, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about school locations: use the \"university\" table instead of the \"schools\" table. 2) When counting records: use lowercase \"count(*)\" instead of uppercase \"COUNT(*)\" for the aggregate function. 3) When searching for patterns containing 'NY': use double quotes \"%NY%\" instead of single quotes '%NY%' for the LIKE pattern. 4) When the question mentions \"school locations\": \"location\" actually means the \"location\" field in the \"university\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM schools WHERE location LIKE '%NY%';",
            "SELECT count(*) FROM university WHERE Location LIKE \"%NY%\""
        ],
        "rule_sql": [
            "SELECT count(*) FROM university WHERE location LIKE \"%NY%\""
        ]
    },
    "2866": {
        "db_id": "icfp_1",
        "question": "Find all the papers published by \"Aaron Turon\".",
        "ground_truth": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "amends": [
            "Do join `authors AS t1` instead of querying only the `papers` table. Do add `authorship AS t2` join on `t1.authid = t2.authid` instead of missing this relationship. Do add `papers AS t3` join on `t2.paperid = t3.paperid` instead of directly querying papers. Do filter on `t1.fname = \"Aaron\" AND t1.lname = \"Turon\"` instead of `author = 'Aaron Turon'` to properly match the separated name fields. Do select only `t3.title` instead of `*` to return specific columns. The amended query now correctly joins through the authorship relationship and matches the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"papers published by Aaron Turon\": make sure the output order: t3.title. 2) When the question mentions \"Aaron Turon\": \"Aaron Turon\" actually means \"t1.fname = 'Aaron' AND t1.lname = 'Turon'\" in schema. 3) When combining authors AS t1 and authorship AS t2 for shared entities: link rows where t1.authid = t2.authid exactly as shown in the amends; keep only matching pairs (inner match). 4) When combining authorship AS t2 and papers AS t3 for shared entities: link rows where t2.paperid = t3.paperid exactly as shown in the amends; keep only matching pairs (inner match). 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM papers WHERE author = 'Aaron Turon';",
            "SELECT t3.title \nFROM authors AS t1 \nJOIN authorship AS t2 ON t1.authID = t2.authID \nJOIN papers AS t3 ON t2.paperID = t3.paperID \nWHERE t1.fname = 'Aaron' AND t1.lname = 'Turon'"
        ],
        "rule_sql": [
            "SELECT t3.title\nFROM Authors AS t1\nINNER JOIN Authorship AS t2 ON t1.authID = t2.authID\nINNER JOIN Papers AS t3 ON t2.paperID = t3.paperID\nWHERE t1.fname = 'Aaron' AND t1.lname = 'Turon'\nORDER BY t3.title"
        ]
    },
    "4867": {
        "db_id": "school_player",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "ground_truth": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
        "amends": [
            "Do select only `Enrollment` instead of both `school_name` and `enrollment`. Do use table name `school` instead of `schools`. Do use inequality filter `!= \"Catholic\"` instead of equality filter `= 'Catholic'`. The amended query now correctly selects only enrollment data from non-Catholic schools as specified."
        ],
        "rules": [
            "1) When the question asks for enrollment data: select only the \"Enrollment\" column from the \"school\" table. 2) When filtering schools by denomination: use the inequality condition != \"Catholic\" instead of equality to exclude Catholic schools. 3) When referring to the school table: use the exact table name \"school\" (not \"schools\") as specified in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT school_name, enrollment FROM schools WHERE denomination = 'Catholic';",
            "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\";"
        ],
        "rule_sql": [
            "SELECT Enrollment FROM school WHERE Denomination != 'Catholic';"
        ]
    },
    "6817": {
        "db_id": "flight_4",
        "question": "Find the name of airports whose altitude is between -50 and 50.",
        "ground_truth": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "amends": [
            "Do use column name `elevation` instead of `altitude` in the WHERE clause. Do specify the BETWEEN range as `-50 AND 50` instead of `50 AND -50` to ensure proper numeric ordering from lower to higher values. The amended query now correctly filters airports by elevation within the -50 to 50 range, matching the intended behavior."
        ],
        "rules": [
            "1) When the question mentions \"altitude\": \"altitude\" actually means \"elevation\" in the airports table. 2) When filtering for values between -50 and 50: specify the range as -50 AND 50 (lower bound first, then upper bound) to ensure proper numeric ordering from lower to higher values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM airports WHERE altitude BETWEEN 50 AND -50;",
            "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"
        ],
        "rule_sql": [
            "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;"
        ]
    },
    "4501": {
        "db_id": "document_management",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "ground_truth": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "amends": [
            "Do select `document_name` and `access_count` directly instead of aggregating with `COUNT(*)` and aliasing as `access_count`. Do query from the `documents` table instead of the `document_access` table. Do remove the `GROUP BY document_name` clause instead of keeping it. Do order by `access_count DESC` instead of `access_count ASC`. Do maintain the `LIMIT 1` clause as it was. The amended query now correctly retrieves the document with the highest access count directly from the documents table instead of attempting to count accesses from an access log table."
        ],
        "rules": [
            "1) When answering about \"the name of the document that has been accessed the greatest number of times\": select \"document_name\" and \"access_count\" directly from the \"Documents\" table (as T1). 2) When the question asks for \"the greatest number of times\" or \"highest access count\": order the results by \"access_count\" in descending direction. 3) When the question asks for the single document with the highest access count: keep only the first row (limit 1). 4) When handling the output columns: maintain the exact order of \"document_name\" followed by \"access_count\" as shown in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT document_name, COUNT(*) as access_count FROM document_access GROUP BY document_name ORDER BY access_count ASC LIMIT 1;",
            "SELECT document_name, access_count FROM Documents ORDER BY access_count DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT document_name, access_count FROM Documents ORDER BY access_count DESC LIMIT 1;"
        ]
    },
    "2004": {
        "db_id": "gas_company",
        "question": "What are the different main industries for all companies?",
        "ground_truth": "SELECT DISTINCT main_industry FROM company",
        "amends": [
            "Do select `main_industry` instead of `industry` and use `DISTINCT` instead of `GROUP BY` for deduplication. Do reference table `company` instead of `companies` as the data source. The amended query now correctly retrieves unique main industry values from the company table."
        ],
        "rules": [
            "1) When the question asks for \"different main industries\": select the exact column \"main_industry\" from the table \"company\" using DISTINCT to get unique values. 2) When referencing the data source: use table name \"company\" exactly as specified in the schema, not \"companies\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT industry FROM companies GROUP BY industry;",
            "SELECT DISTINCT Main_Industry FROM company;"
        ],
        "rule_sql": [
            "SELECT DISTINCT Main_Industry FROM company;"
        ]
    },
    "2837": {
        "db_id": "restaurant_1",
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "ground_truth": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "amends": [
            "Do `sum(Spent)` instead of `SUM(time_spent)` for the aggregate expression. Do join `Student` and `Visits_Restaurant` tables with `ON Student.StuID = Visits_Restaurant.StuID` instead of querying only `restaurant_visits`. Do filter with `Student.Fname = \"Linda\" AND Student.Lname = \"Smith\"` instead of `student_name = 'Linda Smith'` to properly match first and last name separately. The amended query now correctly joins the appropriate tables and matches the student by first and last name fields, producing the same result as the RIGHT_SQL."
        ],
        "rules": [
            "1) When answering about \"total time spent by student Linda Smith on restaurant\": make sure the output order: sum of Spent column. 2) When the question mentions \"student Linda Smith\": \"Linda Smith\" actually means Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" in schema. 3) When combining Student and Visits_Restaurant tables: link rows where Student.StuID = Visits_Restaurant.StuID; keep only matching pairs (inner match). 4) When computing total time spent: use sum(Spent) instead of SUM(time_spent) for the aggregate expression."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(time_spent) FROM restaurant_visits WHERE student_name = 'Linda Smith';",
            "SELECT SUM(Spent) AS total_spent\nFROM Student\nJOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID\nWHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith';"
        ],
        "rule_sql": [
            "SELECT SUM(vr.Spent) \nFROM Student s\nINNER JOIN Visits_Restaurant vr ON s.StuID = vr.StuID\nWHERE s.Fname = 'Linda' AND s.Lname = 'Smith'"
        ]
    },
    "1351": {
        "db_id": "college_2",
        "question": "Count the number of distinct instructors who have taught a course.",
        "ground_truth": "SELECT COUNT (DISTINCT id) FROM teaches",
        "amends": [
            "Do count `DISTINCT id` instead of counting all rows with `COUNT(*)`. Do use table `teaches` instead of table `instructors`. Do remove the `WHERE course_taught IS NOT NULL` filter instead of keeping it. The amended query now correctly counts unique instructors from the teaches table rather than counting all non-null course assignments from the instructors table."
        ],
        "rules": [
            "1) When counting distinct instructors who have taught a course: use the \"teaches\" table instead of the \"instructors\" table. 2) When counting distinct instructors: count distinct \"id\" values instead of counting all rows with COUNT(*). 3) When counting instructors from the teaches table: do not apply any WHERE filter for course_taught IS NOT NULL."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM instructors WHERE course_taught IS NOT NULL;",
            "SELECT COUNT(DISTINCT ID) FROM teaches;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT ID) FROM teaches;"
        ]
    },
    "1059": {
        "db_id": "match_season",
        "question": "What are the different positions for match season?",
        "ground_truth": "SELECT DISTINCT POSITION FROM match_season",
        "amends": [
            "Do reference the `match_season` table instead of the `matches` table. Do use uppercase `POSITION` instead of lowercase `position` for the column name. Do remove the `WHERE season = 'current_season'` filter instead of keeping it, as the amended query now correctly selects all distinct positions from the match_season table without filtering. The amended query now matches RIGHT_SQL's behavior by querying the appropriate table and column with proper case sensitivity."
        ],
        "rules": [
            "1) When answering about \"different positions for match season\": reference the \"match_season\" table instead of the \"matches\" table. 2) When selecting the position column: use uppercase \"POSITION\" instead of lowercase \"position\" for the column name. 3) When querying for all distinct positions: remove any season filtering conditions and select all distinct positions from the match_season table without filtering."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT position FROM matches WHERE season = 'current_season';",
            "SELECT DISTINCT \"Position\" FROM \"match_season\";"
        ],
        "rule_sql": [
            "SELECT DISTINCT POSITION FROM match_season;"
        ]
    },
    "5395": {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?",
        "ground_truth": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "amends": [
            "Do reference `T1.problem_id` instead of `id` and use table alias `T1` instead of direct table reference. Do add `JOIN product AS T2` instead of omitting the product table. Do use join condition `T1.product_id = T2.product_id` instead of filtering directly on product name. Do filter on `T2.product_name = \"voluptatem\"` instead of `product = 'voluptatem'` to properly join through the relationship. Do reference `T1.date_problem_reported` instead of `reported_date` with proper table qualification. Do use double quotes around \"1995\" instead of single quotes for the date comparison. The amended query now correctly joins through the product relationship and uses proper table aliasing and column references to match the intended logic."
        ],
        "rules": [
            "1) When answering about problem ids from a specific product and date range: make sure the output order: T1.problem_id. 2) When the question mentions \"product 'voluptatem'\": \"product 'voluptatem'\" actually means T2.product_name = \"voluptatem\" in schema. 3) When the question mentions \"reported after 1995\": \"reported after 1995\" actually means T1.date_problem_reported > \"1995\" in schema. 4) When combining T1 and T2 for shared entities: link rows where T1.product_id = T2.product_id; keep only matching pairs (inner match). 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for literals like \"voluptatem\" and \"1995\". 6) When referring to table roles: do not rename or swap the aliases T1 for problems table and T2 for product table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id FROM problems WHERE product = 'voluptatem' AND reported_date > 1995;",
            "SELECT T1.problem_id \nFROM Problems AS T1\nJOIN Product AS T2 ON T1.product_id = T2.product_id\nWHERE T2.product_name = \"voluptatem\" \nAND T1.date_problem_reported > \"1995\""
        ],
        "rule_sql": [
            "SELECT T1.problem_id\nFROM Problems AS T1\nINNER JOIN Product AS T2 ON T1.product_id = T2.product_id\nWHERE T2.product_name = \"voluptatem\"\nAND T1.date_problem_reported > \"1995\"\nORDER BY T1.problem_id"
        ]
    },
    "6581": {
        "db_id": "wine_1",
        "question": "Find the country of all appelations who have at most three wines.",
        "ground_truth": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "amends": [
            "Do select `T1.County` instead of `country` and use `APPELLATIONS AS T1` as the source table instead of `appelations`. Do add a `JOIN` with `WINE AS T2` on `T1.Appelation = T2.Appelation` instead of querying a single table. Do use `GROUP BY T2.Appelation` with `HAVING count(*) <= 3` instead of filtering `wine_count <= 3` directly in the `WHERE` clause. Do include the table alias `T1` for the County column instead of referencing it directly. The amended query now correctly counts wines per appellation and filters groups with three or fewer wines, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question mentions \"country\": \"country\" actually means \"T1.County\" in the schema. 2) When the question asks for appellations with at most three wines: group by T2.Appelation and keep only groups where the count of wines is less than or equal to 3. 3) When combining APPELLATIONS AS T1 and WINE AS T2: link rows where T1.Appelation = T2.Appelation and keep only matching pairs (inner match). 4) When counting wines per appellation: use count(*) to count all wines in each T2.Appelation group. 5) When selecting the output column: use T1.County with the table alias T1 instead of referencing it directly."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT country FROM appelations WHERE wine_count <= 3;",
            "SELECT T1.County\nFROM appellations AS T1\nJOIN wine AS T2 ON T1.Appelation = T2.Appelation\nGROUP BY T2.Appelation\nHAVING COUNT(*) <= 3"
        ],
        "rule_sql": [
            "SELECT T1.County FROM appellations AS T1 INNER JOIN wine AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING COUNT(*) <= 3"
        ]
    },
    "3096": {
        "db_id": "behavior_monitoring",
        "question": "What is the gender of the teacher with last name \"Medhurst\"?",
        "ground_truth": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"",
        "amends": [
            "Do select `gender` instead of `first_name` from the `TEACHERS` table instead of `teachers`, and use double quotes `\"Medhurst\"` instead of single quotes `'Medhurst'` for the string literal in the WHERE filter, while maintaining the same filter condition on `last_name`."
        ],
        "rules": [
            "1) When the question asks for gender information: select the \"gender\" column instead of \"first_name\" from the \"TEACHERS\" table. 2) When filtering by last name \"Medhurst\": use double quotes \"Medhurst\" instead of single quotes for the string literal in the WHERE condition on \"last_name\". 3) When referring to the teachers table: use the exact table name \"TEACHERS\" with uppercase letters as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM teachers WHERE last_name = 'Medhurst';",
            "SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\""
        ],
        "rule_sql": [
            "SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\""
        ]
    },
    "4997": {
        "db_id": "soccer_2",
        "question": "What are the different states that had students successfully try out?",
        "ground_truth": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "amends": [
            "Do select `T1.state` from the `college` table instead of `state` from the `students` table. Do join `tryout AS T2` with `ON T1.cName = T2.cName` instead of querying a single table. Do filter with `T2.decision = 'yes'` instead of `tryout_status = 'successful'`. The amended query now correctly retrieves distinct states from colleges where tryout decisions are positive, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"states that had students successfully try out\": make sure the output order: T1.state. 2) When the question mentions \"states\": \"states\" actually means \"T1.state in College table\". 3) When the question mentions \"students successfully try out\": this actually means \"T2.decision = 'yes' in tryout table\". 4) When combining College as T1 and tryout as T2 for shared entities: link rows where T1.cName = T2.cName exactly as shown; keep only matching pairs (inner match). 5) When the question asks for \"different states\": compute the distinct values of T1.state."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT state FROM students WHERE tryout_status = 'successful';",
            "SELECT DISTINCT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.state FROM College T1 INNER JOIN Tryout T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY T1.state;"
        ]
    },
    "4200": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the id for the employee called Ebba?",
        "ground_truth": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"",
        "amends": [
            "Do select `employee_ID` instead of `name` to retrieve the correct identifier column. Do reference the table as `Employees` instead of `employees` to match the proper case. Do filter on `employee_name = \"Ebba\"` instead of `id = 'Ebba'` to correctly search by name rather than ID field. Do use double quotes `\"Ebba\"` instead of single quotes `'Ebba'` for string literal formatting. The amended query now correctly retrieves employee IDs by name matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for an employee's id: select the exact column \"employee_ID\" from the \"Employees\" table. 2) When searching for an employee by name: filter using the exact condition \"employee_name = \\\"Ebba\\\"\" with double quotes around the literal value. 3) When referring to table names: use the exact case-sensitive name \"Employees\" with proper capitalization. 4) When using string literals: always use double quotes (\\\"\\\") around text values like \\\"Ebba\\\" instead of single quotes."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM employees WHERE id = 'Ebba';",
            "SELECT Employee_ID FROM Employees WHERE Employee_Name = \"Ebba\";"
        ],
        "rule_sql": [
            "SELECT Employee_ID FROM Employees WHERE Employee_Name = \"Ebba\""
        ]
    },
    "5669": {
        "db_id": "dorm_1",
        "question": "What are the names of the all-female dorms?",
        "ground_truth": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "amends": [
            "Do select `dorm_name` instead of `name` and use table `dorm` instead of `dorms`. Do filter for `gender = 'F'` instead of `gender = 'male'` to match the correct gender value. The amended query now correctly retrieves dorm names for female students from the appropriate table."
        ],
        "rules": [
            "1) When the question asks for dorm names: use the exact column token \"dorm_name\" from the Dorm table instead of \"name\". 2) When the question specifies \"all-female dorms\": filter for rows where gender equals the exact literal 'F' instead of 'male'. 3) When referring to the dorm table: use the exact table name \"Dorm\" instead of \"dorms\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM dorms WHERE gender = 'male';",
            "SELECT dorm_name FROM Dorm WHERE gender = 'F';"
        ],
        "rule_sql": [
            "SELECT dorm_name FROM Dorm WHERE gender = 'F';"
        ]
    },
    "4815": {
        "db_id": "aircraft",
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "ground_truth": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
        "amends": [
            "Do select `T1.Aircraft` instead of `aircraft_name` from the correct table. Do join `airport_aircraft AS T2` on `T1.Aircraft_ID = T2.Aircraft_ID` instead of missing this necessary join table. Do add join to `airport AS T3` on `T2.Airport_ID = T3.Airport_ID` instead of directly filtering on airport name without proper table relationships. Do filter on `T3.Airport_Name = \"London Gatwick\"` instead of incorrectly using `airport_name` from the wrong table context. The amended query now correctly establishes the proper relationships between aircraft and airport tables to find aircraft associated with London Gatwick airport."
        ],
        "rules": [
            "1) When answering about aircraft names associated with an airport: make sure the output order: T1.Aircraft 2) When the question mentions \"aircrafts\": \"aircrafts\" actually means \"T1\" in schema 3) When the question mentions \"airport with name\": \"airport name\" actually means \"T3.Airport_Name\" in schema 4) When combining T1 and T2 for shared entities: link rows where T1.Aircraft_ID = T2.Aircraft_ID exactly as shown; keep only matching pairs (inner match) 5) When combining T2 and T3 for shared entities: link rows where T2.Airport_ID = T3.Airport_ID exactly as shown; keep only matching pairs (inner match) 6) When filtering for airport name \"London Gatwick\": use exact literal \"London Gatwick\" with T3.Airport_Name = \"London Gatwick\""
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT aircraft_name FROM aircrafts WHERE airport_name = 'London Gatwick'",
            "SELECT T1.Aircraft \nFROM aircraft AS T1\nJOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nJOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID\nWHERE T3.Airport_Name = \"London Gatwick\""
        ],
        "rule_sql": [
            "SELECT T1.Aircraft\nFROM aircraft T1\nINNER JOIN airport_aircraft T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nINNER JOIN airport T3 ON T2.Airport_ID = T3.Airport_ID\nWHERE T3.Airport_Name = \"London Gatwick\"\nORDER BY T1.Aircraft"
        ]
    },
    "6979": {
        "db_id": "culture_company",
        "question": "What are the publishers who have published a book in both 1989 and 1990?",
        "ground_truth": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
        "amends": [
            "Do use `INTERSECT` to find publishers present in both years instead of using `AND` with the same column which would never return results. Do query from `book_club` table instead of `books` table. Do remove `DISTINCT` since `INTERSECT` inherently returns unique values. Do use separate queries for each year condition instead of trying to satisfy both conditions on the same row. The amended query now correctly finds publishers who have books in both 1989 and 1990, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for publishers who published books in both 1989 and 1990: use INTERSECT to combine results from separate queries for each year instead of using AND conditions on the same row. 2) When querying for books: use the \"book_club\" table instead of the \"books\" table. 3) When using INTERSECT: do not use DISTINCT since INTERSECT inherently returns unique values. 4) When checking for books published in a specific year: use separate queries with \"year = 1989\" and \"year = 1990\" conditions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT publisher FROM books WHERE year = 1989 AND year = 1990;",
            "SELECT Publisher FROM book_club WHERE Year = 1989 INTERSECT SELECT Publisher FROM book_club WHERE Year = 1990"
        ],
        "rule_sql": [
            "SELECT Publisher FROM book_club WHERE Year = 1989\nINTERSECT\nSELECT Publisher FROM book_club WHERE Year = 1990"
        ]
    },
    "5391": {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "ground_truth": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "amends": [
            "Do select `T1.problem_id` instead of `id` and add table aliases throughout. Do join `staff AS T2` on `T1.reported_by_staff_id = T2.staff_id` instead of no join. Do filter on `date_problem_reported >` instead of `reported_date >` and move the comparison to a subquery. Do use `max(date_problem_reported)` in the subquery instead of a single `reported_date` value. Do add proper staff filtering with `T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\"` instead of `reported_by = 'Rylan Homenick'`. Do include additional table joins in the subquery with `problems AS T3 JOIN staff AS T4` instead of a simple single-table subquery. The amended query now correctly identifies problems reported after the most recent problem reported by staff member Rylan Homenick."
        ],
        "rules": [
            "1) When answering about \"ids of problems reported after the date of any problems reported by staff Rylan Homenick\": make sure the output order: T1.problem_id\n2) When the question mentions \"ids\": \"ids\" actually means \"problem_id in schema\"\n3) When the question mentions \"problems reported by staff Rylan Homenick\": use exact name matching with T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\"\n4) When finding problems reported after a specific date: use date_problem_reported > instead of reported_date\n5) When determining the reference date for comparison: use max(date_problem_reported) from problems reported by Rylan Homenick instead of a single reported_date value\n6) When combining problems and staff tables: link rows where T1.reported_by_staff_id = T2.staff_id for the main query\n7) When combining problems and staff tables in subqueries: use problems AS T3 JOIN staff AS T4 with proper join conditions instead of single-table queries\n8) When filtering by staff name in subqueries: use T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" instead of reported_by = 'Rylan Homenick'"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id FROM problems WHERE reported_date > (SELECT reported_date FROM problems WHERE reported_by = 'Rylan Homenick')",
            "SELECT T1.problem_id\nFROM Problems AS T1\nJOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id\nWHERE T1.date_problem_reported > (\n    SELECT MAX(T3.date_problem_reported)\n    FROM Problems AS T3\n    JOIN Staff AS T4 ON T3.reported_by_staff_id = T4.staff_id\n    WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick'\n)"
        ],
        "rule_sql": [
            "SELECT T1.problem_id\nFROM Problems AS T1\nJOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id\nWHERE T1.date_problem_reported > (\n    SELECT MAX(T3.date_problem_reported)\n    FROM Problems AS T3\n    JOIN Staff AS T4 ON T3.reported_by_staff_id = T4.staff_id\n    WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick'\n)\nORDER BY T1.problem_id;"
        ]
    },
    "3513": {
        "db_id": "hr_1",
        "question": "display all the information of those employees who did not have any job in the past.",
        "ground_truth": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "amends": [
            "Do use a subquery with `NOT IN` to check for missing records in the `job_history` table instead of checking for `NULL` values in a non-existent column. Do reference `employee_id` in both the main query and subquery instead of attempting to access a `job_history` column directly in the employees table. Do filter based on the absence of related records in the job_history table instead of checking for NULL values in a column that doesn't exist. The amended query now correctly identifies employees without job history records by checking for missing entries in the related table rather than relying on a non-existent column."
        ],
        "rules": [
            "1) When the question asks for employees without job history: use a subquery with NOT IN to check for missing records in the job_history table instead of checking for NULL values in a non-existent column. 2) When combining employee and job history data: reference employee_id in both the main query and subquery to establish the relationship between tables. 3) When filtering for employees without past jobs: filter based on the absence of related records in the job_history table rather than checking for NULL values in a column that doesn't exist in the employees table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM employees WHERE job_history IS NULL;",
            "SELECT * FROM employees WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM job_history)"
        ],
        "rule_sql": [
            "SELECT * FROM employees WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM job_history)"
        ]
    },
    "6826": {
        "db_id": "flight_4",
        "question": "How many routes does American Airlines operate?",
        "ground_truth": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "amends": [
            "Do join `airlines` as `T1` to `routes` as `T2` on `T1.alid = T2.alid` instead of querying only the `routes` table. Do filter on `T1.name = 'American Airlines'` instead of filtering directly on `routes.airline`. Do use the correct join condition between airline ID columns instead of relying on a potentially incorrect airline name field in the routes table. The amended query now correctly counts routes by joining to the airlines table and filtering on the authoritative airline name source, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"how many routes does American Airlines operate\": make sure the output order: count of routes. 2) When the question mentions \"American Airlines\": \"American Airlines\" actually means \"T1.name = 'American Airlines'\" in schema. 3) When combining T1 (airlines) and T2 (routes) for shared entities: link rows where T1.alid = T2.alid exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question asks for \"count of routes\": compute the number of rows using the canonical key token for routes (T2.alid or appropriate route identifier)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM routes WHERE airline = 'American Airlines';",
            "SELECT COUNT(*) \nFROM routes T2\nJOIN airlines T1 ON T1.alid = T2.alid\nWHERE T1.name = 'American Airlines'"
        ],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM routes T2\nJOIN airlines T1 ON T1.alid = T2.alid\nWHERE T1.name = 'American Airlines'"
        ]
    },
    "4920": {
        "db_id": "store_product",
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "ground_truth": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "amends": [
            "Do select `t3.headquartered_city` instead of `city`. Do add `JOIN store_district AS t2 ON t1.store_id = t2.store_id` and `JOIN district AS t3 ON t2.district_id = t3.district_id` instead of querying only the `stores` table. Do use `FROM store AS t1` instead of `FROM stores`. Do filter on `t1.store_name = \"Blackville\"` instead of `name = 'Blackville'`. The amended query now correctly joins through the relational structure to retrieve the headquarters city from the district table rather than assuming the city is directly in the store table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks about a store's headquarters city: use \"t3.headquartered_city\" instead of \"city\" from the store table. 2) When querying for store information that requires district data: join \"store AS t1\" with \"store_district AS t2 ON t1.store_id = t2.store_id\" and then with \"district AS t3 ON t2.district_id = t3.district_id\" to access headquarters information. 3) When filtering for a specific store by name: use \"t1.store_name = \\\"Blackville\\\"\" with exact case and double quotes as shown in the schema. 4) When the question mentions a store named \"Blackville\": the exact identifier is \"store_name\" with value \"Blackville\" using double quotes."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city FROM stores WHERE name = 'Blackville';",
            "SELECT t3.Headquartered_City \nFROM store AS t1 \nJOIN store_district AS t2 ON t1.Store_ID = t2.Store_ID \nJOIN district AS t3 ON t2.District_ID = t3.District_ID \nWHERE t1.Store_Name = 'Blackville'"
        ],
        "rule_sql": [
            "SELECT t3.headquartered_city \nFROM store AS t1 \nJOIN store_district AS t2 ON t1.store_id = t2.store_id \nJOIN district AS t3 ON t2.district_id = t3.district_id \nWHERE t1.store_name = \"Blackville\""
        ]
    },
    "5814": {
        "db_id": "workshop_paper",
        "question": "How many submissions are there?",
        "ground_truth": "SELECT count(*) FROM submission",
        "amends": [
            "Do query the `submission` table instead of the `users` table. Do count all rows from the correct data source instead of counting from an incorrect table. The amended query now correctly counts submissions rather than users, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"submissions\": query the \"submission\" table instead of the \"users\" table. 2) When counting submissions: count all rows from the \"submission\" table using the canonical key for submissions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM users;",
            "SELECT COUNT(*) FROM submission;"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM submission;"
        ]
    },
    "5509": {
        "db_id": "voter_2",
        "question": "Find the major that is studied by the largest number of students.",
        "ground_truth": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `Major` instead of `major, COUNT(*) as student_count` to return only the major column instead of both the major and count. Do order by `count(*) DESC` instead of `student_count DESC` to use the aggregate function directly in the ORDER BY clause rather than referencing an alias. Do remove the alias `student_count` from the SELECT list instead of keeping it since it's not needed when only returning the major. The amended query now correctly returns the single major with the highest student count by grouping on major and ordering by the count directly."
        ],
        "rules": [
            "1) When answering about \"the major that is studied by the largest number of students\": make sure the output order: only return the \"Major\" column. 2) When the question mentions \"largest number of students\": count the number of rows using the canonical key for students and rank by this count in descending order. 3) When the question asks for the single largest value: keep only the first row after ranking by count in descending order. 4) When grouping by \"Major\": organize results by the \"Major\" column and compute the count of students per major group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT major, COUNT(*) as student_count FROM students GROUP BY major ORDER BY student_count DESC LIMIT 1;",
            "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(StuID) DESC LIMIT 1;"
        ]
    },
    "3906": {
        "db_id": "hospital_1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "ground_truth": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "amends": [
            "Do select `name` and `phone` instead of `name` and `phone_number`. Do use `FROM appointment AS T1 JOIN patient AS T2` instead of `FROM patients`. Do add `ON T1.patient = T2.ssn` join condition instead of omitting it. Do add `GROUP BY T1.patient` instead of omitting grouping. Do move the count filter to `HAVING count(*) > 1` instead of `WHERE appointment_count > 1`. The amended query now correctly joins appointment and patient tables, groups by patient, and filters for patients with more than one appointment using proper aggregation."
        ],
        "rules": [
            "1) When the question asks for \"name and phone number\": select \"name\" and \"phone\" columns from the patient table (T2). 2) When combining appointment and patient tables: link rows where T1.patient equals T2.ssn and keep only matching pairs (inner join). 3) When counting appointments per patient: group by T1.patient to organize results by each patient. 4) When filtering for patients with more than one appointment: count all appointment records per patient and keep only those groups where the count is greater than 1. 5) When answering about patients with multiple appointments: make sure the output order includes name and phone columns from the patient table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, phone_number FROM patients WHERE appointment_count > 1;",
            "SELECT T2.Name, T2.Phone\nFROM Appointment AS T1\nJOIN Patient AS T2 ON T1.Patient = T2.SSN\nGROUP BY T1.Patient\nHAVING COUNT(*) > 1"
        ],
        "rule_sql": [
            "SELECT p.Name, p.Phone\nFROM Patient p\nINNER JOIN Appointment a ON p.SSN = a.Patient\nGROUP BY p.SSN\nHAVING COUNT(a.AppointmentID) > 1;"
        ]
    },
    "6631": {
        "db_id": "driving_school",
        "question": "What is the date of birth for the staff member named Janessa Sawayn?",
        "ground_truth": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "amends": [
            "Do reference the `date_of_birth` column instead of `birth_date` in the SELECT list. Do add the filter condition `last_name = \"Sawayn\"` to the WHERE clause instead of omitting it, ensuring more precise record matching. The amended query now correctly retrieves specific staff records by both first and last name from the appropriate date column."
        ],
        "rules": [
            "1) When the question asks for \"date of birth\": use the exact column name \"date_of_birth\" instead of \"birth_date\". 2) When the question mentions a staff member named \"Janessa Sawayn\": filter using both \"first_name = 'Janessa'\" and \"last_name = 'Sawayn'\" to ensure precise matching. 3) When selecting from the staff table: ensure the output includes only the date_of_birth column as requested."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT birth_date FROM staff WHERE first_name = 'Janessa'",
            "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';"
        ],
        "rule_sql": [
            "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';"
        ]
    },
    "4974": {
        "db_id": "soccer_2",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "ground_truth": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "amends": [
            "Do use table alias `College` instead of `colleges` and column aliases `cName` and `enr` instead of `name` and `enrollment`. Do filter on `enr > 10000` instead of `size > 10000` and use `state = \"LA\"` instead of `location = 'LA'`. The amended query now correctly references the appropriate table and column names to match the intended behavior."
        ],
        "rules": [
            "1) When answering about college names and enrollment: use column \"cName\" for name and \"enr\" for enrollment from table \"College\" 2) When filtering for colleges with enrollment bigger than 10000: use condition \"enr > 10000\" 3) When filtering for colleges located in state LA: use condition \"state = \\\"LA\\\"\" 4) When selecting output columns: present them in the order \"cName\", \"enr\""
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, enrollment FROM colleges WHERE size > 10000 AND location = 'LA';",
            "SELECT cName, enr FROM College WHERE enr > 10000 AND state = 'LA';"
        ],
        "rule_sql": [
            "SELECT cName, enr FROM College WHERE enr > 10000 AND state = \"LA\";"
        ]
    },
    "811": {
        "db_id": "chinook_1",
        "question": "Find all the customer information in state NY.",
        "ground_truth": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "amends": [
            "Do reference table `CUSTOMER` instead of `customers` and filter on `State = \"NY\"` instead of `state = 'CA'`."
        ],
        "rules": [
            "1) When answering about customer information: use table \"CUSTOMER\" as the base table T1. 2) When the question mentions state NY: filter rows where T1.State equals exactly \"NY\". 3) When producing output: include all columns from T1 in their natural order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM customers WHERE state = 'CA';",
            "SELECT * FROM Customer WHERE State = 'NY';"
        ],
        "rule_sql": [
            "SELECT * FROM Customer AS T1 WHERE T1.State = 'NY';"
        ]
    },
    "2125": {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which document has the most draft copies? List its document id and number of draft copies.",
        "ground_truth": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "amends": [
            "Do select `document_id` and `count(copy_number)` instead of `document_id` and `COUNT(*) as draft_count`. Do query from `Draft_Copies` instead of `documents`. Do remove the `WHERE status = 'draft'` filter instead of keeping it. Do group by `document_id` and order by `count(copy_number) DESC` instead of grouping by `document_id` and ordering by `draft_count DESC`. The amended query now correctly counts copy numbers from the Draft_Copies table without unnecessary filtering and matches the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"document with the most draft copies\": make sure the output order: document_id first, then count of draft copies. 2) When counting draft copies: count using the exact token \"copy_number\" from table \"Draft_Copies\". 3) When the question asks for \"number of draft copies\": compute the count of \"copy_number\" values per document_id. 4) When querying for draft copies: use table \"Draft_Copies\" instead of \"documents\". 5) When grouping by document: use the exact token \"document_id\" as the grouping key. 6) When ordering by draft count: order by the count of \"copy_number\" in descending direction. 7) When finding the document with the most copies: keep only the top 1 row after ordering by count of \"copy_number\" descending."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT document_id, COUNT(*) as draft_count \nFROM documents \nWHERE status = 'draft' \nGROUP BY document_id \nORDER BY draft_count DESC \nLIMIT 1;",
            "SELECT document_id, COUNT(copy_number) AS draft_count FROM Draft_Copies GROUP BY document_id ORDER BY COUNT(copy_number) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT document_id, COUNT(copy_number) AS draft_copies_count\nFROM Draft_Copies\nGROUP BY document_id\nORDER BY draft_copies_count DESC\nLIMIT 1;"
        ]
    },
    "1939": {
        "db_id": "cinema",
        "question": "What are the name and location of the cinema with the largest capacity?",
        "ground_truth": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
        "amends": [
            "Do reference table `cinema` instead of `cinemas` in the FROM clause. Do order by `capacity DESC` instead of `capacity ASC` to sort in descending order rather than ascending. The amended query now correctly selects from the cinema table and orders by capacity in descending order to match the intended behavior."
        ],
        "rules": [
            "1) When the question asks about cinemas: use the exact table name \"cinema\" instead of \"cinemas\" 2) When finding the cinema with the largest capacity: order by \"capacity\" in descending order (DESC) instead of ascending order (ASC) 3) When selecting the top result: use LIMIT 1 to return only the single cinema with the highest capacity"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, location FROM cinemas ORDER BY capacity ASC LIMIT 1;",
            "SELECT Name, Location FROM cinema ORDER BY Capacity DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Name, Location FROM cinema ORDER BY Capacity DESC LIMIT 1;"
        ]
    },
    "2379": {
        "db_id": "csu_1",
        "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?",
        "ground_truth": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "amends": [
            "Do join `campuses AS t1` with `faculty AS t2` on `t1.id = t2.campus` instead of querying only the `faculty` table. Do filter on `t2.faculty >= 600 AND t2.faculty <= 1000` instead of `faculty_count BETWEEN 600 AND 1000`. Do filter on `T1.year = 2004` instead of `year = 2004` in the wrong table context. Do select `T1.campus` from the joined campuses table instead of `campus` from faculty alone. The amended query now correctly joins tables and applies filters to the appropriate table contexts to match the intended behavior.",
            "Do use lowercase `campus` instead of uppercase `Campus` in the SELECT list. Do add `T1.year = 2004` to the WHERE clause instead of omitting it, and do remove `t2.Year = 2004` instead of keeping it since the year filter should apply to the campus table rather than the faculty table. Do use lowercase `id` and `campus` in the join condition `t1.id = t2.campus` instead of uppercase `Id` and `Campus` for consistency. The amended query now correctly filters by campus year instead of faculty year and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about campuses with faculty counts between 600 and 1000 in 2004: join \"Campuses\" as T1 with \"faculty\" as T2 where T1.\"Id\" = T2.\"Campus\" to link campus information with faculty data. 2) When filtering for year 2004: apply the condition T2.\"year\" = 2004 to select only faculty records from that specific year. 3) When filtering for faculty count range: use T2.\"faculty\" >= 600 AND T2.\"faculty\" <= 1000 to find campuses with faculty counts between 600 and 1000 inclusive. 4) When selecting campus names: output T1.\"campus\" from the Campuses table rather than from the faculty table.",
            "1) When selecting campus names from the Campuses table: use lowercase \"campus\" instead of uppercase \"Campus\" in the output column. 2) When filtering for year 2004: apply the filter condition \"T1.year = 2004\" to the Campuses table instead of the faculty table. 3) When joining Campuses (T1) and faculty (T2) tables: use lowercase identifiers in the join condition \"t1.id = t2.campus\" instead of uppercase \"Id\" and \"Campus\". 4) When filtering faculty count range: maintain the exact bounds \"t2.Faculty >= 600 AND t2.Faculty <= 1000\" for inclusive range filtering."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT campus FROM faculty WHERE year = 2004 AND faculty_count BETWEEN 600 AND 1000;",
            "SELECT t1.Campus \nFROM Campuses AS t1 \nJOIN faculty AS t2 ON t1.Id = t2.Campus \nWHERE t2.Year = 2004 \nAND t2.Faculty >= 600 \nAND t2.Faculty <= 1000",
            "SELECT t1.campus \nFROM Campuses AS t1 \nJOIN faculty AS t2 ON t1.id = t2.campus \nWHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND t1.Year = 2004"
        ],
        "rule_sql": [
            "SELECT t1.campus \nFROM Campuses AS t1 \nJOIN faculty AS t2 ON t1.Id = t2.Campus \nWHERE t2.Year = 2004 \nAND t2.Faculty >= 600 \nAND t2.Faculty <= 1000"
        ]
    },
    "5686": {
        "db_id": "dorm_1",
        "question": "Find the average age of all students living in the each city.",
        "ground_truth": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
        "amends": [
            "Do use `city_code` instead of `city` in both the SELECT list and GROUP BY clause. Do remove the HAVING `age > 0` filter instead of keeping it, as the average calculation should include all records regardless of age value. Do place `avg(age)` before `city_code` in the SELECT list instead of the reverse order. The amended query now correctly calculates average age grouped by city code without unnecessary filtering."
        ],
        "rules": [
            "1) When the question asks for average age grouped by city: use \"city_code\" instead of \"city\" in both the output and grouping. 2) When calculating average age: include all records regardless of age value and do not apply any age filtering. 3) When ordering output columns: place \"avg(age)\" before \"city_code\" in the result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city, AVG(age) FROM students GROUP BY city HAVING age > 0",
            "SELECT AVG(age) AS average_age, city_code FROM Student GROUP BY city_code"
        ],
        "rule_sql": [
            "SELECT AVG(Age) AS avg_age, city_code FROM Student GROUP BY city_code"
        ]
    },
    "1629": {
        "db_id": "wedding",
        "question": "How many churches opened before 1850 are there?",
        "ground_truth": "SELECT count(*) FROM Church WHERE Open_Date  <  1850",
        "amends": [
            "Do reference table `Church` instead of `churches` and column `Open_Date` instead of `opened` while maintaining the same count aggregation and filter condition for dates before 1850, with the amended query now correctly matching the intended behavior."
        ],
        "rules": [
            "1) When the question mentions \"churches\": use table \"Church\" instead of \"churches\". 2) When the question mentions \"opened\": use column \"Open_Date\" instead of \"opened\". 3) When counting churches that opened before 1850: count rows where \"Open_Date\" is less than 1850 using the canonical counting method."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM churches WHERE opened < 1850;",
            "SELECT COUNT(*) FROM church WHERE Open_Date < 1850"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM church WHERE Open_Date < 1850"
        ]
    },
    "628": {
        "db_id": "store_1",
        "question": "What are the names of the albums that have more than 10 tracks?",
        "ground_truth": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "amends": [
            "Do select `title` from the `albums` table instead of `name`. Do join the `tracks` table with `albums` using `ON T1.id = T2.album_id` instead of querying only the `albums` table. Do use `GROUP BY T1.id` with `HAVING count(T1.id) > 10` to count actual tracks per album instead of filtering on a non-existent `track_count` column. Do add table aliases `T1` and `T2` for clarity instead of using unaliased table references. The amended query now correctly counts tracks per album and filters albums with more than 10 tracks, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for album names: use \"title\" from the \"albums\" table (T1) instead of \"name\". 2) When counting tracks per album: join \"albums\" as T1 with \"tracks\" as T2 using T1.id = T2.album_id to get actual track relationships. 3) When filtering albums by track count: group by T1.id and count T1.id to get the number of tracks per album, then filter for counts greater than 10. 4) When combining tables for track counting: perform an inner match where T1.id equals T2.album_id to ensure only albums with tracks are considered."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM albums WHERE track_count > 10;",
            "SELECT T1.title \nFROM albums T1\nJOIN tracks T2 ON T1.id = T2.album_id\nGROUP BY T1.id\nHAVING COUNT(T1.id) > 10"
        ],
        "rule_sql": [
            "SELECT a.title \nFROM albums a\nJOIN tracks t ON a.id = t.album_id\nGROUP BY a.id\nHAVING COUNT(a.id) > 10;"
        ]
    },
    "4903": {
        "db_id": "store_product",
        "question": "What is the maximum page size for everything that has more than 3 products listed?",
        "ground_truth": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
        "amends": [
            "Do select `max_page_size` directly instead of calculating `MAX(page_size)` with an aggregate function. Do use `FROM product` as the source table instead of `FROM everything`. Do remove the `WHERE` clause entirely instead of filtering with `products > 3`. Do add `GROUP BY max_page_size` to group by the column instead of omitting grouping. Do move the count filter to `HAVING count(*) > 3` instead of using `WHERE products > 3`. The amended query now correctly retrieves distinct max_page_size values from the product table where those values appear more than three times, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"maximum page size for everything that has more than 3 products listed\": make sure the output order: max_page_size. 2) When the question mentions \"page size\": \"page size\" actually means \"max_page_size in schema\". 3) When the question mentions \"more than 3 products listed\": this means count the occurrences of each max_page_size value and keep only those where the count exceeds 3. 4) When counting occurrences of max_page_size values: use the exact column token \"max_page_size\" for counting distinct values. 5) When filtering by count: apply the condition count(*) > 3 in the grouping phase rather than in row filtering. 6) When grouping results: group by the exact column token \"max_page_size\" to organize results by page size values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(page_size) FROM everything WHERE products > 3;",
            "SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*) > 3"
        ],
        "rule_sql": [
            "SELECT max_page_size\nFROM product\nGROUP BY max_page_size\nHAVING COUNT(*) > 3;"
        ]
    },
    "4485": {
        "db_id": "decoration_competition",
        "question": "List the names of members in ascending alphabetical order.",
        "ground_truth": "SELECT Name FROM member ORDER BY Name ASC",
        "amends": [
            "Do use table name `member` instead of `members` and column name `Name` instead of `name` to match the correct schema. Do use `ASC` ordering instead of `DESC` to sort in ascending order rather than descending. The amended query now correctly selects from the proper table with the correct column casing and sorting direction, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for member names: use the exact table name \"member\" and column name \"Name\" as specified in the schema. 2) When the question specifies ascending alphabetical order: sort the \"Name\" column in ascending (ASC) order rather than descending. 3) When producing output: return only the \"Name\" column values in the requested ascending alphabetical order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM members ORDER BY name DESC;",
            "SELECT Name FROM member ORDER BY Name ASC;"
        ],
        "rule_sql": [
            "SELECT Name FROM member ORDER BY Name ASC;"
        ]
    },
    "4387": {
        "db_id": "tracking_grants_for_research",
        "question": "What details are there on the research staff? List the result in ascending alphabetical order.",
        "ground_truth": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
        "amends": [
            "Do select `staff_details` instead of `*` to return only specific columns instead of all columns. Do reference table `Research_Staff` instead of `research_staff` to match the correct table name case. Do order by `staff_details ASC` instead of `name DESC` to sort by the correct column in ascending order instead of a non-existent column in descending order. The amended query now correctly returns only staff details from the Research_Staff table sorted in ascending order."
        ],
        "rules": [
            "1) When selecting columns from the Research_Staff table: use \"staff_details\" instead of * to return only specific columns. 2) When referencing the research staff table: use exact table name \"Research_Staff\" with proper case instead of \"research_staff\". 3) When ordering results alphabetically in ascending order: sort by \"staff_details\" column in ASC order instead of non-existent \"name\" column in DESC order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM research_staff ORDER BY name DESC;",
            "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC;"
        ],
        "rule_sql": [
            "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC;"
        ]
    },
    "2156": {
        "db_id": "formula_1",
        "question": "What is the name and date of the race that occurred most recently?",
        "ground_truth": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "amends": [
            "Do `ORDER BY date DESC` instead of `ORDER BY date ASC` to sort races by most recent date first rather than oldest date first. The amended query now matches RIGHT_SQL's behavior by correctly retrieving the most recent race."
        ],
        "rules": [
            "1) When the question asks for the \"most recently\" occurring race: sort races by the \"date\" column in descending order to put the most recent date first. 2) When retrieving the single most recent race: take only the first row after sorting by date in descending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, date FROM races ORDER BY date ASC LIMIT 1;",
            "SELECT name, date FROM races ORDER BY date DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT name, date FROM races ORDER BY date DESC LIMIT 1;"
        ]
    },
    "3813": {
        "db_id": "e_learning",
        "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?",
        "ground_truth": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
        "amends": [
            "Do reference columns with table aliases `T1.course_name` and `T1.course_description` instead of bare column names `course_name` and `description`. Do join table `Subjects AS T2` instead of omitting it. Do use join condition `T1.subject_id = T2.subject_id` instead of filtering directly on the subject field. Do filter on `T2.subject_name = \"Computer Science\"` instead of `subject = 'Computer Science'` to properly reference the normalized subject table. The amended query now correctly joins the Courses and Subjects tables to filter by subject name while maintaining proper relational integrity."
        ],
        "rules": [
            "1) When answering about courses under a specific subject: join table \"Courses\" as T1 with table \"Subjects\" as T2 using the condition T1.subject_id = T2.subject_id to maintain relational integrity. 2) When the question mentions \"Computer Science\": \"Computer Science\" actually means T2.subject_name = \"Computer Science\" in the schema. 3) When selecting course information: output T1.course_name and T1.course_description columns in the order specified by the question. 4) When combining T1 and T2 for shared entities: link rows where T1.subject_id = T2.subject_id exactly as shown in the amends; keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT course_name, description FROM courses WHERE subject = 'Computer Science';",
            "SELECT T1.course_name, T1.course_description \nFROM Courses AS T1 \nJOIN Subjects AS T2 ON T1.subject_id = T2.subject_id \nWHERE T2.subject_name = 'Computer Science'"
        ],
        "rule_sql": [
            "SELECT T1.course_name, T1.course_description\nFROM Courses AS T1\nJOIN Subjects AS T2 ON T1.subject_id = T2.subject_id\nWHERE T2.subject_name = 'Computer Science';"
        ]
    },
    "3321": {
        "db_id": "college_1",
        "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "ground_truth": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
        "amends": [
            "Do use table aliases `T1`, `T2`, `T3`, and `T4` instead of `p` and `c`. Do change the SELECT list to `T2.emp_fname` and `T1.class_room` instead of `p.first_name` and `c.classroom`. Do add joins with `employee AS T2` on `T1.prof_num = T2.emp_num`, `professor AS T3` on `T2.emp_num = T3.emp_num`, and `department AS T4` on `T4.dept_code = T3.dept_code` instead of a single join between `professors` and `courses`. Do change the WHERE filter to `T4.dept_name = 'Accounting'` instead of `p.department = 'Accounting'`. The amended query now correctly joins through multiple related tables to filter by department name and returns the appropriate employee first name and classroom fields, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"first names of professors in the Accounting department who teach courses and the classroom\": make sure the output order: T2.emp_fname, T1.class_room\n2) When the question mentions \"professors\": use the professor table as T3 and join through employee table T2 on T2.emp_num = T3.emp_num\n3) When the question mentions \"Accounting department\": filter using T4.dept_name = 'Accounting' exactly as written\n4) When combining tables for professors teaching courses: link rows where T1.prof_num = T2.emp_num and T2.emp_num = T3.emp_num and T4.dept_code = T3.dept_code, keeping only matching pairs (inner match)\n5) When the question asks for \"first names\": use T2.emp_fname instead of p.first_name\n6) When the question asks for \"class room\": use T1.class_room instead of c.classroom"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT p.first_name, c.classroom FROM professors p JOIN courses c ON p.professor_id = c.professor_id WHERE p.department = 'Accounting'",
            "SELECT T2.EMP_FNAME, T1.CLASS_ROOM\nFROM CLASS AS T1\nJOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM\nJOIN PROFESSOR AS T3 ON T2.EMP_NUM = T3.EMP_NUM\nJOIN DEPARTMENT AS T4 ON T3.DEPT_CODE = T4.DEPT_CODE\nWHERE T4.DEPT_NAME = 'Accounting';"
        ],
        "rule_sql": [
            "SELECT T2.emp_fname, T1.class_room\nFROM CLASS T1\nJOIN EMPLOYEE T2 ON T1.prof_num = T2.emp_num\nJOIN PROFESSOR T3 ON T2.emp_num = T3.emp_num\nJOIN DEPARTMENT T4 ON T3.dept_code = T4.dept_code\nWHERE T4.dept_name = 'Accounting'"
        ]
    },
    "4123": {
        "db_id": "film_rank",
        "question": "Return the maximum and minimum number of cities across all markets.",
        "ground_truth": "SELECT max(Number_cities) ,  min(Number_cities) FROM market",
        "amends": [
            "Do reference the `market` table directly instead of using a subquery on `cities`. Do use column name `Number_cities` instead of `city_count` in the aggregate functions. Do remove the alias assignments `as max_cities` and `as min_cities` instead of keeping them. The amended query now correctly calculates maximum and minimum city counts directly from the market table with the proper column reference."
        ],
        "rules": [
            "1) When answering about maximum and minimum number of cities across all markets: use the \"market\" table directly instead of using a subquery on \"cities\". 2) When calculating maximum and minimum values: use the column name \"Number_cities\" instead of \"city_count\" in the aggregate functions. 3) When producing output columns: do not assign aliases \"as max_cities\" and \"as min_cities\" to the aggregate results."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(city_count) as max_cities, MIN(city_count) as min_cities FROM (SELECT COUNT(*) as city_count FROM cities GROUP BY market_id)",
            "SELECT MAX(Number_cities), MIN(Number_cities) FROM market;"
        ],
        "rule_sql": [
            "SELECT MAX(Number_cities), MIN(Number_cities) FROM market;"
        ]
    },
    "1270": {
        "db_id": "apartment_rentals",
        "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "ground_truth": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "amends": [
            "Do use `INTERSECT` with two separate queries instead of a single query with conflicting `AND` conditions. Do change the source from `apartments` to a join between `Apartment_Bookings AS T1` and `Apartments AS T2` instead of querying `apartments` directly. Do use join condition `T1.apt_id = T2.apt_id` instead of no join. Do filter on `T1.booking_status_code = \"Confirmed\"` in one branch and `T1.booking_status_code = \"Provisional\"` in another instead of filtering `status_code` for both values simultaneously. Do select `T2.apt_number` instead of `apartment_number`. The amended query now correctly finds apartments with both confirmed and provisional bookings using set intersection logic."
        ],
        "rules": [
            "1) When answering about apartments with bookings having both status codes: use INTERSECT with two separate queries instead of a single query with conflicting AND conditions. 2) When combining Apartment_Bookings and Apartments tables: link rows where T1.apt_id = T2.apt_id and keep only matching pairs (inner match). 3) When filtering for \"Confirmed\" status: use T1.booking_status_code = \"Confirmed\" exactly as specified. 4) When filtering for \"Provisional\" status: use T1.booking_status_code = \"Provisional\" exactly as specified. 5) When selecting apartment numbers: use T2.apt_number instead of apartment_number."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT apartment_number FROM apartments WHERE status_code = 'Provisional' AND status_code = 'Confirmed'",
            "SELECT T2.apt_number\nFROM Apartment_Bookings AS T1\nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id\nWHERE T1.booking_status_code = 'Confirmed'\nINTERSECT\nSELECT T2.apt_number\nFROM Apartment_Bookings AS T1\nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id\nWHERE T1.booking_status_code = 'Provisional'"
        ],
        "rule_sql": [
            "SELECT T2.apt_number\nFROM Apartment_Bookings T1\nINNER JOIN Apartments T2 ON T1.apt_id = T2.apt_id\nWHERE T1.booking_status_code = 'Provisional'\nINTERSECT\nSELECT T2.apt_number\nFROM Apartment_Bookings T1\nINNER JOIN Apartments T2 ON T1.apt_id = T2.apt_id\nWHERE T1.booking_status_code = 'Confirmed'"
        ]
    },
    "5394": {
        "db_id": "tracking_software_problems",
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "ground_truth": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "amends": [
            "Do join `problems AS T1` with `product AS T2` on `T1.product_id = T2.product_id` instead of querying only the `problems` table. Do reference `T1.problem_id` with table alias instead of just `problem_id`. Do filter on `T2.product_name = 'voluptatem'` instead of filtering directly on `problems.product_name`. Do use `T1.date_problem_reported > '1995'` instead of `reported_date > '1995-01-01'` with the correct column name and simplified date comparison. The amended query now properly joins the tables and uses the correct column references to match the intended logic."
        ],
        "rules": [
            "1) When answering about problems from a specific product: join table \"problems\" as T1 with table \"product\" as T2 on T1.product_id = T2.product_id to properly relate problems to their products. 2) When the question mentions \"ids of the problems\": use T1.problem_id as the output column with the table alias. 3) When the question mentions product \"voluptatem\": filter using T2.product_name = 'voluptatem' to match the exact product name. 4) When the question asks for problems reported after 1995: use T1.date_problem_reported > '1995' with the correct column name and simplified year comparison."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT problem_id FROM problems WHERE product_name = 'voluptatem' AND reported_date > '1995-01-01';",
            "SELECT T1.problem_id \nFROM Problems AS T1\nJOIN Product AS T2 ON T1.product_id = T2.product_id\nWHERE T2.product_name = 'voluptatem' \nAND T1.date_problem_reported > '1995'"
        ],
        "rule_sql": [
            "SELECT T1.problem_id\nFROM Problems AS T1\nJOIN Product AS T2 ON T1.product_id = T2.product_id\nWHERE T2.product_name = 'voluptatem'\nAND T1.date_problem_reported > '1995'"
        ]
    },
    "822": {
        "db_id": "chinook_1",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "ground_truth": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "amends": [
            "Do join `ALBUM AS T1` with `ARTIST AS T2` on `T1.ArtistId = T2.ArtistId` instead of querying only the `artists` table. Do filter on `T2.Name = \"Metallica\"` instead of filtering directly on the artists table without the join. Do count albums by Metallica instead of counting artists named Metallica. The amended query now correctly counts albums by the specified artist rather than just counting the artist record itself."
        ],
        "rules": [
            "1) When answering about \"number of albums by the artist Metallica\": make sure the output order: count of albums\n2) When the question mentions \"albums by the artist\": join table \"ALBUM\" as T1 with table \"ARTIST\" as T2 on T1.ArtistId = T2.ArtistId using inner match\n3) When the question specifies artist \"Metallica\": filter on T2.Name = \"Metallica\" exactly as written\n4) When counting albums: count using the canonical key from T1 (album entities) rather than counting artists"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM artists WHERE name = 'Metallica';",
            "SELECT COUNT(*) AS NumberOfAlbums FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'Metallica'"
        ],
        "rule_sql": [
            "SELECT COUNT(*) AS \"count of albums\" FROM Album AS T1 INNER JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\""
        ]
    },
    "3153": {
        "db_id": "assets_maintenance",
        "question": "What is the description of the type of the company who concluded its contracts most recently?",
        "ground_truth": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1",
        "amends": [
            "Do select `T1.company_name` instead of `description` and change the source from `company_types` to `Third_Party_Companies AS T1` instead of a single table. Do use `JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id` instead of nested subqueries with `contracts` table. Do add `JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code` instead of filtering by `type_id`. Do order by `T2.contract_end_date DESC` instead of `conclusion_date DESC` and maintain `LIMIT 1` instead of using multiple nested subqueries. The amended query now correctly joins the necessary tables and retrieves the company name from the most recent contract based on end date instead of using inefficient nested subqueries."
        ],
        "rules": [
            "1) When answering about \"description of the type of the company\": make sure the output order: T1.company_name 2) When combining T1 and T2 for shared entities: link rows where T1.company_id = T2.maintenance_contract_company_id and keep only matching pairs (inner match) 3) When combining T1 and T3 for shared entities: link rows where T1.company_type_code = T3.company_type_code and keep only matching pairs (inner match) 4) When the question mentions \"most recently\": rank rows by T2.contract_end_date in descending order and keep the first 1 row 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for table names like Third_Party_Companies, Maintenance_Contracts, and Ref_Company_Types"
        ],
        "amend_res": -1,
        "rule_res": -1,
        "amend_sql": [
            "SELECT description FROM company_types WHERE type_id = (SELECT type_id FROM companies WHERE company_id = (SELECT company_id FROM contracts ORDER BY conclusion_date DESC LIMIT 1));",
            "SELECT T1.company_name \nFROM Third_Party_Companies AS T1\nJOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id\nORDER BY T2.contract_end_date DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.company_type\nFROM Third_Party_Companies T1\nINNER JOIN Maintenance_Contracts T2 ON T1.company_id = T2.maintenance_contract_company_id\nORDER BY T2.contract_end_date DESC\nLIMIT 1;"
        ]
    },
    "5673": {
        "db_id": "dorm_1",
        "question": "How many girl students who are younger than 25?",
        "ground_truth": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "amends": [
            "Do reference table `student` instead of `students` and use column `sex` with value `'F'` instead of `gender` with value `'male'` while keeping the `age < 25` filter unchanged, and maintain the `COUNT(*)` aggregate function with consistent lowercase syntax. The amended query now correctly counts female students under 25 from the appropriate table structure."
        ],
        "rules": [
            "1) When the question mentions \"students\": use table \"student\" instead of \"students\". 2) When the question mentions \"girl students\": use column \"sex\" with value 'F' instead of \"gender\" with value 'male'. 3) When the question asks for students \"younger than 25\": use filter condition age < 25. 4) When counting students: use COUNT(*) aggregate function with lowercase syntax."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'male' AND age < 25;",
            "SELECT COUNT(*) FROM Student WHERE sex = 'F' AND age < 25"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND Age < 25"
        ]
    },
    "4692": {
        "db_id": "college_3",
        "question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
        "ground_truth": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "amends": [
            "Do use `T3.Fname` instead of `first_name` and add explicit table aliases throughout. Do join three tables `ENROLLED_IN AS T1`, `GRADECONVERSION AS T2`, and `STUDENT AS T3` instead of querying a single `students` table. Do specify join conditions `T1.Grade = T2.lettergrade` and `T1.StuID = T3.StuID` instead of having no joins. Do filter on `T2.gradepoint >= 3.8` instead of `grade_point >= 3.8` to reference the correct table's grade point values. The amended query now correctly joins enrollment records with grade conversions and student data to identify students with high grade point averages, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about distinct first names for students with grade point of 3.8 or above: make sure the output order: T3.Fname\n2) When the question mentions \"grade point of 3.8 or above\": \"grade point\" actually means \"T2.gradepoint >= 3.8\" in schema\n3) When combining ENROLLED_IN as T1, GRADECONVERSION as T2, and STUDENT as T3: link rows where T1.Grade = T2.lettergrade and T1.StuID = T3.StuID; keep only matching pairs (inner match)\n4) When the question asks for \"distinct first names\": compute the number of unique values of T3.Fname\n5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT first_name FROM students WHERE grade_point >= 3.8",
            "SELECT DISTINCT T3.Fname\nFROM Enrolled_in AS T1\nJOIN Gradeconversion AS T2 ON T1.Grade = T2.lettergrade\nJOIN Student AS T3 ON T1.StuID = T3.StuID\nWHERE T2.gradepoint >= 3.8"
        ],
        "rule_sql": [
            "SELECT DISTINCT T3.Fname\nFROM Enrolled_in AS T1\nJOIN Gradeconversion AS T2 ON T1.Grade = T2.lettergrade\nJOIN Student AS T3 ON T1.StuID = T3.StuID\nWHERE T2.gradepoint >= 3.8\nORDER BY T3.Fname"
        ]
    },
    "271": {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
        "ground_truth": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "amends": [
            "Do use `INTERSECT` to find common nominees instead of joining the same table twice with different conditions. Do query from the `musical` table instead of the `nominees` and `nominations` tables. Do filter for `Award = 'Tony Award'` in the first branch instead of using `nom1.award_type = 'Tony Award'`. Do filter for `Award = 'Drama Desk Award'` in the second branch instead of using `nom2.award_type = 'Drama Desk Award'`. Do select `Nominee` column instead of `n.name`. Do remove the `DISTINCT` keyword since `INTERSECT` inherently returns unique values instead of keeping it. The amended query now correctly finds nominees who have received both awards using set intersection logic."
        ],
        "rules": [
            "1) When answering about nominees nominated for both Tony Award and Drama Desk Award: use INTERSECT to find common nominees instead of joining the same table twice. 2) When querying from the musical table: select the \"Nominee\" column instead of n.name. 3) When filtering for Tony Award nominations: use Award = 'Tony Award' instead of award_type conditions. 4) When filtering for Drama Desk Award nominations: use Award = 'Drama Desk Award' instead of award_type conditions. 5) When using INTERSECT: remove the DISTINCT keyword since INTERSECT inherently returns unique values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT n.name \nFROM nominees n\nJOIN nominations nom1 ON n.id = nom1.nominee_id\nJOIN nominations nom2 ON n.id = nom2.nominee_id\nWHERE nom1.award_type = 'Tony Award' \nAND nom2.award_type = 'Drama Desk Award';",
            "SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'"
        ],
        "rule_sql": [
            "SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'"
        ]
    },
    "4898": {
        "db_id": "school_player",
        "question": "Show the denomination shared by more than one school.",
        "ground_truth": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "amends": [
            "Do reference table `school` instead of `schools` and use column name `Denomination` instead of `denomination` to match the correct schema. Do maintain the same `GROUP BY` clause with `Denomination` and identical `HAVING COUNT(*) > 1` condition instead of changing any grouping or filtering logic. The amended query now correctly identifies duplicate denominations in the school table with proper table and column references."
        ],
        "rules": [
            "1) When answering about \"denomination shared by more than one school\": use table \"school\" instead of \"schools\" and column \"Denomination\" instead of \"denomination\" to match the schema exactly. 2) When grouping by denomination to find duplicates: group by \"Denomination\" and count the number of schools per group, keeping only groups where the count is greater than 1. 3) When handling text values: preserve the exact case and formatting of denomination values as they appear in the schema (e.g., 'Catholic', 'Anglican', 'Uniting Church')."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT denomination FROM schools GROUP BY denomination HAVING COUNT(*) > 1;",
            "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1"
        ],
        "rule_sql": [
            "SELECT Denomination, COUNT(*) as School_Count FROM school GROUP BY Denomination HAVING COUNT(*) > 1;"
        ]
    },
    "6759": {
        "db_id": "activity_1",
        "question": "What are the first and last name of the faculty who has the most students?",
        "ground_truth": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.fname` and `T1.lname` with table aliases instead of `first_name` and `last_name` without table references. Do add `FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor` with explicit join conditions instead of just `FROM faculty` without any joins. Do add `GROUP BY T1.FacID` to properly aggregate instead of omitting grouping. Do use `count(*)` in ORDER BY instead of `COUNT(student_id)` which would fail without grouping. The amended query now correctly joins faculty with their advised students, groups by faculty ID, and orders by the count of students per advisor to find the faculty member with the most advisees, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When selecting faculty names: use exact column tokens \"T1.fname\" and \"T1.lname\" instead of generic \"first_name\" and \"last_name\". 2) When answering about faculty with the most students: join \"Faculty AS T1\" with \"Student AS T2\" using the exact condition \"T1.FacID = T2.advisor\" to link faculty to their advised students. 3) When counting students per faculty: group by the faculty identifier \"T1.FacID\" to properly aggregate student counts. 4) When determining which faculty has the most students: order results by the count of students (using \"count(*)\") in descending order and keep only the top result. 5) When combining faculty and student data: perform an inner match using the exact join condition \"T1.FacID = T2.advisor\" to ensure only faculty with assigned students are considered."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name FROM faculty ORDER BY COUNT(student_id) DESC LIMIT 1;",
            "SELECT T1.Fname, T1.Lname\nFROM Faculty AS T1\nJOIN Student AS T2 ON T1.FacID = T2.Advisor\nGROUP BY T1.FacID\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.fname, T1.lname\nFROM Faculty AS T1\nJOIN Student AS T2 ON T1.FacID = T2.advisor\nGROUP BY T1.FacID\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "315": {
        "db_id": "product_catalog",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "ground_truth": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "amends": [
            "Do use `t1.catalog_entry_name` from `Catalog_Contents AS t1` instead of `entry_name` from `catalog`. Do join `Catalog_Contents_Additional_Attributes AS t2` on `t1.catalog_entry_id = t2.catalog_entry_id` instead of querying a single table. Do filter on `t2.attribute_value` instead of `attribute`. Do use the subquery on `Catalog_Contents_Additional_Attributes` for `attribute_value` instead of `catalog` for `attribute`. The amended query now correctly joins the two related tables and uses the proper column names to match the intended logic.",
            "Do filter on `attribute_value` instead of `attribute_id` in the WHERE clause, and do use `attribute_value` instead of `attribute_id` in the subquery's SELECT and GROUP BY clauses, instead of referencing the wrong column throughout the query. This change ensures the query correctly identifies the most frequent attribute value rather than the most frequent attribute ID, which aligns with the intended logic of finding catalog entries based on the most common attribute value."
        ],
        "rules": [
            "1) When answering about \"entry names of catalog\": make sure the output order: t1.catalog_entry_name. 2) When the question mentions \"attribute\": \"attribute\" actually means \"t2.attribute_value\" in schema. 3) When combining T1 and T2 for shared entities: link rows where t1.catalog_entry_id = t2.catalog_entry_id; keep only matching pairs (inner match). 4) When the question asks for \"most entries\" by attribute: rank attribute values by count of entries in descending order and keep the first 1 value. 5) When counting entries per attribute: compute the number of rows using the canonical key token t2.catalog_entry_id.",
            "1) When the question asks about \"attribute possessed by most entries\": use \"attribute_value\" instead of \"attribute_id\" to identify the most common attribute value. 2) When counting the most frequent attribute: count occurrences of \"attribute_value\" in Catalog_Contents_Additional_Attributes and find the value with the highest count. 3) When filtering catalog entries by the most common attribute: use the exact \"attribute_value\" that appears most frequently in the subquery results."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT entry_name FROM catalog WHERE attribute = (SELECT attribute FROM catalog GROUP BY attribute ORDER BY COUNT(*) DESC LIMIT 1);",
            "SELECT t1.catalog_entry_name\nFROM Catalog_Contents AS t1\nJOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id\nWHERE t2.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
            "SELECT t1.catalog_entry_name\nFROM Catalog_Contents AS t1\nJOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id\nWHERE t2.attribute_value = (\n    SELECT attribute_value\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_value\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
        ],
        "rule_sql": [
            "SELECT t1.catalog_entry_name\nFROM Catalog_Contents t1\nINNER JOIN Catalog_Contents_Additional_Attributes t2 ON t1.catalog_entry_id = t2.catalog_entry_id\nWHERE t2.attribute_value = (\n    SELECT attribute_value\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_value\n    ORDER BY COUNT(catalog_entry_id) DESC\n    LIMIT 1\n)\nORDER BY t1.catalog_entry_name;"
        ]
    },
    "974": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "ground_truth": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "amends": [
            "Do reference table `enzyme` instead of `enzymes` while keeping the same `SELECT name` clause and `WHERE name LIKE \"%ALA%\"` filter unchanged. The amendment corrects the table name to match the actual schema while preserving the identical query logic and pattern matching behavior."
        ],
        "rules": [
            "1) When the question asks about enzymes: use the table \"enzyme\" instead of \"enzymes\" 2) When filtering for names containing 'ALA': use the exact pattern \"%ALA%\" with the column \"name\" 3) When selecting enzyme names: output the column \"name\" from table \"enzyme\""
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM enzymes WHERE name LIKE '%ALA%';",
            "SELECT name FROM enzyme WHERE name LIKE '%ALA%'"
        ],
        "rule_sql": [
            "SELECT name FROM enzyme WHERE name LIKE '%ALA%';"
        ]
    },
    "1921": {
        "db_id": "protein_institute",
        "question": "Show the names of buildings except for those having an institution founded in 2003.",
        "ground_truth": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003",
        "amends": [
            "Do use `EXCEPT` to exclude buildings with institutions founded in 2003 instead of using `!=` comparison which would incorrectly include buildings without any institutions. Do add a join between `building` and `institution` tables on `building_id` instead of querying only the `buildings` table. Do filter for `founded = 2003` in the excluded subquery instead of filtering `institution_founded != 2003` which doesn't account for buildings without institutions. Do properly alias tables as `T1` and `T2` instead of omitting aliases. The amended query now correctly excludes only buildings that have institutions founded in 2003 while including buildings without institutions, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about building names while excluding buildings with institutions founded in 2003: use EXCEPT to exclude buildings that have institutions founded in 2003 instead of using != comparison. 2) When combining building and institution tables: link rows where T1.building_id = T2.building_id and keep only matching pairs (inner match). 3) When filtering for institutions founded in 2003: use the exact literal value 2003 for the founded column. 4) When the question asks for building names: output the name column from the buildings table (T1). 5) When excluding buildings with institutions founded in 2003: create a subquery that selects building_id from institutions where founded = 2003 and use EXCEPT to remove those buildings from the main result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM buildings WHERE institution_founded != 2003;",
            "SELECT T1.Name\nFROM building T1\nEXCEPT\nSELECT T1.Name\nFROM building T1\nJOIN Institution T2 ON T1.building_id = T2.building_id\nWHERE T2.Founded = 2003"
        ],
        "rule_sql": [
            "SELECT Name FROM building\nEXCEPT\nSELECT b.Name FROM building b\nJOIN Institution i ON b.building_id = i.building_id\nWHERE i.Founded = 2003"
        ]
    },
    "4353": {
        "db_id": "tracking_grants_for_research",
        "question": "What is the complete description of the job of a researcher?",
        "ground_truth": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
        "amends": [
            "Do select only `role_description` instead of all columns with `*`. Do query from `Staff_Roles` table instead of `jobs` table. Do filter on `role_code` column instead of `title` column while maintaining the same filter value `'researcher'`. The amended query now correctly retrieves role descriptions from the appropriate staff roles table using the proper identifier column."
        ],
        "rules": [
            "1) When the question asks for a complete description of a job role: select only the \"role_description\" column instead of all columns. 2) When querying about staff roles: use the \"Staff_Roles\" table instead of a \"jobs\" table. 3) When filtering for a specific role: filter on the \"role_code\" column using the exact literal value 'researcher' instead of a \"title\" column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM jobs WHERE title = 'researcher';",
            "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher';"
        ],
        "rule_sql": [
            "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher';"
        ]
    },
    "1987": {
        "db_id": "phone_market",
        "question": "Show the names of phones and the districts of markets they are on.",
        "ground_truth": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "amends": [
            "Do select `T3.Name` and `T2.District` instead of `phone_name` and `market_name`. Do use three tables with `phone_market AS T1`, `market AS T2`, and `phone AS T3` instead of just `phones` and `markets`. Do join on `T1.Market_ID = T2.Market_ID` and `T1.Phone_ID = T3.Phone_ID` instead of `phones.market_id = markets.district_id`. The amended query now correctly uses a junction table to resolve the many-to-many relationship between phones and markets, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"names of phones and districts of markets they are on\": make sure the output order: T3.Name, T2.District\n2) When the question mentions \"phones\": use table \"phone\" as T3 with exact identifier \"Phone_ID\" as canonical key\n3) When the question mentions \"markets\": use table \"market\" as T2 with exact identifier \"Market_ID\" as canonical key\n4) When combining tables for phone-market relationships: use junction table \"phone_market\" as T1 to link T2 and T3 through exact key equalities T1.Market_ID = T2.Market_ID and T1.Phone_ID = T3.Phone_ID\n5) When joining multiple tables: perform inner matches only, keeping only rows where all join conditions are satisfied"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT phone_name, market_name FROM phones JOIN markets ON phones.market_id = markets.district_id",
            "SELECT T3.Name, T2.District\nFROM phone_market AS T1\nJOIN market AS T2 ON T1.Market_ID = T2.Market_ID\nJOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID;"
        ],
        "rule_sql": [
            "SELECT T3.Name, T2.District\nFROM phone_market T1\nINNER JOIN market T2 ON T1.Market_ID = T2.Market_ID\nINNER JOIN phone T3 ON T1.Phone_ID = T3.Phone_ID\nORDER BY T3.Name, T2.District;"
        ]
    },
    "3901": {
        "db_id": "hospital_1",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "ground_truth": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "amends": [
            "Do select `head` instead of `employee_id` and use `GROUP BY departmentID` instead of a subquery. Do use `count(departmentID)` instead of `COUNT(*)` and remove the `WHERE` filter entirely instead of keeping the `position = 'Head'` condition. Do query from `department` table instead of `employees` table and remove the subquery correlation. Do order by the count directly instead of through a subquery ordering. The amended query now correctly identifies the department head with the smallest department count by querying the department table directly.",
            "Do select `head` instead of `d.Head` and remove the table alias. Do remove the `JOIN` with `Affiliated_With` table and `WHERE` filter on `PrimaryAffiliation` instead of including them. Do change the aggregate function to `count(departmentID)` instead of `COUNT(aw.Physician)`. Do remove the explicit `GROUP BY` clause instead of keeping it since the aggregation is now performed directly in the ORDER BY. The amended query now correctly retrieves the department head with the smallest department size based on departmentID count instead of physician affiliations."
        ],
        "rules": [
            "1) When answering about \"head of the department with the least employees\": make sure the output order: head\n2) When counting employees per department: use count(departmentID) instead of COUNT(*)\n3) When grouping departments: use GROUP BY departmentID instead of a subquery approach\n4) When querying for department information: use the department table instead of the employees table\n5) When ordering by department size: order by the count directly instead of through subquery ordering\n6) When identifying department heads: do not use position = 'Head' filter as the head column already contains this information",
            "1) When answering about \"head of the department with the least employees\": make sure the output order: head\n2) When counting employees per department: use count(\"DepartmentID\") instead of counting physicians from the Affiliated_With table\n3) When the question asks for the department with the least employees: order by the employee count in ascending order and keep only the first result\n4) When handling department head information: use the exact column \"head\" without table alias\n5) When computing department size: do not join with the Affiliated_With table or filter by PrimaryAffiliation = 1"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT employee_id FROM employees WHERE department_id = (SELECT department_id FROM employees GROUP BY department_id ORDER BY COUNT(*) ASC LIMIT 1) AND position = 'Head'",
            "SELECT d.Head \nFROM Department d\nJOIN Affiliated_With aw ON d.DepartmentID = aw.Department\nWHERE aw.PrimaryAffiliation = 1\nGROUP BY d.DepartmentID\nORDER BY COUNT(aw.Physician) ASC\nLIMIT 1;",
            "SELECT Head FROM Department GROUP BY DepartmentID ORDER BY COUNT(DepartmentID) LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT head FROM Department GROUP BY DepartmentID ORDER BY COUNT(DepartmentID) ASC LIMIT 1"
        ]
    },
    "1524": {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "ground_truth": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "amends": [
            "Do select `customer_details` instead of `name` from the `customers` table. Do use `EXCEPT` to find customers without policies instead of filtering for `policy_id IS NULL`. Do add a join between `policies` and `customers` on `customer_id` to identify customers with existing policies, instead of relying on a potentially missing `policy_id` column. Do remove the `WHERE` clause entirely instead of using it to filter for null policy IDs. The amended query now correctly identifies customers without any associated policies by comparing all customers against those with existing policy relationships, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When selecting customer names from the customers table: use the exact column token \"customer_details\" instead of \"name\". 2) When finding customers without any policies: use EXCEPT operation to compare all customers against those with existing policy relationships instead of filtering for null policy IDs. 3) When combining customers and policies tables: link rows where \"customer_id\" values are equal between both tables to identify customers with existing policies. 4) When the question asks for customers without policies: remove any WHERE clause that filters for null policy IDs and instead use the comparison approach through table relationships."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM customers WHERE policy_id IS NULL;",
            "SELECT Customer_Details FROM Customers\nEXCEPT\nSELECT c.Customer_Details FROM Customers c\nJOIN Policies p ON c.Customer_ID = p.Customer_ID;"
        ],
        "rule_sql": [
            "SELECT Customer_Details FROM Customers\nEXCEPT\nSELECT c.Customer_Details FROM Customers c\nJOIN Policies p ON c.Customer_ID = p.Customer_ID"
        ]
    },
    "4360": {
        "db_id": "tracking_grants_for_research",
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "ground_truth": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `organisation_id`, `organisation_type`, and `organisation_details` from the `Organisations` table instead of selecting `organisation_id`, `type`, and `detail` from the `research_staff` table. Do join `Organisations` with `Research_Staff` on `organisation_id = employer_organisation_id` instead of querying only the `research_staff` table. Do group by `T1.organisation_id` instead of grouping by `organisation_id` alone. Do order by `count(*)` descending instead of ordering by `staff_count` descending. Do remove the explicit `staff_count` alias in the select list instead of keeping it, as the count is now only used in the order by clause. The amended query now correctly joins the organization details with staff counts and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"organisation that hired the most research staff\": select \"organisation_id\", \"organisation_type\", and \"organisation_details\" from table \"Organisations\" (T1) instead of from \"research_staff\". 2) When combining organisation details with research staff counts: join \"Organisations\" (T1) with \"Research_Staff\" (T2) where T1.organisation_id = T2.employer_organisation_id using inner match. 3) When grouping by organisation: group by T1.organisation_id instead of just organisation_id. 4) When ordering by staff count: order by count(*) descending instead of using an alias. 5) When producing output: do not include the staff count column in the final results, only show organisation_id, organisation_type, and organisation_details."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT organisation_id, type, detail, COUNT(*) as staff_count \nFROM research_staff \nGROUP BY organisation_id \nORDER BY staff_count DESC \nLIMIT 1;",
            "SELECT o.organisation_id, o.organisation_type, o.organisation_details\nFROM Organisations o\nJOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id\nGROUP BY o.organisation_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT o.organisation_id, o.organisation_type, o.organisation_details\nFROM Organisations o\nINNER JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id\nGROUP BY o.organisation_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "704": {
        "db_id": "customers_card_transactions",
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "ground_truth": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "amends": [
            "Do select `customer_first_name`, `customer_last_name`, and `customer_phone` instead of `full_name` and `phone`. Do join `Customers_cards` with `Customers` on `customer_id` instead of querying only the `customers` table. Do use table aliases `T1` and `T2` instead of no aliases. Do filter on `card_number` in the joined `Customers_cards` table instead of filtering on `card_number` in what appears to be a non-existent column in the original table. The amended query now correctly retrieves customer information by joining the card data with customer details using the proper relationship."
        ],
        "rules": [
            "1) When the question asks for customer information by card number: join table \"Customers\" (as T1) with table \"Customers_Cards\" (as T2) where T1.\"customer_id\" = T2.\"customer_id\" to link customer details with card data. 2) When filtering by card number \"4560596484842\": apply the filter condition T2.\"card_number\" = '4560596484842' exactly as specified. 3) When selecting customer name and phone: output T1.\"customer_first_name\", T1.\"customer_last_name\", and T1.\"customer_phone\" instead of generic \"full_name\" and \"phone\" columns. 4) When using table aliases: maintain T1 for \"Customers\" table and T2 for \"Customers_Cards\" table as established in the join relationship."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT full_name, phone FROM customers WHERE card_number = '4560596484842';",
            "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone\nFROM Customers_Cards T1\nJOIN Customers T2 ON T1.customer_id = T2.customer_id\nWHERE T1.card_number = '4560596484842'"
        ],
        "rule_sql": [
            "SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 JOIN Customers_Cards AS T2 ON T1.customer_id = T2.customer_id WHERE T2.card_number = '4560596484842'"
        ]
    },
    "1387": {
        "db_id": "college_2",
        "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
        "ground_truth": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "amends": [
            "Do join `course AS T1` with `teaches AS T2` on `T1.course_id = T2.course_id` and `instructor AS T3` on `T2.id = T3.id` instead of querying only the `courses` table. Do select `T1.title` and `T3.name` instead of `title` and `instructor_name`. Do use `YEAR = 2008` instead of `year = 2008`. Do order by `T1.title` instead of `instructor_name ASC`. The amended query now correctly joins the necessary tables to retrieve course titles with corresponding instructor names for the year 2008."
        ],
        "rules": [
            "1) When answering about courses and their instructors: join table \"course\" as T1 with table \"teaches\" as T2 on T1.course_id = T2.course_id, then join with table \"instructor\" as T3 on T2.id = T3.id, keeping only matching pairs (inner match). 2) When selecting output columns: use T1.title for course titles and T3.name for instructor names instead of title and instructor_name. 3) When filtering for courses in 2008: use YEAR = 2008 instead of year = 2008. 4) When ordering results alphabetically by title: order by T1.title instead of instructor_name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title, instructor_name FROM courses WHERE year = 2008 ORDER BY instructor_name ASC;",
            "SELECT T1.title, T3.name\nFROM course AS T1\nJOIN teaches AS T2 ON T1.course_id = T2.course_id\nJOIN instructor AS T3 ON T2.ID = T3.ID\nJOIN section AS s ON T2.course_id = s.course_id AND T2.sec_id = s.sec_id AND T2.semester = s.semester AND T2.year = s.year\nWHERE s.year = 2008\nORDER BY T1.title;"
        ],
        "rule_sql": [
            "SELECT T1.title, T3.name\nFROM course AS T1\nJOIN teaches AS T2 ON T1.course_id = T2.course_id\nJOIN instructor AS T3 ON T2.ID = T3.ID\nJOIN section AS s ON T2.course_id = s.course_id AND T2.sec_id = s.sec_id AND T2.semester = s.semester AND T2.year = s.year\nWHERE s.year = 2008\nORDER BY T1.title;"
        ]
    },
    "1706": {
        "db_id": "epinions_1",
        "question": "Find the name of the user who gives the most reviews.",
        "ground_truth": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do specify `T1.name` with table alias instead of just `name` without qualification. Do add `FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id` instead of omitting the join and using an incorrect table reference. Do add `GROUP BY T2.u_id` instead of attempting to use an aggregate function without grouping. Do use `count(*)` in the ORDER BY instead of `COUNT(reviews.id)` which references a non-existent table. The amended query now correctly joins the user and review tables, groups by user ID, and counts reviews per user to find the user with the most reviews, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"the user who gives the most reviews\": make sure the output order: T1.name. 2) When the question mentions \"user\": \"user\" actually means \"useracct as T1\" in schema. 3) When the question mentions \"reviews\": \"reviews\" actually means \"review as T2\" in schema. 4) When combining T1 and T2 for shared entities: link rows where T1.u_id = T2.u_id exactly as shown in the amends; keep only matching pairs (inner match). 5) When the question asks for \"count of reviews\": compute the number of rows using count(*) per user group. 6) When the question asks for \"most reviews\": rank rows by count(*) in descending direction and keep the first 1 row. 7) When organizing results by user: group by T2.u_id to compute aggregates per user."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM users ORDER BY COUNT(reviews.id) DESC LIMIT 1;",
            "SELECT T1.name\nFROM useracct AS T1\nJOIN review AS T2 ON T1.u_id = T2.u_id\nGROUP BY T2.u_id\nORDER BY count(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.name\nFROM useracct AS T1\nINNER JOIN review AS T2 ON T1.u_id = T2.u_id\nGROUP BY T2.u_id\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ]
    },
    "4601": {
        "db_id": "entertainment_awards",
        "question": "What are the names and locations of festivals?",
        "ground_truth": "SELECT Festival_Name ,  LOCATION FROM festival_detail",
        "amends": [
            "Do select `Festival_Name` and `LOCATION` instead of `name` and `date`. Do use table `festival_detail` instead of `festivals`. The amended query now correctly retrieves festival names and locations from the appropriate table."
        ],
        "rules": [
            "1) When answering about \"names and locations of festivals\": make sure the output order: Festival_Name, LOCATION. 2) When the question mentions \"names\": \"names\" actually means \"Festival_Name in schema\". 3) When the question mentions \"locations\": \"locations\" actually means \"LOCATION in schema\". 4) When retrieving festival information: use table \"festival_detail\" instead of \"festivals\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, date FROM festivals;",
            "SELECT Festival_Name, Location FROM festival_detail;"
        ],
        "rule_sql": [
            "SELECT Festival_Name, Location FROM festival_detail;"
        ]
    },
    "6397": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "ground_truth": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add table `Accounts AS T1` and `Statements AS T2` with a `JOIN` on `T1.statement_id = T2.statement_id` instead of querying only the `statements` table. Do change the SELECT list to `T1.statement_id` and `T2.statement_details` instead of `statement_id` and `statement_detail`. Do add `GROUP BY T1.statement_id` and order by `count(*) DESC` instead of ordering by `statement_id DESC`. The amended query now correctly joins account and statement data, groups by statement_id, and orders by frequency count instead of statement_id value, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"statement with most number of accounts\": make sure the output order: T1.statement_id, T2.statement_details. 2) When the question mentions \"most number of accounts\": count the number of rows using T1.statement_id as the grouping key and order by count(*) DESC. 3) When combining Accounts AS T1 and Statements AS T2: link rows where T1.statement_id = T2.statement_id and keep only matching pairs (inner match). 4) When the question asks for \"statement id and statement detail\": select T1.statement_id and T2.statement_details as the exact output columns."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT statement_id, statement_detail FROM statements ORDER BY statement_id DESC LIMIT 1;",
            "SELECT T1.statement_id, T2.statement_details\nFROM Accounts AS T1\nJOIN Statements AS T2 ON T1.statement_id = T2.statement_id\nGROUP BY T1.statement_id\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.statement_id, T2.statement_details\nFROM Accounts AS T1\nINNER JOIN Statements AS T2 ON T1.statement_id = T2.statement_id\nGROUP BY T1.statement_id\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ]
    },
    "5782": {
        "db_id": "customer_complaints",
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "ground_truth": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "amends": [
            "Do select `email_address` instead of `email` to use the correct column name. Do change the WHERE filter to use a subquery that excludes customers with complaints (`customer_id NOT IN (SELECT customer_id FROM complaints)`) instead of filtering by `complaint_count > 0` to properly identify customers without any complaint records. The amended query now correctly matches the intended behavior of selecting customers who have not filed any complaints."
        ],
        "rules": [
            "1) When the question asks for \"email\": use the exact column name \"email_address\" from the Customers table instead of \"email\". 2) When identifying customers who have never filed a complaint: use a subquery that excludes customers with any complaint records (customer_id NOT IN (SELECT customer_id FROM complaints)) instead of filtering by complaint_count > 0. 3) When combining customer and complaint data: use customer_id as the linking key between Customers and complaints tables to properly identify customers without complaint records."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT email, phone_number FROM customers WHERE complaint_count > 0;",
            "SELECT email_address, phone_number FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Complaints)"
        ],
        "rule_sql": [
            "SELECT email_address, phone_number FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Complaints)"
        ]
    },
    "2327": {
        "db_id": "csu_1",
        "question": "What campuses are located in Chico?",
        "ground_truth": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
        "amends": [
            "Do select only `campus` instead of all columns with `*`. Do filter on `LOCATION = \"Chico\"` instead of `city = 'San Francisco'`. The amended query now correctly retrieves only the campus column from records where the location is Chico rather than all columns from San Francisco campuses."
        ],
        "rules": [
            "1) When selecting columns for campuses: output only the \"campus\" column instead of all columns with *. 2) When filtering for location: use LOCATION = \"Chico\" instead of city = 'San Francisco' to find campuses in Chico."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM campuses WHERE city = 'San Francisco';",
            "SELECT Campus FROM Campuses WHERE Location = 'Chico';"
        ],
        "rule_sql": [
            "SELECT campus FROM Campuses WHERE Location = \"Chico\";"
        ]
    },
    "6034": {
        "db_id": "game_1",
        "question": "How many different students play games?",
        "ground_truth": "SELECT count(DISTINCT StuID) FROM Plays_games",
        "amends": [
            "Do count `DISTINCT StuID` instead of `COUNT(*)` to count unique student identifiers rather than all rows. Do query from the `Plays_games` table instead of the `students` table to access the appropriate data source for game-playing activity. Do remove the explicit `WHERE activity = 'games'` filter instead of keeping it, as the table name `Plays_games` inherently contains only game-related records. The amended query now correctly counts distinct students who play games rather than counting all activity records, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When counting different students who play games: count distinct \"StuID\" values instead of counting all rows. 2) When the question asks about students playing games: use the \"Plays_games\" table instead of the \"students\" table, as it contains the appropriate data for game-playing activity. 3) When querying from the \"Plays_games\" table: do not apply an explicit activity filter since the table name inherently contains only game-related records."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE activity = 'games';",
            "SELECT COUNT(DISTINCT StuID) FROM Plays_Games"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT StuID) FROM Plays_Games;"
        ]
    },
    "3357": {
        "db_id": "sports_competition",
        "question": "Show the names of clubs that have players with position \"Right Wing\".",
        "ground_truth": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
        "amends": [
            "Do select `T1.name` from the `club` table instead of `club_name` from the `players` table. Do join `club AS T1` with `player AS T2` on `T1.Club_ID = T2.Club_ID` instead of querying only the `players` table. Do filter on `T2.Position = \"Right Wing\"` instead of `position = 'Left Wing'` to correct both the column reference and the position value. The amended query now properly joins the club and player tables to retrieve club names for players with the specified position, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about club names for players with position \"Right Wing\": select \"T1\".\"name\" from the \"club\" table instead of \"club_name\" from the \"players\" table. 2) When combining club and player tables: join \"club AS T1\" with \"player AS T2\" on \"T1\".\"Club_ID\" = \"T2\".\"Club_ID\" using an inner match. 3) When filtering for position \"Right Wing\": use the exact literal \"Right Wing\" with the column \"T2\".\"Position\" instead of 'Left Wing'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT club_name FROM players WHERE position = 'Left Wing';",
            "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\""
        ],
        "rule_sql": [
            "SELECT T1.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = 'Right Wing'"
        ]
    },
    "1559": {
        "db_id": "customers_and_invoices",
        "question": "How many customers don't have an account?",
        "ground_truth": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "amends": [
            "Do use `count(*)` instead of `COUNT(*)` for consistency. Do filter with `customer_id NOT IN (subquery)` instead of `account_id IS NOT NULL` to exclude customers without accounts. Do reference the `Customers` table instead of `customers` for proper casing. Do add a correlated subquery `(SELECT customer_id FROM Accounts)` instead of omitting it to properly identify customers without associated accounts. The amended query now correctly counts only customers who do not have any associated accounts, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When counting customers without accounts: use count(*) instead of COUNT(*) for consistency. 2) When filtering customers without accounts: use customer_id NOT IN (SELECT customer_id FROM Accounts) instead of checking account_id IS NOT NULL. 3) When referencing the customers table: use Customers instead of customers for proper casing. 4) When identifying customers without associated accounts: use a correlated subquery (SELECT customer_id FROM Accounts) to properly exclude customers with accounts."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE account_id IS NOT NULL;",
            "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
        ],
        "rule_sql": [
            "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
        ]
    },
    "5543": {
        "db_id": "products_gen_characteristics",
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
        "ground_truth": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "amends": [
            "Do reference `T1.product_category_description` instead of `c.description` in the SELECT list. Do use table alias `T1` for `ref_product_categories` instead of `categories` as `c`. Do use table alias `T2` for `products` instead of `p`. Do join on `T1.product_category_code = T2.product_category_code` instead of `c.category_id = p.category_id`. Do filter on `T2.product_description LIKE '%t%'` instead of `p.description LIKE '%t%'`. Do remove `DISTINCT` instead of keeping it. The amended query now correctly matches the intended behavior by using the proper table names, column references, and join conditions."
        ],
        "rules": [
            "1) When answering about product category descriptions: make sure the output order: T1.product_category_description. 2) When the question mentions \"categories\": \"categories\" actually means \"ref_product_categories\" in schema with alias T1. 3) When the question mentions \"products\": \"products\" actually means \"products\" in schema with alias T2. 4) When combining T1 and T2 for shared entities: link rows where T1.product_category_code = T2.product_category_code exactly as shown; keep only matching pairs (inner match). 5) When filtering products by description containing \"t\": use T2.product_description LIKE '%t%' exactly as specified. 6) When selecting category descriptions: do not use DISTINCT as the question asks for all matching category descriptions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT c.description \nFROM categories c \nJOIN products p ON c.category_id = p.category_id \nWHERE p.description LIKE '%t%';",
            "SELECT T1.product_category_description \nFROM Ref_Product_Categories T1\nJOIN Products T2 ON T1.product_category_code = T2.product_category_code\nWHERE T2.product_description LIKE '%t%'"
        ],
        "rule_sql": [
            "SELECT T1.product_category_description\nFROM Ref_Product_Categories T1\nINNER JOIN Products T2 ON T1.product_category_code = T2.product_category_code\nWHERE T2.product_description LIKE '%t%'"
        ]
    },
    "5468": {
        "db_id": "voter_2",
        "question": "Report the distinct registration date and the election cycle.",
        "ground_truth": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",
        "amends": [
            "Do reference the `VOTING_RECORD` table instead of the `voters` table. Do use proper column case `Registration_Date` and `Election_Cycle` instead of lowercase versions. Do remove the `WHERE registration_date IS NOT NULL` filter instead of keeping it, as the DISTINCT already handles null exclusion implicitly. The amended query now correctly selects distinct registration dates and election cycles from the voting record table without unnecessary null filtering."
        ],
        "rules": [
            "1) When answering about \"distinct registration date and election cycle\": make sure the output order: Registration_Date, Election_Cycle. 2) When the question mentions \"registration date\": \"registration date\" actually means \"Registration_Date in schema\". 3) When the question mentions \"election cycle\": \"election cycle\" actually means \"Election_Cycle in schema\". 4) When selecting from the voting record table: use table name \"VOTING_RECORD\" exactly as specified in the schema. 5) When handling null values for Registration_Date: do not add explicit null filtering since DISTINCT already handles null exclusion implicitly."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT registration_date, election_cycle FROM voters WHERE registration_date IS NOT NULL ORDER BY registration_date;",
            "SELECT DISTINCT Registration_Date, Election_Cycle FROM Voting_record"
        ],
        "rule_sql": [
            "SELECT DISTINCT Registration_Date, Election_Cycle FROM VOTING_RECORD ORDER BY Registration_Date, Election_Cycle;"
        ]
    },
    "2564": {
        "db_id": "county_public_safety",
        "question": "List the names of counties that do not have any cities.",
        "ground_truth": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "amends": [
            "Do reference table `county_public_safety` instead of `counties` and column `Name` instead of `name`. Do reference column `County_ID` instead of `county_id` in both the main query and subquery. Do reference table `city` instead of `cities` in the subquery. The amended query now correctly matches the RIGHT_SQL's behavior with the proper table and column names."
        ],
        "rules": [
            "1) When answering about \"counties that do not have any cities\": use table \"county_public_safety\" as T1 and table \"city\" as T2. 2) When the question mentions \"names of counties\": \"Name\" actually means column \"Name\" in table \"county_public_safety\". 3) When the question mentions \"counties that do not have any cities\": find counties where \"County_ID\" in T1 is not present in the \"County_ID\" values of T2. 4) When combining T1 and T2 for shared entities: link rows where T1.\"County_ID\" = T2.\"County_ID\" and keep only matching pairs (inner match). 5) When choosing identifier delimiters: use double quotes for \"County_ID\" and \"Name\" as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM counties WHERE county_id NOT IN (SELECT county_id FROM cities)",
            "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
        ],
        "rule_sql": [
            "SELECT \"Name\" FROM \"county_public_safety\" WHERE \"County_ID\" NOT IN (SELECT DISTINCT \"County_ID\" FROM \"city\")"
        ]
    },
    "6133": {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "ground_truth": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "amends": [
            "Do select only `address_content` instead of all columns with `*`. Do change the filter condition to use `state_province_county` instead of `state`. Do split the query into two separate `SELECT` statements with `UNION` instead of using contradictory `AND` conditions that would never match. Do use double quotes for string literals instead of single quotes. The amended query now correctly retrieves addresses from two different city/state combinations without the logical contradiction in the original WHERE clause."
        ],
        "rules": [
            "1) When selecting addresses: only retrieve the \"address_content\" column instead of all columns with *. 2) When filtering by state: use the column \"state_province_county\" instead of \"state\". 3) When querying for addresses in multiple locations: use UNION to combine separate queries for each location instead of contradictory AND conditions. 4) When specifying string literals: use double quotes instead of single quotes. 5) When searching for addresses in \"East Julianaside, Texas\": filter where city = \"East Julianaside\" AND \"state_province_county\" = \"Texas\". 6) When searching for addresses in \"Gleasonmouth, Arizona\": filter where city = \"Gleasonmouth\" AND \"state_province_county\" = \"Arizona\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM addresses WHERE city = 'East Julianaside' AND state = 'Texas' AND city = 'Gleasonmouth' AND state = 'Arizona';",
            "SELECT address_content FROM Addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\"\nUNION\nSELECT address_content FROM Addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\""
        ],
        "rule_sql": [
            "SELECT address_content FROM Addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM Addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\""
        ]
    },
    "3745": {
        "db_id": "program_share",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "ground_truth": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "amends": [
            "Do select `t1.name` instead of `channel_name` and use table alias `t1` instead of direct table reference. Do add `JOIN broadcast AS t2` instead of querying only the channels table. Do use join condition `ON t1.channel_id = t2.channel_id` instead of no join. Do filter on `t2.time_of_day = 'Morning'` instead of `broadcast_time = 'morning'` with proper case sensitivity and table qualification. The amended query now correctly joins tables and filters on the appropriate broadcast time column with proper case handling."
        ],
        "rules": [
            "1) When answering about channels broadcast in the morning: make sure the output order: t1.name 2) When the question mentions \"channel names\": \"channel names\" actually means \"t1.name in schema\" 3) When combining channels and broadcast tables: link rows where t1.channel_id = t2.channel_id and keep only matching pairs (inner match) 4) When filtering for morning broadcasts: use t2.time_of_day = 'Morning' with exact case sensitivity and literal value"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT channel_name FROM channels WHERE broadcast_time = 'morning';",
            "SELECT t1.Name FROM channel AS t1 JOIN broadcast AS t2 ON t1.Channel_ID = t2.Channel_ID WHERE t2.Time_of_day = 'Morning'"
        ],
        "rule_sql": [
            "SELECT t1.Name FROM channel t1 INNER JOIN broadcast t2 ON t1.Channel_ID = t2.Channel_ID WHERE t2.Time_of_day = 'Morning' ORDER BY t1.Name;"
        ]
    },
    "4592": {
        "db_id": "solvency_ii",
        "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "ground_truth": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000",
        "amends": [
            "Do use `INTERSECT` between two separate queries instead of a single `WHERE` clause with conflicting conditions. Do reference `Product_Type_Code` instead of `product_type_code` and `Product_Price` instead of `price` to match the correct column names. Do remove the contradictory `price > 4500 AND price < 3000` filter that would never return results, and instead use separate queries for `Product_Price > 4500` and `Product_Price < 3000` combined with `INTERSECT` to find product types that satisfy both price conditions across different products. The amended query now correctly identifies product types that have both products priced above 4500 and products priced below 3000, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for product types that have both products with price higher than 4500 and products with price lower than 3000: use INTERSECT between two separate queries instead of a single WHERE clause with conflicting conditions. 2) When referencing product type codes: use exact column name \"Product_Type_Code\" instead of product_type_code. 3) When referencing product prices: use exact column name \"Product_Price\" instead of price. 4) When filtering for products with price higher than 4500: use condition \"Product_Price\" > 4500. 5) When filtering for products with price lower than 3000: use condition \"Product_Price\" < 3000. 6) When combining results to find product types that satisfy both conditions: use INTERSECT between the two separate queries to find common \"Product_Type_Code\" values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT product_type_code FROM products WHERE price > 4500 AND price < 3000;",
            "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500\nINTERSECT\nSELECT Product_Type_Code FROM Products WHERE Product_Price < 3000"
        ],
        "rule_sql": [
            "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500\nINTERSECT\nSELECT Product_Type_Code FROM Products WHERE Product_Price < 3000"
        ]
    },
    "167": {
        "db_id": "bike_1",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "ground_truth": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "amends": [
            "Do filter on `EVENTS != \"Fog\"` and `EVENTS != \"Rain\"` instead of checking boolean flags `Fog = 1` and `Rain = 1`. Do use the `EVENTS` column for weather condition filtering instead of separate boolean columns. The amended query now correctly excludes fog and rain events by checking the EVENTS column values rather than relying on potentially incorrect boolean flag columns."
        ],
        "rules": [
            "1) When filtering for weather conditions in zip code 94107: use the \"EVENTS\" column instead of boolean flag columns like \"Fog\" or \"Rain\". 2) When excluding Fog and Rain events: check that \"EVENTS\" is not equal to \"Fog\" and \"EVENTS\" is not equal to \"Rain\" (exact string matching with case and spacing preserved). 3) When answering about days without Fog or Rain in zip code 94107: select the \"date\" column from the weather table where zip_code equals 94107 and the EVENTS column contains neither \"Fog\" nor \"Rain\" values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT date FROM weather WHERE zip_code = 94107 AND (Fog = 1 OR Rain = 1);",
            "SELECT date FROM weather WHERE zip_code = 94107 AND (EVENTS != 'Fog' OR EVENTS IS NULL) AND (EVENTS != 'Rain' OR EVENTS IS NULL);"
        ],
        "rule_sql": [
            "SELECT date FROM weather WHERE zip_code = 94107 AND events != 'Fog' AND events != 'Rain';"
        ]
    },
    "2915": {
        "db_id": "icfp_1",
        "question": "Which authors have last name \"Ueno\"? List their first names.",
        "ground_truth": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
        "amends": [
            "Do select `fname` instead of `first_name` and filter on `lname` instead of `last_name`. Do use double quotes `\"Ueno\"` instead of single quotes `'Ueno'` for the string literal. The amended query now correctly matches the intended column names and string formatting from the RIGHT_SQL."
        ],
        "rules": [
            "1) When the question asks for authors with last name \"Ueno\": filter the Authors table where the exact column \"lname\" equals the exact string literal \"Ueno\". 2) When listing first names for these authors: select the exact column \"fname\" from the filtered results. 3) When handling string literals: use double quotes \"Ueno\" exactly as specified, not single quotes 'Ueno'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM authors WHERE last_name = 'Ueno';",
            "SELECT fname FROM Authors WHERE lname = \"Ueno\";"
        ],
        "rule_sql": [
            "SELECT fname FROM Authors WHERE lname = \"Ueno\";"
        ]
    },
    "49": {
        "db_id": "farm",
        "question": "What are the official names of cities that have not hosted a farm competition?",
        "ground_truth": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
        "amends": [
            "Do reference `Official_Name` instead of `city_name` in the SELECT list. Do use table `city` instead of `cities` in the FROM clause. Do reference `City_ID` instead of `city_id` in the WHERE predicate. Do reference `Host_city_ID` instead of `city_id` in the subquery's SELECT list. Do use table `farm_competition` instead of `farm_competitions` in the subquery's FROM clause. The amended query now correctly identifies cities not hosting farm competitions by matching the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about cities that have not hosted farm competitions: select \"Official_Name\" from table \"city\" as T1. 2) When identifying cities not hosting competitions: use \"City_ID\" from T1 to check against \"Host_city_ID\" values in table \"farm_competition\" as T2. 3) When filtering for non-hosting cities: ensure T1.\"City_ID\" is not found in the set of T2.\"Host_city_ID\" values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city_name FROM cities WHERE city_id NOT IN (SELECT city_id FROM farm_competitions);",
            "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
        ],
        "rule_sql": [
            "SELECT Official_Name FROM city AS T1 WHERE T1.City_ID NOT IN (SELECT Host_city_ID FROM farm_competition AS T2)"
        ]
    },
    "5342": {
        "db_id": "manufactory_1",
        "question": "Select the average price of each manufacturer's products, showing the manufacturer's name.",
        "ground_truth": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "amends": [
            "Do join `Manufacturers AS T2` instead of omitting it, and use `ON T1.manufacturer = T2.code` instead of no join condition. Do select `T2.name` instead of `manufacturer` and use `avg(T1.Price)` instead of `AVG(price)`. Do group by `T2.name` instead of `manufacturer_name` to properly aggregate by manufacturer names from the joined table. The amended query now correctly calculates average prices grouped by manufacturer names through proper table joining.",
            "Do place the aggregate function `avg(T1.Price)` first in the SELECT list instead of second, and use lowercase `avg` instead of uppercase `AVG`. Do use lowercase `T2.name` instead of uppercase `T2.Name` while maintaining the same GROUP BY clause with lowercase `T2.name`. The FROM clause, JOIN condition with `T1.manufacturer = T2.code` using lowercase column names, and overall query logic remain unchanged, preserving the correct calculation of average product prices by manufacturer name. The amended query now matches RIGHT_SQL's behavior.",
            "Do place `avg(T1.Price)` first in the SELECT list instead of `T2.name` first, while keeping the same column order in GROUP BY. Do maintain the same JOIN condition `T1.manufacturer = T2.code` and preserve the identical table aliases and grouping logic. The amended query now matches RIGHT_SQL's behavior with the same semantic meaning despite the column order difference in the output."
        ],
        "rules": [
            "1) When answering about \"average price of each manufacturer's products\": make sure the output order: manufacturer name, average price. 2) When the question mentions \"manufacturer's name\": \"manufacturer's name\" actually means \"T2.name\" in schema. 3) When combining T1 and T2 for shared entities: link rows where T1.manufacturer = T2.code exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question asks for \"average price\": compute the average of T1.Price using avg(T1.Price). 5) When the question says \"per manufacturer\": organize results by T2.name and compute requested aggregates per group.",
            "1) When answering about \"average price of each manufacturer's products\": make sure the output order: avg(T1.Price) first, then T2.name. 2) When the question mentions \"manufacturer's name\": \"manufacturer's name\" actually means \"T2.name in schema\". 3) When the question asks for \"average price\": compute the average of T1.Price using lowercase avg function. 4) When the question says \"per manufacturer\"/\"by manufacturer\": organize results by T2.name and compute average price per group. 5) When combining T1 and T2 for shared entities: link rows where T1.manufacturer = T2.code; keep only matching pairs (inner match). 6) When choosing identifier delimiters: do not use uppercase for column names; use lowercase T2.name and T1.manufacturer.",
            "1) When answering about \"average price of each manufacturer's products\": make sure the output order: average price first, then manufacturer name. 2) When combining Products (T1) and Manufacturers (T2) for shared entities: link rows where T1.manufacturer = T2.code exactly as shown; keep only matching pairs (inner match). 3) When the question says \"per manufacturer\" or \"each manufacturer's\": organize results by T2.name and compute average of T1.Price per group."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT manufacturer, AVG(price) FROM products GROUP BY manufacturer_name;",
            "SELECT T2.Name, AVG(T1.Price) \nFROM Products AS T1 \nJOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code \nGROUP BY T2.Name",
            "SELECT T2.name, avg(T1.Price) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
            "SELECT avg(T1.Price), T2.name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name"
        ],
        "rule_sql": [
            "SELECT T2.name, avg(T1.Price) FROM Products T1 JOIN Manufacturers T2 ON T1.manufacturer = T2.code GROUP BY T2.name"
        ]
    },
    "1235": {
        "db_id": "apartment_rentals",
        "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?",
        "ground_truth": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
        "amends": [
            "Do select `T1.booking_start_date` twice instead of `start_date` and `end_date`. Do add `FROM Apartment_Bookings AS T1 JOIN Guests AS T2` instead of just `FROM bookings`. Do use `ON T1.guest_id = T2.guest_id` to properly join the tables instead of missing the join condition. Do filter on `T2.gender_code = \"Female\"` instead of `gender = 'Female'` to reference the correct table and column with proper quoting. The amended query now correctly joins the booking and guest tables to filter by gender while selecting the appropriate booking dates."
        ],
        "rules": [
            "1) When selecting booking dates: use T1.booking_start_date for both start date and end date instead of separate start_date and end_date columns. 2) When answering about apartment bookings made by guests: combine Apartment_Bookings as T1 and Guests as T2 using T1.guest_id = T2.guest_id to link bookings to their guests. 3) When filtering by female guests: use T2.gender_code = \"Female\" with exact double quotes to reference the correct table and column. 4) When the question asks for start date and end date: ensure the output order shows T1.booking_start_date twice as the result columns."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT start_date, end_date FROM bookings WHERE gender = 'Female';",
            "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\""
        ],
        "rule_sql": [
            "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\""
        ]
    },
    "899": {
        "db_id": "insurance_fnol",
        "question": "Find the policy type used by more than 4 customers.",
        "ground_truth": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "amends": [
            "Do select `policy_type_code` from `available_policies` instead of `policy_type` from `customers`. Do keep the `GROUP BY` clause on `policy_type_code` instead of `policy_type`. Do maintain the `HAVING` condition `count(*) > 4` unchanged. The amended query now correctly queries the available_policies table for policy type codes with counts exceeding 4, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"policy type\": use \"policy_type_code\" from table \"available_policies\" instead of \"policy_type\" from \"customers\". 2) When counting entities by policy type: group by \"policy_type_code\" and count all rows in each group. 3) When filtering for groups with more than 4 entities: keep only groups where the count exceeds 4."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT policy_type, COUNT(*) FROM customers GROUP BY policy_type HAVING COUNT(*) > 4",
            "SELECT policy_type_code FROM Available_Policies GROUP BY policy_type_code HAVING COUNT(*) > 4"
        ],
        "rule_sql": [
            "SELECT policy_type_code \nFROM Available_Policies \nGROUP BY policy_type_code \nHAVING COUNT(*) > 4"
        ]
    },
    "1316": {
        "db_id": "performance_attendance",
        "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
        "ground_truth": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000",
        "amends": [
            "Do use `INTERSECT` to find locations that satisfy both conditions instead of using a single `WHERE` clause with contradictory filters. Do reference the correct table name `performance` instead of `performances`. Do use the correct column name `LOCATION` instead of `location_id` and `Attendance` instead of `attendees`. Do structure the query as two separate SELECT statements with `INTERSECT` instead of attempting to use mutually exclusive range conditions in a single WHERE clause. The amended query now correctly identifies locations where attendance is both greater than 2000 and less than 1000 by using set intersection logic."
        ],
        "rules": [
            "1) When the question asks for locations with both more than 2000 attendees and less than 1000 attendees: use INTERSECT to combine results from two separate conditions instead of contradictory filters in a single WHERE clause. 2) When referencing the performance table: use the exact table name \"performance\" instead of \"performances\". 3) When selecting location information: use the exact column name \"LOCATION\" instead of \"location_id\". 4) When referencing attendance data: use the exact column name \"Attendance\" instead of \"attendees\". 5) When filtering for attendance greater than 2000: use the condition Attendance > 2000. 6) When filtering for attendance less than 1000: use the condition Attendance < 1000."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT location_id \nFROM performances \nWHERE attendees > 2000 \nAND attendees < 1000;",
            "SELECT Location FROM performance WHERE Attendance > 2000\nINTERSECT\nSELECT Location FROM performance WHERE Attendance < 1000"
        ],
        "rule_sql": [
            "SELECT Location FROM performance WHERE Attendance > 2000\nINTERSECT\nSELECT Location FROM performance WHERE Attendance < 1000"
        ]
    },
    "5198": {
        "db_id": "music_2",
        "question": "What is the last name of the musician that has been at the back position the most?",
        "ground_truth": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T2.lastname` from the `Band` table instead of `last_name` from `musicians`. Do join `Performance AS T1` with `Band AS T2` on `T1.bandmate = T2.id` instead of querying a single table. Do filter on `stageposition = \"back\"` instead of `position = 'back'`. Do add `GROUP BY lastname` to properly aggregate instead of omitting it. Do order by `count(*)` of grouped results instead of attempting to count without grouping. The amended query now correctly joins performance and band data, groups by lastname to count performances, and returns the band member with the most \"back\" stage positions, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"last name of the musician\": select \"T2.lastname\" from the \"Band\" table instead of \"last_name\" from \"musicians\". 2) When combining \"Performance AS T1\" and \"Band AS T2\": link rows where \"T1.bandmate = T2.id\" and keep only matching pairs (inner match). 3) When filtering for back position: use \"stageposition = \\\"back\\\"\" exactly as specified. 4) When counting performances per musician: group by \"lastname\" to properly aggregate. 5) When ordering by count of performances: order by \"count(*)\" of grouped results in descending direction. 6) When selecting the top result: keep only the first row after ordering by count in descending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT last_name FROM musicians WHERE position = 'back' ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT T2.Lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.Bandmate = T2.Id\nWHERE T1.StagePosition = 'back'\nGROUP BY T2.Lastname\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T2.Lastname\nFROM Performance AS T1\nINNER JOIN Band AS T2 ON T1.Bandmate = T2.Id\nWHERE T1.StagePosition = \"back\"\nGROUP BY T2.Lastname\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ]
    },
    "3539": {
        "db_id": "music_1",
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "ground_truth": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "amends": [
            "Do use `DISTINCT` instead of omitting it. Do select `T1.file_size` and `T1.formats` instead of `file_size` and `format`. Do join `files AS T1` with `song AS T2` on `T1.f_id = T2.f_id` instead of querying only the `songs` table. Do filter on `T2.resolution < 800` instead of `resolution > 800`. The amended query now correctly retrieves distinct file sizes and formats from joined tables with the proper resolution filter."
        ],
        "rules": [
            "1) When the question asks for \"file size and format for all songs\": select distinct T1.file_size and T1.formats from the joined tables instead of just file_size and format from a single table. 2) When combining information about files and songs: join files AS T1 with song AS T2 on T1.f_id = T2.f_id using an inner match. 3) When filtering for songs with resolution lower than 800: use T2.resolution < 800 instead of resolution > 800. 4) When selecting output columns: maintain the order file_size followed by formats as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT file_size, format FROM songs WHERE resolution > 800;",
            "SELECT DISTINCT T1.file_size, T1.formats\nFROM files AS T1\nJOIN song AS T2 ON T1.f_id = T2.f_id\nWHERE T2.resolution < 800"
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 INNER JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800"
        ]
    },
    "1335": {
        "db_id": "college_2",
        "question": "Count the number of classrooms in Lamberton.",
        "ground_truth": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "amends": [
            "Do reference the `classroom` table instead of `classrooms` and use the `building` column instead of `building_name` for filtering, while keeping the `COUNT(*)` aggregate function and `'Lamberton'` filter value unchanged. The amended query now correctly matches the intended behavior by using the proper table name and column reference."
        ],
        "rules": [
            "1) When the question asks about \"classrooms\": use the exact table name \"classroom\" instead of \"classrooms\". 2) When filtering by building name \"Lamberton\": use the exact column name \"building\" instead of \"building_name\" for the filter condition. 3) When counting classrooms: use COUNT(*) to count all matching rows. 4) When specifying the building name: use the exact literal value 'Lamberton' with the same case and spelling."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM classrooms WHERE building_name = 'Lamberton';",
            "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton';"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton';"
        ]
    },
    "2178": {
        "db_id": "formula_1",
        "question": "What is the first and last name of all the German drivers?",
        "ground_truth": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "amends": [
            "Do use column names `forename` and `surname` instead of `first_name` and `last_name`. Do use double quotes `\"German\"` instead of single quotes `'German'` for the nationality filter. Do remove the `ORDER BY first_name ASC` clause instead of keeping it. Do remove the `LIMIT 1` clause instead of keeping it. The amended query now correctly selects German drivers without unnecessary ordering and limiting."
        ],
        "rules": [
            "1) When the question asks for \"first and last name\": use the exact column names \"forename\" and \"surname\" instead of \"first_name\" and \"last_name\". 2) When filtering by nationality \"German\": use the exact literal value \"German\" with double quotes. 3) When the question asks for \"all\" drivers matching a condition: do not apply any ordering or limiting clauses that would restrict the result set."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name FROM drivers WHERE nationality = 'German' ORDER BY first_name ASC LIMIT 1;",
            "SELECT forename, surname FROM drivers WHERE nationality = \"German\";"
        ],
        "rule_sql": [
            "SELECT forename, surname FROM drivers WHERE nationality = \"German\";"
        ]
    },
    "3380": {
        "db_id": "sports_competition",
        "question": "What are the names of all players that got more than the average number of points?",
        "ground_truth": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)",
        "amends": [
            "Do reference table `player` instead of `players` in both the main query and subquery. Do use lowercase `avg` function instead of uppercase `AVG` for consistency. Do remove the `ORDER BY name` clause instead of keeping it since the right SQL does not include ordering."
        ],
        "rules": [
            "1) When the question refers to \"players\": use the exact table name \"player\" instead of \"players\". 2) When computing the average of points: use the lowercase function \"avg\" instead of uppercase \"AVG\". 3) When the question does not specify ordering: do not include any ORDER BY clause in the final query."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM players WHERE points > (SELECT AVG(points) FROM players) ORDER BY name;",
            "SELECT name FROM player WHERE Points > (SELECT avg(Points) FROM player)"
        ],
        "rule_sql": [
            "SELECT name FROM player WHERE Points > (SELECT avg(Points) FROM player)"
        ]
    },
    "6309": {
        "db_id": "e_government",
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "ground_truth": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
        "amends": [
            "Do select `individual_first_name`, `individual_middle_name`, and `individual_last_name` instead of `first_name`, `middle_name`, and `last_name` to use the correct column names from the schema. Do order by `individual_last_name` instead of `first_name` to sort by last name rather than first name. The amended query now correctly references the actual column names and sorts by the appropriate field, matching the intended behavior."
        ],
        "rules": [
            "1) When selecting names from the Individuals table: use the exact column names \"individual_first_name\", \"individual_middle_name\", and \"individual_last_name\" instead of generic name fields. 2) When ordering by last name as requested in the question: sort the results by \"individual_last_name\" in ascending order. 3) When outputting name fields: maintain the output order as first name, middle name, then last name as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, middle_name, last_name FROM individuals ORDER BY first_name;",
            "SELECT individual_first_name, individual_middle_name, individual_last_name FROM Individuals ORDER BY individual_last_name;"
        ],
        "rule_sql": [
            "SELECT individual_first_name, individual_middle_name, individual_last_name FROM Individuals ORDER BY individual_last_name ASC;"
        ]
    },
    "2040": {
        "db_id": "party_people",
        "question": "Count the number of regions.",
        "ground_truth": "SELECT count(*) FROM region",
        "amends": [
            "Do query the `region` table instead of the `countries` table. The amended query now correctly counts records from the region table as specified in the target query."
        ],
        "rules": [
            "1) When answering about \"number of regions\": query the \"region\" table instead of the \"countries\" table. 2) When counting regions: count all records from the \"region\" table using the canonical key for regions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM countries;",
            "SELECT COUNT(*) FROM region;"
        ],
        "rule_sql": [
            "SELECT COUNT(Region_ID) FROM region;"
        ]
    },
    "3260": {
        "db_id": "college_1",
        "question": "What are the first names of all employees that are professors ordered by date of birth?",
        "ground_truth": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
        "amends": [
            "Do select `emp_fname` instead of `first_name` and use `emp_jobcode = 'PROF'` instead of `position = 'Professor'` for the filter condition. Do order by `emp_dob` instead of `birth_date` and reference the table as `employee` instead of `employees`. The amended query now correctly matches the target schema and behavior."
        ],
        "rules": [
            "1) When the question asks for \"first names\": use the exact column token \"emp_fname\" from the employee table. 2) When filtering for professors: use the exact condition \"emp_jobcode = 'PROF'\" with the literal 'PROF' exactly as specified. 3) When ordering by date of birth: use the exact column token \"emp_dob\" from the employee table. 4) When referring to the employee table: use the exact table name \"employee\" (singular) instead of \"employees\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE position = 'Professor' ORDER BY birth_date;",
            "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob;"
        ],
        "rule_sql": [
            "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob"
        ]
    },
    "2024": {
        "db_id": "gas_company",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "ground_truth": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "amends": [
            "Do join `station_company AS T1` and `company AS T2` on `T1.company_id = T2.company_id` instead of querying only the `companies` table. Do select `T2.company` instead of `company_id` and `company_name`. Do group by `T1.company_id` instead of `company_id`. The amended query now correctly joins the station_company and company tables to count stations per company while selecting the company name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about companies and their gas stations: combine station_company as T1 and company as T2 where T1.company_id equals T2.company_id, keeping only matching pairs. 2) When selecting company information: use T2.company for the company name instead of company_id or company_name. 3) When counting gas stations per company: count using T1.company_id as the grouping key. 4) When organizing results by company: group by T1.company_id to ensure proper station counting per company."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT company_id, company_name, COUNT(*) FROM companies GROUP BY company_id",
            "SELECT T2.Company, COUNT(T1.Station_ID) AS Number_of_Gas_Stations\nFROM station_company AS T1\nJOIN company AS T2 ON T1.Company_ID = T2.Company_ID\nGROUP BY T1.Company_ID;"
        ],
        "rule_sql": [
            "SELECT T2.Company, COUNT(T1.Station_ID) AS Number_of_Gas_Stations\nFROM station_company AS T1\nINNER JOIN company AS T2 ON T1.Company_ID = T2.Company_ID\nGROUP BY T1.Company_ID\nORDER BY T1.Company_ID;"
        ]
    },
    "5284": {
        "db_id": "manufactory_1",
        "question": "What are the different cities listed?",
        "ground_truth": "SELECT DISTINCT headquarter FROM manufacturers",
        "amends": [
            "Do select `headquarter` instead of `city` and do query the `manufacturers` table instead of the `customers` table, while maintaining the `DISTINCT` clause and removing the `WHERE city IS NOT NULL` filter instead of keeping it. The amended query now correctly retrieves distinct headquarters from the manufacturers table as specified."
        ],
        "rules": [
            "1) When the question asks for \"different cities\": select distinct values of the exact column \"headquarter\" from table \"manufacturers\". 2) When the question mentions \"cities\": the correct column name is \"headquarter\" in the \"manufacturers\" table. 3) When selecting from the database: use the \"manufacturers\" table instead of the \"customers\" table. 4) When retrieving distinct values: do not apply any null filtering conditions as the question does not specify any filtering requirements."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT city FROM customers WHERE city IS NOT NULL",
            "SELECT DISTINCT Headquarter FROM Manufacturers;"
        ],
        "rule_sql": [
            "SELECT DISTINCT Headquarter FROM Manufacturers;"
        ]
    },
    "776": {
        "db_id": "race_track",
        "question": "Return the names of tracks that have no had any races.",
        "ground_truth": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
        "amends": [
            "Do use table name `track` instead of `tracks` in the FROM clause. Do change the WHERE condition to use `track_id NOT IN (subquery)` instead of `race_count > 0`. Do add a subquery `SELECT track_id FROM race` to identify tracks that have races instead of relying on a race_count column. Do remove the race_count column filter and replace it with a NOT IN condition against the race table. The amended query now correctly identifies tracks without any associated races by checking against the race table directly instead of using a potentially incorrect or non-existent race_count column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for tracks with no races: use the table name \"track\" instead of \"tracks\" in the FROM clause. 2) When identifying tracks without races: use a NOT IN condition with a subquery that selects \"track_id\" from the \"race\" table instead of relying on a race_count column. 3) When checking for tracks without associated races: verify that \"track_id\" from the \"track\" table is not present in the \"track_id\" values from the \"race\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM tracks WHERE race_count > 0;",
            "SELECT Name FROM track WHERE Track_ID NOT IN (SELECT Track_ID FROM race)"
        ],
        "rule_sql": [
            "SELECT Name FROM track WHERE Track_ID NOT IN (SELECT Track_ID FROM race)"
        ]
    },
    "4174": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "ground_truth": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
        "amends": [
            "Do select `date_stored` instead of `date` for the column name. Do use `All_documents` instead of `documents` for the table source. Do filter on `Document_name` instead of `title` for the column predicate. Do use double quotes `\"Marry CV\"` instead of single quotes `'Marry CV'` for the string literal. The amended query now correctly retrieves the storage date from the specified document in the All_documents table."
        ],
        "rules": [
            "1) When the question asks for the date when a document was stored: select \"date_stored\" instead of \"date\" as the output column. 2) When referring to the documents table: use \"All_documents\" as the table name instead of \"documents\". 3) When filtering by document name: use \"Document_name\" instead of \"title\" as the column name for the predicate. 4) When using string literals for document names: use double quotes \"Marry CV\" instead of single quotes 'Marry CV' to match the exact format."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT date FROM documents WHERE title = 'Marry CV';",
            "SELECT Date_Stored FROM All_Documents WHERE Document_Name = \"Marry CV\";"
        ],
        "rule_sql": [
            "SELECT Date_Stored FROM All_Documents WHERE Document_Name = \"Marry CV\";"
        ]
    },
    "1665": {
        "db_id": "theme_gallery",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "ground_truth": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
        "amends": [
            "Do reference table `exhibition` instead of `exhibitions` in the FROM clause. Do use comparison operator `<` instead of `>` in the WHERE filter condition for `ticket_price`. Do maintain the same SELECT list with columns `theme` and `YEAR` but note the corrected table reference and filter logic. The amended query now correctly selects exhibitions with ticket prices below 15 instead of above 15, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about exhibitions: use the exact table name \"exhibition\" instead of \"exhibitions\". 2) When filtering for ticket prices lower than 15: use the comparison operator < (less than) with the literal value 15, not > (greater than). 3) When selecting output columns: maintain the exact column order theme followed by YEAR as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT theme, year FROM exhibitions WHERE ticket_price > 15;",
            "SELECT theme, Year FROM exhibition WHERE Ticket_Price < 15"
        ],
        "rule_sql": [
            "SELECT theme, Year FROM exhibition WHERE Ticket_Price < 15"
        ]
    },
    "1179": {
        "db_id": "election_representative",
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "ground_truth": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
        "amends": [
            "Do reference the table as `Representative` instead of `representatives` and use column names `Name` and `Party` instead of `name` and `party`. Do use the inequality condition `Party != \"Republican\"` instead of the equality condition `party = 'Republican'` with proper double quotes for the string literal instead of single quotes. The amended query now correctly filters for non-Republican representatives as specified in the RIGHT_SQL."
        ],
        "rules": [
            "1) When referencing the table for representatives: use the exact table name \"Representative\" with double quotes and proper capitalization. 2) When selecting representative names: use the exact column name \"Name\" with double quotes and proper capitalization. 3) When filtering by political party: use the exact column name \"Party\" with double quotes and proper capitalization. 4) When the question asks for representatives whose party is not \"Republican\": use the inequality condition Party != \"Republican\" with double quotes around the literal value. 5) When handling string literals for party values: preserve the exact case and formatting as \"Republican\" with double quotes."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM representatives WHERE party = 'Republican';",
            "SELECT Name FROM Representative WHERE Party != \"Republican\";"
        ],
        "rule_sql": [
            "SELECT \"Name\" FROM \"Representative\" WHERE \"Party\" != \"Republican\""
        ]
    },
    "1105": {
        "db_id": "match_season",
        "question": "Return the names of teams that have no match season record.",
        "ground_truth": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "amends": [
            "Do select `Name` instead of `team_name` and use `team` instead of `teams` as the table source. Do change the filter to `Team_id NOT IN` subquery instead of `matches_played = 0` condition, removing the direct column comparison and instead using a correlated subquery that checks for teams not present in the `match_season` table's `Team` column. Do remove the incorrect `matches_played` column reference and replace it with a proper exclusion logic using the subquery approach. The amended query now correctly identifies teams that haven't played any matches by checking their absence from the match records rather than relying on a potentially incorrect or missing counter column."
        ],
        "rules": [
            "1) When answering about \"teams that have no match season record\": make sure the output order: \"Name\" from table \"team\". 2) When the question mentions \"teams\": \"teams\" actually means table \"team\" in schema. 3) When the question mentions \"team_name\": \"team_name\" actually means column \"Name\" in table \"team\". 4) When identifying teams with no match season records: use a subquery to check that \"Team_id\" from table \"team\" is not present in the \"Team\" column of the \"match_season\" table, rather than using direct column comparisons like \"matches_played = 0\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE matches_played = 0;",
            "SELECT Name FROM team WHERE Team_id NOT IN (SELECT DISTINCT Team FROM match_season WHERE Team IS NOT NULL)"
        ],
        "rule_sql": [
            "SELECT Name FROM team WHERE Team_id NOT IN (SELECT DISTINCT Team FROM match_season WHERE Team IS NOT NULL) ORDER BY Name;"
        ]
    },
    "2243": {
        "db_id": "machine_repair",
        "question": "What is the starting year of the oldest technicians?",
        "ground_truth": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "amends": [
            "Do select `Starting_Year` instead of `MAX(start_year)` to retrieve the actual column value rather than an aggregate. Do add `ORDER BY Age DESC LIMIT 1` instead of omitting ordering and limiting to get the record with the highest age rather than the maximum year across all records. Do reference table `technician` instead of `technicians` to use the correct table name. The amended query now correctly retrieves the starting year of the oldest technician rather than the maximum starting year across all technicians, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for the starting year of the oldest technicians: retrieve the actual column value \"Starting_Year\" instead of using an aggregate function. 2) When determining the oldest technician: order records by \"Age\" in descending direction and keep only the first row. 3) When referencing the technician table: use the exact table name \"technician\" instead of \"technicians\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(start_year) FROM technicians;",
            "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1;"
        ]
    },
    "4361": {
        "db_id": "tracking_grants_for_research",
        "question": "What are the ids, types, and details of the organization with the most research staff?",
        "ground_truth": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.organisation_id`, `T1.organisation_type`, and `T1.organisation_details` instead of `id`, `type`, and `details`. Do add `JOIN Research_Staff AS T2` with `ON T1.organisation_id = T2.employer_organisation_id` instead of querying only the `organizations` table. Do add `GROUP BY T1.organisation_id` instead of omitting grouping. Do order by `count(*) DESC` instead of `research_staff_count DESC`. The amended query now correctly joins organizations with their research staff, groups by organization to count staff members, and orders by the actual count rather than a potentially incorrect column name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When selecting organization information: use T1.organisation_id, T1.organisation_type, and T1.organisation_details instead of generic id, type, and details. 2) When counting research staff per organization: join Research_Staff as T2 with T1.organisation_id = T2.employer_organisation_id to link staff to their employers. 3) When grouping by organization: use GROUP BY T1.organisation_id to organize results by each organization's unique identifier. 4) When ordering by research staff count: use count(*) DESC instead of research_staff_count DESC to properly count the actual number of research staff members per organization. 5) When finding the organization with the most research staff: use LIMIT 1 after ordering by count(*) DESC to get the single organization with the highest staff count."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, type, details FROM organizations ORDER BY research_staff_count DESC LIMIT 1;",
            "SELECT T1.organisation_id, T1.organisation_type, T1.organisation_details\nFROM Organisations AS T1\nJOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id\nGROUP BY T1.organisation_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.organisation_id, T1.organisation_type, T1.organisation_details\nFROM Organisations T1\nJOIN Research_Staff T2 ON T1.organisation_id = T2.employer_organisation_id\nGROUP BY T1.organisation_id\nORDER BY count(*) DESC\nLIMIT 1"
        ]
    },
    "3828": {
        "db_id": "e_learning",
        "question": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "ground_truth": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
        "amends": [
            "Do select `T1.date_of_enrolment` instead of `test_date`. Do use `FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2` instead of `FROM tests`. Do add `ON T1.registration_id = T2.registration_id` join condition instead of omitting it. Do filter with `T2.test_result = \"Pass\"` instead of `result = 'Pass'`. The amended query now correctly joins enrollment and test tables to retrieve enrollment dates for students with passing test results."
        ],
        "rules": [
            "1) When answering about \"enrollment dates of tests with result 'Pass'\": make sure the output order: T1.date_of_enrolment\n2) When the question mentions \"tests\": actually means \"Student_Tests_Taken AS T2\" in schema\n3) When the question mentions \"enrollment dates\": actually means \"T1.date_of_enrolment\" in schema\n4) When combining T1 (Student_Course_Enrolment) and T2 (Student_Tests_Taken) for shared entities: link rows where T1.registration_id = T2.registration_id exactly as shown; keep only matching pairs (inner match)\n5) When filtering for test results: use T2.test_result = \"Pass\" exactly as specified with double quotes and exact case\n6) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for \"Pass\" literal"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT test_date FROM tests WHERE result = 'Pass';",
            "SELECT T1.date_of_enrolment \nFROM Student_Course_Enrolment AS T1 \nJOIN Student_Tests_Taken AS T2 \nON T1.registration_id = T2.registration_id \nWHERE T2.test_result = \"Pass\""
        ],
        "rule_sql": [
            "SELECT T1.date_of_enrolment\nFROM Student_Course_Enrolment AS T1\nINNER JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id\nWHERE T2.test_result = \"Pass\""
        ]
    },
    "5748": {
        "db_id": "dorm_1",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "ground_truth": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "amends": [
            "Do add joins to `lives_in` and `dorm` tables instead of querying only the `students` table. Do change the filter to `T1.sex = 'F'` instead of `sex = 'M'` and use `T3.dorm_name = 'Smith Hall'` instead of `hall = 'Smith Hall'`. Do use proper table aliases `T1`, `T2`, and `T3` instead of direct table references. The amended query now correctly joins multiple tables to find female students living in Smith Hall instead of counting male students from a single table with incorrect column references."
        ],
        "rules": [
            "1) When answering about \"female students living in Smith Hall\": make sure the output order: count of female students in Smith Hall\n2) When the question mentions \"female students\": \"female\" actually means \"sex = 'F'\" in schema using T1.sex\n3) When the question mentions \"Smith Hall\": \"Smith Hall\" actually means \"dorm_name = 'Smith Hall'\" in schema using T3.dorm_name\n4) When combining T1 (students), T2 (lives_in), and T3 (dorm) for shared entities: link rows where T1.student_id = T2.student_id and T2.dorm_id = T3.dorm_id; keep only matching pairs (inner match)\n5) When the question asks for \"number of female students\": compute the count using the canonical key token for students (T1.student_id)"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE sex = 'M' AND hall = 'Smith Hall'",
            "SELECT COUNT(*) \nFROM Student T1\nJOIN Lives_in T2 ON T1.StuID = T2.stuid\nJOIN Dorm T3 ON T2.dormid = T3.dormid\nWHERE T1.Sex = 'F' AND T3.dorm_name = 'Smith Hall'"
        ],
        "rule_sql": [
            "SELECT COUNT(T1.StuID) \nFROM Student T1\nJOIN Lives_in T2 ON T1.StuID = T2.stuid\nJOIN Dorm T3 ON T2.dormid = T3.dormid\nWHERE T1.Sex = 'F' AND T3.dorm_name = 'Smith Hall'"
        ]
    },
    "3896": {
        "db_id": "insurance_policies",
        "question": "Find the total claimed amount of all the claims.",
        "ground_truth": "SELECT sum(Amount_Claimed) FROM Claims",
        "amends": [
            "Do reference the column as `Amount_Claimed` instead of `claimed_amount` to match the correct column name. Do remove the `WHERE claimed_amount IS NOT NULL` filter instead of keeping it, as the SUM function inherently handles NULL values by excluding them from aggregation. Do use lowercase `sum` instead of uppercase `SUM` for the aggregate function to match the correct syntax. The amended query now correctly calculates the total claimed amount from the Claims table without unnecessary filtering."
        ],
        "rules": [
            "1) When the question asks for \"total claimed amount\": use the exact column name \"Amount_Claimed\" from the Settlements table. 2) When calculating a sum: use the lowercase \"sum\" function which automatically excludes NULL values without needing explicit filtering. 3) When referencing the Amount_Claimed column: do not add any WHERE clause to filter out NULL values since the sum function handles them inherently."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(claimed_amount) FROM claims WHERE claimed_amount IS NOT NULL",
            "SELECT sum(Amount_Claimed) FROM Claims"
        ],
        "rule_sql": [
            "SELECT SUM(Amount_Claimed) FROM Settlements;"
        ]
    },
    "291": {
        "db_id": "twitter_1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "ground_truth": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "amends": [
            "Do reference table `user_profiles` instead of `users` in the FROM clause. Do order by column `followers` instead of `follower_count` in the ORDER BY clause. Do remove the `ASC` keyword instead of keeping it since it's the default ordering. The amended query now correctly retrieves from the user_profiles table and orders by the followers column to match the intended behavior."
        ],
        "rules": [
            "1) When answering about \"user followed by the least number of people\": make sure the output order: name, email. 2) When the question mentions \"user\": \"user\" actually means \"user_profiles\" in schema. 3) When the question mentions \"least number of people\": \"least number of people\" actually means \"followers\" in schema. 4) When the question asks for the user with the least followers: rank rows by followers in ascending order and keep the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, email FROM users ORDER BY follower_count ASC LIMIT 1;",
            "SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT name, email FROM user_profiles ORDER BY followers ASC LIMIT 1;"
        ]
    },
    "5745": {
        "db_id": "dorm_1",
        "question": "What is the average age of students who are living in the dorm with the largest capacity?",
        "ground_truth": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
        "amends": [
            "Do use explicit table aliases `T1`, `T2`, and `T3` instead of implicit table references. Do join `student AS T1` with `lives_in AS T2` on `T1.stuid = T2.stuid` instead of directly querying the `students` table. Do add a second join to `dorm AS T3` on `T3.dormid = T2.dormid` instead of referencing `dorm_id` directly. Do filter with `T3.student_capacity = (SELECT max(student_capacity) FROM dorm)` instead of `WHERE dorm_id = (SELECT dorm_id FROM dorms ORDER BY capacity DESC LIMIT 1)`. Do reference `avg(T1.age)` with explicit table alias instead of `AVG(age)`. The amended query now correctly calculates the average age of students in the dorm with maximum capacity by properly joining through the relationship tables."
        ],
        "rules": [
            "1) When answering about \"average age of students\": compute the average of T1.age. 2) When combining student and lives_in tables: link rows where T1.stuid = T2.stuid and keep only matching pairs (inner match). 3) When combining with dorm table: link rows where T3.dormid = T2.dormid and keep only matching pairs (inner match). 4) When finding the dorm with largest capacity: filter to rows where T3.student_capacity equals the maximum student_capacity from the dorm table. 5) When using table aliases: use T1 for student table, T2 for lives_in table, and T3 for dorm table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT AVG(age) FROM students WHERE dorm_id = (SELECT dorm_id FROM dorms ORDER BY capacity DESC LIMIT 1);",
            "SELECT AVG(T1.Age) \nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nJOIN Dorm AS T3 ON T3.dormid = T2.dormid\nWHERE T3.student_capacity = (SELECT MAX(student_capacity) FROM Dorm)"
        ],
        "rule_sql": [
            "SELECT AVG(T1.Age) \nFROM Student T1\nINNER JOIN Lives_in T2 ON T1.StuID = T2.stuid\nINNER JOIN Dorm T3 ON T3.dormid = T2.dormid\nWHERE T3.student_capacity = (SELECT MAX(student_capacity) FROM Dorm)"
        ]
    },
    "2679": {
        "db_id": "party_host",
        "question": "For each party, return its theme and the name of its host.",
        "ground_truth": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
        "amends": [
            "Do use a three-table join structure with `party_host` as a bridge table instead of directly joining `party` and `host`. Do join `host` on `T1.Host_ID = T2.Host_ID` instead of `party.host_id = host.id`. Do join `party` on `T1.Party_ID = T3.Party_ID` instead of the direct relationship. Do select `T3.Party_Theme` and `T2.Name` with proper table aliases instead of `party.theme` and `host.name`. Do remove the unnecessary `GROUP BY` clause instead of keeping it when no aggregation is performed. The amended query now correctly handles the many-to-many relationship through the bridge table and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for party theme and host name: use a three-table join structure with party_host as a bridge table between party and host tables. 2) When joining tables: link party_host (T1) to host (T2) using T1.Host_ID = T2.Host_ID, and link party_host (T1) to party (T3) using T1.Party_ID = T3.Party_ID. 3) When selecting output columns: return T3.Party_Theme and T2.Name as the theme and host name respectively. 4) When no aggregation is requested: do not include any GROUP BY clause in the query."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT party.theme, host.name FROM party JOIN host ON party.host_id = host.id GROUP BY party.theme",
            "SELECT p.Party_Theme, h.Name \nFROM party_host ph\nJOIN host h ON ph.Host_ID = h.Host_ID\nJOIN party p ON ph.Party_ID = p.Party_ID"
        ],
        "rule_sql": [
            "SELECT p.Party_Theme, h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID"
        ]
    },
    "4313": {
        "db_id": "club_1",
        "question": "Which clubs have one or more members whose advisor is \"1121\"?",
        "ground_truth": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
        "amends": [
            "Do select `t1.clubname` instead of `club_name` and add `DISTINCT` instead of omitting it. Do use `JOIN` with `member_of_club AS t2` on `t1.clubid = t2.clubid` and `student AS t3` on `t2.stuid = t3.stuid` instead of querying only the `clubs` table. Do filter with `t3.advisor = 1121` instead of `advisor_id = '1121'`, removing the quotes around the numeric value. The amended query now correctly finds distinct club names by joining through the membership relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"clubs with members whose advisor is 1121\": make sure the output order: t1.clubname. 2) When the question mentions \"clubs\": use table \"clubs\" as T1 with exact column \"clubname\" for output. 3) When combining tables for membership relationships: link T1 (clubs) with T2 (member_of_club) where T1.clubid = T2.clubid, then link T2 with T3 (student) where T2.stuid = T3.stuid, keeping only matching pairs (inner match). 4) When filtering for advisor \"1121\": use exact numeric value 1121 (without quotes) with column t3.advisor. 5) When selecting club names: use DISTINCT to return only unique values of t1.clubname."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT club_name FROM clubs WHERE advisor_id = '1121';",
            "SELECT DISTINCT t1.ClubName FROM Club AS t1 JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID JOIN Student AS t3 ON t2.StuID = t3.StuID WHERE t3.Advisor = 1121"
        ],
        "rule_sql": [
            "SELECT DISTINCT t1.ClubName\nFROM Club AS t1\nINNER JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID\nINNER JOIN Student AS t3 ON t2.StuID = t3.StuID\nWHERE t3.Advisor = 1121\nORDER BY t1.ClubName;"
        ]
    },
    "1034": {
        "db_id": "phone_1",
        "question": "List the name of the company that produced more than one phone model.",
        "ground_truth": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
        "amends": [
            "Do reference the table as `phone` instead of `phones` to match the correct table name. Do capitalize `Company_name` instead of `company_name` to maintain consistent column naming. Do use consistent spacing in `count(*) > 1` instead of varying spacing around the comparison operator. The amended query now correctly references the intended table and maintains proper column naming conventions while preserving the same logical behavior of finding companies with more than one phone entry."
        ],
        "rules": [
            "1) When the question asks about phone companies and models: use the table name \"phone\" exactly as specified in the schema. 2) When referring to the company name column: use the exact identifier \"Company_name\" with proper capitalization. 3) When counting phone models per company: count all entries using count(*) and filter for companies with more than one model using count(*) > 1. 4) When grouping results by company: organize by \"Company_name\" to find companies with multiple phone models."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT company_name FROM phones GROUP BY company_name HAVING COUNT(*) > 1;",
            "SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1"
        ],
        "rule_sql": [
            "SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1"
        ]
    },
    "4089": {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, return the classroom number and the count of students.",
        "ground_truth": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "amends": [
            "Do reference table `list` instead of `students` in the FROM clause. Do use column `classroom` instead of `classroom_number` in both the SELECT list and GROUP BY clause. Do use string comparison `grade = \"0\"` instead of numeric comparison `grade = 0` to properly handle the string data type. Do maintain the COUNT(*) aggregation and GROUP BY structure while correcting the table and column references to match the intended schema."
        ],
        "rules": [
            "1) When answering about \"grade 0 classroom\": use table \"list\" instead of \"students\" as the data source. 2) When referring to classroom identification: use column \"classroom\" instead of \"classroom_number\" in both output and grouping. 3) When filtering for grade level: use string comparison grade = \"0\" instead of numeric comparison to match the string data type. 4) When counting students per classroom: maintain COUNT(*) aggregation with GROUP BY classroom structure."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT classroom_number, COUNT(*) FROM students WHERE grade = 0 GROUP BY classroom_number;",
            "SELECT Classroom, COUNT(*) FROM list WHERE Grade = \"0\" GROUP BY Classroom;"
        ],
        "rule_sql": [
            "SELECT classroom, COUNT(*) FROM list WHERE grade = \"0\" GROUP BY classroom;"
        ]
    },
    "682": {
        "db_id": "customers_card_transactions",
        "question": "Give the full name and customer id of the customer with the fewest accounts.",
        "ground_truth": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do add `T2.customer_first_name` and `T2.customer_last_name` instead of `first_name` and `last_name`, and do specify `T1.customer_id` with table alias instead of bare `customer_id`. Do change FROM to `Accounts AS T1 JOIN Customers AS T2` instead of just `customers`, and do add `ON T1.customer_id = T2.customer_id` instead of omitting the join condition. Do add `GROUP BY T1.customer_id` instead of omitting grouping. Do change ORDER BY to `count(*) ASC` instead of `COUNT(accounts.account_id) ASC` to count grouped rows rather than attempting to aggregate without grouping. The amended query now correctly joins accounts to customers, groups by customer to count their accounts, and returns the customer with the fewest accounts matching RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"customer with the fewest accounts\": make sure the output order: customer_id, customer_first_name, customer_last_name. 2) When the question mentions \"full name\": \"full name\" actually means \"customer_first_name and customer_last_name in schema\". 3) When combining T1 (Accounts) and T2 (Customers) for shared entities: link rows where T1.customer_id = T2.customer_id; keep only matching pairs (inner match). 4) When the question asks for \"fewest accounts\": rank rows by count(*) in ascending direction and keep the first 1 row. 5) When counting accounts per customer: compute the number of rows using T1.customer_id as the grouping key. 6) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, first_name, last_name FROM customers ORDER BY COUNT(accounts.account_id) ASC LIMIT 1;",
            "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id\nFROM Accounts AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T1.customer_id\nORDER BY COUNT(*) ASC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT c.customer_id, c.customer_first_name, c.customer_last_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id, c.customer_first_name, c.customer_last_name\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ]
    },
    "6194": {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "ground_truth": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "amends": [
            "Do reference table `music_festival` instead of `festivals` and use column `Date_of_ceremony` instead of `ceremony_date`. Do use double quotes for string literals `\"Best Song\"` and `\"Awarded\"` instead of single quotes, and maintain the same filter conditions on `Category` and `RESULT` columns with proper case handling. The amended query now correctly retrieves ceremony dates from the appropriate table with consistent string formatting."
        ],
        "rules": [
            "1) When answering about \"dates of ceremony corresponding to music festivals\": use column \"Date_of_ceremony\" from table \"music_festival\" (not \"ceremony_date\" from \"festivals\"). 2) When the question mentions \"category 'Best Song'\": filter rows where column \"Category\" equals exactly \"Best Song\" (with double quotes). 3) When the question mentions \"result 'Awarded'\": filter rows where column \"RESULT\" equals exactly \"Awarded\" (with double quotes). 4) When handling text literals: use double quotes for string values \"Best Song\" and \"Awarded\" instead of single quotes."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT ceremony_date FROM festivals WHERE category = 'Best Song' AND result = 'Awarded';",
            "SELECT \"Date_of_ceremony\" FROM \"music_festival\" WHERE \"Category\" = \"Best Song\" AND \"Result\" = \"Awarded\";"
        ],
        "rule_sql": [
            "SELECT Date_of_ceremony FROM music_festival WHERE Category = \"Best Song\" AND Result = \"Awarded\""
        ]
    },
    "4508": {
        "db_id": "document_management",
        "question": "Find the average access count across all documents?",
        "ground_truth": "SELECT avg(access_count) FROM documents",
        "amends": [
            "Do use the `avg` aggregate function instead of `SUM` for calculating the average access count instead of the total sum."
        ],
        "rules": [
            "1) When calculating an average value: use the average aggregate function instead of sum to compute the mean value. 2) When the question asks for \"average access count\": compute the average of the \"access_count\" column from the \"documents\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(access_count) FROM documents;",
            "SELECT AVG(access_count) AS average_access_count FROM Documents;"
        ],
        "rule_sql": [
            "SELECT AVG(access_count) AS average_access_count FROM Documents;"
        ]
    },
    "930": {
        "db_id": "insurance_fnol",
        "question": "What is the ordered list of customer ids?",
        "ground_truth": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "amends": [
            "Do add `customer_id` to the SELECT list instead of omitting it. Do specify `ASC` explicitly in the ORDER BY clause instead of using the implicit default ordering. The amended query now correctly includes both the customer identifier and name in the results while maintaining explicit ascending order.",
            "Do add `customer_name` to the SELECT list instead of omitting it. Do use lowercase column names `customer_id` and `customer_name` instead of uppercase `Customer_ID`. Do use lowercase table name `customers` instead of uppercase `Customers`. The amended query now correctly includes both customer identifier and name fields while maintaining proper case consistency throughout."
        ],
        "rules": [
            "1) When answering about \"ordered list of customer ids\": make sure the output order includes \"Customer_ID\" as the first column. 2) When the question asks for an ordered list: sort the results by \"Customer_ID\" in ascending order using explicit ASC direction. 3) When selecting columns for output: include only the exact identifier \"Customer_ID\" that matches the question's request for customer ids.",
            "1) When the question asks for an ordered list of customer ids: include both customer_id and customer_name in the output columns. 2) When referring to the customers table: use lowercase \"customers\" instead of uppercase \"Customers\". 3) When selecting customer identifier columns: use lowercase \"customer_id\" and \"customer_name\" instead of uppercase \"Customer_ID\". 4) When ordering the results: maintain the ordering by customer_id in ascending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT customer_name FROM customers ORDER BY customer_id;",
            "SELECT Customer_ID FROM Customers ORDER BY Customer_ID ASC;",
            "SELECT customer_id, customer_name FROM customers ORDER BY customer_id ASC;"
        ],
        "rule_sql": [
            "SELECT customer_id, customer_name FROM customers ORDER BY customer_id ASC;"
        ]
    },
    "3240": {
        "db_id": "college_1",
        "question": "Which department offers the most credits all together?",
        "ground_truth": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "amends": [
            "Do join `course AS T1` with `CLASS AS T2` on `T1.crs_code = T2.crs_code` instead of querying only `courses` table. Do add a second join to `department AS T3` on `T1.dept_code = T3.dept_code` instead of omitting department table. Do select `T3.dept_name` instead of `department` and `SUM(credits)`. Do group by `T1.dept_code` instead of `department`. Do order by `sum(T1.crs_credit)` in descending order instead of `total_credits` in ascending order. Do remove the alias `total_credits` instead of keeping it. The amended query now correctly joins multiple tables to find the department with the highest total course credits.",
            "Do select only `T3.dept_name` instead of including `SUM(T1.CRS_CREDIT)` in the SELECT list. Do remove the aggregate function `SUM(T1.CRS_CREDIT)` from the SELECT clause instead of keeping it, since it's not needed when only returning the department name with the highest total credits. The amended query now correctly returns only the department name with the highest sum of course credits, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"department offering the most credits\": make sure the output order: T3.dept_name, SUM(credits). 2) When the question mentions \"department\": \"department\" actually means \"T3.dept_name in schema\". 3) When combining T1 and T2 for shared entities: link rows where T1.crs_code = T2.crs_code; keep only matching pairs (inner match). 4) When combining T1 and T3 for shared entities: link rows where T1.dept_code = T3.dept_code; keep only matching pairs (inner match). 5) When the question asks for \"most credits all together\" and mentions \"top\" or \"highest\": rank rows by SUM(credits) in descending order and keep the first 1 row. 6) When the question asks for \"credits all together\": compute the sum of credits using SUM(credits). 7) When the question says \"per department\": organize results by T1.dept_code and compute requested aggregates per group.",
            "1) When answering about \"which department offers the most credits all together\": make sure the output order: T3.dept_name only. 2) When computing the department with the highest total credits: use SUM(T1.CRS_CREDIT) for ranking but do not include it in the final output columns. 3) When grouping by department: use T1.DEPT_CODE as the grouping key but output T3.dept_name as the department identifier. 4) When ranking departments by total credits: order by SUM(T1.CRS_CREDIT) in descending direction and keep only the top 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT department, SUM(credits) as total_credits FROM courses GROUP BY department ORDER BY total_credits ASC LIMIT 1;",
            "SELECT T3.DEPT_NAME, SUM(T1.CRS_CREDIT) \nFROM COURSE AS T1 \nJOIN CLASS AS T2 ON T1.CRS_CODE = T2.CRS_CODE \nJOIN DEPARTMENT AS T3 ON T1.DEPT_CODE = T3.DEPT_CODE \nGROUP BY T1.DEPT_CODE \nORDER BY SUM(T1.CRS_CREDIT) DESC \nLIMIT 1;",
            "SELECT T3.DEPT_NAME\nFROM COURSE AS T1\nJOIN CLASS AS T2 ON T1.CRS_CODE = T2.CRS_CODE\nJOIN DEPARTMENT AS T3 ON T1.DEPT_CODE = T3.DEPT_CODE\nGROUP BY T1.DEPT_CODE\nORDER BY SUM(T1.CRS_CREDIT) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T3.DEPT_NAME\nFROM COURSE T1\nINNER JOIN DEPARTMENT T3 ON T1.DEPT_CODE = T3.DEPT_CODE\nGROUP BY T1.DEPT_CODE\nORDER BY SUM(T1.CRS_CREDIT) DESC\nLIMIT 1;"
        ]
    },
    "2670": {
        "db_id": "party_host",
        "question": "What is the location of the party with the most hosts?",
        "ground_truth": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "amends": [
            "Do reference table `party` instead of `parties` in the FROM clause. Do use column `Number_of_hosts` instead of `host_count` in the ORDER BY clause. The amended query now correctly references the intended table and column to identify the location with the highest number of hosts."
        ],
        "rules": [
            "1) When the question asks about \"parties\": use table \"party\" instead of \"parties\". 2) When ordering by host count: use column \"Number_of_hosts\" instead of \"host_count\" for the ordering criteria. 3) When finding the party with the most hosts: order rows by \"Number_of_hosts\" in descending order and keep only the first row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT location FROM parties ORDER BY host_count DESC LIMIT 1;",
            "SELECT Location FROM party ORDER BY Number_of_hosts DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Location FROM party ORDER BY Number_of_hosts DESC LIMIT 1;"
        ]
    },
    "1628": {
        "db_id": "customers_and_invoices",
        "question": "Count the number of products that were never ordered.",
        "ground_truth": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "amends": [
            "Do reference the `product_id` from `Order_items` instead of `orders` in the subquery source table. Do maintain the same `COUNT(*)` aggregation and `NOT IN` predicate structure while correcting the subquery to reference the appropriate table that contains product order information. The amended query now correctly identifies products that have never been ordered by checking against the order items table rather than the orders table, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When counting products that were never ordered: use COUNT(*) aggregation to count all products. 2) When checking if products were ordered: reference the product_id from Order_items table instead of orders table in the subquery. 3) When identifying never-ordered products: use NOT IN predicate structure to exclude products that appear in Order_items.product_id. 4) When combining product information: maintain the subquery structure that correctly identifies ordered products by checking against the order items table rather than the orders table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM orders);",
            "SELECT COUNT(*) \nFROM Products \nWHERE product_id NOT IN (SELECT product_id FROM Order_Items)"
        ],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Products \nWHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)"
        ]
    },
    "3948": {
        "db_id": "hospital_1",
        "question": "Find the patient who has the most recent undergoing treatment?",
        "ground_truth": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "amends": [
            "Do select `patient` instead of `*` to return only the specific column needed. Do use table `undergoes` instead of `patients` to access the correct data source. Do order by `dateundergoes` instead of `treatment_date` to use the appropriate date column for sorting. The amended query now correctly returns the most recent patient from the undergoes table instead of attempting to retrieve all columns from an incorrect patients table.",
            "Do use lowercase `dateundergoes` in the ORDER BY clause instead of mixed-case `DateUndergoes` to match the table's actual column naming. Do use ascending order with `ORDER BY dateundergoes` instead of descending order with `ORDER BY DateUndergoes DESC` to retrieve the earliest rather than the most recent record. Do maintain the same table reference `undergoes` instead of `Undergoes` for consistent case handling. The amended query now correctly retrieves the patient with the earliest procedure date rather than the most recent one, matching the RIGHT_SQL's behavior.",
            "Do remove `DESC` from the `ORDER BY dateundergoes` clause instead of sorting in descending order, which changes the query to return the earliest date instead of the most recent date. The amended query now matches RIGHT_SQL's behavior by selecting the patient with the earliest dateundergoes value.",
            "Do remove `DESC` from the `ORDER BY dateundergoes` clause instead of sorting in descending order, which changes the query to return the earliest date instead of the most recent date. The amended query now matches RIGHT_SQL's behavior by selecting the patient with the earliest dateundergoes value."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM patients ORDER BY treatment_date DESC LIMIT 1;",
            "SELECT patient FROM Undergoes ORDER BY DateUndergoes DESC LIMIT 1;",
            "SELECT patient FROM undergoes ORDER BY dateundergoes DESC LIMIT 1;",
            "SELECT patient FROM undergoes ORDER BY dateundergoes DESC LIMIT 1;",
            "SELECT patient FROM undergoes ORDER BY dateundergoes DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6072": {
        "db_id": "customers_and_addresses",
        "question": "Return the the details of all products.",
        "ground_truth": "SELECT DISTINCT product_details FROM products",
        "amends": [
            "Do select `product_details` instead of `*` and add `DISTINCT` instead of omitting it. Do query from `products` instead of `customers`. The amended query now correctly retrieves unique product details from the products table."
        ],
        "rules": [
            "1) When answering about \"details of all products\": make sure the output order: product_details. 2) When the question asks for \"all products\": select distinct product_details to avoid duplicates. 3) When querying product information: use the products table instead of customers table. 4) When handling text literals: do not change case, spacing, or punctuation from the original values like 'Americano', 'Dove Chocolate', 'Latte'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM customers;",
            "SELECT DISTINCT product_details FROM Products;"
        ],
        "rule_sql": [
            "SELECT DISTINCT product_details FROM Products ORDER BY product_details;"
        ]
    },
    "6289": {
        "db_id": "city_record",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "ground_truth": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "amends": [
            "Do specify `T1.city` with table alias instead of just `city`. Do join `city AS T1` with `temperature AS T2` on `T1.city_id = T2.city_id` instead of querying only the `temperatures` table. Do reference temperature columns as `T2.Mar`, `T2.Jul`, and `T2.Oct` with table aliases instead of `march_temp`, `july_temp`, and `oct_temp`. Do maintain the same logical condition `T2.Mar < T2.Jul OR T2.Mar > T2.Oct` instead of changing the filter logic. The amended query now correctly joins the city and temperature tables with proper table aliases and column references to match the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about cities' temperature comparisons: make sure to join \"city\" as T1 with \"temperature\" as T2 using T1.city_id = T2.city_id to link city information with temperature data. 2) When the question mentions \"temperature in March\": \"March temperature\" actually means T2.\"Mar\" in the schema. 3) When the question mentions \"temperature in July\": \"July temperature\" actually means T2.\"Jul\" in the schema. 4) When the question mentions \"temperature in October\": \"October temperature\" actually means T2.\"Oct\" in the schema. 5) When comparing temperatures across months: apply the condition T2.\"Mar\" < T2.\"Jul\" OR T2.\"Mar\" > T2.\"Oct\" to find cities where March temperature is lower than July or higher than October. 6) When selecting city names: output T1.city with the table alias to specify the source table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city FROM temperatures WHERE (march_temp < july_temp) OR (march_temp > oct_temp);",
            "SELECT T1.City \nFROM city AS T1 \nJOIN temperature AS T2 ON T1.City_ID = T2.City_ID \nWHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct"
        ],
        "rule_sql": [
            "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID WHERE T2.\"Mar\" < T2.\"Jul\" OR T2.\"Mar\" > T2.\"Oct\""
        ]
    },
    "4607": {
        "db_id": "entertainment_awards",
        "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "ground_truth": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID",
        "amends": [
            "Do use table aliases `T2` and `T3` instead of direct table names `artwork` and `festival`. Do reference columns `T2.Name` and `T3.Festival_Name` instead of `artwork.name` and `festival.name`. Do join with `festival_detail AS T3` instead of `festival` table. Do use join conditions `T1.Artwork_ID = T2.Artwork_ID` and `T1.Festival_ID = T3.Festival_ID` instead of `nomination.artwork_id = artwork.id` and `nomination.festival_id = festival.id`. The amended query now correctly references the proper column names and table structure to match the intended behavior."
        ],
        "rules": [
            "1) When answering about \"name of the artwork and name of the festival\": make sure the output order: T2.Name, T3.Festival_Name\n2) When combining tables for nomination information: use table aliases T2 for artwork and T3 for festival_detail instead of direct table names\n3) When joining nomination with artwork: link rows where T1.Artwork_ID = T2.Artwork_ID\n4) When joining nomination with festival_detail: link rows where T1.Festival_ID = T3.Festival_ID\n5) When selecting artwork name: reference T2.Name instead of artwork.name\n6) When selecting festival name: reference T3.Festival_Name instead of festival.name"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT artwork.name, festival.name FROM nomination JOIN artwork ON nomination.artwork_id = artwork.id JOIN festival ON nomination.festival_id = festival.id",
            "SELECT T2.Name AS artwork_name, T3.Festival_Name AS festival_name\nFROM nomination AS T1\nJOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID\nJOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID;"
        ],
        "rule_sql": [
            "SELECT T2.Name, T3.Festival_Name FROM nomination T1 JOIN artwork T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail T3 ON T1.Festival_ID = T3.Festival_ID"
        ]
    },
    "6996": {
        "db_id": "culture_company",
        "question": "Show the movie titles and book titles for all companies in China.",
        "ground_truth": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "amends": [
            "Do select `T1.title` and `T3.book_title` instead of `movie_title` and `book_title`. Do join `movie AS T1` instead of omitting it. Do join `culture_company AS T2` with `ON T1.movie_id = T2.movie_id` instead of no join condition. Do join `book_club AS T3` with `ON T3.book_club_id = T2.book_club_id` instead of no join condition. Do filter on `T2.incorporated_in = 'China'` instead of `country = 'China'`. The amended query now correctly joins the three tables and filters based on the company's incorporation location rather than an unspecified country field."
        ],
        "rules": [
            "1) When answering about \"movie titles and book titles for companies in China\": make sure the output order: T1.title, T3.book_title\n2) When the question mentions \"movie titles\": \"movie titles\" actually means \"T1.title in schema\"\n3) When the question mentions \"book titles\": \"book titles\" actually means \"T3.book_title in schema\"\n4) When the question mentions \"companies in China\": \"China\" actually means \"T2.incorporated_in = 'China' in schema\"\n5) When combining T1, T2, and T3 for shared entities: link rows where T1.movie_id = T2.movie_id and T3.book_club_id = T2.book_club_id; keep only matching pairs (inner match)"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT movie_title, book_title FROM companies WHERE country = 'China';",
            "SELECT T1.Title, T3.Book_Title \nFROM movie AS T1\nJOIN culture_company AS T2 ON T1.movie_id = T2.movie_id\nJOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id\nWHERE T2.Incorporated_in = 'China'"
        ],
        "rule_sql": [
            "SELECT T1.Title, T3.Book_Title\nFROM movie T1\nJOIN culture_company T2 ON T1.movie_id = T2.movie_id\nJOIN book_club T3 ON T3.book_club_id = T2.book_club_id\nWHERE T2.Incorporated_in = 'China';"
        ]
    },
    "2310": {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
        "amends": [
            "Do select `T1.Name` from the `people` table instead of `name` from the `perpetrators` table. Do join `perpetrator AS T2` on `T1.People_ID = T2.People_ID` instead of querying a single table. Do filter with `T2.Country != \"China\"` instead of `country = 'China'` to exclude rather than include Chinese records. Do use proper table aliases `T1` and `T2` instead of no aliases. The amended query now correctly joins related tables and filters for non-Chinese perpetrators, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"names of perpetrators whose country is not China\": make sure the output order: T1.Name\n2) When the question mentions \"perpetrators\": \"perpetrators\" actually means \"T2 in schema\" and requires joining T1 and T2 on T1.People_ID = T2.People_ID\n3) When filtering for country not being China: use T2.Country != \"China\" with exact literal \"China\" in double quotes\n4) When combining people table (T1) and perpetrator table (T2): link rows where T1.People_ID = T2.People_ID and keep only matching pairs (inner match)"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM perpetrators WHERE country = 'China';",
            "SELECT T1.Name \nFROM people AS T1\nJOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID\nWHERE T2.Country != 'China'"
        ],
        "rule_sql": [
            "SELECT T1.Name\nFROM people T1\nINNER JOIN perpetrator T2 ON T1.People_ID = T2.People_ID\nWHERE T2.Country != \"China\"\nORDER BY T1.Name"
        ]
    },
    "6528": {
        "db_id": "wine_1",
        "question": "What are the areas and counties for all appelations?",
        "ground_truth": "SELECT Area ,  County FROM APPELLATIONS",
        "amends": [
            "Do use consistent capitalization with `Area` and `County` instead of lowercase `area` and `county`, and maintain the table name as `APPELLATIONS` instead of `appelations` with corrected spelling. The amended query now matches RIGHT_SQL's behavior with proper column and table naming conventions."
        ],
        "rules": [
            "1) When the question asks for areas and counties from appelations: use the exact table name \"APPELLATIONS\" with correct spelling and capitalization. 2) When selecting the area column: use the exact column name \"Area\" with proper capitalization. 3) When selecting the county column: use the exact column name \"County\" with proper capitalization. 4) When outputting results: maintain the column order as Area first, then County as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT area, county FROM appelations",
            "SELECT Area, County FROM appellations"
        ],
        "rule_sql": [
            "SELECT Area, County FROM APPELLATIONS"
        ]
    },
    "1840": {
        "db_id": "browser_web",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "ground_truth": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
        "amends": [
            "Do select `name` and `operating_system` instead of `accelerator_name` and `supporting_os`. Do use `web_client_accelerator` as the main table instead of `accelerators`. Do add an `EXCEPT` operation to exclude records instead of a simple `WHERE` filter. Do join through `accelerator_compatible_browser` and `browser` tables instead of directly filtering on browser name. Do filter for `T3.name = 'Opera'` in the excluded subquery instead of `browser_name != 'Opera'` in the main query. Do use proper table aliases `T1`, `T2`, and `T3` with explicit join conditions instead of a single table query. The amended query now correctly identifies accelerators incompatible with Opera by excluding those that are compatible, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about accelerator names and supporting operating systems: make sure the output order: name, operating_system. 2) When the question mentions \"accelerator names\": \"accelerator names\" actually means \"name in web_client_accelerator table\". 3) When the question mentions \"supporting operating systems\": \"supporting operating systems\" actually means \"operating_system in web_client_accelerator table\". 4) When the question asks for accelerators not compatible with browser 'Opera': use an EXCEPT operation to exclude records that are compatible with Opera instead of a simple WHERE filter. 5) When combining tables for browser compatibility: link web_client_accelerator (T1) to accelerator_compatible_browser (T2) and browser (T3) tables using their canonical keys as shown in the amends. 6) When filtering for browser 'Opera': use exact literal 'Opera' with T3.name column to identify compatible records to exclude. 7) When using table aliases: maintain T1 for web_client_accelerator, T2 for accelerator_compatible_browser, and T3 for browser as established in the amends."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT accelerator_name, supporting_os FROM accelerators WHERE browser_name != 'Opera';",
            "SELECT T1.name, T1.Operating_system\nFROM Web_client_accelerator T1\nEXCEPT\nSELECT T1.name, T1.Operating_system\nFROM Web_client_accelerator T1\nJOIN accelerator_compatible_browser T2 ON T1.id = T2.accelerator_id\nJOIN browser T3 ON T2.browser_id = T3.id\nWHERE T3.name = 'Opera'"
        ],
        "rule_sql": [
            "SELECT T1.name, T1.Operating_system\nFROM Web_client_accelerator T1\nEXCEPT\nSELECT T1.name, T1.Operating_system\nFROM Web_client_accelerator T1\nJOIN accelerator_compatible_browser T2 ON T1.id = T2.accelerator_id\nJOIN browser T3 ON T2.browser_id = T3.id\nWHERE T3.name = 'Opera';"
        ]
    },
    "485": {
        "db_id": "allergy_1",
        "question": "What is the last name of the youngest student?",
        "ground_truth": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "amends": [
            "Do select `LName` instead of `first_name` and use a subquery to find the minimum age instead of ordering and limiting. Do change the table name to `Student` instead of `students` and add a WHERE clause with `age = (SELECT min(age) FROM Student)` instead of using ORDER BY and LIMIT. Do remove the ORDER BY and LIMIT clauses entirely instead of keeping them, as the subquery approach directly identifies the record with the minimum age. The amended query now correctly returns the last name of the student with the minimum age, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for \"last name\": select the exact column \"LName\" from table \"Student\" instead of \"first_name\". 2) When the question asks for the \"youngest student\": use a subquery to find the minimum age value with \"(SELECT min(age) FROM Student)\" instead of ordering and limiting. 3) When identifying the youngest student: use a WHERE clause with \"age = (SELECT min(age) FROM Student)\" to directly match the record with the minimum age value. 4) When referring to the student table: use the exact table name \"Student\" instead of \"students\". 5) When finding the youngest student: remove ORDER BY and LIMIT clauses entirely as the subquery approach directly identifies the target record."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM students ORDER BY age ASC LIMIT 1;",
            "SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)"
        ],
        "rule_sql": [
            "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)"
        ]
    },
    "6268": {
        "db_id": "city_record",
        "question": "What is id of the city that hosted events in the most recent year?",
        "ground_truth": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "amends": [
            "Do select `host_city` from the `hosting_city` table instead of selecting `city_id` from the `events` table. Do use the correct table name `hosting_city` instead of `events` to access the appropriate data source. The amended query now correctly retrieves the most recent host city from the hosting_city table ordered by year descending."
        ],
        "rules": [
            "1) When the question asks for \"id of the city\": select \"host_city\" from the \"hosting_city\" table instead of \"city_id\" from \"events\". 2) When accessing city hosting data: use the \"hosting_city\" table as the data source, not the \"events\" table. 3) When finding the most recent year: order results by \"year\" in descending order and take the first row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city_id FROM events ORDER BY year DESC LIMIT 1;",
            "SELECT Host_City FROM hosting_city ORDER BY Year DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Host_City FROM hosting_city ORDER BY Year DESC LIMIT 1;"
        ]
    },
    "5685": {
        "db_id": "dorm_1",
        "question": "How many students exist?",
        "ground_truth": "SELECT count(*) FROM student",
        "amends": [
            "Do query the `student` table instead of the `teachers` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency. The amended query now correctly counts records from the student table instead of the teachers table, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"how many students exist\": query the \"student\" table instead of the \"teachers\" table. 2) When counting records: use lowercase \"count(*)\" instead of uppercase \"COUNT(*)\" for consistency."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM teachers;",
            "SELECT count(*) FROM Student"
        ],
        "rule_sql": [
            "SELECT count(*) FROM Student;"
        ]
    },
    "2236": {
        "db_id": "machine_repair",
        "question": "What are the names of the technicians by ascending order of age?",
        "ground_truth": "SELECT Name FROM technician ORDER BY Age ASC",
        "amends": [
            "Do reference the table as `technician` instead of `technicians` to match the correct schema. Do use column names `Name` and `Age` instead of `name` and `age` to match the correct case sensitivity. Do apply `ASC` ordering on `Age` instead of `DESC` ordering to sort in ascending rather than descending sequence. The amended query now correctly selects from the proper table with accurate column names and appropriate sorting direction."
        ],
        "rules": [
            "1) When the question asks about technicians: use the table name \"technician\" instead of \"technicians\" to match the correct schema. 2) When selecting technician names: use the column name \"Name\" instead of \"name\" to match the correct case sensitivity. 3) When ordering by age: use the column name \"Age\" instead of \"age\" to match the correct case sensitivity. 4) When the question specifies ascending order of age: apply ascending ordering on \"Age\" instead of descending ordering to sort in the correct sequence."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM technicians ORDER BY age DESC;",
            "SELECT Name FROM technician ORDER BY Age ASC;"
        ],
        "rule_sql": [
            "SELECT Name FROM technician ORDER BY Age ASC;"
        ]
    },
    "2249": {
        "db_id": "machine_repair",
        "question": "Show the team that have at least two technicians.",
        "ground_truth": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2",
        "amends": [
            "Do use `GROUP BY Team` and `HAVING COUNT(*) >= 2` instead of filtering with `WHERE COUNT(technicians) >= 2` without grouping. Do select `Team` instead of `team_name` from the `technician` table instead of the `teams` table. Do remove the incorrect aggregate function usage in the WHERE clause and instead properly aggregate with HAVING after grouping. The amended query now correctly identifies teams with at least two technicians by grouping and counting, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for teams with at least two technicians: group rows by the exact column \"Team\" from the technician table. 2) When counting technicians per team: count all rows using COUNT(*) for each group. 3) When filtering groups by count: use HAVING COUNT(*) >= 2 to select only groups with at least two rows. 4) When selecting the team identifier: output the exact column \"Team\" from the technician table, not team_name from a different table. 5) When performing aggregation: do not use aggregate functions like COUNT() in the WHERE clause without proper grouping."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE COUNT(technicians) >= 2",
            "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2"
        ],
        "rule_sql": [
            "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2;"
        ]
    },
    "63": {
        "db_id": "student_assessment",
        "question": "What are the  ids of every student who has never attended a course?",
        "ground_truth": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "amends": [
            "Do reference the `student_course_attendance` table instead of the `attendance` table in the subquery, as the correct table contains the attendance records that should be excluded from the main query results."
        ],
        "rules": [
            "1) When answering about \"students who have never attended a course\": reference the \"student_course_attendance\" table instead of the \"attendance\" table for attendance records. 2) When checking for students who never attended any course: use a subquery that selects student_id from \"student_course_attendance\" to identify students who should be excluded from the main results. 3) When filtering students who have never attended: use the condition WHERE student_id NOT IN with the subquery results to find students without any attendance records."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM attendance)",
            "SELECT student_id FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Student_Course_Attendance)"
        ],
        "rule_sql": [
            "SELECT student_id FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Student_Course_Attendance)"
        ]
    },
    "3416": {
        "db_id": "hr_1",
        "question": "On what dates were employees without the letter M in their first names hired?",
        "ground_truth": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%';"
        ],
        "rule_sql": [
            "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME NOT LIKE '%M%' AND FIRST_NAME NOT LIKE '%m%';"
        ]
    },
    "2044": {
        "db_id": "party_people",
        "question": "Count the number of different parties.",
        "ground_truth": "SELECT count(DISTINCT party_name) FROM party",
        "amends": [
            "Do use `count(DISTINCT party_name)` instead of `COUNT(*)` to count distinct non-null values rather than all rows. Do reference table `party` instead of `parties` as the correct source table. Do remove the explicit `WHERE party_name IS NOT NULL` filter instead of keeping it, since `count(DISTINCT)` automatically handles null values by excluding them from the count. The amended query now correctly counts distinct party names while ignoring null values, matching the behavior of the right SQL."
        ],
        "rules": [
            "1) When counting the number of different parties: use the exact table name \"party\" instead of \"parties\". 2) When counting distinct values of party_name: use count(DISTINCT party_name) to automatically exclude null values without needing an explicit WHERE clause. 3) When the question asks for \"number of different parties\": this means counting distinct non-null values of party_name from the party table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM parties WHERE party_name IS NOT NULL",
            "SELECT COUNT(DISTINCT party_name) FROM party"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT party_name) FROM party;"
        ]
    },
    "4774": {
        "db_id": "department_store",
        "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.",
        "ground_truth": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "amends": [
            "Do use `avg(total_amount_purchased)` and `avg(total_value_purchased)` instead of `AVG(total_amount)` and `SUM(total_amount)`. Do query from `Product_Suppliers` instead of `purchases`. Do use the subquery from `Product_Suppliers` instead of `products` while maintaining the same `GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1` logic. The amended query now correctly calculates averages from the Product_Suppliers table and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"average total amount purchased and total value purchased\": make sure the output order: avg(total_amount_purchased), avg(total_value_purchased). 2) When the question mentions \"supplier who supplies the greatest number of products\": find the supplier_id with the highest count of products by grouping Product_Suppliers by supplier_id, ordering by count(*) descending, and taking the first result. 3) When calculating averages for the top supplier: use avg(total_amount_purchased) and avg(total_value_purchased) from Product_Suppliers where supplier_id matches the top supplier from the subquery. 4) When counting products per supplier: use count(*) on Product_Suppliers grouped by supplier_id to determine the supplier with the greatest number of products."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT AVG(total_amount) as avg_total_amount, SUM(total_amount) as total_value_purchased\nFROM purchases\nWHERE supplier_id = (\n    SELECT supplier_id\n    FROM products\n    GROUP BY supplier_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
            "SELECT \n    AVG(ps.total_amount_purchased) AS avg_total_amount_purchased,\n    AVG(ps.total_value_purchased) AS avg_total_value_purchased\nFROM \n    Product_Suppliers ps\nWHERE \n    ps.supplier_id = (\n        SELECT \n            supplier_id \n        FROM \n            Product_Suppliers \n        GROUP BY \n            supplier_id \n        ORDER BY \n            COUNT(*) DESC \n        LIMIT 1\n    )"
        ],
        "rule_sql": [
            "SELECT \n    AVG(ps.total_amount_purchased) AS avg_total_amount_purchased,\n    AVG(ps.total_value_purchased) AS avg_total_value_purchased\nFROM Product_Suppliers ps\nWHERE ps.supplier_id = (\n    SELECT supplier_id\n    FROM Product_Suppliers\n    GROUP BY supplier_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);"
        ]
    },
    "1653": {
        "db_id": "theme_gallery",
        "question": "What are all distinct country for artists?",
        "ground_truth": "SELECT DISTINCT country FROM artist",
        "amends": [
            "Do reference table `artist` instead of `artists` and do remove the `WHERE country IS NOT NULL` filter instead of keeping it, as the DISTINCT clause inherently excludes NULL values and the table name correction aligns with the actual schema."
        ],
        "rules": [
            "1) When the question asks for distinct countries for artists: use the exact table name \"artist\" instead of \"artists\" as shown in the schema. 2) When using DISTINCT to find unique country values: do not add a WHERE country IS NOT NULL filter because DISTINCT inherently excludes NULL values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT country FROM artists WHERE country IS NOT NULL",
            "SELECT DISTINCT Country FROM artist"
        ],
        "rule_sql": [
            "SELECT DISTINCT Country FROM artist;"
        ]
    },
    "5616": {
        "db_id": "swimming",
        "question": "How many different countries are all the swimmers from?",
        "ground_truth": "SELECT count(DISTINCT nationality) FROM swimmer",
        "amends": [
            "Do `count(DISTINCT nationality)` instead of `COUNT(*)` to count distinct nationalities rather than all rows. Do reference table `swimmer` instead of `swimmers` to use the correct table name. End with confirmation that the amended query now correctly counts distinct nationalities from the swimmer table."
        ],
        "rules": [
            "1) When the question asks for \"different countries\" of swimmers: use the exact column token \"nationality\" from table \"swimmer\" to represent countries. 2) When counting distinct values of a column: compute the number of unique values using DISTINCT on the exact column token \"nationality\". 3) When referencing table names: use the exact table name \"swimmer\" instead of any variations like \"swimmers\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM swimmers;",
            "SELECT COUNT(DISTINCT Nationality) FROM swimmer;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Nationality) FROM swimmer;"
        ]
    },
    "1849": {
        "db_id": "wrestler",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "ground_truth": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "amends": [
            "Do reference the `Name` column instead of `name` to match the correct column name casing. Do reference the `wrestler` table instead of `wrestlers` to use the correct table name. Do reference the `Days_held` column instead of `days_held` to match the correct column name casing. The amended query now correctly selects from the proper table with accurate column names while maintaining the same ordering and limiting behavior."
        ],
        "rules": [
            "1) When the question asks for the name of a wrestler: use the exact column token \"Name\" from the wrestler table. 2) When the question asks for the lowest number of days held: order by the exact column token \"Days_held\" in ascending order and take the first row. 3) When referencing the wrestler table: use the exact table name \"wrestler\" (not \"wrestlers\"). 4) When selecting output columns: maintain the exact column order specified in the question, which is the wrestler's name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM wrestlers ORDER BY days_held ASC LIMIT 1;",
            "SELECT Name FROM wrestler ORDER BY CAST(Days_held AS INTEGER) ASC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
        ]
    },
    "4298": {
        "db_id": "club_1",
        "question": "How many different roles are there in the club \"Bootup Baltimore\"?",
        "ground_truth": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "amends": [
            "Do select `count(DISTINCT t2.position)` instead of `COUNT(*)`. Do join `member_of_club AS t2` on `t1.clubid = t2.clubid` instead of querying only the `clubs` table. Do filter on `t1.clubname = \"Bootup Baltimore\"` instead of `name = 'Bootup Baltimore'`. Do use table alias `t1` for the club table instead of direct table reference. The amended query now correctly counts distinct member positions for the specified club instead of simply counting all clubs with that name, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"different roles in a club\": make sure the output order: count of distinct positions. 2) When the question mentions \"roles\": \"roles\" actually means \"position in member_of_club table\". 3) When counting distinct roles: compute the number of unique values of the exact token \"t2.position\". 4) When filtering for club \"Bootup Baltimore\": use the exact literal \"Bootup Baltimore\" with the exact token \"t1.clubname\". 5) When combining clubs table (as t1) and member_of_club table (as t2): link rows where the canonical keys are equal exactly as shown (t1.clubid = t2.clubid); keep only matching pairs (inner match). 6) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for \"t1.clubname\" and \"Bootup Baltimore\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM clubs WHERE name = 'Bootup Baltimore';",
            "SELECT COUNT(DISTINCT t2.Position) \nFROM Club AS t1 \nJOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID \nWHERE t1.ClubName = 'Bootup Baltimore'"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT t2.Position) FROM Club t1 JOIN Member_of_club t2 ON t1.ClubID = t2.ClubID WHERE t1.ClubName = \"Bootup Baltimore\""
        ]
    },
    "1161": {
        "db_id": "body_builder",
        "question": "What is the average total score of body builders with height bigger than 200?",
        "ground_truth": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
        "amends": [
            "Do reference the `body_builder` table as `T1` instead of `body_builders`, and add a `JOIN` to the `people` table as `T2` on `T1.People_ID = T2.People_ID` instead of querying a single table. Do use the column `T1.Total` for the `AVG` aggregation instead of `weight`, and move the height filter to reference `T2.Height > 200` instead of applying it directly to the main table. The amended query now correctly joins related tables and uses the appropriate column for aggregation, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"average total score of body builders with height bigger than 200\": make sure the output order: AVG(T1.Total). 2) When the question mentions \"body builders\": \"body builders\" actually means \"T1\" table with alias \"T1\" from the schema. 3) When the question mentions \"height bigger than 200\": \"height\" actually means \"T2.Height\" column from the schema and use the exact comparison \"T2.Height > 200\". 4) When combining T1 and T2 for shared entities: link rows where T1.People_ID = T2.People_ID exactly as shown in the amends; keep only matching pairs (inner match). 5) When computing average total score: use T1.Total column for the AVG aggregation instead of weight column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT AVG(weight) FROM body_builders WHERE height > 200;",
            "SELECT AVG(T1.Total) FROM body_builder T1 JOIN people T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200"
        ],
        "rule_sql": [
            "SELECT AVG(T1.Total) FROM body_builder T1 JOIN people T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200"
        ]
    },
    "6896": {
        "db_id": "tracking_orders",
        "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
        "ground_truth": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "amends": [
            "Do select only `T1.customer_details` instead of all columns with `*`. Do add a `JOIN` with `orders AS T2` instead of querying only the `customers` table. Do use the join condition `T1.customer_id = T2.customer_id` instead of no join. Do move the filter to `T2.order_status = \"On Road\"` instead of applying it to a non-existent column in the customers table. The amended query now correctly retrieves customer details only for those with orders having the specified status, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for distinct customers with specific order status: use a join between customers table (T1) and orders table (T2) with the condition T1.customer_id = T2.customer_id instead of querying only one table. 2) When filtering for order status \"On Road\": apply the filter to T2.order_status = \"On Road\" exactly as specified, not to a non-existent column in the customers table. 3) When selecting customer details: output only T1.customer_details instead of all columns with *. 4) When combining T1 and T2 for shared entities: link rows where T1.customer_id = T2.customer_id and keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT * FROM customers WHERE order_status = 'On Road';",
            "SELECT DISTINCT T1.customer_details FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'"
        ],
        "rule_sql": [
            "SELECT DISTINCT c.customer_details \nFROM Customers c\nINNER JOIN Orders o ON c.customer_id = o.customer_id\nWHERE o.order_status = 'On Road'"
        ]
    },
    "864": {
        "db_id": "chinook_1",
        "question": "What are the phone numbers for each employee?",
        "ground_truth": "SELECT Phone FROM EMPLOYEE",
        "amends": [
            "Do select `Phone` instead of `name, email` from the `EMPLOYEE` table instead of `employees`."
        ],
        "rules": [
            "1) When answering about \"phone numbers for each employee\": make sure the output order: Phone from the Employee table. 2) When the question mentions \"phone numbers\": \"phone numbers\" actually means \"Phone in schema\". 3) When the question mentions \"employee\": \"employee\" actually means \"Employee table in schema\". 4) When choosing identifier delimiters: do not replace the exact table name \"Employee\" with any other form. 5) When handling text literals: do not change case, spacing, or punctuation from the exact column name \"Phone\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, email FROM employees;",
            "SELECT Phone FROM Employee;"
        ],
        "rule_sql": [
            "SELECT Phone FROM Employee ORDER BY Phone;"
        ]
    },
    "1501": {
        "db_id": "debate",
        "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "ground_truth": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
        "amends": [
            "Do use `debate_people AS T1` as the primary source table instead of `people p`, and join `debate AS T2` on `T1.Debate_ID = T2.Debate_ID` instead of directly joining `debates d` on `p.id = d.affirmative_id`. Do then join `people AS T3` on `T1.Affirmative = T3.People_ID` instead of the single join approach. Do select `T3.Name` instead of `p.name`, `T2.Date` instead of `d.date`, and `T2.Venue` instead of `d.venue` to correctly reference the joined tables. The amended query now properly navigates the relationship through the junction table debate_people to connect people with their debate participation roles, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about debate participants on the affirmative side: use debate_people as T1 as the primary source table instead of people. 2) When combining debate_people and debate tables: link rows where T1.Debate_ID = T2.Debate_ID and keep only matching pairs (inner match). 3) When combining debate_people and people tables: link rows where T1.Affirmative = T3.People_ID and keep only matching pairs (inner match). 4) When selecting person names: use T3.Name instead of p.name to reference the joined people table. 5) When selecting debate dates: use T2.Date instead of d.date to reference the joined debate table. 6) When selecting debate venues: use T2.Venue instead of d.venue to reference the joined debate table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT p.name, d.date, d.venue\nFROM people p\nJOIN debates d ON p.id = d.affirmative_id",
            "SELECT T3.Name, T2.Date, T2.Venue\nFROM debate_people AS T1\nJOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID\nJOIN people AS T3 ON T1.Affirmative = T3.People_ID;"
        ],
        "rule_sql": [
            "SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 INNER JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID INNER JOIN people AS T3 ON T1.Affirmative = T3.People_ID"
        ]
    },
    "4908": {
        "db_id": "store_product",
        "question": "Which district has the largest population?",
        "ground_truth": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "amends": [
            "Do select `district_name` instead of `district` to reference the correct column name. Do order by `city_population` instead of `population` to use the appropriate population metric for sorting. Do query from `district` table instead of `population_table` to reference the correct data source. The amended query now correctly identifies the district with the highest city population by using the proper table structure and column references."
        ],
        "rules": [
            "1) When the question asks about \"district\": use the exact column token \"district_name\" from the district table. 2) When the question asks for the \"largest population\": use the exact column token \"city_population\" for sorting in descending order. 3) When querying for district information: use the \"district\" table as the data source instead of \"population_table\". 4) When ranking to find the single largest value: take only the top 1 row after ordering by the relevant metric in descending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT district FROM population_table ORDER BY population DESC LIMIT 1;",
            "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;"
        ]
    },
    "6241": {
        "db_id": "ship_1",
        "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
        "ground_truth": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` with a subquery. Do reference the `captain` table instead of `captains` in both main query and subquery. Do move the `class` filter directly into the `EXCEPT` clause instead of using a correlated subquery. Do maintain the same `rank` column selection instead of changing the output structure. The amended query now correctly handles set differences between all captains and those with third-rate ships, avoiding potential issues with NULL values that could occur in the NOT IN approach.",
            "Do reference the `CLASS` column directly from the `captain` table instead of using a subquery with `Ship_ID` joins. Do filter on `CLASS = 'Third-rate ship of the line'` in the WHERE clause of the second SELECT statement instead of using an IN subquery with a join to the Ship table. Do remove the unnecessary subquery `(SELECT Ship_ID FROM Ship WHERE Class = 'Third-rate ship of the line')` and the associated table reference to the Ship table instead of keeping the complex join logic. The amended query now correctly filters captains by their class directly rather than through an indirect ship class relationship, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for ranks of captains that have no captain in the Third-rate ship of the line class: use the EXCEPT set operation to find the difference between all captains and those with third-rate ships. 2) When referring to the captains table: use the exact table name \"captain\" (not \"captains\") in both main query and subquery. 3) When filtering for ship class: apply the condition class = 'Third-rate ship of the line' directly in the EXCEPT clause. 4) When selecting output: maintain the rank column selection without changing the output structure.",
            "1) When answering about \"ranks of captains that have no captain that are in the Third-rate ship of the line class\": make sure the output order: rank\n2) When the question mentions \"captains in the Third-rate ship of the line class\": filter captains where CLASS = 'Third-rate ship of the line' using exact literal matching\n3) When the question asks for ranks that have no captain in the specified class: use EXCEPT operation between all ranks and ranks from captains with CLASS = 'Third-rate ship of the line'\n4) When handling text literals: do not change case, spacing, or punctuation - use 'Third-rate ship of the line' exactly as specified\n5) When filtering captains by class: reference the CLASS column directly from the captain table instead of using subqueries with Ship_ID joins"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT rank FROM captains WHERE captain_id NOT IN (SELECT captain_id FROM ships WHERE class = 'Third-rate ship of the line')",
            "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE Ship_ID IN (SELECT Ship_ID FROM Ship WHERE Class = 'Third-rate ship of the line')",
            "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE Class = 'Third-rate ship of the line'"
        ],
        "rule_sql": [
            "SELECT Rank FROM captain\nEXCEPT\nSELECT Rank FROM captain WHERE Class = 'Third-rate ship of the line'\nORDER BY Rank;"
        ]
    },
    "6517": {
        "db_id": "wine_1",
        "question": "What is the name of the highest rated wine?",
        "ground_truth": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
        "amends": [
            "Do reference the `Name` column instead of `name` and use the `Score` column for ordering instead of `rating`. Do query from the `WINE` table instead of the `wines` table. The amended query now correctly retrieves the wine with the lowest score from the appropriate table structure.",
            "Do remove `DESC` from the `ORDER BY` clause instead of sorting in descending order, which changes the query to return the wine with the lowest score rather than the highest score. The amended query now matches RIGHT_SQL's behavior by ordering scores in ascending order to find the minimum score.",
            "Do remove `DESC` from the `ORDER BY` clause instead of sorting in descending order, which changes the query to return the wine with the lowest score rather than the highest score. The amended query now matches RIGHT_SQL's behavior by ordering scores in ascending order to find the minimum score."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM wines ORDER BY rating ASC LIMIT 1;",
            "SELECT Name FROM wine ORDER BY Score DESC LIMIT 1;",
            "SELECT Name FROM wine ORDER BY Score DESC LIMIT 1;",
            "SELECT Name FROM wine ORDER BY Score DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2168": {
        "db_id": "formula_1",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "ground_truth": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "amends": [
            "Do select `T1.driverid` and `T1.surname` instead of `id` and `last_name`. Do add `JOIN laptimes AS T2` instead of querying only the `drivers` table. Do use join condition `T1.driverid = T2.driverid` instead of no join. Do order by `T2.milliseconds DESC` instead of `laptime ASC`. The amended query now correctly joins driver and laptime data to find the driver with the slowest lap time instead of attempting to sort drivers by a non-existent laptime column."
        ],
        "rules": [
            "1) When the question asks for \"id\" and \"last name\": use the exact column tokens \"T1.driverid\" and \"T1.surname\" respectively. 2) When combining driver and laptime data: join tables using the condition T1.driverid = T2.driverid to link matching rows. 3) When finding the driver with the longest laptime: order results by T2.milliseconds in descending order and take the first row. 4) When the question mentions \"laptime\": this refers to the \"T2.milliseconds\" column in the laptimes table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, last_name FROM drivers ORDER BY laptime ASC LIMIT 1;",
            "SELECT T1.driverId, T1.surname \nFROM drivers AS T1 \nJOIN laptimes AS T2 ON T1.driverId = T2.driverId \nORDER BY T2.milliseconds DESC \nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.driverId, T1.surname FROM drivers T1 JOIN lapTimes T2 ON T1.driverId = T2.driverId ORDER BY T2.milliseconds DESC LIMIT 1;"
        ]
    },
    "6537": {
        "db_id": "wine_1",
        "question": "How many wines are produced at Robert Biale winery?",
        "ground_truth": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
        "amends": [
            "Do reference table `WINE` instead of `wines` and use column `Winery` instead of `winery` with double quotes around the literal value instead of single quotes, while maintaining the same aggregate function `count(*)` instead of `COUNT(*)` and preserving the exact filter condition logic. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"wines produced at Robert Biale winery\": use table \"WINE\" instead of \"wines\" and column \"Winery\" instead of \"winery\". 2) When filtering for \"Robert Biale\" winery: use the exact literal value \"Robert Biale\" with double quotes. 3) When counting wines: use count(*) to count all rows that match the filter condition."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM wines WHERE winery = 'Robert Biale';",
            "SELECT count(*) FROM \"wine\" WHERE \"Winery\" = \"Robert Biale\""
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM wine WHERE Winery = \"Robert Biale\";"
        ]
    },
    "4765": {
        "db_id": "department_store",
        "question": "What are the phone numbers of all customers and suppliers.",
        "ground_truth": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "amends": [
            "Do select `customer_phone` from the customers table instead of `phone`, and do select `supplier_phone` from the suppliers table instead of `phone`. The amended query now correctly references the appropriate phone column names from each table in the UNION operation, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for phone numbers from customers: use the exact column \"customer_phone\" from the Customers table. 2) When the question asks for phone numbers from suppliers: use the exact column \"supplier_phone\" from the Suppliers table. 3) When combining results from multiple tables for phone numbers: use UNION to combine the results from both tables without duplicates."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT phone FROM customers UNION SELECT phone FROM suppliers;",
            "SELECT customer_phone AS phone FROM Customers\nUNION\nSELECT supplier_phone AS phone FROM Suppliers;"
        ],
        "rule_sql": [
            "SELECT customer_phone AS phone_number FROM Customers\nUNION\nSELECT supplier_phone AS phone_number FROM Suppliers;"
        ]
    },
    "982": {
        "db_id": "university_basketball",
        "question": "Return the founded year for the school with the largest enrollment.",
        "ground_truth": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "amends": [
            "Do select `founded` instead of `founded_year` from the table source. Do reference table `university` instead of `schools` as the data source. Do order by `enrollment DESC` instead of `enrollment ASC` to sort in descending order rather than ascending. The amended query now correctly retrieves the founding year from the university table ordered by enrollment in descending order with a limit of one result."
        ],
        "rules": [
            "1) When the question asks for \"founded year\": use the exact column token \"founded\" from the university table. 2) When the question refers to \"school\": use the exact table token \"university\" as the data source. 3) When the question asks for the school with \"largest enrollment\": order by the exact column token \"enrollment\" in descending order and keep only the first row. 4) When producing output: return only the founded year value from the top-ranked row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT founded_year FROM schools ORDER BY enrollment ASC LIMIT 1;",
            "SELECT Founded FROM university ORDER BY Enrollment DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Founded FROM university ORDER BY Enrollment DESC LIMIT 1"
        ]
    },
    "1088": {
        "db_id": "match_season",
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "ground_truth": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "amends": [
            "Do join `team AS T2` instead of querying only the `players` table. Do use `T1.Team = T2.Team_id` as the join condition instead of directly filtering on team name. Do filter on `T2.Name = \"Columbus Crew\"` instead of `team = 'Columbus Crew'`. Do select `T1.Player` and `T1.Years_Played` instead of `player_name` and `year`. The amended query now correctly joins tables and uses proper foreign key relationships to match the intended behavior."
        ],
        "rules": [
            "1) When answering about players from team \"Columbus Crew\": make sure to join the team table (as T2) with the players table (as T1) using T1.Team = T2.Team_id instead of filtering directly on team name. 2) When filtering for team \"Columbus Crew\": use T2.Name = \"Columbus Crew\" with exact double quotes and capitalization. 3) When selecting player information: use T1.Player and T1.Years_Played as the output columns instead of player_name and year. 4) When combining players and team tables: perform an inner match where T1.Team equals T2.Team_id to ensure proper foreign key relationships."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT player_name, year FROM players WHERE team = 'Columbus Crew';",
            "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'"
        ],
        "rule_sql": [
            "SELECT T1.Player, T1.Years_Played FROM player AS T1 INNER JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""
        ]
    },
    "5372": {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "ground_truth": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "amends": [
            "Do select `problem_id` instead of `id` and filter on `date_problem_reported` instead of `reported_date` while maintaining the same date comparison condition with '1978-06-26', resulting in the amended query now matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"ids of the problems\": select the exact column \"problem_id\" from table Problems. 2) When the question mentions \"reported after 1978-06-26\": filter using column \"date_problem_reported\" with the exact literal '1978-06-26' and use greater than comparison to find dates after this specific date."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id FROM problems WHERE reported_date > '1978-06-26';",
            "SELECT problem_id FROM Problems WHERE date_problem_reported > '1978-06-26'"
        ],
        "rule_sql": [
            "SELECT problem_id FROM Problems WHERE date_problem_reported > '1978-06-26'"
        ]
    },
    "300": {
        "db_id": "twitter_1",
        "question": "Find the maximum and total number of followers of all users.",
        "ground_truth": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "amends": [
            "Do reference the `user_profiles` table instead of the `users` table. Do use the `sum(followers)` aggregate function instead of `COUNT(*)`. Do maintain the `MAX(followers)` aggregate function but with lowercase syntax instead of uppercase. The amended query now correctly calculates both the maximum followers count and total followers sum from the appropriate user profiles table."
        ],
        "rules": [
            "1) When answering about \"maximum and total number of followers of all users\": make sure the output order: maximum followers first, then total followers sum. 2) When the question mentions \"followers\": \"followers\" actually means \"followers in user_profiles table\". 3) When calculating maximum followers: use the max(followers) aggregate function with lowercase syntax. 4) When calculating total number of followers: use the sum(followers) aggregate function instead of counting all rows. 5) When referencing user data: use the user_profiles table instead of the users table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(followers), COUNT(*) FROM users;",
            "SELECT max(followers) AS max_followers, sum(followers) AS total_followers FROM user_profiles;"
        ],
        "rule_sql": [
            "SELECT MAX(followers) AS max_followers, SUM(followers) AS total_followers FROM user_profiles"
        ]
    },
    "5943": {
        "db_id": "cre_Theme_park",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "ground_truth": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "amends": [
            "Do select specific columns `other_hotel_details` and `star_rating_code` instead of using `*` to select all columns. Do order by `price_range` instead of `price` to use the correct column name for ordering. The amended query now correctly retrieves only the specified hotel details and star ratings ordered by the appropriate price range column, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"details and star ratings\": select the specific columns \"other_hotel_details\" and \"star_rating_code\" instead of using * to select all columns. 2) When ordering by \"least expensive\": use the column \"price_range\" in ascending order to find the hotels with the lowest price ranges. 3) When the question specifies \"3 least expensive hotels\": limit the results to the first 3 rows after ordering by \"price_range\" in ascending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM hotels ORDER BY price ASC LIMIT 3;",
            "SELECT other_hotel_details, star_rating_code FROM Hotels ORDER BY price_range ASC LIMIT 3;"
        ],
        "rule_sql": [
            "SELECT other_hotel_details, star_rating_code FROM Hotels ORDER BY price_range ASC LIMIT 3;"
        ]
    },
    "5655": {
        "db_id": "customers_and_products_contacts",
        "question": "Show each state and the number of addresses in each state.",
        "ground_truth": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county",
        "amends": [
            "Do group by `state_province_county` instead of `city` and select `state_province_county` instead of `state` to ensure the aggregation correctly counts records by the appropriate administrative division rather than by city, which may span multiple states. The amended query now matches RIGHT_SQL's behavior by properly aggregating addresses by state/province/county boundaries."
        ],
        "rules": [
            "1) When the question asks for \"state\" and \"number of addresses in each state\": \"state\" actually means \"state_province_county\" in the schema. 2) When grouping addresses by administrative division: group by the exact column \"state_province_county\" instead of \"city\". 3) When counting addresses per group: count the number of rows using the canonical counting method for addresses. 4) When producing output: make sure the output order is \"state_province_county\" followed by the count of addresses."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT state, COUNT(*) FROM addresses GROUP BY city;",
            "SELECT state_province_county, COUNT(*) AS number_of_addresses FROM Addresses GROUP BY state_province_county;"
        ],
        "rule_sql": [
            "SELECT state_province_county, COUNT(*) AS number_of_addresses FROM Addresses GROUP BY state_province_county ORDER BY state_province_county;"
        ]
    },
    "2765": {
        "db_id": "election",
        "question": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.",
        "ground_truth": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"",
        "amends": [
            "Do select `T1.County_name` from the `county` table instead of selecting `county` from the `delegates` table. Do join the `election` table as `T2` with the condition `T1.County_id = T2.District` instead of querying only the `delegates` table. Do filter on `T2.Committee = \"Appropriations\"` instead of filtering on `committee = 'Appropriations'` from the wrong table. The amended query now correctly retrieves county names by joining the appropriate tables and filtering on the committee in the election table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"county names for delegates on Appropriations committee\": make sure the output order: T1.County_name\n2) When the question mentions \"county\": \"county\" actually means \"T1.County_name in county table\"\n3) When the question mentions \"delegates on Appropriations committee\": this actually means filtering on \"T2.Committee = \\\"Appropriations\\\"\" from the election table\n4) When combining county table as T1 and election table as T2: link rows where T1.County_id = T2.District and keep only matching pairs (inner match)\n5) When handling text literals: do not change case, spacing, or punctuation - use exact literal \\\"Appropriations\\\" with double quotes"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT county FROM delegates WHERE committee = 'Appropriations';",
            "SELECT T1.County_name FROM county T1 JOIN election T2 ON T1.County_Id = T2.District WHERE T2.Committee = 'Appropriations'"
        ],
        "rule_sql": [
            "SELECT T1.County_name\nFROM county T1\nINNER JOIN election T2 ON T1.County_Id = T2.District\nWHERE T2.Committee = \"Appropriations\""
        ]
    },
    "2038": {
        "db_id": "gas_company",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "ground_truth": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "amends": [
            "Do add `station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id` instead of querying `gas_stations` directly. Do reference `T3.location` and `T3.Representative_Name` instead of `location` and `representative_name`. Do order by `T2.Assets_billion DESC` instead of `assets DESC`. The amended query now correctly joins related tables to access the required company assets data and matches the RIGHT_SQL's behavior.",
            "Do remove the `WHERE` clause with the subquery that incorrectly filtered by `Company_ID` from an ordered subquery instead of directly limiting the main results. Do change the `LIMIT 3` placement from the subquery to the main query instead of keeping it in the subquery where it was ineffective for filtering. Do maintain the same `SELECT` list with `T3.location` and `T3.Representative_Name` instead of changing any column selections. Do preserve the same `FROM` structure with `JOIN` between `station_company`, `company`, and `gas_station` tables instead of altering the join logic. Do keep the `ORDER BY T2.Assets_billion DESC` in the main query instead of moving it to a subquery. The amended query now correctly limits to the top 3 companies by assets while returning their station locations and representative names, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about gas stations and company assets: join station_company as T1 with company as T2 on T1.Company_ID = T2.Company_ID, then join with gas_station as T3 on T1.station_id = T3.station_id. 2) When the question asks for locations and representatives' names: reference T3.location and T3.Representative_Name as output columns. 3) When the question asks for companies with the 3 largest amounts of assets: order by T2.Assets_billion DESC and keep the first 3 rows. 4) When combining tables for shared entities: perform inner matches using the exact key equalities T1.Company_ID = T2.Company_ID and T1.station_id = T3.station_id.",
            "1) When answering about \"gas stations owned by companies with the 3 largest amounts of assets\": make sure the output order: T3.location, T3.Representative_Name. 2) When the question asks for \"top 3 companies by assets\": rank rows by T2.Assets_billion in descending order and keep the first 3 rows. 3) When combining station_company (T1), company (T2), and gas_station (T3): link rows where T1.Company_ID = T2.Company_ID and T1.Station_ID = T3.Station_ID; keep only matching pairs (inner match). 4) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms. 5) When handling text literals: do not change case, spacing, or punctuation. 6) When referring to table roles: do not rename or swap the aliases T1, T2, T3 once set for this schema."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location, representative_name \nFROM gas_stations \nORDER BY assets DESC \nLIMIT 3;",
            "SELECT T3.Location, T3.Representative_Name\nFROM station_company AS T1\nJOIN company AS T2 ON T1.Company_ID = T2.Company_ID\nJOIN gas_station AS T3 ON T1.Station_ID = T3.Station_ID\nWHERE T2.Company_ID IN (\n    SELECT Company_ID\n    FROM company\n    ORDER BY Assets_billion DESC\n    LIMIT 3\n)\nORDER BY T2.Assets_billion DESC;",
            "SELECT T3.location, T3.Representative_Name\nFROM station_company AS T1\nJOIN company AS T2 ON T1.Company_ID = T2.Company_ID\nJOIN gas_station AS T3 ON T1.Station_ID = T3.Station_ID\nORDER BY T2.Assets_billion DESC\nLIMIT 3"
        ],
        "rule_sql": [
            "SELECT T3.\"Location\", T3.\"Representative_Name\"\nFROM station_company AS T1\nJOIN company AS T2 ON T1.\"Company_ID\" = T2.\"Company_ID\"\nJOIN gas_station AS T3 ON T1.\"Station_ID\" = T3.\"Station_ID\"\nWHERE T2.\"Company_ID\" IN (\n    SELECT \"Company_ID\"\n    FROM company\n    ORDER BY \"Assets_billion\" DESC\n    LIMIT 3\n)\nORDER BY T3.\"Location\", T3.\"Representative_Name\""
        ]
    },
    "1333": {
        "db_id": "college_2",
        "question": "Give the name of the student in the History department with the most credits.",
        "ground_truth": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "amends": [
            "Do reference table `student` instead of `students` in the FROM clause. Do use column `dept_name` instead of `department` in the WHERE filter condition. Do order by `tot_cred DESC` instead of `credits ASC` in the ORDER BY clause. The amended query now correctly retrieves the student name from the student table with the history department using the proper column names and sorting by total credits in descending order to match the intended behavior."
        ],
        "rules": [
            "1) When the question mentions \"students\": use table \"student\" instead of \"students\". 2) When the question mentions \"department\": use column \"dept_name\" instead of \"department\". 3) When the question asks for the student with \"the most credits\": order by \"tot_cred\" in descending order instead of ascending order. 4) When filtering for the History department: use the exact literal value 'History' for the dept_name filter."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM students WHERE department = 'History' ORDER BY credits ASC LIMIT 1;",
            "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1;"
        ]
    },
    "1356": {
        "db_id": "college_2",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "ground_truth": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "amends": [
            "Do reference table `classroom` instead of `rooms` in the FROM clause. Do use comparison operator `<` for `capacity` instead of `>` to filter for classrooms with capacity less than 50 instead of greater than 50. The amended query now correctly counts classrooms in Lamberton building with capacity under 50, matching the intended behavior."
        ],
        "rules": [
            "1) When the question mentions \"rooms\": \"rooms\" actually means \"classroom\" in schema. 2) When filtering for capacity less than 50: use comparison operator < with exact value 50 for the \"capacity\" column. 3) When filtering for Lamberton building: use exact string literal 'Lamberton' for the \"building\" column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM rooms WHERE building = 'Lamberton' AND capacity > 50;",
            "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50"
        ]
    },
    "3879": {
        "db_id": "insurance_policies",
        "question": "Which payment method is used the most often?",
        "ground_truth": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `Payment_Method_Code` instead of `payment_method` and `COUNT(*) as usage_count`. Do group by `Payment_Method_Code` instead of `payment_method`. Do order by `count(*) DESC` instead of `usage_count ASC`. Do remove the alias `usage_count` instead of keeping it. The amended query now correctly identifies the most frequently used payment method by counting occurrences in descending order rather than finding the least used method in ascending order.",
            "Do remove the `COUNT(*) as usage_count` column from the SELECT list instead of including it, as only the `Payment_Method_Code` is needed to identify the most frequently used payment method. Do keep the same `GROUP BY Payment_Method_Code` and `ORDER BY count(*) DESC LIMIT 1` structure to correctly identify the payment method with the highest usage count. The amended query now matches RIGHT_SQL's behavior by returning only the payment method code with the highest frequency."
        ],
        "rules": [
            "1) When answering about \"which payment method is used the most often\": make sure the output order: Payment_Method_Code first, then the count. 2) When the question mentions \"payment method\": \"payment method\" actually means \"Payment_Method_Code in schema\". 3) When the question asks for \"most often\" or \"most frequently used\": rank rows by count(*) in descending order and keep the first 1 row. 4) When counting payment method usage: compute the number of rows using the exact token Payment_Method_Code. 5) When grouping by payment method: organize results by Payment_Method_Code and compute the count per group. 6) When choosing identifier delimiters: do not replace the exact token Payment_Method_Code with any other form or quotes.",
            "1) When answering about \"which payment method is used the most often\": make sure the output order includes only the Payment_Method_Code column. 2) When counting payment method usage: count using the Payment_Method_Code column and group by Payment_Method_Code. 3) When identifying the most frequently used payment method: order the results by count in descending order and keep only the first row. 4) When handling text literals: do not change case, spacing, or punctuation of payment method values like 'MasterCard' or 'Discover Card'."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT payment_method, COUNT(*) as usage_count FROM payments GROUP BY payment_method ORDER BY usage_count ASC LIMIT 1;",
            "SELECT Payment_Method_Code, COUNT(*) as usage_count FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Payment_Method_Code, COUNT(*) AS count_usage\nFROM Payments\nGROUP BY Payment_Method_Code\nORDER BY count_usage DESC\nLIMIT 1;"
        ]
    },
    "3543": {
        "db_id": "music_1",
        "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "ground_truth": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "amends": [
            "Do add `JOIN song AS T2 ON T1.artist_name = T2.artist_name` instead of querying only the `artists` table. Do reference `T2.rating` in the `ORDER BY` clause instead of `rating` from the original table. Do use table aliases `T1` and `T2` for column references instead of direct table names. Do specify the source table as `artist AS T1` instead of just `artists`. The amended query now correctly joins artist and song data to sort by song ratings instead of artist ratings, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"top three highly rated songs\": rank songs by T2.rating in descending order and keep the first 3 rows. 2) When combining artist and song tables for shared artists: link rows where T1.artist_name = T2.artist_name exactly as shown; keep only matching pairs (inner match). 3) When the question asks for artist names and countries: output T1.artist_name and T1.country in that order. 4) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for any column references."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT artist_name, country FROM artists ORDER BY rating DESC LIMIT 3;",
            "SELECT T1.artist_name, T1.country\nFROM artist AS T1\nJOIN song AS T2 ON T1.artist_name = T2.artist_name\nORDER BY T2.rating DESC\nLIMIT 3"
        ],
        "rule_sql": [
            "SELECT T1.artist_name, T1.country FROM artist T1 INNER JOIN song T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3"
        ]
    },
    "5651": {
        "db_id": "railway",
        "question": "Show the working years of managers in descending order of their level.",
        "ground_truth": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
        "amends": [
            "Do select `Working_year_starts` instead of `level, working_years`. Do reference table `manager` instead of `managers`. Do order by `LEVEL DESC` instead of `working_years DESC`. The amended query now correctly selects the working year starts from the manager table ordered by level in descending order."
        ],
        "rules": [
            "1) When the question asks for \"working years\": select \"Working_year_starts\" from table \"manager\" instead of \"working_years\" from \"managers\". 2) When ordering results in descending order of level: use \"LEVEL DESC\" as the ordering condition instead of \"working_years DESC\". 3) When referencing the manager table: use the exact table name \"manager\" instead of \"managers\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT level, working_years FROM managers ORDER BY working_years DESC;",
            "SELECT Working_year_starts FROM manager ORDER BY Level DESC;"
        ],
        "rule_sql": [
            "SELECT Working_year_starts FROM manager ORDER BY Level DESC;"
        ]
    },
    "5981": {
        "db_id": "game_1",
        "question": "How many video games have type Massively multiplayer online game?",
        "ground_truth": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"",
        "amends": [
            "Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency with the right SQL. Do reference the correct column name `gtype` instead of `type` to match the actual schema. Do use double quotes `\"Massively multiplayer online game\"` instead of single quotes `'Massively Multiplayer Online Game'` for the string literal, and ensure the case matches exactly as `Massively multiplayer online game` instead of `Massively Multiplayer Online Game`. The amended query now correctly counts video games where the game type matches the specified string value."
        ],
        "rules": [
            "1) When the question asks for count of video games: count all rows using count(*) with lowercase syntax. 2) When the question mentions \"type Massively multiplayer online game\": use the exact column name \"gtype\" instead of \"type\" to match the schema. 3) When filtering for the literal value \"Massively multiplayer online game\": use double quotes and exact case/spacing as \"Massively multiplayer online game\" without changing to title case."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM video_games WHERE type = 'Massively Multiplayer Online Game';",
            "SELECT count(*) FROM Video_Games WHERE gtype = \"Massively multiplayer online game\""
        ],
        "rule_sql": [
            "SELECT count(*) FROM Video_Games WHERE gtype = \"Massively multiplayer online game\";"
        ]
    },
    "1293": {
        "db_id": "soccer_1",
        "question": "List all country and league names.",
        "ground_truth": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of table names without aliases. Do select specific column names `T1.name` and `T2.name` instead of generic `country` and `league`. Do reference the correct table names `Country` and `League` instead of `countries` and `leagues`. The amended query now correctly retrieves country and league names with proper table references and aliasing."
        ],
        "rules": [
            "1) When answering about \"country and league names\": make sure the output order: T1.name, T2.name. 2) When the question mentions \"country\": \"country\" actually means \"T1.name\" from table \"Country\". 3) When the question mentions \"league\": \"league\" actually means \"T2.name\" from table \"League\". 4) When combining Country and League tables: link rows where T1.id = T2.country_id and keep only matching pairs (inner match). 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT country, league FROM countries JOIN leagues ON countries.id = leagues.country_id",
            "SELECT T1.name, T2.name FROM Country T1 JOIN League T2 ON T1.id = T2.country_id;"
        ],
        "rule_sql": [
            "SELECT Country.name, League.name FROM Country INNER JOIN League ON Country.id = League.country_id ORDER BY Country.name, League.name;"
        ]
    },
    "4560": {
        "db_id": "company_office",
        "question": "What is the stories of highest building?",
        "ground_truth": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT stories FROM buildings ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1;"
        ]
    },
    "964": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "ground_truth": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "amends": [
            "Do reference `medicine` as `T1` with alias `id` instead of `medicine_id` and `trade_name` instead of `trade_name`. Do join with `medicine_enzyme_interaction` as `T2` instead of `medicine_enzyme` and use `T2.medicine_id = T1.id` instead of `m.medicine_id = me.medicine_id`. Do group by only `T1.id` instead of both `m.medicine_id` and `m.trade_name`. Do use `COUNT(*) >= 3` instead of `COUNT(me.enzyme_id) > 2` to count all interactions and include medicines with exactly 3 interactions. The amended query now correctly identifies medicines with three or more enzyme interactions."
        ],
        "rules": [
            "1) When answering about medicine interactions with enzymes: use table \"medicine\" as T1 with columns \"id\" and \"trade_name\" instead of medicine_id. 2) When joining with enzyme interaction data: use table \"medicine_enzyme_interaction\" as T2 instead of medicine_enzyme and link using T2.medicine_id = T1.id. 3) When grouping medicine results: group by only T1.id instead of both id and trade_name. 4) When counting enzyme interactions: use COUNT(*) >= 3 instead of counting specific columns to include medicines with exactly 3 interactions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT m.medicine_id, m.trade_name \nFROM medicine m \nJOIN medicine_enzyme me ON m.medicine_id = me.medicine_id \nGROUP BY m.medicine_id, m.trade_name \nHAVING COUNT(me.enzyme_id) > 2",
            "SELECT T1.id, T1.Trade_Name \nFROM medicine T1\nJOIN medicine_enzyme_interaction T2 ON T2.medicine_id = T1.id\nGROUP BY T1.id\nHAVING COUNT(*) >= 3"
        ],
        "rule_sql": [
            "SELECT T1.id, T1.Trade_Name\nFROM medicine AS T1\nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id\nGROUP BY T1.id\nHAVING COUNT(*) >= 3"
        ]
    },
    "5628": {
        "db_id": "swimming",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "ground_truth": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
        "amends": [
            "Do select `t4.name` from the `stadium` table instead of `stadium_name` from the `swimmers` table. Do join four tables (`swimmer`, `record`, `event`, and `stadium`) with proper foreign key relationships instead of querying a single `swimmers` table. Do use `JOIN record AS t2 ON t1.id = t2.swimmer_id` to connect swimmers to their records instead of missing this relationship entirely. Do add `JOIN event AS t3 ON t2.event_id = t3.id` to link records to events instead of omitting this necessary join. Do include `JOIN stadium AS t4 ON t4.id = t3.stadium_id` to access stadium information through the event relationship instead of directly querying a non-existent stadium column. Do filter on `t1.nationality = 'Australia'` instead of `country = 'Australia'` to use the correct column name for nationality. The amended query now correctly retrieves stadium names by properly navigating the relational schema through all necessary joins."
        ],
        "rules": [
            "1) When answering about stadium names that Australian swimmers have been to: make sure the output order: t4.name from the stadium table. 2) When the question mentions \"Australian swimmers\": \"Australian\" actually means \"t1.nationality = 'Australia'\" in schema. 3) When combining tables for shared entities: link rows where t1.id = t2.swimmer_id to connect swimmers to their records. 4) When combining tables for shared entities: link rows where t2.event_id = t3.id to connect records to events. 5) When combining tables for shared entities: link rows where t3.stadium_id = t4.id to connect events to stadiums. 6) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms. 7) When handling text literals: do not change case, spacing, or punctuation for 'Australia'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT stadium_name FROM swimmers WHERE country = 'Australia';",
            "SELECT DISTINCT t4.name \nFROM swimmer AS t1\nJOIN record AS t2 ON t1.ID = t2.Swimmer_ID\nJOIN event AS t3 ON t2.Event_ID = t3.ID\nJOIN stadium AS t4 ON t3.Stadium_ID = t4.ID\nWHERE t1.Nationality = 'Australia'"
        ],
        "rule_sql": [
            "SELECT DISTINCT t4.name \nFROM swimmer t1\nJOIN record t2 ON t1.ID = t2.Swimmer_ID\nJOIN event t3 ON t2.Event_ID = t3.ID\nJOIN stadium t4 ON t3.Stadium_ID = t4.ID\nWHERE t1.Nationality = 'Australia'\nORDER BY t4.name"
        ]
    },
    "5534": {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "ground_truth": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
        "amends": [
            "Do reference `product_category_code` instead of `category` in the WHERE filter. Do reference `typical_buying_price` instead of `price` in the WHERE filter. Do use double quotes around `\"Spices\"` instead of single quotes for the string literal. The amended query now correctly matches the intended behavior by using the proper column names and string formatting."
        ],
        "rules": [
            "1) When the question mentions \"category\": \"category\" actually means \"product_category_code\" in the Products table. 2) When the question mentions \"price\": \"price\" actually means \"typical_buying_price\" in the Products table. 3) When filtering for category \"Spices\": use the exact string literal \"Spices\" with double quotes. 4) When comparing typical buying price to 1000: use the greater than comparison (above 1000). 5) When counting products: count using the canonical key from the Products table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'Spices' AND price > 1000;",
            "SELECT COUNT(*) \nFROM Products \nWHERE product_category_code = \"Spices\" \nAND CAST(typical_buying_price AS NUMERIC) > 1000"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM Products WHERE product_category_code = \"Spices\" AND CAST(typical_buying_price AS NUMERIC) > 1000"
        ]
    },
    "4119": {
        "db_id": "film_rank",
        "question": "Return the low and high estimates for all film markets.",
        "ground_truth": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "amends": [
            "Do reference table `film_market_estimation` instead of `film_markets` and do use column names `Low_Estimate` and `High_Estimate` instead of `low_estimate` and `high_estimate`. Do remove the `WHERE market_id = 1` filter instead of keeping it. The amended query now correctly selects from the appropriate table with proper column casing and without the unnecessary filter, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"low and high estimates for all film markets\": use table \"film_market_estimation\" instead of \"film_markets\". 2) When selecting estimate columns: use exact column names \"Low_Estimate\" and \"High_Estimate\" with proper casing. 3) When the question asks for \"all film markets\": do not apply any WHERE filter conditions, return all records from the table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT low_estimate, high_estimate FROM film_markets WHERE market_id = 1",
            "SELECT Low_Estimate, High_Estimate FROM film_market_estimation;"
        ],
        "rule_sql": [
            "SELECT Low_Estimate, High_Estimate FROM film_market_estimation;"
        ]
    },
    "1983": {
        "db_id": "phone_market",
        "question": "What is the carrier of the most expensive phone?",
        "ground_truth": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "amends": [
            "Do reference the table as `phone` instead of `phones` to match the correct table name. Do capitalize column names as `Carrier` and `Price` instead of lowercase `carrier` and `price` to align with the proper column naming convention. The amended query now correctly retrieves the carrier from the phone table ordered by price in descending order with a single result limit, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about \"carrier\": use the exact column name \"Carrier\" from the phone table. 2) When the question asks about \"most expensive phone\": order by the exact column name \"Price\" in descending order to find the highest value. 3) When the question asks for a single result: limit the output to only the top row after ordering. 4) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for column names like \"Carrier\" and \"Price\". 5) When handling table references: use the exact table name \"phone\" instead of any variations like \"phones\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT carrier FROM phones ORDER BY price DESC LIMIT 1;",
            "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT \"Carrier\" FROM \"phone\" ORDER BY \"Price\" DESC LIMIT 1;"
        ]
    },
    "1866": {
        "db_id": "wrestler",
        "question": "Show teams that have suffered more than three eliminations.",
        "ground_truth": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
        "amends": [
            "Do select `Team` instead of `team_name` and use `HAVING COUNT(*) > 3` instead of `WHERE eliminations > 3`. Do change the source table to `elimination` instead of `teams` and add `GROUP BY Team` instead of omitting it. The amended query now correctly counts eliminations per team using aggregation rather than relying on a pre-calculated eliminations column."
        ],
        "rules": [
            "1) When the question asks about teams with eliminations: use the \"Elimination\" table instead of \"teams\" table. 2) When counting eliminations per team: group by the exact column \"Team\" from the Elimination table. 3) When filtering for teams with more than three eliminations: use a count condition (COUNT(*) > 3) rather than a direct column comparison. 4) When selecting team names: use the exact column \"Team\" from the Elimination table instead of \"team_name\". 5) When organizing results by team: ensure the output includes only the \"Team\" column as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE eliminations > 3;",
            "SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(*) > 3"
        ],
        "rule_sql": [
            "SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;"
        ]
    },
    "1589": {
        "db_id": "customers_and_invoices",
        "question": "Show the account name, id and the number of transactions for each account.",
        "ground_truth": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "amends": [
            "Do specify `T2.account_name` and `T1.account_id` with table aliases instead of unqualified `account_name` and `account_id`. Do add the `Accounts AS T2` table with a `JOIN` on `T1.account_id = T2.account_id` instead of querying only the `transactions` table. Do use the correct table name `Financial_transactions AS T1` instead of `transactions`. The amended query now correctly joins the transaction and account tables to retrieve account names while maintaining the original grouping logic."
        ],
        "rules": [
            "1) When answering about \"account name, id and the number of transactions for each account\": make sure the output order: T2.account_name, T1.account_id, COUNT(*) 2) When the question mentions \"account name\": \"account name\" actually means \"T2.account_name in schema\" 3) When the question mentions \"account id\": \"account id\" actually means \"T1.account_id in schema\" 4) When combining Financial_transactions AS T1 and Accounts AS T2 for shared entities: link rows where the canonical keys are equal exactly as shown in the amends (T1.account_id = T2.account_id); keep only matching pairs (inner match) 5) When the question asks for \"number of transactions for each account\": compute the count of transactions using the canonical key T1.account_id per account group 6) When the question says \"per account\"/\"for each account\": organize results by T1.account_id and compute requested aggregates per group"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT account_name, account_id, COUNT(*) FROM transactions GROUP BY account_id",
            "SELECT T2.account_name, T1.account_id, COUNT(*) AS number_of_transactions\nFROM Financial_Transactions AS T1\nJOIN Accounts AS T2 ON T1.account_id = T2.account_id\nGROUP BY T1.account_id, T2.account_name"
        ],
        "rule_sql": [
            "SELECT T2.account_name, T1.account_id, COUNT(*) \nFROM Financial_Transactions AS T1 \nINNER JOIN Accounts AS T2 ON T1.account_id = T2.account_id \nGROUP BY T1.account_id, T2.account_name \nORDER BY T2.account_name, T1.account_id"
        ]
    },
    "335": {
        "db_id": "product_catalog",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "ground_truth": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "amends": [
            "Do reference `catalog_entry_name` instead of `name` and use `Catalog_Contents` instead of `products` as the table source. Do filter on `price_in_dollars > 700` instead of `price > 700` while maintaining the same `capacity` column selection. The amended query now correctly references the actual table and column names to match RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for \"name\" of products: use \"catalog_entry_name\" from table \"Catalog_Contents\" instead of \"name\". 2) When the question asks about products: use table \"Catalog_Contents\" instead of \"products\". 3) When filtering on price greater than 700 USD: use column \"price_in_dollars > 700\" instead of \"price > 700\". 4) When selecting capacity: use column \"capacity\" from table \"Catalog_Contents\" as specified. 5) When answering about products with price greater than 700: make sure the output order is \"catalog_entry_name\" followed by \"capacity\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, capacity FROM products WHERE price > 700",
            "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700"
        ],
        "rule_sql": [
            "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name, capacity;"
        ]
    },
    "4877": {
        "db_id": "school_player",
        "question": "What are the teams that have the 5 oldest players?",
        "ground_truth": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "amends": [
            "Do select `Team` instead of `team_name` from the `player` table instead of `players`. Do order by `Age DESC` instead of `age ASC` while maintaining the `LIMIT 5` clause. The amended query now correctly retrieves the top 5 teams based on descending age order from the player table."
        ],
        "rules": [
            "1) When the question asks for teams with the oldest players: select \"Team\" from the \"player\" table. 2) When ordering by player age to find oldest players: order by \"Age\" in descending order. 3) When the question specifies the top 5 oldest players: limit the results to 5 rows after ordering by \"Age\" DESC."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team_name FROM players ORDER BY age ASC LIMIT 5;",
            "SELECT Team FROM player ORDER BY Age DESC LIMIT 5;"
        ],
        "rule_sql": [
            "SELECT Team FROM player ORDER BY Age DESC LIMIT 5;"
        ]
    },
    "2985": {
        "db_id": "sakila_1",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "ground_truth": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%';"
        ],
        "rule_sql": [
            "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"
        ]
    },
    "5248": {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "ground_truth": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM songs WHERE title = 'Le Pop';"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT v.Type) \nFROM Vocals v\nJOIN Songs s ON v.SongId = s.SongId\nWHERE s.Title = 'Le Pop'"
        ]
    },
    "1420": {
        "db_id": "college_2",
        "question": "Find the name of the courses that do not have any prerequisite?",
        "ground_truth": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "amends": [
            "Do select `title` instead of `name` and change the table reference to `course` instead of `courses`. Do use a `NOT IN` subquery filtering by `course_id` from the `prereq` table instead of checking `prerequisite_id IS NOT NULL`. Do remove the direct null check condition and instead implement the exclusion logic through the correlated subquery approach. The amended query now correctly identifies courses that have no prerequisites by checking which course_ids are not present in the prereq table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"courses that do not have any prerequisite\": make sure the output order: title from the course table. 2) When the question mentions \"courses\": use the exact table name \"course\" instead of \"courses\". 3) When the question mentions \"name\": use the exact column \"title\" from the course table instead of \"name\". 4) When identifying courses without prerequisites: check which course_id values from the course table are not present in the prereq table's course_id column. 5) When combining course and prereq tables for exclusion logic: use a NOT IN subquery that filters by course_id from the prereq table instead of checking prerequisite_id IS NOT NULL."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM courses WHERE prerequisite_id IS NOT NULL;",
            "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        ],
        "rule_sql": [
            "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq) ORDER BY title;"
        ]
    },
    "342": {
        "db_id": "product_catalog",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "ground_truth": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "amends": [
            "Do query from `catalog_contents` table instead of `products` table while keeping the same `SELECT catalog_entry_name` column and `WHERE next_entry_id > 8` filter condition, maintaining the identical selection criteria and output structure but correcting the source table reference to match the intended data source. The amended query now correctly retrieves catalog entry names from the catalog_contents table instead of the incorrect products table."
        ],
        "rules": [
            "1) When answering about \"catalog entry names of products with next entry ID above 8\": make sure to query from the \"catalog_contents\" table instead of the \"products\" table. 2) When selecting catalog entry names: use the exact column \"catalog_entry_name\" from the \"catalog_contents\" table. 3) When filtering for next entry ID above 8: apply the condition \"next_entry_id > 8\" to the \"catalog_contents\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT catalog_entry_name FROM products WHERE next_entry_id > 8",
            "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > 8"
        ],
        "rule_sql": [
            "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > 8"
        ]
    },
    "984": {
        "db_id": "university_basketball",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "ground_truth": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "amends": [
            "Do select `founded` instead of `MAX(founded_year)` to return the actual value rather than an aggregate. Do query from `university` instead of `schools` to use the correct table source. Do filter on `affiliation != 'Public'` instead of `type != 'public'` to use the proper column name and value case. Do add `ORDER BY founded DESC LIMIT 1` instead of omitting ordering and limiting to achieve the same maximum value result through different logic. The amended query now correctly returns the most recent founding year from non-public universities."
        ],
        "rules": [
            "1) When answering about \"founded year of the non public school\": make sure the output order: founded. 2) When the question mentions \"non public school\": \"non public school\" actually means \"affiliation != 'Public' in schema\". 3) When the question mentions \"most recently\": rank rows by founded in descending order and keep the first 1 row. 4) When querying from the correct table source: use table \"university\" instead of \"schools\". 5) When filtering for non-public institutions: use the exact condition affiliation != 'Public' with exact case and punctuation."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(founded_year) FROM schools WHERE type != 'public';",
            "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Founded FROM university WHERE affiliation != 'Public' ORDER BY Founded DESC LIMIT 1"
        ]
    },
    "4383": {
        "db_id": "tracking_grants_for_research",
        "question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?",
        "ground_truth": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do join `Projects AS T1` and `Project_outcomes AS T2` on `T1.project_id = T2.project_id` instead of querying the `outcomes` table directly. Do select `T1.organisation_id` instead of `organization_id` and use `count(*)` without an alias instead of `COUNT(*) as outcome_count`. Do group by `T1.organisation_id` instead of `organization_id` and order by `count(*) DESC` instead of `outcome_count DESC`. The amended query now correctly counts project outcomes by organization through proper table relationships instead of directly counting from an outcomes table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"organization with maximum number of outcomes\": make sure the output order: T1.organisation_id, count(*) 2) When combining Projects (T1) and Project_outcomes (T2): link rows where T1.project_id = T2.project_id and keep only matching pairs (inner match) 3) When counting outcomes per organization: compute the number of rows using the join relationship between Projects and Project_outcomes tables 4) When the question asks for \"maximum number of outcomes\": rank rows by count(*) in descending direction and keep the first 1 row 5) When the question mentions \"organization id\": \"organization id\" actually means \"T1.organisation_id\" in schema"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT organization_id, COUNT(*) as outcome_count \nFROM outcomes \nGROUP BY organization_id \nORDER BY outcome_count DESC \nLIMIT 1;",
            "SELECT T1.organisation_id, count(*)\nFROM Projects AS T1\nJOIN Project_Outcomes AS T2 ON T1.project_id = T2.project_id\nGROUP BY T1.organisation_id\nORDER BY count(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.organisation_id, COUNT(*) \nFROM Projects T1\nINNER JOIN Project_Outcomes T2 ON T1.project_id = T2.project_id\nGROUP BY T1.organisation_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "6108": {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made the order of the largest amount of goods.",
        "ground_truth": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "amends": [
            "Do add `JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id` and `JOIN order_items AS t3 ON t2.order_id = t3.order_id` instead of querying only the customers table. Do add `WHERE t3.order_quantity = (SELECT max(order_quantity) FROM order_items)` instead of ordering by `order_amount DESC LIMIT 1`. Do change the SELECT list to `t1.customer_name` instead of `customer_name` and add table alias `t1` for the customers table. Do remove `ORDER BY order_amount DESC LIMIT 1` instead of keeping it, as the subquery with max order_quantity provides the correct filtering logic. The amended query now correctly identifies customers with the maximum order quantity through proper table joins and subquery filtering."
        ],
        "rules": [
            "1) When answering about \"the customer who made the order of the largest amount of goods\": make sure to join table \"customers\" as T1 with \"customer_orders\" as T2 using T1.customer_id = T2.customer_id. 2) When combining customer orders with order items: join T2 with \"order_items\" as T3 using T2.order_id = T3.order_id. 3) When finding the largest amount of goods: use T3.order_quantity = (SELECT max(order_quantity) FROM order_items) instead of ordering and limiting. 4) When selecting the customer name: use T1.customer_name as the output column. 5) When the question asks for the customer with maximum order quantity: do not use ORDER BY order_amount DESC LIMIT 1 as the subquery with max order_quantity provides the correct filtering logic."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT customer_name FROM customers ORDER BY order_amount DESC LIMIT 1;",
            "SELECT t1.customer_name\nFROM Customers AS t1\nJOIN Customer_Orders AS t2 ON t1.customer_id = t2.customer_id\nJOIN Order_Items AS t3 ON t2.order_id = t3.order_id\nWHERE t3.order_quantity = (SELECT MAX(order_quantity) FROM Order_Items)"
        ],
        "rule_sql": [
            "SELECT T1.customer_name \nFROM Customers AS T1\nJOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id\nJOIN Order_Items AS T3 ON T2.order_id = T3.order_id\nWHERE T3.order_quantity = (SELECT MAX(order_quantity) FROM Order_Items)"
        ]
    },
    "2577": {
        "db_id": "inn_1",
        "question": "Which room has the largest number of reservations?",
        "ground_truth": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
        "amends": [
            "Do select `T2.roomName` instead of `room_id` and `reservation_count`. Do join `Rooms AS T2` instead of querying only the `reservations` table. Do use `JOIN` with `ON T1.Room = T2.RoomId` instead of no join condition. Do group by `T1.Room` instead of `room_id`. Do order by `count(*) DESC` instead of `reservation_count ASC`. Do remove the alias `reservation_count` instead of keeping it. The amended query now correctly retrieves the room name with the highest reservation count by joining the reservations and rooms tables."
        ],
        "rules": [
            "1) When answering about \"which room has the largest number of reservations\": make sure the output order: T2.roomName. 2) When the question mentions \"room\": \"room\" actually means \"T2.roomName in schema\". 3) When combining T1 and T2 for shared entities: link rows where T1.Room = T2.RoomId exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question asks for \"count of reservations\": compute the number of rows using the canonical key token for reservations (e.g., T1.Room). 5) When the question mentions \"largest number\": rank rows by count(*) in descending direction and keep the first 1 row. 6) When the question says \"by room\": organize results by T1.Room and compute requested aggregates per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT room_id, COUNT(*) as reservation_count FROM reservations GROUP BY room_id ORDER BY reservation_count ASC LIMIT 1;",
            "SELECT T2.roomName\nFROM Reservations AS T1\nJOIN Rooms AS T2 ON T1.Room = T2.RoomId\nGROUP BY T1.Room\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T2.roomName\nFROM Reservations T1\nINNER JOIN Rooms T2 ON T1.Room = T2.RoomId\nGROUP BY T1.Room\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "5697": {
        "db_id": "dorm_1",
        "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "ground_truth": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "amends": [
            "Do use `student_capacity` instead of `capacity` for the column name. Do use `gender` instead of `gender` for the column name. Do use `dorm` instead of `dorms` for the table name. Do use `dorm_name` instead of `name` for the column name in the WHERE clause. Do keep the `LIKE '%Donor%'` filter instead of changing it. The amended query now correctly references the schema with proper table and column names while maintaining the same filtering logic."
        ],
        "rules": [
            "1) When the question asks about \"student capacity\": use the exact column name \"student_capacity\" from the Dorm table. 2) When the question asks about \"type of gender\": use the exact column name \"gender\" from the Dorm table. 3) When the question mentions \"dorm whose name has the phrase Donor\": filter using \"dorm_name\" LIKE '%Donor%' with exact case and spacing. 4) When querying the dorm table: use the exact table name \"dorm\" (not \"dorms\"). 5) When selecting output columns: maintain the order of student_capacity first, then gender as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT capacity, gender FROM dorms WHERE name LIKE '%Donor%';",
            "SELECT student_capacity, gender FROM Dorm WHERE dorm_name LIKE '%Donor%'"
        ],
        "rule_sql": [
            "SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
        ]
    },
    "6449": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the budget type code and description and the corresponding document id.",
        "ground_truth": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "amends": [
            "Do select `T2.budget_type_code` and `T2.budget_type_description` instead of `budget_type_code` and `description`. Do use `Documents_with_expenses AS T1` and `Ref_budget_codes AS T2` as source tables instead of `budget_types` and `documents`. Do perform an `INNER JOIN` on `T1.budget_type_code = T2.budget_type_code` instead of joining `budget_types.id = documents.budget_type_id`. The amended query now correctly matches the RIGHT_SQL's behavior by using the appropriate table aliases and join condition."
        ],
        "rules": [
            "1) When the question asks for \"budget type code and description\": use the exact column tokens \"T2.budget_type_code\" and \"T2.budget_type_description\" instead of generic \"budget_type_code\" and \"description\". 2) When combining tables for this question: use \"Documents_with_expenses AS T1\" and \"Ref_budget_codes AS T2\" as source tables. 3) When joining T1 and T2: link rows where \"T1.budget_type_code = T2.budget_type_code\" exactly and keep only matching pairs (inner match). 4) When answering about \"budget type code and description and the corresponding document id\": make sure the output order: T2.budget_type_code, T2.budget_type_description, T1.document_id."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT budget_type_code, description, document_id FROM budget_types JOIN documents ON budget_types.id = documents.budget_type_id",
            "SELECT T2.Budget_Type_Code, T2.Budget_Type_Description, T1.Document_ID\nFROM Documents_with_Expenses AS T1\nINNER JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code;"
        ],
        "rule_sql": [
            "SELECT T2.Budget_Type_Code, T2.Budget_Type_Description, T1.Document_ID\nFROM Documents_with_Expenses AS T1\nINNER JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code\nORDER BY T2.Budget_Type_Code, T2.Budget_Type_Description, T1.Document_ID"
        ]
    },
    "6038": {
        "db_id": "game_1",
        "question": "What are the ids of all students who played video games and sports?",
        "ground_truth": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "amends": [
            "Do select `StuID` from `Sportsinfo` instead of `student_id` from `students`. Do use `INTERSECT` to find students who appear in both tables instead of filtering with `WHERE activity = 'video games' OR activity = 'sports'`. Do query from `Sportsinfo` and `Plays_games` tables instead of just the `students` table. The amended query now correctly identifies students who participate in both sports and video games by intersecting the results from two separate tables, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for students who played both video games and sports: use INTERSECT to find students who appear in both Sportsinfo and Plays_games tables instead of using OR conditions. 2) When selecting student identifiers: use StuID from Sportsinfo instead of student_id from students. 3) When combining data from multiple tables: query from both Sportsinfo and Plays_games tables instead of just the students table. 4) When identifying students who participate in multiple activities: find the intersection of students from separate activity-specific tables rather than filtering a single activity column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT student_id FROM students WHERE activity = 'video games' OR activity = 'sports';",
            "SELECT StuID FROM SportsInfo\nINTERSECT\nSELECT StuID FROM Plays_Games"
        ],
        "rule_sql": [
            "SELECT StuID FROM SportsInfo\nINTERSECT\nSELECT StuID FROM Plays_Games;"
        ]
    },
    "2489": {
        "db_id": "movie_1",
        "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?",
        "ground_truth": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title",
        "amends": [
            "Do select `title` and `year` columns instead of `director`, `title`, and `release_date`. Do use `JOIN` between two `Movie` table aliases `T1` and `T2` instead of a single `movies` table. Do add join condition `T1.director = T2.director` instead of grouping by `director`. Do move the duplicate detection logic to `WHERE T1.title != T2.title` filter instead of `HAVING COUNT(*) > 1`. Do remove `GROUP BY` and `HAVING` clauses instead of keeping them. Do remove `ORDER BY` clause instead of sorting by `director` and `release_date`. The amended query now correctly identifies movies by the same director with different titles rather than grouping and counting duplicates."
        ],
        "rules": [
            "1) When answering about movies directed by directors with more than one movie: select \"title\" and \"year\" columns from the Movie table. 2) When identifying directors with multiple movies: use two aliases T1 and T2 for the Movie table and join them where T1.director = T2.director. 3) When ensuring different movies by the same director: filter where T1.title != T2.title to find directors with multiple distinct movies. 4) When the question asks for titles and release dates of movies: output the title and year columns without grouping or ordering clauses. 5) When handling duplicate detection: do not use GROUP BY or HAVING clauses, instead use the join condition with title inequality to identify directors with multiple movies."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT director, title, release_date FROM movies GROUP BY director HAVING COUNT(*) > 1 ORDER BY director, release_date;",
            "SELECT T1.title, T1.year\nFROM Movie T1\nJOIN Movie T2 ON T1.director = T2.director\nWHERE T1.title != T2.title"
        ],
        "rule_sql": [
            "SELECT T1.title, T1.year FROM Movie T1 JOIN Movie T2 ON T1.director = T2.director WHERE T1.title != T2.title"
        ]
    },
    "2397": {
        "db_id": "candidate_poll",
        "question": "Return the poll resource associated with the most candidates.",
        "ground_truth": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `poll_source` instead of `*` and change the source table to `candidate` instead of `polls`. Do add `GROUP BY poll_source` instead of omitting it, and use `count(*)` instead of `COUNT(candidates)` for the aggregate function. Do remove the incorrect column reference `candidates` and instead count all rows in each group. The amended query now correctly identifies the poll source with the most candidates by grouping on poll_source and counting records per group, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"poll resource associated with the most candidates\": make sure the output order: poll_source. 2) When the question asks for \"count of candidates\": compute the number of rows using count(*) grouped by poll_source. 3) When the question mentions \"most candidates\": rank groups by count(*) in descending order and keep the first 1 row. 4) When grouping by poll_source: organize results by poll_source and compute count(*) per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM polls ORDER BY COUNT(candidates) DESC LIMIT 1;",
            "SELECT Poll_Source FROM candidate GROUP BY Poll_Source ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT Poll_Source\nFROM candidate\nGROUP BY Poll_Source\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "232": {
        "db_id": "book_2",
        "question": "How many distinct publication dates are there in our record?",
        "ground_truth": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
        "amends": [
            "Do use `COUNT(DISTINCT Publication_Date)` instead of `COUNT(publication_date)` to count unique dates rather than all non-null values. Do reference the correct table name `publication` instead of `publications` to ensure the query targets the proper data source. The amended query now correctly counts distinct publication dates from the intended table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When counting distinct values of a date field: use COUNT(DISTINCT \"Publication_Date\") to count unique dates rather than all non-null values. 2) When referencing the publication table: use the exact table name \"publication\" instead of \"publications\" to target the correct data source."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(publication_date) FROM publications;",
            "SELECT COUNT(DISTINCT Publication_Date) FROM publication;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT \"Publication_Date\") FROM \"publication\";"
        ]
    },
    "4154": {
        "db_id": "film_rank",
        "question": "List the studios which average gross is above 4500000.",
        "ground_truth": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "amends": [
            "Do use `HAVING` clause with `avg(Gross_in_dollar) >= 4500000` instead of `WHERE` clause with `avg_gross > 4500000` since aggregate filters must be in HAVING. Do reference column `Gross_in_dollar` instead of `gross` for the average calculation. Do use table alias `film` instead of `movies` as the source table. Do select only `Studio` instead of both `studio` and `AVG(gross)` since the HAVING clause handles the aggregate filtering without needing to display it. Do use `>=` comparison instead of `>` for the threshold condition. The amended query now correctly filters aggregated results using HAVING instead of WHERE and matches the right SQL's behavior."
        ],
        "rules": [
            "1) When filtering on aggregated results like average gross: use HAVING clause instead of WHERE clause. 2) When calculating average gross: use column \"Gross_in_dollar\" instead of \"gross\". 3) When referencing the source table: use table alias \"film\" instead of \"movies\". 4) When selecting output columns for studios with average gross above threshold: select only \"Studio\" column without displaying the average value. 5) When comparing against threshold value 4500000: use >= comparison instead of > for inclusive filtering."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT studio, AVG(gross) as avg_gross FROM movies GROUP BY studio WHERE avg_gross > 4500000;",
            "SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) >= 4500000"
        ],
        "rule_sql": [
            "SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) >= 4500000"
        ]
    },
    "6935": {
        "db_id": "tracking_orders",
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "ground_truth": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "amends": [
            "Do use column name `invoice_details` instead of wildcard `*` in the SELECT list. Do change the WHERE condition from `AND` to `OR` between the date filters instead of using `AND`, which would incorrectly return no results since dates cannot be both before 1989-09-03 and after 2007-12-25 simultaneously. Do use double quotes around date literals instead of single quotes. The amended query now correctly returns invoice details for dates either before September 3, 1989 or after December 25, 2007, matching the intended behavior."
        ],
        "rules": [
            "1) When selecting distinct invoice details: use the exact column name \"invoice_details\" instead of wildcard * in the output. 2) When filtering by dates before 1989-09-03 or after 2007-12-25: use OR logic between the date conditions instead of AND to include dates that satisfy either condition. 3) When using date literals in the schema: wrap them in double quotes exactly as \"1989-09-03\" and \"2007-12-25\" instead of single quotes. 4) When the question asks for distinct details: ensure the result contains only unique values from the \"invoice_details\" column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT * FROM invoices WHERE InvoiceDate < '1989-09-03' AND InvoiceDate > '2007-12-25';",
            "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
        ],
        "rule_sql": [
            "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
        ]
    },
    "227": {
        "db_id": "book_2",
        "question": "Please show the most common publication date.",
        "ground_truth": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select only `Publication_Date` instead of including both `publication_date` and `COUNT(*) as count`. Do change the table reference to `publication` instead of `publications`. Do order by `COUNT(*) DESC` instead of `count ASC` to find the most frequent date rather than the least frequent. Do remove the explicit count column from the SELECT list instead of including it, as it's only needed for ordering purposes. The amended query now correctly identifies the most frequently occurring publication date by counting occurrences in descending order."
        ],
        "rules": [
            "1) When answering about \"most common publication date\": make sure the output order: Publication_Date only. 2) When the question mentions \"most common\": rank rows by COUNT(*) in descending order and keep the first 1 row. 3) When counting occurrences of publication dates: compute the number of rows using the exact token Publication_Date. 4) When choosing table names: use table \"publication\" instead of \"publications\". 5) When ordering for most frequent values: order by COUNT(*) DESC instead of ASC to find the highest frequency. 6) When the count column is only needed for ordering: do not include it in the final output columns."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT publication_date, COUNT(*) as count FROM publications GROUP BY publication_date ORDER BY count ASC LIMIT 1;",
            "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
    },
    "2778": {
        "db_id": "election",
        "question": "Return the names of all counties sorted by population in ascending order.",
        "ground_truth": "SELECT County_name FROM county ORDER BY Population ASC",
        "amends": [
            "Do select `County_name` instead of `name` and order by `Population ASC` instead of `population DESC`. Do reference table `county` instead of `counties`. The amended query now correctly selects the county name column and sorts by population in ascending order as specified in the target query."
        ],
        "rules": [
            "1) When the question asks for county names: use the exact column token \"County_name\" from the county table. 2) When the question specifies sorting by population in ascending order: order the results by the \"Population\" column in ascending direction. 3) When referencing the county table: use the exact table name \"county\" instead of any variations like \"counties\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM counties ORDER BY population DESC;",
            "SELECT County_name FROM county ORDER BY Population ASC;"
        ],
        "rule_sql": [
            "SELECT County_name FROM county ORDER BY Population ASC;"
        ]
    },
    "1546": {
        "db_id": "insurance_and_eClaims",
        "question": "Find the customer who started a policy most recently.",
        "ground_truth": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "amends": [
            "Do select `t2.customer_details` instead of `*` to retrieve specific customer information rather than all columns. Do add `FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id` instead of just `FROM customers` to join the policies and customers tables on the customer_id relationship. Do add `WHERE t1.start_date = (SELECT max(start_date) FROM policies)` instead of `ORDER BY policy_start_date ASC LIMIT 1` to filter for the most recent policy start date using a subquery rather than sorting and limiting. Do remove `ORDER BY` and `LIMIT` clauses since the maximum date filter makes them unnecessary. The amended query now correctly identifies customers with the most recent policy start date rather than just the earliest customer record."
        ],
        "rules": [
            "1) When answering about \"customer who started a policy most recently\": make sure the output order: t2.customer_details. 2) When combining policies and customers tables: link rows where t1.customer_id = t2.customer_id and keep only matching pairs (inner match). 3) When finding the most recent policy start date: filter for rows where t1.start_date equals the maximum start_date from the policies table. 4) When retrieving customer information: select t2.customer_details instead of all columns."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM customers ORDER BY policy_start_date ASC LIMIT 1;",
            "SELECT t2.Customer_Details \nFROM Policies AS t1 \nJOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID \nWHERE t1.Start_Date = (SELECT MAX(Start_Date) FROM Policies)"
        ],
        "rule_sql": [
            "SELECT t2.customer_details \nFROM Policies t1 \nINNER JOIN Customers t2 ON t1.customer_id = t2.customer_id \nWHERE t1.start_date = (SELECT MAX(start_date) FROM Policies)"
        ]
    },
    "2724": {
        "db_id": "storm_record",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "ground_truth": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "amends": [
            "Do select `T2.region_name` from the `region` table instead of `region_name` from the `storms` table. Do use a multi-table join structure with `affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id` instead of querying a single `storms` table. Do filter with `T3.number_deaths >= 10` on the `storm` table instead of `deaths > 10` on the `storms` table. The amended query now correctly models the relationship between storms, affected regions, and region data through proper joins and accurately filters based on the death count attribute in the appropriate table."
        ],
        "rules": [
            "1) When answering about \"region names affected by storms\": make sure the output order: T2.region_name 2) When combining tables for storm-affected regions: link rows where T1.region_id = T2.region_id and T1.storm_id = T3.storm_id; keep only matching pairs (inner match) 3) When filtering for storms with at least 10 deaths: use T3.number_deaths >= 10 instead of deaths > 10 4) When the question mentions \"region names\": \"region names\" actually means \"T2.region_name in schema\" 5) When the question mentions \"storm with a number of deaths\": \"number of deaths\" actually means \"T3.number_deaths in schema\""
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT region_name FROM storms WHERE deaths > 10;",
            "SELECT DISTINCT T2.Region_name \nFROM affected_region AS T1 \nJOIN region AS T2 ON T1.Region_id = T2.Region_id \nJOIN storm AS T3 ON T1.Storm_ID = T3.Storm_ID \nWHERE T3.Number_Deaths >= 10"
        ],
        "rule_sql": [
            "SELECT T2.region_name \nFROM affected_region T1 \nINNER JOIN region T2 ON T1.Region_id = T2.Region_id \nINNER JOIN storm T3 ON T1.Storm_ID = T3.Storm_ID \nWHERE T3.Number_Deaths >= 10 \nORDER BY T2.region_name"
        ]
    },
    "6602": {
        "db_id": "train_station",
        "question": "Show the names and total passengers for all train stations not in London.",
        "ground_truth": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'",
        "amends": [
            "Do reference table `station` instead of `train_stations` in the FROM clause. Do use filter `LOCATION != 'London'` instead of `city = 'London'` in the WHERE clause. The amended query now correctly filters for stations not located in London rather than those specifically in London, matching the intended behavior."
        ],
        "rules": [
            "1) When referencing the train stations table: use the exact table name \"station\" instead of \"train_stations\". 2) When filtering for stations not in London: use the column \"LOCATION\" with the condition != 'London' instead of using a \"city\" column with = 'London'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, total_passengers FROM train_stations WHERE city = 'London';",
            "SELECT Name, Total_Passengers FROM station WHERE Location != 'London';"
        ],
        "rule_sql": [
            "SELECT Name, Total_Passengers FROM station WHERE Location != 'London';"
        ]
    },
    "6253": {
        "db_id": "ship_1",
        "question": "What are the names of ships, ordered by year they were built and their class?",
        "ground_truth": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
        "amends": [
            "Do select only `name` instead of including `year` and `class` in the SELECT list. Do reference table `ship` instead of `ships` as the FROM source. Do order by `built_year` and `CLASS` instead of `year` and `class`, and remove the explicit sort direction specifications instead of keeping `DESC` and `ASC`. The amended query now correctly retrieves only ship names ordered by built year and class from the ship table."
        ],
        "rules": [
            "1) When selecting ship names ordered by built year and class: include only \"name\" in the output columns, not \"built_year\" or \"CLASS\". 2) When referencing the ship table: use the exact table name \"ship\" instead of \"ships\". 3) When ordering by built year and class: use the exact column names \"built_year\" and \"CLASS\" instead of \"year\" and \"class\". 4) When the question does not specify sort direction: do not include explicit ASC or DESC direction specifications in the ordering."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, year, class FROM ships ORDER BY year DESC, class ASC;",
            "SELECT Name FROM Ship ORDER BY Built_Year, Class;"
        ],
        "rule_sql": [
            "SELECT name FROM ship ORDER BY built_year, CLASS"
        ]
    },
    "3757": {
        "db_id": "program_share",
        "question": "What is the list of program origins ordered alphabetically?",
        "ground_truth": "SELECT origin FROM program ORDER BY origin",
        "amends": [
            "Do select `origin` from `program` instead of `programs` as the table source. Do order by `origin` instead of `program_name` which is not present in the selected columns. The amended query now correctly retrieves origin values from the program table ordered by origin itself, matching the intended behavior."
        ],
        "rules": [
            "1) When selecting from the program table: use the exact table name \"program\" not \"programs\". 2) When ordering program origins alphabetically: order by the \"origin\" column itself, not by other columns like \"program_name\". 3) When answering about program origins: make sure the output order is alphabetical by the \"origin\" column values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT origin FROM programs ORDER BY program_name ASC;",
            "SELECT origin FROM program ORDER BY origin;"
        ],
        "rule_sql": [
            "SELECT DISTINCT Origin FROM program ORDER BY Origin;"
        ]
    },
    "2240": {
        "db_id": "machine_repair",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "ground_truth": "SELECT Name FROM technician WHERE Team != \"NYY\"",
        "amends": [
            "Do use `Name` instead of `name` for the column selection to match the correct case. Do use `technician` instead of `technicians` for the table name to reference the correct table. Do use `!=` instead of `=` in the WHERE clause to filter for records where Team is not equal to 'NYY' instead of equal to 'NYY'. Do use double quotes around 'NYY' instead of single quotes for string literal consistency. The amended query now correctly selects names from the technician table where the team is not NYY, matching the intended behavior."
        ],
        "rules": [
            "1) When selecting from the technician table: use the exact column name \"Name\" (with capital N) instead of \"name\" to match the schema's case sensitivity. 2) When filtering for team values: use the exact literal \"NYY\" (with double quotes) instead of 'NYY' to maintain string literal consistency. 3) When the question asks for technicians whose team is not 'NYY': use the inequality operator (!=) instead of equality (=) to filter for records where Team is not equal to \"NYY\". 4) When referencing the technician table: use the exact table name \"technician\" (singular) instead of \"technicians\" (plural) to match the correct schema table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM technicians WHERE team = 'NYY';",
            "SELECT Name FROM technician WHERE Team != \"NYY\";"
        ],
        "rule_sql": [
            "SELECT Name FROM technician WHERE Team != \"NYY\";"
        ]
    },
    "3613": {
        "db_id": "music_1",
        "question": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "ground_truth": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "amends": [
            "Do reference `song_name` instead of `name` and use table `song` instead of `songs`. Do use `min(rating)` instead of `MIN(rating)` and filter on `languages = 'english'` instead of `language = 'English'` in the subquery. The amended query now correctly references the intended column and table names with proper case handling for the language filter."
        ],
        "rules": [
            "1) When the question asks for song names: use the exact column token \"song_name\" from table \"song\" instead of \"name\" from \"songs\". 2) When filtering for songs in English: use the exact literal value 'english' (lowercase) with column \"languages\" instead of 'English' with \"language\". 3) When computing the minimum rating: use the function \"min(rating)\" (lowercase) instead of \"MIN(rating)\" (uppercase). 4) When comparing ratings: ensure the comparison uses \"rating < (subquery)\" to find songs with ratings below the minimum rating of English songs."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM songs WHERE rating < (SELECT MIN(rating) FROM songs WHERE language = 'English')",
            "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')"
        ],
        "rule_sql": [
            "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')"
        ]
    },
    "1183": {
        "db_id": "election_representative",
        "question": "What are the names of representatives in descending order of votes?",
        "ground_truth": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
        "amends": [
            "Do add table `election AS T1` and `representative AS T2` with a `JOIN` on `T1.Representative_ID = T2.Representative_ID` instead of querying only the `representatives` table. Do select `T2.Name` instead of just `name` to specify the table source. Do change the sort direction to `DESC` instead of `ASC` to order by votes in descending order. The amended query now correctly joins the election and representative tables to retrieve representative names associated with election votes and sorts them in descending vote order."
        ],
        "rules": [
            "1) When answering about \"names of representatives in descending order of votes\": make sure the output order: T2.Name. 2) When combining election and representative tables: link rows where T1.Representative_ID = T2.Representative_ID and keep only matching pairs (inner match). 3) When the question mentions \"descending order of votes\": rank rows by votes in descending direction. 4) When selecting representative names: use T2.Name instead of just name to specify the table source."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM representatives ORDER BY votes ASC;",
            "SELECT T2.Name \nFROM election AS T1 \nJOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID \nORDER BY T1.Votes DESC"
        ],
        "rule_sql": [
            "SELECT T2.Name FROM election T1 INNER JOIN representative T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY T1.Votes DESC"
        ]
    },
    "3905": {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "ground_truth": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "amends": [
            "Do add `JOIN patient AS T2 ON T1.patient = T2.ssn` instead of querying only the `appointments` table. Do use the alias `T1` for the `appointment` table instead of referencing it directly as `appointments`. The amended query now correctly joins the appointment and patient tables to match the intended behavior."
        ],
        "rules": [
            "1) When answering about \"patients who have made appointments\": make sure to combine information from both the appointment and patient tables. 2) When combining the appointment table (as T1) and patient table (as T2): link rows where T1.patient equals T2.ssn exactly and keep only matching pairs (inner match). 3) When the question asks for \"names of patients\": use the exact column \"name\" from the patient table (T2.name) as the output. 4) When choosing table aliases: use T1 for the appointment table and T2 for the patient table as specified in the amends."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM appointments",
            "SELECT DISTINCT T2.Name \nFROM appointment AS T1 \nJOIN patient AS T2 ON T1.patient = T2.ssn"
        ],
        "rule_sql": [
            "SELECT DISTINCT T2.Name FROM Appointment T1 INNER JOIN Patient T2 ON T1.Patient = T2.SSN"
        ]
    },
    "5344": {
        "db_id": "manufactory_1",
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "ground_truth": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "amends": [
            "Do use `avg(T1.Price)` and `T2.name` in the SELECT list instead of only `manufacturer_name`. Do add `Manufacturers AS T2` to the FROM clause with a `JOIN` on `T1.manufacturer = T2.code` instead of querying only the `products` table. Do remove the `WHERE` clause filter and instead add a `HAVING` clause with `avg(T1.price) >= 150` to filter after aggregation instead of before. Do change the GROUP BY to use `T2.name` instead of `manufacturer_name` to properly group by the joined manufacturer name. The amended query now correctly calculates average prices by manufacturer and filters based on the aggregated results, matching the RIGHT_SQL's behavior.",
            "Do include `avg(T1.Price)` in the SELECT list instead of omitting it, and do use lowercase `T2.name` instead of uppercase `T2.Name`. Do maintain the same JOIN condition `T1.manufacturer = T2.code` with consistent lowercase column references instead of mixed case. Do keep the GROUP BY on `T2.name` with lowercase instead of uppercase, and preserve the HAVING clause `avg(T1.price) >= 150` with lowercase function and column instead of uppercase. The amended query now correctly includes the average price in the output while maintaining the same filtering logic.",
            "Do place `avg(T1.Price)` before `T2.name` in the SELECT list instead of after it. Do use lowercase `products` instead of uppercase `Products` for the table name. Do use lowercase `manufacturer` instead of uppercase `Manufacturer` in the join condition instead of the original case. Do use lowercase `price` instead of uppercase `Price` in the HAVING clause instead of the original case. The amended query now correctly matches the RIGHT_SQL's behavior with identical column ordering and case consistency."
        ],
        "rules": [
            "1) When answering about manufacturer names whose products have average price >= $150: use T2.name as the output column instead of manufacturer_name. 2) When computing average price per manufacturer: use avg(T1.Price) instead of filtering individual prices. 3) When joining Products and Manufacturers tables: link them using T1.manufacturer = T2.code to connect products to their manufacturers. 4) When filtering based on aggregated average price: use HAVING avg(T1.price) >= 150 instead of WHERE clause filtering individual prices. 5) When grouping by manufacturer: use T2.name as the grouping key instead of manufacturer_name to properly group by the joined manufacturer name.",
            "1) When answering about \"names of manufacturer whose products have an average price higher than or equal to $150\": make sure the output order: T2.name, avg(T1.Price). 2) When the question mentions \"manufacturer\": \"manufacturer\" actually means \"T1.Manufacturer in schema\" which references T2.Code. 3) When combining Products as T1 and Manufacturers as T2 for shared entities: link rows where T1.manufacturer = T2.code exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question asks for \"average price higher than or equal to $150\": compute avg(T1.Price) and filter groups where this value >= 150. 5) When the question says \"per manufacturer\"/\"by manufacturer\": organize results by T2.name and compute requested aggregates per group. 6) When choosing identifier delimiters: do not replace lowercase identifiers with uppercase forms; use exact case as shown in amends (T2.name, T1.manufacturer, T2.code, T1.Price).",
            "1) When the question asks for manufacturer names with average product price >= $150: place the average price calculation before the manufacturer name in the output order. 2) When referring to the products table: use lowercase \"products\" instead of uppercase \"Products\". 3) When joining products and manufacturers tables: use lowercase \"manufacturer\" instead of uppercase \"Manufacturer\" for the join condition. 4) When filtering by average price in the HAVING clause: use lowercase \"price\" instead of uppercase \"Price\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT manufacturer_name FROM products WHERE price >= 150 GROUP BY manufacturer_name;",
            "SELECT T2.Name \nFROM Products AS T1 \nJOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code \nGROUP BY T2.Name \nHAVING AVG(T1.Price) >= 150",
            "SELECT T2.name, avg(T1.Price) \nFROM Products AS T1 \nJOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code \nGROUP BY T2.name \nHAVING avg(T1.Price) >= 150",
            "SELECT avg(T1.Price), T2.name \nFROM products AS T1 \nJOIN Manufacturers AS T2 ON T1.manufacturer = T2.code \nGROUP BY T2.name \nHAVING avg(T1.price) >= 150"
        ],
        "rule_sql": [
            "SELECT avg(T1.Price), T2.name \nFROM products T1\nJOIN Manufacturers T2 ON T1.manufacturer = T2.code\nGROUP BY T2.name\nHAVING avg(T1.price) >= 150"
        ]
    },
    "6987": {
        "db_id": "culture_company",
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "ground_truth": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "amends": [
            "Do reference table `movie` instead of `movies` in the FROM clause. Do use column `YEAR` instead of `release_year` for the year filter in the WHERE clause. Do order by `gross_worldwide DESC` instead of `worldwide_gross ASC` for the sorting criteria. The amended query now correctly filters movies by year 2000 or earlier and returns the highest-grossing film in descending order, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about movies: use table \"movie\" instead of \"movies\". 2) When filtering by release year: use column \"YEAR\" instead of \"release_year\" for year comparisons. 3) When finding the highest worldwide gross: order by \"gross_worldwide DESC\" instead of \"worldwide_gross ASC\" to get the maximum value. 4) When answering about \"highest worldwide gross\": make sure the output order includes \"title\" and \"director\" as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title, director FROM movies WHERE release_year <= 2000 ORDER BY worldwide_gross ASC LIMIT 1;",
            "SELECT Title, Director FROM movie WHERE Year <= 2000 ORDER BY Gross_worldwide DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Title, Director FROM movie WHERE Year <= 2000 ORDER BY Gross_worldwide DESC LIMIT 1;"
        ]
    },
    "2238": {
        "db_id": "machine_repair",
        "question": "What is the team and starting year for each technician?",
        "ground_truth": "SELECT Team ,  Starting_Year FROM technician",
        "amends": [
            "Do reference the table as `technician` instead of `technicians` to match the correct table name. Do use column names `Team` and `Starting_Year` with proper capitalization instead of lowercase `team` and `starting_year` to align with the correct column naming convention. The amended query now correctly selects from the proper table with the appropriate column names, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"team and starting year for each technician\": make sure the output order: \"Team\", \"Starting_Year\". 2) When the question mentions \"technicians\": \"technicians\" actually means \"technician\" in schema. 3) When the question mentions \"team\": \"team\" actually means \"Team\" in schema. 4) When the question mentions \"starting year\": \"starting year\" actually means \"Starting_Year\" in schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team, starting_year FROM technicians;",
            "SELECT Team, Starting_Year FROM technician;"
        ],
        "rule_sql": [
            "SELECT Team, Starting_Year FROM technician;"
        ]
    },
    "1151": {
        "db_id": "body_builder",
        "question": "List the total scores of body builders in ascending order.",
        "ground_truth": "SELECT Total FROM body_builder ORDER BY Total ASC",
        "amends": [
            "Do select `Total` instead of `name, score`. Do use table `body_builder` instead of `body_builders`. Do order by `Total ASC` instead of `score DESC`."
        ],
        "rules": [
            "1) When the question asks for \"total scores\": select the exact column \"Total\" from table \"body_builder\". 2) When ordering results in ascending order: sort by \"Total\" in ascending direction. 3) When the question mentions \"body builders\": use the exact table name \"body_builder\" (not \"body_builders\")."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, score FROM body_builders ORDER BY score DESC;",
            "SELECT Total FROM body_builder ORDER BY Total ASC;"
        ],
        "rule_sql": [
            "SELECT Total FROM body_builder ORDER BY Total ASC;"
        ]
    },
    "755": {
        "db_id": "race_track",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "ground_truth": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
        "amends": [
            "Do reference table `track` instead of `tracks` in the FROM clause. The amended query now correctly matches the intended behavior by querying the proper table name."
        ],
        "rules": [
            "1) When answering about seating statistics for tracks: use the table name \"track\" exactly as specified in the schema, not \"tracks\". 2) When computing minimum, maximum, and average seating values: ensure the seating column is not null before performing the calculations."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MIN(seating), MAX(seating), AVG(seating) FROM tracks WHERE seating IS NOT NULL;",
            "SELECT MIN(Seating) AS min_seating, MAX(Seating) AS max_seating, AVG(Seating) AS avg_seating FROM track;"
        ],
        "rule_sql": [
            "SELECT MIN(Seating) AS min_seating, MAX(Seating) AS max_seating, AVG(Seating) AS avg_seating FROM track WHERE Seating IS NOT NULL"
        ]
    },
    "5273": {
        "db_id": "manufactory_1",
        "question": "Return the founder of Sony.",
        "ground_truth": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "amends": [
            "Do select `founder` instead of `name` in the SELECT list. Do query the `manufacturers` table instead of the `companies` table in the FROM clause. Do filter on `name = 'Sony'` instead of `company = 'Sony'` in the WHERE clause. The amended query now correctly retrieves the founder from the manufacturers table where the company name is Sony, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"founder of Sony\": make sure the output column is \"founder\" from the manufacturers table. 2) When the question mentions \"Sony\": \"Sony\" actually means \"name = 'Sony'\" in the manufacturers table. 3) When querying for company information: use the \"manufacturers\" table instead of the \"companies\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM companies WHERE company = 'Sony';",
            "SELECT founder FROM Manufacturers WHERE name = 'Sony';"
        ],
        "rule_sql": [
            "SELECT founder FROM Manufacturers WHERE name = 'Sony';"
        ]
    },
    "478": {
        "db_id": "allergy_1",
        "question": "Give the city that the student whose family name is Kim lives in.",
        "ground_truth": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
        "amends": [
            "Do select `city_code` instead of `city` to reference the correct column name. Do use `LName` instead of `first_name` as the filter condition to match the correct last name field. Do reference table `Student` instead of `students` to use the proper table name. Do use double quotes `\"Kim\"` instead of single quotes `'Kim'` for string literal consistency. The amended query now correctly retrieves city codes for students with last name Kim instead of incorrectly looking for first names."
        ],
        "rules": [
            "1) When the question asks for \"city\": use the exact column token \"city_code\" from table \"Student\" instead of \"city\". 2) When filtering by family name: use the exact column token \"LName\" from table \"Student\" instead of \"first_name\". 3) When referencing the table containing student information: use the exact table name \"Student\" instead of \"students\". 4) When using string literals for filtering: use double quotes \"Kim\" instead of single quotes 'Kim' for consistency with the schema requirements."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city FROM students WHERE first_name = 'Kim';",
            "SELECT city_code FROM Student WHERE LName = \"Kim\";"
        ],
        "rule_sql": [
            "SELECT city_code FROM Student WHERE LName = \"Kim\";"
        ]
    },
    "2187": {
        "db_id": "formula_1",
        "question": "What are the numbers of constructors for different nationalities?",
        "ground_truth": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "amends": [
            "Do group by `nationality` instead of `constructorId` and do place `nationality` in the SELECT list instead of omitting it, while moving the aggregate `count(*)` to the first position instead of second. Do remove the incorrect grouping column `constructorId` instead of keeping it, as the query should count constructors by nationality rather than by individual constructor IDs. The amended query now correctly groups by nationality and returns the count of constructors for each nationality, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"numbers of constructors for different nationalities\": group results by the exact column \"nationality\" from table \"constructors\" and count the number of constructors per group. 2) When counting constructors: use the canonical key \"constructorId\" from table \"constructors\" for counting, not a generic count of all columns. 3) When organizing output columns: place the aggregate count first in the result, followed by the grouping column \"nationality\". 4) When grouping by nationality: do not group by constructorId as that would count individual constructors rather than nationalities."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT nationality, COUNT(*) FROM constructors GROUP BY constructorId;",
            "SELECT count(*), nationality FROM constructors GROUP BY nationality"
        ],
        "rule_sql": [
            "SELECT COUNT(constructorId) AS constructor_count, nationality FROM constructors GROUP BY nationality ORDER BY constructor_count DESC;"
        ]
    },
    "5470": {
        "db_id": "voter_2",
        "question": "Report the distinct president vote and the vice president vote.",
        "ground_truth": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "amends": [
            "Do reference the correct table name `VOTING_RECORD` instead of `votes` and use proper column casing `President_Vote` and `VICE_President_Vote` instead of lowercase `president_vote` and `vice_president_vote`. Do use `DISTINCT` instead of `GROUP BY president_vote, vice_president_vote` to achieve the same deduplication effect with simpler syntax. The amended query now correctly selects distinct vote combinations from the proper voting record table."
        ],
        "rules": [
            "1) When referencing the voting record table: use the exact table name \"VOTING_RECORD\" instead of \"votes\". 2) When selecting president vote column: use the exact column name \"President_Vote\" with proper casing instead of lowercase \"president_vote\". 3) When selecting vice president vote column: use the exact column name \"VICE_President_Vote\" with proper casing instead of lowercase \"vice_president_vote\". 4) When finding distinct combinations of president and vice president votes: use DISTINCT instead of GROUP BY with both columns to achieve deduplication with simpler syntax."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT president_vote, vice_president_vote FROM votes GROUP BY president_vote, vice_president_vote;",
            "SELECT DISTINCT President_Vote, Vice_President_Vote FROM Voting_record;"
        ],
        "rule_sql": [
            "SELECT DISTINCT President_Vote, VICE_President_Vote FROM VOTING_RECORD;"
        ]
    },
    "4721": {
        "db_id": "department_store",
        "question": "What is the id of the product that was ordered the most often?",
        "ground_truth": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do query the `order_items` table instead of the `orders` table to correctly analyze product-level data. The amended query now matches RIGHT_SQL's behavior by using the appropriate data source for product information.",
            "Do select only `product_id` instead of including `COUNT(*) as order_count` in the SELECT list. Do move the aggregate function `count(*)` to the ORDER BY clause instead of keeping it in the SELECT list. Do remove the alias `order_count` from the ORDER BY clause instead of referencing it. The amended query now correctly returns only the product_id with the highest order count while matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"the product that was ordered the most often\": query the \"order_items\" table instead of the \"orders\" table to correctly analyze product-level data. 2) When counting how often products are ordered: count using the canonical key from the \"order_items\" table that represents product occurrences. 3) When finding the product ordered most often: rank products by their order count in descending order and keep the first 1 row.",
            "1) When answering about \"the product that was ordered the most often\": make sure the output order: product_id only. 2) When counting orders per product: compute the number of rows using count(*) but do not include it in the output columns. 3) When ranking products by order frequency: order by count(*) in descending direction and keep only the first row. 4) When handling the count aggregate: do not assign an alias to count(*) in the ORDER BY clause."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT product_id FROM orders GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT product_id, COUNT(*) as order_count\nFROM Order_Items\nGROUP BY product_id\nORDER BY order_count DESC\nLIMIT 1;",
            "SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
    },
    "3801": {
        "db_id": "e_learning",
        "question": "For each distinct test result, find the number of students who got the result.",
        "ground_truth": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "amends": [
            "Do group by `test_result` instead of `student_id` to count results by test outcome rather than by student. Do add `ORDER BY COUNT(*) DESC` instead of omitting it to sort the results by count in descending order. Do change the table reference to `Student_Tests_Taken` instead of `students` to use the correct source table containing test results. The amended query now correctly counts test results by outcome and sorts them by frequency, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"number of students who got the result\" per test result: organize results by the exact token \"test_result\" and compute the count of students per group. 2) When counting students: use the canonical key \"student_id\" from the Student_Tests_Taken table to count distinct students, not all rows. 3) When the question asks for results \"for each distinct test result\": make sure to group by the exact token \"test_result\" to get distinct test outcomes. 4) When producing output: make sure the output order is \"test_result\" followed by the count of students. 5) When the amends specify ordering by frequency: sort the results by the count in descending order to show most frequent results first."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT test_result, COUNT(*) FROM students GROUP BY student_id;",
            "SELECT test_result, COUNT(*) AS number_of_students\nFROM Student_Tests_Taken\nGROUP BY test_result\nORDER BY COUNT(*) DESC;"
        ],
        "rule_sql": [
            "SELECT test_result, COUNT(DISTINCT sce.student_id) AS student_count\nFROM Student_Tests_Taken stt\nJOIN Student_Course_Enrolment sce ON stt.registration_id = sce.registration_id\nGROUP BY test_result\nORDER BY student_count DESC;"
        ]
    },
    "891": {
        "db_id": "insurance_fnol",
        "question": "Find all the phone numbers.",
        "ground_truth": "SELECT customer_phone FROM available_policies",
        "amends": [
            "Do select `customer_phone` from the `available_policies` table instead of selecting all columns (`*`) from the `users` table. Do remove the `WHERE phone_number IS NULL` filter instead of keeping it, as the right query does not include any filtering condition. The amended query now correctly retrieves only the customer_phone column from the available_policies table without any filtering, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"phone numbers\": select only the \"customer_phone\" column from the \"available_policies\" table. 2) When the question asks to \"find all\" without filtering conditions: do not apply any WHERE clause filters. 3) When the question mentions \"phone numbers\": \"phone numbers\" actually means \"customer_phone in schema\" from the \"available_policies\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM users WHERE phone_number IS NULL;",
            "SELECT customer_phone FROM Available_Policies;"
        ],
        "rule_sql": [
            "SELECT customer_phone FROM available_policies;"
        ]
    },
    "1169": {
        "db_id": "body_builder",
        "question": "How many distinct birth places are there?",
        "ground_truth": "SELECT count(DISTINCT Birth_Place) FROM people",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM people;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Birth_Place) FROM people;"
        ]
    },
    "60": {
        "db_id": "student_assessment",
        "question": "what are the first name and last name of all candidates?",
        "ground_truth": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "amends": [
            "Do add `T2.last_name` to the SELECT list instead of omitting it. Do change the FROM source to `candidates AS T1 JOIN people AS T2` instead of just `candidates`. Do add the join condition `ON T1.candidate_id = T2.person_id` instead of having no join. The amended query now correctly retrieves both first and last names by joining the candidates table with the people table using the appropriate foreign key relationship."
        ],
        "rules": [
            "1) When answering about \"first name and last name of all candidates\": make sure the output order includes both \"T2.first_name\" and \"T2.last_name\". 2) When the question mentions \"candidates\": the data requires joining \"candidates AS T1\" with \"people AS T2\" instead of using only the candidates table. 3) When combining T1 and T2 for candidate information: link rows where \"T1.candidate_id = T2.person_id\" exactly as shown; keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM candidates;",
            "SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        ],
        "rule_sql": [
            "SELECT T2.first_name, T2.last_name FROM Candidates AS T1 INNER JOIN People AS T2 ON T1.candidate_id = T2.person_id"
        ]
    },
    "4909": {
        "db_id": "store_product",
        "question": "What is the name of the district with the most residents?",
        "ground_truth": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "amends": [
            "Do select `district_name` instead of `name` and order by `city_popation DESC` instead of `population ASC`. Do reference table `district` instead of `districts` while maintaining the same `LIMIT 1` structure. The amended query now correctly retrieves the district with the highest city population from the appropriate table structure."
        ],
        "rules": [
            "1) When the question asks for the district with the most residents: use \"district_name\" as the output column instead of \"name\". 2) When ordering by population to find the highest value: use \"city_popation DESC\" instead of \"population ASC\". 3) When referencing the districts table: use table name \"district\" instead of \"districts\". 4) When limiting to the top result: maintain the \"LIMIT 1\" structure to get only the highest ranked district."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM districts ORDER BY population ASC LIMIT 1;",
            "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT district_name FROM district ORDER BY City_Population DESC LIMIT 1;"
        ]
    },
    "209": {
        "db_id": "bike_1",
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "ground_truth": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "amends": [
            "Do join multiple tables including `station AS T1`, `trip AS T2`, `station AS T3`, and `trip AS T4` instead of querying only the `trips` table. Do use explicit join conditions `T1.id = T2.start_station_id`, `T2.id = T4.id`, and `T3.id = T4.end_station_id` instead of simple column filters. Do filter on `T1.city = \"Mountain View\"` and `T3.city = \"Palo Alto\"` instead of filtering `start_city` and `end_city` directly on the trips table. Do reference station city attributes through proper table joins instead of assuming city columns exist directly on the trips table. The amended query now correctly counts trips between stations in the specified cities by properly joining station and trip tables to establish the relationship between start and end stations."
        ],
        "rules": [
            "1) When answering about trips between cities: join station table as T1 for start stations, trip table as T2 for trips, station table as T3 for end stations, and trip table as T4 for trip identification instead of using a single trips table. 2) When combining station and trip tables: link rows where T1.id = T2.start_station_id, T2.id = T4.id, and T3.id = T4.end_station_id using exact key equality and keep only matching pairs (inner match). 3) When filtering for trips starting from Mountain View city: filter on T1.city = \"Mountain View\" using exact case and spacing. 4) When filtering for trips ending at Palo Alto city: filter on T3.city = \"Palo Alto\" using exact case and spacing. 5) When counting trips between specified cities: count the number of rows using the trip identification from the joined tables."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM trips WHERE start_city = 'Mountain View' AND end_city = 'Palo Alto';",
            "SELECT COUNT(*) \nFROM trip AS T2\nJOIN station AS T1 ON T1.id = T2.start_station_id\nJOIN trip AS T4 ON T2.id = T4.id\nJOIN station AS T3 ON T3.id = T4.end_station_id\nWHERE T1.city = 'Mountain View' AND T3.city = 'Palo Alto'"
        ],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM station T1 \nJOIN trip T2 ON T1.id = T2.start_station_id \nJOIN trip T4 ON T2.id = T4.id \nJOIN station T3 ON T3.id = T4.end_station_id \nWHERE T1.city = 'Mountain View' \nAND T3.city = 'Palo Alto'"
        ]
    },
    "832": {
        "db_id": "chinook_1",
        "question": "Find the maximum and minimum durations of tracks in milliseconds.",
        "ground_truth": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "amends": [
            "Do use `max(Milliseconds)` and `min(Milliseconds)` instead of `MAX(duration)` and `MIN(duration)` for the aggregate functions. Do reference the `TRACK` table instead of the `tracks` table as the data source. Do remove the `WHERE duration > 0` filter instead of keeping it, as the right query calculates aggregates over all records. Do omit column aliases `max_duration` and `min_duration` instead of including them. The amended query now correctly calculates maximum and minimum values from the Milliseconds column across all records in the TRACK table."
        ],
        "rules": [
            "1) When answering about \"maximum and minimum durations of tracks in milliseconds\": use \"Milliseconds\" column instead of \"duration\" column. 2) When calculating aggregates from the TRACK table: use \"TRACK\" table name exactly as shown in the schema. 3) When computing maximum and minimum values: use max(Milliseconds) and min(Milliseconds) functions without column aliases. 4) When calculating aggregates over all records: do not apply any WHERE filter conditions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(duration) AS max_duration, MIN(duration) AS min_duration FROM tracks WHERE duration > 0;",
            "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM Track;"
        ],
        "rule_sql": [
            "SELECT max(Milliseconds), min(Milliseconds) FROM Track;"
        ]
    },
    "1232": {
        "db_id": "apartment_rentals",
        "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
        "ground_truth": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "amends": [
            "Do specify table aliases with `T2.guest_first_name`, `T1.booking_start_date`, and `T1.booking_start_date` instead of unqualified column names. Do join `Apartment_Bookings AS T1` and `Guests AS T2` on `T1.guest_id = T2.guest_id` instead of querying only the `bookings` table. Do remove the `WHERE booking_type = 'hotel'` filter instead of keeping it, as the right query focuses on apartment bookings without type filtering. The amended query now correctly retrieves guest names with their apartment booking dates by establishing the proper relationship between bookings and guests tables.",
            "Do select `T1.booking_start_date` twice instead of including `T1.booking_end_date` in the SELECT list. The amended query now matches RIGHT_SQL's behavior by correctly displaying the guest's first name along with the booking start date repeated instead of showing the end date."
        ],
        "rules": [
            "1) When answering about apartment bookings: use table \"Apartment_Bookings\" as T1 and \"Guests\" as T2 instead of a generic \"bookings\" table. 2) When combining apartment bookings and guest information: link rows where T1.guest_id = T2.guest_id to establish the proper relationship between bookings and guests. 3) When retrieving guest first names: use T2.guest_first_name instead of unqualified column names. 4) When retrieving booking dates: use T1.booking_start_date and T1.booking_end_date instead of generic start_date and end_date. 5) When filtering for apartment bookings: do not apply any booking_type filter as the question specifically asks for apartment bookings without type constraints.",
            "1) When answering about apartment bookings with guest information: combine Apartment_Bookings as T1 and Guests as T2 where T1.guest_id equals T2.guest_id to match guest records with their bookings. 2) When showing guest first names, start dates, and end dates: include T2.guest_first_name, T1.booking_start_date, and T1.booking_end_date in the output columns. 3) When the amends specify selecting booking_start_date twice instead of booking_end_date: output T1.booking_start_date twice in place of T1.booking_end_date to match the required behavior."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT guest_first_name, start_date, end_date FROM bookings WHERE booking_type = 'hotel';",
            "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date\nFROM Apartment_Bookings AS T1\nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id",
            "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date\nFROM Apartment_Bookings AS T1\nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id"
        ],
        "rule_sql": [
            "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date AS booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id"
        ]
    },
    "397": {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "ground_truth": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "amends": [
            "Do select `flno` and `distance` instead of `flight_number` and `distance`. Do use `FROM Flight` instead of `FROM flights`. Do remove the WHERE clause with subquery instead of keeping it. Do add `ORDER BY price DESC LIMIT 1` instead of omitting ordering and limiting. The amended query now correctly retrieves the single flight with the highest price by sorting and limiting rather than using a subquery comparison."
        ],
        "rules": [
            "1) When the question asks for \"flight number\": use the exact column token \"flno\" from table \"Flight\" instead of \"flight_number\". 2) When the question asks for \"distance\": use the exact column token \"distance\" from table \"Flight\". 3) When the question asks for the flight with maximum price: sort all flights by \"price\" in descending order and keep only the first row. 4) When selecting from the flights table: use the exact table name \"Flight\" instead of \"flights\". 5) When retrieving the flight with maximum price: do not use a subquery comparison with MAX(price), instead use ordering and limiting to get the single highest-priced flight."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT flight_number, distance FROM flights WHERE price = (SELECT MAX(price) FROM flights);",
            "SELECT flno, distance FROM flight ORDER BY price DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1;"
        ]
    },
    "2763": {
        "db_id": "election",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "ground_truth": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "amends": [
            "Do use `count(DISTINCT T2.Delegate)` instead of `COUNT(*)` to count unique delegates rather than total rows. Do add `county AS T1 JOIN election AS T2 ON T1.County_id = T2.District` instead of querying only the `delegates` table, properly joining the county and election tables to establish the relationship between population and delegates. Do move the population filter to `T1.Population > 50000` instead of `county_population > 50000` and apply it to the county table rather than an unspecified column. The amended query now correctly counts distinct delegates from counties with populations over 50,000 by properly joining the relevant tables and using appropriate filtering logic."
        ],
        "rules": [
            "1) When counting distinct delegates: use count(DISTINCT T2.Delegate) instead of COUNT(*) to count unique delegates rather than total rows. 2) When combining county and election tables: join county AS T1 with election AS T2 using T1.County_id = T2.District to establish the relationship between population and delegates. 3) When filtering by population above 50000: apply the condition T1.Population > 50000 to the county table rather than an unspecified column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM delegates WHERE county_population > 50000;",
            "SELECT COUNT(DISTINCT T2.Delegate) \nFROM county AS T1 \nJOIN election AS T2 ON T1.County_Id = T2.District \nWHERE T1.Population > 50000"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT T2.Delegate) \nFROM county AS T1 \nJOIN election AS T2 ON T1.County_Id = T2.District \nWHERE T1.Population > 50000"
        ]
    },
    "581": {
        "db_id": "store_1",
        "question": "What country does Roberto Almeida live?",
        "ground_truth": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "amends": [
            "Do query the `customers` table instead of the `people` table. Do use double quotes for string literals \"Roberto\" and \"Almeida\" instead of single quotes. The amended query now correctly retrieves the country from the customers table for the specified customer name."
        ],
        "rules": [
            "1) When the question asks about a person's country: query the \"customers\" table instead of the \"people\" table. 2) When using string literals for names: use double quotes exactly as \"Roberto\" and \"Almeida\" instead of single quotes. 3) When retrieving country information for a specific customer: use the exact column name \"country\" from the \"customers\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT country FROM people WHERE first_name = 'Roberto' AND last_name = 'Almeida';",
            "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
        ],
        "rule_sql": [
            "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
        ]
    },
    "4570": {
        "db_id": "company_office",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "ground_truth": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "amends": [
            "Do reference the column `Industry` in both the SELECT list and GROUP BY clause instead of using `industry` in SELECT and `company_name` in GROUP BY. Do use consistent table name `Companies` instead of `companies`. The amended query now correctly groups by the same column that is being aggregated, ensuring proper count results per industry rather than per company name, matching the intended behavior of counting companies within each industry category."
        ],
        "rules": [
            "1) When answering about \"name of each industry and the number of companies in that industry\": make sure the output order: Industry, count of companies. 2) When the question mentions \"industry\": \"industry\" actually means \"Industry in schema\" with exact case. 3) When the question asks for \"number of companies in that industry\": compute the count using the canonical key for companies (company identifier) per Industry group. 4) When the question says \"per industry\"/\"by industry\": organize results by the exact column token \"Industry\" and compute company count per group. 5) When choosing identifier delimiters: do not replace the exact table name \"Companies\" with lowercase \"companies\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT industry, COUNT(*) FROM companies GROUP BY company_name;",
            "SELECT Industry, COUNT(*) AS number_of_companies FROM Companies GROUP BY Industry;"
        ],
        "rule_sql": [
            "SELECT Industry, COUNT(id) AS \"count of companies\" FROM Companies GROUP BY Industry ORDER BY Industry;"
        ]
    },
    "2631": {
        "db_id": "inn_1",
        "question": "Find the number of distinct bed types available in this inn.",
        "ground_truth": "SELECT count(DISTINCT bedType) FROM Rooms;",
        "amends": [
            "Do `count(DISTINCT bedType)` instead of `COUNT(*)` to count distinct bed types rather than all rows. Do specify `FROM Rooms` with proper capitalization instead of `FROM rooms` to match the correct table name. The amended query now correctly counts distinct bed types from the Rooms table instead of counting all room records."
        ],
        "rules": [
            "1) When counting distinct bed types: count the number of unique values in the \"bedType\" column from the \"Rooms\" table. 2) When referring to the table containing bed types: use the exact table name \"Rooms\" with proper capitalization as shown in the schema. 3) When the question asks for \"distinct bed types\": compute the count using DISTINCT on the \"bedType\" column rather than counting all rows."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM rooms;",
            "SELECT COUNT(DISTINCT bedType) FROM Rooms;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT bedType) FROM Rooms;"
        ]
    },
    "1942": {
        "db_id": "cinema",
        "question": "What is the location with the most cinemas opened in year 2010 or later?",
        "ground_truth": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `cinema` instead of `cinemas` and use the column name `openning_year` instead of `opened_year`. Do use `LOCATION` in uppercase instead of `location` for both the SELECT list and GROUP BY clause. Do remove the alias `cinema_count` and instead reference `count(*)` directly in the ORDER BY clause instead of ordering by the alias. Do select only the `LOCATION` column instead of including both location and count in the SELECT list. The amended query now correctly returns only the location with the highest count of cinemas opened since 2010, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about cinemas: use the table name \"cinema\" exactly as specified in the schema, not \"cinemas\". 2) When referring to the year when cinemas opened: use the column name \"openning_year\" exactly as shown in the schema, not \"opened_year\". 3) When selecting and grouping by location: use the column name \"LOCATION\" in uppercase exactly as specified in the schema. 4) When counting cinemas opened in 2010 or later: count rows where \"openning_year\" is greater than or equal to 2010. 5) When ordering by count results: order by the count(*) expression directly rather than using an alias. 6) When answering about the location with the most cinemas: select only the \"LOCATION\" column and return the single top result after ordering by count in descending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT location, COUNT(*) as cinema_count \nFROM cinemas \nWHERE opened_year >= 2010 \nGROUP BY location \nORDER BY cinema_count DESC \nLIMIT 1;",
            "SELECT LOCATION FROM cinema WHERE Openning_year >= 2010 GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
    },
    "4006": {
        "db_id": "ship_mission",
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "ground_truth": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"",
        "amends": [
            "Do use `OR` between nationality conditions instead of `AND` to find ships from either country instead of requiring both nationalities simultaneously. Do reference table `ship` instead of `ships` and use proper column names `Name` and `Nationality` instead of lowercase versions. Do use double quotes for string literals instead of single quotes. The amended query now correctly returns ships from either the United States or United Kingdom instead of incorrectly requiring both nationalities, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for ships from multiple countries using \"either\" or \"or\": use OR logic between nationality conditions instead of AND to find ships matching any of the specified countries. 2) When referencing the ship table: use the exact table name \"ship\" (not \"ships\") and exact column names \"Name\" and \"Nationality\" with proper capitalization. 3) When using string literals for countries: use double quotes exactly as shown in the schema, such as \"United States\" and \"United Kingdom\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM ships WHERE nationality = 'United States' AND nationality = 'United Kingdom';",
            "SELECT \"Name\" FROM \"ship\" WHERE \"Nationality\" = \"United States\" OR \"Nationality\" = \"United Kingdom\""
        ],
        "rule_sql": [
            "SELECT Name FROM ship WHERE Nationality = \"United States\" OR Nationality = \"United Kingdom\""
        ]
    },
    "1594": {
        "db_id": "customers_and_invoices",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "ground_truth": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "amends": [
            "Do select `T1.account_id` and `T2.account_name` instead of `id` and `name`. Do use `FROM Financial_transactions AS T1 JOIN Accounts AS T2` instead of `FROM accounts`. Do add `ON T1.account_id = T2.account_id` join condition instead of omitting it. Do add `GROUP BY T1.account_id` instead of omitting grouping. Do move the count filter to `HAVING count(*) >= 4` instead of `WHERE transaction_count >= 4`. The amended query now correctly joins transaction and account tables to count transactions per account and filter by the aggregate count, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"accounts with 4 or more transactions\": make sure the output order: T1.account_id, T2.account_name. 2) When the question mentions \"ids\": \"ids\" actually means \"T1.account_id in schema\". 3) When the question mentions \"names\": \"names\" actually means \"T2.account_name in schema\". 4) When combining Financial_transactions as T1 and Accounts as T2: link rows where T1.account_id = T2.account_id exactly as shown; keep only matching pairs (inner match). 5) When the question asks for \"accounts with 4 or more transactions\": organize results by T1.account_id and compute count(*) per group, then filter to keep only groups where count(*) >= 4. 6) When counting transactions per account: use count(*) to count all transaction rows for each account group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, name FROM accounts WHERE transaction_count >= 4;",
            "SELECT T1.account_id, T2.account_name\nFROM Financial_Transactions AS T1\nJOIN Accounts AS T2 ON T1.account_id = T2.account_id\nGROUP BY T1.account_id\nHAVING COUNT(*) >= 4"
        ],
        "rule_sql": [
            "SELECT T1.account_id, T2.account_name\nFROM Financial_Transactions T1\nINNER JOIN Accounts T2 ON T1.account_id = T2.account_id\nGROUP BY T1.account_id, T2.account_name\nHAVING COUNT(*) >= 4\nORDER BY T1.account_id, T2.account_name"
        ]
    },
    "6339": {
        "db_id": "e_government",
        "question": "Count the number of different payment method codes used by parties.",
        "ground_truth": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "amends": [
            "Do count `DISTINCT payment_method_code` instead of `COUNT(*)` to count unique payment method codes rather than all rows with non-null values. Do remove the `WHERE payment_method_code IS NOT NULL` filter instead of keeping it since counting distinct values inherently excludes nulls. The amended query now correctly counts the number of distinct payment method codes present in the parties table, matching the intended behavior."
        ],
        "rules": [
            "1) When counting the number of different payment method codes: count distinct values of payment_method_code instead of counting all rows. 2) When counting distinct values: do not include a WHERE clause to filter out null values since counting distinct values inherently excludes nulls."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM parties WHERE payment_method_code IS NOT NULL;",
            "SELECT COUNT(DISTINCT payment_method_code) FROM Parties;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT payment_method_code) FROM Parties;"
        ]
    },
    "4381": {
        "db_id": "tracking_grants_for_research",
        "question": "What is the description for the results whose project detail is 'sint'?",
        "ground_truth": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'",
        "amends": [
            "Do select `T1.outcome_description` from the `Research_outcomes` table instead of `description` from the `results` table. Do join `Project_outcomes` as `T2` on `T1.outcome_code = T2.outcome_code` and join `Projects` as `T3` on `T2.project_id = T3.project_id` instead of querying only the `results` table. Do filter on `T3.project_details = 'sint'` instead of `project_detail = 'sint'` to properly reference the project details through the joined tables. The amended query now correctly retrieves outcome descriptions by establishing proper relationships between research outcomes, project outcomes, and projects tables."
        ],
        "rules": [
            "1) When the question asks for \"description\" of results: use \"T1.outcome_description\" from the \"Research_outcomes\" table instead of \"description\" from \"results\". 2) When filtering by project detail 'sint': use \"T3.project_details = 'sint'\" after joining through the proper table relationships. 3) When combining Research_outcomes, Project_outcomes, and Projects tables: link rows where \"T1.outcome_code = T2.outcome_code\" and \"T2.project_id = T3.project_id\", keeping only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT description FROM results WHERE project_detail = 'sint';",
            "SELECT T1.outcome_description \nFROM Research_Outcomes T1\nJOIN Project_Outcomes T2 ON T1.outcome_code = T2.outcome_code\nJOIN Projects T3 ON T2.project_id = T3.project_id\nWHERE T3.project_details = 'sint'"
        ],
        "rule_sql": [
            "SELECT T1.outcome_description \nFROM Research_Outcomes T1\nINNER JOIN Project_Outcomes T2 ON T1.outcome_code = T2.outcome_code\nINNER JOIN Projects T3 ON T2.project_id = T3.project_id\nWHERE T3.project_details = 'sint';"
        ]
    },
    "2542": {
        "db_id": "county_public_safety",
        "question": "What are the names of cities in ascending alphabetical order?",
        "ground_truth": "SELECT Name FROM city ORDER BY Name ASC",
        "amends": [
            "Do use column name `Name` instead of `name` to match the correct case sensitivity. Do order by `Name` in `ASC` order instead of `DESC` to sort alphabetically ascending rather than descending. Do reference table `city` instead of `cities` to use the correct table name. The amended query now correctly selects from the proper table with appropriate column casing and sorting direction."
        ],
        "rules": [
            "1) When the question asks for city names: use column \"Name\" from table \"city\" to match the exact case sensitivity. 2) When the question specifies ascending alphabetical order: sort by \"Name\" in ascending (ASC) order rather than descending. 3) When referencing the table containing city information: use table name \"city\" instead of any other variation like \"cities\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM cities ORDER BY name DESC;",
            "SELECT Name FROM city ORDER BY Name ASC;"
        ],
        "rule_sql": [
            "SELECT Name FROM city ORDER BY Name ASC;"
        ]
    },
    "1424": {
        "db_id": "college_2",
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "ground_truth": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "amends": [
            "Do use a subquery with `course_id IN (SELECT...)` instead of directly filtering on `prerequisite`. Do add a `prereq` table join with `AS T1 JOIN course AS T2` instead of querying only the `courses` table. Do change the join condition to `T1.prereq_id = T2.course_id` instead of the incorrect direct filter. Do move the title filter to the subquery's `WHERE T2.title = 'Differential Geometry'` instead of applying it to the main table. The amended query now correctly finds courses that have Differential Geometry as a prerequisite by properly traversing the prerequisite relationship through the join."
        ],
        "rules": [
            "1) When the question asks for courses with a specific prerequisite: use a subquery to find course IDs where the prerequisite title matches the exact literal value instead of filtering directly on prerequisite columns. 2) When combining course and prerequisite tables: join tables using T1.prereq_id = T2.course_id to properly traverse the prerequisite relationship. 3) When filtering by prerequisite course title: apply the title filter 'Differential Geometry' exactly as specified to the prerequisite table (T2) in the subquery, not to the main courses table. 4) When selecting course titles: ensure the title comes from the main courses table (T1) that represents the courses being queried, not from the prerequisite table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title FROM courses WHERE prerequisite = 'Differential Geometry';",
            "SELECT T1.title\nFROM course AS T1\nWHERE T1.course_id IN (\n    SELECT prereq.course_id\n    FROM prereq\n    JOIN course AS T2 ON prereq.prereq_id = T2.course_id\n    WHERE T2.title = 'Differential Geometry'\n)"
        ],
        "rule_sql": [
            "SELECT c1.title\nFROM course c1\nWHERE c1.course_id IN (\n    SELECT p.course_id\n    FROM prereq p\n    JOIN course c2 ON p.prereq_id = c2.course_id\n    WHERE c2.title = 'Differential Geometry'\n)"
        ]
    },
    "6063": {
        "db_id": "customers_and_addresses",
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "ground_truth": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20;"
        ],
        "rule_sql": [
            "SELECT date_became_customer FROM Customers WHERE customer_id BETWEEN 10 AND 20"
        ]
    },
    "1631": {
        "db_id": "wedding",
        "question": "List all church names in descending order of opening date.",
        "ground_truth": "SELECT name FROM church ORDER BY open_date DESC",
        "amends": [
            "Do select `name` instead of `church_name` and use `open_date` instead of `opening_date`. Do order by `DESC` instead of `ASC` and reference the correct table name `church` instead of `churches`. The amended query now correctly retrieves the name column from the church table ordered by open_date in descending order, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"church names\": use the exact column token \"name\" from the church table. 2) When ordering by opening date: use the exact column token \"open_date\" from the church table. 3) When the question specifies \"descending order\": order the results by open_date in descending direction. 4) When referencing the table containing church information: use the exact table name \"church\" (not \"churches\")."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT church_name FROM churches ORDER BY opening_date ASC;",
            "SELECT name FROM church ORDER BY open_date DESC;"
        ],
        "rule_sql": [
            "SELECT name FROM church ORDER BY open_date DESC;"
        ]
    },
    "4037": {
        "db_id": "student_1",
        "question": "What are the grade number and classroom number of each class in the list?",
        "ground_truth": "SELECT DISTINCT classroom ,  grade FROM list",
        "amends": [
            "Do query the `list` table instead of the `classes` table. Do select `classroom` and `grade` columns instead of `grade` and `classroom`. Do add `DISTINCT` to eliminate duplicate rows instead of omitting it. Do remove the `WHERE` clause filtering for non-null values instead of keeping those filters. Do remove the `ORDER BY` clause instead of sorting by grade and classroom. The amended query now correctly retrieves unique classroom-grade combinations from the list table without unnecessary filtering or sorting."
        ],
        "rules": [
            "1) When answering about \"grade number and classroom number of each class in the list\": make sure the output order: classroom, grade. 2) When the question mentions \"the list\" table: query the \"list\" table instead of the \"classes\" table. 3) When selecting classroom and grade columns: use the exact column names \"classroom\" and \"grade\" from the \"list\" table. 4) When retrieving unique classroom-grade combinations: use DISTINCT to eliminate duplicate rows. 5) When filtering for non-null values: do not apply WHERE clause filters for grade IS NOT NULL and classroom IS NOT NULL. 6) When ordering results: do not sort by grade and classroom."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT grade, classroom FROM classes WHERE grade IS NOT NULL AND classroom IS NOT NULL ORDER BY grade, classroom;",
            "SELECT DISTINCT Classroom, Grade FROM list;"
        ],
        "rule_sql": [
            "SELECT DISTINCT classroom, grade FROM list;"
        ]
    },
    "3097": {
        "db_id": "behavior_monitoring",
        "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
        "ground_truth": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"",
        "amends": [
            "Do select `incident_type_description` instead of `description` and use table `Ref_Incident_Type` instead of `incident_types`. Do filter on `incident_type_code = \"VIOLENCE\"` instead of `code = 'VIOLENCE'` with proper double quotes for the string literal. The amended query now correctly references the appropriate column names and table structure to match the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"incident type description\": use the exact column name \"incident_type_description\" from table \"Ref_Incident_Type\". 2) When the question mentions incident type with code \"VIOLENCE\": filter using exact column \"incident_type_code\" with exact string literal \"VIOLENCE\" in double quotes. 3) When answering about incident type description: make sure to use table \"Ref_Incident_Type\" instead of any other table name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT description FROM incident_types WHERE code = 'VIOLENCE';",
            "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\";"
        ],
        "rule_sql": [
            "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\";"
        ]
    },
    "1442": {
        "db_id": "college_2",
        "question": "Find the id of instructors who didn't teach any courses?",
        "ground_truth": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "amends": [
            "Do select `id` from `instructor` instead of `instructor_id` from `instructors`. Do use `EXCEPT` to find instructors not in the `teaches` table instead of filtering for `course_id IS NULL`. Do remove the `WHERE` clause entirely instead of using it to find null course IDs. Do change the table name from `instructors` to `instructor` for schema accuracy. The amended query now correctly identifies instructors who are not assigned to teach any courses by using set operations rather than relying on null checks."
        ],
        "rules": [
            "1) When the question asks for \"id of instructors\": use the exact column token \"id\" from the \"instructor\" table instead of \"instructor_id\" from \"instructors\". 2) When the question asks about instructors who \"didn't teach any courses\": use set operations (EXCEPT) to find instructors not present in the \"teaches\" table rather than checking for null values in course_id. 3) When referring to the instructor table: use the exact table name \"instructor\" instead of \"instructors\" for schema accuracy. 4) When identifying instructors without courses: remove any WHERE clause that attempts to filter for null course IDs, as this approach is incorrect for this schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT instructor_id FROM instructors WHERE course_id IS NULL;",
            "SELECT ID FROM instructor\nEXCEPT\nSELECT ID FROM teaches"
        ],
        "rule_sql": [
            "SELECT id FROM instructor\nEXCEPT\nSELECT ID FROM teaches;"
        ]
    },
    "924": {
        "db_id": "insurance_fnol",
        "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
        "ground_truth": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
        "amends": [
            "Do add joins to `first_notification_of_loss` and `services` tables instead of querying only the `customers` table. Do use `INTERSECT` to find customers who have both services instead of using `AND` with the same column. Do reference columns with table aliases `t1.customer_name`, `t1.customer_id = t2.customer_id`, and `t2.service_id = t3.service_id` instead of unqualified column names. Do filter on `t3.service_name` values separately for each branch instead of applying contradictory `AND` conditions to the same column. Do use double quotes for string literals `\"Close a policy\"` and `\"New policy application\"` instead of single quotes. The amended query now correctly identifies customers who have both service types through proper table relationships and set intersection."
        ],
        "rules": [
            "1) When answering about customers who used both services \"Close a policy\" and \"Upgrade a policy\": combine data from customers, first_notification_of_loss, and services tables using the exact join conditions t1.customer_id = t2.customer_id and t2.service_id = t3.service_id. 2) When finding customers with both specific services: use set intersection to identify customers who appear in both the \"Close a policy\" group and the \"Upgrade a policy\" group, not AND conditions on the same column. 3) When filtering for service names: use exact string literals \"Close a policy\" and \"Upgrade a policy\" with double quotes as shown in the schema. 4) When selecting customer names: output t1.customer_name from the customers table (aliased as t1). 5) When combining tables: perform inner matches using the exact key equalities t1.customer_id = t2.customer_id and t2.service_id = t3.service_id to ensure only valid relationships are considered."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE service_name = 'Close a policy' AND service_name = 'Upgrade a policy';",
            "SELECT c.Customer_name\nFROM Customers c\nWHERE c.Customer_ID IN (\n    SELECT fnol.Customer_ID\n    FROM First_Notification_of_Loss fnol\n    JOIN Services s ON fnol.Service_ID = s.Service_ID\n    WHERE s.Service_name = \"Close a policy\"\n    INTERSECT\n    SELECT fnol.Customer_ID\n    FROM First_Notification_of_Loss fnol\n    JOIN Services s ON fnol.Service_ID = s.Service_ID\n    WHERE s.Service_name = \"Upgrade a policy\"\n)"
        ],
        "rule_sql": [
            "SELECT t1.Customer_name\nFROM Customers t1\nWHERE t1.Customer_ID IN (\n    SELECT t2.Customer_ID\n    FROM First_Notification_of_Loss t2\n    JOIN Services t3 ON t2.Service_ID = t3.Service_ID\n    WHERE t3.Service_name = \"Close a policy\"\n)\nAND t1.Customer_ID IN (\n    SELECT t2.Customer_ID\n    FROM First_Notification_of_Loss t2\n    JOIN Services t3 ON t2.Service_ID = t3.Service_ID\n    WHERE t3.Service_name = \"Upgrade a policy\"\n)"
        ]
    },
    "4191": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are all the role codes, role names, and role descriptions?",
        "ground_truth": "SELECT role_code ,  role_name ,  role_description FROM ROLES",
        "amends": [
            "Do add `role_description` to the SELECT list instead of omitting it. Do reference the table as `ROLES` instead of `roles` to match the correct case. The amended query now includes all required columns and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"all the role codes, role names, and role descriptions\": make sure the output order includes \"role_code\", \"role_name\", and \"role_description\". 2) When the question mentions \"role codes\", \"role names\", and \"role descriptions\": these correspond to the exact columns \"role_code\", \"role_name\", and \"role_description\" in the schema. 3) When referencing the roles table: use the exact table name \"ROLES\" with uppercase letters as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT role_code, role_name FROM roles;",
            "SELECT Role_Code, Role_Name, Role_Description FROM Roles;"
        ],
        "rule_sql": [
            "SELECT role_code, role_name, role_description FROM ROLES;"
        ]
    },
    "2996": {
        "db_id": "sakila_1",
        "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT s.first_name, s.last_name\nFROM staff s\nJOIN rental r ON s.staff_id = r.staff_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'April' AND c.last_name = 'Burns'\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT s.first_name, s.last_name\nFROM staff s\nJOIN rental r ON s.staff_id = r.staff_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'April' AND c.last_name = 'Burns'\nLIMIT 1;"
        ]
    },
    "6790": {
        "db_id": "activity_1",
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "ground_truth": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "amends": [
            "Do select `StuID` from `Participates_in` instead of `student_id` from `students`. Do use `INTERSECT` to find common student IDs instead of filtering with `activity_count > 0`. Do query from `Student` table instead of `students` while keeping the `age < 20` filter. Do remove the `activity_count` condition entirely instead of including it in WHERE clause. The amended query now correctly identifies students who both participate in activities and are under 20 years old, matching the RIGHT_SQL's set intersection behavior."
        ],
        "rules": [
            "1) When answering about student IDs: select \"StuID\" from the \"Student\" table instead of \"student_id\" from \"students\". 2) When the question asks for students involved in at least one activity: use INTERSECT to find common student IDs from \"Participates_in\" table instead of filtering with activity_count > 0. 3) When filtering students by age under 20: apply the condition age < 20 to the \"Student\" table. 4) When combining student information with activity participation: perform an inner match between \"Student\" and \"Participates_in\" tables using their common student ID columns to find students who exist in both tables."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT student_id FROM students WHERE age < 20 AND activity_count > 0;",
            "SELECT StuID FROM Student WHERE Age < 20\nINTERSECT\nSELECT stuid FROM Participates_in"
        ],
        "rule_sql": [
            "SELECT StuID FROM Student WHERE Age < 20\nINTERSECT\nSELECT stuid FROM Participates_in"
        ]
    },
    "6894": {
        "db_id": "tracking_orders",
        "question": "Which customers have orders with status \"Packing\"? Give me the customer names.",
        "ground_truth": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "amends": [
            "Do add `DISTINCT` instead of omitting it. Do specify table alias `T1` for `customer_name` instead of using unqualified column reference. Do add `JOIN orders AS T2` instead of querying only the customers table. Do use join condition `ON T1.customer_id = T2.customer_id` instead of missing the table relationship. Do move the filter to `T2.order_status` instead of applying it to the customers table. Do use double quotes for string literal instead of single quotes. The amended query now correctly identifies customers with packing orders by joining the orders table and filtering on the order status column."
        ],
        "rules": [
            "1) When the question asks for customer names with orders having a specific status: join the Customers table (as T1) with the Orders table (as T2) using the condition T1.customer_id = T2.customer_id to link customer records with their orders. 2) When filtering for orders with status \"Packing\": apply the filter condition T2.order_status = \"Packing\" exactly as specified with double quotes. 3) When selecting customer names from the joined result: use T1.customer_name with the table alias qualification. 4) When the question asks for which customers have orders: use DISTINCT to return each customer name only once, even if they have multiple orders with the specified status."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE order_status = 'Packing';",
            "SELECT DISTINCT T1.customer_name\nFROM Customers AS T1\nJOIN Orders AS T2 ON T1.customer_id = T2.customer_id\nWHERE T2.order_status = \"Packing\""
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.customer_name\nFROM Customers AS T1\nJOIN Orders AS T2 ON T1.customer_id = T2.customer_id\nWHERE T2.order_status = \"Packing\";"
        ]
    },
    "627": {
        "db_id": "store_1",
        "question": "List title of albums have the number of tracks greater than 10.",
        "ground_truth": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "amends": [
            "Do add `JOIN tracks AS T2 ON T1.id = T2.album_id` instead of querying only the albums table. Do change the column reference to `T1.title` with table alias instead of just `title`. Do add `GROUP BY T1.id` instead of omitting grouping. Do change the filter to `HAVING count(T1.id) > 10` instead of `WHERE track_count > 10` to properly count tracks per album rather than relying on a potentially incorrect track_count column. The amended query now correctly counts actual track relationships and matches the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"number of tracks per album\": make sure to combine the albums table (T1) and tracks table (T2) by linking rows where T1.id equals T2.album_id. 2) When counting tracks per album: use the canonical key T1.id for counting and group by T1.id. 3) When filtering for albums with more than 10 tracks: apply the condition count(T1.id) > 10 after grouping. 4) When selecting album titles: use the exact column reference T1.title with table alias. 5) When the question mentions \"title of albums\": output only the T1.title column in the results."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title FROM albums WHERE track_count > 10;",
            "SELECT T1.title \nFROM albums AS T1 \nJOIN tracks AS T2 ON T1.id = T2.album_id \nGROUP BY T1.id \nHAVING count(T1.id) > 10"
        ],
        "rule_sql": [
            "SELECT T1.title FROM albums T1 JOIN tracks T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10"
        ]
    },
    "5522": {
        "db_id": "products_gen_characteristics",
        "question": "What are the names and buying prices of all the products?",
        "ground_truth": "SELECT product_name ,  typical_buying_price FROM products",
        "amends": [
            "Do use `product_name` and `typical_buying_price` instead of `name` and `price` in the SELECT list to match the correct column names from the products table. The amended query now correctly retrieves the product name and typical buying price columns as specified in the RIGHT_SQL."
        ],
        "rules": [
            "1) When the question asks for \"names\" of products: use the exact column \"product_name\" from the Products table. 2) When the question asks for \"buying prices\" of products: use the exact column \"typical_buying_price\" from the Products table. 3) When selecting columns from the Products table: maintain the output order as product_name followed by typical_buying_price to match the question's request sequence."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, price FROM products;",
            "SELECT product_name, typical_buying_price FROM Products;"
        ],
        "rule_sql": [
            "SELECT product_name, typical_buying_price FROM Products;"
        ]
    },
    "2545": {
        "db_id": "county_public_safety",
        "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
        "ground_truth": "SELECT Hispanic FROM city WHERE Black  >  10",
        "amends": [
            "Do reference the `Hispanic` column instead of `hispanic_percentage` and use the `city` table instead of `cities`. Do use the `Black` column filter instead of `black_percentage > 10` while maintaining the same comparison logic. The amended query now correctly references the proper column names and table name to match the intended behavior."
        ],
        "rules": [
            "1) When answering about \"hispanic percentage for cities\": use column \"Hispanic\" from table \"city\" as T1. 2) When the question mentions \"black percentage is greater than 10\": use column \"Black\" from table \"city\" as T1 with comparison value > 10. 3) When filtering cities by black percentage: apply condition T1.\"Black\" > 10 to select only rows where the Black column value exceeds 10. 4) When producing output: return only the \"Hispanic\" column values for the filtered rows."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT hispanic_percentage FROM cities WHERE black_percentage > 10;",
            "SELECT Hispanic FROM city WHERE Black > 10;"
        ],
        "rule_sql": [
            "SELECT Hispanic FROM city AS T1 WHERE T1.Black > 10"
        ]
    },
    "2636": {
        "db_id": "inn_1",
        "question": "Find the number of rooms that do not have any reservation.",
        "ground_truth": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "amends": [
            "Do reference `roomid` in the main table filter instead of `room_id`. Do use `DISTINCT` in the subquery to eliminate duplicates instead of omitting it. Do reference `room` in the subquery instead of `room_id` to match the correct column name. The amended query now correctly counts rooms that have never been reserved by ensuring the subquery returns unique room values from the reservations table."
        ],
        "rules": [
            "1) When the question asks for rooms without reservations: use \"roomid\" from the rooms table as the filtering column instead of \"room_id\". 2) When checking for rooms in the reservations table: use \"room\" as the column name instead of \"room_id\". 3) When eliminating duplicate room values from the reservations table: apply DISTINCT to ensure unique room values are considered."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM rooms WHERE room_id NOT IN (SELECT room_id FROM reservations);",
            "SELECT COUNT(*) \nFROM Rooms \nWHERE RoomId NOT IN (\n    SELECT DISTINCT Room \n    FROM Reservations\n)"
        ],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM Rooms \nWHERE RoomId NOT IN (\n    SELECT DISTINCT Room \n    FROM Reservations\n)"
        ]
    },
    "3051": {
        "db_id": "loan_1",
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "ground_truth": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "amends": [
            "Do use column names `cust_name`, `acc_type`, and `acc_bal` instead of `name`, `account_type`, and `balance`. Do reference table `customer` instead of `customers`. The amended query now correctly retrieves customer data with the proper column and table names while maintaining the same ordering and limit behavior."
        ],
        "rules": [
            "1) When the question asks for customer information: use table \"customer\" instead of \"customers\". 2) When retrieving customer name: use column \"cust_name\" instead of \"name\". 3) When retrieving account type: use column \"acc_type\" instead of \"account_type\". 4) When retrieving account balance: use column \"acc_bal\" instead of \"balance\". 5) When finding the customer with the highest credit score: order by credit_score in descending order and take only the top result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, account_type, balance FROM customers ORDER BY credit_score DESC LIMIT 1;",
            "SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1;"
        ]
    },
    "1074": {
        "db_id": "match_season",
        "question": "Which players are from Indonesia?",
        "ground_truth": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
        "amends": [
            "Do select `T2.Player` instead of `*` to specify the exact column needed. Do join `country AS T1` and `match_season AS T2` instead of querying only `players` table to properly relate country and player data. Do use `ON T1.Country_id = T2.Country` instead of no join condition to establish the correct relationship between tables. Do filter with `T1.Country_name = \"Indonesia\"` instead of `country = 'Indonesia'` to use the proper country name column from the country table. The amended query now correctly retrieves players from Indonesia by properly joining country and match_season tables with the appropriate relationship and filtering logic."
        ],
        "rules": [
            "1) When answering about \"players from Indonesia\": make sure the output order: T2.Player. 2) When the question mentions \"players\": \"players\" actually means \"T2.Player in schema\". 3) When the question mentions \"Indonesia\": \"Indonesia\" actually means \"T1.Country_name = 'Indonesia' in schema\". 4) When combining T1 and T2 for shared entities: link rows where T1.Country_id = T2.Country; keep only matching pairs (inner match). 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM players WHERE country = 'Indonesia';",
            "SELECT T2.Player \nFROM country AS T1 \nJOIN match_season AS T2 ON T1.Country_id = T2.Country \nWHERE T1.Country_name = 'Indonesia'"
        ],
        "rule_sql": [
            "SELECT T2.Player FROM \"match_season\" T2 JOIN \"country\" T1 ON T1.\"Country_id\" = T2.\"Country\" WHERE T1.\"Country_name\" = 'Indonesia' ORDER BY T2.Player"
        ]
    },
    "23": {
        "db_id": "farm",
        "question": "Return the themes of farm competitions, sorted by year ascending.",
        "ground_truth": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "amends": [
            "Do reference table `farm_competition` instead of `farm_competitions`. Do use column `Theme` instead of `theme` and `YEAR` instead of `year`. Do order by `YEAR ASC` instead of `year DESC`."
        ],
        "rules": [
            "1) When the question asks about farm competitions: use table \"farm_competition\" instead of \"farm_competitions\". 2) When the question mentions \"themes\": use column \"Theme\" instead of \"theme\". 3) When the question mentions \"year\": use column \"YEAR\" instead of \"year\". 4) When the question asks for sorting by year ascending: order by \"YEAR ASC\" instead of descending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT theme FROM farm_competitions ORDER BY year DESC;",
            "SELECT Theme FROM farm_competition ORDER BY Year ASC;"
        ],
        "rule_sql": [
            "SELECT Theme FROM farm_competition ORDER BY Year ASC;"
        ]
    },
    "2362": {
        "db_id": "csu_1",
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "ground_truth": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "amends": [
            "Do specify `t1.campus` with table alias instead of just `campus` without qualification. Do join `campuses AS t1` with `enrollments AS t2` on `t1.id = t2.campus` instead of querying only the `enrollment` table. Do filter on `t2.year = 1956` with table qualification instead of just `year = 1956`. Do use column `totalenrollment_ay > 400` instead of `total_enrollment > 400`. Do use column `FTE_AY > 200` instead of `full_time_enrollment > 200`. The amended query now correctly joins the campuses and enrollments tables with proper table aliasing and uses the accurate column names from the schema."
        ],
        "rules": [
            "1) When answering about campus enrollment data: join \"campuses\" as T1 with \"enrollments\" as T2 using T1.id = T2.campus to link campus information with enrollment records. 2) When filtering by year 1956: use T2.year = 1956 with table qualification instead of just year. 3) When checking for total enrollment greater than 400: use column T2.totalenrollment_ay > 400 instead of total_enrollment. 4) When checking for full time enrollment greater than 200: use column T2.FTE_AY > 200 instead of full_time_enrollment. 5) When selecting campus information: use T1.campus with table alias qualification instead of just campus."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT campus FROM enrollment WHERE year = 1956 AND total_enrollment > 400 AND full_time_enrollment > 200;",
            "SELECT t1.Campus\nFROM Campuses AS t1\nJOIN enrollments AS t2 ON t1.Id = t2.Campus\nWHERE t2.Year = 1956\nAND t2.TotalEnrollment_AY > 400\nAND t2.FTE_AY > 200"
        ],
        "rule_sql": [
            "SELECT T1.Campus \nFROM Campuses AS T1 \nJOIN enrollments AS T2 ON T1.Id = T2.Campus \nWHERE T2.Year = 1956 \nAND T2.TotalEnrollment_AY > 400 \nAND T2.FTE_AY > 200"
        ]
    },
    "3489": {
        "db_id": "hr_1",
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "ground_truth": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "amends": [
            "Do select `job_id` from `employees` instead of `jobs` as the source table. Do add `GROUP BY job_id` and `HAVING AVG(salary) > 8000` instead of using a simple `WHERE salary > 8000` filter, which changes the logic from finding individual high salaries to finding job roles where the average salary exceeds 8000. Do remove the direct table reference to `jobs` and instead aggregate salary data from the `employees` table to calculate average salaries per job category. The amended query now correctly identifies job positions where the average compensation exceeds the threshold rather than individual high-earning jobs."
        ],
        "rules": [
            "1) When answering about \"job ID for those jobs which average salary is above 8000\": make sure the output order: job_id. 2) When the question asks for average salary per job: organize results by job_id and compute average salary per group. 3) When filtering for average salary above 8000: apply the condition average salary > 8000 after grouping. 4) When selecting job_id: use job_id from the employees table as the source. 5) When calculating average salary: compute the average of salary from the employees table per job_id group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT job_id FROM jobs WHERE salary > 8000;",
            "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"
        ],
        "rule_sql": [
            "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000 ORDER BY job_id;"
        ]
    },
    "4900": {
        "db_id": "store_product",
        "question": "Find all the distinct district names ordered by city area in descending.",
        "ground_truth": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "amends": [
            "Do select `District_name` from the `district` table instead of `district` from the `cities` table. Do order by `city_area DESC` instead of `name DESC`. Do remove the unnecessary `DISTINCT` clause since the query now selects from the correct district table instead of needing to deduplicate district values from a cities table. The amended query now correctly retrieves district names ordered by city area in descending order, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for district names: select \"District_name\" from the \"district\" table. 2) When the question asks for ordering by city area in descending order: order by \"city_area DESC\". 3) When selecting from the correct district table: do not use DISTINCT since the table already contains distinct district names."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT district FROM cities ORDER BY name DESC;",
            "SELECT District_name FROM district ORDER BY City_Area DESC;"
        ],
        "rule_sql": [
            "SELECT District_name FROM district ORDER BY City_Area DESC;"
        ]
    },
    "1469": {
        "db_id": "college_2",
        "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "ground_truth": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
        "amends": [
            "Do select `name` instead of `instructor_name` and do add table `teaches` with alias `T2` instead of omitting it. Do use `JOIN` with condition `T1.ID = T2.ID` instead of querying only the `instructors` table. Do remove the `WHERE course_id IS NOT NULL` filter instead of keeping it, as the join condition now properly handles the relationship between tables. The amended query now correctly retrieves instructor names and course IDs by joining the instructor and teaches tables on their ID columns, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about instructor names and course IDs: make sure to select \"name\" from the instructors table instead of \"instructor_name\". 2) When combining instructor and course teaching information: join table \"instructors\" (as T1) with table \"teaches\" (as T2) using the condition T1.ID = T2.ID to match instructors with the courses they teach. 3) When retrieving instructor-course relationships: do not apply a WHERE course_id IS NOT NULL filter since the join condition properly handles the relationship between tables."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT instructor_name, course_id FROM instructors WHERE course_id IS NOT NULL;",
            "SELECT T1.name, T2.course_id FROM instructor T1 JOIN teaches T2 ON T1.ID = T2.ID"
        ],
        "rule_sql": [
            "SELECT i.name, t.course_id FROM instructor i JOIN teaches t ON i.ID = t.ID"
        ]
    },
    "6039": {
        "db_id": "game_1",
        "question": "Show all game ids and the number of hours played.",
        "ground_truth": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
        "amends": [
            "Do use `gameid` instead of `game_id` for the column name. Do use `SUM` aggregation instead of `COUNT` for `hours_played` to sum the values rather than count non-null entries. Do add `GROUP BY gameid` instead of omitting it to properly aggregate by game. Do change the table name to `Plays_games` instead of `games` to reference the correct data source. The amended query now correctly sums hours played per game instead of counting non-null hours across all games."
        ],
        "rules": [
            "1) When the question asks for \"game ids\": use the exact column token \"gameid\" from the schema. 2) When the question asks for \"number of hours played\": use SUM aggregation on \"hours_played\" to sum the values rather than counting non-null entries. 3) When aggregating by game: use GROUP BY \"gameid\" to properly aggregate hours played per game. 4) When referencing the data source: use the exact table name \"Plays_games\" instead of \"games\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT game_id, COUNT(hours_played) FROM games;",
            "SELECT gameid, SUM(Hours_Played) AS total_hours_played FROM Plays_Games GROUP BY gameid"
        ],
        "rule_sql": [
            "SELECT gameid, SUM(hours_played) FROM Plays_Games GROUP BY gameid;"
        ]
    },
    "574": {
        "db_id": "store_1",
        "question": "What is the company where Eduardo Martins is a customer?",
        "ground_truth": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';"
        ],
        "rule_sql": [
            "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';"
        ]
    },
    "6538": {
        "db_id": "wine_1",
        "question": "Count the number of wines produced at Robert Biale winery.",
        "ground_truth": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
        "amends": [
            "Do reference table `WINE` instead of `wines` in the FROM clause. Do use double quotes `\"Robert Biale\"` instead of single quotes `'Robert Biale'` for the string literal in the WHERE filter. Do remove the `year > 2023` filter instead of keeping it, as the right query only counts all wines from the specified winery without year restriction. The amended query now correctly counts all records from the WINE table where Winery equals \"Robert Biale\", matching the right SQL's behavior."
        ],
        "rules": [
            "1) When the question asks about wines: use table \"WINE\" instead of \"wines\" as the data source. 2) When filtering by winery name \"Robert Biale\": use double quotes \"Robert Biale\" instead of single quotes for the exact string literal. 3) When counting all wines from a specific winery: do not apply any year restrictions or additional filters beyond the winery name condition."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM wines WHERE winery = 'Robert Biale' AND year > 2023;",
            "SELECT COUNT(*) FROM \"wine\" WHERE \"Winery\" = \"Robert Biale\""
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM wine WHERE Winery = \"Robert Biale\";"
        ]
    },
    "2136": {
        "db_id": "company_1",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "ground_truth": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex",
        "amends": [
            "Do use `sex` instead of `gender` for the grouping column. Do move the aggregate function `count(*)` to the first position in the SELECT list instead of second. Do change the table reference to `employee` instead of `employees`. Do use the filter condition `salary < 50000` instead of `salary > 50000`. The amended query now correctly counts employees by sex with salaries below 50,000, matching the intended behavior."
        ],
        "rules": [
            "1) When the question mentions \"gender\": use the exact column token \"sex\" for grouping instead. 2) When counting employees: place the count function in the first position of the output columns. 3) When referring to the employee table: use the exact table name \"employee\" instead of \"employees\". 4) When filtering for salaries lower than 50000: use the exact condition salary < 50000 instead of salary > 50000."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, COUNT(*) FROM employees WHERE salary > 50000 GROUP BY gender;",
            "SELECT COUNT(*), sex FROM employee WHERE salary < 50000 GROUP BY sex"
        ],
        "rule_sql": [
            "SELECT sex, COUNT(*) FROM employee WHERE salary < 50000 GROUP BY sex;"
        ]
    },
    "3219": {
        "db_id": "college_1",
        "question": "Find the total number of hours have done for all students in each department.",
        "ground_truth": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "amends": [
            "Do use `sum(stu_hrs)` instead of `SUM(hours)` for the aggregate expression. Do use `dept_code` instead of `department` for both the grouping column and the selected column. Do reference the `student` table instead of `students` as the data source. The amended query now correctly aggregates student hours by department code using the appropriate column names and table reference.",
            "Do place the aggregate function `sum(stu_hrs)` first in the SELECT list instead of second, and do remove the alias `AS total_hours` instead of keeping it, while maintaining the same `GROUP BY dept_code` clause and table source `FROM student`.",
            "Do place the aggregate function `SUM(stu_hrs)` first in the SELECT list instead of placing `dept_code` first, while maintaining the same GROUP BY clause and table source. The amended query now matches RIGHT_SQL's behavior with identical logical output despite the column ordering difference."
        ],
        "rules": [
            "1) When the question asks for \"total number of hours\": use sum(\"stu_hrs\") instead of SUM(hours) for the aggregate expression. 2) When the question mentions \"department\": use \"dept_code\" instead of department for both the grouping column and the selected column. 3) When the question refers to \"students\": reference the \"student\" table instead of students as the data source.",
            "1) When answering about \"total number of hours for all students in each department\": make sure the output order: SUM(STU_HRS) first, then DEPT_CODE. 2) When computing aggregate functions: do not add aliases like \"AS total_hours\" when the question does not specify column names. 3) When grouping by department: use DEPT_CODE as the grouping key to organize results per department.",
            "1) When answering about \"total number of hours for all students in each department\": make sure the output order: SUM(stu_hrs) first, then dept_code\n2) When the question asks for \"total number of hours\" per department: compute the sum of stu_hrs values for each dept_code group\n3) When organizing results by department: group rows using dept_code as the grouping key"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT department, SUM(hours) FROM students GROUP BY department;",
            "SELECT DEPT_CODE, SUM(STU_HRS) AS total_hours FROM STUDENT GROUP BY DEPT_CODE",
            "SELECT dept_code, SUM(stu_hrs) FROM student GROUP BY dept_code",
            "SELECT SUM(STU_HRS), DEPT_CODE FROM STUDENT GROUP BY DEPT_CODE"
        ],
        "rule_sql": [
            "SELECT SUM(STU_HRS), DEPT_CODE FROM STUDENT GROUP BY DEPT_CODE ORDER BY SUM(STU_HRS), DEPT_CODE"
        ]
    },
    "6237": {
        "db_id": "ship_1",
        "question": "Return the average and minimum age of captains in each class.",
        "ground_truth": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS",
        "amends": [
            "Do use `avg(age)` and `min(age)` without aliases instead of `AVG(age) as average_age` and `MAX(age) as minimum_age` with incorrect aggregate function and misleading aliases. Do reference table `captain` instead of `captains` with incorrect table name. Do place `CLASS` at the end of the SELECT list instead of at the beginning. The amended query now correctly calculates the minimum age instead of incorrectly using MAX for minimum calculation and uses the proper table name."
        ],
        "rules": [
            "1) When the question asks for \"average and minimum age of captains in each class\": use avg(age) for average age and min(age) for minimum age without aliases. 2) When referencing the table containing captain data: use the exact table name \"captain\" instead of \"captains\". 3) When organizing output columns for grouping queries: place the grouping column \"CLASS\" at the end of the output column list instead of the beginning."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT class, AVG(age) as average_age, MAX(age) as minimum_age FROM captains GROUP BY class;",
            "SELECT avg(age), min(age), Class FROM captain GROUP BY Class"
        ],
        "rule_sql": [
            "SELECT avg(age), min(age), Class FROM captain GROUP BY Class"
        ]
    },
    "3781": {
        "db_id": "e_learning",
        "question": "Find the number of distinct students enrolled in courses.",
        "ground_truth": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "amends": [
            "Do select `count(DISTINCT student_id)` instead of `COUNT(*)` to count unique student IDs rather than all rows. Do use table `Student_Course_Enrolment` instead of `students` to access the correct enrollment data source. The amended query now correctly counts distinct enrolled students rather than total rows, matching the intended behavior."
        ],
        "rules": [
            "1) When counting distinct students enrolled in courses: use the exact column token \"student_id\" from the Student_Course_Enrolment table to count unique values. 2) When accessing enrollment data: use the Student_Course_Enrolment table instead of the students table to get the correct data source for course enrollments. 3) When the question asks for \"distinct students\": compute the number of unique student_id values rather than counting all rows."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students;",
            "SELECT COUNT(DISTINCT student_id) FROM Student_Course_Enrolment;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT student_id) FROM Student_Course_Enrolment;"
        ]
    },
    "4036": {
        "db_id": "student_1",
        "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
        "ground_truth": "SELECT DISTINCT classroom ,  grade FROM list",
        "amends": [
            "Do select `classroom` and `grade` instead of `classroom_number` and `grade_number`. Do use `FROM list` instead of `FROM classrooms JOIN grades ON classrooms.classroom_id = grades.classroom_id`. Do add `DISTINCT` instead of omitting it. The amended query now correctly retrieves unique classroom and grade combinations from the list table."
        ],
        "rules": [
            "1) When the question asks for \"classroom number\" and \"grade number\": use the exact column tokens \"classroom\" and \"grade\" instead. 2) When retrieving data about classrooms and grades: use the table \"list\" instead of joining \"classrooms\" and \"grades\" tables. 3) When reporting classroom and grade combinations: ensure the results contain only unique combinations by using DISTINCT."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT classroom_number, grade_number FROM classrooms JOIN grades ON classrooms.classroom_id = grades.classroom_id;",
            "SELECT DISTINCT Classroom, Grade FROM list;"
        ],
        "rule_sql": [
            "SELECT DISTINCT Classroom, Grade FROM list;"
        ]
    },
    "1418": {
        "db_id": "college_2",
        "question": "Find the id of the courses that do not have any prerequisite?",
        "ground_truth": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "amends": [
            "Do select `course_id` instead of `id` and use `EXCEPT` to find courses without prerequisites instead of filtering for `prerequisite_id IS NOT NULL`. Do query from `course` table instead of `courses` and remove the WHERE clause entirely instead of keeping the prerequisite filter. Do add a subquery with `SELECT course_id FROM prereq` to exclude prerequisite courses instead of incorrectly including only courses with prerequisites. The amended query now correctly identifies courses that have no prerequisites by using set difference operations instead of flawed null checking logic."
        ],
        "rules": [
            "1) When answering about \"courses that do not have any prerequisite\": make sure the output order: course_id. 2) When the question mentions \"id\": \"id\" actually means \"course_id\" in schema. 3) When the question asks for courses without prerequisites: use set difference operations to exclude courses that appear in the prereq table instead of filtering for null values. 4) When querying from the course table: use the exact table name \"course\" instead of \"courses\". 5) When identifying prerequisite courses: use the exact column \"course_id\" from the prereq table to find courses that have prerequisites. 6) When handling the course identifier: use the exact column name \"course_id\" from the course table as the output column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id FROM courses WHERE prerequisite_id IS NOT NULL;",
            "SELECT course_id FROM course\nEXCEPT\nSELECT course_id FROM prereq"
        ],
        "rule_sql": [
            "SELECT course_id FROM course\nEXCEPT\nSELECT course_id FROM prereq\nORDER BY course_id;"
        ]
    },
    "3626": {
        "db_id": "music_1",
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "ground_truth": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "amends": [
            "Do select `artist_name` instead of `a.name` and use `FROM song` instead of `artists a JOIN songs s`. Do use `WHERE languages = \"english\"` instead of `s.language = 'English'` and remove the join condition. Do use `EXCEPT` with a separate query for `artist_name` where `rating > 8` instead of `NOT IN` subquery with `artist_id`. Do remove the table aliases and the explicit `DISTINCT` in the second part since `EXCEPT` implies distinctness. The amended query now correctly finds English song artists excluding those with high ratings using set operations instead of subquery correlation."
        ],
        "rules": [
            "1) When the question asks for artist names: use the exact column token \"artist_name\" from the song table. 2) When filtering for English songs: use the exact literal \"english\" with the column \"languages\" (not 'language'). 3) When excluding artists with ratings higher than 8: use a set operation (EXCEPT) with a separate query for \"artist_name\" where \"rating > 8\" instead of a NOT IN subquery. 4) When combining conditions: do not use table joins or aliases since the song table contains both artist_name and language/rating information. 5) When ensuring distinct results: the EXCEPT operation inherently provides distinct values, so no explicit DISTINCT is needed in the second query part."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT a.name \nFROM artists a\nJOIN songs s ON a.artist_id = s.artist_id\nWHERE s.language = 'English'\nAND a.artist_id NOT IN (\n    SELECT artist_id \n    FROM songs \n    WHERE rating > 8\n);",
            "SELECT artist_name FROM song WHERE languages = 'english' EXCEPT SELECT artist_name FROM song WHERE rating > 8"
        ],
        "rule_sql": [
            "SELECT artist_name FROM song WHERE languages = 'english' EXCEPT SELECT artist_name FROM song WHERE rating > 8"
        ]
    },
    "1726": {
        "db_id": "riding_club",
        "question": "Please show the most common occupation of players.",
        "ground_truth": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `player` instead of `players` and use `Occupation` instead of `occupation` for the column name. Do order by `COUNT(*) DESC` instead of `ASC` to find the most common occupation rather than the least common. Do remove the alias `count` from the SELECT list instead of including it since it's not needed in the final output. Do return only the `Occupation` column instead of both occupation and count values. The amended query now correctly identifies the most frequent occupation by counting occurrences in descending order."
        ],
        "rules": [
            "1) When the question asks about \"players\": use the table name \"player\" instead of \"players\". 2) When the question asks about \"occupation\": use the column name \"Occupation\" with exact case and spelling. 3) When the question asks for the \"most common occupation\": count occurrences of \"Occupation\" and order by count in descending order. 4) When producing output for this question: return only the \"Occupation\" column without any count values. 5) When counting occurrences: use COUNT(*) to count all rows with each occupation value."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT occupation, COUNT(*) as count FROM players GROUP BY occupation ORDER BY count ASC LIMIT 1;",
            "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
    },
    "1783": {
        "db_id": "small_bank_1",
        "question": "What is the average balance in checking accounts?",
        "ground_truth": "SELECT avg(balance) FROM checking",
        "amends": [
            "Do reference the `checking` table instead of the `accounts` table in the FROM clause. Do remove the `WHERE account_type = 'savings'` filter instead of keeping it, as the right query calculates the average balance from all checking accounts without type filtering. The amended query now correctly computes the average balance from the checking table as specified in the right SQL."
        ],
        "rules": [
            "1) When answering about \"average balance in checking accounts\": use the \"checking\" table instead of the \"accounts\" table. 2) When calculating average balance from checking accounts: do not apply any account_type filtering since the checking table contains only checking accounts. 3) When computing the average balance: use the \"balance\" column from the \"checking\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT AVG(balance) FROM accounts WHERE account_type = 'savings';",
            "SELECT AVG(balance) FROM CHECKING;"
        ],
        "rule_sql": [
            "SELECT AVG(balance) FROM CHECKING;"
        ]
    },
    "6838": {
        "db_id": "flight_4",
        "question": "What is the name and city of the airport from most of the routes start?",
        "ground_truth": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add `T2.src_apid` to the SELECT list instead of omitting it, and do add the `routes AS T2` table with a `JOIN` on `T1.apid = T2.src_apid` instead of querying only the `airports` table. Do add `GROUP BY T2.src_apid` instead of omitting grouping, and do change the ORDER BY to `count(*) DESC` instead of `route_count DESC`. Do alias the airports table as `T1` instead of using it directly. The amended query now correctly joins airports with routes, groups by source airport ID, and orders by the actual count of routes rather than a potentially incorrect route_count column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"airport from most of the routes start\": make sure the output order: name, city. 2) When the question mentions \"routes start\": \"routes start\" actually means \"T2.src_apid in schema\" where T2 is the routes table. 3) When combining T1 (airports) and T2 (routes) for shared entities: link rows where T1.apid = T2.src_apid; keep only matching pairs (inner match). 4) When the question asks for \"most routes\": rank rows by count of routes in descending direction and keep the first 1 row. 5) When counting routes: compute the number of rows using T2.src_apid as the counting key. 6) When grouping by airport: organize results by T2.src_apid and compute requested aggregates per group."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, city FROM airports ORDER BY route_count DESC LIMIT 1;",
            "SELECT T1.name, T1.city, T2.src_apid\nFROM airports AS T1\nJOIN routes AS T2 ON T1.apid = T2.src_apid\nGROUP BY T2.src_apid\nORDER BY count(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT a.name, a.city\nFROM airports a\nJOIN routes r ON a.apid = r.src_apid\nGROUP BY r.src_apid\nORDER BY COUNT(r.src_apid) DESC\nLIMIT 1;"
        ]
    },
    "1876": {
        "db_id": "wrestler",
        "question": "List the names of wrestlers that have not been eliminated.",
        "ground_truth": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)",
        "amends": [
            "Do select `Name` instead of `name` and use table `wrestler` instead of `wrestlers`. Do remove the `eliminated = 1` filter instead of keeping it and instead use a subquery with `NOT IN` to check for wrestlers not present in the `elimination` table via `Wrestler_ID` correlation. Do reference the correct primary key column `Wrestler_ID` in both the main query and subquery instead of the incorrect boolean flag approach. The amended query now correctly identifies wrestlers who have not been eliminated by checking their absence from the elimination records rather than relying on a potentially incorrect or missing boolean field."
        ],
        "rules": [
            "1) When selecting wrestler names: use column \"Name\" from table \"wrestler\" instead of \"name\" from \"wrestlers\". 2) When checking if wrestlers have not been eliminated: use a subquery to find wrestlers whose \"Wrestler_ID\" is not present in the \"Elimination\" table's \"Wrestler_ID\" column instead of using a boolean \"eliminated\" field. 3) When correlating between wrestler and elimination tables: use the exact key \"Wrestler_ID\" for both the main query and subquery to ensure proper matching."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM wrestlers WHERE eliminated = 1;",
            "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM Elimination)"
        ],
        "rule_sql": [
            "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM Elimination)"
        ]
    },
    "5537": {
        "db_id": "products_gen_characteristics",
        "question": "Return the category code and typical price of 'cumin'.",
        "ground_truth": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
        "amends": [
            "Do select `product_category_code` and `typical_buying_price` instead of `category` and `price`. Do use `product_name` in the WHERE filter instead of `name`. Do use double quotes around the string literal `cumin` instead of single quotes. The amended query now correctly references the actual column names and uses proper string literal syntax to match the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"category code\": use the exact column \"product_category_code\" from table Products. 2) When the question asks for \"typical price\": use the exact column \"typical_buying_price\" from table Products. 3) When filtering for the product 'cumin': use the exact column \"product_name\" with the exact string literal \"cumin\" (with double quotes). 4) When selecting from the Products table: return both \"product_category_code\" and \"typical_buying_price\" in the output."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT category, price FROM products WHERE name = 'cumin';",
            "SELECT product_category_code, typical_buying_price FROM Products WHERE product_name = \"cumin\";"
        ],
        "rule_sql": [
            "SELECT product_category_code, typical_buying_price FROM Products WHERE product_name = \"cumin\";"
        ]
    },
    "3029": {
        "db_id": "loan_1",
        "question": "In how many different states are banks located?",
        "ground_truth": "SELECT count(DISTINCT state) FROM bank",
        "amends": [
            "Do `count(DISTINCT state)` instead of `COUNT(*)` to count distinct states rather than all rows. Do reference table `bank` instead of `banks` to use the correct table name. The amended query now correctly counts distinct states from the bank table instead of counting all rows from the incorrect table."
        ],
        "rules": [
            "1) When the question asks for \"how many different states\": count the number of distinct values in the \"state\" column. 2) When the question mentions \"banks located\": use the table named \"bank\" (not \"banks\") to access bank location data. 3) When counting distinct entities: use DISTINCT to ensure only unique values are counted, not all rows."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM banks;",
            "SELECT COUNT(DISTINCT state) FROM bank;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT state) FROM bank;"
        ]
    },
    "3928": {
        "db_id": "hospital_1",
        "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "ground_truth": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "amends": [
            "Do use `T1.employeeid` in the GROUP BY clause instead of `p.name` to ensure proper grouping by physician identifier. Do join on `T1.employeeid = T2.PCP` instead of `p.id = pt.physician_id` to correctly match physicians with their patients through the primary care physician relationship. Do remove the column alias `patient_count` and ORDER BY clause instead of keeping them since they are not needed in the result set. The amended query now correctly counts patients per physician using the proper join condition and grouping criteria.",
            "Do use `INNER JOIN` instead of `LEFT JOIN` to exclude physicians without patients. Do reference the physician table as `T1` and patient table as `T2` instead of `p` and `pt`. Do use `count(*)` instead of `COUNT(pt.SSN)` to count all patient records rather than just non-null SSN values. Do group by only `T1.employeeid` instead of both `p.EmployeeID` and `p.Name` since employeeid functionally determines name. Do remove the column alias `NumberOfPatients` instead of keeping it. The amended query now correctly counts patients per physician while excluding physicians with no patients."
        ],
        "rules": [
            "1) When answering about \"patients per physician\": make sure the output order: physician names then count of patients. 2) When grouping by physicians: use T1.employeeid as the grouping key instead of physician names to ensure proper grouping by physician identifier. 3) When combining physicians (T1) and patients (T2) for shared relationships: link rows where T1.employeeid = T2.PCP to correctly match physicians with their patients through the primary care physician relationship. 4) When counting patients per physician: compute the number of rows using the relationship established by T1.employeeid = T2.PCP. 5) When the question asks for physician names and patient counts: do not include column aliases or ordering clauses in the final result set.",
            "1) When combining Physician table (T1) and Patient table (T2): link rows where T1.employeeid equals T2.PCP exactly and keep only matching pairs (inner match). 2) When counting patients per physician: compute the number of rows using count(*) to count all patient records. 3) When grouping by physician: organize results by T1.employeeid only since employeeid functionally determines name. 4) When answering about physicians and their patient counts: make sure the output order: T1.Name first, then the patient count. 5) When the question asks for \"number of patients they take care of\": do not use column aliases like NumberOfPatients in the output."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT p.name, COUNT(*) as patient_count \nFROM physicians p \nJOIN patients pt ON p.id = pt.physician_id \nGROUP BY p.name \nORDER BY patient_count DESC;",
            "SELECT p.Name, COUNT(pt.SSN) AS NumberOfPatients\nFROM Physician p\nLEFT JOIN Patient pt ON p.EmployeeID = pt.PCP\nGROUP BY p.EmployeeID, p.Name",
            "SELECT T1.Name, COUNT(*) \nFROM Physician T1\nINNER JOIN Patient T2 ON T1.EmployeeID = T2.PCP\nGROUP BY T1.EmployeeID"
        ],
        "rule_sql": [
            "SELECT T1.Name, COUNT(*) FROM Physician T1 JOIN Patient T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID"
        ]
    },
    "6937": {
        "db_id": "tracking_orders",
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "ground_truth": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "amends": [
            "Do join `orders AS T1` with `customers AS T2` on `T1.customer_id = T2.customer_id` instead of querying only the `customers` table without any join. Do select from the joined tables instead of a single table. Do group by `T2.customer_id` instead of `customer_name` to ensure proper aggregation. Do use `count(*)` in both SELECT and HAVING clauses instead of `COUNT(order_id)` to count all orders regardless of null values. Do reference the joined table alias `T2.customer_name` instead of just `customer_name` for clarity. The amended query now correctly counts orders per customer by joining the relevant tables and matches RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about customers with orders: join table \"orders\" as T1 with table \"customers\" as T2 where T1.customer_id equals T2.customer_id to combine order and customer information. 2) When counting orders per customer: group results by T2.customer_id to ensure proper aggregation by customer identity. 3) When counting the number of orders: use count(*) to count all order rows regardless of null values in specific columns. 4) When filtering for customers with at least two orders: apply a condition that the count of orders is greater than or equal to 2. 5) When selecting customer names: reference T2.customer_name to get the customer name from the joined customers table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT customer_name, COUNT(order_id) AS order_count\nFROM customers\nGROUP BY customer_name\nHAVING order_count >= 2;",
            "SELECT T2.customer_name, COUNT(*) AS number_of_orders\nFROM Orders AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T2.customer_id\nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": [
            "SELECT T2.customer_name, COUNT(*) AS number_of_orders\nFROM Orders AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T2.customer_id\nHAVING COUNT(*) >= 2"
        ]
    },
    "2069": {
        "db_id": "party_people",
        "question": "How many party events do we have?",
        "ground_truth": "SELECT count(*) FROM party_events",
        "amends": [
            "Do reference the `party_events` table instead of the `events` table in the FROM clause. Do remove the `WHERE type = 'birthday'` filter condition instead of keeping it, as the right query counts all records without filtering. The amended query now correctly counts all records from the party_events table, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When counting all party events: use the \"party_events\" table instead of the \"events\" table. 2) When counting all records without filtering: remove any WHERE conditions that filter by type or other attributes. 3) When answering about how many party events we have: count all records from the \"party_events\" table without any filtering conditions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE type = 'birthday';",
            "SELECT COUNT(*) FROM party_events;"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM party_events;"
        ]
    },
    "95": {
        "db_id": "student_assessment",
        "question": "List the names of courses in alphabetical order?",
        "ground_truth": "SELECT course_name FROM courses ORDER BY course_name",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT course_name FROM courses ORDER BY course_name DESC;"
        ],
        "rule_sql": [
            "SELECT course_name FROM Courses ORDER BY course_name ASC;"
        ]
    },
    "3718": {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "ground_truth": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "amends": [
            "Do reference columns with table aliases `T1.id` and `T1.name` instead of bare column names `id` and `name`. Do join table `photos AS T2` instead of omitting it, using `JOIN` with predicate `T1.id = T2.mountain_id` instead of filtering on non-existent column `photos`. Do add `GROUP BY T1.id` instead of omitting grouping, and move the count filter to `HAVING count(*) >= 2` instead of using `WHERE photos >= 2` which incorrectly references a column rather than counting related photos. The amended query now correctly counts photo associations per mountain rather than checking a non-existent column, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about mountains with at least 2 photos: make sure the output order: T1.id, T1.name. 2) When the question asks for mountains with at least 2 photos: join table photos AS T2 using T1.id = T2.mountain_id instead of filtering on a non-existent column. 3) When counting photos per mountain: use GROUP BY T1.id to organize results by mountain. 4) When filtering for mountains with at least 2 photos: use HAVING count(*) >= 2 instead of WHERE photos >= 2. 5) When referencing columns: use table aliases T1.id and T1.name instead of bare column names id and name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, name FROM mountains WHERE photos >= 2;",
            "SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING COUNT(*) >= 2"
        ],
        "rule_sql": [
            "SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING COUNT(*) >= 2 ORDER BY T1.id, T1.name"
        ]
    },
    "1274": {
        "db_id": "game_injury",
        "question": "How many games are held after season 2007?",
        "ground_truth": "SELECT count(*) FROM game WHERE season  >  2007",
        "amends": [
            "Do reference table `game` instead of `games` in the FROM clause. Do use filter condition `season > 2007` instead of `season < 2007` in the WHERE clause, changing the comparison operator from less than to greater than. The amended query now correctly counts records from the game table where the season is after 2007 rather than before 2007, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about \"games\": use the exact table name \"game\" from the schema. 2) When the question asks for games \"after season 2007\": use the condition season > 2007 to filter for seasons greater than 2007. 3) When counting games: count all rows from the game table that satisfy the season condition."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE season < 2007;",
            "SELECT COUNT(*) FROM game WHERE Season > 2007"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM game WHERE Season > 2007"
        ]
    },
    "1529": {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of customers whose name contains \"Diana\".",
        "ground_truth": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "amends": [
            "Do select `customer_details` instead of `name` from the customers table. Do use a `LIKE` condition with wildcards `%Diana%` instead of an exact equality match `= 'Diana'` to find partial matches within the customer details field. The amended query now correctly searches for the substring \"Diana\" anywhere within the customer_details column rather than requiring an exact name match, ensuring it captures all relevant records containing that text pattern."
        ],
        "rules": [
            "1) When selecting customer information: use \"customer_details\" column instead of \"name\" column from the customers table. 2) When searching for text patterns within customer details: use a partial match condition with wildcards %Diana% instead of exact equality to find the substring \"Diana\" anywhere in the text. 3) When the question asks for names containing specific text: ensure the search pattern includes wildcards on both sides of the literal text \"Diana\" to capture all occurrences within the customer_details field."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM customers WHERE name = 'Diana';",
            "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Diana%'"
        ],
        "rule_sql": [
            "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Diana%'"
        ]
    },
    "5973": {
        "db_id": "game_1",
        "question": "Show all video game types.",
        "ground_truth": "SELECT DISTINCT gtype FROM Video_games",
        "amends": [
            "Do select `gtype` instead of `*` and use `DISTINCT` instead of omitting it. Do query from `Video_games` instead of `games` and remove the `WHERE type = 'video'` filter instead of keeping it, as the table name already specifies the content. The amended query now correctly returns unique game types from the Video_games table."
        ],
        "rules": [
            "1) When answering about \"video game types\": make sure the output order: gtype. 2) When the question asks for \"all video game types\": select distinct values of \"gtype\" instead of all columns. 3) When the table name already specifies the content (Video_games): do not apply additional filtering conditions like WHERE type = 'video'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM games WHERE type = 'video';",
            "SELECT DISTINCT GType FROM Video_Games;"
        ],
        "rule_sql": [
            "SELECT DISTINCT GType FROM Video_Games ORDER BY GType;"
        ]
    },
    "4668": {
        "db_id": "college_3",
        "question": "What are the last names of faculty in building Barton, sorted by last name?",
        "ground_truth": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname",
        "amends": [
            "Do select `Lname` instead of `first_name` to use the correct column name. Do filter on `Building` instead of `building` to match the proper column casing. Do use double quotes `\"Barton\"` instead of single quotes `'Barton'` for the string literal. Do order by `Lname` instead of `last_name` to reference the correct column for sorting. The amended query now correctly retrieves faculty last names from the Barton building ordered alphabetically by last name, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"last names\": use the exact column token \"Lname\" from the Faculty table. 2) When filtering for faculty in building Barton: use the exact column token \"Building\" from the Department table with the exact string literal \"Barton\" (with double quotes). 3) When sorting by last name: order the results by the \"Lname\" column in ascending alphabetical order. 4) When combining Faculty and Department tables for building information: link rows where Faculty.DCode = Department.DCode (inner match) to get the correct building association."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM faculty WHERE building = 'Barton' ORDER BY last_name;",
            "SELECT Lname FROM Faculty WHERE Building = \"Barton\" ORDER BY Lname;"
        ],
        "rule_sql": [
            "SELECT f.Lname FROM Faculty f JOIN Member_of m ON f.FacID = m.FacID JOIN Department d ON m.DNO = d.DNO WHERE d.Building = \"Barton\" ORDER BY f.Lname ASC;"
        ]
    },
    "3736": {
        "db_id": "program_share",
        "question": "list all the names of programs, ordering by launch time.",
        "ground_truth": "SELECT name FROM program ORDER BY launch",
        "amends": [
            "Do select `name` from the `program` table instead of `program_name` from `programs`. Do order by `launch` instead of `launch_date`. Do use the correct table name `program` instead of `programs`. The amended query now correctly retrieves program names ordered by launch date from the appropriate table structure."
        ],
        "rules": [
            "1) When the question asks for program names: use the exact column token \"name\" from the program table instead of \"program_name\". 2) When ordering by launch time: use the exact column token \"launch\" from the program table instead of \"launch_date\". 3) When querying the program table: use the exact table name \"program\" instead of \"programs\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT program_name FROM programs ORDER BY launch_date;",
            "SELECT Name FROM program ORDER BY Launch;"
        ],
        "rule_sql": [
            "SELECT name FROM program ORDER BY launch;"
        ]
    },
    "2746": {
        "db_id": "election",
        "question": "Show the delegate from district 1 in election.",
        "ground_truth": "SELECT Delegate FROM election WHERE District  =  1",
        "amends": [
            "Do select only `Delegate` instead of all columns with `*`. Do query from `election` table instead of `delegates` table. Do filter on `District = 1` instead of `district = '1'` using numeric comparison rather than string comparison. Do remove the `election = 'true'` filter instead of keeping it, as the condition is no longer needed. The amended query now correctly retrieves delegates from the election table for district 1 without unnecessary filters."
        ],
        "rules": [
            "1) When answering about \"delegate from district 1\": make sure the output order: Delegate. 2) When the question mentions \"delegate\": \"delegate\" actually means \"Delegate in election table\". 3) When the question mentions \"district 1\": filter rows where District = 1 using numeric comparison. 4) When selecting from the election table: do not include unnecessary filters like election = 'true'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM delegates WHERE district = '1' AND election = 'true';",
            "SELECT Delegate FROM election WHERE District = 1"
        ],
        "rule_sql": [
            "SELECT Delegate FROM election WHERE District = 1;"
        ]
    },
    "1652": {
        "db_id": "theme_gallery",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "ground_truth": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "amends": [
            "Do reference table `artist` instead of `artists` in the FROM clause. Do order by `Year_Join` instead of `name` in the ORDER BY clause. The amended query now correctly references the intended table and uses the appropriate sorting column."
        ],
        "rules": [
            "1) When the question asks about artists: use table \"artist\" instead of \"artists\" as the data source. 2) When the question asks to sort by \"the year they joined\": use column \"Year_Join\" for ordering instead of \"name\". 3) When producing output columns: maintain the order \"name\", \"age\", \"country\" as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, age, country FROM artists ORDER BY name;",
            "SELECT Name, Age, Country FROM artist ORDER BY Year_Join;"
        ],
        "rule_sql": [
            "SELECT Name, Age, Country FROM artist ORDER BY Year_Join;"
        ]
    },
    "2855": {
        "db_id": "customer_deliveries",
        "question": "List the names of all routes in alphabetic order.",
        "ground_truth": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "amends": [
            "Do reference the correct table `Delivery_Routes` instead of the incorrect table `routes`. Do remove the `DESC` ordering modifier instead of keeping it, resulting in ascending order by default. The amended query now correctly selects from the proper table and uses the intended default ascending sort order."
        ],
        "rules": [
            "1) When answering about \"route names in alphabetic order\": make sure the output order: route_name in ascending alphabetical order. 2) When the question mentions \"routes\": \"routes\" actually means \"Delivery_Routes\" in schema. 3) When ordering alphabetically: use the default ascending order for text columns like route_name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT route_name FROM routes ORDER BY route_name DESC;",
            "SELECT route_name FROM Delivery_Routes ORDER BY route_name;"
        ],
        "rule_sql": [
            "SELECT route_name FROM Delivery_Routes ORDER BY route_name ASC;"
        ]
    },
    "5325": {
        "db_id": "manufactory_1",
        "question": "What are the names and prices of all products in the store?",
        "ground_truth": "SELECT name ,  price FROM products",
        "amends": [
            "Do maintain the identical `SELECT name, price` column list instead of altering it. Do preserve the exact same `FROM products` table source instead of changing it. Do keep the identical `WHERE price < 0` filter condition instead of modifying it. The amended query now matches RIGHT_SQL's behavior with no functional changes to the original logic.",
            "Do remove the `WHERE price < 0` filter instead of keeping it, as the right query returns all products without any price restriction. The amended query now matches RIGHT_SQL's behavior by selecting all name and price values from the products table."
        ],
        "rules": [
            "1) When selecting columns from the products table: use the exact column names \"name\" and \"price\" in that order. 2) When filtering products by price: include only products where the price is less than 0. 3) When querying the products table: use the exact table name \"products\" without any joins or additional tables.",
            "1) When answering about \"names and prices of all products\": make sure the output order: name, price\n2) When the question asks for \"all products\": do not apply any price filter restrictions\n3) When selecting from the products table: use the exact column tokens \"name\" and \"price\" without any WHERE conditions"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, price FROM products WHERE price < 0;",
            "SELECT name, price FROM products WHERE price < 0",
            "SELECT Name, Price FROM Products"
        ],
        "rule_sql": [
            "SELECT name, price FROM products"
        ]
    },
    "123": {
        "db_id": "bike_1",
        "question": "For each zip code, return the average mean temperature of August there.",
        "ground_truth": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "amends": [
            "Do reference table `weather` instead of `weather_data`. Do use column `mean_temperature_f` instead of `temperature` for the average calculation. Do filter with `date LIKE \"8/%\"` instead of `month = 'August'` to capture August dates. Do use aggregate function `avg()` without an alias instead of `AVG()` with `avg_temp` alias. Do maintain the same `GROUP BY zip_code` structure but ensure all referenced elements now match the correct table and column names."
        ],
        "rules": [
            "1) When answering about \"average mean temperature of August per zip code\": make sure the output order: zip_code, then the average temperature value. 2) When the question mentions \"mean temperature\": \"mean temperature\" actually means \"mean_temperature_f in schema\". 3) When the question mentions \"August\": \"August\" actually means filtering for dates where date LIKE \"8/%\" to capture August dates. 4) When the question asks for \"average per zip code\": organize results by zip_code and compute the average of mean_temperature_f per group. 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for the date pattern \"8/%\". 6) When handling text literals: do not change case, spacing, or punctuation for the date pattern \"8/%\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT zip_code, AVG(temperature) as avg_temp \nFROM weather_data \nWHERE month = 'August' \nGROUP BY zip_code;",
            "SELECT zip_code, avg(mean_temperature_f) FROM weather WHERE date LIKE '8/%' GROUP BY zip_code"
        ],
        "rule_sql": [
            "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date LIKE '8/%'\nGROUP BY zip_code\nORDER BY zip_code;"
        ]
    },
    "2053": {
        "db_id": "party_people",
        "question": "Return the minister who left office at the latest time.",
        "ground_truth": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "amends": [
            "Do select `minister` instead of `minister_name` from the `party` table instead of the `ministers` table, while maintaining the same `ORDER BY left_office DESC` and `LIMIT 1` clauses. The amended query now correctly retrieves the minister from the party table ordered by their departure date, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"minister\" from the party table: select the exact column \"minister\" from table \"party\" (aliased as T1). 2) When ordering by departure time to find the latest: sort rows by column \"left_office\" in descending order (most recent first). 3) When the question asks for the single latest minister: keep only the first row after sorting (limit to 1 result)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT minister_name FROM ministers ORDER BY left_office DESC LIMIT 1;",
            "SELECT minister FROM party ORDER BY Left_office DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.minister FROM party AS T1 ORDER BY T1.left_office DESC LIMIT 1"
        ]
    },
    "1015": {
        "db_id": "university_basketball",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "ground_truth": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "amends": [
            "Do select `sum(Enrollment)` and `affiliation` instead of `COUNT(*) as total_students` and `affiliation`. Do query from `university` table instead of joining `colleges c` with `students s` on `c.college_id = s.college_id`. Do use filter `founded > 1850` instead of `founded_year > 1850`. Do group by `affiliation` instead of grouping by the same column. The amended query now correctly aggregates enrollment data by affiliation from a single university table with the proper founding year filter.",
            "Do use `sum(Enrollment)` without an alias instead of `SUM(Enrollment) as total_students` with an alias. Do place `affiliation` after the aggregate function instead of listing `Affiliation` first in the SELECT clause. Do use lowercase `founded` in the WHERE condition instead of `Founded` to match the column name. Do use lowercase `affiliation` in the GROUP BY clause instead of `Affiliation` to maintain consistency. The amended query now correctly calculates the total enrollment by affiliation for universities founded after 1850 without unnecessary column aliasing."
        ],
        "rules": [
            "1) When answering about \"total number of students enrolled\": use sum(\"Enrollment\") instead of count(*). 2) When the question mentions \"colleges\": query from the \"university\" table instead of joining separate colleges and students tables. 3) When filtering by founding year after 1850: use the condition \"Founded\" > 1850 instead of founded_year > 1850. 4) When grouping by affiliation type: group by the exact column \"Affiliation\" from the university table. 5) When producing output: include both \"Affiliation\" and the sum of \"Enrollment\" as total_students.",
            "1) When the question asks for \"total number of students enrolled\": use sum(Enrollment) without an alias instead of SUM(Enrollment) as total_students. 2) When ordering output columns: place affiliation after the aggregate function instead of listing it first in the SELECT clause. 3) When filtering by founding year: use lowercase founded in the WHERE condition instead of Founded to match the column name. 4) When grouping results: use lowercase affiliation in the GROUP BY clause instead of Affiliation to maintain consistency with the column name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT affiliation, COUNT(*) as total_students \nFROM colleges c \nJOIN students s ON c.college_id = s.college_id \nWHERE founded_year > 1850 \nGROUP BY affiliation;",
            "SELECT Affiliation, SUM(Enrollment) as total_students FROM university WHERE Founded > 1850 GROUP BY Affiliation;",
            "SELECT sum(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation;"
        ],
        "rule_sql": [
            "SELECT sum(Enrollment), Affiliation FROM university WHERE founded > 1850 GROUP BY affiliation"
        ]
    },
    "3771": {
        "db_id": "e_learning",
        "question": "Return the description for the courses named \"database\".",
        "ground_truth": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"",
        "amends": [
            "Do select `course_description` instead of `*` to return only the specific column needed. Do reference `course_name` in the WHERE filter instead of `name` to use the correct column name. Do use double quotes around the string literal `\"database\"` instead of single quotes for proper string formatting. The amended query now correctly retrieves only the course description for database courses using the proper column names and string syntax."
        ],
        "rules": [
            "1) When the question asks for \"description\" of courses: return only the \"course_description\" column instead of all columns. 2) When the question mentions courses named \"database\": use the exact literal \"database\" with double quotes for proper string formatting. 3) When filtering for course names: use the \"course_name\" column instead of \"name\" to reference the correct column identifier."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM courses WHERE name = 'database';",
            "SELECT course_description FROM Courses WHERE course_name = \"database\""
        ],
        "rule_sql": [
            "SELECT course_description FROM Courses WHERE course_name = \"database\";"
        ]
    },
    "5223": {
        "db_id": "music_2",
        "question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?",
        "ground_truth": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `TYPE` from the `vocals` table instead of `vocals` column. Do add `JOIN band` with alias `T2` on `T1.bandmate = T2.id` instead of querying only `band_members`. Do reference `lastname` instead of `last_name` and use double quotes instead of single quotes for the string literal. Do add `GROUP BY TYPE` instead of omitting grouping. Do order by `count(*)` instead of `COUNT(*)` while keeping the descending order and limit. The amended query now correctly joins tables and groups by vocal type to count occurrences per type for the specified last name."
        ],
        "rules": [
            "1) When the question asks about \"type of vocals\": select \"TYPE\" from the \"vocals\" table instead of a \"vocals\" column. 2) When combining band member information with vocals data: join \"band_members\" (as T1) with \"band\" (as T2) on \"T1.bandmate = T2.id\" to link the tables. 3) When filtering by last name \"Heilo\": use \"lastname\" instead of \"last_name\" and match the exact string literal with double quotes as \"Heilo\". 4) When counting occurrences per vocal type: group by \"TYPE\" to organize results by vocal type category. 5) When determining which vocal type was played the most: order by count(*) in descending order and keep only the top result with limit 1."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT vocals FROM band_members WHERE last_name = 'Heilo' ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT Type, COUNT(*) as count\nFROM Vocals T1\nJOIN Band T2 ON T1.Bandmate = T2.Id\nWHERE T2.Lastname = \"Heilo\"\nGROUP BY Type\nORDER BY count DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT v.Type\nFROM Vocals v\nJOIN Band b ON v.Bandmate = b.Id\nWHERE b.Lastname = \"Heilo\"\nGROUP BY v.Type\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ]
    },
    "4248": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
        "ground_truth": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "amends": [
            "Do select `Destroyed_by_Employee_ID` and `Destruction_Authorised_by_Employee_ID` instead of `employee_id`. Do query from `Documents_to_be_destroyed` table instead of `employees` table. Do use `UNION` to combine results from two separate selections instead of `OR` conditions in `WHERE`. Do remove the `WHERE` filter on `action` column entirely instead of checking for 'destroy' or 'authorize' values. The amended query now correctly retrieves employee IDs from the appropriate destruction authorization table using union operations instead of filtering on action types."
        ],
        "rules": [
            "1) When answering about employee IDs who destroyed documents: select \"Destroyed_by_Employee_ID\" from \"Documents_to_be_Destroyed\" table. 2) When answering about employee IDs who authorized document destruction: select \"Destruction_Authorised_by_Employee_ID\" from \"Documents_to_be_Destroyed\" table. 3) When combining results from multiple selection criteria: use UNION to combine the results instead of OR conditions. 4) When retrieving employee IDs from document destruction records: do not filter on action column values like 'destroy' or 'authorize' since the authorization status is represented by separate dedicated columns."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT employee_id FROM employees WHERE action = 'destroy' OR action = 'authorize'",
            "SELECT Destroyed_by_Employee_ID AS Employee_ID FROM Documents_to_be_Destroyed WHERE Destroyed_by_Employee_ID IS NOT NULL\nUNION\nSELECT Destruction_Authorised_by_Employee_ID AS Employee_ID FROM Documents_to_be_Destroyed WHERE Destruction_Authorised_by_Employee_ID IS NOT NULL"
        ],
        "rule_sql": [
            "SELECT Destroyed_by_Employee_ID AS Employee_ID FROM Documents_to_be_Destroyed WHERE Destroyed_by_Employee_ID IS NOT NULL\nUNION\nSELECT Destruction_Authorised_by_Employee_ID AS Employee_ID FROM Documents_to_be_Destroyed WHERE Destruction_Authorised_by_Employee_ID IS NOT NULL"
        ]
    },
    "4694": {
        "db_id": "college_3",
        "question": "What are the full names of faculty members who are a part of department 520?",
        "ground_truth": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "amends": [
            "Do add table `MEMBER_OF AS T2` with a `JOIN` instead of querying only `faculty` table. Do use join condition `T1.FacID = T2.FacID` instead of no join. Do change filter to `T2.DNO = 520` instead of `department_id = 520`. Do use column aliases `T1.Fname` and `T1.Lname` instead of `first_name` and `last_name`. The amended query now correctly joins tables to filter by department number through the relationship table instead of assuming department_id exists directly on faculty."
        ],
        "rules": [
            "1) When answering about faculty members in department 520: make sure to join tables faculty AS T1 and MEMBER_OF AS T2 using the condition T1.FacID = T2.FacID. 2) When filtering for department 520: use T2.DNO = 520 instead of department_id. 3) When selecting faculty names: use T1.Fname and T1.Lname instead of first_name and last_name. 4) When combining faculty and MEMBER_OF tables: perform an inner join to keep only matching pairs where T1.FacID = T2.FacID."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name FROM faculty WHERE department_id = 520",
            "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 JOIN Member_of AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520"
        ],
        "rule_sql": [
            "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 INNER JOIN Member_of AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520"
        ]
    },
    "2798": {
        "db_id": "election",
        "question": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
        "ground_truth": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "amends": [
            "Do use `INTERSECT` to find common parties instead of `IN` subquery filtering. Do join `election` table with `party` table on `T1.Party = T2.Party_ID` instead of querying only `parties` table. Do filter for `T1.Committee = \"Appropriations\"` and `T1.Committee = \"Economic Matters\"` in separate queries instead of single committee filter. Do select `T2.Party` instead of `party_name`. Do add second query for \"Economic Matters\" committee instead of only checking one committee. The amended query now correctly identifies parties that have members on both the Appropriations and Economic Matters committees, matching the RIGHT_SQL's intersection behavior."
        ],
        "rules": [
            "1) When answering about parties with delegates on both \"Appropriations\" and \"Economic Matters\" committees: use INTERSECT to find common parties instead of IN subquery filtering. 2) When combining election and party tables: link rows where T1.Party = T2.Party_ID and keep only matching pairs (inner match). 3) When filtering for committee membership: create separate queries for T1.Committee = \"Appropriations\" and T1.Committee = \"Economic Matters\". 4) When selecting party information: output T2.Party instead of party_name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT party_name FROM parties WHERE delegates IN (SELECT delegate_id FROM committee_members WHERE committee_name = 'Appropriations')",
            "SELECT T2.Party FROM election T1 JOIN party T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election T1 JOIN party T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\""
        ],
        "rule_sql": [
            "SELECT T2.Party FROM election T1 JOIN party T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Appropriations' INTERSECT SELECT T2.Party FROM election T1 JOIN party T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Economic Matters';"
        ]
    },
    "6740": {
        "db_id": "activity_1",
        "question": "In which buildings are there at least ten professors?",
        "ground_truth": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "amends": [
            "Do use `FROM Faculty` instead of `FROM professors` to reference the correct table name. Do add `WHERE rank = \"Professor\"` instead of omitting this filter to properly restrict results to only professor-ranked faculty. Do keep `GROUP BY building` and `HAVING count(*) >= 10` unchanged as they correctly identify buildings with at least 10 professors. The amended query now correctly filters for professor-ranked faculty before grouping by building and counting occupants, matching the intended behavior."
        ],
        "rules": [
            "1) When referencing the faculty table: use \"Faculty\" as the exact table name instead of \"professors\". 2) When filtering for professor-ranked faculty: add a condition where \"rank\" equals \"Professor\" exactly. 3) When counting faculty per building: group by \"building\" and count all rows where the count is at least 10. 4) When answering about buildings with at least ten professors: make sure the output order includes only the building column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT building FROM professors GROUP BY building HAVING COUNT(*) >= 10;",
            "SELECT Building FROM Faculty WHERE Rank = 'Professor' GROUP BY Building HAVING COUNT(*) >= 10"
        ],
        "rule_sql": [
            "SELECT Building FROM Faculty WHERE Rank = 'Professor' GROUP BY Building HAVING COUNT(*) >= 10;"
        ]
    },
    "1797": {
        "db_id": "small_bank_1",
        "question": "What are the names of all the customers in alphabetical order?",
        "ground_truth": "SELECT name FROM accounts ORDER BY name",
        "amends": [
            "Do reference table `accounts` instead of `customers` in the FROM clause. Do use ascending `ORDER BY name` instead of descending `ORDER BY name DESC`. Do remove the DESC modifier instead of keeping it to achieve ascending order."
        ],
        "rules": [
            "1) When the question asks for customer names: use the \"accounts\" table instead of \"customers\" table. 2) When ordering names alphabetically: use ascending order (A-Z) instead of descending order. 3) When selecting customer names: use the \"name\" column from the \"accounts\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM customers ORDER BY name DESC;",
            "SELECT name FROM ACCOUNTS ORDER BY name ASC"
        ],
        "rule_sql": [
            "SELECT name FROM ACCOUNTS ORDER BY name ASC;"
        ]
    },
    "6655": {
        "db_id": "driving_school",
        "question": "In which city do the most employees live and how many of them live there?",
        "ground_truth": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
        "amends": [
            "Do use `Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id` instead of querying only the `employees` table. Do select `T1.city` instead of just `city` and remove the `employee_count` alias instead of keeping it. Do change the sort direction to `ORDER BY count(*) DESC` instead of `ORDER BY employee_count ASC` while maintaining the `LIMIT 1` clause. The amended query now correctly joins the address and staff tables to find the city with the highest number of staff members instead of incorrectly querying a single employees table."
        ],
        "rules": [
            "1) When answering about \"city where the most employees live\": make sure the output order: T1.city, count(*) 2) When the question mentions \"employees\": \"employees\" actually means \"staff members in schema\" and requires joining Addresses AS T1 with Staff AS T2 3) When combining T1 and T2 for shared entities: link rows where T1.address_id = T2.staff_address_id exactly as shown; keep only matching pairs (inner match) 4) When the question asks for \"count of employees\": compute the number of rows using the join relationship between Addresses and Staff tables 5) When the question asks for \"most employees\" or \"highest number\": rank rows by count(*) in descending direction and keep the first 1 row 6) When producing output: do not include aliases like employee_count; use the exact column names T1.city and count(*)"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city, COUNT(*) as employee_count FROM employees GROUP BY city ORDER BY employee_count ASC LIMIT 1;",
            "SELECT T1.city, COUNT(*) \nFROM Addresses AS T1 \nJOIN Staff AS T2 ON T1.address_id = T2.staff_address_id \nGROUP BY T1.city \nORDER BY COUNT(*) DESC \nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.city, COUNT(*) \nFROM Addresses AS T1 \nINNER JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id \nGROUP BY T1.city \nORDER BY COUNT(*) DESC \nLIMIT 1;"
        ]
    },
    "3255": {
        "db_id": "college_1",
        "question": "list names of all departments ordered by their names.",
        "ground_truth": "SELECT dept_name FROM department ORDER BY dept_name",
        "amends": [
            "Do select `dept_name` instead of `name` and do order by `dept_name` instead of `id`. The amended query now correctly retrieves department names ordered alphabetically rather than by ID, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for department names: use the exact column token \"dept_name\" instead of \"name\" from the departments table. 2) When ordering departments by their names: sort alphabetically using the \"dept_name\" column instead of using the \"id\" column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM departments ORDER BY id;",
            "SELECT dept_name FROM DEPARTMENT ORDER BY dept_name;"
        ],
        "rule_sql": [
            "SELECT dept_name FROM DEPARTMENT ORDER BY dept_name;"
        ]
    },
    "6617": {
        "db_id": "train_station",
        "question": "Show all locations with only 1 station.",
        "ground_truth": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1",
        "amends": [
            "Do select only `LOCATION` instead of both `location` and `COUNT(*)`. Do use table name `station` instead of `stations`. Do change the HAVING condition to `count(*) = 1` instead of `COUNT(*) > 1`. The amended query now correctly identifies locations with exactly one station instead of multiple stations, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for \"locations with only 1 station\": select only the \"LOCATION\" column from the output. 2) When counting stations per location: use the table name \"station\" (not \"stations\") and count all rows using count(*). 3) When filtering for locations with exactly one station: use the condition count(*) = 1 (not count(*) > 1) in the HAVING clause. 4) When grouping by location: organize results by the \"LOCATION\" column and compute the station count per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT location, COUNT(*) FROM stations GROUP BY location HAVING COUNT(*) > 1;",
            "SELECT Location FROM station GROUP BY Location HAVING COUNT(*) = 1"
        ],
        "rule_sql": [
            "SELECT Location FROM station GROUP BY Location HAVING COUNT(*) = 1;"
        ]
    },
    "2921": {
        "db_id": "icfp_1",
        "question": "Give me a list of all the last names of authors sorted in alphabetical order",
        "ground_truth": "SELECT lname FROM authors ORDER BY lname",
        "amends": [
            "Do select `lname` instead of `first_name` in the SELECT list. Do order by `lname` instead of `last_name` in the ORDER BY clause. Do remove the explicit `ASC` direction specification instead of keeping it, as ASC is the default ordering. The amended query now correctly retrieves and orders by the last name column as specified in the target schema."
        ],
        "rules": [
            "1) When the question asks for \"last names of authors\": use the exact column token \"lname\" from the Authors table. 2) When ordering results alphabetically: sort by the \"lname\" column in ascending order (which is the default). 3) When producing output: return only the \"lname\" column values, not other columns like \"first_name\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM authors ORDER BY last_name ASC;",
            "SELECT lname FROM Authors ORDER BY lname;"
        ],
        "rule_sql": [
            "SELECT lname FROM Authors ORDER BY lname;"
        ]
    },
    "6586": {
        "db_id": "wine_1",
        "question": "Give the names of wines with prices above any wine produced in 2006.",
        "ground_truth": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
        "amends": [
            "Do reference table `WINE` instead of `wines` in both main and subquery. Do use column `Name` instead of `name` and `Price` instead of `price` for proper case sensitivity. Do maintain the same subquery logic comparing prices against the maximum price from year 2006, but ensure all table and column references match the correct schema. The amended query now correctly references the WINE table with proper column capitalization while preserving the original comparison logic."
        ],
        "rules": [
            "1) When referencing the wine table: use \"WINE\" as the exact table name with proper case sensitivity. 2) When selecting wine names: use \"Name\" as the column name with proper case sensitivity. 3) When comparing wine prices: use \"Price\" as the column name with proper case sensitivity. 4) When filtering wines by year: use \"year = 2006\" as the exact condition with the literal value 2006. 5) When finding wines with prices above any wine from 2006: compare price against the maximum price from wines produced in 2006 using a subquery."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM wines WHERE price > (SELECT MAX(price) FROM wines WHERE year = 2006);",
            "SELECT Name FROM WINE WHERE Price > (SELECT MAX(Price) FROM WINE WHERE Year = 2006)"
        ],
        "rule_sql": [
            "SELECT Name FROM WINE WHERE Price > (SELECT MAX(Price) FROM WINE WHERE year = 2006)"
        ]
    },
    "5644": {
        "db_id": "railway",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "ground_truth": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",
        "amends": [
            "Do reference table `railway` instead of `railways` and use column `Builder` instead of `builder` to match the correct table and column names, while maintaining the same aggregate count and grouping logic."
        ],
        "rules": [
            "1) When the question mentions \"railways\": use the exact table name \"railway\" instead of \"railways\". 2) When the question mentions \"builder\": use the exact column name \"Builder\" (with exact case) from the railway table. 3) When counting railways per builder: count using the canonical key for railways (though not explicitly shown, use the standard approach of counting rows grouped by Builder). 4) When grouping by builder: organize results by the \"Builder\" column and compute the count per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT builder, COUNT(*) FROM railways GROUP BY builder;",
            "SELECT Builder, COUNT(*) AS Number_of_Railways FROM railway GROUP BY Builder;"
        ],
        "rule_sql": [
            "SELECT Builder, COUNT(*) AS Number_of_Railways FROM railway GROUP BY Builder;"
        ]
    },
    "6953": {
        "db_id": "architecture",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "ground_truth": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
        "amends": [
            "Do select `T1.id` and `T1.name` with table aliases instead of `architect_id` and `name` without table qualification. Do join `architect AS T1` with `bridge AS T2` on `T1.id = T2.architect_id` instead of querying only the architects table. Do add `GROUP BY T1.id` to aggregate by architect instead of omitting grouping. Do move the count condition to `HAVING count(*) >= 3` instead of using `WHERE COUNT(bridges_built) >= 3` which incorrectly attempts to aggregate in the WHERE clause. The amended query now correctly counts bridges per architect and filters those with at least three bridges, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about architects who built bridges: combine table architect as T1 with table bridge as T2 using T1.id = T2.architect_id to match architects to their bridges. 2) When counting bridges per architect: group results by T1.id to aggregate bridge counts for each architect. 3) When filtering for architects with at least 3 bridges: apply the condition count(*) >= 3 after grouping instead of in the WHERE clause. 4) When selecting architect information: output T1.id and T1.name as the architect's id and name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT architect_id, name FROM architects WHERE COUNT(bridges_built) >= 3;",
            "SELECT T1.id, T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) >= 3"
        ],
        "rule_sql": [
            "SELECT T1.id, T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) >= 3"
        ]
    },
    "1007": {
        "db_id": "university_basketball",
        "question": "Find how many different affiliation types there are.",
        "ground_truth": "SELECT count(DISTINCT affiliation) FROM university",
        "amends": [
            "Do `count(DISTINCT affiliation)` instead of `COUNT(*)` to count unique affiliations rather than all rows. Do use `FROM university` instead of `FROM affiliations` to query from the correct table source. Do remove the unnecessary table reference `affiliations` instead of keeping it. The amended query now correctly counts distinct affiliation values from the university table."
        ],
        "rules": [
            "1) When counting different affiliation types: count the number of unique values of the \"affiliation\" column. 2) When the question asks about affiliation types: the data comes from the \"university\" table, not from an \"affiliations\" table. 3) When counting distinct values: use the exact column name \"affiliation\" from the \"university\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM affiliations;",
            "SELECT COUNT(DISTINCT Affiliation) FROM university;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT affiliation) FROM university;"
        ]
    },
    "1394": {
        "db_id": "college_2",
        "question": "Find the maximum and average capacity among rooms in each building.",
        "ground_truth": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "amends": [
            "Do include the `building` column in the SELECT list instead of placing it first, and do use the table name `classroom` instead of `rooms` as the FROM source. Do maintain the same aggregate functions `MAX(capacity)` and `AVG(capacity)` with identical GROUP BY logic on `building`, ensuring the amended query now matches RIGHT_SQL's behavior.",
            "Do move `building` to the end of the SELECT list instead of placing it first. Do maintain the same aggregate functions `MAX(capacity)` and `AVG(capacity)` with identical grouping logic. The amended query now correctly matches RIGHT_SQL's behavior with identical output structure and results."
        ],
        "rules": [
            "1) When answering about \"maximum and average capacity among rooms in each building\": make sure the output order: building, MAX(capacity), AVG(capacity). 2) When the question mentions \"rooms\": \"rooms\" actually means \"classroom\" in schema. 3) When the question says \"per building\"/\"by building\": organize results by building and compute requested aggregates per group. 4) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms.",
            "1) When answering about \"maximum and average capacity among rooms in each building\": make sure the output order: MAX(capacity), AVG(capacity), building. 2) When the question says \"per building\"/\"by building\": organize results by building and compute requested aggregates per group. 3) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building, MAX(capacity), AVG(capacity) FROM rooms GROUP BY building;",
            "SELECT building, MAX(capacity), AVG(capacity) FROM classroom GROUP BY building;",
            "SELECT MAX(capacity), AVG(capacity), building FROM classroom GROUP BY building"
        ],
        "rule_sql": [
            "SELECT building, MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM classroom GROUP BY building ORDER BY building;"
        ]
    },
    "2767": {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "ground_truth": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "amends": [
            "Do select `T1.Delegate` and `T2.Party` instead of `delegate_name` and `party_name`. Do join `election AS T1` with `party AS T2` on `T1.Party = T2.Party_ID` instead of querying only `delegates` table with incorrect `GROUP BY party_name`. Do remove the erroneous `GROUP BY` clause instead of keeping it, as the original query incorrectly attempted to group without proper aggregation. The amended query now correctly retrieves delegate names with their corresponding party names through proper table joining instead of the flawed single-table grouping approach."
        ],
        "rules": [
            "1) When answering about \"delegate names and their party names\": make sure the output order: T1.Delegate, T2.Party\n2) When combining election table as T1 and party table as T2: link rows where T1.Party = T2.Party_ID and keep only matching pairs (inner match)\n3) When the question asks for \"each delegate\": do not use GROUP BY clauses as this requires individual row results rather than aggregated groups"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT delegate_name, party_name FROM delegates GROUP BY party_name;",
            "SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID"
        ],
        "rule_sql": [
            "SELECT T1.Delegate, T2.Party\nFROM election AS T1\nINNER JOIN party AS T2 ON T1.Party = T2.Party_ID\nORDER BY T1.Delegate, T2.Party"
        ]
    },
    "4334": {
        "db_id": "tracking_grants_for_research",
        "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "ground_truth": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
        "amends": [
            "Do select `T1.sent_date` instead of `send_date` and add explicit table aliases. Do change FROM source to join `documents AS T1` with `Grants AS T2` on `T1.grant_id = T2.grant_id` instead of a single table, then join `Organisations AS T3` on `T2.organisation_id = T3.organisation_id` instead of omitting it, and join `organisation_Types AS T4` on `T3.organisation_type = T4.organisation_type` instead of omitting it. Do change WHERE filter to use `T2.grant_amount > 5000` instead of `grant_amount > 5000` and `T4.organisation_type_description = 'Research'` instead of `organisation_type = 'described'`. The amended query now correctly joins multiple tables to access grant amounts from the Grants table and organization type descriptions from the organisation_Types table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"send dates of documents\": make sure the output column is T1.sent_date instead of send_date. 2) When the question mentions \"grant amount\": \"grant amount\" actually means T2.grant_amount in schema. 3) When the question mentions \"organisation type described\": \"organisation type described\" actually means T4.organisation_type_description = 'Research' in schema. 4) When combining tables for document and grant information: link rows where T1.grant_id = T2.grant_id and keep only matching pairs (inner match). 5) When combining tables for organisation information: link rows where T2.organisation_id = T3.organisation_id and keep only matching pairs (inner match). 6) When combining tables for organisation type information: link rows where T3.organisation_type = T4.organisation_type and keep only matching pairs (inner match). 7) When filtering for grant amounts over 5000: use T2.grant_amount > 5000. 8) When filtering for organisation type description: use T4.organisation_type_description = 'Research'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT send_date FROM documents WHERE grant_amount > 5000 AND organisation_type = 'described';",
            "SELECT T1.sent_date\nFROM Documents AS T1\nJOIN Grants AS T2 ON T1.grant_id = T2.grant_id\nJOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id\nJOIN Organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type\nWHERE T2.grant_amount > 5000\nAND T4.organisation_type_description = 'Research'"
        ],
        "rule_sql": [
            "SELECT T1.sent_date\nFROM Documents T1\nINNER JOIN Grants T2 ON T1.grant_id = T2.grant_id\nINNER JOIN Organisations T3 ON T2.organisation_id = T3.organisation_id\nINNER JOIN Organisation_Types T4 ON T3.organisation_type = T4.organisation_type\nWHERE T2.grant_amount > 5000\nAND T4.organisation_type_description = 'Research';"
        ]
    },
    "74": {
        "db_id": "student_assessment",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "ground_truth": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "amends": [
            "Do select `T2.candidate_id` instead of `id` from the candidates table. Do join `people AS T1` with `candidates AS T2` using `T1.person_id = T2.candidate_id` instead of querying only the candidates table. Do filter on `T1.email_address = \"stanley.monahan@example.org\"` instead of `email = 'stanley.monahan@example.com'` to use the correct table and email format. The amended query now correctly joins the people and candidates tables to find the candidate ID associated with the specified email address."
        ],
        "rules": [
            "1) When answering about \"candidate id for email address\": make sure the output order: T2.candidate_id. 2) When the question mentions \"email\": \"email\" actually means \"T1.email_address\" in schema. 3) When the question specifies email \"stanley.monahan@example.org\": use exact literal \"stanley.monahan@example.org\" with correct case and domain. 4) When combining people table as T1 and candidates table as T2: link rows where T1.person_id = T2.candidate_id and keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id FROM candidates WHERE email = 'stanley.monahan@example.com';",
            "SELECT T2.candidate_id \nFROM people AS T1 \nJOIN candidates AS T2 ON T1.person_id = T2.candidate_id \nWHERE T1.email_address = 'stanley.monahan@example.org'"
        ],
        "rule_sql": [
            "SELECT T2.candidate_id\nFROM People T1\nINNER JOIN Candidates T2 ON T1.person_id = T2.candidate_id\nWHERE T1.email_address = 'stanley.monahan@example.org'"
        ]
    },
    "866": {
        "db_id": "chinook_1",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "ground_truth": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "amends": [
            "Do join `MEDIATYPE` and `TRACK` tables on `MediaTypeId` instead of querying only the `tracks` table. Do filter on `T1.Name = \"AAC audio file\"` instead of filtering directly on `media_type = 'AAC audio file'`. Do use proper table aliases `T1` and `T2` instead of referencing columns without table context. The amended query now correctly counts tracks by joining through the media type reference table to match the intended AAC audio file filtering behavior."
        ],
        "rules": [
            "1) When counting tracks by media type: join the TRACK table (as T2) with the MEDIATYPE table (as T1) using the exact key equality T2.MediaTypeId = T1.MediaTypeId and keep only matching pairs (inner match). 2) When filtering for \"AAC audio file\" media type: filter on T1.Name = \"AAC audio file\" exactly as specified, preserving the exact case and spacing. 3) When counting tracks: compute the number of rows using the canonical key from the TRACK table (T2.TrackId or equivalent primary key) rather than counting all columns."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM tracks WHERE media_type = 'AAC audio file';",
            "SELECT COUNT(*) \nFROM Track T2\nJOIN MediaType T1 ON T2.MediaTypeId = T1.MediaTypeId\nWHERE T1.Name = \"AAC audio file\""
        ],
        "rule_sql": [
            "SELECT COUNT(T2.TrackId) \nFROM Track AS T2 \nINNER JOIN MediaType AS T1 ON T2.MediaTypeId = T1.MediaTypeId \nWHERE T1.Name = 'AAC audio file'"
        ]
    },
    "2822": {
        "db_id": "restaurant_1",
        "question": "What is the rating of the restaurant Subway?",
        "ground_truth": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
        "amends": [
            "Do select `Rating` instead of `name` from the table. Do query from `Restaurant` instead of `restaurants` as the source table. Do filter on `ResName = \"Subway\"` instead of `rating = 'Subway'` as the WHERE condition. The amended query now correctly retrieves the rating for the restaurant named Subway instead of incorrectly looking for restaurants with a rating value of 'Subway'."
        ],
        "rules": [
            "1) When the question asks for the rating of a restaurant: select the \"Rating\" column from the \"Restaurant\" table. 2) When the question specifies a restaurant name \"Subway\": filter using the condition ResName = \"Subway\" to find that specific restaurant. 3) When the question mentions a restaurant by name: use the exact literal \"Subway\" with proper case and spelling as shown in the amends."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM restaurants WHERE rating = 'Subway';",
            "SELECT Rating FROM Restaurant WHERE ResName = 'Subway';"
        ],
        "rule_sql": [
            "SELECT Rating FROM Restaurant WHERE ResName = 'Subway';"
        ]
    },
    "6471": {
        "db_id": "scientist_1",
        "question": "Find the total hours of all projects.",
        "ground_truth": "SELECT sum(hours) FROM projects",
        "amends": [
            "Do reference the `projects` table instead of the `employees` table in the FROM clause. Do aggregate the `hours` column from the correct table instead of from the wrong table. The amended query now correctly calculates the total hours from the projects table instead of incorrectly summing hours from the employees table, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"total hours of all projects\": make sure to reference the \"projects\" table instead of the \"employees\" table. 2) When aggregating hours: sum the \"hours\" column from the \"projects\" table, not from the \"employees\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(hours) FROM employees;",
            "SELECT SUM(Hours) AS TotalHours FROM Projects;"
        ],
        "rule_sql": [
            "SELECT SUM(Hours) AS TotalHours FROM Projects;"
        ]
    },
    "2233": {
        "db_id": "machine_repair",
        "question": "How many technicians are there?",
        "ground_truth": "SELECT count(*) FROM technician",
        "amends": [
            "Do query the `technician` table instead of the `employees` table. Do filter for all records instead of filtering for `job_title = 'Manager'`. Do use lowercase `count(*)` instead of uppercase `COUNT(*)`."
        ],
        "rules": [
            "1) When answering about \"How many technicians are there?\": query the \"technician\" table instead of the \"employees\" table. 2) When counting all technicians: use count(*) without any filtering conditions instead of filtering for job_title = 'Manager'. 3) When writing the count function: use lowercase count(*) instead of uppercase COUNT(*)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE job_title = 'Manager';",
            "SELECT count(*) FROM technician"
        ],
        "rule_sql": [
            "select count(*) from technician"
        ]
    },
    "2448": {
        "db_id": "movie_1",
        "question": "What is the total number of ratings that has more than 3 stars?",
        "ground_truth": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "amends": [
            "Do reference the table as `Rating` instead of `ratings` to match the correct table name. The amended query now matches RIGHT_SQL's behavior with identical logic and results."
        ],
        "rules": [
            "1) When the question mentions \"ratings\": use the exact table name \"Rating\" with double quotes as shown in the schema. 2) When counting entities from the \"Rating\" table: count using the canonical key column (typically the primary key) to ensure accurate entity counts."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM ratings WHERE stars > 3;",
            "SELECT COUNT(*) FROM Rating WHERE stars > 3"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM \"Rating\" WHERE stars > 3"
        ]
    },
    "2639": {
        "db_id": "inn_1",
        "question": "For each room, find its name and the number of times reservations were made for it.",
        "ground_truth": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "amends": [
            "Do specify `T2.roomName` and `T1.Room` in the SELECT list instead of `room_name` and omitting the room column. Do join `Rooms AS T2` on `T1.Room = T2.RoomId` instead of querying only the reservations table. Do group by `T1.Room` instead of `room_id` to match the join condition and ensure proper aggregation. The amended query now correctly joins the reservations and rooms tables to display room names while counting reservations per room, matching the intended behavior.",
            "Do include `T2.roomName` in the SELECT list instead of omitting it, and do include `T1.Room` in the SELECT list instead of omitting it, but do remove the alias `reservation_count` from the COUNT(*) expression instead of keeping it. The amended query now matches RIGHT_SQL's behavior.",
            "Do include `T1.Room` in the SELECT list instead of omitting it, and do reorder the columns to place `T2.roomName` first followed by the count and then `T1.Room` instead of the original column sequence. The amended query now matches RIGHT_SQL's behavior by properly including all necessary columns in the output while maintaining the same grouping logic."
        ],
        "rules": [
            "1) When answering about room names and reservation counts: make sure the output order: T2.roomName, count of reservations 2) When the question mentions \"room name\": \"room name\" actually means \"T2.roomName in schema\" 3) When combining T1 (reservations) and T2 (Rooms) for shared entities: link rows where T1.Room = T2.RoomId exactly as shown; keep only matching pairs (inner match) 4) When the question asks for \"number of times reservations were made for it\": compute the count using T1.Room as the counting key per room group 5) When the question says \"per room\": organize results by T1.Room and compute reservation count per group",
            "1) When answering about \"room name and number of reservations\": make sure the output order: T2.roomName, T1.Room, COUNT(*)\n2) When the question asks for \"number of times reservations were made for it\": compute the count of reservations using COUNT(*) without an alias\n3) When combining Reservations (T1) and Rooms (T2) for shared entities: link rows where T1.Room = T2.RoomId and keep only matching pairs (inner match)\n4) When the question says \"for each room\": organize results by T1.Room and compute the count per room group",
            "1) When answering about \"room name and reservation count per room\": make sure the output order: T2.roomName first, then the count, then T1.Room\n2) When grouping by room to count reservations: include T1.Room in both the SELECT list and GROUP BY clause to show the room identifier alongside its name and reservation count\n3) When counting reservations per room: count all reservation records (using COUNT(*)) grouped by T1.Room to get the number of times reservations were made for each room"
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT room_name, COUNT(*) FROM reservations GROUP BY room_id;",
            "SELECT T2.roomName, T1.Room, COUNT(*) AS reservation_count\nFROM Reservations AS T1\nJOIN Rooms AS T2 ON T1.Room = T2.RoomId\nGROUP BY T1.Room;",
            "SELECT T2.roomName, T1.Room, COUNT(*) \nFROM Reservations AS T1 \nJOIN Rooms AS T2 ON T1.Room = T2.RoomId \nGROUP BY T1.Room",
            "SELECT T2.roomName, COUNT(*) AS \"Number of Reservations\", T1.Room\nFROM Reservations AS T1\nJOIN Rooms AS T2 ON T1.Room = T2.RoomId\nGROUP BY T1.Room\nORDER BY T1.Room;"
        ],
        "rule_sql": [
            "SELECT T2.roomName, T1.Room, COUNT(*) FROM Reservations T1 INNER JOIN Rooms T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T2.roomName, COUNT(*), T1.Room"
        ]
    },
    "4870": {
        "db_id": "school_player",
        "question": "What are the teams of the players, sorted in ascending alphabetical order?",
        "ground_truth": "SELECT Team FROM player ORDER BY Team ASC",
        "amends": [
            "Do reference the table as `player` instead of `players` to match the correct schema. Do order by `Team ASC` instead of `team DESC` to sort in ascending rather than descending order. Do capitalize column and table references as `Team` and `player` instead of lowercase `team` and `players` for proper identifier matching. The amended query now correctly selects from the intended table with proper sorting direction and identifier casing."
        ],
        "rules": [
            "1) When the question mentions \"teams of the players\": the exact identifier is \"Team\" from table \"player\". 2) When the question asks for sorting in ascending alphabetical order: order by \"Team\" in ascending direction (A-Z). 3) When choosing identifier delimiters: use exact case as shown in the schema - \"Team\" and \"player\" with proper capitalization."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team FROM players ORDER BY team DESC;",
            "SELECT Team FROM player ORDER BY Team ASC;"
        ],
        "rule_sql": [
            "SELECT DISTINCT \"Team\" FROM \"player\" ORDER BY \"Team\" ASC;"
        ]
    },
    "1323": {
        "db_id": "college_2",
        "question": "What are the distinct buildings with capacities of greater than 50?",
        "ground_truth": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "amends": [
            "Do reference table `classroom` instead of `rooms` in the FROM clause while keeping the same WHERE filter on `capacity > 50` and maintaining the DISTINCT selection of the `building` column."
        ],
        "rules": [
            "1) When the question asks about buildings with capacities greater than 50: use table \"classroom\" instead of \"rooms\" while keeping the same WHERE filter condition \"capacity > 50\" and maintaining DISTINCT selection of the \"building\" column. 2) When the question mentions \"buildings with capacities\": recognize that building information is stored in table \"classroom\" with column \"building\" and capacity information is stored in column \"capacity\" of the same table. 3) When selecting distinct buildings: ensure the output contains only unique values from the \"building\" column after applying the capacity filter."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT building FROM rooms WHERE capacity > 50;",
            "SELECT DISTINCT building FROM classroom WHERE capacity > 50"
        ],
        "rule_sql": [
            "SELECT DISTINCT building FROM classroom WHERE capacity > 50;"
        ]
    },
    "1026": {
        "db_id": "phone_1",
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "ground_truth": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
        "amends": [
            "Do query the `phone` table instead of the `companies` table. Do filter on `Company_name = \"Nokia Corporation\"` instead of `name = 'Nokia Corporation'`. The amended query now correctly counts Nokia Corporation phones from the appropriate table with the correct column name and string literal syntax."
        ],
        "rules": [
            "1) When answering about phone hardware models produced by a company: query the \"phone\" table instead of the \"companies\" table. 2) When filtering for the company named \"Nokia Corporation\": use the exact literal \"Nokia Corporation\" with the column \"Company_name\" in the phone table. 3) When counting phone hardware models: count all rows from the phone table that match the company filter condition."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM companies WHERE name = 'Nokia Corporation';",
            "SELECT COUNT(*) FROM phone WHERE Company_name = 'Nokia Corporation';"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM phone WHERE Company_name = 'Nokia Corporation';"
        ]
    },
    "6633": {
        "db_id": "driving_school",
        "question": "When did the staff member named Janessa Sawayn join the company?",
        "ground_truth": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "amends": [
            "Do reference the `date_joined_staff` column instead of `hire_date` in the SELECT list. Do use double quotes for string literals \"Janessa\" and \"Sawayn\" instead of single quotes. The amended query now correctly retrieves the staff member's join date using the appropriate column name and string formatting."
        ],
        "rules": [
            "1) When the question asks about when a staff member joined the company: use the exact column name \"date_joined_staff\" from the Staff table to retrieve the join date. 2) When the question specifies a staff member by name \"Janessa Sawayn\": use exact string literals \"Janessa\" for first_name and \"Sawayn\" for last_name with double quotes. 3) When filtering for a specific staff member: match both first_name = \"Janessa\" AND last_name = \"Sawayn\" to uniquely identify the correct staff member."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT hire_date FROM staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';",
            "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
        ],
        "rule_sql": [
            "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
        ]
    },
    "4986": {
        "db_id": "soccer_2",
        "question": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "ground_truth": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "amends": [
            "Do select `count(*)` without an alias instead of `COUNT(*) as student_count`, and do select `cName` instead of `college` in the SELECT list. Do use `GROUP BY cName` instead of `GROUP BY college` for grouping. Do order by `count(*) DESC` instead of `student_count ASC` in the ORDER BY clause. The amended query now correctly counts records grouped by cName in descending order, matching the intended behavior.",
            "Do place `count(*)` before `cName` in the SELECT list instead of having `cName` first. Do maintain the same GROUP BY clause on `cName` and ORDER BY clause on `count(*) DESC` as the original query. The amended query now matches RIGHT_SQL's behavior with identical logic and output."
        ],
        "rules": [
            "1) When the question asks for \"number of students who participate in the tryout for each college\": count records using the canonical counting method and group by the exact token \"cName\". 2) When selecting the college identifier: use the exact column token \"cName\" instead of generic \"college\". 3) When ordering results by descending count: order by the count value in descending direction without using an alias for the count. 4) When producing output columns: place \"cName\" first followed by the count value without any column alias.",
            "1) When answering about \"number of students who participate in the tryout for each college\": make sure the output order: count(*) first, then cName. 2) When the question asks for \"count of students who participate in the tryout\": compute the number of rows using the canonical key for students (implied by counting all tryout participants). 3) When the question says \"for each college\": organize results by cName and compute the count per college. 4) When the question mentions \"ordered by descending count\": rank rows by count(*) in descending order and maintain that ordering in the output."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT college, COUNT(*) as student_count FROM students GROUP BY college ORDER BY student_count ASC;",
            "SELECT cName, count(*) FROM Tryout GROUP BY cName ORDER BY count(*) DESC;",
            "SELECT count(*), cName FROM Tryout GROUP BY cName ORDER BY count(*) DESC"
        ],
        "rule_sql": [
            "SELECT cName, COUNT(*) FROM Tryout GROUP BY cName ORDER BY COUNT(*) DESC"
        ]
    },
    "6647": {
        "db_id": "driving_school",
        "question": "How long is the total lesson time took by the customer named Rylan Goodwin?",
        "ground_truth": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
        "amends": [
            "Do reference the `sum` aggregate function with lowercase instead of uppercase. Do use table aliases `T1` and `T2` instead of no aliases. Do select `T1.lesson_time` instead of `duration` from the `Lessons` table. Do add a `JOIN` to the `Customers` table instead of querying only the `Lessons` table. Do join on `T1.customer_id = T2.customer_id` instead of filtering by customer name directly. Do filter by `T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\"` in the WHERE clause instead of using `customer_name = 'Rylan Goodwin'`. Do use double quotes for string literals instead of single quotes. The amended query now correctly aggregates lesson time by joining through the customer relationship rather than relying on a denormalized customer_name field."
        ],
        "rules": [
            "1) When answering about \"total lesson time for customer Rylan Goodwin\": make sure the output order: SUM(T1.lesson_time). 2) When the question mentions \"customer named Rylan Goodwin\": \"Rylan Goodwin\" actually means T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" in schema. 3) When combining T1 (Lessons) and T2 (Customers) for shared entities: link rows where T1.customer_id = T2.customer_id; keep only matching pairs (inner match). 4) When handling text literals: do not change case, spacing, or punctuation - use exact literals \"Rylan\" and \"Goodwin\". 5) When using aggregate functions: use lowercase sum instead of uppercase SUM."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(duration) FROM lessons WHERE customer_name = 'Rylan Goodwin';",
            "SELECT sum(T1.lesson_time) AS total_lesson_time\nFROM Lessons T1\nJOIN Customers T2 ON T1.customer_id = T2.customer_id\nWHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\""
        ],
        "rule_sql": [
            "SELECT sum(T1.lesson_time) \nFROM Lessons T1\nINNER JOIN Customers T2 ON T1.customer_id = T2.customer_id\nWHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin'"
        ]
    },
    "341": {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "ground_truth": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "amends": [
            "Do select `catalog_entry_name` instead of `*` from all columns. Do query from `catalog_contents` table instead of `products` table. Do filter on `next_entry_id > 8` instead of `entry_id > 8`. The amended query now correctly retrieves specific catalog entry names from the catalog contents table where the next entry ID exceeds 8, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"products with next entry ID greater than 8\": make sure the output order: catalog_entry_name. 2) When the question mentions \"products\": \"products\" actually means \"catalog_contents\" in schema. 3) When the question mentions \"next entry ID\": \"next entry ID\" actually means \"next_entry_id\" in schema. 4) When filtering for values greater than 8: use the condition next_entry_id > 8."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM products WHERE entry_id > 8;",
            "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > 8"
        ],
        "rule_sql": [
            "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > 8 ORDER BY catalog_entry_name;"
        ]
    },
    "3366": {
        "db_id": "sports_competition",
        "question": "What are the types of competition and number of competitions for that type?",
        "ground_truth": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",
        "amends": [
            "Do reference the correct table name `competition` instead of the incorrect `competitions`. Do group by `Competition_type` instead of `competition_id` to ensure the count aggregates by competition type rather than individual competition identifiers. Do use the correct column name `Competition_type` (with proper capitalization) in the SELECT clause instead of `competition_type` to match the grouping criteria. The amended query now correctly counts records by competition type rather than by competition ID, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"types of competition and number of competitions for that type\": make sure the output order: Competition_type first, then count of competitions. 2) When the question mentions \"types of competition\": \"types of competition\" actually means \"Competition_type in schema\". 3) When the question asks for \"number of competitions\": compute the count of competitions using the canonical key from the competition table. 4) When the question says \"for that type\"/\"by type\": organize results by Competition_type and compute the count of competitions per group. 5) When choosing identifier delimiters: use exact column names with proper capitalization as shown in the schema (Competition_type, not competition_type). 6) When referring to table roles: use the base table competition (not competitions) as T1 for this schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT competition_type, COUNT(*) FROM competitions GROUP BY competition_id;",
            "SELECT Competition_type, COUNT(*) AS number_of_competitions FROM competition GROUP BY Competition_type;"
        ],
        "rule_sql": [
            "SELECT Competition_type, COUNT(Competition_ID) AS Number_of_Competitions FROM competition GROUP BY Competition_type ORDER BY Competition_type;"
        ]
    },
    "5894": {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of each visitor?",
        "ground_truth": "SELECT Tourist_Details FROM VISITORS",
        "amends": [
            "Do select the specific column `Tourist_Details` instead of using `*` to select all columns. Do reference the table as `VISITORS` instead of `visitors` to match the correct case sensitivity. Do remove the `WHERE visitor_id = 1` filter instead of keeping it, as the right query returns all records without filtering. The amended query now correctly selects only the Tourist_Details column from the VISITORS table without any filtering conditions, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"detail of each visitor\": make sure the output order: Tourist_Details. 2) When selecting from the visitors table: use the exact table name \"VISITORS\" with uppercase letters. 3) When the question asks for \"detail of each visitor\": select only the \"Tourist_Details\" column instead of all columns. 4) When the question asks about \"each visitor\": do not apply any filtering conditions and return all records from the table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM visitors WHERE visitor_id = 1;",
            "SELECT Tourist_Details FROM VISITORS;"
        ],
        "rule_sql": [
            "SELECT Tourist_Details FROM VISITORS ORDER BY Tourist_Details;"
        ]
    },
    "823": {
        "db_id": "chinook_1",
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "ground_truth": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "amends": [
            "Do join `ARTIST` table as `T2` instead of querying only the `albums` table. Do use `ALBUM` table alias `T1` instead of directly referencing `albums`. Do select `T2.Name` instead of `artist_name`. Do filter on `T1.Title = \"Balls to the Wall\"` instead of `album_name = 'Balls to the Wall'`. Do use proper join condition `T1.ArtistId = T2.ArtistId` instead of missing the artist relationship entirely. The amended query now correctly retrieves the artist name by joining the album and artist tables with the proper relationship, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"which artist does the album belong to\": make sure the output order: T2.Name 2) When the question mentions \"album 'Balls to the Wall'\": filter rows where T1.Title = \"Balls to the Wall\" exactly 3) When combining T1 (ALBUM) and T2 (ARTIST) for shared entities: link rows where T1.ArtistId = T2.ArtistId and keep only matching pairs (inner match) 4) When selecting artist information: use T2.Name instead of artist_name from the albums table"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT artist_name FROM albums WHERE album_name = 'Balls to the Wall';",
            "SELECT T2.Name FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = 'Balls to the Wall'"
        ],
        "rule_sql": [
            "SELECT T2.Name FROM Album T1 INNER JOIN Artist T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = 'Balls to the Wall'"
        ]
    },
    "1999": {
        "db_id": "gas_company",
        "question": "Show all company names and headquarters in the descending order of market value.",
        "ground_truth": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "amends": [
            "Do reference the table as `company` instead of `companies` to match the correct schema. Do use the column name `company` instead of `company_name` to align with the correct column naming. Do order by `market_value DESC` instead of `ASC` to sort in descending order rather than ascending. The amended query now correctly selects from the company table with the proper column names and sorting direction."
        ],
        "rules": [
            "1) When referencing the company information table: use the exact table name \"company\" instead of \"companies\". 2) When selecting the company name column: use the exact column name \"company\" instead of \"company_name\". 3) When ordering by market value in descending order: use \"market_value DESC\" instead of \"ASC\" to achieve the requested descending sort."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT company_name, headquarters FROM companies ORDER BY market_value ASC;",
            "SELECT company, Headquarters FROM company ORDER BY Market_Value DESC;"
        ],
        "rule_sql": [
            "SELECT company, Headquarters FROM company ORDER BY Market_Value DESC;"
        ]
    },
    "1379": {
        "db_id": "college_2",
        "question": "What are the names and buildings of the deparments, sorted by budget descending?",
        "ground_truth": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "amends": [
            "Do use column name `dept_name` instead of `name` and table name `department` instead of `departments` to match the correct schema. Do change the sort direction to `DESC` instead of `ASC` to order by budget in descending order instead of ascending. The amended query now correctly retrieves department names and buildings from the appropriate table sorted by budget in descending order, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for department names: use the exact column token \"dept_name\" instead of \"name\" to match the schema. 2) When the question refers to the departments table: use the exact table name \"department\" instead of \"departments\" to match the schema. 3) When the question specifies sorting by budget descending: order the results by budget in descending direction instead of ascending."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, building FROM departments ORDER BY budget ASC;",
            "SELECT dept_name, building FROM department ORDER BY budget DESC;"
        ],
        "rule_sql": [
            "SELECT dept_name, building FROM department ORDER BY budget DESC;"
        ]
    },
    "6467": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the account details with the largest value or with value having char '5' in it?",
        "ground_truth": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "amends": [
            "Do use `max(Account_details)` in the SELECT list instead of `*` to return only the maximum value. Do change the FROM source to `Accounts` instead of `accounts` for correct table name casing. Do remove the WHERE clause with the subquery comparison and instead use `UNION` to combine two separate result sets. Do add a second SELECT statement that retrieves `Account_details` with a `LIKE \"%5%\"` filter instead of including it in an OR condition. Do remove the subquery that finds the maximum value and instead calculate it directly in the first SELECT clause. Do use proper column name `Account_details` instead of `value` to match the correct schema. The amended query now correctly returns both the maximum account detail and all account details containing the digit 5 through a UNION operation, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"account details with the largest value\": return only the maximum Account_details value using max(Account_details) instead of all columns. 2) When the question mentions \"value\": \"value\" actually means \"Account_details\" in the schema. 3) When the question mentions \"largest value\": calculate the maximum Account_details value directly in the SELECT clause instead of using a subquery. 4) When the question asks for account details \"with value having char '5' in it\": use a LIKE filter with pattern \"%5%\" to find Account_details containing the digit 5. 5) When combining results for both conditions: use UNION to combine the maximum Account_details result with the Account_details containing '5' results as separate result sets. 6) When referring to the table: use exact table name \"Accounts\" with proper casing instead of \"accounts\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM accounts WHERE value = (SELECT MAX(value) FROM accounts) OR value LIKE '%5%';",
            "SELECT Account_details FROM Accounts WHERE Account_details = (SELECT MAX(Account_details) FROM Accounts)\nUNION\nSELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%';"
        ],
        "rule_sql": [
            "SELECT MAX(Account_details) AS Account_details FROM Accounts\nUNION\nSELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%';"
        ]
    },
    "2938": {
        "db_id": "sakila_1",
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "ground_truth": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "amends": [
            "Do use `INTERSECT` with a second query instead of a single query with `inventory_count > 3`. Do change the column order to `title, film_id` instead of `film_id, title`. Do add a join with `inventory AS T2` on `T1.film_id = T2.film_id` instead of omitting the inventory table. Do use `GROUP BY T1.film_id` with `HAVING count(*) < 3` instead of `WHERE inventory_count > 3`. Do add table alias `T1` for the film table in the second query instead of using the base table directly. The amended query now correctly identifies films with rental rate 0.99 that have fewer than 3 inventory items, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about films with rental fee of 0.99 and inventory count: make sure the output order: title, film_id. 2) When the question mentions \"rented at a fee of 0.99\": \"rental_rate\" actually means \"rental_rate = 0.99\" in schema. 3) When the question mentions \"has less than 3 in the inventory\": use GROUP BY T1.film_id with HAVING count(*) < 3 instead of WHERE inventory_count > 3. 4) When combining film and inventory tables: link rows where T1.film_id = T2.film_id and keep only matching pairs (inner match). 5) When the question requires finding films that meet both conditions: use INTERSECT with a second query instead of a single query with inventory_count condition."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT film_id, title FROM film WHERE rental_rate = 0.99 AND inventory_count > 3;",
            "SELECT title, film_id\nFROM film\nWHERE rental_rate = 0.99\nINTERSECT\nSELECT T1.title, T1.film_id\nFROM film AS T1\nJOIN inventory AS T2 ON T1.film_id = T2.film_id\nGROUP BY T1.film_id\nHAVING COUNT(*) < 3"
        ],
        "rule_sql": [
            "SELECT title, film_id FROM film WHERE rental_rate = 0.99\nINTERSECT\nSELECT f.title, f.film_id FROM film f\nJOIN inventory i ON f.film_id = i.film_id\nGROUP BY f.film_id\nHAVING COUNT(*) < 3"
        ]
    },
    "5593": {
        "db_id": "products_gen_characteristics",
        "question": "Give the color description that is least common across products.",
        "ground_truth": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do reference `t2.color_description` from the joined `ref_colors` table instead of directly selecting `color_description` from `products`. Do add `JOIN ref_colors AS t2 ON t1.color_code = t2.color_code` to properly map color codes to descriptions instead of omitting the join. Do change the aggregation to `ORDER BY count(*) ASC` to find the least common color instead of `ORDER BY count DESC` for the most common. Do remove the explicit `COUNT(*) as count` column from the SELECT list since it's only needed in the ORDER BY clause instead of keeping it. The amended query now correctly joins to the reference table for color descriptions and identifies the least frequently occurring color, matching the RIGHT_SQL's behavior.",
            "Do group by `t2.color_description` instead of `t1.color_code` to ensure the aggregation aligns with the selected column. Do maintain the same `JOIN` on `t1.color_code = t2.color_code` and `ORDER BY COUNT(*) ASC LIMIT 1` structure. The amended query now correctly groups by the output column rather than the join key, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"least common color description across products\": make sure the output order: t2.color_description. 2) When the question mentions \"color description\": \"color description\" actually means \"t2.color_description in schema\". 3) When combining products and ref_colors for shared entities: link rows where t1.color_code = t2.color_code exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question asks for \"least common\": rank rows by count(*) in ascending order and keep the first 1 row. 5) When counting products: compute the number of rows using the canonical key t1.color_code as the counting key.",
            "1) When answering about \"least common color description across products\": make sure the output order: t2.color_description. 2) When grouping by color description to find the least common: group by t2.color_description instead of t1.color_code to align aggregation with the selected output column. 3) When combining Products as T1 and Ref_Colors as T2: link rows where T1.color_code = T2.color_code and keep only matching pairs (inner match). 4) When finding the least common occurrence: order by COUNT(*) in ascending order and keep only the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT color_description, COUNT(*) as count FROM products GROUP BY color_description ORDER BY count DESC LIMIT 1;",
            "SELECT t2.color_description\nFROM Products AS t1\nJOIN Ref_Colors AS t2 ON t1.color_code = t2.color_code\nGROUP BY t1.color_code\nORDER BY COUNT(*) ASC\nLIMIT 1",
            "SELECT t2.color_description\nFROM Products AS t1\nJOIN Ref_Colors AS t2 ON t1.color_code = t2.color_code\nGROUP BY t2.color_description\nORDER BY COUNT(*) ASC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT t2.color_description\nFROM Products t1\nINNER JOIN Ref_Colors t2 ON t1.color_code = t2.color_code\nGROUP BY t2.color_description\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ]
    },
    "4976": {
        "db_id": "soccer_2",
        "question": "List all information about college sorted by enrollment number in the ascending order.",
        "ground_truth": "SELECT * FROM College ORDER BY enr",
        "amends": [
            "Do order by `enr` instead of `enrollment` to use the correct column name that matches the table schema. The amended query now matches RIGHT_SQL's behavior by sorting based on the proper enrollment column."
        ],
        "rules": [
            "1) When the question asks for information about colleges sorted by enrollment number: use the exact column name \"enr\" from the College table instead of \"enrollment\". 2) When sorting by enrollment in ascending order: order the results by the \"enr\" column in ascending direction."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM college ORDER BY enrollment DESC;",
            "SELECT * FROM College ORDER BY enr ASC;"
        ],
        "rule_sql": [
            "SELECT * FROM College ORDER BY enr ASC;"
        ]
    },
    "4021": {
        "db_id": "ship_mission",
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "ground_truth": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928",
        "amends": [
            "Do select `T2.Name` from the `ship` table instead of `name` from the `ships` table. Do join `mission` as `T1` with `ship` as `T2` on `T1.Ship_ID = T2.Ship_ID` instead of querying only the `ships` table. Do filter on `T1.Launched_Year > 1928` from the joined `mission` table instead of `mission_year > 1928` from the original table. The amended query now correctly retrieves ship names based on mission launch years rather than an incorrect direct table filter, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"names of ships involved in missions launched after 1928\": make sure the output order: T2.Name. 2) When the question mentions \"ships\": \"ships\" actually means \"ship in schema\" with exact identifier \"ship\". 3) When combining mission and ship tables: link rows where T1.Ship_ID = T2.Ship_ID and keep only matching pairs (inner match). 4) When filtering for missions launched after 1928: use T1.Launched_Year > 1928 from the mission table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM ships WHERE mission_year > 1928;",
            "SELECT T2.Name \nFROM mission AS T1 \nJOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID \nWHERE T1.Launched_Year > 1928"
        ],
        "rule_sql": [
            "SELECT T2.Name \nFROM mission T1 \nINNER JOIN ship T2 ON T1.Ship_ID = T2.Ship_ID \nWHERE T1.Launched_Year > 1928 \nORDER BY T2.Name"
        ]
    },
    "6183": {
        "db_id": "music_4",
        "question": "What is the most common result of the music festival?",
        "ground_truth": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select only `RESULT` instead of including `COUNT(*) as count` in the SELECT list. Do remove the explicit count column alias instead of keeping `as count`. Do move the aggregate function to the ORDER BY clause instead of including it in the SELECT list. Do use uppercase `RESULT` instead of lowercase `result` for consistency. The amended query now correctly returns only the result with the highest count by ordering by the count in descending order and limiting to one row, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"most common result\": make sure the output order: only the RESULT column without any count column. 2) When counting occurrences of music festival results: compute the number of rows using the canonical key for counting, but do not include the count in the final output. 3) When ordering by frequency to find the most common: rank rows by count in descending order and keep only the first row. 4) When referring to the result column: use uppercase \"RESULT\" exactly as specified in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT result, COUNT(*) as count FROM music_festival GROUP BY result ORDER BY count DESC LIMIT 1;",
            "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(ID) DESC LIMIT 1"
        ]
    },
    "2316": {
        "db_id": "perpetrator",
        "question": "What is the country that has the most perpetrators?",
        "ground_truth": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference table `perpetrator` instead of `perpetrators` and use column `Country` instead of `country`. Do remove the alias `as count` instead of keeping it. Do use `COUNT(*)` in the ORDER BY clause instead of referencing the alias `count`. The amended query now correctly references the perpetrator table and country column while maintaining proper aggregation and ordering behavior.",
            "Do add `COUNT(*)` to the SELECT list instead of omitting it, as the aggregate function is required when using GROUP BY to properly display the count for each country group. The amended query now matches RIGHT_SQL's behavior by including both the grouped column and its corresponding count in the results."
        ],
        "rules": [
            "1) When the question asks about \"perpetrators\": use the exact table name \"perpetrator\" instead of \"perpetrators\". 2) When the question mentions \"country\": use the exact column name \"Country\" with proper case from the schema. 3) When counting entities: use COUNT(*) for aggregation but do not use aliases like \"as count\" in the output. 4) When ordering by a count result: reference COUNT(*) directly in the ORDER BY clause instead of using an alias. 5) When finding the country with the most perpetrators: group by \"Country\", count using COUNT(*), order by COUNT(*) in descending order, and take the top result.",
            "1) When answering about \"the country that has the most perpetrators\": make sure the output order includes both the grouped column and its count. 2) When the question asks for \"most perpetrators\" by country: organize results by the \"Country\" column and compute the count of perpetrators per group. 3) When counting perpetrators per country: compute the number of rows using the canonical counting method (COUNT(*)) for each country group. 4) When ranking countries by perpetrator count: rank rows by the count in descending order and keep the first 1 row (highest count)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT country, COUNT(*) as count FROM perpetrators GROUP BY country ORDER BY count DESC LIMIT 1;",
            "SELECT Country FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
            "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
    },
    "3298": {
        "db_id": "college_1",
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "ground_truth": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "amends": [
            "Do use column names `stu_gpa`, `stu_phone`, and `stu_fname` instead of `GPA`, `phone_number`, and `first_name` to match the correct schema. Do reference table `student` instead of `students` to use the proper table name. The amended query now correctly selects the GPA, phone number, and first name columns from the student table ordered by GPA in descending order with a limit of 5 results.",
            "Do reorder the SELECT list to `stu_gpa, stu_phone, stu_fname` instead of `stu_fname, stu_gpa, stu_phone` to prioritize the GPA column first while maintaining all the same columns. The amended query now matches RIGHT_SQL's behavior with identical column selection and ordering logic."
        ],
        "rules": [
            "1) When the question asks for \"first name\", \"GPA\", and \"phone number\": use the exact column names \"stu_fname\", \"stu_gpa\", and \"stu_phone\" respectively. 2) When referencing the student table: use the exact table name \"student\" instead of \"students\". 3) When the question asks for \"top 5 GPAs\": rank rows by \"stu_gpa\" in descending order and keep the first 5 rows. 4) When producing output: make sure the output order is \"stu_fname\", \"stu_gpa\", \"stu_phone\" as specified in the question.",
            "1) When answering about \"first name, GPA, and phone number of the top 5 GPAs\": make sure the output order is: stu_gpa, stu_phone, stu_fname\n2) When the question mentions \"top 5 GPAs\": rank rows by stu_gpa in descending order and keep the first 5 rows."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, GPA, phone_number FROM students ORDER BY GPA DESC LIMIT 5;",
            "SELECT stu_fname, stu_gpa, stu_phone FROM student ORDER BY stu_gpa DESC LIMIT 5;",
            "SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5"
        ],
        "rule_sql": [
            "SELECT stu_fname, stu_gpa, stu_phone FROM student ORDER BY stu_gpa DESC LIMIT 5"
        ]
    },
    "4579": {
        "db_id": "company_office",
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "ground_truth": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
        "amends": [
            "Do use `OR` operator between industry conditions instead of `AND` operator, which would incorrectly require both values simultaneously. Do use consistent case for table name `Companies` and column name `Industry` instead of lowercase versions. Do use double quotes for string literals instead of single quotes. The amended query now correctly counts companies in either Banking or Conglomerate industries instead of incorrectly requiring both industry types simultaneously."
        ],
        "rules": [
            "1) When the question asks for companies whose industry is \"Banking\" or \"Conglomerate\": use the OR operator between industry conditions instead of AND operator. 2) When referring to the table Companies: use the exact table name \"Companies\" with consistent case. 3) When referring to the column Industry: use the exact column name \"Industry\" with consistent case. 4) When using string literals for industry values: use double quotes for exact string matching (e.g., \"Banking\", \"Conglomerate\") instead of single quotes."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM companies WHERE industry = 'Banking' AND industry = 'Conglomerate';",
            "SELECT COUNT(*) FROM \"Companies\" WHERE \"Industry\" = \"Banking\" OR \"Industry\" = \"Conglomerate\""
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM Companies WHERE Industry = \"Banking\" OR Industry = \"Conglomerate\""
        ]
    },
    "3372": {
        "db_id": "sports_competition",
        "question": "What are the names of all clubs that do not have any players?",
        "ground_truth": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "amends": [
            "Do query from `CLub` table instead of `clubs` table. Do use `Club_ID NOT IN` subquery to find clubs without players instead of checking `player_id IS NULL`. Do remove the incorrect `player_id` column reference since it doesn't exist in the CLub table schema. The amended query correctly identifies clubs that have no associated players by checking for Club_ID values that don't exist in the player table, rather than relying on a non-existent nullable foreign key column. The query now matches the intended behavior of finding clubs without any players."
        ],
        "rules": [
            "1) When answering about \"clubs that do not have any players\": use the table \"CLub\" (exact case) instead of \"clubs\". 2) When checking for clubs without players: use Club_ID NOT IN subquery against the player table instead of checking for NULL values. 3) When referring to the club identifier: use \"Club_ID\" (exact case) as the canonical key for clubs. 4) When producing output: include only the \"name\" column from the CLub table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM clubs WHERE player_id IS NULL;",
            "SELECT name FROM club WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player WHERE Club_ID IS NOT NULL)"
        ],
        "rule_sql": [
            "SELECT name FROM \"CLub\" WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
        ]
    },
    "5754": {
        "db_id": "dorm_1",
        "question": "Find the name of amenity that is most common in all dorms.",
        "ground_truth": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do join `dorm_amenity AS T1` with `has_amenity AS T2` on `T1.amenid = T2.amenid` instead of querying only `dorm_amenities`. Do group by `T2.amenid` instead of `amenity_name`. Do select `T1.amenity_name` instead of both `amenity_name` and `COUNT(*) as count`. Do order by `count(*) DESC` instead of the alias `count DESC`. The amended query now correctly joins the amenity table with the relationship table to count occurrences and returns the amenity name with the highest count, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"most common amenity in all dorms\": make sure the output order: T1.amenity_name. 2) When combining T1 (dorm_amenity) and T2 (has_amenity) for shared entities: link rows where T1.amenid = T2.amenid exactly as shown; keep only matching pairs (inner match). 3) When the question asks for \"count of amenities per amenity type\": compute the number of rows using T2.amenid as the counting key. 4) When the question mentions \"most common\": rank rows by count(*) in descending direction and keep the first 1 row. 5) When grouping by amenity type: organize results by T2.amenid and compute requested aggregates per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT amenity_name, COUNT(*) as count FROM dorm_amenities GROUP BY amenity_name ORDER BY count DESC LIMIT 1;",
            "SELECT T1.amenity_name\nFROM dorm_amenity AS T1\nJOIN has_amenity AS T2 ON T1.amenid = T2.amenid\nGROUP BY T2.amenid\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.amenity_name\nFROM Dorm_amenity T1\nINNER JOIN Has_amenity T2 ON T1.amenid = T2.amenid\nGROUP BY T2.amenid\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "2804": {
        "db_id": "news_report",
        "question": "What are the nationalities and ages of journalists?",
        "ground_truth": "SELECT Nationality ,  Age FROM journalist",
        "amends": [
            "Do use the correct table name `journalist` instead of the incorrect pluralized `journalists`. Do capitalize column names `Nationality` and `Age` instead of lowercase `nationality` and `age`. Do remove the WHERE filter `profession = 'reporter'` instead of keeping it, as the right query selects all records without filtering. The amended query now correctly selects from the proper table with the appropriate column casing and without unnecessary filtering, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When referring to the table containing journalist information: use the exact table name \"journalist\" instead of pluralized forms. 2) When selecting nationality information: use the exact column name \"Nationality\" with proper capitalization. 3) When selecting age information: use the exact column name \"Age\" with proper capitalization. 4) When the question asks for all journalists without specific filtering conditions: do not apply any WHERE clause filters."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT nationality, age FROM journalists WHERE profession = 'reporter';",
            "SELECT Nationality, Age FROM journalist;"
        ],
        "rule_sql": [
            "SELECT Nationality, Age FROM journalist"
        ]
    },
    "6818": {
        "db_id": "flight_4",
        "question": "What are the names of all airports whose elevation is between -50 and 50?",
        "ground_truth": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "amends": [
            "Do use `BETWEEN -50 AND 50` instead of `elevation < -50 OR elevation > 50` to correctly select airports with elevation values within the inclusive range rather than excluding them. This changes the logic from finding airports outside the range to finding those within the specified elevation bounds, which matches the intended behavior of the corrected query."
        ],
        "rules": [
            "1) When the question asks for airports with elevation between -50 and 50: use BETWEEN -50 AND 50 instead of elevation < -50 OR elevation > 50 to include airports within the inclusive range rather than excluding them."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM airports WHERE elevation < -50 OR elevation > 50;",
            "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"
        ],
        "rule_sql": [
            "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;"
        ]
    },
    "1658": {
        "db_id": "theme_gallery",
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "ground_truth": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "amends": [
            "Do reference table `artist` instead of `artists` and use column `year_join` instead of `join_year` while maintaining the same filter conditions `age > 46` and keeping the aggregate `count(*)`. The amended query now correctly references the proper table and column names while preserving the intended filtering logic."
        ],
        "rules": [
            "1) When answering about \"artists\": use table \"artist\" instead of \"artists\". 2) When the question mentions \"joined after 1990\": use column \"year_join\" instead of \"join_year\" with the same filter condition year_join > 1990. 3) When the question asks for \"count of artists\": compute the number of rows using count(*) while maintaining the filter conditions age > 46 and year_join > 1990."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM artists WHERE age > 46 AND join_year > 1990;",
            "SELECT COUNT(*) FROM artist WHERE Age > 46 AND Year_Join > 1990;"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM artist WHERE Age > 46 AND Year_Join > 1990"
        ]
    },
    "4850": {
        "db_id": "local_govt_and_lot",
        "question": "Which events have the number of notes between one and three? List the event id and the property id.",
        "ground_truth": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
        "amends": [
            "Do select `T1.Customer_Event_ID` and `T1.property_id` instead of `event_id` and `property_id`. Do use `FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2` instead of `FROM events` alone. Do add `ON T1.Customer_Event_ID = T2.Customer_Event_ID` join condition instead of no join. Do add `GROUP BY T1.customer_event_id` instead of no grouping. Do use `HAVING count(*) BETWEEN 1 AND 3` instead of `WHERE number_of_notes = 1 OR number_of_notes = 2 OR number_of_notes = 3`. Do remove the direct column filter and instead count related notes through the join. The amended query now correctly counts note relationships and filters by the count range instead of relying on a potentially incorrect direct column value."
        ],
        "rules": [
            "1) When the question asks for \"event id\": use the exact identifier \"T1.Customer_Event_ID\" instead of \"event_id\". 2) When the question asks for \"property id\": use the exact identifier \"T1.property_id\" instead of \"property_id\". 3) When answering about events with notes: combine tables \"Customer_Events AS T1\" and \"Customer_Event_Notes AS T2\" using the join condition \"T1.Customer_Event_ID = T2.Customer_Event_ID\" to link events to their notes. 4) When counting notes per event: group by \"T1.customer_event_id\" to organize results by each event. 5) When filtering for events with number of notes between one and three: use \"HAVING count(*) BETWEEN 1 AND 3\" to count related notes through the join instead of filtering a direct column value."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT event_id, property_id FROM events WHERE number_of_notes = 1 OR number_of_notes = 2 OR number_of_notes = 3;",
            "SELECT T1.Customer_Event_ID, T1.property_id\nFROM Customer_Events AS T1\nJOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID\nGROUP BY T1.Customer_Event_ID\nHAVING COUNT(*) BETWEEN 1 AND 3"
        ],
        "rule_sql": [
            "SELECT T1.Customer_Event_ID, T1.property_id\nFROM Customer_Events AS T1\nJOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID\nGROUP BY T1.Customer_Event_ID\nHAVING COUNT(*) BETWEEN 1 AND 3"
        ]
    },
    "3001": {
        "db_id": "sakila_1",
        "question": "Return the amount of the largest payment.",
        "ground_truth": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "amends": [
            "Do select `amount` instead of `MIN(amount)` to retrieve the actual value rather than the minimum aggregate. Do add `ORDER BY amount DESC` instead of omitting ordering to sort results by amount in descending sequence. Do add `LIMIT 1` instead of omitting row limiting to return only the top result. Do change the table reference from `payments` to `payment` to use the correct table name. The amended query now correctly retrieves the highest payment amount rather than the minimum value, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for the \"largest payment\": retrieve the actual amount value instead of an aggregate function. 2) When ordering by payment size to find the largest: sort results by \"amount\" in descending order. 3) When limiting to the single largest result: return only the top 1 row after sorting. 4) When referring to the payment table: use the exact table name \"payment\" (not \"payments\")."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MIN(amount) FROM payments;",
            "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1;"
        ]
    },
    "3657": {
        "db_id": "baseball_1",
        "question": "What is the highest salary among each team? List the team name, id and maximum salary.",
        "ground_truth": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
        "amends": [
            "Do select `T1.name`, `T1.team_id`, and `max(T2.salary)` instead of `team_name`, `team_id`, and `salary`. Do join `team AS T1` with `salary AS T2` on `T1.team_id = T2.team_id` instead of querying only the `teams` table. Do add `GROUP BY T1.team_id` instead of omitting grouping. Do remove `ORDER BY salary DESC LIMIT 1` instead of keeping the top-1 selection without aggregation. The amended query now correctly calculates maximum salary per team instead of selecting a single team's raw salary value."
        ],
        "rules": [
            "1) When answering about \"highest salary among each team\": organize results by team using T1.team_id as the grouping key. 2) When the question mentions \"team name\": \"team name\" actually means T1.name in the schema. 3) When the question asks for \"maximum salary\": compute the maximum value of T2.salary per team group. 4) When combining team and salary tables for shared entities: link rows where T1.team_id = T2.team_id exactly as shown; keep only matching pairs (inner match). 5) When producing output: make sure the output order is T1.name, T1.team_id, and max(T2.salary)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team_name, team_id, salary FROM teams ORDER BY salary DESC LIMIT 1;",
            "SELECT T1.name, T1.team_id, MAX(T2.salary) \nFROM team AS T1 \nJOIN salary AS T2 ON T1.team_id = T2.team_id \nGROUP BY T1.team_id"
        ],
        "rule_sql": [
            "SELECT T1.name, T1.team_id, MAX(T2.salary) as max_salary\nFROM team T1\nINNER JOIN salary T2 ON T1.team_id = T2.team_id\nGROUP BY T1.team_id\nORDER BY T1.name, T1.team_id, max_salary;"
        ]
    },
    "4371": {
        "db_id": "tracking_grants_for_research",
        "question": "What is the type description of the organization whose detail is listed as 'quo'?",
        "ground_truth": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'",
        "amends": [
            "Do select `T1.organisation_type_description` from the `organisation_Types` table instead of `type_description` from the `organizations` table. Do join `Organisations AS T2` with the condition `ON T1.organisation_type = T2.organisation_type` instead of querying a single table. Do filter on `T2.organisation_details = 'quo'` instead of `detail = 'quo'`. The amended query now correctly retrieves organization type descriptions by joining the appropriate tables and using the correct column names and relationships."
        ],
        "rules": [
            "1) When the question asks for \"type description of the organization\": select \"T1.organisation_type_description\" from the \"organisation_Types\" table instead of \"type_description\" from the \"organizations\" table. 2) When combining organization types with organization details: join \"Organisations AS T2\" with \"T1.organisation_type = T2.organisation_type\" to link related records. 3) When filtering for organizations with detail 'quo': use the exact literal 'quo' and filter on \"T2.organisation_details = 'quo'\" instead of \"detail = 'quo'\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT type_description FROM organizations WHERE detail = 'quo';",
            "SELECT T1.organisation_type_description \nFROM Organisation_Types AS T1\nJOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type\nWHERE T2.organisation_details = 'quo'"
        ],
        "rule_sql": [
            "SELECT T1.organisation_type_description \nFROM Organisation_Types AS T1\nJOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type\nWHERE T2.organisation_details = 'quo'"
        ]
    },
    "5719": {
        "db_id": "dorm_1",
        "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?",
        "ground_truth": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "amends": [
            "Do join `dorm_amenity AS T1` and `has_amenity AS T2` on `T2.amenid = T1.amenid` instead of querying `amenities` directly. Do add a second join to `dorm AS T3` on `T2.dormid = T3.dormid` instead of missing the dorm relationship. Do filter on `T3.dorm_name = 'Anonymous Donor Hall'` instead of using `hall_name` which doesn't exist in the schema. Do select `T1.amenity_name` with table qualification instead of just `amenity_name`. The amended query now correctly retrieves amenities associated with a specific dorm through proper table relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about amenities for a specific dorm: join dorm_amenity AS T1 and has_amenity AS T2 on T2.amenid = T1.amenid to link amenities with their availability. 2) When the question mentions a specific hall name: join dorm AS T3 on T2.dormid = T3.dormid to access dorm information. 3) When filtering for 'Anonymous Donor Hall': use T3.dorm_name = 'Anonymous Donor Hall' exactly as specified, not hall_name which doesn't exist. 4) When selecting amenity names: use T1.amenity_name with table qualification instead of just amenity_name. 5) When ordering amenities alphabetically: sort the results by T1.amenity_name in ascending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT amenity_name FROM amenities WHERE hall_name = 'Anonymous Donor Hall' ORDER BY amenity_name ASC;",
            "SELECT T1.amenity_name \nFROM dorm_amenity AS T1 \nJOIN has_amenity AS T2 ON T2.amenid = T1.amenid \nJOIN dorm AS T3 ON T2.dormid = T3.dormid \nWHERE T3.dorm_name = 'Anonymous Donor Hall' \nORDER BY T1.amenity_name ASC;"
        ],
        "rule_sql": [
            "SELECT T1.amenity_name \nFROM dorm_amenity AS T1 \nJOIN has_amenity AS T2 ON T2.amenid = T1.amenid \nJOIN dorm AS T3 ON T2.dormid = T3.dormid \nWHERE T3.dorm_name = 'Anonymous Donor Hall' \nORDER BY T1.amenity_name ASC;"
        ]
    },
    "6154": {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "ground_truth": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "amends": [
            "Do use column name `Date_of_ceremony` instead of `ceremony_date` and `RESULT` instead of `results`. Do reference table `music_festival` instead of `music_festivals`. The amended query now correctly matches the target schema and behavior."
        ],
        "rules": [
            "1) When the question asks for \"dates of ceremony\": use the exact column name \"Date_of_ceremony\" from the music_festival table. 2) When the question asks for \"results\": use the exact column name \"RESULT\" from the music_festival table. 3) When referencing the music festival table: use the exact table name \"music_festival\" (not \"music_festivals\"). 4) When answering about music festival ceremony dates and results: make sure the output order: Date_of_ceremony, RESULT."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT ceremony_date, results FROM music_festivals",
            "SELECT Date_of_ceremony, Result FROM music_festival;"
        ],
        "rule_sql": [
            "SELECT Date_of_ceremony, Result FROM music_festival ORDER BY Date_of_ceremony, Result;"
        ]
    },
    "16": {
        "db_id": "farm",
        "question": "How many farms are there?",
        "ground_truth": "SELECT count(*) FROM farm",
        "amends": [
            "Do reference table `farm` instead of `animals` in the FROM clause. The amended query now correctly counts records from the farm table instead of the animals table, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"how many farms\": make sure to count records from the \"farm\" table instead of the \"animals\" table. 2) When counting entities: use the canonical counting method for the specified table (farm) to determine the total number of farms."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM animals;",
            "SELECT COUNT(*) FROM farm;"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM farm;"
        ]
    },
    "4902": {
        "db_id": "store_product",
        "question": "Find the list of page size which have more than 3 product listed",
        "ground_truth": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
        "amends": [
            "Do use `max_page_size` instead of `page_size` in the SELECT list and change the table name to `product` instead of `products` in the FROM clause. Do move the aggregate condition to `HAVING count(*) > 3` instead of using `WHERE COUNT(product_id) > 3` with GROUP BY, as aggregate filters must be in HAVING rather than WHERE. Do remove the incorrect `product_id` column reference from the COUNT function and use `count(*)` instead to count all rows per group. The amended query now correctly groups by max_page_size and filters groups with more than 3 records using proper HAVING clause syntax."
        ],
        "rules": [
            "1) When the question asks for \"page size\": use the exact column token \"max_page_size\" from the product table. 2) When counting products per page size: use count(*) to count all rows in each group rather than counting a specific column. 3) When filtering groups by count: place the condition \"count(*) > 3\" in a HAVING clause rather than a WHERE clause. 4) When grouping by page size: group by the exact column token \"max_page_size\". 5) When referring to the product table: use the exact table name \"product\" (singular) rather than \"products\" (plural)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT page_size FROM products WHERE COUNT(product_id) > 3 GROUP BY page_size",
            "SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*) > 3"
        ],
        "rule_sql": [
            "SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*) > 3"
        ]
    },
    "5923": {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the shops that can be accessed by walk?",
        "ground_truth": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "amends": [
            "Do specify `T1.Shop_Details` in the SELECT list instead of selecting all columns with `*`. Do add a `JOIN` with `TOURIST_ATTRACTIONS AS T2` instead of querying only the `shops` table. Do use the join condition `T1.Shop_ID = T2.Tourist_Attraction_ID` instead of no join condition. Do move the filter to `T2.How_to_Get_There = \"walk\"` instead of `transportation = 'walk'` on the shops table. The amended query now correctly joins shops with tourist attractions and filters based on transportation method from the appropriate table."
        ],
        "rules": [
            "1) When answering about \"shops that can be accessed by walk\": make sure the output order includes T1.Shop_Details. 2) When the question mentions \"shops\": combine T1 (shops) with T2 (TOURIST_ATTRACTIONS) using the join condition T1.Shop_ID = T2.Tourist_Attraction_ID and keep only matching pairs (inner match). 3) When the question mentions \"accessed by walk\": filter rows where T2.How_to_Get_There = \"walk\" exactly as shown. 4) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for \"walk\" literal."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM shops WHERE transportation = 'walk'",
            "SELECT T1.Shop_Details \nFROM Shops AS T1\nJOIN Tourist_Attractions AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID\nWHERE T2.How_to_Get_There = 'walk'"
        ],
        "rule_sql": [
            "SELECT T1.Shop_Details \nFROM Shops T1\nINNER JOIN Tourist_Attractions T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID\nWHERE T2.How_to_Get_There = \"walk\""
        ]
    },
    "4726": {
        "db_id": "department_store",
        "question": "Return the average price for each product type.",
        "ground_truth": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",
        "amends": [
            "Do reference `product_type_code` instead of `product_type` in the SELECT list and GROUP BY clause. Do use `avg(product_price)` instead of `AVG(price)` for the aggregate calculation. Do group by `product_type_code` instead of `product_id` to correctly calculate average prices by product type rather than individual products. The amended query now matches RIGHT_SQL's behavior by properly aggregating product prices by their type codes."
        ],
        "rules": [
            "1) When the question asks for \"product type\": use the exact column token \"product_type_code\" from table Products. 2) When calculating average price: use the exact column token \"product_price\" for the average calculation instead of \"price\". 3) When grouping by product type: group by \"product_type_code\" instead of \"product_id\" to get averages per product type rather than per individual product. 4) When the question asks for \"average price for each product type\": make sure the output order: product_type_code first, then the average price."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT product_type, AVG(price) FROM products GROUP BY product_id;",
            "SELECT product_type_code, AVG(product_price) as average_price FROM Products GROUP BY product_type_code"
        ],
        "rule_sql": [
            "SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code ORDER BY product_type_code, average_price;"
        ]
    },
    "2525": {
        "db_id": "movie_1",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "ground_truth": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "amends": [
            "Do use `DISTINCT T2.title` instead of `title` to eliminate duplicates. Do join `Rating AS T1` instead of omitting it, and join `Movie AS T2` on `T1.mID = T2.mID` instead of querying movies directly. Do join `Reviewer AS T3` on `T1.rID = T3.rID` instead of omitting the reviewer table. Do filter on `T3.name = 'Brittany Harris'` instead of `reviewer = 'Brittany Harris'` to use the correct column name from the joined table. Do filter on `T2.year > 2000` instead of `year > 2000` to use the aliased table reference. The amended query now correctly joins the necessary tables and matches the intended behavior."
        ],
        "rules": [
            "1) When answering about movie names: make sure the output order: T2.title. 2) When the question mentions \"movies made after 2000\": use T2.year > 2000 to filter movies by release year. 3) When the question mentions \"reviewed by Brittany Harris\": use T3.name = 'Brittany Harris' to filter reviewers by exact name match. 4) When combining tables for movie reviews: link rows where T1.mID = T2.mID to connect ratings to movies, and T1.rID = T3.rID to connect ratings to reviewers, keeping only matching pairs (inner match). 5) When retrieving movie titles that may have duplicates: use DISTINCT T2.title to eliminate duplicate movie names from the results."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title FROM movies WHERE year > 2000 OR reviewer = 'Brittany Harris';",
            "SELECT DISTINCT T2.title\nFROM Rating AS T1\nJOIN Movie AS T2 ON T1.mID = T2.mID\nJOIN Reviewer AS T3 ON T1.rID = T3.rID\nWHERE T2.year > 2000 OR T3.name = 'Brittany Harris'"
        ],
        "rule_sql": [
            "SELECT DISTINCT T2.title\nFROM Rating T1\nJOIN Movie T2 ON T1.mID = T2.mID\nJOIN Reviewer T3 ON T1.rID = T3.rID\nWHERE T2.year > 2000 OR T3.name = 'Brittany Harris'\nORDER BY T2.title"
        ]
    },
    "564": {
        "db_id": "store_1",
        "question": "How many invoices were billed from each state?",
        "ground_truth": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
        "amends": [
            "Do select `billing_state` instead of `state` and do add `WHERE billing_country = \"USA\"` instead of omitting it, changing both the column selection and adding a country filter. Do use `invoices` table instead of `customers` table, changing the data source entirely. The amended query now correctly counts invoices by billing state for USA customers only, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"invoices billed from each state\": use the \"invoices\" table instead of the \"customers\" table as the data source. 2) When the question mentions \"state\": \"state\" actually means \"billing_state\" in the invoices table. 3) When counting invoices: compute the number of rows using the canonical key from the invoices table. 4) When the question asks for \"each state\": organize results by the exact token \"billing_state\" and compute the count per group. 5) When filtering for USA invoices: add a condition where \"billing_country\" equals exactly \"USA\" (case-sensitive)."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, COUNT(*) FROM customers GROUP BY state;",
            "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state"
        ],
        "rule_sql": [
            "SELECT billing_state, COUNT(id) AS invoice_count FROM invoices GROUP BY billing_state;"
        ]
    },
    "616": {
        "db_id": "store_1",
        "question": "What are the names of all the playlists?",
        "ground_truth": "SELECT name FROM playlists;",
        "amends": [
            "Do select `name` instead of `track_name` from the `playlists` table, as the correct column name for playlist names is `name` rather than `track_name`. The amended query now correctly retrieves playlist names from the playlists table and matches the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"names of all the playlists\": select the exact column \"name\" from the \"playlists\" table. 2) When the question mentions \"playlists\": this refers to the \"playlists\" table in the schema. 3) When producing output for playlist names: ensure the output column is exactly \"name\" from the \"playlists\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT track_name FROM playlists;",
            "SELECT name FROM playlists;"
        ],
        "rule_sql": [
            "SELECT name FROM playlists;"
        ]
    },
    "2965": {
        "db_id": "sakila_1",
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "ground_truth": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "amends": [
            "Do use `JOIN` between `film_category` and `category` instead of `LEFT JOIN` from `category` to `film_category`. Do select `T2.name` and `T1.category_id` instead of `c.category_id` and `c.name`. Do use `count(*)` instead of `COUNT(f.film_id)` to count all records. Do remove the `LEFT JOIN film f ON fc.film_id = f.film_id` entirely instead of including it. Do group by only `T1.category_id` instead of both `c.category_id` and `c.name`. Do remove the `ORDER BY c.category_id` clause instead of keeping it. The amended query now correctly counts films per category without unnecessary joins and ordering.",
            "Do use table aliases `T1` and `T2` instead of full table names. Do place `T2.name` first in the SELECT list instead of `c.category_id`. Do reference `T1.category_id` in the SELECT list instead of `c.category_id`. Do remove the alias `film_count` from the COUNT(*) expression instead of keeping it. Do group by `T1.category_id` instead of `c.category_id` to match the join source table. The amended query now correctly returns category names with their corresponding film counts grouped by category_id."
        ],
        "rules": [
            "1) When combining category and film_category tables: link rows where T1.category_id = T2.category_id using an inner join instead of left join. 2) When counting films per category: count all records using count(*) instead of counting specific film IDs. 3) When selecting category information: output T1.category_id and T2.name instead of c.category_id and c.name. 4) When grouping by category: group by only T1.category_id instead of both category_id and name. 5) When the question does not specify ordering: do not include any ORDER BY clause.",
            "1) When answering about \"names and ids of different categories and how many films are in each\": make sure the output order: T2.name, T1.category_id, COUNT(*) 2) When combining T1 and T2 for shared entities: link rows where T1.category_id = T2.category_id exactly as shown in the amends; keep only matching pairs (inner match) 3) When the question asks for \"how many films are in each\" category: compute the number of rows using the canonical key T1.category_id 4) When the question says \"per category\"/\"by category\": organize results by T1.category_id and compute requested aggregates per group 5) When choosing identifier delimiters: do not use backticks or unquoted forms for table aliases T1 and T2"
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.category_id, c.name, COUNT(f.film_id) AS film_count \nFROM category c \nLEFT JOIN film_category fc ON c.category_id = fc.category_id \nLEFT JOIN film f ON fc.film_id = f.film_id \nGROUP BY c.category_id, c.name \nORDER BY c.category_id;",
            "SELECT c.category_id, c.name, COUNT(*) AS film_count FROM film_category fc JOIN category c ON fc.category_id = c.category_id GROUP BY c.category_id",
            "SELECT T2.name, T1.category_id, COUNT(*) \nFROM film_category T1 \nJOIN category T2 ON T1.category_id = T2.category_id \nGROUP BY T1.category_id"
        ],
        "rule_sql": [
            "SELECT T2.name, T1.category_id, COUNT(*) \nFROM category T1 \nINNER JOIN film_category T2 ON T1.category_id = T2.category_id \nGROUP BY T1.category_id"
        ]
    },
    "5210": {
        "db_id": "music_2",
        "question": "What instruments does the the song \"Le Pop\" use?",
        "ground_truth": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "amends": [
            "Do add `JOIN instruments AS T1` on `T1.songid = T2.songid` instead of querying only the `songs` table. Do reference `instruments` table instead of omitting it from the FROM clause. Do use table alias `T2` for `songs` instead of referencing it directly. Do specify the join condition `T1.songid = T2.songid` instead of having no join relationship. The amended query now correctly joins the instruments and songs tables to retrieve instruments associated with the specified song title, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about instruments used by a specific song: join the instruments table (as T1) with the songs table (as T2) using the condition T1.songid = T2.songid. 2) When the question specifies a song title \"Le Pop\": filter the songs table to only include rows where title equals 'Le Pop' exactly. 3) When retrieving instruments for a song: select the instrument column from the instruments table (T1) after joining with the filtered songs table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT instrument FROM songs WHERE title = 'Le Pop';",
            "SELECT T1.Instrument \nFROM Instruments AS T1 \nJOIN Songs AS T2 ON T1.SongId = T2.SongId \nWHERE T2.Title = 'Le Pop'"
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.Instrument \nFROM Instruments AS T1 \nJOIN Songs AS T2 ON T1.SongId = T2.SongId \nWHERE T2.Title = 'Le Pop'"
        ]
    },
    "1": {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "ground_truth": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "amends": [
            "Do reference table `head` instead of `heads_of_departments` for the FROM source. Do order by `age` instead of `name` for the ORDER BY clause, while keeping the same SELECT list columns `name`, `born_state`, and `age`. The amended query now matches RIGHT_SQL's behavior by querying the correct table and sorting by age rather than name."
        ],
        "rules": [
            "1) When answering about \"heads of departments\": use table \"head\" instead of \"heads_of_departments\" as the data source. 2) When ordering results by age: sort by column \"age\" instead of \"name\" while maintaining the output columns \"name\", \"born_state\", and \"age\" in their original order. 3) When selecting columns for heads of departments: include exactly \"name\", \"born_state\", and \"age\" from table \"head\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, born_state, age FROM heads_of_departments ORDER BY name;",
            "SELECT name, born_state, age FROM head ORDER BY age;"
        ],
        "rule_sql": [
            "SELECT name, born_state, age FROM head ORDER BY age;"
        ]
    },
    "3545": {
        "db_id": "music_1",
        "question": "How many songs have 4 minute duration?",
        "ground_truth": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "amends": [
            "Do reference table `files` instead of `songs` in the FROM clause. Do use `LIKE \"4:%\"` instead of `= 4` in the WHERE filter to match duration patterns starting with \"4:\" instead of exact numeric equality. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for the aggregate function."
        ],
        "rules": [
            "1) When answering about \"How many songs have 4 minute duration\": make sure the output order: count(*) 2) When the question mentions \"songs\": \"songs\" actually means \"files\" in schema 3) When filtering for duration patterns starting with \"4:\": use LIKE \"4:%\" instead of exact numeric equality 4) When counting entities: use lowercase count(*) for the aggregate function"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM songs WHERE duration = 4;",
            "SELECT count(*) FROM files WHERE duration LIKE '4:%'"
        ],
        "rule_sql": [
            "SELECT count(*) FROM files WHERE duration LIKE '4:%'"
        ]
    },
    "3431": {
        "db_id": "hr_1",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "ground_truth": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "amends": [
            "Do use `OR` operator between `department_id = 70` and `department_id = 90` instead of `AND` operator, which would return no results since a single department_id cannot simultaneously equal both 70 and 90. The amended query now correctly returns employees from either department 70 or department 90, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for employees in department 70 OR department 90: use OR operator between department_id = 70 and department_id = 90 instead of AND operator"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE department_id = 70 AND department_id = 90;",
            "SELECT FIRST_NAME, LAST_NAME FROM employees WHERE DEPARTMENT_ID = 70 OR DEPARTMENT_ID = 90;"
        ],
        "rule_sql": [
            "SELECT FIRST_NAME, LAST_NAME FROM employees WHERE DEPARTMENT_ID = 70 OR DEPARTMENT_ID = 90"
        ]
    },
    "4210": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the role code with the least employees.",
        "ground_truth": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT role_code FROM employees GROUP BY role_code ORDER BY COUNT(*) ASC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Role_Code\nFROM Employees\nGROUP BY Role_Code\nORDER BY COUNT(Employee_ID) ASC\nLIMIT 1;"
        ]
    },
    "4874": {
        "db_id": "school_player",
        "question": "Find the team of the player of the highest age.",
        "ground_truth": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "amends": [
            "Do reference table `player` instead of `players` and use column `Team` instead of `team`. Do order by `Age DESC` instead of `age ASC` while maintaining the `LIMIT 1` clause. The amended query now correctly retrieves the team from the player table with the highest age instead of the lowest age."
        ],
        "rules": [
            "1) When the question mentions \"team\": use the exact column token \"Team\" from table \"player\". 2) When the question mentions \"player\": use the exact table name \"player\" instead of \"players\". 3) When the question asks for \"highest age\": order by column \"Age\" in descending direction (DESC) instead of ascending (ASC). 4) When retrieving a single highest value: maintain the limit of 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT team FROM players ORDER BY age ASC LIMIT 1;",
            "SELECT Team FROM player ORDER BY Age DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Team FROM player ORDER BY Age DESC LIMIT 1;"
        ]
    },
    "2378": {
        "db_id": "csu_1",
        "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "ground_truth": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "amends": [
            "Do select `campus` from the `campuses` table instead of from the `faculty` table. Do join `campuses AS t1` with `faculty AS t2` on `t1.id = t2.campus` instead of querying only the faculty table. Do use range conditions `faculty >= 600 AND faculty <= 1000` instead of `faculty_lines BETWEEN 1000 AND 600` to ensure proper numeric comparison order. Do filter on `T1.year = 2004` from the campuses table instead of filtering year from the faculty table. The amended query now correctly joins campuses with faculty data and uses proper range syntax to match the intended logic.",
            "Do use lowercase `campus` instead of uppercase `Campus` in the SELECT list. Do add `T1.year = 2004` to the WHERE clause instead of omitting it, and do remove `t2.Year = 2004` instead of keeping it since the year filter should apply to the campus table rather than the faculty table. Do use lowercase `id` and `campus` in the join condition instead of uppercase `Id` and `Campus`. The amended query now correctly filters by campus year instead of faculty year and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about campuses with faculty lines between 600 and 1000: select \"campus\" from the \"Campuses\" table (as T1) instead of from the \"faculty\" table. 2) When combining campuses and faculty data: join \"Campuses AS T1\" with \"faculty AS T2\" where T1.\"Id\" = T2.\"Campus\" to link campus records with their faculty information. 3) When filtering for year 2004: use T1.\"year\" = 2004 from the campuses table instead of filtering year from the faculty table. 4) When specifying faculty lines range: use faculty >= 600 AND faculty <= 1000 instead of BETWEEN 1000 AND 600 to ensure proper numeric comparison order.",
            "1) When selecting campus names from the Campuses table: use lowercase \"campus\" instead of uppercase \"Campus\" in the output column. 2) When filtering for year 2004: apply the filter to T1.year = 2004 instead of t2.Year = 2004 since the year filter should be on the campus table. 3) When joining Campuses (T1) and faculty (T2) tables: use lowercase \"id\" and \"campus\" in the join condition (T1.id = T2.campus) instead of uppercase \"Id\" and \"Campus\". 4) When filtering faculty lines count: maintain the range condition of faculty lines between 600 and 1000 inclusive (t2.Faculty >= 600 AND t2.Faculty <= 1000)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT campus FROM faculty WHERE year = 2004 AND faculty_lines BETWEEN 1000 AND 600;",
            "SELECT t1.Campus \nFROM Campuses AS t1 \nJOIN faculty AS t2 ON t1.Id = t2.Campus \nWHERE t2.Year = 2004 \nAND t2.Faculty >= 600 \nAND t2.Faculty <= 1000",
            "SELECT t1.campus \nFROM campuses AS t1 \nJOIN faculty AS t2 ON t1.id = t2.campus \nWHERE t1.year = 2004 \nAND t2.faculty >= 600 \nAND t2.faculty <= 1000"
        ],
        "rule_sql": [
            "SELECT T1.campus \nFROM Campuses AS T1\nJOIN faculty AS T2 ON T1.Id = T2.Campus\nWHERE T1.Year = 2004 \nAND T2.Faculty >= 600 \nAND T2.Faculty <= 1000"
        ]
    },
    "3212": {
        "db_id": "college_1",
        "question": "What is the count and code of the job with the most employee?",
        "ground_truth": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do use `emp_jobcode` as the column name instead of `job_code` and place it first in the SELECT list instead of second. Do use `employee` as the table name instead of `employees`. Do remove the alias `employee_count` from the COUNT(*) expression instead of keeping it. Do reference `count(*)` directly in the ORDER BY clause instead of using the alias `employee_count`. The amended query now correctly counts employees by job code and returns the job code with the highest count."
        ],
        "rules": [
            "1) When counting employees per job code: use the exact column name \"emp_jobcode\" from the employee table instead of \"job_code\". 2) When ordering output columns: place \"emp_jobcode\" first in the result before the count. 3) When counting employees: use COUNT(*) without any alias for the count result. 4) When ordering by employee count: reference COUNT(*) directly in the ORDER BY clause instead of using an alias. 5) When finding the job with the most employees: order by COUNT(*) in descending order and keep only the top result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) AS employee_count, job_code FROM employees GROUP BY job_code ORDER BY employee_count DESC LIMIT 1;",
            "SELECT emp_jobcode, COUNT(*) FROM employee GROUP BY emp_jobcode ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT emp_jobcode, COUNT(*) FROM EMPLOYEE GROUP BY emp_jobcode ORDER BY COUNT(*) DESC LIMIT 1"
        ]
    },
    "2260": {
        "db_id": "machine_repair",
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "ground_truth": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "amends": [
            "Do reference the `technician` table instead of `technicians` and use column `Name` instead of `name`. Do reference the `repair_assignment` table instead of `repairs` in the subquery while keeping the same `technician_id` column reference. The amended query now correctly identifies technicians not assigned to any repairs by using the proper table names and column casing."
        ],
        "rules": [
            "1) When answering about \"technicians that have not been assigned to repair machines\": use table \"technician\" instead of \"technicians\" and column \"Name\" instead of \"name\" for the output. 2) When checking for technicians not assigned to repairs: reference the \"repair_assignment\" table instead of \"repairs\" in the subquery. 3) When comparing technician IDs between tables: use the exact column \"technician_id\" in both the main query and subquery to identify unassigned technicians."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM technicians WHERE technician_id NOT IN (SELECT technician_id FROM repairs)",
            "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
        ],
        "rule_sql": [
            "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
        ]
    },
    "1258": {
        "db_id": "apartment_rentals",
        "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "ground_truth": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "amends": [
            "Do select `apt_type_code`, `bathroom_count`, and `bedroom_count` instead of `apartment_type_code`, `bathrooms`, and `bedrooms`. Do aggregate with `sum(room_count)` in the ORDER BY clause instead of counting all rows with `COUNT(*)`. Do order by the sum of room counts instead of the count of records. Do remove the alias `total_rooms` from the SELECT list instead of including it. The amended query now correctly groups by apartment type and orders by the total room count sum rather than the number of apartment records.",
            "Do group by only `apt_type_code` instead of grouping by `apt_type_code`, `bathroom_count`, and `bedroom_count`. Do use `sum(room_count)` directly instead of `SUM(CAST(room_count AS INTEGER))` with unnecessary casting. The amended query now correctly aggregates by apartment type and orders by total room count to find the most common configuration."
        ],
        "rules": [
            "1) When the question asks for \"apartment type code\": use the exact column token \"apt_type_code\" from the Apartments table. 2) When the question asks for \"number of bathrooms\": use the exact column token \"bathroom_count\" from the Apartments table. 3) When the question asks for \"number of bedrooms\": use the exact column token \"bedroom_count\" from the Apartments table. 4) When the question asks for \"largest number of total rooms\": compute the sum of \"room_count\" values for each apartment type group instead of counting rows. 5) When ranking by total room count to find the largest: order the results by the sum of room_count in descending direction and keep only the top result. 6) When grouping by apartment type: organize results by \"apt_type_code\" and compute aggregates per each apartment type group.",
            "1) When grouping by apartment type code to find the largest number of total rooms: group only by \"apt_type_code\" and not by additional columns like \"bathroom_count\" and \"bedroom_count\". 2) When calculating total room count for aggregation: use sum(\"room_count\") directly without unnecessary casting to INTEGER. 3) When answering about the apartment type with the largest number of total rooms: rank apartment types by total room count in descending order and keep only the top result. 4) When selecting output columns for apartment type analysis: include \"apt_type_code\", \"bathroom_count\", and \"bedroom_count\" in the output."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT apartment_type_code, COUNT(*) as total_rooms, bathrooms, bedrooms\nFROM apartments\nGROUP BY apartment_type_code\nORDER BY total_rooms DESC\nLIMIT 1;",
            "SELECT apt_type_code, bathroom_count, bedroom_count\nFROM Apartments\nGROUP BY apt_type_code, bathroom_count, bedroom_count\nORDER BY SUM(CAST(room_count AS INTEGER)) DESC\nLIMIT 1;",
            "SELECT apt_type_code, bathroom_count, bedroom_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY SUM(room_count) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT apt_type_code, bathroom_count, bedroom_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY SUM(room_count) DESC\nLIMIT 1;"
        ]
    },
    "2275": {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "ground_truth": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "amends": [
            "Do select `T2.Name` from the `people` table instead of `name` from the `entrepreneurs` table. Do join `entrepreneur AS T1` with `people AS T2` on `T1.People_ID = T2.People_ID` instead of querying a single table. Do filter with `T1.Investor != \"Rachel Elnaugh\"` instead of `investor = 'Rachel Elnaugh'` to exclude rather than include that investor. Do use table aliases `T1` and `T2` instead of no aliases. The amended query now correctly retrieves names from the people table while excluding entrepreneurs associated with Rachel Elnaugh as an investor."
        ],
        "rules": [
            "1) When answering about entrepreneur names: make sure the output order: T2.Name 2) When the question mentions \"entrepreneurs\": \"entrepreneurs\" actually means \"T1 table\" in schema and \"names\" actually means \"T2.Name in people table\" 3) When combining T1 and T2 for shared entities: link rows where T1.People_ID = T2.People_ID exactly as shown; keep only matching pairs (inner match) 4) When the question asks to exclude \"Rachel Elnaugh\" as investor: filter with T1.Investor != \"Rachel Elnaugh\" to exclude rather than include that investor 5) When handling text literals: do not change case, spacing, or punctuation - use exact literal \"Rachel Elnaugh\""
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM entrepreneurs WHERE investor = 'Rachel Elnaugh';",
            "SELECT T2.Name \nFROM entrepreneur AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nWHERE T1.Investor != 'Rachel Elnaugh'"
        ],
        "rule_sql": [
            "SELECT T2.Name FROM entrepreneur T1 INNER JOIN people T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
        ]
    },
    "5111": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Tell me the name of the most pricy product.",
        "ground_truth": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "amends": [
            "Do select `Product_Name` instead of `name` in the SELECT list. Do order by `Product_Price` instead of `price` in the ORDER BY clause. Do use `DESC` ordering instead of `ASC` ordering. The amended query now correctly retrieves the product with the highest price rather than the lowest price."
        ],
        "rules": [
            "1) When the question asks for \"name\" of a product: use the exact column token \"Product_Name\" from the Services table. 2) When the question asks for the \"most pricy product\": order by \"Product_Price\" in descending order (DESC) to get the highest price first. 3) When retrieving the top result: take only the first row after ordering to get the single most expensive product."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM products ORDER BY price ASC LIMIT 1;",
            "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Product_Name FROM Services ORDER BY Product_Price DESC LIMIT 1;"
        ]
    },
    "4724": {
        "db_id": "department_store",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "ground_truth": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do specify explicit table aliases `T1.customer_name`, `T1.customer_phone`, and `T1.customer_email` instead of using unqualified column names `name`, `phone`, and `email`. Do add `JOIN customer_orders AS T2` instead of querying only the `customers` table. Do use the join condition `ON T1.customer_id = T2.customer_id` instead of no join. Do add `GROUP BY T2.customer_id` instead of omitting grouping. Do use `ORDER BY count(*) DESC` to sort by order count instead of referencing a non-existent `order_count` column. The amended query now correctly identifies the customer with the most orders by joining and counting orders, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"customer with the most orders\": make sure the output order: customer_name, customer_phone, customer_email. 2) When the question mentions \"name, phone number and email address\": these actually mean \"T1.customer_name, T1.customer_phone, and T1.customer_email\" in schema. 3) When combining T1 and T2 for shared entities: link rows where T1.customer_id = T2.customer_id; keep only matching pairs (inner match). 4) When the question asks for \"count of orders\": compute the number of rows using T2.customer_id as the counting key. 5) When the question asks for \"customer with the most orders\": rank rows by count(*) in descending direction and keep the first 1 row. 6) When producing output: do not reorder columns beyond customer_name, customer_phone, customer_email as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, phone, email FROM customers ORDER BY order_count DESC LIMIT 1;",
            "SELECT T1.customer_name, T1.customer_phone, T1.customer_email\nFROM Customers AS T1\nJOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T2.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT c.customer_name, c.customer_phone, c.customer_email\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nGROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email\nORDER BY COUNT(co.order_id) DESC\nLIMIT 1;"
        ]
    },
    "3242": {
        "db_id": "college_1",
        "question": "What are the total number of students enrolled in ACCT-211?",
        "ground_truth": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
        "amends": [
            "Do use `CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code` as the FROM source with an INNER JOIN instead of querying only the `students` table. Do filter on `T1.crs_code = 'ACCT-211'` instead of filtering on `course = 'ACCT-211'` from the wrong table. The amended query now correctly joins the CLASS and enroll tables to count enrollments for the specified course, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"total number of students enrolled in ACCT-211\": use CLASS as T1 JOIN enroll as T2 ON T1.class_code = T2.class_code as the FROM source with an INNER JOIN instead of querying only the students table. 2) When filtering for course ACCT-211: filter on T1.crs_code = 'ACCT-211' instead of filtering on course = 'ACCT-211' from the wrong table. 3) When counting students enrolled: count the number of rows using the join between CLASS and enroll tables where T1.class_code = T2.class_code and T1.crs_code = 'ACCT-211'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE course = 'ACCT-211';",
            "SELECT COUNT(*) AS total_students\nFROM CLASS AS T1\nJOIN ENROLL AS T2 ON T1.CLASS_CODE = T2.CLASS_CODE\nWHERE T1.CRS_CODE = 'ACCT-211'"
        ],
        "rule_sql": [
            "SELECT COUNT(*) AS total_students\nFROM CLASS AS T1\nINNER JOIN ENROLL AS T2 ON T1.CLASS_CODE = T2.CLASS_CODE\nWHERE T1.CRS_CODE = 'ACCT-211'"
        ]
    },
    "2665": {
        "db_id": "party_host",
        "question": "Give me the theme and location of each party.",
        "ground_truth": "SELECT Party_Theme ,  LOCATION FROM party",
        "amends": [
            "Do use table name `party` instead of `parties` and select column `Party_Theme` instead of `theme` while keeping the `LOCATION` column selection. Do change the WHERE filter to use `Party_Theme = 'birthday'` instead of `theme = 'birthday'` to match the correct column name. The amended query now correctly references the proper table and column names to match the intended behavior.",
            "Do use consistent column name casing by selecting `LOCATION` instead of `Location` to match the actual column name in the table schema. Do maintain the same `Party_Theme` filter condition and table source without changes. The amended query now correctly references the `LOCATION` column and matches the RIGHT_SQL's behavior.",
            "Do use consistent column name casing by selecting `LOCATION` instead of `Location` to match the actual column name in the database schema. Do maintain the same `Party_Theme` filter condition without changes. The amended query now correctly retrieves the same data with proper column reference casing.",
            "Do include all rows without filtering instead of applying a `WHERE Party_Theme = 'birthday'` filter that restricts results only to birthday-themed parties. The amended query now returns all party themes and locations from the party table, matching the right SQL's behavior of showing complete unfiltered data."
        ],
        "rules": [
            "1) When the question asks for \"theme and location of each party\": select columns \"Party_Theme\" and \"LOCATION\" from table \"party\". 2) When the question mentions \"party\": use table name \"party\" instead of \"parties\". 3) When the question mentions \"theme\": use column name \"Party_Theme\" instead of \"theme\". 4) When filtering for birthday parties: use condition \"Party_Theme = 'birthday'\" with exact literal value 'birthday'.",
            "1) When the question asks for theme and location of each party: select columns \"Party_Theme\" and \"LOCATION\" from table \"party\". 2) When the question specifies parties with theme 'birthday': filter rows where \"Party_Theme\" equals exactly 'birthday'. 3) When selecting column names: use exact case as shown in schema - \"LOCATION\" not \"Location\".",
            "1) When selecting column names from the database schema: use the exact casing as specified in the schema, such as \"LOCATION\" instead of \"Location\". 2) When filtering by a specific party theme value: maintain the exact literal value 'birthday' without changing case, spacing, or punctuation. 3) When answering about party themes and locations: make sure the output order includes Party_Theme followed by LOCATION.",
            "1) When answering about \"the theme and location of each party\": make sure the output order: Party_Theme, LOCATION. 2) When the question asks for all parties without any theme filter: do not apply any WHERE clause filtering on Party_Theme or other columns. 3) When selecting from the party table: use the exact column names Party_Theme and LOCATION as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT theme, location FROM parties WHERE theme = 'birthday';",
            "SELECT Party_Theme, Location FROM party WHERE Party_Theme = 'birthday';",
            "SELECT Party_Theme, Location FROM party WHERE Party_Theme = 'birthday';",
            "SELECT Party_Theme, LOCATION FROM party WHERE Party_Theme = 'birthday'",
            "SELECT Party_Theme, LOCATION FROM party"
        ],
        "rule_sql": [
            "SELECT Party_Theme, LOCATION FROM party;"
        ]
    },
    "2871": {
        "db_id": "icfp_1",
        "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
        "ground_truth": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "amends": [
            "Do select `DISTINCT t3.name` instead of `institution_name` without distinct. Do join `authors AS t1` with `authorship AS t2` on `t1.authid = t2.authid` instead of querying authors table alone. Do add join with `inst AS t3` on `t2.instid = t3.instid` instead of omitting this table. Do filter with `t1.fname = \"Matthias\" AND t1.lname = \"Blume\"` instead of `author_name = 'Matthias Blume'` to use separate first and last name fields. The amended query now correctly retrieves distinct institution names through proper table relationships instead of attempting to get institution data directly from the authors table."
        ],
        "rules": [
            "1) When the question asks about an author's institution: join authors AS t1 with authorship AS t2 on t1.authid = t2.authid, then join with inst AS t3 on t2.instid = t3.instid to get institution information. 2) When filtering for author \"Matthias Blume\": use separate first and last name fields with t1.fname = \"Matthias\" AND t1.lname = \"Blume\" instead of a single author_name field. 3) When retrieving institution names: select DISTINCT t3.name to get unique institution names. 4) When combining tables for author-institution relationships: perform inner joins using exact key equality (t1.authid = t2.authid and t2.instid = t3.instid) and keep only matching pairs."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT institution_name FROM authors WHERE author_name = 'Matthias Blume';",
            "SELECT DISTINCT t3.name\nFROM Authors AS t1\nJOIN Authorship AS t2 ON t1.authID = t2.authID\nJOIN Inst AS t3 ON t2.instID = t3.instID\nWHERE t1.fname = 'Matthias' AND t1.lname = 'Blume'"
        ],
        "rule_sql": [
            "SELECT DISTINCT t3.name\nFROM Authors AS t1\nJOIN Authorship AS t2 ON t1.authID = t2.authID\nJOIN Inst AS t3 ON t2.instID = t3.instID\nWHERE t1.fname = 'Matthias' AND t1.lname = 'Blume';"
        ]
    },
    "1836": {
        "db_id": "browser_web",
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "ground_truth": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "amends": [
            "Do count `DISTINCT client` instead of `COUNT(*)` to count unique clients rather than all rows. Do reference table `web_client_accelerator` instead of `web_clients_accelerators` with the correct table name. Do remove the `WHERE client_type = 'different'` filter instead of keeping it to include all records without type restriction. The amended query now correctly counts distinct clients from the proper table without unnecessary filtering, matching the intended behavior."
        ],
        "rules": [
            "1) When counting different kinds of clients: count distinct values of the exact column \"client\" from table \"web_client_accelerator\". 2) When the question mentions \"kinds of clients\": this refers to unique values in the \"client\" column, not filtering by \"client_type\". 3) When referencing the web clients accelerators table: use the exact table name \"web_client_accelerator\" without the plural 's' in \"clients\". 4) When answering about client types: do not apply any WHERE filter conditions unless explicitly specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM web_clients_accelerators WHERE client_type = 'different';",
            "SELECT COUNT(DISTINCT Client) FROM Web_client_accelerator;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Client) FROM Web_client_accelerator;"
        ]
    },
    "5401": {
        "db_id": "shop_membership",
        "question": "What is the number of branches that have more than the average number of memberships?",
        "ground_truth": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
        "amends": [
            "Do reference table `branch` instead of `branches` in both the main query and subquery. Do use column `membership_amount` instead of `memberships` in both the comparison condition and subquery aggregate. Do maintain the same aggregate function `avg()` and comparison operator `>` structure while correcting the table and column references to match the actual schema. The amended query now correctly counts branches where membership_amount exceeds the average membership_amount across all branches."
        ],
        "rules": [
            "1) When the question mentions \"branches\": use table \"branch\" instead of \"branches\". 2) When the question mentions \"memberships\": use column \"membership_amount\" instead of \"memberships\". 3) When counting branches that have more than the average number of memberships: compute the average of \"membership_amount\" across all branches and count branches where \"membership_amount\" exceeds that average value."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM branches WHERE memberships > (SELECT AVG(memberships) FROM branches);",
            "SELECT COUNT(*) \nFROM branch \nWHERE membership_amount > (SELECT AVG(membership_amount) FROM branch)"
        ],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM branch \nWHERE CAST(membership_amount AS REAL) > (SELECT AVG(CAST(membership_amount AS REAL)) FROM branch);"
        ]
    },
    "5153": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the email addresses of the drama workshop groups located in Alaska state.",
        "ground_truth": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "amends": [
            "Do select `T2.Store_Email_Address` instead of `email` and use proper table aliasing. Do join `Addresses AS T1` and `Drama_Workshop_Groups AS T2` instead of querying only the `workshops` table. Do use `ON T1.Address_ID = T2.Address_ID` for the join condition instead of no join. Do filter on `T1.State_County = \"Alaska\"` instead of `state = 'Alaska' AND workshop_type = 'drama'`, moving the workshop type logic to the table selection. The amended query now correctly retrieves email addresses from drama workshop groups in Alaska through proper table relationships."
        ],
        "rules": [
            "1) When answering about \"email addresses of drama workshop groups located in Alaska state\": make sure the output order: T2.Store_Email_Address\n2) When the question mentions \"drama workshop groups\": use table \"Drama_Workshop_Groups AS T2\" instead of \"workshops\"\n3) When the question mentions \"located in Alaska state\": filter on T1.State_County = \"Alaska\" instead of state = 'Alaska'\n4) When combining Addresses and Drama_Workshop_Groups for shared entities: link rows where T1.Address_ID = T2.Address_ID and keep only matching pairs (inner match)\n5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for \"Alaska\"\n6) When handling text literals: do not change case, spacing, or punctuation for \"Alaska\""
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT email FROM workshops WHERE state = 'Alaska' AND workshop_type = 'drama';",
            "SELECT T2.Store_Email_Address \nFROM Addresses AS T1 \nJOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID \nWHERE T1.State_County = 'Alaska'"
        ],
        "rule_sql": [
            "SELECT T2.Store_Email_Address\nFROM Addresses AS T1\nINNER JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID\nWHERE T1.State_County = \"Alaska\""
        ]
    },
    "331": {
        "db_id": "product_catalog",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "ground_truth": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "amends": [
            "Do select `catalog_entry_name` instead of `name` and change the source table to `catalog_contents` instead of `products`. Do use `OR` between conditions instead of `AND` and include the `width > 5` filter instead of `height > 5`. The amended query now correctly retrieves catalog entries based on either length or width criteria, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for product names: use \"catalog_entry_name\" from the \"catalog_contents\" table instead of \"name\" from \"products\". 2) When filtering for length smaller than 3 or height greater than 5: use \"OR\" between conditions instead of \"AND\" and filter for \"width > 5\" instead of \"height > 5\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM products WHERE length < 3 AND height > 5;",
            "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR width > 5"
        ],
        "rule_sql": [
            "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR width > 5;"
        ]
    },
    "4535": {
        "db_id": "document_management",
        "question": "Find the average access count of documents with the least popular structure.",
        "ground_truth": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do use `GROUP BY document_structure_code` instead of a subquery with `WHERE structure = (SELECT...)`. Do move the aggregate function `avg(access_count)` to the main query instead of using it with a filtered subquery. Do add `ORDER BY count(*) ASC LIMIT 1` to the main query instead of embedding it in a subquery. Do remove the subquery entirely instead of using correlated filtering. The amended query now correctly calculates the average access count for the document structure with the fewest documents, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for average access count of documents with the least popular structure: use GROUP BY document_structure_code to organize results by document structure. 2) When calculating the average access count: compute avg(access_count) in the main query instead of using subqueries. 3) When finding the least popular structure: order by count(*) in ascending order and keep only the first result using LIMIT 1. 4) When grouping by document structure: remove any subqueries that use correlated filtering and handle the aggregation and filtering in the main query."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT AVG(access_count) FROM documents WHERE structure = (SELECT structure FROM documents GROUP BY structure ORDER BY COUNT(*) ASC LIMIT 1);",
            "SELECT AVG(d.access_count) \nFROM Documents d\nJOIN (\n    SELECT document_structure_code, COUNT(*) as doc_count\n    FROM Documents\n    GROUP BY document_structure_code\n    ORDER BY doc_count ASC\n    LIMIT 1\n) least_popular ON d.document_structure_code = least_popular.document_structure_code;"
        ],
        "rule_sql": [
            "SELECT AVG(access_count) AS average_access_count\nFROM Documents\nWHERE document_structure_code = (\n    SELECT document_structure_code\n    FROM Documents\n    GROUP BY document_structure_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n)"
        ]
    },
    "5445": {
        "db_id": "voter_2",
        "question": "How many students are there in total?",
        "ground_truth": "SELECT count(*) FROM STUDENT",
        "amends": [
            "Do reference the table `STUDENT` instead of `students` and use lowercase `count(*)` instead of uppercase `COUNT(*)`. Do remove the `WHERE grade = 'A'` filter instead of keeping it, as the right query counts all records without filtering. The amended query now matches RIGHT_SQL's behavior by counting all rows in the STUDENT table."
        ],
        "rules": [
            "1) When the question asks for total count of students: count all rows in the \"STUDENT\" table without any filtering conditions. 2) When referring to the student table: use the exact identifier \"STUDENT\" with uppercase letters as shown in the schema. 3) When counting records: use lowercase \"count(*)\" function to count all rows in the table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE grade = 'A';",
            "SELECT count(*) FROM Student"
        ],
        "rule_sql": [
            "SELECT count(*) FROM STUDENT"
        ]
    },
    "888": {
        "db_id": "chinook_1",
        "question": "Cound the number of artists who have not released an album.",
        "ground_truth": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "amends": [
            "Do reference the `ARTIST` table instead of `artists` and use `artistid` instead of `album_id` for the column name. Do use a `NOT IN` subquery checking against the `ALBUM` table instead of checking `IS NULL` on a non-existent column. Do remove the incorrect `album_id` filter and instead implement the proper logic to count artists who have no albums by checking for `artistid` values not present in the `ALBUM` table. The amended query now correctly identifies artists without any albums by using the proper table and column relationships instead of relying on a null check that doesn't reflect the actual data model."
        ],
        "rules": [
            "1) When answering about \"artists who have not released an album\": use the exact table name \"ARTIST\" instead of \"artists\" and the exact column name \"artistid\" instead of \"album_id\". 2) When counting artists without albums: use a NOT IN subquery checking against the \"ALBUM\" table instead of checking IS NULL on a non-existent column. 3) When identifying artists with no albums: check for \"artistid\" values not present in the \"ALBUM\" table to properly reflect the data model relationships."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM artists WHERE album_id IS NULL;",
            "SELECT COUNT(*) FROM Artist WHERE ArtistId NOT IN (SELECT ArtistId FROM Album)"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM ARTIST WHERE artistid NOT IN (SELECT ArtistId FROM ALBUM)"
        ]
    },
    "2132": {
        "db_id": "company_1",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "ground_truth": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "amends": [
            "Do reference the table as `dependent` instead of `dependents` and use column name `Dependent_name` instead of `d.dependent_name`. Do use filter condition `relationship = 'Spouse'` with uppercase 'S' instead of `relationship = 'spouse'` with lowercase 's'. Do remove the table alias `d` from both the SELECT clause and WHERE clause instead of keeping it. The amended query now correctly matches the intended behavior with proper table name, column reference, and case-sensitive filter condition."
        ],
        "rules": [
            "1) When referencing the dependent table: use the exact table name \"dependent\" instead of \"dependents\". 2) When selecting dependent names: use the exact column name \"Dependent_name\" without table alias. 3) When filtering for spouse relationships: use the exact literal value 'Spouse' with uppercase 'S' instead of 'spouse' with lowercase 's'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT d.dependent_name FROM dependents d WHERE d.relationship = 'spouse'",
            "SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'"
        ],
        "rule_sql": [
            "SELECT Dependent_name FROM dependent WHERE Relationship = 'Spouse';"
        ]
    },
    "993": {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "ground_truth": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "amends": [
            "Do join `university AS t1` and `basketball_match AS t2` on `t1.school_id = t2.school_id` instead of querying only the `games` table. Do select `t2.All_Games` and `t1.location` instead of `location` and `score`. Do use the alias `t1` for the `university` table and `t2` for the `basketball_match` table instead of no aliases. Do filter on `team_name = 'Clemson'` in the WHERE clause instead of omitting the table reference for the column. The amended query now correctly joins the university and basketball match tables to retrieve the appropriate game data for Clemson.",
            "Do select `t2.All_Games, t1.location` instead of `t1.Location, t2.All_Games` to reorder the columns. Do use lowercase `location` instead of `Location` for consistent casing. Do use lowercase `school_id` instead of `School_ID` in the join condition for consistent column naming. Do use lowercase `team_name` instead of `Team_Name` in the WHERE clause for consistent column naming. The amended query now correctly selects and orders the columns while maintaining consistent column casing throughout the query."
        ],
        "rules": [
            "1) When answering about school location and game scores: make sure the output order: t1.location, t2.All_Games\n2) When the question mentions \"team name\": \"team name\" actually means \"Team_Name in basketball_match table\"\n3) When combining university and basketball_match tables: link rows where t1.School_ID = t2.school_id and keep only matching pairs (inner match)\n4) When filtering for Clemson team: use exact literal 'Clemson' with correct case and spacing for Team_Name column\n5) When selecting columns: use table aliases t1 for university table and t2 for basketball_match table as specified in the schema",
            "1) When the question asks for \"location and all games score\": make sure the output order is \"t2.All_Games, t1.location\" with \"All_Games\" first and \"location\" second. 2) When referring to the \"location\" column: use lowercase \"location\" instead of \"Location\" for consistent casing. 3) When joining tables university and basketball_match: use lowercase \"school_id\" instead of \"School_ID\" in the join condition \"t1.school_id = t2.school_id\". 4) When filtering for team name \"Clemson\": use lowercase \"team_name\" instead of \"Team_Name\" in the WHERE clause condition \"t2.team_name = 'Clemson'\". 5) When combining tables university and basketball_match: link rows where the canonical keys are equal exactly as shown in the join condition \"t1.school_id = t2.school_id\"; keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT location, score FROM games WHERE team_name = 'Clemson';",
            "SELECT t1.Location, t2.All_Games \nFROM university AS t1 \nJOIN basketball_match AS t2 ON t1.School_ID = t2.School_ID \nWHERE t2.Team_Name = 'Clemson'",
            "SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE t2.team_name = 'Clemson'"
        ],
        "rule_sql": [
            "SELECT t2.All_Games, t1.location FROM university t1 INNER JOIN basketball_match t2 ON t1.school_id = t2.school_id WHERE t2.team_name = 'Clemson'"
        ]
    },
    "4064": {
        "db_id": "student_1",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "ground_truth": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "amends": [
            "Do select `T2.lastname` from the `teachers` table instead of `last_name` from the `teachers` table. Do join `list AS T1` with `teachers AS T2` on `T1.classroom = T2.classroom` instead of querying only the `teachers` table. Do apply the filter conditions `T1.firstname = 'GELL'` and `T1.lastname = 'TAMI'` to the joined `list` table instead of applying them to the `teachers` table. The amended query now correctly retrieves the teacher's lastname by joining with the list table where the student matches the specified name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"teachers that teach GELL TAMI\": make sure the output order: T2.lastname. 2) When the question mentions \"teachers\": combine tables \"list AS T1\" and \"teachers AS T2\" by linking rows where T1.classroom = T2.classroom and keep only matching pairs (inner match). 3) When the question mentions \"GELL TAMI\": apply filter conditions T1.firstname = 'GELL' and T1.lastname = 'TAMI' to the list table (T1). 4) When selecting teacher information: retrieve T2.lastname from the teachers table (T2) instead of last_name from teachers."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT last_name FROM teachers WHERE first_name = 'GELL' AND last_name = 'TAMI';",
            "SELECT T2.LastName FROM list AS T1 JOIN teachers AS T2 ON T1.Classroom = T2.Classroom WHERE T1.FirstName = 'GELL' AND T1.LastName = 'TAMI'"
        ],
        "rule_sql": [
            "SELECT T2.LastName FROM list AS T1 JOIN teachers AS T2 ON T1.Classroom = T2.Classroom WHERE T1.FirstName = 'GELL' AND T1.LastName = 'TAMI'"
        ]
    },
    "2417": {
        "db_id": "candidate_poll",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "ground_truth": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "amends": [
            "Do specify table aliases `t1.name` and `t1.sex` instead of unqualified `name` and `sex`. Do add `min(oppose_rate)` aggregation instead of non-aggregated `oppose_rate` in SELECT with GROUP BY. Do change FROM to `people AS t1 JOIN candidate AS t2` instead of single table `candidates`. Do add JOIN condition `ON t1.people_id = t2.people_id` instead of missing join predicate. Do group by `t1.sex` instead of unqualified `sex`. Do remove ORDER BY clause instead of keeping `ORDER BY oppose_rate DESC`. The amended query now correctly aggregates minimum oppose rates by sex from joined tables with proper table qualifications."
        ],
        "rules": [
            "1) When combining tables \"people\" and \"candidate\": link rows where t1.people_id = t2.people_id and keep only matching pairs (inner match). 2) When answering about \"candidate with the oppose rate for their sex\": for each sex group, find the minimum oppose_rate value. 3) When the question asks for \"name and sex of the candidate\": include both t1.name and t1.sex in the output columns. 4) When grouping by sex: organize results by t1.sex and compute the minimum oppose_rate per group. 5) When the question mentions \"for each sex\": make sure the output includes all distinct sex values from the joined data."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, sex, oppose_rate FROM candidates GROUP BY sex ORDER BY oppose_rate DESC;",
            "SELECT t1.Name, t1.Sex, MIN(t2.Oppose_rate) AS min_oppose_rate\nFROM people AS t1\nJOIN candidate AS t2 ON t1.People_ID = t2.People_ID\nGROUP BY t1.Sex;"
        ],
        "rule_sql": [
            "SELECT p.Sex, p.Name, MIN(c.Oppose_rate) AS Min_Oppose_Rate\nFROM people p\nINNER JOIN candidate c ON p.People_ID = c.People_ID\nGROUP BY p.Sex\nORDER BY p.Sex;"
        ]
    },
    "4363": {
        "db_id": "tracking_grants_for_research",
        "question": "For each staff id, what is the description of the role that is involved with the most number of projects?",
        "ground_truth": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.role_description` and `T2.staff_id` instead of `staff_id` and `description`. Do join from `Staff_Roles AS T1` instead of `staff s`. Do add `JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code` instead of omitting it. Do add `JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id` instead of omitting it. Do use `ON T1.role_code = T2.role_code` instead of `ON s.role_id = r.role_id`. Do group by `T2.staff_id` instead of `staff_id`. Do order by `count(*)` instead of `COUNT(project_id)`. The amended query now correctly joins the necessary tables to count project outcomes per staff member and returns the appropriate role description with staff ID.",
            "Do include `T1.role_description` in the SELECT list instead of omitting it, and do add `LIMIT 1` to the ORDER BY clause instead of returning all results. The amended query now correctly returns the single staff member with the most project outcomes while preserving the role description in the output, matching the RIGHT_SQL's behavior.",
            "Do include `T1.role_description` in the SELECT list instead of omitting it, and do maintain the correct join conditions `T1.role_code = T2.role_code` and `T2.project_id = T3.project_id` instead of altering them. The amended query now correctly groups by `T2.staff_id` and orders by `count(*) DESC` with a `LIMIT 1` to match the RIGHT_SQL's behavior.",
            "Do include `T1.role_description` in the SELECT list instead of omitting it, and do maintain the correct join condition `T1.role_code = T2.role_code` instead of any incorrect predicate. Do preserve the GROUP BY on `T2.staff_id` and ORDER BY `count(*) DESC` with LIMIT 1 to identify the staff member with the most project outcomes. The amended query now correctly returns both the staff_id and role_description for the staff member with the highest count of project outcomes, matching the intended behavior.",
            "Do include `T1.role_description` in the SELECT list instead of omitting it, and do maintain the correct join condition `T1.role_code = T2.role_code` instead of any incorrect predicate. Do preserve the GROUP BY on `T2.staff_id` and ORDER BY `count(*) DESC` with LIMIT 1 to identify the staff member with the most project outcomes. The amended query now correctly returns both the staff_id and role_description for the staff member with the highest count of project outcomes, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT staff_id, description \nFROM staff s \nJOIN roles r ON s.role_id = r.role_id \nGROUP BY staff_id \nORDER BY COUNT(project_id) DESC \nLIMIT 1;",
            "SELECT T2.staff_id, T1.role_description\nFROM Staff_Roles AS T1\nJOIN Project_Staff AS T2 ON T1.role_code = T2.role_code\nJOIN Project_Outcomes AS T3 ON T2.project_id = T3.project_id\nGROUP BY T2.staff_id\nORDER BY COUNT(*) DESC;",
            "SELECT T2.staff_id, T1.role_description\nFROM Staff_Roles AS T1\nJOIN Project_Staff AS T2 ON T1.role_code = T2.role_code\nJOIN Project_Outcomes AS T3 ON T2.project_id = T3.project_id\nGROUP BY T2.staff_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
            "SELECT T2.staff_id, T1.role_description\nFROM Staff_Roles AS T1\nJOIN Project_Staff AS T2 ON T1.role_code = T2.role_code\nJOIN Project_Outcomes AS T3 ON T2.project_id = T3.project_id\nGROUP BY T2.staff_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
            "SELECT T2.staff_id, T1.role_description\nFROM Staff_Roles AS T1\nJOIN Project_Staff AS T2 ON T1.role_code = T2.role_code\nJOIN Project_Outcomes AS T3 ON T2.project_id = T3.project_id\nGROUP BY T2.staff_id\nORDER BY count(*) DESC\nLIMIT 1",
            "SELECT T2.staff_id, T1.role_description\nFROM Staff_Roles AS T1\nJOIN Project_Staff AS T2 ON T1.role_code = T2.role_code\nJOIN Project_Outcomes AS T3 ON T2.project_id = T3.project_id\nGROUP BY T2.staff_id\nORDER BY count(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "5627": {
        "db_id": "swimming",
        "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "ground_truth": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
        "amends": [
            "Do use `INTERSECT` to find swimmers with both 'Win' and 'Loss' results instead of the impossible `WHERE result = 'win' AND result = 'loss'` condition. Do add `JOIN record AS t2 ON t1.id = t2.swimmer_id` instead of querying only the `swimmers` table. Do reference `t1.name` with table alias instead of just `name`. Do use proper table name `swimmer` instead of `swimmers`. Do capitalize 'Win' and 'Loss' consistently instead of mixed case. The amended query now correctly identifies swimmers who have both winning and losing records by intersecting two separate queries."
        ],
        "rules": [
            "1) When the question asks for swimmers with both \"win\" and \"loss\" results: use INTERSECT to combine results from separate queries for 'Win' and 'Loss' instead of using AND in a single condition. 2) When querying swimmer records: join the record table as T2 on T1.id = T2.swimmer_id instead of querying only the swimmer table. 3) When referencing the swimmer name: use T1.name with table alias instead of just name. 4) When referring to the swimmer table: use the exact table name swimmer instead of swimmers. 5) When using result literals: capitalize 'Win' and 'Loss' exactly as shown in the schema instead of mixed case."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM swimmers WHERE result = 'win' AND result = 'loss';",
            "SELECT t1.name\nFROM swimmer t1\nJOIN record AS r1 ON t1.ID = r1.Swimmer_ID\nWHERE r1.Result = 'Win'\nINTERSECT\nSELECT t1.name\nFROM swimmer t1\nJOIN record AS r2 ON t1.ID = r2.Swimmer_ID\nWHERE r2.Result = 'Loss'"
        ],
        "rule_sql": [
            "SELECT T1.name FROM swimmer T1 JOIN record T2 ON T1.ID = T2.Swimmer_ID WHERE T2.Result = 'Win' INTERSECT SELECT T1.name FROM swimmer T1 JOIN record T2 ON T1.ID = T2.Swimmer_ID WHERE T2.Result = 'Loss'"
        ]
    },
    "3423": {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "ground_truth": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "amends": [
            "Do use `commission_pct` instead of `commission` for the column name, and do use `!= \"null\"` instead of `IS NOT NULL` for the null check semantics, while keeping the same `salary BETWEEN 8000 AND 12000` range filter and `department_id != 40` condition with the same OR logical operator structure. The amended query now correctly references the actual commission column with proper null value comparison syntax while maintaining the intended logic to match the RIGHT_SQL's behavior.",
            "Do use `OR` operator precedence without parentheses around `commission_pct != \"null\" OR department_id != 40` instead of grouping these conditions with parentheses, which changes the logical evaluation order. Do maintain the same `BETWEEN` filter on `salary` and the same inequality comparisons on both `commission_pct` and `department_id` instead of altering the column references or comparison operators. The amended query now correctly evaluates the OR condition before the AND, matching the RIGHT_SQL's behavior where either condition can satisfy the filter independently of the salary range.",
            "Do use proper operator precedence with `OR` connecting the entire condition instead of incorrectly grouping `commission_pct != \"null\" OR department_id != 40` within parentheses, which changes the logical evaluation. Do maintain the same `BETWEEN` filter on `salary` and the same inequality checks on both `commission_pct` and `department_id` but with corrected grouping that now properly includes all employees where either condition is true instead of requiring both conditions to be met for the salary range. The amended query now matches RIGHT_SQL's behavior by fixing the logical operator precedence issue.",
            "Do use proper operator precedence with `OR` connecting the final condition instead of incorrectly grouping `commission_pct != \"null\" OR department_id != 40` within parentheses, which changes the logical evaluation order. Do maintain the `salary BETWEEN 8000 AND 12000` filter and both inequality checks `commission_pct != \"null\"` and `department_id != 40` as individual conditions rather than nested logic. The amended query now correctly evaluates the salary range combined with either commission not being null or department not being 40, matching the intended behavior.",
            "Do use proper operator precedence with `OR` connecting the entire condition instead of incorrectly grouping `commission_pct != \"null\" OR department_id != 40` with parentheses, which changes the logical evaluation. Do maintain the same `BETWEEN` filter on `salary` and the same inequality checks on `commission_pct` and `department_id` but with corrected operator precedence that now properly includes employees where either condition is true rather than requiring both conditions to be true within the incorrectly grouped parentheses. The amended query now matches RIGHT_SQL's behavior with the correct logical evaluation."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission IS NOT NULL OR department_id != 40",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)"
        ],
        "rule_sql": []
    },
    "958": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "ground_truth": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference table `medicine_enzyme_interaction` instead of `enzyme_medicine_interactions` as the data source. Do remove the column alias `as count` instead of keeping it. Do reference `count(*)` directly in the ORDER BY clause instead of using the alias `count`. Do add `LIMIT 1` to return only the top result instead of omitting it. The amended query now correctly queries the appropriate table and returns the single most frequent interaction type as intended."
        ],
        "rules": [
            "1) When the question asks about \"most common types of interactions between enzymes and medicine\": use table \"medicine_enzyme_interaction\" as the data source instead of \"enzyme_medicine_interactions\". 2) When counting interaction types: group by \"interaction_type\" and count all rows per group. 3) When ordering results by frequency: order by count(*) in descending order to show most common first. 4) When the question asks for \"most common\" (singular): return only the top result using LIMIT 1. 5) When producing output columns: show \"interaction_type\" and the count without any column alias for the count."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT interaction_type, COUNT(*) as count FROM enzyme_medicine_interactions GROUP BY interaction_type ORDER BY count DESC;",
            "SELECT interaction_type, COUNT(*) \nFROM medicine_enzyme_interaction \nGROUP BY interaction_type \nORDER BY COUNT(*) DESC \nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
    },
    "1132": {
        "db_id": "climbing",
        "question": "Show the height of the mountain climbed by the climber with the maximum points.",
        "ground_truth": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
        "amends": [
            "Do join `climber` and `mountain` tables with `JOIN` on `T1.Mountain_ID = T2.Mountain_ID` instead of querying only `mountains` with a subquery. Do select `T2.Height` from the joined tables instead of just `height` from a single table. Do use `ORDER BY T1.Points DESC LIMIT 1` to get the highest points record instead of using a subquery with `ORDER BY points DESC LIMIT 1` to find the climber_id. Do remove the WHERE clause with subquery filtering instead of keeping it. The amended query now correctly retrieves the mountain height for the climber with the highest points by properly joining the related tables."
        ],
        "rules": [
            "1) When combining climber and mountain tables: link rows where T1.Mountain_ID = T2.Mountain_ID and keep only matching pairs (inner match). 2) When the question asks for the climber with maximum points: rank rows by T1.Points in descending order and keep the first 1 row. 3) When answering about mountain height: make sure to select T2.Height from the mountain table. 4) When retrieving data about climbers and mountains: do not use subquery filtering with WHERE clause; instead perform a proper join between the tables."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT height FROM mountains WHERE climber_id = (SELECT climber_id FROM climbers ORDER BY points DESC LIMIT 1);",
            "SELECT T2.Height \nFROM climber T1 \nJOIN mountain T2 ON T1.Mountain_ID = T2.Mountain_ID \nORDER BY T1.Points DESC \nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT m.Height \nFROM climber c\nINNER JOIN mountain m ON c.Mountain_ID = m.Mountain_ID\nORDER BY c.Points DESC\nLIMIT 1;"
        ]
    },
    "4520": {
        "db_id": "document_management",
        "question": "What are the names of documents that do not have any sections?",
        "ground_truth": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "amends": [
            "Do select `document_name` instead of `name` in the SELECT list. Do change the WHERE filter to use `document_code NOT IN` with a subquery against `document_sections` instead of checking `section_id IS NULL`. Do add a correlated subquery to check for document codes not present in document_sections instead of relying on a simple NULL check. The amended query now correctly identifies documents without associated sections by checking against the document_sections table rather than assuming NULL section_id values indicate missing sections, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When selecting document names: use \"document_name\" instead of \"name\" as the output column. 2) When finding documents without sections: check for documents where \"document_code\" is not present in the \"document_sections\" table using a NOT IN subquery, rather than checking for NULL values in a section_id column. 3) When combining document information: use the \"document_code\" as the key to correlate between the Documents table and document_sections table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM documents WHERE section_id IS NULL;",
            "SELECT document_name FROM Documents WHERE document_code NOT IN (SELECT DISTINCT document_code FROM Document_Sections)"
        ],
        "rule_sql": [
            "SELECT document_name FROM Documents WHERE document_code NOT IN (SELECT DISTINCT document_code FROM Document_Sections)"
        ]
    },
    "3104": {
        "db_id": "behavior_monitoring",
        "question": "Find the id and first name of the student that has the most number of assessment notes?",
        "ground_truth": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.student_id` and `T2.first_name` instead of `id` and `first_name` without proper table qualification. Do add `FROM Assessment_Notes AS T1 JOIN Students AS T2` instead of omitting the Assessment_Notes table and proper join. Do use `ON T1.student_id = T2.student_id` instead of missing the join condition entirely. Do add `GROUP BY T1.student_id` instead of omitting the grouping clause. Do use `count(*)` in ORDER BY instead of `COUNT(assessment_notes)` without proper aggregation context. The amended query now correctly joins the assessment notes with student data, groups by student to count assessments per student, and returns the student with the most assessment notes, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"student that has the most number of assessment notes\": make sure the output order: T1.student_id, T2.first_name. 2) When the question mentions \"id\": \"id\" actually means \"T1.student_id in schema\". 3) When the question mentions \"first name\": \"first name\" actually means \"T2.first_name in schema\". 4) When combining Assessment_Notes as T1 and Students as T2: link rows where T1.student_id = T2.student_id exactly; keep only matching pairs (inner match). 5) When the question asks for \"most number of assessment notes\": organize results by T1.student_id and count the number of assessment notes per student using count(*). 6) When the question asks for \"the student that has the most\": rank rows by count(*) in descending direction and keep the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, first_name FROM students ORDER BY COUNT(assessment_notes) DESC LIMIT 1;",
            "SELECT T1.student_id, T2.first_name\nFROM Assessment_Notes AS T1\nJOIN Students AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.student_id, T2.first_name\nFROM Assessment_Notes T1\nINNER JOIN Students T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id, T2.first_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "3352": {
        "db_id": "sports_competition",
        "question": "What are the names of all the clubs starting with the oldest?",
        "ground_truth": "SELECT name FROM club ORDER BY Start_year ASC",
        "amends": [
            "Do reference table `club` instead of `clubs` in the FROM clause. Do order by column `Start_year` instead of `established_year` in the ORDER BY clause. The amended query now correctly references the intended table and ordering column to match the right SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"names of all the clubs starting with the oldest\": make sure the output order: name. 2) When the question mentions \"oldest\": order rows by \"Start_year\" in ascending order (oldest first). 3) When referring to the clubs table: use table \"club\" instead of \"clubs\". 4) When ordering by establishment year: use column \"Start_year\" instead of \"established_year\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM clubs ORDER BY established_year ASC;",
            "SELECT name FROM club ORDER BY Start_year ASC;"
        ],
        "rule_sql": [
            "SELECT name FROM club ORDER BY Start_year ASC;"
        ]
    },
    "720": {
        "db_id": "customers_card_transactions",
        "question": "What are the different card types, and how many cards are there of each?",
        "ground_truth": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "amends": [
            "Do reference `card_type_code` instead of `card_type` in both the SELECT list and GROUP BY clause. Do use the table name `Customers_cards` instead of `cards` as the data source. The amended query now correctly references the appropriate column and table to match the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"card types\": use the exact column \"card_type_code\" from table \"Customers_cards\" instead of \"card_type\". 2) When counting cards per card type: count using the canonical key from table \"Customers_cards\" and group by \"card_type_code\". 3) When selecting from the cards data source: use the exact table name \"Customers_cards\" instead of \"cards\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT card_type, COUNT(*) FROM cards GROUP BY card_type;",
            "SELECT card_type_code, COUNT(*) AS card_count FROM Customers_Cards GROUP BY card_type_code;"
        ],
        "rule_sql": [
            "SELECT card_type_code, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY card_type_code;"
        ]
    },
    "6925": {
        "db_id": "tracking_orders",
        "question": "List the names of all distinct products in alphabetical order.",
        "ground_truth": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT product_name FROM products ORDER BY product_name ASC"
        ],
        "rule_sql": [
            "SELECT DISTINCT product_name FROM Products ORDER BY product_name ASC;"
        ]
    },
    "4843": {
        "db_id": "local_govt_and_lot",
        "question": "How many residents does each property have? List property id and resident count.",
        "ground_truth": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT property_id, COUNT(*) FROM residents GROUP BY property_id;"
        ],
        "rule_sql": [
            "SELECT property_id, COUNT(DISTINCT resident_id) AS resident_count FROM Residents GROUP BY property_id;"
        ]
    },
    "5271": {
        "db_id": "music_2",
        "question": "How many songs appear in studio albums?",
        "ground_truth": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "amends": [
            "Do use `count(DISTINCT T3.title)` instead of `COUNT(*)` to count distinct song titles rather than all rows. Do join `albums AS T1` and `tracklists AS T2` with `ON T1.aid = T2.albumid` instead of querying only the `songs` table. Do add a second join to `songs AS T3` with `ON T2.songid = T3.songid` instead of missing the relationship between albums and songs. Do filter on `t1.type = \"Studio\"` instead of `album_type = 'studio'` to use the correct column name and table reference. The amended query now correctly counts distinct studio album songs by properly joining through the tracklists relationship table."
        ],
        "rules": [
            "1) When answering about \"songs in studio albums\": make sure the output order: count of distinct song titles. 2) When the question mentions \"studio albums\": \"studio\" actually means \"type = 'Studio'\" in the albums table T1. 3) When combining T1 (albums) and T2 (tracklists) for shared entities: link rows where T1.aid = T2.albumid exactly as shown; keep only matching pairs (inner match). 4) When combining T2 (tracklists) and T3 (songs) for shared entities: link rows where T2.songid = T3.songid exactly as shown; keep only matching pairs (inner match). 5) When the question asks for \"count of songs\": compute the number of distinct values of T3.title using count(DISTINCT T3.title). 6) When filtering for studio albums: use the exact literal 'Studio' with T1.type = \"Studio\" (note double quotes around Studio)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM songs WHERE album_type = 'studio';",
            "SELECT COUNT(DISTINCT T3.Title) \nFROM Albums AS T1 \nJOIN Tracklists AS T2 ON T1.AId = T2.AlbumId \nJOIN Songs AS T3 ON T2.SongId = T3.SongId \nWHERE T1.Type = 'Studio'"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT s.Title) \nFROM Albums a\nINNER JOIN Tracklists t ON a.AId = t.AlbumId\nINNER JOIN Songs s ON t.SongId = s.SongId\nWHERE a.Type = \"Studio\""
        ]
    },
    "2282": {
        "db_id": "entrepreneur",
        "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
        "ground_truth": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "amends": [
            "Do join `entrepreneur AS T1` with `people AS T2` on `T1.People_ID = T2.People_ID` instead of querying only the `entrepreneurs` table. Do filter on `T2.Height > 1.85` instead of filtering directly on the `entrepreneurs.height` column. Do reference the column as `T1.Money_Requested` with proper table qualification instead of using just `money_requested`. The amended query now correctly aggregates money requested by entrepreneurs based on their height from the related people table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"total money requested by entrepreneurs who are taller than 1.85\": make sure the output order: SUM(T1.Money_Requested)\n2) When combining entrepreneur and people tables: link rows where T1.People_ID = T2.People_ID and keep only matching pairs (inner match).\n3) When filtering for height greater than 1.85: apply the condition T2.Height > 1.85 using the people table's height column.\n4) When aggregating money requested: use T1.Money_Requested from the entrepreneur table with proper table qualification."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(money_requested) FROM entrepreneurs WHERE height > 1.85",
            "SELECT SUM(T1.Money_Requested) AS Total_Money_Requested FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85"
        ],
        "rule_sql": [
            "SELECT SUM(T1.Money_Requested) \nFROM entrepreneur T1 \nINNER JOIN people T2 ON T1.People_ID = T2.People_ID \nWHERE T2.Height > 1.85"
        ]
    },
    "4482": {
        "db_id": "network_2",
        "question": "Find Alice's friends of friends.",
        "ground_truth": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "amends": [
            "Do use explicit table aliases `T1`, `T2`, `T3`, `T4` instead of generic `f1`, `f2`. Do join through multiple relationship tables `PersonFriend` and `Person` instead of a single `friends` table. Do navigate through a chain of friendships with `T1.name = T2.name`, `T1.friend = T3.name`, and `T3.friend = T4.name` instead of direct `f1.friend_id = f2.user_id`. Do select `T4.name` instead of `f2.friend_id`. Do filter on `T2.name = 'Alice'` instead of `f1.user_id = 'Alice'`. Do maintain the exclusion condition `T4.name != 'Alice'` instead of `f2.friend_id != 'Alice'`. The amended query now correctly finds friends of friends through proper table relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"Alice's friends of friends\": make sure the output order: T4.name\n2) When the question mentions \"friends\": use the PersonFriend table with relationships T1.friend = T3.name and T3.friend = T4.name to navigate through friendship chains\n3) When combining tables for shared entities: link rows where T1.name = T2.name, T1.friend = T3.name, and T3.friend = T4.name using exact key equality\n4) When filtering for Alice: use T2.name = 'Alice' exactly as specified with the literal 'Alice'\n5) When excluding Alice from results: maintain the condition T4.name != 'Alice' to prevent self-references\n6) When selecting output: choose T4.name as the final friend of friend identifier"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT f2.friend_id\nFROM friends f1\nJOIN friends f2 ON f1.friend_id = f2.user_id\nWHERE f1.user_id = 'Alice' AND f2.friend_id != 'Alice'",
            "SELECT DISTINCT T4.name\nFROM PersonFriend T1\nJOIN Person T2 ON T1.name = T2.name\nJOIN PersonFriend T3 ON T1.friend = T3.name\nJOIN Person T4 ON T3.friend = T4.name\nWHERE T2.name = 'Alice' AND T4.name != 'Alice'"
        ],
        "rule_sql": [
            "SELECT DISTINCT T4.name\nFROM PersonFriend T1\nJOIN Person T2 ON T1.name = T2.name\nJOIN PersonFriend T3 ON T1.friend = T3.name\nJOIN Person T4 ON T3.friend = T4.name\nWHERE T2.name = 'Alice'\nAND T4.name != 'Alice'\nORDER BY T4.name;"
        ]
    },
    "3812": {
        "db_id": "e_learning",
        "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "ground_truth": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
        "amends": [
            "Do reference columns with table aliases `T1.course_name` and `T1.course_description` instead of unqualified `course_name` and `description`. Do join table `Subjects AS T2` instead of omitting it. Do use join condition `T1.subject_id = T2.subject_id` instead of filtering directly on subject. Do filter on `T2.subject_name = \"Computer Science\"` instead of `subject = 'Computer Science'` to properly reference the normalized relationship. The amended query now correctly joins the Courses and Subjects tables to filter by subject name rather than assuming a denormalized structure."
        ],
        "rules": [
            "1) When answering about course names and descriptions: make sure the output order: T1.course_name, T1.course_description. 2) When the question mentions \"subject named 'Computer Science'\": \"subject\" actually means \"T2.subject_name in schema\" and the literal must be exactly \"Computer Science\". 3) When combining Courses as T1 and Subjects as T2 for shared entities: link rows where T1.subject_id = T2.subject_id exactly as shown; keep only matching pairs (inner match). 4) When filtering by subject name: use T2.subject_name = \"Computer Science\" instead of filtering directly on the Courses table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT course_name, description FROM courses WHERE subject = 'Computer Science'",
            "SELECT T1.course_name, T1.course_description \nFROM Courses AS T1 \nJOIN Subjects AS T2 ON T1.subject_id = T2.subject_id \nWHERE T2.subject_name = 'Computer Science'"
        ],
        "rule_sql": [
            "SELECT T1.course_name, T1.course_description\nFROM Courses AS T1\nINNER JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id\nWHERE T2.subject_name = 'Computer Science'"
        ]
    },
    "5406": {
        "db_id": "shop_membership",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "ground_truth": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "amends": [
            "Do reference table `branch` instead of `branches` in the FROM clause. Do use column `membership_amount` instead of `memberships` in the WHERE filter. Do use `>=` comparison operator instead of `>` for the membership threshold. The amended query now correctly filters branches with membership amounts of 100 or greater while preserving the distinct city selection.",
            "Do remove the `CAST` function and use `membership_amount >= 100` instead of casting to `REAL` and then comparing. Do use lowercase `city` instead of `b.City` with table alias. Do remove the table alias `b` from the column references instead of keeping them. The amended query now correctly filters branches by membership amount without unnecessary type conversion and matches the right SQL's behavior."
        ],
        "rules": [
            "1) When the question mentions \"branches\": use table \"branch\" instead of \"branches\". 2) When filtering for membership amounts: use column \"membership_amount\" instead of \"memberships\". 3) When filtering for \"at least 100 memberships\": use >= 100 comparison instead of > 100 to include branches with exactly 100 memberships. 4) When selecting distinct cities from branches: use DISTINCT on the city column to return unique city values.",
            "1) When filtering by membership amount: use membership_amount >= 100 without casting to REAL. 2) When selecting city column: use lowercase city without table alias. 3) When answering about distinct cities: return only unique city values where branches have at least 100 memberships."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT city FROM branches WHERE memberships > 100;",
            "SELECT DISTINCT b.City\nFROM branch b\nWHERE CAST(b.membership_amount AS REAL) >= 100",
            "SELECT DISTINCT city FROM branch WHERE membership_amount >= 100"
        ],
        "rule_sql": [
            "SELECT DISTINCT city FROM branch WHERE membership_amount >= '100';"
        ]
    },
    "2997": {
        "db_id": "sakila_1",
        "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.",
        "ground_truth": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT s.first_name, s.last_name \nFROM staff s \nJOIN rental r ON s.staff_id = r.staff_id \nJOIN customer c ON r.customer_id = c.customer_id \nWHERE c.first_name = 'April' AND c.last_name = 'Burns'"
        ],
        "rule_sql": [
            "SELECT s.first_name || ' ' || s.last_name AS full_name\nFROM staff s\nJOIN rental r ON s.staff_id = r.staff_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'April' AND c.last_name = 'Burns'\nGROUP BY s.staff_id;"
        ]
    },
    "5776": {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "ground_truth": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "amends": [
            "Do select `email_address` instead of `email` and add table alias `t1`. Do use `JOIN` between `customers` and `complaints` on `t1.customer_id = t2.customer_id` instead of a subquery with `IN`. Do remove the nested subquery finding the most complained product and instead group by `t1.customer_id` to count complaints per customer. Do add `ORDER BY count(*)` to sort by complaint count instead of ordering by product complaint frequency. Do keep `LIMIT 1` but apply it to the customer with most complaints instead of filtering by the most complained product. The amended query now correctly identifies the customer with the highest number of complaints rather than customers who complained about the most complained product.",
            "Do use `t1.email_address` instead of `c.email_address` for the SELECT column. Do use `customers AS t1` and `complaints AS t2` instead of `Customers c` and `Complaints co` for table aliases. Do use `t1.customer_id = t2.customer_id` instead of `c.customer_id = co.customer_id` for the JOIN condition. Do use `ORDER BY count(*)` instead of `ORDER BY COUNT(*) DESC` to sort in ascending order rather than descending. The amended query now matches the RIGHT_SQL's behavior with proper aliases and ascending order sorting."
        ],
        "rules": [
            "1) When the question asks for \"emails of customers\": use the exact column token \"email_address\" from the customers table with alias t1. 2) When combining customers and complaints tables: link rows where t1.customer_id = t2.customer_id using an inner join. 3) When counting complaints per customer: group by t1.customer_id to count the number of complaints for each customer. 4) When finding the customer with the most complaints: order the results by count(*) in descending order and keep only the first row using LIMIT 1. 5) When the question asks for customers who filed complaints of the product with most complaints: instead find the customer with the highest total number of complaints across all products.",
            "1) When using table aliases: use \"customers AS t1\" and \"complaints AS t2\" as the canonical aliases for these tables. 2) When selecting email addresses: use \"t1.email_address\" as the exact output column. 3) When joining customers and complaints: link rows where \"t1.customer_id = t2.customer_id\" using exact key equality. 4) When ordering by complaint count: sort by \"count(*)\" in ascending order (lowest to highest) rather than descending. 5) When finding the product with the most complaints: use \"LIMIT 1\" to return only the top result after ordering by complaint count."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT email FROM customers WHERE customer_id IN (SELECT customer_id FROM complaints WHERE product_id = (SELECT product_id FROM complaints GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1));",
            "SELECT c.email_address\nFROM Customers c\nJOIN Complaints co ON c.customer_id = co.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT t1.email_address\nFROM customers AS t1\nJOIN complaints AS t2 ON t1.customer_id = t2.customer_id\nGROUP BY t1.customer_id\nORDER BY count(*)\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT t1.email_address\nFROM Customers AS t1\nINNER JOIN Complaints AS t2 ON t1.customer_id = t2.customer_id\nGROUP BY t1.customer_id\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ]
    },
    "785": {
        "db_id": "race_track",
        "question": "Show the name and location of track with 1 race.",
        "ground_truth": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "amends": [
            "Do join `race AS T1` with `track AS T2` on `T1.track_id = T2.track_id` instead of querying only the `track` table. Do select `T2.name` and `T2.location` with table aliases instead of unqualified `name` and `location`. Do add `GROUP BY T1.track_id` and `HAVING count(*) = 1` to filter for tracks with exactly one race instead of filtering by `race = 1`. Do remove the `WHERE race = 1` condition entirely instead of keeping it. The amended query now correctly identifies tracks with exactly one associated race rather than filtering by a specific race ID value."
        ],
        "rules": [
            "1) When answering about \"tracks with 1 race\": join race AS T1 with track AS T2 on T1.track_id = T2.track_id using inner match instead of querying only the track table. 2) When selecting output columns: use T2.name and T2.location with table aliases instead of unqualified name and location. 3) When filtering for tracks with exactly one race: group by T1.track_id and apply having count(*) = 1 instead of using WHERE race = 1. 4) When the question asks for tracks with exactly one race: remove any WHERE race = 1 condition entirely as it incorrectly filters by race ID value rather than counting races per track."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, location FROM track WHERE race = 1",
            "SELECT T2.Name, T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T1.Track_ID HAVING COUNT(*) = 1"
        ],
        "rule_sql": [
            "SELECT T2.Name, T2.Location FROM race AS T1 INNER JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T1.Track_ID HAVING COUNT(*) = 1"
        ]
    },
    "6614": {
        "db_id": "train_station",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "ground_truth": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",
        "amends": [
            "Do use explicit table joins with `train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id` instead of querying a single `trains` table. Do reference columns with table aliases as `T3.name` and `T3.time` instead of `train_name` and `station_time`. Do filter on `T2.location = 'London'` instead of `station_city = 'London'` to correctly identify London stations. Do order by `T3.time DESC` instead of `station_time ASC` to sort in descending order. The amended query now properly joins the relational tables and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about train names and times in London stations: make sure the output order: T3.name, T3.time\n2) When combining tables for train station information: link rows where T1.station_id = T2.station_id and T1.train_id = T3.train_id; keep only matching pairs (inner match)\n3) When filtering for stations in London: use T2.location = 'London' exactly as specified\n4) When ordering by train time: sort by T3.time in descending order (highest to lowest)\n5) When selecting train names and times: use T3.name for train names and T3.time for train times"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT train_name, station_time FROM trains WHERE station_city = 'London' ORDER BY station_time ASC;",
            "SELECT T3.Name, T3.Time\nFROM train_station AS T1\nJOIN station AS T2 ON T1.Station_ID = T2.Station_ID\nJOIN train AS T3 ON T3.Train_ID = T1.Train_ID\nWHERE T2.Location = 'London'\nORDER BY T3.Time DESC;"
        ],
        "rule_sql": [
            "SELECT T3.name, T3.time\nFROM train_station T1\nJOIN station T2 ON T1.Station_ID = T2.Station_ID\nJOIN train T3 ON T1.Train_ID = T3.Train_ID\nWHERE T2.Location = 'London'\nORDER BY T3.time DESC;"
        ]
    },
    "1267": {
        "db_id": "apartment_rentals",
        "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
        "ground_truth": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "amends": [
            "Do reference column `gender_code` instead of `gender` in the SELECT list and GROUP BY clause. Do order by `COUNT(*) DESC` instead of `gender DESC` to sort by the count results rather than the gender codes themselves. Do remove the alias `count` from the aggregate function instead of keeping it, as the right query does not include an explicit alias. The amended query now correctly groups by the gender_code column and orders by the actual count values in descending order, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for gender codes: use the exact column token \"gender_code\" from the Guests table instead of \"gender\". 2) When counting guests per gender code: count all rows using COUNT(*) without an alias. 3) When sorting by number of guests: order by the count results in descending order (DESC) rather than by the gender codes themselves. 4) When grouping results: organize by the exact column token \"gender_code\" from the Guests table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT gender, COUNT(*) as count FROM guests GROUP BY gender ORDER BY gender DESC;",
            "SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC;"
        ],
        "rule_sql": [
            "SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC;"
        ]
    },
    "5729": {
        "db_id": "dorm_1",
        "question": "What is the average age and how many male students are there in each city?",
        "ground_truth": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "amends": [
            "Do select `count(*)`, `avg(age)`, and `city_code` instead of `city`, `AVG(age) as average_age`, and `COUNT(*) as total_students`. Do use table `student` instead of `students`. Do add `WHERE sex = 'M'` filter instead of omitting it. Do group by `city_code` instead of `city`. Do remove the column aliases `average_age` and `total_students` instead of keeping them. The amended query now correctly filters for male students and uses the appropriate column names and grouping criteria.",
            "Do reorder the SELECT list to place `count(*)` first instead of `city_code`, and use lowercase `avg(age)` instead of uppercase `AVG(Age)` while keeping the same aggregation logic. Do maintain the same `WHERE sex = 'M'` filter and `GROUP BY city_code` clause without changes to the underlying logic. The amended query now correctly matches the RIGHT_SQL's behavior with identical results despite the syntactic differences."
        ],
        "rules": [
            "1) When the question asks about \"male students\": filter rows where \"sex\" equals exactly 'M'. 2) When the question asks for \"average age\": compute the average of the \"age\" column. 3) When the question asks for \"how many male students\": count the number of rows that satisfy the male filter condition. 4) When the question asks for \"each city\": group results by the \"city_code\" column instead of \"city\". 5) When selecting output columns: include \"city_code\", the average of \"age\", and the count of male students, without using column aliases. 6) When referring to the student table: use the exact table name \"student\" instead of \"students\".",
            "1) When answering about \"average age and how many male students are there in each city\": make sure the output order: count of male students first, then average age, then city_code. 2) When computing average age: use lowercase \"avg(age)\" instead of uppercase \"AVG(Age)\". 3) When counting male students: count all rows where \"sex = 'M'\" using the exact literal 'M'. 4) When grouping by city: use \"city_code\" as the grouping key. 5) When producing output: maintain the exact column sequence of count(*), then avg(age), then city_code."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city, AVG(age) as average_age, COUNT(*) as total_students FROM students GROUP BY city;",
            "SELECT city_code, AVG(Age), COUNT(*) FROM Student WHERE Sex = 'M' GROUP BY city_code",
            "SELECT count(*), avg(age), city_code FROM Student WHERE sex = 'M' GROUP BY city_code"
        ],
        "rule_sql": [
            "SELECT COUNT(*), AVG(age), city_code FROM student WHERE sex = 'M' GROUP BY city_code"
        ]
    },
    "2311": {
        "db_id": "perpetrator",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "amends": [
            "Do join `people AS T1` with `perpetrator AS T2` on `T1.People_ID = T2.People_ID` instead of querying only the `perpetrators` table. Do select `T1.Name` from the joined tables instead of selecting `name` from a single table. Do order by `T1.Weight DESC` instead of ordering by `weight DESC` without table qualification. The amended query now correctly retrieves the perpetrator's name from the people table while maintaining the ordering by weight and limit behavior."
        ],
        "rules": [
            "1) When answering about \"the name of the perpetrator with the biggest weight\": make sure the output order: T1.Name. 2) When combining people and perpetrator tables: link rows where T1.People_ID = T2.People_ID and keep only matching pairs (inner match). 3) When the question mentions \"biggest weight\": rank rows by T1.Weight in descending direction and keep the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM perpetrators ORDER BY weight DESC LIMIT 1;",
            "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.Name\nFROM people T1\nINNER JOIN perpetrator T2 ON T1.People_ID = T2.People_ID\nORDER BY T1.Weight DESC\nLIMIT 1"
        ]
    },
    "3474": {
        "db_id": "hr_1",
        "question": "What are the full names and department ids for the lowest paid employees across all departments.",
        "ground_truth": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "amends": [
            "Do use `IN` with a subquery that includes `GROUP BY department_id` instead of `=` with a subquery that omits grouping, to find employees with the minimum salary within each department rather than globally. Do keep the same `SELECT` list with `first_name`, `last_name`, and `department_id` instead of changing it. Do maintain the same `FROM employees` source instead of altering it. Do remove the `ORDER BY department_id` clause instead of keeping it, as the grouping in the subquery handles the departmental logic. The amended query now correctly identifies employees with the minimum salary per department rather than the absolute minimum across all employees.",
            "Do filter by `salary IN` subquery instead of `(department_id, salary) IN` to correctly identify minimum salaries per department. Do remove the redundant `department_id` from the subquery's SELECT list and WHERE clause correlation since the GROUP BY already handles department grouping. Do keep the same column selection `first_name, last_name, department_id` and maintain the same FROM source and WHERE structure. The amended query now correctly identifies employees with the minimum salary within each department without the incorrect multi-column correlation that could exclude valid results."
        ],
        "rules": [
            "1) When answering about \"lowest paid employees across all departments\": make sure the output order: first_name, last_name, department_id. 2) When the question asks for employees with minimum salary per department: use a subquery that groups by department_id to find the minimum salary within each department instead of globally. 3) When comparing salaries to find minimum per department: use IN with the grouped subquery results instead of = with a global minimum. 4) When organizing results by department: the grouping in the subquery handles departmental logic, so do not include an ORDER BY department_id clause in the main query. 5) When selecting employee information: keep the same SELECT list with first_name, last_name, and department_id without changing it.",
            "1) When the question asks for lowest paid employees across all departments: use a subquery to find the minimum salary per department by grouping on department_id. 2) When filtering for employees with minimum salary per department: check if employee salary equals the minimum salary for their department using salary IN subquery, not by matching both department_id and salary together. 3) When computing minimum salary per department: select only MIN(salary) in the subquery without including department_id in the SELECT list since GROUP BY department_id already handles the grouping. 4) When answering about lowest paid employees: maintain output columns as first_name, last_name, and department_id in that order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name, department_id FROM employees WHERE salary = (SELECT MIN(salary) FROM employees) ORDER BY department_id;",
            "SELECT first_name, last_name, department_id FROM employees WHERE (department_id, salary) IN (SELECT department_id, MIN(salary) FROM employees GROUP BY department_id)",
            "SELECT first_name, last_name, department_id\nFROM employees\nWHERE salary IN (\n    SELECT MIN(salary)\n    FROM employees\n    GROUP BY department_id\n)"
        ],
        "rule_sql": [
            "SELECT e.first_name, e.last_name, e.department_id\nFROM employees e\nWHERE e.salary IN (\n    SELECT MIN(salary)\n    FROM employees\n    WHERE department_id IS NOT NULL\n    GROUP BY department_id\n)\nORDER BY e.department_id;"
        ]
    },
    "383": {
        "db_id": "flight_1",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "ground_truth": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "amends": [
            "Do use column aliases `flno`, `origin`, and `destination` instead of `flight_number`, `destination`, and `origin` in the SELECT list. Do reference table `Flight` instead of `flights` in the FROM clause. Do order by `origin` instead of `destination` in the ORDER BY clause. The amended query now correctly references the proper table name and column aliases while maintaining the intended sorting logic."
        ],
        "rules": [
            "1) When the question asks for flight information: use table \"Flight\" instead of \"flights\" as the data source. 2) When selecting flight number, origin, and destination: use column aliases \"flno\", \"origin\", and \"destination\" respectively. 3) When ordering by departure cities alphabetically: sort by the \"origin\" column in ascending order instead of \"destination\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT flight_number, destination, origin FROM flights ORDER BY destination ASC;",
            "SELECT flno, origin, destination FROM flight ORDER BY origin;"
        ],
        "rule_sql": [
            "SELECT flno, origin, destination FROM flight ORDER BY origin ASC;"
        ]
    },
    "1177": {
        "db_id": "election_representative",
        "question": "What are the minimum and maximum vote percents of elections?",
        "ground_truth": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
        "amends": [
            "Do reference table `election` instead of `elections` and remove the `WHERE vote_percent > 100` filter instead of keeping it, as the correct logic requires analyzing all vote percentages without restriction. Do use lowercase function names `min` and `max` instead of uppercase `MIN` and `MAX`, and remove the column aliases `min_vote_percent` and `max_vote_percent` instead of including them. The amended query now correctly calculates the minimum and maximum vote percentages from the entire election table without filtering out valid data."
        ],
        "rules": [
            "1) When answering about minimum and maximum vote percents of elections: use the table name \"election\" instead of \"elections\". 2) When calculating minimum and maximum values: use lowercase function names \"min\" and \"max\" instead of uppercase \"MIN\" and \"MAX\". 3) When computing aggregate statistics: remove column aliases like \"min_vote_percent\" and \"max_vote_percent\" instead of including them. 4) When analyzing vote percentages: remove any WHERE clause filtering vote_percent > 100 to include all vote percentages without restriction."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MIN(vote_percent) AS min_vote_percent, MAX(vote_percent) AS max_vote_percent FROM elections WHERE vote_percent > 100;",
            "SELECT min(Vote_Percent), max(Vote_Percent) FROM election"
        ],
        "rule_sql": [
            "SELECT min(Vote_Percent), max(Vote_Percent) FROM election"
        ]
    },
    "3530": {
        "db_id": "music_1",
        "question": "What is the name of the song that was released most recently?",
        "ground_truth": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "amends": [
            "Do select `song_name` and `releasedate` instead of `name` and `release_date`. Do use table `song` instead of `songs`. Do order by `releasedate DESC` instead of `release_date ASC`. The amended query now correctly retrieves the latest song from the song table with the appropriate column names and sort direction."
        ],
        "rules": [
            "1) When the question asks for the name of a song: use the exact column token \"song_name\" from the song table instead of \"name\". 2) When the question asks about the most recent release: order by the exact column token \"releasedate\" in descending order instead of ascending order. 3) When selecting from the song table: use the exact table name \"song\" instead of \"songs\". 4) When answering about the most recently released song: make sure the output includes both \"song_name\" and \"releasedate\" columns to identify the song and its release date."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM songs ORDER BY release_date ASC LIMIT 1;",
            "SELECT song_name, releasedate FROM song ORDER BY releasedate DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT song_name, releasedate FROM song ORDER BY releasedate DESC LIMIT 1;"
        ]
    },
    "4464": {
        "db_id": "network_2",
        "question": "Who has friends that are younger than the average age?",
        "ground_truth": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "amends": [
            "Do use `DISTINCT T2.name` instead of `name` to eliminate duplicates. Do change the FROM clause to `Person AS T1 JOIN PersonFriend AS T2` instead of just `users` to properly join two tables. Do add the join condition `ON T1.name = T2.friend` instead of no join condition. Do change the WHERE filter to reference `T1.age` instead of `age` to use the correct table alias. Do update the subquery to reference `person` table instead of `users` for consistency with the main query structure. The amended query now correctly identifies friends of people younger than average age and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When joining Person and PersonFriend tables: use Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend to properly link people with their friends. 2) When filtering by age condition: use T1.age < (SELECT AVG(age) FROM Person) to compare against the average age from the Person table. 3) When selecting friend names: use DISTINCT T2.name to eliminate duplicate friend names from the results. 4) When referencing the Person table in subqueries: use Person instead of users to maintain schema consistency."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM users WHERE age < (SELECT AVG(age) FROM users)",
            "SELECT DISTINCT T2.name\nFROM Person AS T1\nJOIN PersonFriend AS T2 ON T1.name = T2.friend\nWHERE T1.age < (SELECT AVG(age) FROM Person)"
        ],
        "rule_sql": [
            "SELECT DISTINCT T2.name\nFROM Person AS T1\nJOIN PersonFriend AS T2 ON T1.name = T2.friend\nWHERE T1.age < (SELECT AVG(age) FROM Person);"
        ]
    },
    "856": {
        "db_id": "chinook_1",
        "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
        "ground_truth": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
        "amends": [
            "Do select `InvoiceDate` from the `INVOICE` table instead of `invoice_date` from `invoices`. Do join `CUSTOMER` and `INVOICE` tables with `ON T1.CustomerId = T2.CustomerId` instead of querying only the `invoices` table. Do filter on `T1.FirstName = \"Astrid\"` and `T1.LastName = \"Gruber\"` from the customer table instead of filtering directly on invoice fields. Do use proper table aliases `T1` and `T2` instead of no aliases. The amended query now correctly retrieves invoice dates by joining customer information and matches the intended behavior."
        ],
        "rules": [
            "1) When answering about invoice dates for customers with specific names: select \"InvoiceDate\" from the \"INVOICE\" table (T2) instead of \"invoice_date\" from \"invoices\". 2) When the question mentions customers with first name Astrid and last name Gruber: join \"CUSTOMER\" table (T1) and \"INVOICE\" table (T2) using T1.CustomerId = T2.CustomerId to link customer information to invoices. 3) When filtering for customer names: apply the filter T1.FirstName = \"Astrid\" and T1.LastName = \"Gruber\" on the customer table (T1) instead of filtering directly on invoice fields. 4) When combining customer and invoice tables: use table aliases T1 for \"CUSTOMER\" and T2 for \"INVOICE\" consistently throughout the query."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT invoice_date FROM invoices WHERE first_name = 'Astrid' AND last_name = 'Gruber'",
            "SELECT T2.InvoiceDate \nFROM Customer T1 \nJOIN Invoice T2 ON T1.CustomerId = T2.CustomerId \nWHERE T1.FirstName = 'Astrid' AND T1.LastName = 'Gruber'"
        ],
        "rule_sql": [
            "SELECT T2.InvoiceDate FROM Customer T1 JOIN Invoice T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = 'Astrid' AND T1.LastName = 'Gruber'"
        ]
    },
    "3428": {
        "db_id": "hr_1",
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "ground_truth": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, salary FROM employees WHERE first_name LIKE '%m';"
        ],
        "rule_sql": [
            "SELECT FIRST_NAME || ' ' || LAST_NAME AS full_name, SALARY FROM employees WHERE FIRST_NAME LIKE '%m'",
            "SELECT FIRST_NAME || ' ' || LAST_NAME AS full_name, SALARY FROM employees WHERE FIRST_NAME LIKE '%m'"
        ]
    },
    "4584": {
        "db_id": "solvency_ii",
        "question": "List the name of products in ascending order of price.",
        "ground_truth": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "amends": [
            "Do use `Product_Name` instead of `name` in the SELECT list. Do use `Product_Price` instead of `price` in the ORDER BY clause. Do use `ASC` ordering instead of `DESC` ordering. The amended query now correctly references the proper column names and sorting direction to match the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"name of products\": use the exact column token \"Product_Name\" from the Products table. 2) When ordering products by price in ascending order: use the exact column token \"Product_Price\" from the Products table and sort in ascending (ASC) direction. 3) When the question specifies ascending order: ensure the ordering direction is ASC, not DESC."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM products ORDER BY price DESC;",
            "SELECT Product_Name FROM Products ORDER BY Product_Price ASC;"
        ],
        "rule_sql": [
            "SELECT Product_Name FROM Products ORDER BY Product_Price ASC;"
        ]
    },
    "3821": {
        "db_id": "e_learning",
        "question": "Which course is enrolled in by the most students? Give me the course name.",
        "ground_truth": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do add `JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id` instead of querying only the `courses` table. Do add `GROUP BY T1.course_name` instead of omitting grouping. Do change `ORDER BY COUNT(*) DESC` instead of `ORDER BY student_count ASC` to order by actual enrollment count rather than a potentially incorrect student_count column. Do add `COUNT(*)` aggregation instead of selecting raw course_name without aggregation. Do use table alias `T1` for `course_name` instead of unqualified column reference. The amended query now correctly identifies the most popular course by actual enrollment count rather than relying on a potentially incorrect student_count field."
        ],
        "rules": [
            "1) When answering about \"course enrolled in by the most students\": make sure the output order: T1.course_name. 2) When the question asks for \"most students\" enrolled in a course: rank courses by enrollment count in descending order and keep the first 1 row. 3) When counting student enrollment: compute the number of rows using the join relationship between Courses and Student_Course_Enrolment tables. 4) When combining Courses (T1) and Student_Course_Enrolment (T2): link rows where T1.course_id = T2.course_id and keep only matching pairs (inner match). 5) When grouping by course: organize results by T1.course_name and compute COUNT(*) per group. 6) When ordering by enrollment count: order by COUNT(*) DESC to find the course with highest enrollment."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT course_name FROM courses ORDER BY student_count ASC LIMIT 1;",
            "SELECT T1.course_name\nFROM Courses AS T1\nJOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.course_name\nFROM Courses T1\nJOIN Student_Course_Enrolment T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "1884": {
        "db_id": "school_finance",
        "question": "How many schools are there?",
        "ground_truth": "SELECT count(*) FROM school",
        "amends": [
            "Do specify the table as `school` instead of `students` to query from the correct data source. The amended query now matches RIGHT_SQL's behavior by counting records from the appropriate table."
        ],
        "rules": [
            "1) When answering about \"how many schools\": make sure to count from the \"school\" table instead of the \"students\" table. 2) When counting schools: use the canonical key for counting entities from the school table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students;",
            "SELECT COUNT(*) FROM School;"
        ],
        "rule_sql": [
            "SELECT COUNT(School_id) FROM School;"
        ]
    },
    "1166": {
        "db_id": "body_builder",
        "question": "List the height and weight of people in descending order of height.",
        "ground_truth": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT height, weight FROM people ORDER BY height ASC;"
        ],
        "rule_sql": [
            "SELECT Height, Weight FROM people ORDER BY Height DESC;"
        ]
    },
    "4834": {
        "db_id": "aircraft",
        "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
        "ground_truth": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
        "amends": [
            "Do use `INTERSECT` to find aircraft that serve both airports instead of joining multiple flight instances. Do reference `aircraft` and `airport` tables directly instead of joining through `flights`. Do use proper table aliases `T1`, `T2`, `T3` instead of `a`, `f1`, `ap1`. Do join through `airport_aircraft` bridge table with `T1.Aircraft_ID = T2.Aircraft_ID` instead of direct aircraft-flight joins. Do filter for \"London Heathrow\" in one subquery and \"London Gatwick\" in another instead of using OR conditions on departure/arrival airports. Do use proper column names `Aircraft`, `Aircraft_ID`, `Airport_ID`, `Airport_Name` instead of generic names. Do remove the complex join conditions involving both departure and arrival airports instead of keeping them. The amended query now correctly identifies aircraft that serve both specified airports using set intersection."
        ],
        "rules": [
            "1) When answering about aircraft names associated with both London Heathrow and Gatwick airports: use the bridge table \"airport_aircraft\" to link aircraft and airports instead of joining through flights. 2) When combining aircraft and airport information: use table aliases T1 for \"aircraft\", T2 for \"airport_aircraft\", and T3 for \"airport\" as established in the amends. 3) When finding aircraft associated with \"London Heathrow\": filter T3.\"Airport_Name\" = 'London Heathrow' exactly as specified. 4) When finding aircraft associated with Gatwick: filter T3.\"Airport_Name\" = 'London Gatwick' exactly as specified (note the full name includes \"London\"). 5) When linking tables: use exact key equalities T1.\"Aircraft_ID\" = T2.\"Aircraft_ID\" and T2.\"Airport_ID\" = T3.\"Airport_ID\" as shown in the schema relationships. 6) When checking for aircraft that serve both airports: use INTERSECT between the two sets of aircraft IDs rather than complex join conditions. 7) When producing final output: return only the \"Aircraft\" column from T1 with aircraft names."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT a.name \nFROM aircrafts a\nJOIN flights f1 ON a.id = f1.aircraft_id\nJOIN airports ap1 ON f1.departure_airport_id = ap1.id OR f1.arrival_airport_id = ap1.id\nJOIN flights f2 ON a.id = f2.aircraft_id\nJOIN airports ap2 ON f2.departure_airport_id = ap2.id OR f2.arrival_airport_id = ap2.id\nWHERE ap1.name = 'London Heathrow' AND ap2.name = 'Gatwick';",
            "SELECT T3.Aircraft\nFROM aircraft T3\nWHERE T3.Aircraft_ID IN (\n    SELECT T1.Aircraft_ID\n    FROM airport_aircraft T1\n    JOIN airport T2 ON T1.Airport_ID = T2.Airport_ID\n    WHERE T2.Airport_Name = 'London Heathrow'\n    INTERSECT\n    SELECT T1.Aircraft_ID\n    FROM airport_aircraft T1\n    JOIN airport T2 ON T1.Airport_ID = T2.Airport_ID\n    WHERE T2.Airport_Name = 'London Gatwick'\n)"
        ],
        "rule_sql": [
            "SELECT T1.Aircraft\nFROM aircraft T1\nJOIN airport_aircraft T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nJOIN airport T3 ON T2.Airport_ID = T3.Airport_ID\nWHERE T3.Airport_Name = 'London Heathrow'\nINTERSECT\nSELECT T1.Aircraft\nFROM aircraft T1\nJOIN airport_aircraft T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nJOIN airport T3 ON T2.Airport_ID = T3.Airport_ID\nWHERE T3.Airport_Name = 'London Gatwick'"
        ]
    },
    "272": {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "ground_truth": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "amends": [
            "Do select only the `Nominee` column instead of all columns with `*`. Do query from the `musical` table instead of the `nominees` table. Do filter for `Award = \"Tony Award\"` OR `Award = \"Cleavant Derricks\"` instead of using AND with `award = 'Bob Fosse'` AND `award = 'Cleavant Derricks'`. The amended query now correctly retrieves nominees from the musical table who received either a Tony Award or Cleavant Derricks award, fixing the logical contradiction in the original WHERE clause."
        ],
        "rules": [
            "1) When answering about musical nominees: select only the \"Nominee\" column from the \"musical\" table. 2) When the question mentions \"award 'Bob Fosse' or 'Cleavant Derricks'\": filter for rows where \"Award\" equals \"Tony Award\" OR \"Award\" equals \"Cleavant Derricks\". 3) When handling multiple award conditions: use OR logic instead of AND to avoid logical contradiction."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM nominees WHERE award = 'Bob Fosse' AND award = 'Cleavant Derricks';",
            "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks'"
        ],
        "rule_sql": [
            "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks';"
        ]
    },
    "6442": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type codes and descriptions of each budget type?",
        "ground_truth": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "amends": [
            "Do select `budget_type_code` and `budget_type_description` instead of `type_code` and `description`. Do query from `Ref_budget_codes` instead of `budget_types`. Do remove the `WHERE type_code IS NOT NULL` filter instead of keeping it. The amended query now correctly retrieves budget type information from the appropriate reference table with the correct column names."
        ],
        "rules": [
            "1) When answering about \"type codes and descriptions of each budget type\": make sure the output order: budget_type_code, budget_type_description. 2) When the question mentions \"type codes\": \"type codes\" actually means \"budget_type_code in schema\". 3) When the question mentions \"descriptions\": \"descriptions\" actually means \"budget_type_description in schema\". 4) When querying for budget type information: use the table Ref_budget_codes instead of budget_types. 5) When retrieving all budget types: do not apply any WHERE filter conditions."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT type_code, description FROM budget_types WHERE type_code IS NOT NULL",
            "SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes;"
        ],
        "rule_sql": [
            "SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes ORDER BY Budget_Type_Code;"
        ]
    },
    "6084": {
        "db_id": "customers_and_addresses",
        "question": "What are the cities no customers live in?",
        "ground_truth": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "amends": [
            "Do query from `addresses` table instead of `cities` table. Do use a three-table join with `customers AS t1`, `customer_addresses AS t2`, and `addresses AS t3` instead of a simple subquery on `customers`. Do join on `t1.customer_id = t2.customer_id` and `t2.address_id = t3.address_id` instead of no join conditions. Do select `DISTINCT t3.city` in the subquery instead of just `city` to eliminate duplicates. The amended query now correctly identifies cities from addresses that are not associated with any customers through the proper relationship tables, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about cities no customers live in: use the addresses table as the source of cities instead of a cities table. 2) When combining customer and address information: use a three-table join with customers AS t1, customer_addresses AS t2, and addresses AS t3. 3) When linking customers to their addresses: join on t1.customer_id = t2.customer_id and t2.address_id = t3.address_id. 4) When selecting cities from addresses associated with customers: use DISTINCT t3.city to eliminate duplicate city values. 5) When finding cities with no customers: identify cities from addresses that are not present in the set of cities associated with customers through the customer_addresses relationship."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM cities WHERE city NOT IN (SELECT city FROM customers)",
            "SELECT DISTINCT city \nFROM Addresses \nWHERE city NOT IN (\n    SELECT DISTINCT t3.city \n    FROM Customers AS t1 \n    JOIN Customer_Addresses AS t2 ON t1.customer_id = t2.customer_id \n    JOIN Addresses AS t3 ON t2.address_id = t3.address_id\n)"
        ],
        "rule_sql": [
            "SELECT DISTINCT a.city \nFROM Addresses a\nWHERE a.city NOT IN (\n    SELECT DISTINCT a3.city \n    FROM Customers t1\n    JOIN Customer_Addresses t2 ON t1.customer_id = t2.customer_id\n    JOIN Addresses t3 ON t2.address_id = t3.address_id\n)"
        ]
    },
    "2306": {
        "db_id": "perpetrator",
        "question": "What is the average number of people injured by all perpetrators?",
        "ground_truth": "SELECT avg(Injured) FROM perpetrator",
        "amends": [
            "Do reference the `Injured` column instead of `people_injured` to match the correct column name in the schema. Do use the table name `perpetrator` instead of `perpetrators` to reference the correct table. Do use lowercase `avg` function instead of uppercase `AVG` for consistency with the right query's syntax. The amended query now correctly calculates the average of injured people from the perpetrator table, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for \"average number of people injured\": use the exact column name \"Injured\" from the perpetrator table. 2) When referencing the table containing injury data: use the exact table name \"perpetrator\" (singular) instead of \"perpetrators\" (plural). 3) When computing the average: use the lowercase function name \"avg\" for consistency with the correct query syntax."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT AVG(people_injured) FROM perpetrators;",
            "SELECT avg(Injured) FROM perpetrator"
        ],
        "rule_sql": [
            "SELECT AVG(Injured) FROM perpetrator;"
        ]
    },
    "5890": {
        "db_id": "cre_Theme_park",
        "question": "What are the distinct location names?",
        "ground_truth": "SELECT DISTINCT Location_Name FROM LOCATIONS",
        "amends": [
            "Do select `Location_Name` instead of `location` and add `DISTINCT` instead of omitting it, then reference `LOCATIONS` instead of `locations` to match the correct table name case. The amended query now correctly returns unique location names from the specified table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for \"distinct location names\": select unique values of the exact column token \"Location_Name\" from table \"LOCATIONS\". 2) When choosing identifier delimiters: use double quotes exactly as shown in the schema for \"LOCATIONS\" table name. 3) When handling text literals: preserve the exact case and formatting of column names like \"Location_Name\" as specified in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT location FROM locations;",
            "SELECT DISTINCT Location_Name FROM Locations;"
        ],
        "rule_sql": [
            "SELECT DISTINCT Location_Name FROM \"LOCATIONS\";"
        ]
    },
    "3142": {
        "db_id": "assets_maintenance",
        "question": "When was the first asset acquired?",
        "ground_truth": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
        "amends": [
            "Do select `asset_acquired_date` instead of `MAX(acquisition_date)` to get the actual date value rather than the maximum date. Do add `ORDER BY asset_acquired_date ASC` instead of omitting ordering to sort the dates in ascending sequence. Do add `LIMIT 1` instead of omitting it to return only the first (earliest) record. Do remove the aggregate function `MAX()` instead of keeping it since we want the specific date value rather than an aggregated maximum. The amended query now correctly retrieves the earliest asset acquisition date by sorting ascending and limiting to the first result, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for the first asset acquired: use the exact column token \"asset_acquired_date\" instead of any other date column. 2) When finding the earliest date: sort the dates in ascending order using \"asset_acquired_date ASC\" to get chronological sequence. 3) When retrieving only the earliest record: limit the results to the first row only. 4) When selecting specific date values: do not use aggregate functions like MAX() as we need the actual date value rather than an aggregated result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(acquisition_date) FROM assets;",
            "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1;"
        ]
    },
    "4631": {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the premise type and address type code for all customer addresses.",
        "ground_truth": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",
        "amends": [
            "Do add table `premises AS T2` with a `JOIN` on `T1.premise_id = T2.premise_id` instead of querying only `customer_addresses` alone. Do change the SELECT list to `T2.premises_type` and `T1.address_type_code` instead of `premise_type` and `address_type` from a single table. Do add table aliases `T1` and `T2` for proper column qualification instead of unqualified column references. The amended query now correctly joins the necessary tables and selects the appropriate columns to match the intended behavior."
        ],
        "rules": [
            "1) When answering about \"premise type and address type code for all customer addresses\": make sure the output order: T2.premises_type, T1.address_type_code. 2) When the question mentions \"premise type\": \"premise type\" actually means \"T2.premises_type in schema\". 3) When the question mentions \"address type code\": \"address type code\" actually means \"T1.address_type_code in schema\". 4) When combining T1 (customer_addresses) and T2 (premises) for shared entities: link rows where T1.premise_id = T2.premise_id exactly as shown in the amends; keep only matching pairs (inner match). 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT premise_type, address_type FROM customer_addresses",
            "SELECT T2.premises_type, T1.address_type_code FROM Customer_Addresses AS T1 JOIN Premises AS T2 ON T1.premise_id = T2.premise_id"
        ],
        "rule_sql": [
            "SELECT T2.premises_type, T1.address_type_code FROM Customer_Addresses T1 INNER JOIN Premises T2 ON T1.premise_id = T2.premise_id"
        ]
    },
    "1329": {
        "db_id": "college_2",
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "ground_truth": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "amends": [
            "Do reference the table as `classroom` instead of `classrooms`. Do use the column name `capacity` instead of `seating_capacity`. Do use the `BETWEEN` operator with `50 AND 100` instead of the `OR` condition with `< 50 OR > 100`. Do reverse the column order in the SELECT list to `building, room_number` instead of `room_number, building`. The amended query now correctly selects buildings and room numbers for classrooms with capacity between 50 and 100, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about classrooms: use the exact table name \"classroom\" instead of \"classrooms\". 2) When the question mentions seating capacity: use the exact column name \"capacity\" instead of \"seating_capacity\". 3) When the question specifies a range \"between 50 to 100\": use the BETWEEN operator with exact values 50 AND 100 instead of separate OR conditions. 4) When the question asks for room numbers and buildings: output the columns in the order building, room_number instead of room_number, building."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT room_number, building FROM classrooms WHERE seating_capacity < 50 OR seating_capacity > 100;",
            "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100;"
        ],
        "rule_sql": [
            "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100;"
        ]
    },
    "4979": {
        "db_id": "soccer_2",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "ground_truth": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "amends": [
            "Do use column alias `cName` instead of `name` in the SELECT list. Do reference table `College` instead of `colleges` in the FROM clause. Do use column `enr` instead of `students_enrolled` in the WHERE filter condition. Do maintain the same ORDER BY clause with `cName` instead of `name`. The amended query now correctly references the actual schema elements and matches the intended behavior."
        ],
        "rules": [
            "1) When answering about colleges with more than 18000 students enrolled: use table \"College\" as T1 instead of \"colleges\". 2) When selecting the college name: use column \"cName\" instead of \"name\" in the output. 3) When filtering by student enrollment: use column \"enr\" instead of \"students_enrolled\" and apply the condition > 18000. 4) When ordering results alphabetically: sort by \"cName\" in ascending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM colleges WHERE students_enrolled > 18000 ORDER BY name ASC;",
            "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName;"
        ],
        "rule_sql": [
            "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName ASC;"
        ]
    },
    "5454": {
        "db_id": "voter_2",
        "question": "Find the first names of students with age above 22.",
        "ground_truth": "SELECT Fname FROM STUDENT WHERE Age  >  22",
        "amends": [
            "Do reference column `Fname` instead of `first_name` and table `STUDENT` instead of `students`. Do use column `Age` instead of `age` for the filter condition while maintaining the same `> 22` comparison. Do preserve the single result limitation through implicit behavior instead of explicit `LIMIT 1` and maintain the ordering by first name through implicit sorting instead of explicit `ORDER BY first_name`. The amended query now matches RIGHT_SQL's behavior with corrected column and table references."
        ],
        "rules": [
            "1) When the question mentions \"first names\": use the exact column token \"Fname\" from table \"STUDENT\". 2) When the question mentions \"students\": use the exact table token \"STUDENT\" instead of \"students\". 3) When the question mentions \"age above 22\": use the exact column token \"Age\" with the comparison > 22. 4) When the question asks for the \"first\" result: return only one row through implicit limitation. 5) When ordering by first name: maintain implicit sorting by \"Fname\"."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE age > 22 ORDER BY first_name LIMIT 1;",
            "SELECT Fname FROM Student WHERE Age > 22;"
        ],
        "rule_sql": [
            "SELECT Fname FROM Student WHERE Age > 22 LIMIT 1;"
        ]
    },
    "6986": {
        "db_id": "culture_company",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "ground_truth": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "amends": [
            "Do reference table `movie` instead of `movies` in the FROM clause. Do use column `gross_worldwide` instead of `worldwide_gross` in the ORDER BY clause. The amended query now correctly references the table and column names to match the intended behavior."
        ],
        "rules": [
            "1) When answering about \"movie with highest worldwide gross\": rank rows by \"gross_worldwide\" in descending order and keep the first 1 row. 2) When the question mentions \"year 2000 or before\": filter rows where \"year\" is less than or equal to 2000. 3) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms. 4) When handling text literals: do not change case, spacing, or punctuation."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title, director FROM movies WHERE year <= 2000 ORDER BY worldwide_gross DESC LIMIT 1;",
            "SELECT Title, Director FROM movie WHERE Year <= 2000 ORDER BY Gross_worldwide DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT \"Title\", \"Director\" FROM \"movie\" WHERE \"Year\" <= 2000 ORDER BY \"Gross_worldwide\" DESC LIMIT 1"
        ]
    },
    "3980": {
        "db_id": "hospital_1",
        "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "ground_truth": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "amends": [
            "Do select only `name` instead of `*` in the SELECT list. Do add a UNION operation to combine results from two separate queries instead of using a single OR condition. Do change the second part to use a three-table join between `physician`, `trained_in`, and `procedures` instead of a simple filter on `physician = 'John Wen'`. Do use proper join conditions with `ON T1.employeeid = T2.physician` and `ON T3.code = T2.treatment` instead of the incorrect direct physician name filter. Do reference the physician table as `T1` and procedures table as `T3` with appropriate aliases instead of direct table references. Do use double quotes for the string literal `\"John Wen\"` instead of single quotes. The amended query now correctly retrieves procedure names either costing over 1000 or those that physician John Wen is trained to perform, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When selecting procedure information: output only the \"name\" column instead of all columns. 2) When combining results from multiple conditions: use UNION to combine separate queries instead of OR conditions. 3) When finding procedures physician John Wen was trained in: join three tables - physician as T1, trained_in as T2, and procedures as T3 - using the exact join conditions T1.employeeid = T2.physician and T3.code = T2.treatment. 4) When filtering for physician John Wen: use the exact string literal \"John Wen\" with double quotes. 5) When filtering procedures by cost: use cost > 1000 to find procedures costing more than 1000."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM procedures WHERE cost > 1000 OR physician = 'John Wen';",
            "SELECT name FROM Procedures WHERE cost > 1000\nUNION\nSELECT T3.name \nFROM Physician T1\nJOIN Trained_In T2 ON T1.EmployeeID = T2.Physician\nJOIN Procedures T3 ON T3.Code = T2.Treatment\nWHERE T1.Name = \"John Wen\""
        ],
        "rule_sql": [
            "SELECT name FROM Procedures WHERE cost > 1000\nUNION\nSELECT T3.name \nFROM Physician AS T1 \nJOIN Trained_In AS T2 ON T1.EmployeeID = T2.Physician \nJOIN Procedures AS T3 ON T3.Code = T2.Treatment \nWHERE T1.Name = \"John Wen\""
        ]
    },
    "1627": {
        "db_id": "customers_and_invoices",
        "question": "How many products were not included in any order?",
        "ground_truth": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "amends": [
            "Do reference the `Order_items` table instead of the `orders` table in the subquery. Do use the correct table name `Order_items` instead of `orders` to properly identify products that have never been ordered, as order information is typically stored in order items rather than a general orders table. The amended query now correctly counts products that have no corresponding entries in the order items table, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about products not included in any order: use the \"Order_items\" table instead of the \"orders\" table to identify products that have been ordered. 2) When counting products that have never been ordered: check for products where the product_id does not appear in the \"Order_items\" table. 3) When constructing the subquery to find ordered products: reference the \"Order_items\" table and select the product_id column from it."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM orders)",
            "SELECT COUNT(*) AS products_not_ordered\nFROM Products p\nWHERE p.product_id NOT IN (\n    SELECT DISTINCT oi.product_id\n    FROM Order_Items oi\n)"
        ],
        "rule_sql": [
            "SELECT COUNT(*) AS products_not_ordered\nFROM Products\nWHERE product_id NOT IN (SELECT product_id FROM Order_Items)"
        ]
    },
    "6867": {
        "db_id": "flight_4",
        "question": "For each country and airline name, how many routes are there?",
        "ground_truth": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "amends": [
            "Do join `airlines AS T1` with `routes AS T2` on `T1.alid = T2.alid` instead of querying only the `routes` table. Do select `T1.country` and `T1.name` instead of `country` and `airline_name`. Do use proper table aliases `T1` and `T2` instead of unqualified column references. Do maintain the `COUNT(*)` aggregation and `GROUP BY T1.country, T1.name` instead of grouping by unqualified columns. The amended query now correctly joins the airlines and routes tables to count routes per airline while ensuring proper table qualification throughout."
        ],
        "rules": [
            "1) When answering about routes per country and airline: make sure the output order: country, airline name, route count. 2) When the question mentions \"country\" and \"airline name\": \"country\" actually means \"T1.country\" in schema and \"airline name\" actually means \"T1.name\" in schema. 3) When combining airlines (T1) and routes (T2) for shared entities: link rows where T1.alid = T2.alid exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question asks for \"count of routes\": compute the number of rows using COUNT(*) aggregation. 5) When the question says \"per country and airline name\": organize results by T1.country and T1.name and compute route count per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT country, airline_name, COUNT(*) as route_count FROM routes GROUP BY country, airline_name",
            "SELECT T1.country, T1.name, COUNT(*) AS route_count\nFROM airlines AS T1\nJOIN routes AS T2 ON T1.alid = T2.alid\nGROUP BY T1.country, T1.name"
        ],
        "rule_sql": [
            "SELECT a.country, a.name AS airline_name, COUNT(*) AS route_count\nFROM airlines a\nINNER JOIN routes r ON a.alid = r.alid\nGROUP BY a.country, a.name\nORDER BY a.country, a.name;"
        ]
    },
    "5195": {
        "db_id": "music_2",
        "question": "What is the label with the most albums?",
        "ground_truth": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT label, COUNT(*) as album_count FROM albums GROUP BY label ORDER BY album_count ASC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Label, COUNT(*) as AlbumCount FROM Albums GROUP BY Label ORDER BY AlbumCount DESC LIMIT 1;"
        ]
    },
    "2007": {
        "db_id": "gas_company",
        "question": "Show all main industry and total market value in each industry.",
        "ground_truth": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
        "amends": [
            "Do reference `main_industry` instead of `industry` in both the SELECT list and GROUP BY clause. Do reference the `company` table instead of `companies` as the FROM source. The amended query now correctly aggregates market values by the appropriate industry classification column in the designated table structure."
        ],
        "rules": [
            "1) When the question mentions \"industry\": use the exact column name \"main_industry\" from the company table. 2) When the question asks for \"total market value\": compute the sum of the \"market_value\" column from the company table. 3) When grouping results by industry: organize rows using the \"main_industry\" column from the company table. 4) When selecting data about companies: use the exact table name \"company\" as the data source."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT industry, SUM(market_value) FROM companies GROUP BY industry;",
            "SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value FROM company GROUP BY Main_Industry;"
        ],
        "rule_sql": [
            "SELECT main_industry, SUM(market_value) AS total_market_value FROM company GROUP BY main_industry;"
        ]
    },
    "5582": {
        "db_id": "products_gen_characteristics",
        "question": "What is the product category description and unit of measurement of category \"Herbs\"?",
        "ground_truth": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "amends": [
            "Do reference `product_category_description` and `unit_of_measure` instead of `category_description` and `unit_of_measurement`. Do query from `ref_product_categories` instead of `products`. Do filter on `product_category_code = \"Herbs\"` instead of `category = 'Herbs'`. The amended query now correctly retrieves category descriptions and measurement units from the reference table using the proper category code filter."
        ],
        "rules": [
            "1) When the question asks for product category description and unit of measurement: use columns \"product_category_description\" and \"unit_of_measure\" from table \"ref_product_categories\" (T1). 2) When filtering for category \"Herbs\": use the exact literal \"Herbs\" with column \"product_category_code\" for filtering. 3) When selecting output columns: maintain the order \"product_category_description\" followed by \"unit_of_measure\" as specified in the question."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT category_description, unit_of_measurement FROM products WHERE category = 'Herbs';",
            "SELECT product_category_description, unit_of_measure FROM Ref_Product_Categories WHERE product_category_code = 'Herbs';"
        ],
        "rule_sql": [
            "SELECT product_category_description, unit_of_measure FROM Ref_Product_Categories WHERE product_category_code = 'Herbs';"
        ]
    },
    "4254": {
        "db_id": "club_1",
        "question": "How many students are there?",
        "ground_truth": "SELECT count(*) FROM student",
        "amends": [
            "Do query the `student` table instead of the `teachers` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency. The amended query now correctly counts records from the student table instead of the teachers table, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"how many students\": query the \"student\" table instead of the \"teachers\" table. 2) When counting records: use lowercase \"count(*)\" instead of uppercase \"COUNT(*)\" for consistency."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM teachers;",
            "SELECT count(*) FROM Student;"
        ],
        "rule_sql": [
            "SELECT count(*) FROM Student;"
        ]
    },
    "6294": {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "ground_truth": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of direct table references. Do join `city` with `temperature` on `T1.city_id = T2.city_id` instead of querying a single `cities` table. Do reference temperature columns as `T2.Feb` and `T2.Jun` instead of `temperature_feb` and `temperature_jun`. Do use a UNION to combine with a second query joining `city` with `hosting_city` on `T3.city_id = T4.host_city` instead of checking `host_city = 'yes'`. Do select `T1.city` and `T3.city` instead of `city_name`. The amended query now correctly handles the temperature comparison and host city validation through proper table relationships."
        ],
        "rules": [
            "1) When answering about cities with temperature comparisons: join table \"city\" as T1 with table \"temperature\" as T2 where T1.city_id = T2.city_id to access temperature data. 2) When comparing February and June temperatures: use T2.Feb > T2.Jun instead of direct column comparisons in a single table. 3) When identifying host cities: use a separate query joining \"city\" as T3 with \"hosting_city\" as T4 where T3.city_id = T4.host_city instead of checking a simple flag column. 4) When combining temperature and host city conditions: use UNION to combine results from both queries rather than OR conditions in a single WHERE clause. 5) When selecting city names: use T1.city and T3.city instead of city_name to match the schema's exact column naming."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city_name FROM cities WHERE temperature_feb > temperature_jun OR host_city = 'yes';",
            "SELECT T1.City FROM city T1 JOIN temperature T2 ON T1.City_ID = T2.City_ID WHERE T2.Feb > T2.Jun\nUNION\nSELECT T3.City FROM city T3 JOIN hosting_city T4 ON T3.City_ID = T4.Host_City"
        ],
        "rule_sql": [
            "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID WHERE T2.Feb > T2.Jun\nUNION\nSELECT T3.City FROM city AS T3 JOIN hosting_city AS T4 ON T3.City_ID = T4.Host_City"
        ]
    },
    "2415": {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "ground_truth": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "amends": [
            "Do select `t1.name` and `t1.sex` from the `people` table instead of selecting `name` and `sex` directly from `candidates`. Do join `people AS t1` with `candidate AS t2` on `t1.people_id = t2.people_id` instead of querying only the `candidates` table. Do order by `t2.support_rate DESC` instead of ordering by `support_rate DESC` from the original table. The amended query now correctly joins the people and candidate tables to retrieve the appropriate name and sex values while ordering by the support rate from the candidate table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"name and sex of the candidate with the highest support rate\": make sure the output order: t1.name, t1.sex. 2) When the question mentions \"candidate\": the data actually comes from joining \"people AS t1\" with \"candidate AS t2\" on t1.people_id = t2.people_id. 3) When the question mentions \"highest support rate\": rank rows by t2.support_rate in descending order and keep the first 1 row. 4) When combining people and candidate tables for shared entities: link rows where t1.people_id = t2.people_id exactly as shown; keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, sex FROM candidates ORDER BY support_rate DESC LIMIT 1;",
            "SELECT t1.Name, t1.Sex FROM people AS t1 JOIN candidate AS t2 ON t1.People_ID = t2.People_ID ORDER BY t2.Support_rate DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT t1.Name, t1.Sex\nFROM people AS t1\nINNER JOIN candidate AS t2 ON t1.People_ID = t2.People_ID\nORDER BY t2.Support_rate DESC\nLIMIT 1;"
        ]
    },
    "6566": {
        "db_id": "wine_1",
        "question": "Give the color of the grape whose wine products have the highest average price?",
        "ground_truth": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
        "amends": [
            "Do use `T1.Color` with table alias instead of `color` without alias. Do add explicit `JOIN` with `T1.Grape = T2.Grape` instead of using a correlated subquery. Do include `GROUP BY T2.Grape` instead of omitting grouping. Do move the `AVG(Price)` calculation directly into the `ORDER BY` clause instead of using a subquery. Do reference `WINE` table instead of `wines` and use proper column names `Grape` instead of `grape_id`. The amended query now correctly calculates average wine prices per grape type and returns the color of the grape with the highest average price, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about grape color with highest average wine price: make sure the output order: T1.Color. 2) When combining T1 (grapes) and T2 (WINE) for shared grape types: link rows where T1.Grape = T2.Grape exactly as shown; keep only matching pairs (inner match). 3) When the question asks for \"highest average price\": rank rows by AVG(Price) in descending direction and keep the first 1 row. 4) When calculating average price per grape type: organize results by T2.Grape and compute AVG(Price) per group. 5) When referring to table identifiers: use exact tokens \"WINE\" instead of \"wines\" and \"Grape\" instead of \"grape_id\" as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT color FROM grapes ORDER BY (SELECT AVG(price) FROM wines WHERE wines.grape_id = grapes.id) DESC LIMIT 1;",
            "SELECT T1.Color\nFROM grapes T1\nJOIN wine T2 ON T1.Grape = T2.Grape\nGROUP BY T2.Grape\nORDER BY AVG(T2.Price) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.Color\nFROM grapes T1\nINNER JOIN WINE T2 ON T1.Grape = T2.Grape\nGROUP BY T2.Grape\nORDER BY AVG(T2.Price) DESC\nLIMIT 1"
        ]
    },
    "4476": {
        "db_id": "network_2",
        "question": "Who is the person that has no friend?",
        "ground_truth": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` with a subquery. Do reference the correct table `PersonFriend` instead of `friend` in the second part of the set operation. Do maintain the same column `name` in both SELECT clauses instead of having different column structures. Do remove the WHERE clause with subquery entirely instead of keeping the subquery approach. The amended query now correctly uses set semantics to find names in person that don't appear in PersonFriend, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"person that has no friend\": use set operation semantics with EXCEPT instead of NOT IN subqueries. 2) When the question mentions \"friend\": use the exact table name \"PersonFriend\" as shown in the schema. 3) When comparing person names between tables: maintain the same column structure with \"name\" in both SELECT clauses of the set operation. 4) When finding persons without friends: remove WHERE clause subqueries entirely and use set operation approach instead."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM person WHERE id NOT IN (SELECT person_id FROM friend)",
            "SELECT name FROM Person\nEXCEPT\nSELECT name FROM PersonFriend"
        ],
        "rule_sql": [
            "SELECT name FROM Person\nEXCEPT\nSELECT name FROM PersonFriend;"
        ]
    },
    "5551": {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products with 'white' as their color description?",
        "ground_truth": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "amends": [
            "Do select `t1.product_name` instead of `name`. Do add `JOIN ref_colors AS t2` instead of omitting the table. Do use join condition `ON t1.color_code = t2.color_code` instead of no join. Do filter on `t2.color_description = \"white\"` instead of `color = 'white'`. Do use double quotes around \"white\" instead of single quotes. The amended query now correctly joins to the reference table to filter by color description rather than directly on the color field."
        ],
        "rules": [
            "1) When the question asks for product names: use the exact column token \"t1.product_name\" instead of \"name\". 2) When filtering by color description \"white\": join table \"ref_colors\" as \"t2\" using the condition \"t1.color_code = t2.color_code\" to link the tables. 3) When checking for the color \"white\": filter using \"t2.color_description = \"white\"\" with double quotes around the literal value. 4) When combining products and ref_colors tables: perform an inner match where \"t1.color_code = t2.color_code\" and keep only rows present on both sides."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM products WHERE color = 'white';",
            "SELECT t1.product_name \nFROM Products AS t1\nJOIN Ref_Colors AS t2 ON t1.color_code = t2.color_code\nWHERE t2.color_description = \"white\""
        ],
        "rule_sql": [
            "SELECT t1.product_name FROM Products t1 INNER JOIN Ref_Colors t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\""
        ]
    },
    "1767": {
        "db_id": "gymnast",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "ground_truth": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
        "amends": [
            "Do select `T2.Name` from the `people` table instead of `name` from the `gymnasts` table. Do join `gymnast AS T1` with `people AS T2` on `T1.Gymnast_ID = T2.People_ID` instead of querying only the `gymnasts` table. Do order by `T2.Height ASC` instead of `height DESC` to sort in ascending rather than descending order. The amended query now correctly retrieves gymnast names from the people table via proper table joining and applies the intended ascending height ordering."
        ],
        "rules": [
            "1) When answering about \"names of gymnasts\": select \"T2.Name\" from the \"people\" table instead of \"name\" from the \"gymnasts\" table. 2) When combining \"gymnast AS T1\" and \"people AS T2\" for shared entities: link rows where \"T1.Gymnast_ID = T2.People_ID\" and keep only matching pairs (inner match). 3) When ordering by height ascending: order by \"T2.Height ASC\" instead of descending order to sort in ascending rather than descending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM gymnasts ORDER BY height DESC;",
            "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC"
        ],
        "rule_sql": [
            "SELECT T2.Name \nFROM gymnast AS T1 \nINNER JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID \nORDER BY T2.Height ASC"
        ]
    },
    "3460": {
        "db_id": "hr_1",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "ground_truth": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "amends": [
            "Do use `job_history` table instead of `employees` table. Do move the count logic to `HAVING COUNT(*) >= 2` instead of using `job_count` column in `WHERE`. Do add `GROUP BY employee_id` instead of omitting grouping. Do remove the direct column reference `job_count` instead of keeping it, as the count should be calculated dynamically. The amended query now correctly identifies employees with multiple job entries by counting records in the job history table rather than relying on a potentially incorrect static column value."
        ],
        "rules": [
            "1) When answering about \"employee ids for employees who have held two or more jobs\": use the \"job_history\" table instead of the \"employees\" table. 2) When counting job history records per employee: group by \"employee_id\" and count the number of records for each employee. 3) When filtering for employees with multiple jobs: apply the condition that the count of records must be greater than or equal to 2 after grouping. 4) When selecting output: return only the \"employee_id\" values that meet the multiple jobs condition."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT employee_id FROM employees WHERE job_count >= 2;",
            "SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(*) >= 2"
        ],
        "rule_sql": [
            "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2"
        ]
    },
    "4326": {
        "db_id": "tracking_grants_for_research",
        "question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs",
        "ground_truth": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'",
        "amends": [
            "Do use column names `date_from` and `date_to` instead of `MIN(start_date)` and `MAX(end_date)`. Do use table name `Project_Staff` instead of `staff_assignments`. Do use `IN` with a subquery instead of `=` with a subquery. Do use `count(*)` instead of `COUNT(DISTINCT staff_id)` in the subquery. Do add a `UNION` with an additional query that filters by `role_code = 'leader'` instead of having only one query. The amended query now correctly retrieves date ranges for both the project with the most staff assignments and any project staff with leader roles, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"project staff work dates\": make sure the output order: date_from, date_to. 2) When the question mentions \"staff work dates\": use column names \"date_from\" and \"date_to\" from table \"Project_Staff\". 3) When the question asks for \"project which hires the most staffs\": find the project with maximum count of staff assignments using count(*) on table \"Project_Staff\". 4) When combining multiple conditions: use UNION to include both the project with most staff assignments and any project staff with role_code = 'leader'. 5) When filtering by project in subqueries: use IN instead of = with subqueries to handle multiple possible matches."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MIN(start_date) AS from_date, MAX(end_date) AS to_date\nFROM staff_assignments\nWHERE project_id = (\n    SELECT project_id \n    FROM staff_assignments \n    GROUP BY project_id \n    ORDER BY COUNT(DISTINCT staff_id) DESC \n    LIMIT 1\n);",
            "SELECT date_from, date_to FROM Project_Staff WHERE project_id IN (\n    SELECT project_id FROM Project_Staff \n    GROUP BY project_id \n    ORDER BY count(*) DESC \n    LIMIT 1\n)\nUNION\nSELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader';"
        ],
        "rule_sql": [
            "SELECT date_from, date_to\nFROM Project_Staff\nWHERE project_id IN (\n    SELECT project_id\n    FROM Project_Staff\n    GROUP BY project_id\n    HAVING COUNT(*) = (\n        SELECT MAX(staff_count)\n        FROM (\n            SELECT project_id, COUNT(*) AS staff_count\n            FROM Project_Staff\n            GROUP BY project_id\n        )\n    )\n)\nUNION\nSELECT date_from, date_to\nFROM Project_Staff\nWHERE role_code = 'leader';"
        ]
    },
    "1633": {
        "db_id": "wedding",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "ground_truth": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "amends": [
            "Do use column `organized_by` instead of `organizer` and table `church` instead of `churches`. Do use column `open_date` instead of `opened` and apply `BETWEEN 1830 AND 1840` instead of the impossible condition `>= 1840 AND <= 1830`. The amended query now correctly selects churches opened between 1830 and 1840 using the proper table and column names."
        ],
        "rules": [
            "1) When the question mentions \"organizer\": use the exact column name \"organized_by\" instead. 2) When the question mentions \"churches\": use the exact table name \"church\" instead. 3) When the question mentions \"opened\": use the exact column name \"open_date\" instead. 4) When the question asks for churches opened between 1830 and 1840: use the inclusive range condition BETWEEN 1830 AND 1840 instead of the impossible condition >= 1840 AND <= 1830."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT organizer, name FROM churches WHERE opened >= 1840 AND opened <= 1830;",
            "SELECT Organized_by, Name FROM church WHERE Open_Date BETWEEN 1830 AND 1840;"
        ],
        "rule_sql": [
            "SELECT organized_by, Name FROM church WHERE open_date BETWEEN 1830 AND 1840;"
        ]
    },
    "4328": {
        "db_id": "tracking_grants_for_research",
        "question": "Find the organisation ids and details of the organisations which are involved in",
        "ground_truth": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "amends": [
            "Do select `T2.organisation_id` and `T2.organisation_details` instead of `organisation_id` and `details`. Do join `Grants AS T1` with `Organisations AS T2` on `T1.organisation_id = T2.organisation_id` instead of querying only the `organisations` table. Do add `GROUP BY T2.organisation_id` and `HAVING sum(T1.grant_amount) > 6000` instead of filtering with `WHERE involved = 'yes'`. Do remove the `WHERE` clause entirely instead of keeping the `involved` condition. The amended query now correctly filters organizations based on total grant amounts exceeding 6000 rather than a simple boolean flag, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"organisation ids and details of organisations\": make sure the output order: T2.organisation_id, T2.organisation_details. 2) When the question mentions \"organisations which are involved in\": this actually means organisations that have total grant amounts exceeding 6000 in the Grants table. 3) When combining Grants (T1) and Organisations (T2) for shared entities: link rows where T1.organisation_id = T2.organisation_id and keep only matching pairs (inner match). 4) When filtering organisations based on involvement: group by T2.organisation_id and only keep groups where sum(T1.grant_amount) > 6000. 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for any identifiers."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT organisation_id, details FROM organisations WHERE involved = 'yes';",
            "SELECT T2.organisation_id, T2.organisation_details\nFROM Grants AS T1\nJOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id\nGROUP BY T2.organisation_id\nHAVING SUM(T1.grant_amount) > 6000"
        ],
        "rule_sql": [
            "SELECT T2.organisation_id, T2.organisation_details\nFROM Grants T1\nINNER JOIN Organisations T2 ON T1.organisation_id = T2.organisation_id\nGROUP BY T2.organisation_id, T2.organisation_details\nHAVING SUM(T1.grant_amount) > 6000"
        ]
    },
    "6738": {
        "db_id": "activity_1",
        "question": "Find the building that has the largest number of faculty members.",
        "ground_truth": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select only `building` instead of including `COUNT(*) as faculty_count` in the SELECT list. Do order by `count(*) DESC` instead of `faculty_count ASC` to find the building with the highest faculty count rather than the lowest. Do remove the alias `faculty_count` from the ORDER BY clause since it's no longer present in the SELECT list. The amended query now correctly identifies the building with the most faculty members by counting faculty per building and ordering descending instead of ascending."
        ],
        "rules": [
            "1) When answering about \"the building that has the largest number of faculty members\": make sure the output order includes only the building column. 2) When the question asks for the building with the largest number of faculty members: count faculty members per building and order the results by count in descending order to find the highest count. 3) When counting faculty members per building: use the count(*) function to count all rows in each building group. 4) When ordering by count results: do not include aliases in the ORDER BY clause if they are not present in the SELECT list."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT building, COUNT(*) as faculty_count FROM faculty GROUP BY building ORDER BY faculty_count ASC LIMIT 1;",
            "SELECT Building FROM Faculty GROUP BY Building ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT Building FROM Faculty GROUP BY Building ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
    },
    "4676": {
        "db_id": "college_3",
        "question": "What is the name of the department with the fewest members?",
        "ground_truth": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do select `T1.DName` from the `DEPARTMENT` table instead of `department_name` from `departments`. Do add a `JOIN` with `MEMBER_OF AS T2` on `T1.DNO = T2.DNO` instead of querying a single table. Do add `GROUP BY T2.DNO` to aggregate by department instead of missing grouping. Do keep `ORDER BY count(*) ASC` and `LIMIT 1` unchanged. The amended query now correctly joins department and membership tables, groups by department to count members, and returns the department with the fewest members, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"department with the fewest members\": make sure the output order: T1.DName. 2) When the question mentions \"department\": use the exact identifier \"T1.DName\" from the DEPARTMENT table. 3) When combining DEPARTMENT as T1 and MEMBER_OF as T2: link rows where T1.DNO = T2.DNO and keep only matching pairs (inner match). 4) When the question asks for \"fewest members\" per department: organize results by T2.DNO and compute count of members per group. 5) When the question asks for the department with the minimum count: rank rows by count(*) in ascending order and keep the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT department_name FROM departments ORDER BY COUNT(*) ASC LIMIT 1;",
            "SELECT T1.DName \nFROM Department AS T1\nJOIN Member_of AS T2 ON T1.DNO = T2.DNO\nGROUP BY T2.DNO\nORDER BY COUNT(*) ASC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.DName\nFROM Department T1\nJOIN Member_of T2 ON T1.DNO = T2.DNO\nGROUP BY T2.DNO\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ]
    },
    "5190": {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "ground_truth": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "amends": [
            "Do select `T2.firstname` and `T2.lastname` from the `Band` table instead of `first_name` and `last_name` from a non-existent `performers` table. Do join `Performance AS T1` with `Band AS T2` on `T1.bandmate = T2.id` and join `Songs AS T3` on `T3.SongId = T1.SongId` instead of querying a single table. Do filter on `T3.Title = \"Badlands\"` and `T1.StagePosition = \"back\"` instead of `song_name = 'Badlands'` and `position = 'back stage'` using the correct column names and table references. The amended query now correctly retrieves band member names by joining performance, band, and song tables with proper relationships and filtering conditions."
        ],
        "rules": [
            "1) When the question asks for first name and last name of performers: select T2.firstname and T2.lastname from the Band table. 2) When combining Performance, Band, and Songs tables: join Performance AS T1 with Band AS T2 on T1.bandmate = T2.id and join Songs AS T3 on T3.SongId = T1.SongId, keeping only matching pairs (inner match). 3) When filtering for the song \"Badlands\": use T3.Title = \"Badlands\" with exact case and quotes. 4) When filtering for back stage position: use T1.StagePosition = \"back\" with exact case and quotes."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name FROM performers WHERE song_name = 'Badlands' AND position = 'back stage';",
            "SELECT T2.Firstname, T2.Lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.Bandmate = T2.Id\nJOIN Songs AS T3 ON T3.SongId = T1.SongId\nWHERE T3.Title = 'Badlands' AND T1.StagePosition = 'back'"
        ],
        "rule_sql": [
            "SELECT T2.Firstname, T2.Lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.Bandmate = T2.Id\nJOIN Songs AS T3 ON T3.SongId = T1.SongId\nWHERE T3.Title = \"Badlands\" AND T1.StagePosition = \"back\""
        ]
    },
    "510": {
        "db_id": "allergy_1",
        "question": "How many students who are female are allergic to milk or eggs?",
        "ground_truth": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "amends": [
            "Do join `has_allergy AS T1` with `Student AS T2` on `T1.StuID = T2.StuID` instead of querying a single `students` table. Do filter for `T2.sex = \"F\"` instead of `gender = 'male'`. Do reference allergies from `T1.allergy` with values `\"Milk\"` and `\"Eggs\"` instead of `allergy` from a single table with values `'milk'` and `'eggs'`. Do use proper table aliases and join conditions instead of assuming all data exists in one table. The amended query now correctly joins related tables and filters for female students with milk or egg allergies, matching the intended behavior.",
            "Do use `count(*)` instead of `COUNT(DISTINCT T1.StuID)` to count all matching rows rather than distinct students. Do change the allergy filter to use `OR` conditions with `T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\"` instead of the `IN` clause with `('Milk', 'Eggs')` to ensure proper logical evaluation. Do remove the unnecessary DISTINCT modifier since we want to count all allergy occurrences rather than unique students. The amended query now correctly counts all female students with either milk or egg allergies, matching the RIGHT_SQL's behavior.",
            "Do use parentheses around the OR conditions `(T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\")` instead of omitting them, which changes the logical evaluation order and could include incorrect records. Do use consistent case for column references `T2.sex` and `T1.allergy` instead of mixed case. Do use double quotes for string literals `\"F\"`, `\"Milk\"`, and `\"Eggs\"` instead of single quotes. The amended query now correctly groups the allergy conditions to ensure proper logical evaluation and matches the RIGHT_SQL's behavior.",
            "Do use proper parentheses grouping for the allergy conditions with `(T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\")` instead of the incorrect logical grouping `T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\"` which would cause the OR condition to apply incorrectly to the entire WHERE clause. The amended query now correctly counts female students with either milk or egg allergies, matching the intended behavior.",
            "Do use parentheses around the OR condition `(T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\")` instead of omitting them, as the original query without parentheses would incorrectly evaluate due to operator precedence where AND has higher precedence than OR, potentially returning incorrect results. Do maintain the same `COUNT(*)` aggregation, `JOIN` between `Has_Allergy` and `Student` tables on `T1.StuID = T2.StuID`, and `WHERE T2.sex = \"F\"` filter without changes. The amended query now correctly matches the intended logic by ensuring both female students AND either milk or egg allergies are properly grouped together."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'male' AND (allergy = 'milk' OR allergy = 'eggs')",
            "SELECT COUNT(DISTINCT T1.StuID) \nFROM Has_Allergy AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nWHERE T2.Sex = 'F' \nAND T1.Allergy IN ('Milk', 'Eggs')",
            "SELECT COUNT(*) \nFROM has_allergy AS T1 \nJOIN Student AS T2 ON T1.StuID = T2.StuID \nWHERE T2.Sex = 'F' \nAND (T1.Allergy = 'Milk' OR T1.Allergy = 'Eggs')",
            "SELECT COUNT(*)\nFROM Has_Allergy AS T1\nJOIN Student AS T2 ON T1.StuID = T2.StuID\nWHERE T2.sex = \"F\"\nAND (T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\")",
            "SELECT COUNT(*)\nFROM Has_Allergy AS T1\nJOIN Student AS T2 ON T1.StuID = T2.StuID\nWHERE T2.sex = \"F\" \nAND (T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\")",
            "SELECT COUNT(*)\nFROM Has_Allergy AS T1\nJOIN Student AS T2 ON T1.StuID = T2.StuID\nWHERE T2.sex = \"F\" \nAND (T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\")"
        ],
        "rule_sql": []
    },
    "4000": {
        "db_id": "ship_mission",
        "question": "List the name of ships in ascending order of tonnage.",
        "ground_truth": "SELECT Name FROM ship ORDER BY Tonnage ASC",
        "amends": [
            "Do use column name `Name` instead of `name` and table name `ship` instead of `ships`. Do change the sort order to `ASC` instead of `DESC` for the `Tonnage` column. The amended query now correctly references the proper table and column names with the intended ascending sort order."
        ],
        "rules": [
            "1) When the question asks for ship names: use the exact column token \"Name\" from table \"ship\" instead of \"name\" from \"ships\". 2) When ordering by tonnage in ascending order: sort by column \"Tonnage\" using ASC direction instead of DESC. 3) When referencing the table containing ship information: use the exact table name \"ship\" instead of \"ships\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM ships ORDER BY tonnage DESC;",
            "SELECT Name FROM ship ORDER BY Tonnage ASC;"
        ],
        "rule_sql": [
            "SELECT Name FROM ship ORDER BY Tonnage ASC;"
        ]
    },
    "2363": {
        "db_id": "csu_1",
        "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
        "ground_truth": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "amends": [
            "Do add `JOIN enrollments AS t2` with `ON t1.id = t2.campus` instead of querying only the `campuses` table. Do change the year filter to `t2.year = 1956` instead of `year_started = 1956`. Do modify the enrollment filter to `totalenrollment_ay > 400` instead of `students_enrolled < 400`. Do add `FTE_AY > 200` instead of `full_time_students > 200`. Do use table alias `t1.campus` instead of just `campus`. The amended query now correctly joins enrollment data and uses the proper enrollment metrics from the joined table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about campuses and enrollments: combine tables \"campuses\" as T1 and \"enrollments\" as T2 where T1.id equals T2.campus and keep only matching pairs. 2) When the question mentions \"started in year 1956\": filter for rows where T2.year equals 1956. 3) When the question mentions \"more than 200 full time students\": filter for rows where T2.FTE_AY is greater than 200. 4) When the question mentions \"more than 400 students enrolled\": filter for rows where T2.totalenrollment_ay is greater than 400. 5) When producing output: return T1.campus as the result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT campus FROM campuses WHERE year_started = 1956 AND full_time_students > 200 AND students_enrolled < 400;",
            "SELECT t1.Campus \nFROM Campuses AS t1 \nJOIN enrollments AS t2 ON t1.Id = t2.Campus \nWHERE t2.Year = 1956 \nAND t2.FTE_AY > 200 \nAND t2.TotalEnrollment_AY > 400"
        ],
        "rule_sql": [
            "SELECT T1.Campus \nFROM Campuses AS T1 \nJOIN enrollments AS T2 ON T1.Id = T2.Campus \nWHERE T2.Year = 1956 \nAND T2.FTE_AY > 200 \nAND T2.TotalEnrollment_AY > 400"
        ]
    },
    "5367": {
        "db_id": "tracking_software_problems",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "ground_truth": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do join `product AS T1` to `problems AS T2` on `T1.product_id = T2.product_id` instead of querying only the `problems` table without proper table joining. Do select `T1.product_name` instead of just `product_name` to ensure the correct product name is retrieved from the product table. Do use `ORDER BY count(*) DESC` instead of `ORDER BY problem_count ASC` to find the product with the highest problem count rather than the lowest. Do remove the alias `problem_count` instead of keeping it since the right query uses the direct aggregate expression in ordering. The amended query now correctly joins the product table to count problems per product and identifies the product with the most problems, matching the RIGHT_SQL's behavior.",
            "Do place `count(*)` before `T1.product_name` in the SELECT list instead of after it. Do remove `T1.product_id` from the GROUP BY clause instead of including it. Do use `GROUP BY T1.product_name` instead of grouping by both `T1.product_id` and `T1.product_name`. Do remove the alias `problem_count` from the count aggregation instead of keeping it. The amended query now correctly groups only by product name while maintaining the same count aggregation and ordering behavior."
        ],
        "rules": [
            "1) When answering about \"which product has the most problems\": make sure the output order: T1.product_name, count(*) 2) When combining T1 (product) and T2 (problems) for shared entities: link rows where T1.product_id = T2.product_id exactly as shown; keep only matching pairs (inner match). 3) When the question mentions \"most problems\" or \"highest\": rank rows by count(*) in descending order and keep the first 1 row. 4) When counting problems per product: compute the number of rows using the relationship between T1 and T2 where T1.product_id = T2.product_id. 5) When selecting product name: use T1.product_name to ensure the correct product name is retrieved from the product table.",
            "1) When answering about \"which product has the most problems\": make sure the output order: count(*) first, then T1.product_name. 2) When grouping by product name: use GROUP BY T1.product_name only, do not include T1.product_id in the grouping. 3) When counting problems: use count(*) without any alias like problem_count. 4) When ranking products by problem count: order by count(*) in descending direction and keep only the top 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT product_name, COUNT(*) as problem_count FROM problems GROUP BY product_name ORDER BY problem_count ASC LIMIT 1;",
            "SELECT T1.product_name, COUNT(*) AS problem_count\nFROM Product AS T1\nJOIN Problems AS T2 ON T1.product_id = T2.product_id\nGROUP BY T1.product_id, T1.product_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT count(*), T1.product_name\nFROM Product AS T1\nJOIN Problems AS T2 ON T1.product_id = T2.product_id\nGROUP BY T1.product_name\nORDER BY count(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT COUNT(*), T1.product_name\nFROM Product T1\nINNER JOIN Problems T2 ON T1.product_id = T2.product_id\nGROUP BY T1.product_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "5149": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "ground_truth": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "amends": [
            "Do use `count(DISTINCT Currency_Code)` instead of `COUNT(*)` to count distinct currency codes rather than all rows. Do reference table `Drama_Workshop_Groups` instead of `workshop_groups` to query the correct table structure. Do remove the explicit `WHERE genre = 'drama'` filter instead of keeping it since the table name already implies the drama genre specialization. The amended query now correctly counts distinct currency codes from the drama-specific table, matching the intended behavior."
        ],
        "rules": [
            "1) When counting distinct currency codes: use count(DISTINCT Currency_Code) instead of COUNT(*) to count unique currency code values. 2) When querying drama workshop groups: reference the Drama_Workshop_Groups table instead of workshop_groups to access the correct table structure. 3) When the table name already implies genre specialization: do not add an explicit WHERE genre = 'drama' filter since the table is drama-specific."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM workshop_groups WHERE genre = 'drama';",
            "SELECT COUNT(DISTINCT Currency_Code) FROM Drama_Workshop_Groups;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT Currency_Code) FROM Drama_Workshop_Groups;"
        ]
    },
    "4169": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Give me the name and description of the document type code RV.",
        "ground_truth": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
        "amends": [
            "Do select `document_type_name` and `document_type_description` instead of `name` and `description`. Do reference table `Ref_document_types` instead of `document_types`. Do filter on `document_type_code = \"RV\"` instead of `code = 'RV'`. The amended query now correctly references the appropriate column names and table while maintaining the same filtering logic."
        ],
        "rules": [
            "1) When the question asks for \"name\" of a document type: use the exact column token \"document_type_name\" from table \"Ref_document_types\". 2) When the question asks for \"description\" of a document type: use the exact column token \"document_type_description\" from table \"Ref_document_types\". 3) When filtering for document type code \"RV\": use the exact literal \"RV\" with column \"document_type_code\" from table \"Ref_document_types\". 4) When referencing the document types table: use the exact table name \"Ref_document_types\" instead of any other table name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, description FROM document_types WHERE code = 'RV';",
            "SELECT document_type_name, document_type_description FROM Ref_Document_Types WHERE document_type_code = 'RV';"
        ],
        "rule_sql": [
            "SELECT document_type_name, document_type_description FROM Ref_document_types WHERE document_type_code = 'RV'"
        ]
    },
    "861": {
        "db_id": "chinook_1",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "ground_truth": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "amends": [
            "Do use `DISTINCT` to eliminate duplicate addresses instead of returning potential duplicates. Do use table aliases `T1` and `T2` instead of single-letter aliases for better clarity. Do reference `T1.Address` with explicit alias qualification instead of just `c.Address`. Do use double quotes around the string literal `\"Germany\"` instead of single quotes. Do specify the table names as `CUSTOMER` and `INVOICE` in uppercase instead of `Customers` and `Invoices` in mixed case. The amended query now correctly returns unique customer addresses from Germany without duplicates, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"customers that live in Germany and have invoice\": make sure the output order: T1.Address. 2) When the question mentions \"address\": \"address\" actually means \"T1.Address in schema\". 3) When the question mentions \"Germany\": use the exact literal \"Germany\" with double quotes. 4) When combining T1 and T2 for shared entities: link rows where T1.CustomerId = T2.CustomerId; keep only matching pairs (inner match). 5) When eliminating duplicate addresses: return only distinct values of T1.Address. 6) When choosing identifier delimiters: use table names CUSTOMER and INVOICE in uppercase as shown in the amends. 7) When referring to table roles: use T1 for CUSTOMER and T2 for INVOICE as the canonical aliases."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT c.Address FROM Customers c JOIN Invoices i ON c.CustomerId = i.CustomerId WHERE c.Country = 'Germany'",
            "SELECT DISTINCT T1.Address\nFROM CUSTOMER T1\nJOIN INVOICE T2 ON T1.CustomerId = T2.CustomerId\nWHERE T1.Country = \"Germany\""
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.Address\nFROM CUSTOMER T1\nINNER JOIN INVOICE T2 ON T1.CustomerId = T2.CustomerId\nWHERE T1.Country = \"Germany\""
        ]
    },
    "6376": {
        "db_id": "flight_company",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "ground_truth": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of `p`, `f`, and `a`. Do select `T2.pilot` instead of `p.name`. Do join `airport AS T1` with `flight AS T2` on `T1.id = T2.airport_id` instead of joining `pilots p` with `flights f` on `p.pilot_id = f.pilot_id` and then with `airports a` on `f.airport_id = a.airport_id`. Do use `OR` condition `T1.country = 'United States' OR T1.name = 'Billund Airport'` instead of `AND` condition `a.country = 'United States' AND a.name = 'Billund Airport'`. The amended query now correctly retrieves pilots from airports in the United States OR Billund Airport instead of requiring both conditions simultaneously."
        ],
        "rules": [
            "1) When combining airport and flight tables: link rows where T1.id equals T2.airport_id and keep only matching pairs (inner match). 2) When the question asks for pilots who flew from specific locations: select T2.pilot as the output column. 3) When filtering for airports in 'United States' OR named 'Billund Airport': use the condition T1.country = 'United States' OR T1.name = 'Billund Airport' (not AND). 4) When retrieving distinct pilot names: ensure only unique values of T2.pilot are returned."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT p.name \nFROM pilots p \nJOIN flights f ON p.pilot_id = f.pilot_id \nJOIN airports a ON f.airport_id = a.airport_id \nWHERE a.country = 'United States' AND a.name = 'Billund Airport';",
            "SELECT DISTINCT T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.Country = 'United States' OR T1.name = 'Billund Airport'"
        ],
        "rule_sql": [
            "SELECT DISTINCT f.pilot\nFROM flight f\nINNER JOIN airport a ON f.airport_id = a.id\nWHERE a.Country = 'United States' OR a.name = 'Billund Airport'"
        ]
    },
    "1441": {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach?",
        "ground_truth": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "amends": [
            "Do reference table `instructor` instead of `instructors` in the FROM clause. Do use a subquery with `NOT IN` condition on `id` instead of filtering by `taught = 'no'` column. Do remove the direct column filter `taught = 'no'` and instead implement the logic through a correlated subquery that checks for absence from the `teaches` table. The amended query now correctly identifies instructors who have not taught by checking their absence from the teaches table rather than relying on a potentially incorrect or missing taught column, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When the question asks about instructors who didn't teach: use table \"instructor\" instead of \"instructors\" for the main query. 2) When identifying instructors who haven't taught: check for instructor \"id\" values that are not present in the \"teaches\" table using a NOT IN condition. 3) When filtering instructors by teaching status: do not use a direct column filter like \"taught = 'no'\" but instead implement the logic through absence from the \"teaches\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM instructors WHERE taught = 'no';",
            "SELECT name FROM instructor WHERE id NOT IN (SELECT DISTINCT id FROM teaches)"
        ],
        "rule_sql": [
            "SELECT name FROM instructor WHERE ID NOT IN (SELECT DISTINCT ID FROM teaches)"
        ]
    },
    "3382": {
        "db_id": "sports_competition",
        "question": "What is the number of players who have points less than 30 for each position?",
        "ground_truth": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
        "amends": [
            "Do `count(*)` without an alias instead of `COUNT(*)` without an alias. Do `POSITION` in uppercase instead of `position` in lowercase. Do `FROM player` instead of `FROM players`. Do `points < 30` instead of `points > 30`. The amended query now correctly counts players with fewer than 30 points grouped by position, matching the intended logic.",
            "Do place `count(*)` before `POSITION` in the SELECT list instead of after it. Do maintain the same `WHERE points < 30` filter and `GROUP BY POSITION` clause without changes. The amended query now correctly matches the RIGHT_SQL's behavior with identical logical results."
        ],
        "rules": [
            "1) When counting players: use the table name \"player\" exactly as specified in the schema instead of \"players\". 2) When referring to the position column: use the exact identifier \"POSITION\" in uppercase instead of lowercase \"position\". 3) When filtering for players with points less than 30: use the condition points < 30 instead of points > 30. 4) When counting players per position: count all rows using count(*) without an alias and group by the exact \"POSITION\" column.",
            "1) When answering about \"number of players who have points less than 30 for each position\": make sure the output order: count of players first, then POSITION. 2) When the question asks for \"number of players\": compute the count using the canonical counting method. 3) When the question says \"for each position\": organize results by POSITION and compute the count per group. 4) When filtering players with points less than 30: include only rows where points < 30."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT position, COUNT(*) FROM players WHERE points > 30 GROUP BY position;",
            "SELECT POSITION, COUNT(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "SELECT count(*), POSITION FROM player WHERE points < 30 GROUP BY POSITION"
        ],
        "rule_sql": [
            "SELECT COUNT(*), POSITION FROM player WHERE points < 30 GROUP BY POSITION;"
        ]
    },
    "3512": {
        "db_id": "hr_1",
        "question": "What are total salaries and department id for each department that has more than 2 employees?",
        "ground_truth": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
        "amends": [
            "Do use `>= 2` in the HAVING clause instead of `> 2` to include departments with exactly 2 employees rather than excluding them. Do remove the alias `as total_salary` instead of keeping it since the column naming is not required. The amended query now correctly filters for departments with 2 or more employees and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When counting employees per department: use COUNT(*) >= 2 to include departments with exactly 2 employees rather than excluding them. 2) When the question asks for \"total salaries\": compute SUM(salary) without adding an alias like \"total_salary\". 3) When grouping by department: organize results by department_id and compute aggregates per department."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT department_id, SUM(salary) as total_salary \nFROM employees \nGROUP BY department_id \nHAVING COUNT(*) > 2;",
            "SELECT DEPARTMENT_ID, SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID HAVING COUNT(EMPLOYEE_ID) >= 2"
        ],
        "rule_sql": [
            "SELECT DEPARTMENT_ID, SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID HAVING COUNT(*) >= 2"
        ]
    },
    "1198": {
        "db_id": "apartment_rentals",
        "question": "Show all distinct building descriptions.",
        "ground_truth": "SELECT DISTINCT building_description FROM Apartment_Buildings",
        "amends": [
            "Do select `building_description` instead of `building` to use the correct column name. Do add `DISTINCT` instead of omitting it to return unique values. Do reference table `Apartment_Buildings` instead of `buildings` to use the correct table name. The amended query now correctly returns distinct building descriptions from the appropriate table."
        ],
        "rules": [
            "1) When the question asks for \"building descriptions\": use the exact column name \"building_description\" from the schema. 2) When the question asks for \"distinct\" values: return only unique values by applying distinct filtering. 3) When referencing the building data: use the exact table name \"Apartment_Buildings\" as specified in the schema. 4) When answering about \"Show all distinct building descriptions\": make sure the output order: building_description."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT building FROM buildings;",
            "SELECT DISTINCT building_description FROM Apartment_Buildings;"
        ],
        "rule_sql": [
            "SELECT DISTINCT building_description FROM Apartment_Buildings ORDER BY building_description;"
        ]
    },
    "2200": {
        "db_id": "formula_1",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "ground_truth": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "amends": [
            "Do select `forename` instead of `first_name` and add `DISTINCT` instead of omitting it. Do order by `forename` instead of `last_name` while maintaining ascending order. The amended query now correctly retrieves unique driver forenames sorted alphabetically, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"first names of all the different drivers\": select distinct \"forename\" from the drivers table. 2) When the question specifies \"in alphabetical order\": order the results by \"forename\" in ascending alphabetical order. 3) When the schema shows the column is named \"forename\" with double quotes: use the exact identifier \"forename\" with double quotes as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM drivers ORDER BY last_name ASC;",
            "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC;"
        ],
        "rule_sql": [
            "SELECT DISTINCT \"forename\" FROM \"drivers\" ORDER BY \"forename\" ASC;"
        ]
    },
    "2951": {
        "db_id": "sakila_1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "ground_truth": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do use `T2.title`, `T2.film_id`, and `T2.description` instead of `title`, `id`, and `description`. Do join `film_actor AS T1` with `film AS T2` on `T1.film_id = T2.film_id` instead of querying only the `movies` table. Do add `GROUP BY T2.film_id` to aggregate by film instead of omitting grouping. Do use `count(*)` in the `ORDER BY` clause instead of `actor_count` to count actual actors per film. Do order by `count(*) DESC` instead of `actor_count DESC` to sort by the actual actor count. The amended query now correctly finds the film with the most actors by joining the film_actor relationship table and counting associations."
        ],
        "rules": [
            "1) When answering about \"movie with the greatest number of actors\": join table film_actor as T1 with table film as T2 on T1.film_id = T2.film_id using an inner match. 2) When grouping results by film: use GROUP BY T2.film_id to aggregate by each film entity. 3) When counting actors per film: use count(*) to count the number of actor associations for each film. 4) When ordering by actor count: order by count(*) DESC to find the film with the highest number of actors. 5) When selecting output columns: use T2.title, T2.film_id, and T2.description for the title, id, and description respectively. 6) When handling the top result: keep only the first row after ordering to get the single film with the greatest number of actors."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title, id, description FROM movies ORDER BY actor_count DESC LIMIT 1;",
            "SELECT T2.title, T2.film_id, T2.description\nFROM film_actor AS T1\nJOIN film AS T2 ON T1.film_id = T2.film_id\nGROUP BY T2.film_id\nORDER BY count(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T2.title, T2.film_id, T2.description\nFROM film_actor AS T1\nINNER JOIN film AS T2 ON T1.film_id = T2.film_id\nGROUP BY T2.film_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "2541": {
        "db_id": "county_public_safety",
        "question": "What are the crime rates of counties sorted by number of offices ascending?",
        "ground_truth": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "amends": [
            "Do select `Crime_rate` instead of `county, crime_rate` and omit the county column. Do reference table `county_public_safety` instead of `counties` as the data source. Do order by `Police_officers ASC` instead of `number_of_offices DESC`, changing both the column reference and sort direction. The amended query now correctly retrieves crime rate data from the appropriate public safety table ordered by police officer count in ascending order."
        ],
        "rules": [
            "1) When answering about crime rates: select only the \"Crime_rate\" column from the \"county_public_safety\" table. 2) When the question mentions \"counties\": the data actually comes from the \"county_public_safety\" table. 3) When the question asks for sorting by \"number of offices\": this actually means ordering by \"Police_officers\" column in ascending order. 4) When producing output: omit the county column and only show crime rate values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT county, crime_rate FROM counties ORDER BY number_of_offices DESC;",
            "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;"
        ],
        "rule_sql": [
            "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;"
        ]
    },
    "1117": {
        "db_id": "climbing",
        "question": "Return the maximum number of points for climbers from the United Kingdom.",
        "ground_truth": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
        "amends": [
            "Do use `max(Points)` instead of `MIN(points)` to find the maximum instead of minimum value. Do reference table `climber` instead of `climbers` to use the correct table name. Do use column `Country` instead of `country` to match the correct column name. Do use double quotes `\"United Kingdom\"` instead of single quotes `'United Kingdom'` for the string literal format. The amended query now correctly returns the maximum points for climbers from the United Kingdom instead of the minimum, using the proper table and column references."
        ],
        "rules": [
            "1) When answering about \"maximum number of points for climbers from the United Kingdom\": use max(Points) instead of MIN(points) to find the maximum value. 2) When referencing the table containing climber information: use table \"climber\" instead of \"climbers\" as the correct table name. 3) When filtering by country: use column \"Country\" instead of \"country\" to match the correct column name. 4) When specifying the country value \"United Kingdom\": use double quotes \"United Kingdom\" instead of single quotes 'United Kingdom' for the string literal format."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MIN(points) FROM climbers WHERE country = 'United Kingdom';",
            "SELECT MAX(Points) FROM climber WHERE Country = \"United Kingdom\";"
        ],
        "rule_sql": [
            "SELECT MAX(Points) FROM climber WHERE Country = \"United Kingdom\";"
        ]
    },
    "4798": {
        "db_id": "aircraft",
        "question": "What is the number of aircraft?",
        "ground_truth": "SELECT count(*) FROM aircraft",
        "amends": [
            "Do use lowercase `count(*)` instead of uppercase `COUNT(*)` to maintain consistent function casing. The amended query now matches RIGHT_SQL's behavior with identical functionality."
        ],
        "rules": [
            "1) When counting aircraft: use lowercase count(*) function instead of uppercase COUNT(*). 2) When the question asks for number of aircraft: count all aircraft records without filtering for null aircraft_id values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM aircraft WHERE aircraft_id IS NULL;",
            "SELECT count(*) FROM aircraft;"
        ],
        "rule_sql": [
            "select count(*) from aircraft"
        ]
    },
    "5480": {
        "db_id": "voter_2",
        "question": "Find the distinct majors of students who have treasurer votes.",
        "ground_truth": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "amends": [
            "Do reference the `Major` column from the `STUDENT` table instead of from a non-existent `students` table. Do add a `JOIN` with the `VOTING_RECORD` table on `T1.StuID = T2.Treasurer_Vote` instead of filtering directly on `vote_type`. Do remove the `WHERE` clause filtering for `vote_type = 'treasurer'` instead of keeping it, as the join condition now properly identifies treasurer votes. The amended query now correctly retrieves majors of students who received treasurer votes by properly joining the relevant tables."
        ],
        "rules": [
            "1) When the question mentions \"majors\": \"majors\" actually means \"Major\" column from the \"STUDENT\" table. 2) When the question mentions \"students who have treasurer votes\": join \"STUDENT\" table (as T1) with \"VOTING_RECORD\" table (as T2) where T1.StuID = T2.Treasurer_Vote to identify students who received treasurer votes. 3) When retrieving distinct majors: return only unique values of the \"Major\" column from the joined result set."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT major FROM students WHERE vote_type = 'treasurer';",
            "SELECT DISTINCT s.Major \nFROM Student s\nJOIN Voting_record vr ON s.StuID = vr.Treasurer_Vote"
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.Major FROM Student T1 JOIN Voting_record T2 ON T1.StuID = T2.Treasurer_Vote"
        ]
    },
    "5341": {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products, grouped by manufacturer code?",
        "ground_truth": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
        "amends": [
            "Do use `Manufacturer` instead of `manufacturer_code` for both the SELECT list and GROUP BY clause. Do use `Price` instead of `price` in the AVG function. Do place the aggregate function `AVG(Price)` first in the SELECT list instead of the column reference. The amended query now correctly groups by Manufacturer and calculates the average Price for each manufacturer group."
        ],
        "rules": [
            "1) When the question asks for average prices grouped by manufacturer code: use \"Manufacturer\" instead of \"manufacturer_code\" for both selection and grouping. 2) When calculating average price: use \"Price\" instead of \"price\" in the average function. 3) When ordering output columns: place the aggregate function AVG(Price) first in the output before the Manufacturer column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT manufacturer_code, AVG(price) FROM products GROUP BY manufacturer_code;",
            "SELECT AVG(Price) AS AveragePrice, Manufacturer FROM Products GROUP BY Manufacturer;"
        ],
        "rule_sql": [
            "SELECT AVG(Price), Manufacturer FROM Products GROUP BY Manufacturer"
        ]
    },
    "1609": {
        "db_id": "customers_and_invoices",
        "question": "What is the order id and order details for the order more than two invoices.",
        "ground_truth": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "amends": [
            "Do add table `Invoices AS T1` and join it with `Orders AS T2` instead of querying only the `orders` table. Do use `JOIN` with `ON T1.order_id = T2.order_id` instead of no join condition. Do change the column references to `T2.order_id` and `T2.order_details` instead of bare `order_id` and `order_details`. Do add `GROUP BY T2.order_id` instead of no grouping. Do move the count filter to `HAVING count(*) > 2` instead of `WHERE invoice_count > 2` since the count is now calculated from joined records rather than using a pre-existing column. The amended query now correctly counts invoice records per order and filters for orders with more than 2 invoices, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about orders with more than two invoices: combine table \"Invoices\" as T1 with \"Orders\" as T2 using the exact join condition T1.order_id = T2.order_id, keeping only matching pairs (inner match). 2) When counting invoices per order: group the results by T2.order_id and count the number of rows using the canonical key. 3) When filtering for orders with more than two invoices: apply the condition count(*) > 2 after grouping instead of using a pre-existing column. 4) When selecting output columns: use T2.order_id and T2.order_details exactly as specified, maintaining the order order_id then order_details."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT order_id, order_details FROM orders WHERE invoice_count > 2",
            "SELECT T2.order_id, T2.order_details\nFROM Invoices AS T1\nJOIN Orders AS T2 ON T1.order_id = T2.order_id\nGROUP BY T2.order_id\nHAVING COUNT(*) > 2"
        ],
        "rule_sql": [
            "SELECT T2.order_id, T2.order_details\nFROM Invoices AS T1\nINNER JOIN Orders AS T2 ON T1.order_id = T2.order_id\nGROUP BY T2.order_id\nHAVING COUNT(*) > 2"
        ]
    },
    "4856": {
        "db_id": "local_govt_and_lot",
        "question": "What are the resident details containing the substring 'Miss'?",
        "ground_truth": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
        "amends": [
            "Do select `other_details` instead of `*` to return only the specific column needed. Do reference table `Residents` with proper capitalization instead of lowercase `residents` to match the actual schema. Do filter on `other_details LIKE '%Miss%'` instead of `name LIKE '%Miss%'` to search in the correct column where the pattern should be matched. The amended query now correctly searches for the pattern in the appropriate column and returns only the relevant data, matching the intended behavior of the RIGHT_SQL."
        ],
        "rules": [
            "1) When the question asks for resident details containing a substring: search for the pattern in the \"other_details\" column of the \"Residents\" table using LIKE '%Miss%' pattern matching. 2) When selecting columns for output: return only the \"other_details\" column instead of all columns (*). 3) When referencing table names: use exact case-sensitive table name \"Residents\" instead of lowercase \"residents\" to match the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM residents WHERE name LIKE '%Miss%';",
            "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%';"
        ],
        "rule_sql": [
            "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%';"
        ]
    },
    "4901": {
        "db_id": "store_product",
        "question": "What are the different district names in order of descending city area?",
        "ground_truth": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "amends": [
            "Do use `DISTINCT` instead of omitting it to remove duplicate district names. Do reference the table as `district` instead of `districts` for correct table naming. Do order by `city_area DESC` instead of `ASC` to sort in descending order instead of ascending. The amended query now correctly returns unique district names from the district table sorted by city area in descending order."
        ],
        "rules": [
            "1) When the question asks for \"different district names\": use DISTINCT to remove duplicate values from the \"district_name\" column. 2) When the question specifies \"in order of descending city area\": sort the results by \"city_area\" in descending order (DESC) instead of ascending. 3) When referencing the table containing district information: use the exact table name \"district\" instead of \"districts\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT district_name FROM districts ORDER BY city_area ASC;",
            "SELECT DISTINCT District_name FROM district ORDER BY City_Area DESC;"
        ],
        "rule_sql": [
            "SELECT DISTINCT district_name FROM district ORDER BY city_area DESC;"
        ]
    },
    "3769": {
        "db_id": "e_learning",
        "question": "Find the total number of courses offered.",
        "ground_truth": "SELECT count(*) FROM COURSES",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM students;"
        ],
        "rule_sql": [
            "SELECT COUNT(*) AS total_courses FROM Courses;"
        ]
    },
    "4750": {
        "db_id": "department_store",
        "question": "What is the id and name of the staff who has been assigned for the least amount of time?",
        "ground_truth": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "amends": [
            "Do select `T1.staff_id` and `T1.staff_name` with table aliases instead of `id` and `name` without qualification. Do add `JOIN Staff_Department_Assignments AS T2` with an explicit join instead of querying only the `staff` table. Do use the join condition `ON T1.staff_id = T2.staff_id` to properly relate the tables instead of missing this relationship. Do order by the calculated duration `date_assigned_to - date_assigned_from` instead of the single column `assignment_date DESC`. The amended query now correctly joins staff with their department assignments and orders by assignment duration rather than just the latest assignment date, matching the intended behavior."
        ],
        "rules": [
            "1) When selecting staff information: use T1.staff_id and T1.staff_name instead of unqualified id and name. 2) When answering about staff assignment duration: join Staff_Department_Assignments as T2 using the condition T1.staff_id = T2.staff_id. 3) When ordering by assignment duration: calculate duration as date_assigned_to - date_assigned_from instead of using assignment_date. 4) When finding the staff with least assignment time: order by the calculated duration in ascending order and take the first result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, name FROM staff ORDER BY assignment_date DESC LIMIT 1;",
            "SELECT T1.staff_id, T1.staff_name\nFROM Staff AS T1\nJOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id\nORDER BY (T2.date_assigned_to - T2.date_assigned_from) ASC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.staff_id, T1.staff_name\nFROM Staff AS T1\nJOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id\nORDER BY (T2.date_assigned_to - T2.date_assigned_from) ASC\nLIMIT 1;"
        ]
    },
    "4593": {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in.",
        "ground_truth": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "amends": [
            "Do add `Products AS T1` and `Products_in_Events AS T2` as FROM sources instead of just `events`. Do use `JOIN` with `ON T1.Product_ID = T2.Product_ID` instead of no join condition. Do reference `T1.Product_Name` in SELECT and GROUP BY instead of just `product_name`. Do maintain `COUNT(*)` aggregation but now applied to the joined dataset instead of a single table. The amended query now correctly joins product information with event data and matches RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"names of products and the number of events they are in\": make sure the output order: T1.Product_Name, COUNT(*). 2) When combining Products (T1) and Products_in_Events (T2) for shared entities: link rows where T1.Product_ID = T2.Product_ID exactly as shown; keep only matching pairs (inner match). 3) When the question asks for \"number of events they are in\": compute the count of rows using the joined dataset from T1 and T2. 4) When the question says \"by products\": organize results by T1.Product_Name and compute the count per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT product_name, COUNT(*) FROM events GROUP BY product_name;",
            "SELECT T1.Product_Name, COUNT(*) AS NumberOfEvents\nFROM Products AS T1\nJOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID\nGROUP BY T1.Product_Name"
        ],
        "rule_sql": [
            "SELECT T1.Product_Name, COUNT(*) \nFROM Products T1\nINNER JOIN Products_in_Events T2 ON T1.Product_ID = T2.Product_ID\nGROUP BY T1.Product_Name"
        ]
    },
    "4122": {
        "db_id": "film_rank",
        "question": "What are the maximum and minimum number of cities in all markets.",
        "ground_truth": "SELECT max(Number_cities) ,  min(Number_cities) FROM market",
        "amends": [
            "Do reference `Number_cities` column instead of `city_count` column. Do reference `market` table instead of `markets` table. Do remove the `max_cities` and `min_cities` aliases instead of keeping them. The amended query now correctly references the appropriate column and table names without unnecessary aliasing, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for maximum and minimum number of cities: use the exact column name \"Number_cities\" from the \"market\" table. 2) When computing aggregate functions: do not use aliases for the output columns. 3) When referencing the table containing city count data: use the exact table name \"market\" instead of variations like \"markets\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MAX(city_count) as max_cities, MIN(city_count) as min_cities FROM markets",
            "SELECT MAX(Number_cities), MIN(Number_cities) FROM market;"
        ],
        "rule_sql": [
            "SELECT MAX(Number_cities), MIN(Number_cities) FROM market;"
        ]
    },
    "3140": {
        "db_id": "assets_maintenance",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "ground_truth": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "amends": [
            "Do select `first_name` and `last_name` directly instead of selecting them from an aliased table. Do query from `Maintenance_Engineers` instead of `engineers`. Do remove the `LEFT JOIN` with `maintenance_visits` and instead use a `NOT IN` subquery with `Engineer_Visits`. Do change the filter to use `engineer_id NOT IN` subquery instead of `WHERE mv.visit_id IS NOT NULL`. Do remove the table aliases `e` and `mv` instead of keeping them. The amended query now correctly identifies engineers without visits by using a NOT IN subquery instead of the incorrect LEFT JOIN approach that would return engineers with visits."
        ],
        "rules": [
            "1) When answering about engineers who have never visited to maintain assets: select \"first_name\" and \"last_name\" directly from the \"Maintenance_Engineers\" table. 2) When identifying engineers without maintenance visits: use a NOT IN subquery with \"Engineer_Visits\" table instead of a LEFT JOIN approach. 3) When filtering for engineers with no visits: check where \"engineer_id\" from \"Maintenance_Engineers\" is NOT IN the subquery results from \"Engineer_Visits\". 4) When handling table references: do not use table aliases like \"e\" or \"mv\" - reference columns directly from their respective tables."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT e.first_name, e.last_name \nFROM engineers e\nLEFT JOIN maintenance_visits mv ON e.engineer_id = mv.engineer_id\nWHERE mv.visit_id IS NOT NULL;",
            "SELECT first_name, last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)"
        ],
        "rule_sql": [
            "SELECT first_name, last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)"
        ]
    },
    "3917": {
        "db_id": "hospital_1",
        "question": "Find the name of the patient who made the appointment with the most recent start date.",
        "ground_truth": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "amends": [
            "Do specify `T1.name` with table alias instead of just `name` without qualification. Do join `patient AS T1` with `appointment AS T2` instead of querying only the `patients` table. Do use the join condition `T1.ssn = T2.patient` to properly relate patients to their appointments instead of missing this relationship entirely. Do order by `T2.start DESC` based on appointment start time instead of the non-existent `appointment_date` column. The amended query now correctly retrieves the patient name for the most recent appointment by properly joining the tables and using the appropriate timestamp column."
        ],
        "rules": [
            "1) When answering about \"the patient who made the appointment with the most recent start date\": make sure the output order: T1.name. 2) When the question mentions \"patient name\": \"name\" actually means \"T1.name\" in schema. 3) When combining T1 (patients) and T2 (appointment) for shared entities: link rows where T1.ssn = T2.patient exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question mentions \"most recent start date\": order rows by T2.start DESC and keep the first 1 row. 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM patients ORDER BY appointment_date DESC LIMIT 1;",
            "SELECT T1.Name \nFROM Patient AS T1 \nJOIN Appointment AS T2 ON T1.SSN = T2.Patient \nORDER BY T2.Start DESC \nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.Name FROM Patient T1 INNER JOIN Appointment T2 ON T1.SSN = T2.Patient ORDER BY T2.Start DESC LIMIT 1"
        ]
    },
    "3973": {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "ground_truth": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "amends": [
            "Do reference `physician` as `T1` instead of `p` and select `T1.name` instead of `p.name`. Do join `trained_in` as `T2` on `T1.employeeid = T2.physician` instead of directly joining `procedures`. Do then join `procedures` as `T3` on `T3.code = T2.treatment` instead of joining directly on `p.procedure_id = pr.id`. Do filter on `T3.cost > 5000` instead of `pr.cost > 5000` to maintain the same cost threshold logic through the correct relationship path. The amended query now correctly navigates the physician-training-procedure relationship hierarchy and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"physicians trained in procedures\": make sure the output order: T1.name\n2) When the question mentions \"physicians\": \"physicians\" actually means \"T1\" in schema with column \"T1.name\"\n3) When combining T1 and T2 for shared entities: link rows where T1.employeeid = T2.physician and keep only matching pairs (inner match)\n4) When combining T2 and T3 for shared entities: link rows where T3.code = T2.treatment and keep only matching pairs (inner match)\n5) When filtering on procedure cost: apply the condition T3.cost > 5000 to select procedures more expensive than 5000"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT p.name \nFROM physicians p \nJOIN procedures pr ON p.procedure_id = pr.id \nWHERE pr.cost > 5000;",
            "SELECT T1.Name\nFROM Physician T1\nJOIN Trained_In T2 ON T1.EmployeeID = T2.Physician\nJOIN Procedures T3 ON T3.Code = T2.Treatment\nWHERE T3.Cost > 5000;"
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.Name\nFROM Physician T1\nINNER JOIN Trained_In T2 ON T1.EmployeeID = T2.Physician\nINNER JOIN Procedures T3 ON T3.Code = T2.Treatment\nWHERE T3.Cost > 5000\nORDER BY T1.Name;"
        ]
    },
    "4307": {
        "db_id": "club_1",
        "question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.",
        "ground_truth": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
        "amends": [
            "Do use `DISTINCT t1.clubname` instead of `club_name` without distinct. Do join three tables `club AS t1`, `member_of_club AS t2`, and `student AS t3` instead of querying only `clubs`. Do use `JOIN` with `t1.clubid = t2.clubid` and `t2.stuid = t3.stuid` instead of no joins. Do filter on `t3.city_code = \"HOU\"` instead of `city_code = 'HOU'` from the wrong table. The amended query now correctly finds clubs with members from Houston instead of clubs located in Houston."
        ],
        "rules": [
            "1) When answering about clubs with members from a specific city: join three tables - club AS T1, member_of_club AS T2, and student AS T3 using T1.clubid = T2.clubid and T2.stuid = T3.stuid to connect clubs to their members' city information. 2) When filtering for members from city code \"HOU\": use T3.city_code = \"HOU\" to check the student's city code, not the club's location. 3) When selecting club names: use DISTINCT T1.clubname to return each club only once, even if multiple members are from Houston. 4) When combining tables for shared entities: perform inner matches using the exact key equalities T1.clubid = T2.clubid and T2.stuid = T3.stuid to keep only valid club-member-student relationships."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT club_name FROM clubs WHERE city_code = 'HOU';",
            "SELECT DISTINCT t1.ClubName FROM Club AS t1 JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID JOIN Student AS t3 ON t2.StuID = t3.StuID WHERE t3.city_code = \"HOU\""
        ],
        "rule_sql": [
            "SELECT DISTINCT T1.ClubName \nFROM Club AS T1\nINNER JOIN Member_of_club AS T2 ON T1.ClubID = T2.ClubID\nINNER JOIN Student AS T3 ON T2.StuID = T3.StuID\nWHERE T3.city_code = 'HOU';"
        ]
    },
    "3866": {
        "db_id": "insurance_policies",
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "ground_truth": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do join `Settlements` table with alias `T2` on `T1.claim_id = T2.claim_id` instead of querying only the `claims` table. Do select `T1.date_claim_made` instead of `claim_date`. Do use `count(*)` instead of `COUNT(settlement_id)` for the aggregation. Do include table alias `T1` for `claim_id` in both SELECT and GROUP BY clauses instead of using unqualified column names. Do order by `count(*)` instead of the alias `settlement_count`. The amended query now correctly joins the Claims and Settlements tables to count settlements per claim and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"claim incurred the most number of settlements\": make sure the output order: claim_id, date_claim_made, count(*) 2) When combining Claims table (T1) and Settlements table (T2): link rows where T1.claim_id = T2.claim_id and keep only matching pairs (inner match) 3) When counting settlements per claim: compute the number of rows using count(*) instead of counting a specific column 4) When grouping by claim: organize results by T1.claim_id and compute requested aggregates per group 5) When the question mentions \"most number of settlements\": rank rows by count(*) in descending order and keep the first 1 row 6) When selecting columns: use T1.claim_id and T1.date_claim_made instead of unqualified column names"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT claim_id, claim_date, COUNT(settlement_id) as settlement_count\nFROM claims\nGROUP BY claim_id\nORDER BY settlement_count DESC\nLIMIT 1;",
            "SELECT T1.Claim_ID, T1.Date_Claim_Made, COUNT(*) AS settlement_count\nFROM Claims T1\nJOIN Settlements T2 ON T1.Claim_ID = T2.Claim_ID\nGROUP BY T1.Claim_ID, T1.Date_Claim_Made\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.Claim_ID, T1.Date_Claim_Made, COUNT(*) AS settlement_count\nFROM Claims T1\nINNER JOIN Settlements T2 ON T1.Claim_ID = T2.Claim_ID\nGROUP BY T1.Claim_ID, T1.Date_Claim_Made\nORDER BY settlement_count DESC\nLIMIT 1;"
        ]
    },
    "6654": {
        "db_id": "driving_school",
        "question": "Which city lives most of staffs? List the city name and number of staffs.",
        "ground_truth": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
        "amends": [
            "Do join `Addresses AS T1` with `Staff AS T2` on `T1.address_id = T2.staff_address_id` instead of querying only the `staffs` table without proper joins. Do select `T1.city` instead of just `city` to specify the table source. Do use `count(*)` without an alias instead of `COUNT(*) as staff_count`. Do order by `count(*) DESC` instead of `staff_count ASC` to find the city with the most staff rather than the fewest. The amended query now correctly joins address and staff tables to count staff per city and returns the city with the highest staff count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"which city lives most of staffs\": make sure the output order: T1.city, count(*) 2) When the question mentions \"city\": \"city\" actually means \"T1.city in schema\" 3) When combining Addresses as T1 and Staff as T2 for shared entities: link rows where T1.address_id = T2.staff_address_id exactly as shown in the amends; keep only matching pairs (inner match) 4) When the question asks for \"number of staffs\": compute the count of rows using the canonical key from the join 5) When the question asks for \"most\" or \"highest\": rank rows by count(*) in descending direction and keep the first 1 row"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT city, COUNT(*) as staff_count FROM staffs GROUP BY city ORDER BY staff_count ASC LIMIT 1;",
            "SELECT T1.city, COUNT(*) \nFROM Addresses AS T1 \nJOIN Staff AS T2 ON T1.address_id = T2.staff_address_id \nGROUP BY T1.city \nORDER BY COUNT(*) DESC \nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.city, COUNT(*) AS number_of_staffs\nFROM Addresses AS T1\nINNER JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id\nGROUP BY T1.city\nORDER BY number_of_staffs DESC\nLIMIT 1;"
        ]
    },
    "771": {
        "db_id": "race_track",
        "question": "List the race class with at least two races.",
        "ground_truth": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "amends": [
            "Do reference table `race` instead of `races` and use column `CLASS` instead of `race_class` in the SELECT list and GROUP BY clause. Do change the HAVING condition to `count(*) >= 2` instead of `COUNT(*) > 1` to include groups with exactly two records. The amended query now correctly identifies classes with two or more races in the race table.",
            "Do remove the `COUNT(*) as race_count` column from the SELECT list instead of including it, as the RIGHT_SQL only needs to return the CLASS values that meet the grouping condition. The amended query now correctly returns only the CLASS values from the race table where groups have at least 2 records, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question mentions \"race class\": use the exact column token \"CLASS\" from the race table. 2) When the question asks for classes with \"at least two races\": count the number of races per class using count(*) and include groups where the count is greater than or equal to 2. 3) When grouping by race class: organize results by the \"CLASS\" column from the race table. 4) When answering about race classes: make sure the output order shows only the \"CLASS\" column values.",
            "1) When the question asks for \"race class with at least two races\": group rows by the exact token \"CLASS\" from table \"race\" and keep only groups having at least 2 rows. 2) When producing output for this question: return only the \"CLASS\" column values without any count columns. 3) When counting races per class: use the grouping key \"CLASS\" to determine group sizes, not a separate count column in the output."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT race_class FROM races GROUP BY race_class HAVING COUNT(*) > 1",
            "SELECT CLASS, COUNT(*) as race_count FROM race GROUP BY CLASS HAVING COUNT(*) >= 2",
            "SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2"
        ],
        "rule_sql": [
            "SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2;"
        ]
    },
    "4509": {
        "db_id": "document_management",
        "question": "What is the structure of the document with the least number of accesses?",
        "ground_truth": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `t2.document_structure_description` instead of `*` and add `GROUP BY t1.document_structure_code` with `ORDER BY count(*) DESC` instead of `ORDER BY access_count ASC`. Do change the FROM clause to join `documents AS t1` with `document_structures AS t2` on `t1.document_structure_code = t2.document_structure_code` instead of selecting from `documents` alone. The amended query now correctly identifies the most common document structure by counting occurrences rather than finding the least accessed document, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"structure of the document with the least number of accesses\": make sure the output order: t2.document_structure_description. 2) When combining documents and document_structures tables: link rows where t1.document_structure_code = t2.document_structure_code and keep only matching pairs (inner match). 3) When the question asks for \"structure of the document\": \"structure\" actually means \"document_structure_description in schema\". 4) When the question mentions \"least number of accesses\": this actually means \"count occurrences of document structures\" and requires ordering by count(*) in ascending direction to find the least common structure. 5) When organizing results by document structure: group by t1.document_structure_code and compute count(*) per group."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM documents ORDER BY access_count ASC LIMIT 1;",
            "SELECT t2.document_structure_description \nFROM documents AS t1 \nJOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code \nGROUP BY t1.document_structure_code \nORDER BY COUNT(*) DESC \nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT t2.document_structure_description\nFROM Documents t1\nINNER JOIN Document_Structures t2 ON t1.document_structure_code = t2.document_structure_code\nGROUP BY t1.document_structure_code\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ]
    },
    "5755": {
        "db_id": "dorm_1",
        "question": "What is the most common amenity in the dorms?",
        "ground_truth": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.amenity_name` instead of `amenity` and remove the `count` alias instead of keeping it. Do use `FROM dorm_amenity AS T1 JOIN has_amenity AS T2` instead of `FROM dorms` with proper table joins. Do apply the join condition `ON T1.amenid = T2.amenid` instead of no join condition. Do group by `T2.amenid` instead of `amenity`. Do order by `count(*)` instead of the alias `count`. The amended query now correctly joins the amenity tables and counts occurrences by amenity ID rather than assuming a single table structure."
        ],
        "rules": [
            "1) When answering about \"most common amenity in the dorms\": make sure the output order: T1.amenity_name first, then the count. 2) When the question mentions \"amenity\": \"amenity\" actually means \"T1.amenity_name\" in schema. 3) When combining T1 (dorm_amenity) and T2 (has_amenity) for shared entities: link rows where T1.amenid = T2.amenid exactly as shown; keep only matching pairs (inner match). 4) When counting amenities: compute the number of rows using T2.amenid as the counting key, not all columns. 5) When the question asks for \"most common\": rank rows by count(*) in descending direction and keep the first 1 row. 6) When grouping by amenity: organize results by T2.amenid and compute count per group. 7) When producing output: do not include aliases like \"count\" in the final result columns."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT amenity, COUNT(*) as count FROM dorms GROUP BY amenity ORDER BY count DESC LIMIT 1;",
            "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.amenity_name, COUNT(T2.amenid) \nFROM Dorm_amenity T1\nINNER JOIN Has_amenity T2 ON T1.amenid = T2.amenid\nGROUP BY T2.amenid\nORDER BY COUNT(T2.amenid) DESC\nLIMIT 1"
        ]
    },
    "2738": {
        "db_id": "election",
        "question": "Show the average population of all counties.",
        "ground_truth": "SELECT avg(Population) FROM county",
        "amends": [
            "Do reference table `county` instead of `cities` and use column `Population` instead of `population` while maintaining the same aggregate function `avg`."
        ],
        "rules": [
            "1) When answering about \"average population of all counties\": use table \"county\" and column \"Population\" with the average aggregate function. 2) When the question mentions \"counties\": \"counties\" actually means table \"county\" in the schema. 3) When the question mentions \"population\": \"population\" actually means column \"Population\" in table \"county\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT AVG(population) FROM cities;",
            "SELECT AVG(Population) FROM county;"
        ],
        "rule_sql": [
            "SELECT AVG(Population) FROM county;"
        ]
    },
    "1738": {
        "db_id": "gymnast",
        "question": "List the total points of gymnasts in descending order.",
        "ground_truth": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "amends": [
            "Do select `Total_Points` instead of `name, points` and remove the `name` column instead of including it. Do reference table `gymnast` instead of `gymnasts` and use singular table name instead of plural. Do order by `Total_Points DESC` instead of `points ASC` and use descending order instead of ascending. The amended query now correctly selects only the total points from the gymnast table in descending order."
        ],
        "rules": [
            "1) When answering about \"total points of gymnasts\": make sure the output order: \"Total_Points\" in descending order. 2) When the question mentions \"gymnasts\": \"gymnasts\" actually means table \"gymnast\" in schema. 3) When selecting columns: include only \"Total_Points\" column and remove any other columns like \"name\". 4) When ordering results: sort by \"Total_Points\" in descending order instead of ascending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, points FROM gymnasts ORDER BY points ASC;",
            "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC;"
        ],
        "rule_sql": [
            "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC;"
        ]
    },
    "2913": {
        "db_id": "icfp_1",
        "question": "Which paper has the most authors? Give me the paper title.",
        "ground_truth": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "amends": [
            "Do select `t2.title` from the `papers` table instead of just `title` from `papers`. Do use a `JOIN` between `authorship AS t1` and `papers AS t2` on `t1.paperid = t2.paperid` instead of querying only the `papers` table. Do add a `WHERE` filter with `t1.authorder = (SELECT max(authorder) FROM authorship)` instead of ordering by `author_count DESC`. Do remove the `ORDER BY author_count DESC LIMIT 1` clause instead of keeping it, as the subquery approach directly identifies the paper with the highest author order. The amended query now correctly identifies papers based on authorship order rather than relying on a potentially incorrect author_count ordering."
        ],
        "rules": [
            "1) When answering about \"paper with the most authors\": make sure to join \"authorship AS t1\" and \"papers AS t2\" where \"t1.paperid = t2.paperid\" to combine author and paper information. 2) When identifying the paper with maximum authorship: use \"t1.authorder = (SELECT max(authorder) FROM authorship)\" as the filter condition to find the paper with the highest author order. 3) When selecting the paper title: output \"t2.title\" from the joined tables to get the correct paper title. 4) When the question asks for \"most authors\": this means finding the paper with the maximum \"authorder\" value in the authorship table, not using a simple count-based ordering."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT title FROM papers ORDER BY author_count DESC LIMIT 1;",
            "SELECT t2.title \nFROM authorship AS t1 \nJOIN papers AS t2 ON t1.paperid = t2.paperid \nWHERE t1.authorder = (SELECT MAX(authorder) FROM authorship)"
        ],
        "rule_sql": [
            "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperID = t2.paperID WHERE t1.authOrder = (SELECT MAX(authOrder) FROM authorship);"
        ]
    },
    "524": {
        "db_id": "allergy_1",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "ground_truth": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "amends": [
            "Do select `fname` and `sex` instead of `first_name` and `gender`. Do query from `Student` instead of `students`. Do use a subquery with `EXCEPT` to find students allergic to milk but not cats instead of incorrectly filtering for both allergies simultaneously with `AND`. Do reference the correct allergy table `Has_allergy` instead of assuming allergies are stored directly in the student table. Do use proper column names `StuID` and `Allergy` instead of the incorrect direct allergy filter. The amended query now correctly identifies students with milk allergy but not cat allergy, matching the intended behavior.",
            "Do use lowercase column names `fname` and `sex` instead of uppercase `Fname` and `Sex`. Do use lowercase table name `Has_allergy` instead of mixed case `Has_Allergy`. Do use double quotes around string literals `\"Milk\"` and `\"Cat\"` instead of single quotes 'milk' and 'cats'. Do remove table aliases `s`, `ha1`, and `ha2` instead of keeping them. Do capitalize 'Cat' instead of lowercase 'cats' in the second allergy condition. The amended query now correctly identifies students allergic to milk but not cats with proper case sensitivity and formatting."
        ],
        "rules": [
            "1) When the question asks for \"first name\" and \"gender\": use the exact column names \"Fname\" and \"Sex\" from the Student table. 2) When querying about students: use the table name \"Student\" instead of \"students\". 3) When finding students with allergy to milk but not cats: use a subquery with EXCEPT logic to identify students who have milk allergy but do not have cat allergy. 4) When working with allergies: reference the \"Has_allergy\" table instead of assuming allergies are stored in the Student table. 5) When joining allergy information: use the proper column names \"StuID\" and \"Allergy\" from the Has_allergy table.",
            "1) When the question asks for first name and gender: use column names \"fname\" and \"sex\" from table Student. 2) When the question mentions \"allergy to milk\": use the exact string literal \"Milk\" for the allergy condition. 3) When the question mentions \"can put up with cats\": use the exact string literal \"Cat\" for the allergy condition. 4) When identifying students with specific allergies: use table \"Has_allergy\" (lowercase) without table aliases. 5) When finding students allergic to milk but not cats: select students who have \"Milk\" allergy but do not have \"Cat\" allergy using the Student ID as the linking key."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, gender FROM students WHERE allergy = 'milk' AND allergy = 'cats';",
            "SELECT s.Fname, s.Sex\nFROM Student s\nWHERE s.StuID IN (\n    SELECT ha1.StuID\n    FROM Has_Allergy ha1\n    WHERE ha1.Allergy = 'milk'\n    EXCEPT\n    SELECT ha2.StuID\n    FROM Has_Allergy ha2\n    WHERE ha2.Allergy = 'cats'\n)",
            "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
        ],
        "rule_sql": [
            "SELECT Student.Fname, Student.Sex\nFROM Student\nWHERE Student.StuID IN (\n    SELECT Has_allergy.StuID\n    FROM Has_allergy\n    WHERE Has_allergy.Allergy = 'Milk'\n    EXCEPT\n    SELECT Has_allergy.StuID\n    FROM Has_allergy\n    WHERE Has_allergy.Allergy = 'Cat'\n)"
        ]
    },
    "6651": {
        "db_id": "driving_school",
        "question": "How many employees live in Georgia?",
        "ground_truth": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "amends": [
            "Do reference the `Addresses` table instead of the `employees` table. Do filter on the `state_province_county` column instead of the `state` column. Do use double quotes around the string literal \"Georgia\" instead of single quotes. The amended query now correctly counts addresses in Georgia rather than attempting to count employees from a non-existent state column."
        ],
        "rules": [
            "1) When the question asks about employees living in a location: use the Addresses table instead of the employees table to find location information. 2) When filtering by state in the Addresses table: use the state_province_county column instead of a state column. 3) When specifying the literal value for Georgia: use double quotes around \"Georgia\" instead of single quotes."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE state = 'Georgia';",
            "SELECT COUNT(*) FROM Addresses WHERE state_province_county = \"Georgia\";"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id WHERE a.state_province_county = \"Georgia\""
        ]
    },
    "971": {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "ground_truth": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "amends": [
            "Do use `count(DISTINCT FDA_approved)` instead of `COUNT(*)` to count distinct FDA approval values rather than all rows. Do reference table `medicine` instead of `medicines` with the correct table name. Do remove the `WHERE approval_status = 'FDA approved'` filter instead of keeping it, as the distinct count approach eliminates the need for explicit filtering. The amended query now correctly counts distinct FDA approval status values across all records in the medicine table."
        ],
        "rules": [
            "1) When counting distinct FDA approval statuses: use count(DISTINCT \"FDA_approved\") instead of COUNT(*) to count unique values. 2) When referencing the medicine table: use the exact table name \"medicine\" instead of \"medicines\". 3) When counting distinct values across all records: remove any WHERE filter conditions since distinct counting inherently considers all values in the column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM medicines WHERE approval_status = 'FDA approved';",
            "SELECT COUNT(DISTINCT FDA_approved) FROM medicine;"
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT \"FDA_approved\") FROM \"medicine\";"
        ]
    },
    "6189": {
        "db_id": "music_4",
        "question": "Find the famous titles of artists that do not have any volume.",
        "ground_truth": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "amends": [
            "Do select `Famous_Title` instead of `a.famous_title` and remove the table alias. Do use a single table `artist` instead of joining `artists` with `volumes`. Do change the filter to use `NOT IN` with a subquery selecting `Artist_ID` from `volume` instead of a `JOIN` with `WHERE v.volume IS NULL`. Do remove the explicit join condition since the subquery handles the relationship implicitly. The amended query now correctly identifies artists without any volumes by using a subquery to exclude those with entries in the volume table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"famous titles of artists that do not have any volume\": make sure the output order: Famous_Title. 2) When the question mentions \"artists\": use the table \"artist\" with no alias. 3) When the question mentions \"do not have any volume\": use a NOT IN condition with a subquery selecting Artist_ID from table \"volume\". 4) When selecting the famous title: use the exact column name Famous_Title without table alias."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT a.famous_title FROM artists a JOIN volumes v ON a.artist_id = v.artist_id WHERE v.volume IS NULL;",
            "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN (SELECT Artist_ID FROM volume)"
        ],
        "rule_sql": [
            "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN (SELECT Artist_ID FROM volume) ORDER BY Famous_Title;"
        ]
    },
    "3244": {
        "db_id": "college_1",
        "question": "What are the first names of all students in course ACCT-211?",
        "ground_truth": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
        "amends": [
            "Do select `T3.stu_fname` instead of `first_name` and use proper table aliasing. Do join three tables `CLASS AS T1`, `enroll AS T2`, and `student AS T3` instead of querying only the `students` table. Do use `JOIN` with explicit `ON` conditions `T1.class_code = T2.class_code` and `T2.stu_num = T3.stu_num` instead of no joins. Do filter on `T1.crs_code = 'ACCT-211'` instead of `course = 'ACCT-211'` to reference the correct table and column. The amended query now correctly retrieves student first names by joining through enrollment and class tables to match the intended logic."
        ],
        "rules": [
            "1) When answering about student first names in a specific course: use T3.stu_fname as the output column instead of first_name. 2) When the question mentions \"students\": this requires joining three tables - CLASS as T1, enroll as T2, and student as T3. 3) When combining CLASS and enroll tables: link rows where T1.class_code = T2.class_code and keep only matching pairs. 4) When combining enroll and student tables: link rows where T2.stu_num = T3.stu_num and keep only matching pairs. 5) When filtering for course ACCT-211: use T1.crs_code = 'ACCT-211' instead of course = 'ACCT-211' to reference the correct table and column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name FROM students WHERE course = 'ACCT-211';",
            "SELECT T3.STU_FNAME\nFROM CLASS AS T1\nJOIN ENROLL AS T2 ON T1.CLASS_CODE = T2.CLASS_CODE\nJOIN STUDENT AS T3 ON T2.STU_NUM = T3.STU_NUM\nWHERE T1.CRS_CODE = 'ACCT-211'"
        ],
        "rule_sql": [
            "SELECT T3.stu_fname \nFROM CLASS AS T1\nJOIN ENROLL AS T2 ON T1.CLASS_CODE = T2.CLASS_CODE\nJOIN STUDENT AS T3 ON T2.STU_NUM = T3.STU_NUM\nWHERE T1.CRS_CODE = 'ACCT-211'"
        ]
    },
    "889": {
        "db_id": "chinook_1",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "ground_truth": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "amends": [
            "Do use `INTERSECT` to find albums containing both genres instead of `OR` which finds albums containing either genre. Do remove `DISTINCT` since `INTERSECT` inherently returns unique results instead of keeping it. Do change the table aliases from `a`, `t`, `g` to `T1`, `T2`, `T3` for consistency with the second query part. Do split the single query into two separate `SELECT` statements joined by `INTERSECT` instead of using a single query with `OR` condition. Do use explicit `AS` for table aliases instead of implicit aliasing. Do ensure both query parts have identical structure with the same `SELECT T1.Title` instead of `a.Title`. The amended query now correctly finds albums that contain both Reggae and Rock tracks instead of albums that contain either genre."
        ],
        "rules": [
            "1) When the question asks for albums containing both 'Reggae' and 'Rock' genre tracks: use INTERSECT to combine results from two separate queries instead of OR condition. 2) When using INTERSECT to combine results: remove DISTINCT since INTERSECT inherently returns unique results. 3) When referring to the albums table: use alias T1 with explicit AS syntax (T1 AS albums). 4) When referring to the tracks table: use alias T2 with explicit AS syntax (T2 AS tracks). 5) When referring to the genres table: use alias T3 with explicit AS syntax (T3 AS genres). 6) When selecting album titles: use T1.Title in both query parts for identical structure. 7) When filtering for 'Reggae' genre: use T3.Name = 'Reggae' with exact case and spelling. 8) When filtering for 'Rock' genre: use T3.Name = 'Rock' with exact case and spelling. 9) When joining tables: use T1.AlbumId = T2.AlbumId and T2.GenreId = T3.GenreId for proper relationships."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT a.Title \nFROM albums a\nJOIN tracks t ON a.AlbumId = t.AlbumId\nJOIN genres g ON t.GenreId = g.GenreId\nWHERE g.Name = 'Reggae' OR g.Name = 'Rock'",
            "SELECT T1.Title\nFROM Album AS T1\nJOIN Track AS T2 ON T1.AlbumId = T2.AlbumId\nJOIN Genre AS T3 ON T2.GenreId = T3.GenreId\nWHERE T3.Name = 'Reggae'\nINTERSECT\nSELECT T1.Title\nFROM Album AS T1\nJOIN Track AS T2 ON T1.AlbumId = T2.AlbumId\nJOIN Genre AS T3 ON T2.GenreId = T3.GenreId\nWHERE T3.Name = 'Rock'"
        ],
        "rule_sql": [
            "SELECT T1.Title\nFROM Album AS T1\nJOIN Track AS T2 ON T1.AlbumId = T2.AlbumId\nJOIN Genre AS T3 ON T2.GenreId = T3.GenreId\nWHERE T3.Name = 'Reggae'\nINTERSECT\nSELECT T1.Title\nFROM Album AS T1\nJOIN Track AS T2 ON T1.AlbumId = T2.AlbumId\nJOIN Genre AS T3 ON T2.GenreId = T3.GenreId\nWHERE T3.Name = 'Rock'"
        ]
    },
    "5572": {
        "db_id": "products_gen_characteristics",
        "question": "List the all the distinct names of the products with the characteristic name 'warm'.",
        "ground_truth": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
        "amends": [
            "Do select `t1.product_name` from the `products` table instead of `name` from a single table. Do add joins to `product_characteristics AS t2` on `t1.product_id = t2.product_id` and `CHARACTERISTICS AS t3` on `t2.characteristic_id = t3.characteristic_id` instead of querying only the `products` table. Do filter on `t3.characteristic_name = \"warm\"` instead of `characteristic = 'warm'` to properly reference the joined characteristics table. The amended query now correctly joins through the relationship tables to filter products by characteristic name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"distinct names of products with characteristic name 'warm'\": make sure the output order: t1.product_name. 2) When the question mentions \"names of the products\": \"names\" actually means \"t1.product_name in schema\". 3) When the question mentions \"characteristic name 'warm'\": filter on t3.characteristic_name = \"warm\" exactly as specified. 4) When combining products (T1) and product_characteristics (T2) for shared entities: link rows where t1.product_id = t2.product_id exactly as shown in the amends; keep only matching pairs (inner match). 5) When combining product_characteristics (T2) and CHARACTERISTICS (T3) for shared entities: link rows where t2.characteristic_id = t3.characteristic_id exactly as shown in the amends; keep only matching pairs (inner match). 6) When the question asks for \"distinct names\": compute the number of unique values of the exact token t1.product_name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT name FROM products WHERE characteristic = 'warm';",
            "SELECT DISTINCT t1.product_name\nFROM Products AS t1\nJOIN Product_Characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN Characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nWHERE t3.characteristic_name = 'warm'"
        ],
        "rule_sql": [
            "SELECT DISTINCT t1.product_name\nFROM Products t1\nINNER JOIN Product_Characteristics t2 ON t1.product_id = t2.product_id\nINNER JOIN Characteristics t3 ON t2.characteristic_id = t3.characteristic_id\nWHERE t3.characteristic_name = 'warm'\nORDER BY t1.product_name;"
        ]
    },
    "5546": {
        "db_id": "products_gen_characteristics",
        "question": "What is the color code and description of the product named \"chervil\"?",
        "ground_truth": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
        "amends": [
            "Do select `t1.color_code` and `t2.color_description` instead of `color` and `description`. Do join `ref_colors AS t2` instead of querying only the `products` table. Do use `ON t1.color_code = t2.color_code` to establish the join relationship instead of no join condition. Do filter on `t1.product_name = \"chervil\"` instead of `name = 'chervil'`. The amended query now correctly joins to the reference table for color information and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for color code and description: select t1.color_code and t2.color_description instead of color and description. 2) When querying product information that requires color details: join ref_colors AS t2 to the products table instead of querying only the products table. 3) When joining products and ref_colors tables: use ON t1.color_code = t2.color_code to establish the join relationship. 4) When filtering for a specific product: use t1.product_name = \"chervil\" instead of name = 'chervil'."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT color, description FROM products WHERE name = 'chervil';",
            "SELECT t1.color_code, t2.color_description \nFROM Products AS t1 \nJOIN Ref_Colors AS t2 ON t1.color_code = t2.color_code \nWHERE t1.product_name = 'chervil'"
        ],
        "rule_sql": [
            "SELECT t1.color_code, t2.color_description FROM Products AS t1 JOIN Ref_Colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\""
        ]
    },
    "6317": {
        "db_id": "e_government",
        "question": "What are the party emails associated with parties that used the party form that is the most common?",
        "ground_truth": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "amends": [
            "Do join `parties AS t1` with `party_forms AS t2` on `t1.party_id = t2.party_id` instead of querying only the `parties` table without any join. Do filter on `t2.form_id` instead of `party_form` from the base table. Do use a subquery that groups `party_forms` by `form_id` instead of grouping `parties` by `party_form`. Do select `t1.party_email` with table alias instead of just `party_email` without qualification. The amended query now correctly identifies the most frequent form_id from the party_forms table and returns corresponding emails through proper table joining, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"party emails associated with parties that used the most common party form\": make sure to join \"parties AS t1\" with \"party_forms AS t2\" on \"t1.party_id = t2.party_id\" using an inner match. 2) When the question mentions \"most common party form\": this actually means the \"form_id\" with the highest count from the \"party_forms\" table. 3) When identifying the most common form: group \"party_forms\" by \"form_id\" and order by count in descending direction, keeping the first 1 row. 4) When filtering for the most common form: use \"t2.form_id\" instead of \"party_form\" from the base table. 5) When selecting party emails: use \"t1.party_email\" with table alias qualification instead of unqualified \"party_email\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT party_email FROM parties WHERE party_form = (SELECT party_form FROM parties GROUP BY party_form ORDER BY COUNT(*) DESC LIMIT 1);",
            "SELECT t1.party_email \nFROM parties AS t1\nJOIN party_forms AS t2 ON t1.party_id = t2.party_id\nWHERE t2.form_id = (\n    SELECT form_id \n    FROM party_forms \n    GROUP BY form_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)"
        ],
        "rule_sql": [
            "SELECT t1.party_email\nFROM Parties AS t1\nINNER JOIN Party_Forms AS t2 ON t1.party_id = t2.party_id\nWHERE t2.form_id = (\n    SELECT form_id\n    FROM Party_Forms\n    GROUP BY form_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
        ]
    },
    "2979": {
        "db_id": "sakila_1",
        "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
        "ground_truth": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "amends": [
            "Do select `T2.name` instead of `language` to properly reference the language name from the joined table. Do join `film AS T1` with `LANGUAGE AS T2` instead of querying only the `films` table to establish the relationship between films and languages. Do use the join condition `T1.language_id = T2.language_id` instead of directly selecting from a single table to correctly link the film to its corresponding language record. Do maintain the filter `T1.title = 'AIRPORT POLLOCK'` in the WHERE clause to preserve the search criteria. The amended query now correctly retrieves the language name through proper table relationships instead of attempting to select a column that may not exist directly in the films table."
        ],
        "rules": [
            "1) When answering about the language name for a specific film: make sure the output order: T2.name 2) When the question mentions \"language\": \"language\" actually means \"T2.name in schema\" 3) When combining T1 and T2 for shared entities: link rows where T1.language_id = T2.language_id exactly as shown in the amends; keep only matching pairs (inner match). 4) When filtering for a specific film title: maintain the exact literal filter T1.title = 'AIRPORT POLLOCK' with the exact case and spacing."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT language FROM films WHERE title = 'AIRPORT POLLOCK';",
            "SELECT T2.name \nFROM film AS T1 \nJOIN language AS T2 ON T1.language_id = T2.language_id \nWHERE T1.title = 'AIRPORT POLLOCK'"
        ],
        "rule_sql": [
            "SELECT T2.name \nFROM film T1 \nINNER JOIN language T2 ON T1.language_id = T2.language_id \nWHERE T1.title = 'AIRPORT POLLOCK'"
        ]
    },
    "3106": {
        "db_id": "behavior_monitoring",
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "ground_truth": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.student_id` and `T2.last_name` instead of `id` and `last_name`. Do join `Behavior_Incident AS T1` with `Students AS T2` on `T1.student_id = T2.student_id` instead of querying only the `students` table. Do add `GROUP BY T1.student_id` to aggregate incidents per student instead of omitting grouping. Do order by `count(*) DESC` to rank by incident count instead of ordering by the non-existent `behavior_incidents` column. The amended query now correctly identifies the student with the most behavior incidents by joining the incident table with student data and counting occurrences per student."
        ],
        "rules": [
            "1) When answering about \"student that has the most behavior incidents\": make sure the output order: T1.student_id, T2.last_name. 2) When the question mentions \"id\": \"id\" actually means \"T1.student_id\" in schema. 3) When the question mentions \"last name\": \"last name\" actually means \"T2.last_name\" in schema. 4) When combining Behavior_Incident as T1 and Students as T2 for shared entities: link rows where T1.student_id = T2.student_id; keep only matching pairs (inner match). 5) When the question asks for \"count of behavior incidents per student\": compute the number of rows using T1.student_id as the grouping key and count occurrences per student. 6) When the question mentions \"most\" or \"highest\": rank rows by count(*) in descending direction and keep the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, last_name FROM students ORDER BY behavior_incidents DESC LIMIT 1;",
            "SELECT T1.student_id, T2.last_name\nFROM Behavior_Incident AS T1\nJOIN Students AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT T1.student_id, T2.last_name\nFROM Behavior_Incident T1\nINNER JOIN Students T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id, T2.last_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "6697": {
        "db_id": "driving_school",
        "question": "For each payment method, how many payments were made?",
        "ground_truth": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
        "amends": [
            "Do reference `payment_method_code` instead of `payment_method` in the SELECT list and GROUP BY clause. Do use `Customer_Payments` as the table source instead of `payments`. Do group by `payment_method_code` instead of `payment_id` to correctly aggregate counts by payment method type rather than individual payment identifiers. The amended query now matches RIGHT_SQL's behavior by properly counting payments grouped by their method codes."
        ],
        "rules": [
            "1) When answering about \"payment methods\": use the exact column token \"payment_method_code\" from table \"Customer_Payments\" to represent payment method types. 2) When counting payments per payment method: group by \"payment_method_code\" and count using the canonical key for payments (implied by the table structure). 3) When the question asks for \"how many payments were made\" per payment method: compute the count of payments for each distinct \"payment_method_code\" value. 4) When choosing the table source: use \"Customer_Payments\" as the base table containing payment records and payment method information."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT payment_method, COUNT(*) FROM payments GROUP BY payment_id;",
            "SELECT payment_method_code, COUNT(*) AS payment_count FROM Customer_Payments GROUP BY payment_method_code"
        ],
        "rule_sql": [
            "SELECT payment_method_code, COUNT(*) AS payment_count FROM Customer_Payments GROUP BY payment_method_code;"
        ]
    },
    "269": {
        "db_id": "musical",
        "question": "What are the names of musicals who have no actors?",
        "ground_truth": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "amends": [
            "Do select `Name` from `musical` instead of `name` from `musals`. Do use `NOT IN` with a subquery selecting `Musical_ID` from `actor` instead of filtering on `actor_id IS NULL`. Do remove the incorrect `actor_id` column reference and instead correlate through the proper `Musical_ID` foreign key relationship. The amended query now correctly identifies musicals without any associated actors by checking for missing entries in the actor table rather than relying on a potentially non-existent or incorrectly named `actor_id` column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When selecting musical names: use \"Name\" from \"musical\" table instead of \"name\" from \"musicals\" table. 2) When finding musicals with no actors: use NOT IN with a subquery selecting \"Musical_ID\" from \"actor\" table instead of checking for NULL actor_id. 3) When correlating between musical and actor tables: use the proper foreign key relationship through \"Musical_ID\" column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM musicals WHERE actor_id IS NULL;",
            "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
        ],
        "rule_sql": [
            "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
        ]
    },
    "5659": {
        "db_id": "customers_and_products_contacts",
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "ground_truth": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'",
        "amends": [
            "Do use `customer_name` instead of `name` for the SELECT column. Do use `customer_orders` table instead of `orders` table as the source. Do use `INTERSECT` operation instead of `DISTINCT` with multiple joins. Do filter for `order_status_code = 'Completed'` in one branch instead of `status = 'completed'`. Do filter for `order_status_code = 'Part'` in the other branch instead of `status = 'part'`. Do use table aliases `T1` and `T2` consistently instead of `c` and `o1/o2`. Do join on `customer_id` instead of `id` for the customer table primary key. The amended query now correctly finds customers who have both completed and partial orders using INTERSECT instead of the flawed multiple join approach."
        ],
        "rules": [
            "1) When the question asks for customer names: select \"customer_name\" from the \"Customers\" table. 2) When finding customers with both 'Completed' and 'Part' order statuses: use INTERSECT operation between two separate queries instead of multiple joins. 3) When filtering for completed orders: use condition \"order_status_code = 'Completed'\" exactly as specified. 4) When filtering for partial orders: use condition \"order_status_code = 'Part'\" exactly as specified. 5) When joining customer and order data: use \"customer_id\" as the join key between \"Customers\" and \"Customer_Orders\" tables. 6) When using table aliases: use T1 for the base customer table and T2 for the order table consistently."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT c.name \nFROM customers c\nJOIN orders o1 ON c.id = o1.customer_id\nJOIN orders o2 ON c.id = o2.customer_id\nWHERE o1.status = 'completed' AND o2.status = 'part'",
            "SELECT customer_name FROM Customers WHERE customer_id IN (\n    SELECT customer_id FROM Customer_Orders WHERE order_status_code = 'Completed'\n    INTERSECT\n    SELECT customer_id FROM Customer_Orders WHERE order_status_code = 'Part'\n)"
        ],
        "rule_sql": [
            "SELECT customer_name FROM Customers WHERE customer_id IN (\n    SELECT customer_id FROM Customer_Orders WHERE order_status_code = 'Completed'\n    INTERSECT\n    SELECT customer_id FROM Customer_Orders WHERE order_status_code = 'Part'\n)"
        ]
    },
    "5438": {
        "db_id": "shop_membership",
        "question": "What is the total number of purchases for members with level 6?",
        "ground_truth": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "amends": [
            "Do add `JOIN member AS T2 ON T1.member_id = T2.member_id` instead of querying only the `purchases` table. Do change the filter to `T2.level = 6` instead of `member_level = '6'` to reference the correct table and use numeric comparison rather than string comparison. Do remove the incorrect column reference `member_level` instead of keeping it, as this column doesn't exist in the purchases table. The amended query now correctly joins the member table to access level information and uses proper numeric comparison for the level filter, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"total number of purchases for members with level 6\": make sure to join the member table as T2 to the purchases table as T1 using T1.member_id = T2.member_id to access member level information. 2) When filtering for members with level 6: use T2.level = 6 with numeric comparison instead of string comparison. 3) When counting purchases: use the canonical key from the purchases table to count the number of rows. 4) When the question mentions \"member level\": \"member level\" actually means \"T2.level in schema\" and should be referenced from the member table, not the purchases table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM purchases WHERE member_level = '6';",
            "SELECT COUNT(*) \nFROM purchase AS T1\nJOIN member AS T2 ON T1.Member_ID = T2.Member_ID\nWHERE T2.Level = 6"
        ],
        "rule_sql": [
            "SELECT COUNT(*) \nFROM purchase T1\nJOIN member T2 ON T1.Member_ID = T2.Member_ID\nWHERE T2.Level = 6"
        ]
    },
    "5072": {
        "db_id": "device",
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "ground_truth": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select `T2.Shop_Name` from the `shop` table instead of `shop_name` from `shops`. Do join `stock AS T1` with `shop AS T2` on `T1.Shop_ID = T2.Shop_ID` instead of querying only the `shops` table. Do add `GROUP BY T1.Shop_ID` to aggregate by shop instead of omitting grouping. Do count `*` instead of `device_id` to include all stock items. The amended query now correctly identifies the shop with the most stock items by joining the stock and shop tables, grouping by shop ID, and counting all stock records."
        ],
        "rules": [
            "1) When answering about \"shop that has the most kind of devices in stock\": make sure the output order: T2.Shop_Name. 2) When the question mentions \"shop name\": \"shop name\" actually means \"T2.Shop_Name\" in schema. 3) When combining T1 and T2 for shared entities: link rows where T1.Shop_ID = T2.Shop_ID exactly as shown in the amends; keep only matching pairs (inner match). 4) When the question asks for \"count of devices in stock\": compute the number of rows using all stock items (count *) per shop. 5) When the question says \"per shop\"/\"by shop\": organize results by T1.Shop_ID and compute requested aggregates per group. 6) When the question mentions \"most\", \"highest\", or \"largest\" by count: rank rows by count in descending direction and keep the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT shop_name FROM shops ORDER BY COUNT(device_id) DESC LIMIT 1;",
            "SELECT T2.Shop_Name\nFROM stock AS T1\nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID\nGROUP BY T1.Shop_ID\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T2.Shop_Name\nFROM stock T1\nINNER JOIN shop T2 ON T1.Shop_ID = T2.Shop_ID\nGROUP BY T1.Shop_ID\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ]
    },
    "6416": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "ground_truth": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT project_id FROM documents GROUP BY project_id HAVING COUNT(*) > 1"
        ],
        "rule_sql": [
            "SELECT Project_ID\nFROM Documents\nGROUP BY Project_ID\nHAVING COUNT(Document_ID) >= 2;"
        ]
    },
    "3194": {
        "db_id": "college_1",
        "question": "What is the course description and number of credits for QM-261?",
        "ground_truth": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "amends": [
            "Do select `crs_credit` and `crs_description` instead of `course_name` and `credits`. Do use table `course` instead of `courses`. Do filter on `crs_code` instead of `course_id` while keeping the same literal value `'QM-261'`. The amended query now correctly retrieves the credit and description fields from the course table using the appropriate code-based filtering.",
            "Do reverse the column order to `crs_credit, crs_description` instead of `crs_description, crs_credit` while maintaining the same `WHERE crs_code = 'QM-261'` filter with identical predicate logic. The amended query now matches RIGHT_SQL's behavior by preserving all semantic elements while adjusting only the presentation order of selected columns."
        ],
        "rules": [
            "1) When the question asks for \"course description\": select \"crs_description\" from table \"course\" (T1). 2) When the question asks for \"number of credits\": select \"crs_credit\" from table \"course\" (T1). 3) When filtering for course \"QM-261\": filter rows where \"crs_code\" equals exactly 'QM-261' (case-sensitive match). 4) When choosing table names: use table \"course\" (T1) instead of \"courses\".",
            "1) When the question asks for \"course description and number of credits\": make sure the output order is \"crs_credit, crs_description\" instead of \"crs_description, crs_credit\". 2) When filtering for course code \"QM-261\": use the exact literal 'QM-261' with the column \"crs_code\" to maintain identical predicate logic."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT course_name, credits FROM courses WHERE course_id = 'QM-261';",
            "SELECT crs_description, crs_credit FROM COURSE WHERE CRS_CODE = 'QM-261';",
            "SELECT crs_credit, crs_description FROM COURSE WHERE crs_code = 'QM-261'"
        ],
        "rule_sql": [
            "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'QM-261'"
        ]
    },
    "3515": {
        "db_id": "hr_1",
        "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.",
        "ground_truth": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "amends": [
            "Do include individual columns `first_name`, `last_name`, `salary`, and `department_id` in the SELECT list instead of concatenating names and omitting individual fields. Do add the aggregate function `MAX(salary)` to the SELECT list instead of using a subquery for maximum salary calculation. Do remove the WHERE clause with the correlated subquery instead of filtering by maximum salary before grouping. Do group by `department_id` to show maximum salary per department instead of incorrectly filtering for global maximum salary. The amended query now correctly displays employee details alongside the maximum salary within each department group, matching the RIGHT_SQL's behavior.",
            "Do use `GROUP BY department_id` with aggregate `MAX(salary)` instead of a window function `MAX(e.salary) OVER (PARTITION BY e.department_id)` and subquery filter. Do include `department_id` in the SELECT list instead of omitting it from the final output. Do remove the WHERE clause with correlated subquery `(SELECT MAX(salary) FROM employees WHERE department_id = e.department_id)` instead of keeping it, as the GROUP BY approach directly provides the maximum salary per department. Do remove the ORDER BY clause `ORDER BY e.department_id` instead of keeping it, as the grouping inherently organizes results by department. The amended query now correctly identifies maximum salaries per department using efficient aggregation instead of window functions with redundant filtering.",
            "Do include all non-aggregated columns `first_name`, `last_name`, and `salary` in the GROUP BY clause instead of omitting them, which would cause incorrect aggregation behavior. Do maintain the `department_id` grouping column and `MAX(salary)` aggregate function as originally specified. The amended query now properly groups by all non-aggregated columns and matches the RIGHT_SQL's behavior.",
            "Do select `first_name`, `last_name`, `salary`, `department_id` instead of including `e.department_id` twice and using table aliases. Do remove the `max_salary` alias instead of keeping it. Do group by only `department_id` instead of grouping by all non-aggregated columns including `first_name`, `last_name`, and `salary`. Do remove the HAVING clause `e.salary = MAX(e.salary)` instead of including it, as the MAX aggregate already provides the maximum salary per department. The amended query now correctly returns the maximum salary for each department along with associated employee details without the redundant filtering and excessive grouping.",
            "Do include all non-aggregated columns `first_name`, `last_name`, and `salary` in the GROUP BY clause instead of omitting them, which would cause incorrect aggregation behavior. Do maintain the `department_id` grouping column and `MAX(salary)` aggregate function as originally specified. The amended query now properly groups by all non-aggregated columns to ensure correct results that match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_id, first_name || ' ' || last_name AS full_name, salary\nFROM employees\nWHERE salary = (SELECT MAX(salary) FROM employees)\nGROUP BY department_id;",
            "SELECT e.department_id, e.first_name, e.last_name, e.salary, MAX(e.salary) OVER (PARTITION BY e.department_id) as max_salary\nFROM employees e\nWHERE e.salary = (SELECT MAX(salary) FROM employees WHERE department_id = e.department_id)\nORDER BY e.department_id;",
            "SELECT department_id, first_name, last_name, salary, MAX(salary) \nFROM employees \nGROUP BY department_id",
            "SELECT \n    e.department_id,\n    e.first_name,\n    e.last_name,\n    e.salary,\n    MAX(e.salary) as max_salary\nFROM \n    employees e\nGROUP BY \n    e.department_id, e.first_name, e.last_name, e.salary\nHAVING \n    e.salary = MAX(e.salary)",
            "SELECT department_id, first_name, last_name, salary, MAX(salary) \nFROM employees \nGROUP BY department_id",
            "SELECT department_id, first_name, last_name, salary, MAX(salary) \nFROM employees \nGROUP BY department_id, first_name, last_name, salary"
        ],
        "rule_sql": []
    },
    "4723": {
        "db_id": "department_store",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "ground_truth": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference `customer_name`, `customer_phone`, and `customer_email` instead of `name`, `phone`, and `email` in the SELECT list. Do join `customer_orders` table instead of `orders` table as the source. Do use `T1.customer_id = T2.customer_id` instead of `c.customer_id = o.customer_id` for the join condition. Do group by `T2.customer_id` instead of `c.customer_id` to properly aggregate by the joined table's identifier. Do use `count(*)` instead of `COUNT(o.order_id)` to count all rows in the group rather than specific non-null values. The amended query now correctly identifies the customer with the most orders by properly joining the customer_orders table and counting all order records per customer."
        ],
        "rules": [
            "1) When selecting customer information: use exact column names \"customer_name\", \"customer_phone\", and \"customer_email\" from the Customers table instead of generic names like name, phone, and email. 2) When counting orders per customer: join the customer_orders table (T2) to Customers table (T1) using the condition T1.customer_id = T2.customer_id to link customer records with their orders. 3) When grouping for aggregation: group by T2.customer_id to properly count orders from the joined customer_orders table. 4) When counting the number of orders: use count(*) to count all rows in each group rather than counting specific non-null values from a particular column. 5) When finding the customer with the largest number of orders: rank customers by their order count in descending order and keep only the top result."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT c.name, c.phone, c.email \nFROM customers c \nJOIN orders o ON c.customer_id = o.customer_id \nGROUP BY c.customer_id \nORDER BY COUNT(o.order_id) DESC \nLIMIT 1;",
            "SELECT c.customer_name, c.customer_phone, c.customer_email\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": [
            "SELECT c.customer_name, c.customer_phone, c.customer_email\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nGROUP BY co.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "4178": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the document type name for the document with name \"How to read a book\"?",
        "ground_truth": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"",
        "amends": [
            "Do select `T2.document_type_name` from the joined table instead of `document_type_name` directly from the documents table. Do use `FROM All_documents AS T1 JOIN Ref_document_types AS T2` instead of just `FROM documents`, adding the required join between tables. Do specify the join condition `ON T1.document_type_code = T2.document_type_code` instead of missing the table relationship entirely. Do filter on `T1.document_name = \"How to read a book\"` instead of `name = 'How to read a book'`, using the correct column name and table alias. The amended query now correctly retrieves document type names through proper table relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about document type name for a specific document: make sure the output order: T2.document_type_name. 2) When the question mentions \"document with name\": \"name\" actually means \"T1.document_name\" in schema. 3) When the question mentions \"How to read a book\": use the exact literal \"How to read a book\" with double quotes. 4) When combining All_documents as T1 and Ref_document_types as T2: link rows where T1.document_type_code = T2.document_type_code and keep only matching pairs (inner match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT document_type_name FROM documents WHERE name = 'How to read a book';",
            "SELECT T2.Document_Type_Name \nFROM All_Documents AS T1 \nJOIN Ref_Document_Types AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code \nWHERE T1.Document_Name = 'How to read a book'"
        ],
        "rule_sql": [
            "SELECT T2.document_type_name \nFROM All_Documents T1\nINNER JOIN Ref_Document_Types T2 ON T1.document_type_code = T2.document_type_code\nWHERE T1.document_name = 'How to read a book'"
        ]
    },
    "1390": {
        "db_id": "college_2",
        "question": "Find the name of the students who have more than one advisor?",
        "ground_truth": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "amends": [
            "Do add table `student AS T1` and `advisor AS T2` in the FROM clause instead of only referencing `students`. Do use `JOIN` with `ON T1.id = T2.s_id` instead of no join condition. Do change the SELECT list to `T1.name` instead of just `name`. Do remove the WHERE clause filter `advisor_count > 1` instead of keeping it. Do add GROUP BY `T2.s_id` instead of omitting grouping. Do move the count filter to HAVING `count(*) > 1` instead of using WHERE with a non-existent column. The amended query now correctly counts advisor relationships per student and filters for those with more than one advisor, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"students who have more than one advisor\": make sure the output order: T1.name. 2) When combining T1 (student) and T2 (advisor) for shared entities: link rows where T1.id = T2.s_id and keep only matching pairs (inner match). 3) When the question asks for \"count of advisors per student\": compute the number of rows using the grouping key T2.s_id. 4) When filtering for students with more than one advisor: apply the condition count(*) > 1 after grouping. 5) When selecting student names: use T1.name instead of just name to specify the exact table source."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM students WHERE advisor_count > 1;",
            "SELECT T1.name\nFROM student AS T1\nJOIN advisor AS T2 ON T1.ID = T2.s_ID\nGROUP BY T2.s_ID\nHAVING COUNT(*) > 1"
        ],
        "rule_sql": [
            "SELECT T1.name\nFROM student T1\nJOIN advisor T2 ON T1.ID = T2.s_ID\nGROUP BY T2.s_ID\nHAVING COUNT(*) > 1\nORDER BY T1.name"
        ]
    },
    "2279": {
        "db_id": "entrepreneur",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "ground_truth": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "amends": [
            "Do join `entrepreneur` AS `T1` with `people` AS `T2` on `T1.People_ID = T2.People_ID` instead of querying only the `entrepreneurs` table. Do select `T2.Name` from the joined `people` table instead of selecting `name` directly from the entrepreneurs table. Do order by `T2.Weight` from the people table instead of ordering by `weight` from the entrepreneurs table. The amended query now correctly retrieves the entrepreneur's name from the people table while ordering by the weight attribute from the same table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"the name of the entrepreneur with the greatest weight\": make sure the output order: T2.Name. 2) When combining entrepreneur and people tables: link rows where T1.People_ID = T2.People_ID and keep only matching pairs (inner match). 3) When the question mentions \"greatest weight\": rank rows by T2.Weight in descending order and keep the first 1 row. 4) When selecting the entrepreneur's name: select T2.Name from the people table instead of name from the entrepreneurs table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM entrepreneurs ORDER BY weight DESC LIMIT 1;",
            "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
        ],
        "rule_sql": [
            "SELECT T2.Name\nFROM entrepreneur T1\nINNER JOIN people T2 ON T1.People_ID = T2.People_ID\nORDER BY T2.Weight DESC\nLIMIT 1"
        ]
    },
    "6392": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids and details of all statements?",
        "ground_truth": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM statements;"
        ],
        "rule_sql": [
            "SELECT Statement_ID, Statement_Details FROM Statements;"
        ]
    },
    "3487": {
        "db_id": "hr_1",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "ground_truth": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "amends": [
            "Do use `GROUP BY department_id, manager_id` instead of the subquery approach with `WHERE manager_id IN`. Do add `HAVING COUNT(employee_id) >= 4` instead of the subquery's `HAVING COUNT(*) >= 4`. Do remove the subquery entirely instead of keeping it as a correlated filter. The amended query now correctly groups by both department and manager to find departments with managers having at least 4 employees, matching the right SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for unique department ids where managers have 4 or more employees: group by both department_id and manager_id to find managers with their employee counts per department. 2) When counting employees per manager within departments: use COUNT(employee_id) instead of COUNT(*) to count individual employees. 3) When filtering for managers with 4 or more employees: apply HAVING COUNT(employee_id) >= 4 after grouping to find qualifying managers. 4) When selecting unique department ids: use DISTINCT department_id to return each qualifying department only once."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT department_id FROM employees WHERE manager_id IN (SELECT manager_id FROM employees GROUP BY manager_id HAVING COUNT(*) >= 4)",
            "SELECT DISTINCT department_id \nFROM employees \nWHERE manager_id IS NOT NULL \nGROUP BY department_id, manager_id \nHAVING COUNT(employee_id) >= 4"
        ],
        "rule_sql": [
            "SELECT DISTINCT e.DEPARTMENT_ID\nFROM employees e\nWHERE e.MANAGER_ID IS NOT NULL\nGROUP BY e.DEPARTMENT_ID, e.MANAGER_ID\nHAVING COUNT(e.EMPLOYEE_ID) >= 4"
        ]
    },
    "5575": {
        "db_id": "products_gen_characteristics",
        "question": "How many products have the color description 'red' and the characteristic name 'slow'?",
        "ground_truth": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
        "amends": [
            "Do add joins to `product_characteristics`, `CHARACTERISTICS`, and `ref_colors` tables instead of querying only the `products` table. Do use `JOIN` with `t1.product_id = t2.product_id` and `t2.characteristic_id = t3.characteristic_id` instead of missing these table relationships. Do add `t1.color_code = t4.color_code` join condition instead of omitting the color reference table connection. Do reference `t4.color_description` and `t3.characteristic_name` in the WHERE clause instead of directly using `color_description` and `characteristic_name` from the products table. Do use double quotes around string literals instead of single quotes for consistency. The amended query now correctly joins all necessary tables to establish the proper relationships between products, their characteristics, and color references."
        ],
        "rules": [
            "1) When answering about products with specific color and characteristic: join table \"products\" as T1 with \"product_characteristics\" as T2 using T1.\"product_id\" = T2.\"product_id\", then join with \"Characteristics\" as T3 using T2.\"characteristic_id\" = T3.\"characteristic_id\", and join with \"ref_colors\" as T4 using T1.\"color_code\" = T4.\"color_code\". 2) When the question mentions color description 'red': use T4.\"color_description\" = \"red\" instead of direct column access. 3) When the question mentions characteristic name 'slow': use T3.\"characteristic_name\" = \"slow\" instead of direct column access. 4) When counting products: count using T1.\"product_id\" as the canonical key instead of counting all rows. 5) When handling string literals: use double quotes around \"red\" and \"slow\" instead of single quotes."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE color_description = 'red' AND characteristic_name = 'slow';",
            "SELECT COUNT(*) \nFROM Products t1\nJOIN Product_Characteristics t2 ON t1.product_id = t2.product_id\nJOIN Characteristics t3 ON t2.characteristic_id = t3.characteristic_id\nJOIN Ref_Colors t4 ON t1.color_code = t4.color_code\nWHERE t4.color_description = \"red\" AND t3.characteristic_name = \"slow\""
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT T1.product_id) \nFROM Products AS T1\nJOIN Product_Characteristics AS T2 ON T1.product_id = T2.product_id\nJOIN Characteristics AS T3 ON T2.characteristic_id = T3.characteristic_id\nJOIN Ref_Colors AS T4 ON T1.color_code = T4.color_code\nWHERE T4.color_description = \"red\" AND T3.characteristic_name = \"slow\""
        ]
    },
    "6733": {
        "db_id": "activity_1",
        "question": "Show the first name and last name for all the instructors.",
        "ground_truth": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "amends": [
            "Do select columns `fname` and `lname` instead of `first_name` and `last_name`. Do query from table `Faculty` instead of `students`. Do add filter `WHERE Rank = \"Instructor\"` instead of omitting any filtering condition. The amended query now correctly retrieves instructor names from the Faculty table instead of all student names."
        ],
        "rules": [
            "1) When the question asks for \"first name\" and \"last name\": use the exact column tokens \"fname\" and \"lname\" respectively. 2) When the question asks about instructors: query from the \"Faculty\" table instead of any other table. 3) When retrieving instructor information: filter rows where \"Rank\" equals exactly \"Instructor\" (case-sensitive match)."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT first_name, last_name FROM students;",
            "SELECT Fname, Lname FROM Faculty WHERE Rank = 'Instructor';"
        ],
        "rule_sql": [
            "SELECT fname, lname FROM Faculty WHERE Rank = 'Instructor';"
        ]
    },
    "1513": {
        "db_id": "insurance_and_eClaims",
        "question": "Find all the policy types that are used by more than 2 customers.",
        "ground_truth": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "amends": [
            "Do select `policy_type_code` from the `policies` table instead of `policy_type` from the `customers` table. Do group by `policy_type_code` instead of `policy_type`. The amended query now correctly identifies policy types from the policies table and matches the right SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for policy types: use \"policy_type_code\" from the \"policies\" table instead of \"policy_type\" from the \"customers\" table. 2) When grouping by policy types: group by \"policy_type_code\" from the \"policies\" table. 3) When counting customers per policy type: count the number of customers associated with each \"policy_type_code\" from the \"policies\" table. 4) When filtering for policy types used by more than 2 customers: include only policy types where the customer count is greater than 2."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT policy_type, COUNT(*) FROM customers GROUP BY policy_type HAVING COUNT(*) > 2",
            "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING COUNT(DISTINCT Customer_ID) > 2"
        ],
        "rule_sql": [
            "SELECT Policy_Type_Code, COUNT(DISTINCT Customer_ID) AS Customer_Count\nFROM Policies\nGROUP BY Policy_Type_Code\nHAVING COUNT(DISTINCT Customer_ID) > 2;"
        ]
    },
    "296": {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "ground_truth": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "amends": [
            "Do add table `user_profiles AS T1` and `tweets AS T2` with a `JOIN` on `T1.uid = T2.uid` instead of querying only `users` table. Do change the SELECT list to `T1.name` and `T1.partitionid` instead of `name` and `partition_id`. Do remove the WHERE clause filter `tweet_count > 2` instead of keeping it. Do add GROUP BY `T2.uid` and HAVING `count(*) < 2` instead of omitting aggregation. The amended query now correctly filters users based on tweet count using proper table joins and aggregation."
        ],
        "rules": [
            "1) When answering about \"users who tweeted less than twice\": use tables user_profiles AS T1 and tweets AS T2 with a join on T1.uid = T2.uid instead of querying only the users table. 2) When selecting output columns: use T1.name and T1.partitionid instead of name and partition_id. 3) When filtering by tweet count: remove the WHERE clause filter tweet_count > 2 and instead use GROUP BY T2.uid with HAVING count(*) < 2 to count tweets per user. 4) When combining T1 and T2 for shared entities: link rows where T1.uid = T2.uid and keep only matching pairs (inner match). 5) When counting tweets per user: use count(*) on the tweets table grouped by uid to determine users with less than 2 tweets."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, partition_id FROM users WHERE tweet_count > 2;",
            "SELECT T1.name, T1.partitionid\nFROM user_profiles AS T1\nJOIN tweets AS T2 ON T1.uid = T2.uid\nGROUP BY T2.uid\nHAVING COUNT(*) < 2"
        ],
        "rule_sql": [
            "SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2"
        ]
    },
    "3704": {
        "db_id": "baseball_1",
        "question": "Which states have more than 2 parks?",
        "ground_truth": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "amends": [
            "Do reference table `park` instead of `parks` in the FROM clause. Do remove the `COUNT(*)` column from the SELECT list instead of including it, as the query only needs to return the state values that meet the grouping condition. The amended query now correctly identifies states with more than two parks by grouping on state and filtering with HAVING count(*) > 2, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks about \"parks\": use the exact table name \"park\" from the schema instead of \"parks\". 2) When counting entities in the \"park\" table: count all rows using the canonical counting method (count(*)) since no specific key is provided in the schema. 3) When grouping by state to find states with more than 2 parks: group by the \"state\" column and filter groups where the count exceeds 2. 4) When the question only asks for state names that meet the condition: return only the \"state\" column in the output, not the count values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT state, COUNT(*) FROM parks GROUP BY state HAVING COUNT(*) > 2",
            "SELECT state FROM park GROUP BY state HAVING COUNT(*) > 2"
        ],
        "rule_sql": [
            "SELECT state FROM park GROUP BY state HAVING COUNT(*) > 2;"
        ]
    },
    "5834": {
        "db_id": "workshop_paper",
        "question": "Show the result of the submission with the highest score.",
        "ground_truth": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
        "amends": [
            "Do select `T1.Result` instead of `*` to retrieve only the acceptance result instead of all columns. Do join `acceptance AS T1` with `submission AS T2` on `T1.Submission_ID = T2.Submission_ID` instead of querying only `submissions` table without any joins. Do order by `T2.Scores DESC` instead of `score ASC` to get the highest score instead of the lowest. The amended query now correctly retrieves the result from the highest-scoring submission by joining acceptance and submission tables with proper column references."
        ],
        "rules": [
            "1) When answering about \"the result of the submission with the highest score\": make sure the output order: T1.Result 2) When combining T1 and T2 for shared entities: link rows where T1.Submission_ID = T2.Submission_ID; keep only matching pairs (inner match). 3) When the question mentions \"highest score\": rank rows by T2.Scores in descending order and keep the first 1 row."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM submissions ORDER BY score ASC LIMIT 1;",
            "SELECT T1.Result \nFROM acceptance AS T1 \nJOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID \nORDER BY T2.Scores DESC \nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.Result\nFROM Acceptance T1\nINNER JOIN submission T2 ON T1.Submission_ID = T2.Submission_ID\nORDER BY T2.Scores DESC\nLIMIT 1"
        ]
    },
    "155": {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "ground_truth": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "amends": [
            "Do select `T1.id` instead of `trip_id` and use proper table aliasing. Do join `trip AS T1` with `weather AS T2` on `T1.zip_code = T2.zip_code` instead of using a subquery with `IN`. Do add `GROUP BY T2.zip_code` and move the temperature filter to `HAVING avg(T2.mean_temperature_f) > 60` instead of using `WHERE temperature > 60` in a subquery. Do reference the correct column `mean_temperature_f` instead of `temperature` and use the aggregate function `avg()` instead of direct comparison. The amended query now correctly groups by zip code and filters based on average temperature rather than individual temperature readings, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about trips in zip codes with average temperature above 60: make sure the output order: T1.id\n2) When combining trip table as T1 and weather table as T2: link rows where T1.zip_code = T2.zip_code and keep only matching pairs (inner match).\n3) When the question mentions \"average mean temperature above 60\": compute the average of T2.mean_temperature_f per zip code and filter for groups where this average is greater than 60.\n4) When grouping by zip code for temperature analysis: organize results by T2.zip_code and compute the requested aggregate per group.\n5) When referring to trip identifiers: use T1.id instead of trip_id as the exact column token.\n6) When handling temperature data: use T2.mean_temperature_f instead of temperature as the exact column token."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT trip_id FROM trips WHERE zip_code IN (SELECT zip_code FROM weather WHERE temperature > 60);",
            "SELECT T1.id\nFROM trip AS T1\nJOIN weather AS T2 ON T1.zip_code = T2.zip_code\nGROUP BY T2.zip_code\nHAVING AVG(T2.mean_temperature_f) > 60"
        ],
        "rule_sql": [
            "SELECT T1.id\nFROM trip T1\nINNER JOIN weather T2 ON T1.zip_code = T2.zip_code\nGROUP BY T2.zip_code\nHAVING AVG(T2.mean_temperature_f) > 60\nORDER BY T1.id"
        ]
    },
    "1191": {
        "db_id": "election_representative",
        "question": "List the names of representatives that have not participated in elections listed here.",
        "ground_truth": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
        "amends": [
            "Do reference the `Name` column instead of `name` and use table `representative` instead of `representatives`. Do reference the `Representative_ID` column instead of `representative_id` and use table `election` instead of `elections` in the subquery. The amended query now correctly matches the intended logic with proper table and column references."
        ],
        "rules": [
            "1) When answering about \"representatives that have not participated in elections\": make sure the output order: \"Name\" from table \"representative\". 2) When the question mentions \"representatives\": \"representatives\" actually means table \"representative\" with column \"Name\". 3) When the question mentions \"elections\": \"elections\" actually means table \"election\" with column \"Representative_ID\". 4) When checking for non-participation in elections: use the exact key equality \"Representative_ID\" from \"representative\" to match against \"Representative_ID\" from \"election\" and exclude matching pairs."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM representatives WHERE representative_id NOT IN (SELECT representative_id FROM elections);",
            "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
        ],
        "rule_sql": [
            "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT DISTINCT Representative_ID FROM election) ORDER BY Name;"
        ]
    },
    "2274": {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs.",
        "ground_truth": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "amends": [
            "Do select only `T2.Name` instead of all columns with `*`. Do add a `JOIN` between `entrepreneur` as `T1` and `people` as `T2` instead of querying only `entrepreneurs`. Do use the join condition `T1.People_ID = T2.People_ID` instead of no join condition. The amended query now correctly retrieves entrepreneur names from the related people table instead of all columns from a single table."
        ],
        "rules": [
            "1) When selecting entrepreneur names: use T2.Name instead of all columns with * 2) When retrieving entrepreneur information: join entrepreneur as T1 with people as T2 using T1.People_ID = T2.People_ID instead of querying only the entrepreneurs table 3) When the question asks for names of entrepreneurs: the names are stored in the people table (T2.Name) rather than the entrepreneur table"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM entrepreneurs;",
            "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"
        ],
        "rule_sql": [
            "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"
        ]
    },
    "6378": {
        "db_id": "flight_company",
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "ground_truth": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
        "amends": [
            "Do reference the table as `airport` instead of `airports a` and use column `id` instead of `airport_id` in the main query. Do remove the unnecessary `DISTINCT` keyword and eliminate the join with `pilots` table in the subquery. Do reference the table as `flight` instead of `flights f` and use column `pilot` instead of `pilot_id` with direct value comparison to `'Thompson'` instead of joining through the pilots table. Do use column `airport_id` in the subquery's SELECT instead of `f.departure_airport_id`. The amended query now correctly counts airports that have no flights with pilot 'Thompson' by simplifying the logic and removing unnecessary table joins."
        ],
        "rules": [
            "1) When answering about airports that haven't had pilot 'Thompson': use table \"airport\" with column \"id\" as the counting key instead of \"airports a\" with \"airport_id\". 2) When checking for flights with pilot 'Thompson': use table \"flight\" with column \"pilot\" directly compared to literal 'Thompson' instead of joining through pilots table. 3) When selecting departure airports in subquery: use column \"airport_id\" from \"flight\" table instead of \"f.departure_airport_id\". 4) When counting distinct airports: do not use DISTINCT keyword in subquery as it is unnecessary for the NOT IN operation. 5) When combining airport and flight data: use inner logic where airport.id NOT IN (SELECT airport_id FROM flight WHERE pilot = 'Thompson') to find airports without Thompson's flights."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM airports a\nWHERE a.airport_id NOT IN (\n    SELECT DISTINCT f.departure_airport_id \n    FROM flights f\n    JOIN pilots p ON f.pilot_id = p.pilot_id\n    WHERE p.name = 'Thompson'\n)",
            "SELECT COUNT(*) \nFROM airport \nWHERE id NOT IN (\n    SELECT airport_id \n    FROM flight \n    WHERE pilot = 'Thompson'\n)"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM airport WHERE id NOT IN (SELECT airport_id FROM flight WHERE pilot = 'Thompson');"
        ]
    },
    "5277": {
        "db_id": "manufactory_1",
        "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
        "ground_truth": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
        "amends": [
            "Do use column `headquarter` instead of `headquarters` in the SELECT list. Do change the sort direction to `DESC` instead of `ASC` in the ORDER BY clause. The amended query now correctly selects the headquarter column and orders results by revenue in descending order, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for \"headquarters\": use the exact column token \"headquarter\" instead of \"headquarters\" in the output. 2) When ordering by revenue descending: sort rows by the revenue column in descending order (highest to lowest) rather than ascending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, headquarters FROM manufacturers ORDER BY revenue ASC;",
            "SELECT Name, Headquarter FROM Manufacturers ORDER BY Revenue DESC;"
        ],
        "rule_sql": [
            "SELECT Name, Headquarter FROM Manufacturers ORDER BY Revenue DESC;"
        ]
    },
    "2599": {
        "db_id": "inn_1",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "ground_truth": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
        "amends": [
            "Do use table name `Rooms` instead of `rooms` and column `maxOccupancy` instead of `capacity` in the SELECT clause. Do filter on column `decor` instead of `room_type` in the WHERE clause while maintaining the same filter value 'modern'. The amended query now correctly calculates the sum of maximum occupancy for modern-decorated rooms instead of summing capacity from a potentially incorrect table and column structure."
        ],
        "rules": [
            "1) When answering about \"how many people in total can stay in the modern rooms\": make sure the output order: sum of maxOccupancy. 2) When the question mentions \"modern rooms\": \"modern\" actually means \"decor = 'modern'\" in schema. 3) When the question mentions \"people can stay\": \"capacity\" actually means \"maxOccupancy\" in schema. 4) When the question asks for \"total\": compute the sum of the exact token \"maxOccupancy\". 5) When filtering for modern rooms: use the exact literal value 'modern' with exact case and spacing for the decor column."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(capacity) FROM rooms WHERE room_type = 'modern';",
            "SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = 'modern';"
        ],
        "rule_sql": [
            "SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = 'modern';"
        ]
    },
    "3526": {
        "db_id": "hr_1",
        "question": "What are the department names and how many employees work in each of them?",
        "ground_truth": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "amends": [
            "Do add `JOIN departments AS T2 ON T1.department_id = T2.department_id` instead of querying only the `employees` table, which lacked the necessary department_name column. Do use `employees AS T1` to alias the table for clarity in the join condition instead of referencing it directly without an alias. The amended query now correctly joins the employees and departments tables to access the department_name column from the departments table instead of attempting to group by a non-existent column in the employees table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"department names and how many employees work in each of them\": make sure the output order: department_name, count of employees. 2) When the question mentions \"department names\": \"department names\" actually means \"T2.department_name in schema\". 3) When the question asks for \"how many employees work in each department\": compute the number of rows using the canonical key token for employees (T1.employee_id). 4) When combining T1 (employees) and T2 (departments) for shared entities: link rows where T1.department_id = T2.department_id; keep only matching pairs (inner match). 5) When the question says \"per department\"/\"by department\": organize results by T2.department_name and compute employee count per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT department_name, COUNT(*) FROM employees GROUP BY department_name;",
            "SELECT T2.DEPARTMENT_NAME, COUNT(T1.EMPLOYEE_ID) AS employee_count\nFROM employees AS T1\nJOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID\nGROUP BY T2.DEPARTMENT_NAME"
        ],
        "rule_sql": [
            "SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) \nFROM departments d \nINNER JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID \nGROUP BY d.DEPARTMENT_NAME \nORDER BY d.DEPARTMENT_NAME"
        ]
    },
    "1052": {
        "db_id": "match_season",
        "question": "How many countries are there in total?",
        "ground_truth": "SELECT count(*) FROM country",
        "amends": [
            "Do reference the `country` table instead of the `countries` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)`. Do remove the `WHERE population > 1000000000` filter instead of keeping it. The amended query now correctly counts all records in the country table without any population filter."
        ],
        "rules": [
            "1) When the question asks about \"countries\": use the exact table name \"country\" instead of \"countries\". 2) When counting all records in a table: use lowercase \"count(*)\" without any filtering conditions. 3) When the question asks for total count of entities: remove any population or other filters that would restrict the count."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM countries WHERE population > 1000000000;",
            "SELECT count(*) FROM country;"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM country;"
        ]
    },
    "3064": {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "ground_truth": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "amends": [
            "Do select `cust_name` and `acc_type` instead of `name` and `account_balance`. Do use table aliases `T1` and `T2` instead of `c` and `l`. Do reference `customer` and `loan` tables instead of `customers` and `loans`. Do join on `cust_id` instead of `customer_id`. Do add `GROUP BY T1.cust_name` instead of omitting grouping. Do move the amount filter to `HAVING sum(T2.amount) > 5000` instead of `WHERE l.amount > 5000` to filter the aggregated total rather than individual loans. The amended query now correctly calculates the total loan amount per customer and filters for those whose cumulative loans exceed 5000, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for customer name and account balance: select \"cust_name\" and \"acc_type\" from table \"customer\" (aliased as T1) instead of \"name\" and \"account_balance\". 2) When combining customer and loan tables: use table aliases T1 for \"customer\" and T2 for \"loan\" instead of c and l. 3) When joining customer and loan tables: link rows where T1.\"cust_id\" = T2.\"cust_id\" instead of customer_id. 4) When calculating total loan amount per customer: organize results by T1.\"cust_name\" and compute sum of T2.\"amount\" per group. 5) When filtering for customers with total loan amount over 5000: apply the condition sum(T2.\"amount\") > 5000 after grouping instead of filtering individual loan amounts before aggregation."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name, c.account_balance FROM customers c JOIN loans l ON c.customer_id = l.customer_id WHERE l.amount > 5000;",
            "SELECT T1.cust_name, T1.acc_type\nFROM customer T1\nJOIN loan T2 ON T1.cust_ID = T2.cust_ID\nGROUP BY T1.cust_name\nHAVING SUM(T2.amount) > 5000"
        ],
        "rule_sql": [
            "SELECT T1.cust_name, T1.acc_bal FROM customer T1 JOIN loan T2 ON T1.cust_ID = T2.cust_ID GROUP BY T1.cust_ID HAVING SUM(T2.amount) > 5000"
        ]
    },
    "1068": {
        "db_id": "match_season",
        "question": "Show the players and the years played.",
        "ground_truth": "SELECT Player ,  Years_Played FROM player",
        "amends": [
            "Do use column name `Player` instead of `player_name` and `Years_Played` instead of `year_played` in the SELECT list. Do reference table `player` instead of `players` in the FROM clause. Do remove the WHERE filter `year_played > 2023` instead of keeping it. The amended query now matches the RIGHT_SQL's behavior by selecting all records without filtering."
        ],
        "rules": [
            "1) When the question asks for \"players\": use the exact column name \"Player\" from table \"player\". 2) When the question asks for \"years played\": use the exact column name \"Years_Played\" from table \"player\". 3) When the question does not specify any filtering conditions: do not apply any WHERE filters and return all records from the table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT player_name, year_played FROM players WHERE year_played > 2023;",
            "SELECT Player, Years_Played FROM player;"
        ],
        "rule_sql": [
            "SELECT Player, Years_Played FROM player;"
        ]
    },
    "6557": {
        "db_id": "wine_1",
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "ground_truth": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
        "amends": [
            "Do reference the table as `WINE` instead of `wines` and use column names `Name` and `Price` instead of `w.name` and `w.price`. Do use double quotes for the string literal `\"John Anthony\"` instead of single quotes. Do maintain the same subquery structure with `min(Price)` instead of `MIN(price)` but correct the table reference to `wine` instead of `wines` in the subquery. The amended query now correctly references the proper table and column names while preserving the same logical comparison of wine prices against the minimum price from John Anthony winery."
        ],
        "rules": [
            "1) When referencing the wine table: use the exact table name \"WINE\" instead of \"wines\". 2) When selecting wine names: use the exact column name \"Name\" instead of \"w.name\". 3) When comparing wine prices: use the exact column name \"Price\" instead of \"w.price\". 4) When filtering for John Anthony winery: use the exact string literal \"John Anthony\" with double quotes instead of single quotes. 5) When calculating minimum price in subqueries: use the exact function \"min(Price)\" with proper capitalization. 6) When referencing tables in subqueries: use the exact table name \"WINE\" consistently throughout all query parts."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT w.name \nFROM wines w \nWHERE w.price > (SELECT MIN(price) FROM wines WHERE winery = 'John Anthony')",
            "SELECT DISTINCT Name FROM wine WHERE Price > (SELECT MIN(Price) FROM wine WHERE Winery = \"John Anthony\")"
        ],
        "rule_sql": [
            "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM WINE WHERE Winery = \"John Anthony\")"
        ]
    },
    "403": {
        "db_id": "flight_1",
        "question": "Show all origins and the number of flights from each origin.",
        "ground_truth": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "amends": [
            "Do specify `origin` in the SELECT list instead of `destination` to match the GROUP BY clause. Do group by `origin` instead of `destination` to ensure the aggregation aligns with the selected column. Do use the correct table name `Flight` instead of `flights` to reference the proper data source. The amended query now correctly counts flights by their origin rather than incorrectly grouping by destination while selecting origin."
        ],
        "rules": [
            "1) When the question asks to show origins and count flights from each origin: group results by the exact column \"origin\" from table \"flight\". 2) When counting flights per origin: count using the canonical key for flights (each row represents a flight). 3) When selecting output columns: include \"origin\" and the count of flights in that order. 4) When referring to the table containing flight data: use the exact table name \"flight\" (not \"flights\"). 5) When grouping by origin: ensure the SELECT list includes \"origin\" to match the GROUP BY clause."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT origin, COUNT(*) FROM flights GROUP BY destination;",
            "SELECT origin, COUNT(*) AS number_of_flights FROM flight GROUP BY origin;"
        ],
        "rule_sql": [
            "SELECT origin, COUNT(flno) FROM flight GROUP BY origin;"
        ]
    },
    "5172": {
        "db_id": "music_2",
        "question": "How many bands are there?",
        "ground_truth": "SELECT count(*) FROM Band",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM albums;"
        ],
        "rule_sql": [
            "SELECT COUNT(*) FROM Band;"
        ]
    },
    "5781": {
        "db_id": "customer_complaints",
        "question": "Return the phone number of the customer who filed the complaint that was raised most recently.",
        "ground_truth": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "amends": [
            "Do specify the table alias `t1` for `phone_number` instead of using the bare column name. Do add a `JOIN` with the `complaints` table as `t2` instead of querying only the `customers` table. Do use the join condition `ON t1.customer_id = t2.customer_id` instead of having no join. Do order by `t2.date_complaint_raised DESC` instead of `complaint_date DESC` to reference the correct column from the joined table. The amended query now correctly retrieves the phone number from the customer who has the most recent complaint by joining the relevant tables and using the proper date column for ordering."
        ],
        "rules": [
            "1) When answering about \"phone number of the customer who filed the complaint that was raised most recently\": make sure the output order: phone_number. 2) When the question mentions \"customer who filed the complaint\": use table alias t1 for customers table and t2 for complaints table. 3) When combining t1 and t2 for shared entities: link rows where t1.customer_id = t2.customer_id; keep only matching pairs (inner match). 4) When the question mentions \"most recently\": order by t2.date_complaint_raised DESC and keep the first 1 row. 5) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT phone_number FROM customers ORDER BY complaint_date DESC LIMIT 1;",
            "SELECT t1.phone_number \nFROM Customers t1\nJOIN Complaints t2 ON t1.customer_id = t2.customer_id\nORDER BY t2.date_complaint_raised DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT t1.phone_number FROM Customers t1 INNER JOIN Complaints t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
        ]
    },
    "1168": {
        "db_id": "body_builder",
        "question": "List the names and origins of people who are not body builders.",
        "ground_truth": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
        "amends": [
            "Do select `Name` and `birth_place` instead of `name` and `origin`. Do use `EXCEPT` to exclude body builders instead of filtering with `WHERE occupation = 'body builder'`. Do add a subquery with `JOIN` on `body_builder` table using `people_id = people_id` instead of omitting this exclusion logic. Do reference the table with alias `T1` instead of using the base table name directly. The amended query now correctly excludes body builders by using set operations rather than incorrect inclusion filtering."
        ],
        "rules": [
            "1) When the question asks for \"names and origins\" of people: use columns \"Name\" and \"birth_place\" instead of \"name\" and \"origin\". 2) When excluding body builders from the results: use EXCEPT operation with a subquery that joins the body_builder table using people_id = people_id instead of filtering with WHERE occupation = 'body builder'. 3) When referencing the people table: use alias T1 instead of the base table name directly."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, origin FROM people WHERE occupation = 'body builder';",
            "SELECT Name, Birth_Place FROM people AS T1 EXCEPT SELECT T1.Name, T1.Birth_Place FROM people AS T1 JOIN body_builder ON T1.People_ID = body_builder.People_ID"
        ],
        "rule_sql": [
            "SELECT T1.Name, T1.Birth_Place FROM people T1 EXCEPT SELECT T1.Name, T1.Birth_Place FROM people T1 JOIN body_builder ON T1.People_ID = body_builder.People_ID"
        ]
    },
    "1766": {
        "db_id": "gymnast",
        "question": "List the names of gymnasts in ascending order by their heights.",
        "ground_truth": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
        "amends": [
            "Do select `T2.Name` from the `people` table instead of `name` from the `gymnasts` table. Do join `gymnast AS T1` with `people AS T2` on `T1.Gymnast_ID = T2.People_ID` instead of querying only the `gymnasts` table. Do order by `T2.Height ASC` instead of `height DESC` to sort in ascending rather than descending order. The amended query now correctly retrieves gymnast names from the people table via proper table joining and applies the intended sorting order."
        ],
        "rules": [
            "1) When answering about \"names of gymnasts\": select \"T2.Name\" from the \"people\" table instead of \"name\" from the \"gymnasts\" table. 2) When combining \"gymnast\" as T1 and \"people\" as T2: link rows where \"T1.Gymnast_ID = T2.People_ID\" and keep only matching pairs (inner match). 3) When ordering by height in ascending order: sort by \"T2.Height ASC\" instead of descending order."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM gymnasts ORDER BY height DESC;",
            "SELECT T2.Name \nFROM gymnast AS T1 \nJOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID \nORDER BY T2.Height ASC"
        ],
        "rule_sql": [
            "SELECT T2.Name FROM gymnast AS T1 INNER JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC"
        ]
    },
    "196": {
        "db_id": "bike_1",
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
        "ground_truth": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "amends": [
            "Do use `EXCEPT` with a subquery to exclude zip codes instead of incorrectly applying `MAX()` aggregate in the `WHERE` clause. Do reference the correct table name `weather` instead of `weather_data`. Do use the pre-aggregated column `max_dew_point_f` instead of attempting to aggregate `dew_point` directly in the filter. Do remove the invalid aggregate function from the `WHERE` clause and instead use a proper set operation to exclude records where `max_dew_point_f >= 70`. Do maintain `DISTINCT` on both sides of the `EXCEPT` operation to ensure proper set semantics. The amended query now correctly identifies zip codes where the maximum dew point is below 70 by excluding those with values at or above 70, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks for zip codes with maximum dew point always below 70: use the table name \"weather\" instead of \"weather_data\". 2) When filtering for maximum dew point values: use the pre-aggregated column \"max_dew_point_f\" instead of attempting to aggregate \"dew_point\" directly. 3) When excluding zip codes that have maximum dew point at or above 70: use EXCEPT operation with a subquery that selects distinct zip codes where \"max_dew_point_f >= 70\". 4) When ensuring proper set semantics: maintain DISTINCT on both sides of the EXCEPT operation to get unique zip codes. 5) When the question asks for \"different zip codes\": select DISTINCT \"zip_code\" from the \"weather\" table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT zip_code FROM weather_data WHERE MAX(dew_point) < 70;",
            "SELECT DISTINCT zip_code FROM weather\nEXCEPT\nSELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70"
        ],
        "rule_sql": [
            "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70"
        ]
    },
    "1670": {
        "db_id": "theme_gallery",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "ground_truth": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T2.name` and `T2.country` from the `artist` table instead of selecting `name` and `country` directly from `artists`. Do join `exhibition` as `T1` with `artist` as `T2` on `T1.artist_id = T2.artist_id` instead of querying only the `artists` table. Do add `GROUP BY T1.artist_id` to group by artist instead of omitting grouping. Do order by `count(*) DESC` to sort by exhibition count instead of ordering by `exhibitions DESC`. The amended query now correctly finds the artist with the most exhibitions by joining exhibition and artist tables, counting exhibitions per artist, and returning the top result."
        ],
        "rules": [
            "1) When answering about \"artist who has had the most exhibitions\": make sure the output order: T2.name, T2.country 2) When the question mentions \"artist\": \"artist\" actually means \"T2.artist_id in schema\" 3) When combining T1 and T2 for shared entities: link rows where T1.artist_id = T2.artist_id exactly as shown in the amends; keep only matching pairs (inner match) 4) When the question asks for \"count of exhibitions\": compute the number of rows using T1.artist_id as the counting key 5) When the question asks for \"most exhibitions\": rank rows by count(*) in descending direction and keep the first 1 row 6) When producing output: do not reorder columns beyond T2.name followed by T2.country"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name, country FROM artists ORDER BY exhibitions DESC LIMIT 1;",
            "SELECT T2.Name, T2.Country\nFROM exhibition AS T1\nJOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID\nGROUP BY T1.Artist_ID\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T2.Name, T2.Country\nFROM exhibition T1\nINNER JOIN artist T2 ON T1.Artist_ID = T2.Artist_ID\nGROUP BY T1.Artist_ID\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ]
    },
    "5383": {
        "db_id": "tracking_software_problems",
        "question": "What is the list of distinct product names sorted by product id?",
        "ground_truth": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
        "amends": [
            "Do reference table `product` instead of `products` in the FROM clause. Do order by `product_id` instead of `product_name` in the ORDER BY clause. The amended query now correctly references the intended table and orders results by the product identifier rather than the product name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"distinct product names sorted by product id\": make sure the output order: product_id. 2) When the question mentions \"product names\": \"product names\" actually means \"product_name in schema\". 3) When the question mentions \"product id\": \"product id\" actually means \"product_id in schema\". 4) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms. 5) When handling text literals: do not change case, spacing, or punctuation."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT product_name FROM products ORDER BY product_name;",
            "SELECT DISTINCT product_name FROM Product ORDER BY product_id;"
        ],
        "rule_sql": [
            "SELECT DISTINCT product_name FROM Product ORDER BY product_id;"
        ]
    },
    "2031": {
        "db_id": "gas_company",
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "ground_truth": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `gas_station` instead of `gas_stations`. Do use the column `open_year` instead of `opening_year` for the filter condition. Do remove the explicit column alias `station_count` from the SELECT list instead of including it. Do move the aggregate function `count(*)` to the ORDER BY clause instead of referencing the alias. Do keep the WHERE filter on `open_year > 2000`, GROUP BY on `manager_name`, and LIMIT 1 unchanged. The amended query now correctly identifies the manager with the most stations opened after 2000 by ordering directly by the count instead of using an alias reference."
        ],
        "rules": [
            "1) When the question asks about \"gas stations\": use the exact table name \"gas_station\" instead of \"gas_stations\". 2) When filtering by opening year after 2000: use the exact column name \"open_year\" instead of \"opening_year\" and keep the condition \"open_year > 2000\". 3) When counting stations per manager: use \"count(*)\" without an explicit column alias in the SELECT list. 4) When ordering by station count: reference the aggregate function \"count(*)\" directly in the ORDER BY clause instead of using an alias. 5) When grouping results: group by \"manager_name\" and keep the LIMIT 1 to return only the top manager."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT manager_name, COUNT(*) as station_count\nFROM gas_stations\nWHERE opening_year > 2000\nGROUP BY manager_name\nORDER BY station_count DESC\nLIMIT 1;",
            "SELECT Manager_Name\nFROM gas_station\nWHERE Open_Year > 2000\nGROUP BY Manager_Name\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT Manager_Name FROM gas_station WHERE Open_Year > 2000 GROUP BY Manager_Name ORDER BY count(*) DESC LIMIT 1;"
        ]
    },
    "6143": {
        "db_id": "music_4",
        "question": "How many artists are there?",
        "ground_truth": "SELECT count(*) FROM artist",
        "amends": [
            "Do query the `artist` table instead of the `albums` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)`. The amended query now correctly counts records from the artist table rather than the albums table."
        ],
        "rules": [
            "1) When answering about \"how many artists\": query the \"artist\" table instead of the \"albums\" table. 2) When counting entities: use lowercase \"count(*)\" instead of uppercase \"COUNT(*)\" to count records from the correct table."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM albums;",
            "SELECT count(*) FROM artist;"
        ],
        "rule_sql": [
            "select count(*) from artist"
        ]
    },
    "4929": {
        "db_id": "store_product",
        "question": "What products are sold at the store named Miramichi?",
        "ground_truth": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"",
        "amends": [
            "Do specify `t1.product` in the SELECT list instead of using `*` to select all columns. Do add joins to `store_product AS t2` and `store AS t3` instead of querying only the `products` table. Do use `JOIN` with proper join conditions `t1.product_id = t2.product_id` and `t2.store_id = t3.store_id` instead of a simple single-table query. Do filter on `t3.store_name = \"Miramichi\"` instead of filtering on a non-existent `store_name` column in the products table. The amended query now correctly joins related tables to find products associated with the specified store name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"products sold at a store\": make sure the output order: t1.product 2) When combining tables for product-store relationships: link products table (t1) with store_product table (t2) where t1.product_id = t2.product_id, then link store_product table (t2) with store table (t3) where t2.store_id = t3.store_id, keeping only matching pairs (inner match) 3) When the question mentions \"store named Miramichi\": filter on t3.store_name = \"Miramichi\" exactly as specified 4) When selecting output columns: use t1.product instead of selecting all columns"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM products WHERE store_name = 'Miramichi';",
            "SELECT t1.product\nFROM product AS t1\nJOIN store_product AS t2 ON t1.product_id = t2.product_id\nJOIN store AS t3 ON t2.store_id = t3.store_id\nWHERE t3.store_name = 'Miramichi'"
        ],
        "rule_sql": [
            "SELECT t1.product FROM product t1 JOIN store_product t2 ON t1.product_id = t2.product_id JOIN store t3 ON t2.store_id = t3.store_id WHERE t3.store_name = 'Miramichi' ORDER BY t1.product"
        ]
    },
    "3062": {
        "db_id": "loan_1",
        "question": "Find the name of customers who have more than one loan.",
        "ground_truth": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "amends": [
            "Do select `T1.cust_name` with table alias qualification instead of unqualified `name`. Do use `FROM customer AS T1 JOIN loan AS T2` with explicit table aliases and an INNER JOIN instead of a single table `FROM customers`. Do add the join condition `ON T1.cust_id = T2.cust_id` to properly relate the tables instead of omitting any join predicate. Do add `GROUP BY T1.cust_name` to aggregate by customer name instead of no grouping. Do move the count filter to `HAVING count(*) > 1` instead of using `WHERE loan_count > 1` which incorrectly references a non-existent column. The amended query now correctly counts loan relationships per customer and matches RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"customers who have more than one loan\": make sure the output order: T1.cust_name. 2) When the question mentions \"name of customers\": \"name\" actually means \"T1.cust_name in schema\". 3) When combining T1 (customer) and T2 (loan) for shared entities: link rows where T1.cust_id = T2.cust_id; keep only matching pairs (inner match). 4) When the question asks for \"customers who have more than one loan\": organize results by T1.cust_name and compute count(*) per group, then keep only groups where count(*) > 1. 5) When counting loans per customer: use count(*) to count the number of loan relationships for each customer."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM customers WHERE loan_count > 1",
            "SELECT T1.cust_name\nFROM customer AS T1\nJOIN loan AS T2 ON T1.cust_ID = T2.cust_ID\nGROUP BY T1.cust_name\nHAVING COUNT(*) > 1"
        ],
        "rule_sql": [
            "SELECT T1.cust_name\nFROM customer T1\nINNER JOIN loan T2 ON T1.cust_ID = T2.cust_ID\nGROUP BY T1.cust_name\nHAVING COUNT(*) > 1\nORDER BY T1.cust_name"
        ]
    },
    "1720": {
        "db_id": "riding_club",
        "question": "List the names of players in ascending order of votes.",
        "ground_truth": "SELECT Player_name FROM player ORDER BY Votes ASC",
        "amends": [
            "Do reference the `Player_name` column instead of `name` and use the `player` table instead of `players`. Do order by `Votes` in ascending order instead of `votes` in descending order. The amended query now correctly selects from the intended table with proper column references and sorting direction."
        ],
        "rules": [
            "1) When the question asks for player names: use the exact column \"Player_name\" from table \"player\" instead of \"name\" from \"players\". 2) When the question specifies ascending order of votes: order by column \"Votes\" in ascending order instead of descending order. 3) When selecting from the player table: use the exact table name \"player\" instead of \"players\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM players ORDER BY votes DESC;",
            "SELECT Player_name FROM player ORDER BY Votes ASC;"
        ],
        "rule_sql": [
            "SELECT Player_name FROM player ORDER BY Votes ASC;"
        ]
    },
    "306": {
        "db_id": "product_catalog",
        "question": "Find the attribute data type for the attribute named \"Green\".",
        "ground_truth": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
        "amends": [
            "Do reference the `attribute_data_type` column instead of `data_type`. Do query from the `Attribute_Definitions` table instead of `attributes`. Do use double quotes `\"Green\"` for the string literal instead of single quotes `'Green'` instead of single quotes. The amended query now correctly retrieves the data type from the proper table definition with appropriate string quoting."
        ],
        "rules": [
            "1) When answering about \"attribute data type for the attribute named Green\": make sure the output order: attribute_data_type. 2) When the question mentions \"attribute data type\": \"attribute data type\" actually means \"attribute_data_type in schema\". 3) When the question mentions \"attribute named Green\": \"Green\" actually means \"Green\" in schema and must be quoted with double quotes as \"Green\". 4) When querying for attribute definitions: use the table \"Attribute_Definitions\" instead of any other table name."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT data_type FROM attributes WHERE attribute_name = 'Green';",
            "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\""
        ],
        "rule_sql": [
            "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\";"
        ]
    },
    "5293": {
        "db_id": "manufactory_1",
        "question": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.",
        "ground_truth": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'",
        "amends": [
            "Do query the `manufacturers` table instead of the `companies` table. Do reference the `Headquarter` column instead of the `headquarters` column while maintaining the same filter condition for Tokyo and Taiwan locations. Do use the lowercase `sum` function instead of uppercase `SUM` for the revenue aggregation. The amended query now correctly calculates total revenue from manufacturers with headquarters in Tokyo or Taiwan."
        ],
        "rules": [
            "1) When answering about \"total revenue of companies with headquarters in Tokyo or Taiwan\": query the \"manufacturers\" table instead of the \"companies\" table. 2) When filtering by headquarters location: use the \"Headquarter\" column instead of \"headquarters\" and maintain the filter condition for 'Tokyo' or 'Taiwan' locations. 3) When aggregating revenue: use the lowercase \"sum\" function instead of uppercase \"SUM\" for revenue aggregation. 4) When handling text literals: preserve the exact case and spelling of 'Tokyo' and 'Taiwan' as shown in the schema sample values."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT SUM(revenue) FROM companies WHERE headquarters = 'Tokyo' OR headquarters = 'Taiwan';",
            "SELECT sum(Revenue) FROM Manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan';"
        ],
        "rule_sql": [
            "SELECT sum(Revenue) FROM Manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'"
        ]
    },
    "5720": {
        "db_id": "dorm_1",
        "question": "Find the number of dorms and total capacity for each gender.",
        "ground_truth": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "amends": [
            "Do use `count(*)` without an alias instead of `COUNT(*) as number_of_dorms`, and do use `sum(student_capacity)` without an alias instead of `SUM(capacity) as total_capacity`. Do reference the `dorm` table instead of `dorms`, and do place the `gender` column in the SELECT list after the aggregates instead of before them. The amended query now correctly counts records and sums student capacity from the dorm table grouped by gender."
        ],
        "rules": [
            "1) When answering about \"number of dorms and total capacity for each gender\": make sure the output order: count of dorms first, then total capacity, then gender. 2) When counting dorms: use count(*) without an alias. 3) When summing capacity: use sum(student_capacity) without an alias. 4) When grouping by gender: organize results by the \"gender\" column from the \"dorm\" table. 5) When referring to the dormitory table: use the exact table name \"dorm\" instead of \"dorms\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT gender, COUNT(*) as number_of_dorms, SUM(capacity) as total_capacity FROM dorms GROUP BY gender;",
            "SELECT count(*), sum(student_capacity), gender FROM Dorm GROUP BY gender"
        ],
        "rule_sql": [
            "SELECT COUNT(*), SUM(student_capacity), gender FROM dorm GROUP BY gender;"
        ]
    },
    "6928": {
        "db_id": "tracking_orders",
        "question": "What are ids of the all distinct orders, sorted by placement date?",
        "ground_truth": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "amends": [
            "Do order by `date_order_placed` instead of `order_date DESC` to use the correct column name for ordering. End with confirmation that the amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for \"distinct orders\": select unique values of the exact identifier \"order_id\" from the \"orders\" table. 2) When the question mentions \"sorted by placement date\": order the results by the exact column \"date_order_placed\" in ascending order (default direction). 3) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for the table name \"orders\" and column names \"order_id\" and \"date_order_placed\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT DISTINCT order_id FROM orders ORDER BY order_date DESC;",
            "SELECT DISTINCT order_id FROM Orders ORDER BY date_order_placed;"
        ],
        "rule_sql": [
            "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed;"
        ]
    },
    "5133": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "ground_truth": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "amends": [
            "Do select `T1.Store_Phone` and `T1.Store_Email_Address` instead of `phone_number` and `email`. Do use `FROM Drama_Workshop_Groups AS T1` instead of `FROM workshop_groups`. Do add `JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID` instead of omitting the join. Do remove the `WHERE service_performed = 'yes'` filter instead of keeping it, as the join condition now properly filters the results. The amended query now correctly retrieves store contact information by joining workshop groups with their associated services."
        ],
        "rules": [
            "1) When selecting phone numbers and email addresses: use exact column names \"T1.Store_Phone\" and \"T1.Store_Email_Address\" instead of generic phone_number and email. 2) When querying workshop groups: use the exact table name \"Drama_Workshop_Groups AS T1\" instead of workshop_groups. 3) When filtering for services performed: join with \"Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID\" to properly filter results instead of using a WHERE clause with service_performed = 'yes'. 4) When combining workshop groups and services: use inner join on the exact key equality \"T1.Workshop_Group_ID = T2.Workshop_Group_ID\" to keep only matching pairs."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT phone_number, email FROM workshop_groups WHERE service_performed = 'yes';",
            "SELECT T1.Store_Phone, T1.Store_Email_Address\nFROM Drama_Workshop_Groups AS T1\nJOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID;"
        ],
        "rule_sql": [
            "SELECT T1.Store_Phone, T1.Store_Email_Address\nFROM Drama_Workshop_Groups AS T1\nINNER JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID;"
        ]
    },
    "1265": {
        "db_id": "apartment_rentals",
        "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.",
        "ground_truth": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
        "amends": [
            "Do use column name `apt_type_code` instead of `apartment_type_code` in both SELECT list and GROUP BY clause. Do use column name `room_count` instead of `rooms` for both MAX and MIN aggregate functions. Do reference table name `Apartments` instead of `apartments` while maintaining the same grouping logic. The amended query now correctly aggregates room counts by apartment type code as intended."
        ],
        "rules": [
            "1) When the question mentions \"apartment type code\": use the exact column name \"apt_type_code\" from the Apartments table. 2) When the question mentions \"number of rooms\": use the exact column name \"room_count\" from the Apartments table. 3) When the question asks for maximum and minimum values per apartment type: group by \"apt_type_code\" and compute MAX(\"room_count\") and MIN(\"room_count\") for each group. 4) When referencing the table containing apartment data: use the exact table name \"Apartments\" with proper case sensitivity."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT apartment_type_code, MAX(rooms), MIN(rooms) FROM apartments GROUP BY apartment_type_code;",
            "SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms FROM Apartments GROUP BY apt_type_code"
        ],
        "rule_sql": [
            "SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms FROM Apartments GROUP BY apt_type_code;"
        ]
    },
    "5939": {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "ground_truth": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "amends": [
            "Do select `hotel_id` and `star_rating_code` instead of `id` and `star_rating`. Do order by `price_range` instead of `star_rating`. Do use uppercase `HOTELS` instead of lowercase `hotels`."
        ],
        "rules": [
            "1) When the question asks for \"id\" of a hotel: use the exact column token \"hotel_id\" from the HOTELS table. 2) When the question asks for \"star rating\" of a hotel: use the exact column token \"star_rating_code\" from the HOTELS table. 3) When ordering hotels by price from low to high: order by the exact column token \"price_range\" in ascending order. 4) When referring to the hotels table: use the exact table name \"HOTELS\" in uppercase as shown in the schema."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT id, star_rating FROM hotels ORDER BY star_rating ASC;",
            "SELECT hotel_id, star_rating_code FROM HOTELS ORDER BY price_range ASC;"
        ],
        "rule_sql": [
            "SELECT hotel_id, star_rating_code FROM HOTELS ORDER BY price_range ASC;"
        ]
    },
    "6563": {
        "db_id": "wine_1",
        "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
        "ground_truth": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference `T1.Area` instead of `a.area` and use table alias `T1` for APPELLATIONS instead of `a`. Do join on `T1.Appelation = T2.Appelation` instead of `a.appelation_id = w.appelation_id` and use table name `WINE` instead of `wines`. Do move the year filter to `HAVING T2.year < 2010` instead of `WHERE w.year < 2010` and group by `T2.Appelation` instead of `a.area`. The amended query now correctly filters after grouping and matches the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"area of the appelation that produces the highest number of wines before 2010\": make sure the output order: T1.Area. 2) When combining T1 (APPELLATIONS) and T2 (WINE) for shared entities: link rows where T1.Appelation = T2.Appelation exactly and keep only matching pairs (inner match). 3) When the question mentions \"highest number of wines\": rank rows by count of wines in descending order and keep the first 1 row. 4) When counting wines: compute the number of rows using T2.Appelation as the counting key. 5) When the question mentions \"before the year of 2010\": filter groups where T2.year < 2010 after grouping. 6) When the question says \"per appelation\": organize results by T2.Appelation and compute count per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT a.area FROM appelation a JOIN wines w ON a.appelation_id = w.appelation_id WHERE w.year < 2010 GROUP BY a.area ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT T1.Area\nFROM appellations T1\nJOIN wine T2 ON T1.Appelation = T2.Appelation\nGROUP BY T2.Appelation\nHAVING T2.Year < 2010\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": [
            "SELECT T1.Area\nFROM appellations T1\nINNER JOIN wine T2 ON T1.Appelation = T2.Appelation\nWHERE T2.Year < 2010\nGROUP BY T2.Appelation\nORDER BY COUNT(T2.Appelation) DESC\nLIMIT 1"
        ]
    },
    "2520": {
        "db_id": "movie_1",
        "question": "find the ids of reviewers who did not give 4 star.",
        "ground_truth": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "amends": [
            "Do use `EXCEPT` set operation instead of a simple `WHERE` filter to exclude records. Do reference the table as `Rating` instead of `reviews` and use column `rID` instead of `reviewer_id`. Do explicitly include the `stars = 4` condition in the second SELECT instead of using `stars != 4` in a single query, ensuring proper set-based exclusion logic. The amended query now correctly identifies all reviewers who have ratings except those who specifically gave 4-star ratings, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When the question asks for reviewers who did not give a specific star rating: use a set operation to exclude reviewers who gave that specific rating rather than filtering with inequality. 2) When referring to the reviews table: use the exact table name \"Rating\" instead of \"reviews\". 3) When referring to reviewer identifiers: use the exact column name \"rID\" instead of \"reviewer_id\". 4) When excluding reviewers who gave 4-star ratings: explicitly include the condition \"stars = 4\" in the exclusion set rather than using \"stars != 4\" in a single query."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT reviewer_id FROM reviews WHERE stars != 4;",
            "SELECT rID FROM Rating\nEXCEPT\nSELECT rID FROM Rating WHERE stars = 4"
        ],
        "rule_sql": [
            "SELECT rID FROM Reviewer\nEXCEPT\nSELECT rID FROM Rating WHERE stars = 4;"
        ]
    },
    "1882": {
        "db_id": "wrestler",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "ground_truth": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "amends": [
            "Do select `TIME` instead of `COUNT(*)` to retrieve specific timestamp values rather than an aggregate count. Do reference table `elimination` instead of `eliminations` to use the correct table name. Do filter on column `Eliminated_By` instead of `eliminator` to use the proper column name for the eliminator reference. Do use double quotes `\"Punk\"` and `\"Orton\"` instead of single quotes to maintain consistent string literal formatting. The amended query now correctly retrieves elimination timestamps for matches where Punk or Orton were the eliminators, matching the intended behavior."
        ],
        "rules": [
            "1) When the question asks to show times of elimination: select the \"TIME\" column instead of using COUNT(*) to retrieve timestamp values. 2) When referring to the elimination table: use the exact table name \"elimination\" instead of \"eliminations\". 3) When filtering by eliminator names: use the column \"Eliminated_By\" instead of \"eliminator\" to reference the proper column. 4) When specifying string literals for eliminator names: use double quotes exactly as \"Punk\" and \"Orton\" to maintain consistent formatting. 5) When filtering for multiple eliminator values: use OR conditions to include matches where \"Eliminated_By\" equals either \"Punk\" or \"Orton\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM eliminations WHERE eliminator = 'Punk' OR eliminator = 'Orton';",
            "SELECT Time FROM Elimination WHERE Eliminated_By = \"Punk\" OR Eliminated_By = \"Orton\""
        ],
        "rule_sql": [
            "SELECT \"Time\" FROM elimination WHERE \"Eliminated_By\" = \"Punk\" OR \"Eliminated_By\" = \"Orton\""
        ]
    },
    "2719": {
        "db_id": "storm_record",
        "question": "What are the names of storms that did not affect any regions?",
        "ground_truth": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "amends": [
            "Do query from `storm` table instead of `storms` table. Do use `storm_id NOT IN` subquery to find storms without affected regions instead of checking `region_id IS NULL`. Do remove the incorrect `region_id` filter and instead add a correlated subquery that checks the `affected_region` table for existence of storm entries. The amended query now correctly identifies storms that have no associated affected regions by using the proper table relationships and subquery logic instead of relying on a potentially incorrect null check."
        ],
        "rules": [
            "1) When answering about \"storms that did not affect any regions\": use the table name \"storm\" instead of \"storms\". 2) When checking if storms have no affected regions: use a subquery with \"storm_id NOT IN\" to find storms without entries in the \"affected_region\" table instead of checking for NULL values. 3) When combining storm and affected_region data: use the canonical key \"storm_id\" to link between tables for proper relationship checking."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM storms WHERE region_id IS NULL;",
            "SELECT Name FROM storm WHERE Storm_ID NOT IN (SELECT Storm_ID FROM affected_region)"
        ],
        "rule_sql": [
            "SELECT Name FROM storm WHERE Storm_ID NOT IN (SELECT Storm_ID FROM affected_region)"
        ]
    },
    "1654": {
        "db_id": "theme_gallery",
        "question": "Return the different countries for artists.",
        "ground_truth": "SELECT DISTINCT country FROM artist",
        "amends": [
            "Do select `DISTINCT country` instead of `name` with `GROUP BY country`. Do remove the `GROUP BY` clause instead of keeping it since distinct selection makes grouping unnecessary. Do reference table `artist` instead of `artists` to correct the table name. The amended query now correctly returns unique country values from the artist table without unnecessary grouping."
        ],
        "rules": [
            "1) When the question asks for \"different countries for artists\": select distinct values of the exact column token \"country\" from the table \"artist\". 2) When the question mentions \"artists\": the correct table name is \"artist\" (not \"artists\"). 3) When selecting distinct values: do not use GROUP BY as distinct selection makes grouping unnecessary."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM artists GROUP BY country;",
            "SELECT DISTINCT Country FROM artist"
        ],
        "rule_sql": [
            "SELECT DISTINCT Country FROM artist;"
        ]
    },
    "5185": {
        "db_id": "music_2",
        "question": "How many musicians play in the song \"Flash\"?",
        "ground_truth": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "amends": [
            "Do join `performance AS T1` and `band AS T2` on `T1.bandmate = T2.id` instead of querying only `musicians` table. Do add join to `songs AS T3` on `T3.songid = T1.songid` instead of omitting it. Do filter on `T3.Title = \"Flash\"` instead of `song_name = 'Flash'` to reference the correct column name and table. Do remove the incorrect table reference `musicians` instead of keeping it. The amended query now correctly counts performances of the song \"Flash\" by joining the appropriate tables and filtering on the correct column."
        ],
        "rules": [
            "1) When the question asks about musicians playing in a song: join performance AS T1 and band AS T2 on T1.bandmate = T2.id to connect musicians to their performances. 2) When the question specifies a particular song title \"Flash\": join songs AS T3 on T3.songid = T1.songid and filter on T3.Title = \"Flash\" to reference the correct column and table. 3) When counting musicians who play in a specific song: count using the canonical key from the performance table (T1.bandmate) instead of querying the musicians table directly. 4) When handling text literals: preserve the exact case and punctuation of \"Flash\" as shown in the amends."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT COUNT(*) FROM musicians WHERE song_name = 'Flash';",
            "SELECT COUNT(*) \nFROM Performance AS T1\nJOIN Band AS T2 ON T1.Bandmate = T2.Id\nJOIN Songs AS T3 ON T3.SongId = T1.SongId\nWHERE T3.Title = \"Flash\""
        ],
        "rule_sql": [
            "SELECT COUNT(DISTINCT T1.Bandmate) \nFROM Performance AS T1 \nJOIN Songs AS T3 ON T3.SongId = T1.SongId \nWHERE T3.Title = 'Flash'"
        ]
    },
    "1682": {
        "db_id": "theme_gallery",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "ground_truth": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` with a subquery. Do reference the main table as `artist` instead of `artists`. Do add a second query with `JOIN` between `exhibition` and `artist` tables instead of a subquery alone. Do use table aliases `T1` for `exhibition` and `T2` for `artist` instead of no aliases. Do specify the join condition `ON T1.artist_id = T2.artist_id` instead of relying on implicit correlation. Do move the year filter to the second query's `WHERE` clause instead of keeping it in the subquery. Do select `T2.name` from the joined result instead of selecting `artist_id` in the subquery. The amended query now correctly handles potential NULL values and set operations to match the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about artists who did not have an exhibition in 2004: use EXCEPT set operation instead of NOT IN with a subquery. 2) When referencing the main artist table: use the exact table name \"artist\" instead of \"artists\". 3) When combining exhibition and artist tables: use table aliases T1 for \"exhibition\" and T2 for \"artist\". 4) When joining T1 and T2: use the exact join condition T1.artist_id = T2.artist_id. 5) When filtering for year 2004: apply the filter year = 2004 in the WHERE clause of the second query. 6) When selecting artist names: select T2.name from the joined result."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM artists WHERE artist_id NOT IN (SELECT artist_id FROM exhibitions WHERE year = 2004);",
            "SELECT Name FROM artist\nEXCEPT\nSELECT T2.Name FROM exhibition T1\nJOIN artist T2 ON T1.Artist_ID = T2.Artist_ID\nWHERE T1.Year = 2004"
        ],
        "rule_sql": [
            "SELECT T2.Name FROM artist T2 JOIN exhibition T1 ON T1.Artist_ID = T2.Artist_ID EXCEPT SELECT T2.Name FROM artist T2 JOIN exhibition T1 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Year = 2004"
        ]
    },
    "4449": {
        "db_id": "network_2",
        "question": "What are the names of the people who have no friends who are students?",
        "ground_truth": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` with subqueries. Do reference table `person` instead of `people`. Do add a second query with `JOIN` on `PersonFriend` table instead of omitting it. Do use join condition `T1.name = T2.friend` instead of `person_id` and `friend_id` relationships. Do filter with `T1.job = 'student'` instead of `status = 'student'`. Do select from `PersonFriend` as `T2` instead of the `friends` table. The amended query now correctly identifies people who are not friends with students using proper table relationships and set operations."
        ],
        "rules": [
            "1) When answering about \"people who have no friends who are students\": use EXCEPT set operation instead of NOT IN with subqueries. 2) When referencing the main person table: use table \"person\" instead of \"people\". 3) When combining person and friend information: include a JOIN on the \"PersonFriend\" table. 4) When linking person and friend tables: use join condition T1.name = T2.friend instead of person_id and friend_id relationships. 5) When filtering for students: use T1.job = 'student' instead of status = 'student'. 6) When selecting from the friend relationship table: use \"PersonFriend\" as T2 instead of the \"friends\" table."
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE id NOT IN (SELECT person_id FROM friends WHERE friend_id IN (SELECT id FROM people WHERE status = 'student'))",
            "SELECT name FROM Person\nEXCEPT\nSELECT T2.name\nFROM PersonFriend T2\nJOIN Person T1 ON T2.friend = T1.name\nWHERE T1.job = 'student'"
        ],
        "rule_sql": [
            "SELECT name FROM person\nEXCEPT\nSELECT T1.name FROM person T1\nJOIN PersonFriend T2 ON T1.name = T2.friend\nWHERE T1.job = 'student'"
        ]
    },
    "1143": {
        "db_id": "climbing",
        "question": "What are the names of countains that no climber has climbed?",
        "ground_truth": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "amends": [
            "Do reference the `Name` column from the `mountain` table instead of `name` from `mountains`. Do use `Mountain_ID` as the filter column in the main query instead of `mountain_id`. Do reference the `climber` table in the subquery instead of `climbs` to check for non-existent mountain IDs. The amended query now correctly identifies mountains that have no associated climbers by using the proper table and column names."
        ],
        "rules": [
            "1) When answering about mountains that no climber has climbed: make sure the output order includes the Name column from the mountain table. 2) When the question mentions \"mountains\": \"mountains\" actually means \"mountain\" in schema. 3) When filtering for mountains with no associated climbers: use Mountain_ID as the filter column and check for non-existent mountain IDs in the climber table. 4) When choosing identifier delimiters: do not replace double quotes with backticks or unquoted forms for Mountain_ID and Name columns."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM mountains WHERE mountain_id NOT IN (SELECT mountain_id FROM climbs)",
            "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber WHERE Mountain_ID IS NOT NULL)"
        ],
        "rule_sql": [
            "SELECT \"Name\" FROM \"mountain\" WHERE \"Mountain_ID\" NOT IN (SELECT DISTINCT \"Mountain_ID\" FROM \"climber\" WHERE \"Mountain_ID\" IS NOT NULL) ORDER BY \"Name\""
        ]
    },
    "5921": {
        "db_id": "cre_Theme_park",
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "ground_truth": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "amends": [
            "Do select specific columns `T1.Royal_Family_Details` and `T2.How_to_Get_There` instead of selecting all columns with `*`. Do join tables `ROYAL_FAMILY AS T1` and `TOURIST_ATTRACTIONS AS T2` instead of querying only from `tourist_attractions`. Do use an `INNER JOIN` with predicate `T1.Royal_Family_ID = T2.Tourist_Attraction_ID` instead of filtering with `WHERE category = 'royal family'`. Do remove the `ORDER BY name` clause instead of keeping it. The amended query now correctly retrieves royal family details with corresponding transportation information by properly joining the relevant tables."
        ],
        "rules": [
            "1) When answering about tourist attractions related to royal family: select specific columns T1.Royal_Family_Details and T2.How_to_Get_There instead of using SELECT *. 2) When combining ROYAL_FAMILY and TOURIST_ATTRACTIONS tables: use an inner join where T1.Royal_Family_ID = T2.Tourist_Attraction_ID to link matching rows. 3) When the question asks for details and ways to get to attractions: do not include any ORDER BY clause in the final query."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT * FROM tourist_attractions WHERE category = 'royal family' ORDER BY name;",
            "SELECT T1.Royal_Family_Details, T2.How_to_Get_There \nFROM Royal_Family AS T1 \nINNER JOIN Tourist_Attractions AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID"
        ],
        "rule_sql": [
            "SELECT T1.Royal_Family_Details, T2.How_to_Get_There FROM Royal_Family T1 INNER JOIN Tourist_Attractions T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID"
        ]
    },
    "4354": {
        "db_id": "tracking_grants_for_research",
        "question": "When did the first staff for the projects started working?",
        "ground_truth": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "amends": [
            "Do select `date_from` instead of `MIN(start_date)` and do use `Project_Staff` table instead of `staff` table. Do add `ORDER BY date_from ASC LIMIT 1` instead of using `WHERE project_id = 1` filter and aggregation function. Do remove the `project_id` filter instead of keeping it. The amended query now correctly retrieves the earliest date_from value from the Project_Staff table without unnecessary filtering."
        ],
        "rules": [
            "1) When answering about \"first staff for the projects started working\": use the \"date_from\" column from the \"Project_Staff\" table instead of \"start_date\" from a \"staff\" table. 2) When finding the earliest date: order by \"date_from\" in ascending order and take the first result instead of using aggregation functions. 3) When the question asks about staff for projects in general: do not filter by specific project_id values like \"1\"."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT MIN(start_date) FROM staff WHERE project_id = 1;",
            "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1;"
        ]
    },
    "376": {
        "db_id": "flight_1",
        "question": "What is the name of the 3 employees who get paid the least?",
        "ground_truth": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "amends": [
            "Do use table name `Employee` instead of `employees` to reference the correct source table. Do use `ASC` ordering instead of `DESC` for the salary column to sort in ascending order rather than descending. The amended query now correctly retrieves the three lowest-paid employees by sorting salaries in ascending order and limiting to the top three results, matching the intended behavior."
        ],
        "rules": [
            "1) When referencing the employee table: use the exact table name \"Employee\" instead of \"employees\". 2) When ordering by salary to find the lowest-paid employees: sort by salary in ascending order (ASC) instead of descending order (DESC). 3) When retrieving the top 3 lowest-paid employees: limit the results to the first 3 rows after ascending salary ordering."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM employees ORDER BY salary DESC LIMIT 3;",
            "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3;"
        ],
        "rule_sql": [
            "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3;"
        ]
    },
    "3202": {
        "db_id": "college_1",
        "question": "How many credits does the department offer?",
        "ground_truth": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "amends": [
            "Do select `sum(crs_credit)` and `dept_code` instead of `COUNT(*)` and omitting department code. Do use `FROM course` instead of `FROM departments` to access the correct table. Do add `GROUP BY dept_code` instead of omitting grouping entirely. Do remove the `WHERE credits > 0` filter instead of keeping it, as the aggregation should include all courses regardless of credit value. The amended query now correctly calculates total credits by department rather than counting departments with positive credits, matching the intended behavior.",
            "Do place the aggregate function `sum(crs_credit)` first in the SELECT list instead of placing `DEPT_CODE` first. Do use lowercase column names `dept_code` and `crs_credit` instead of uppercase `DEPT_CODE` and `CRS_CREDIT`. Do maintain the same GROUP BY logic with `dept_code` instead of `DEPT_CODE`. The amended query now matches RIGHT_SQL's behavior with identical aggregation results despite the column ordering difference.",
            "Do place the `dept_code` column after the aggregate function `SUM(crs_credit)` in the SELECT list instead of listing it first, maintaining the same GROUP BY logic and table source without any changes to join conditions, filters, or other query clauses, resulting in identical output behavior with only column ordering differences."
        ],
        "rules": [
            "1) When answering about \"how many credits does the department offer\": make sure the output order: dept_code, sum(crs_credit). 2) When the question asks for credits by department: use the \"course\" table instead of \"departments\" table. 3) When computing total credits per department: sum the \"crs_credit\" values for each \"dept_code\" group. 4) When grouping by department: include all courses regardless of credit value, do not filter out courses with zero credits.",
            "1) When answering about \"how many credits does the department offer\": make sure the output order: sum(crs_credit) first, then dept_code. 2) When referring to column identifiers: use lowercase \"dept_code\" and \"crs_credit\" instead of uppercase \"DEPT_CODE\" and \"CRS_CREDIT\". 3) When grouping by department: organize results by \"dept_code\" and compute the sum of \"crs_credit\" per department.",
            "1) When answering about \"How many credits does the department offer?\": make sure the output order: SUM(crs_credit) first, then dept_code\n2) When the question asks for \"how many credits\" by department: compute the sum of crs_credit values grouped by dept_code\n3) When producing output for department credit totals: maintain the grouping by dept_code as specified in the original query"
        ],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM departments WHERE credits > 0;",
            "SELECT DEPT_CODE, SUM(CRS_CREDIT) FROM COURSE GROUP BY DEPT_CODE;",
            "SELECT dept_code, SUM(crs_credit) FROM course GROUP BY dept_code;",
            "SELECT SUM(crs_credit), dept_code FROM course GROUP BY dept_code"
        ],
        "rule_sql": [
            "SELECT dept_code, SUM(crs_credit) FROM COURSE GROUP BY dept_code ORDER BY SUM(crs_credit), dept_code;"
        ]
    },
    "3453": {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "ground_truth": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_id, AVG(salary) \nFROM employees \nWHERE commission_pct IS NOT NULL \nGROUP BY department_id;"
        ],
        "rule_sql": [
            "SELECT d.DEPARTMENT_NAME, AVG(e.SALARY) AS AVERAGE_SALARY\nFROM employees e\nJOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE e.COMMISSION_PCT IS NOT NULL\nGROUP BY d.DEPARTMENT_NAME;"
        ]
    },
    "3079": {
        "db_id": "loan_1",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "ground_truth": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "amends": [
            "Do select `T2.bname` instead of `bank_name` and change the source from `banks` to a multi-table join structure. Do add joins with `loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id` and `JOIN customer AS T3 ON T1.cust_id = T3.cust_id` instead of querying a single table. Do move the credit score filter to apply to `T3.credit_score < 100` instead of a direct table column, and specify the table alias in the condition. The amended query now correctly retrieves bank names based on customer credit scores through proper table relationships, matching the intended behavior."
        ],
        "rules": [
            "1) When answering about \"names of banks that have loaned money to customers with credit scores below 100\": make sure the output order: T2.bname 2) When combining tables for bank loan information: link rows using T1.branch_id = T2.branch_id between loan AS T1 and bank AS T2, and T1.cust_id = T3.cust_id between loan AS T1 and customer AS T3, keeping only matching pairs (inner match) 3) When filtering for customers with credit scores below 100: apply the condition T3.credit_score < 100 to the customer table 4) When selecting bank names: use T2.bname instead of bank_name as the output column"
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT bank_name FROM banks WHERE credit_score < 100;",
            "SELECT DISTINCT T2.bname\nFROM loan AS T1\nJOIN bank AS T2 ON T1.branch_ID = T2.branch_ID\nJOIN customer AS T3 ON T1.cust_ID = T3.cust_ID\nWHERE T3.credit_score < 100"
        ],
        "rule_sql": [
            "SELECT DISTINCT T2.bname\nFROM loan AS T1\nINNER JOIN bank AS T2 ON T1.branch_ID = T2.branch_ID\nINNER JOIN customer AS T3 ON T1.cust_ID = T3.cust_ID\nWHERE T3.credit_score < 100\nORDER BY T2.bname;"
        ]
    },
    "3910": {
        "db_id": "hospital_1",
        "question": "List the name of physicians who took some appointment.",
        "ground_truth": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "amends": [
            "Do select `T2.name` from the physician table instead of `name` from the physicians table. Do join `appointment AS T1` with `physician AS T2` using the condition `T1.Physician = T2.EmployeeID` instead of filtering by `appointment_id IS NOT NULL` on a single table. Do remove the `WHERE` clause filter entirely instead of keeping the incorrect condition that doesn't properly relate the two tables. The amended query now correctly establishes the relationship between appointments and physicians through the proper join condition, matching the RIGHT_SQL's behavior of returning physician names associated with appointments."
        ],
        "rules": [
            "1) When answering about physicians who took appointments: select T2.name from the physician table. 2) When combining appointment and physician tables: link rows where T1.Physician = T2.EmployeeID and keep only matching pairs (inner match). 3) When the question mentions \"physicians who took some appointment\": this means physicians who have at least one matching appointment record through the join condition T1.Physician = T2.EmployeeID."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT name FROM physicians WHERE appointment_id IS NOT NULL",
            "SELECT T2.Name \nFROM Appointment AS T1 \nJOIN Physician AS T2 ON T1.Physician = T2.EmployeeID"
        ],
        "rule_sql": [
            "SELECT T2.Name FROM Appointment T1 INNER JOIN Physician T2 ON T1.Physician = T2.EmployeeID GROUP BY T2.Name"
        ]
    },
    "6843": {
        "db_id": "flight_4",
        "question": "Which countries has the most number of airlines whose active status is 'Y'?",
        "ground_truth": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select only `country` instead of including `COUNT(*) as airline_count` in the SELECT list. Do change the ORDER BY to use `count(*) DESC` instead of `airline_count ASC` to find the country with the highest count rather than the lowest. Do remove the alias `airline_count` from the ORDER BY clause since it's no longer present in the SELECT list. The amended query now correctly identifies the country with the most active airlines by counting active records per country and ordering by descending count with a limit of 1, matching the RIGHT_SQL's behavior."
        ],
        "rules": [
            "1) When answering about \"countries with the most number of airlines whose active status is 'Y'\": make sure the output order: country only. 2) When the question asks for \"most number of airlines\": rank rows by count of airlines in descending order and keep the first 1 row. 3) When the question mentions \"active status is 'Y'\": \"active status is 'Y'\" actually means \"active = 'Y'\" in schema. 4) When the question asks for \"count of airlines\": compute the number of rows using the canonical key for airlines. 5) When the question says \"per country\"/\"by country\": organize results by country and compute requested aggregates per group."
        ],
        "amend_res": 1,
        "rule_res": 1,
        "amend_sql": [
            "SELECT country, COUNT(*) as airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count ASC LIMIT 1;",
            "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": [
            "SELECT country \nFROM airlines \nWHERE active = 'Y' \nGROUP BY country \nORDER BY COUNT(alid) DESC \nLIMIT 1"
        ]
    },
    "523": {
        "db_id": "allergy_1",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "ground_truth": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "amends": [
            "Do select `fname` and `sex` instead of `first_name` and `gender`. Do use table `Student` instead of `students`. Do remove direct `allergy` column filtering and instead use a subquery with `EXCEPT` logic on the `Has_allergy` table to find students with milk allergy but not cat allergy, instead of incorrect simultaneous `allergy = 'milk' AND allergy != 'cat'` conditions that would never return results. Do reference `StuID` in the subquery instead of missing the join key. Do use proper table and column names `Has_allergy` and `Allergy` with correct case sensitivity instead of the wrong schema assumptions. The amended query now correctly identifies students with milk allergy excluding those with cat allergy using proper relational logic.",
            "Do use lowercase column names `fname` and `sex` instead of uppercase `Fname` and `Sex`. Do use double quotes `\"Milk\"` and `\"Cat\"` instead of single quotes `'milk'` and `'cat'` for string literals. Do use the correct table name `Has_allergy` (lowercase 'a') instead of `Has_Allergy` (uppercase 'A'). Do remove the table alias `s` from the main query instead of keeping it. Do remove the table aliases `ha1` and `ha2` from the subquery instead of using them. The amended query now correctly identifies students with milk allergy but without cat allergy using proper string comparison and table naming conventions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, gender FROM students WHERE allergy = 'milk' AND allergy != 'cat';",
            "SELECT s.Fname, s.Sex\nFROM Student s\nWHERE s.StuID IN (\n    SELECT ha1.StuID\n    FROM Has_Allergy ha1\n    WHERE ha1.Allergy = 'milk'\n    EXCEPT\n    SELECT ha2.StuID\n    FROM Has_Allergy ha2\n    WHERE ha2.Allergy = 'cat'\n)",
            "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
        ],
        "rule_sql": []
    },
    "4978": {
        "db_id": "soccer_2",
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "ground_truth": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "amends": [
            "Do use column alias `cName` instead of `name` and table name `College` instead of `colleges`. Do use column reference `enr` instead of `enrollment` for both the filter condition and the ORDER BY clause. Do order by `cName` instead of `enrollment` to sort alphabetically by college name rather than by enrollment size. The amended query now correctly references the schema elements and produces the intended alphabetical ordering of results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM colleges WHERE enrollment > 18000 ORDER BY enrollment;",
            "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName;"
        ],
        "rule_sql": []
    },
    "4172": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of documents with document type code CV or BK.",
        "ground_truth": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "amends": [
            "Do reference table `All_documents` instead of `documents` in the FROM clause. Do use `OR` logical operator instead of `AND` between the document type conditions to correctly count documents that are either 'CV' or 'BK' instead of incorrectly requiring both conditions simultaneously. Do use double quotes `\"CV\"` and `\"BK\"` instead of single quotes for the string literals. The amended query now correctly counts documents of either type rather than attempting to find documents that impossibly have both type codes simultaneously, matching the RIGHT_SQL's intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM documents WHERE document_type_code = 'CV' AND document_type_code = 'BK';",
            "SELECT COUNT(*) FROM All_Documents WHERE Document_Type_Code = \"CV\" OR Document_Type_Code = \"BK\""
        ],
        "rule_sql": []
    },
    "382": {
        "db_id": "flight_1",
        "question": "What is the number of flights?",
        "ground_truth": "SELECT count(*) FROM Flight",
        "amends": [
            "Do query from `Flight` table instead of `passengers` table. The amended query now correctly counts records from the Flight table as intended."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM passengers;",
            "SELECT COUNT(*) FROM flight;"
        ],
        "rule_sql": []
    },
    "6885": {
        "db_id": "tracking_orders",
        "question": "What is the id of the most recent order?",
        "ground_truth": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "amends": [
            "Do select `order_id` instead of `id` in the SELECT list. Do order by `date_order_placed DESC` instead of `order_date ASC` in the ORDER BY clause. The amended query now correctly retrieves the most recent order ID by sorting in descending order on the appropriate date column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM orders ORDER BY order_date ASC LIMIT 1;",
            "SELECT order_id FROM Orders ORDER BY date_order_placed DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "2336": {
        "db_id": "csu_1",
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "ground_truth": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "amends": [
            "Do select `campusfee` from the `campuses` table instead of `campus_fee` from `universities`. Do join `csu_fees` as `T2` on `T1.id = T2.campus` instead of querying a single table. Do filter on `t1.campus = \"San Jose State University\"` instead of `name = 'San Jose State University'`. Do filter on `T2.year = 1996` instead of `year = 1996`. The amended query now correctly joins the campuses and fees tables to retrieve the appropriate campus fee data for the specified university and year."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT campus_fee FROM universities WHERE name = 'San Jose State University' AND year = 1996",
            "SELECT csu_fees.CampusFee \nFROM Campuses \nJOIN csu_fees ON Campuses.Id = csu_fees.Campus \nWHERE Campuses.Campus = 'San Jose State University' \nAND csu_fees.Year = 1996"
        ],
        "rule_sql": []
    },
    "6160": {
        "db_id": "music_4",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "ground_truth": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "amends": [
            "Do reference the `Song` column instead of `s.title` in the SELECT list. Do reference the `volume` table instead of joining `songs` and `volumes` tables. Do use the filter `Weeks_on_Top > 1` directly on the volume table instead of joining through a relationship. Do remove the table aliases `s` and `v` instead of keeping them. The amended query now correctly selects songs directly from the volume table based on the weeks on top condition, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.title \nFROM songs s \nJOIN volumes v ON s.volume_id = v.id \nWHERE v.weeks_on_top > 1;",
            "SELECT Song FROM volume WHERE Weeks_on_Top > 1"
        ],
        "rule_sql": []
    },
    "6235": {
        "db_id": "ship_1",
        "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?",
        "ground_truth": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'",
        "amends": [
            "Do use `OR` instead of `AND` for the rank filter conditions, allowing records to match either 'Midshipman' or 'Lieutenant' instead of requiring both ranks simultaneously. Do reference the correct table name `captain` instead of `captains` to ensure proper data source access. The amended query now correctly retrieves names of personnel who hold either rank rather than incorrectly requiring both ranks."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM captains WHERE rank = 'Midshipman' AND rank = 'Lieutenant';",
            "SELECT Name FROM captain WHERE Rank = 'Midshipman' OR Rank = 'Lieutenant'"
        ],
        "rule_sql": []
    },
    "6971": {
        "db_id": "culture_company",
        "question": "How many books are there for each publisher?",
        "ground_truth": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
        "amends": [
            "Do reference table `book_club` instead of `books` in the FROM clause. Do group by `publisher` instead of `author` to correctly aggregate the count by publisher rather than author. Do select `publisher` instead of the incorrect column reference to match the grouping logic. The amended query now correctly counts books by publisher from the book_club table instead of incorrectly grouping by author from the books table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) FROM books GROUP BY author;",
            "SELECT Publisher, COUNT(*) AS book_count FROM book_club GROUP BY Publisher;"
        ],
        "rule_sql": []
    },
    "5905": {
        "db_id": "cre_Theme_park",
        "question": "How many distinct names are associated with all the photos?",
        "ground_truth": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM photos;"
        ],
        "rule_sql": []
    },
    "4524": {
        "db_id": "document_management",
        "question": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?",
        "ground_truth": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "amends": [
            "Do add explicit table aliases and join `documents AS t1` to `document_functional_areas AS t2` on `t1.document_code = t2.document_code` instead of querying a single table. Do further join `functional_areas AS t3` on `t2.functional_area_code = t3.functional_area_code` instead of missing these necessary table relationships. Do filter on `t3.functional_area_description = \"Acknowledgement\"` instead of filtering directly on a non-existent `functional_area` column in the documents table. Do qualify the column reference as `avg(t1.access_count)` instead of the unqualified `AVG(access_count)`. The amended query now correctly joins the necessary tables to filter documents by functional area description and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(access_count) FROM documents WHERE functional_area = 'Acknowledgement';",
            "SELECT AVG(t1.access_count) \nFROM documents AS t1\nJOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code\nJOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code\nWHERE t3.functional_area_description = 'Acknowledgement'"
        ],
        "rule_sql": []
    },
    "6452": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "ground_truth": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "amends": [
            "Do select `T1.document_id` instead of `id` and add table aliases. Do change the FROM clause to use `Documents_with_expenses AS T1` instead of `documents` and add a `JOIN` with `Ref_Budget_Codes AS T2` instead of a single table. Do use the join condition `T1.Budget_Type_code = T2.Budget_Type_code` instead of no join. Do change the WHERE filter to `T2.budget_type_Description = \"Government\"` instead of `budget = 'Government'` to properly reference the joined table's description field rather than a direct budget value comparison. The amended query now correctly joins the expense documents with budget code references and filters by budget type description instead of a potentially incorrect direct value comparison, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM documents WHERE budget = 'Government';",
            "SELECT T1.Document_ID \nFROM Documents_with_Expenses AS T1\nJOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code\nWHERE T2.Budget_Type_Description = 'Government'"
        ],
        "rule_sql": []
    },
    "4772": {
        "db_id": "department_store",
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "ground_truth": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "amends": [
            "Do use `GROUP BY supplier_id` instead of omitting it, and move the aggregate condition to `HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000` instead of incorrectly placing `AVG(amount)` in the `WHERE` clause. Do reference the correct column `total_amount_purchased` instead of `amount`, and use the correct table `Product_Suppliers` instead of `purchases`. The amended query now correctly filters groups by their aggregate values rather than attempting to use aggregates in a WHERE clause, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT supplier_id FROM purchases WHERE AVG(amount) > 50000 OR AVG(amount) < 30000",
            "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_amount_purchased) > 50000 OR AVG(total_amount_purchased) < 30000"
        ],
        "rule_sql": []
    },
    "1295": {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "ground_truth": "SELECT avg(weight) FROM Player",
        "amends": [
            "Do use `avg(weight)` instead of `AVG(height)` to calculate the average of the weight column rather than height. Do reference table `Player` instead of `players` to use the correct table name. The amended query now correctly calculates average weight from the Player table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM players;",
            "SELECT AVG(weight) FROM Player;"
        ],
        "rule_sql": []
    },
    "3976": {
        "db_id": "hospital_1",
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "ground_truth": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "amends": [
            "Do use explicit table joins with `physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment` instead of a single table query with a subquery. Do reference the cost column as `T3.cost` instead of just `cost` without table qualification. Do filter on `T1.name = \"John Wen\"` instead of using a subquery to find the physician ID. Do remove the subquery entirely instead of using `WHERE physician_id = (SELECT id FROM physicians WHERE name = 'John Wen')`. The amended query now correctly joins through the trained_in relationship table to associate physicians with procedures they are trained to perform, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(cost) FROM procedures WHERE physician_id = (SELECT id FROM physicians WHERE name = 'John Wen')",
            "SELECT AVG(T3.cost) AS average_cost\nFROM physician AS T1\nJOIN trained_in AS T2 ON T1.EmployeeID = T2.Physician\nJOIN procedures AS T3 ON T3.Code = T2.Treatment\nWHERE T1.Name = 'John Wen';"
        ],
        "rule_sql": []
    },
    "5484": {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "ground_truth": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "amends": [
            "Do select `Fname` and `LName` with `DISTINCT` instead of `first_name` and `last_name` without distinct. Do join `STUDENT` with `VOTING_RECORD` on `StuID = VICE_President_VOTE` instead of querying only the `students` table. Do filter on `age = 18` in the main table instead of filtering both age and votes in WHERE. Do remove the incorrect `votes = 'vice president'` filter instead of keeping it, as the voting logic is now handled through the join condition. The amended query now correctly identifies students who received vice president votes by joining the voting record table rather than relying on a string comparison in the student table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM students WHERE age = 18 AND votes = 'vice president';",
            "SELECT DISTINCT s.Fname, s.LName \nFROM Student s\nJOIN Voting_record vr ON s.StuID = vr.Vice_President_Vote\nWHERE s.Age = 18"
        ],
        "rule_sql": []
    },
    "3758": {
        "db_id": "program_share",
        "question": "what is the number of different channel owners?",
        "ground_truth": "SELECT count(DISTINCT OWNER) FROM channel",
        "amends": [
            "Do `count(DISTINCT OWNER)` instead of `COUNT(*)` to count distinct owners rather than all rows. Do reference table `channel` instead of `channels` to use the correct table name. The amended query now correctly counts distinct owners from the channel table instead of counting all rows from the incorrect table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM channels;",
            "SELECT COUNT(DISTINCT Owner) FROM channel;"
        ],
        "rule_sql": []
    },
    "2380": {
        "db_id": "csu_1",
        "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "ground_truth": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "amends": [
            "Do select `T2.faculty` instead of `COUNT(*)`. Do join `campuses AS T1` instead of omitting it. Do use `JOIN faculty AS T2 ON T1.id = t2.campus` instead of querying `faculty` directly. Do add `JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year` instead of using a subquery. Do filter with `WHERE t2.year = 2002` instead of `WHERE university_id = (subquery)`. Do order by `t3.degrees DESC` instead of ordering by `COUNT(*) DESC` in a subquery. Do remove the aggregation and group by entirely instead of using `GROUP BY university_id`. The amended query now correctly retrieves the faculty member from the campus with the most degrees in 2002 rather than counting faculty at a single university."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM faculty WHERE university_id = (SELECT university_id FROM degrees WHERE year = 2002 GROUP BY university_id ORDER BY COUNT(*) DESC LIMIT 1);",
            "SELECT T2.Faculty\nFROM Campuses AS T1\nJOIN faculty AS T2 ON T1.Id = T2.Campus\nJOIN degrees AS T3 ON T1.Id = T3.Campus AND T2.Year = T3.Year\nWHERE T2.Year = 2002\nORDER BY T3.Degrees DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "5654": {
        "db_id": "customers_and_products_contacts",
        "question": "Show all distinct cities in the address record.",
        "ground_truth": "SELECT DISTINCT city FROM addresses",
        "amends": [
            "Do use `DISTINCT` to return unique city values instead of omitting it, and reference the correct table name `addresses` instead of `address`. Do remove the `WHERE city IS NOT NULL` filter instead of keeping it since `DISTINCT` inherently handles null values appropriately. The amended query now correctly returns distinct city values from the addresses table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM address WHERE city IS NOT NULL",
            "SELECT DISTINCT city FROM Addresses;"
        ],
        "rule_sql": []
    },
    "4292": {
        "db_id": "club_1",
        "question": "How many clubs are located at \"HHH\"?",
        "ground_truth": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"",
        "amends": [
            "Do reference table `club` instead of `clubs` and use column `clublocation` instead of `location` while maintaining the same filter condition for 'HHH'. Do use consistent lowercase for the aggregate function `count(*)` instead of uppercase `COUNT(*)` and standard double quotes for the string literal instead of single quotes. The amended query now correctly counts records from the club table where the location matches 'HHH', fixing the table and column reference issues."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM clubs WHERE location = 'HHH';",
            "SELECT count(*) FROM club WHERE clublocation = \"HHH\""
        ],
        "rule_sql": []
    },
    "4835": {
        "db_id": "aircraft",
        "question": "Show all information on the airport that has the largest number of international passengers.",
        "ground_truth": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
        "amends": [
            "Do reference the `airport` table instead of `airports` in the FROM clause. Do order by `International_Passengers` instead of `domestic_passengers` in the ORDER BY clause. The amended query now correctly retrieves the record with the highest international passenger count from the airport table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM airports ORDER BY domestic_passengers DESC LIMIT 1;",
            "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1564": {
        "db_id": "customers_and_invoices",
        "question": "What are the customer ids for customers who do not have an account?",
        "ground_truth": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "amends": [
            "Do use `EXCEPT` set operation to find customers without accounts instead of filtering for `account_id IS NULL` which incorrectly assumes a direct relationship. Do reference the `Customers` table with proper capitalization instead of lowercase `customers`. Do remove the `WHERE` clause entirely instead of using an incorrect filter condition that doesn't properly identify customers without associated accounts. The amended query now correctly identifies customers who exist in the Customers table but not in the Accounts table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM customers WHERE account_id IS NULL;",
            "SELECT customer_id FROM Customers\nEXCEPT\nSELECT customer_id FROM Accounts"
        ],
        "rule_sql": []
    },
    "6911": {
        "db_id": "tracking_orders",
        "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
        "ground_truth": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "amends": [
            "Do join `customers` with `orders` on `customer_id` instead of querying `orders` alone. Do use `INTERSECT` to find customers with both statuses instead of `OR` which finds either status. Do reference `order_status` with table alias `T2` instead of unqualified `status`. Do use double quotes for string literals instead of single quotes. Do add a second join query for the intersect logic instead of a single query with OR conditions. The amended query now correctly identifies customers who have both 'On Road' and 'Shipped' orders rather than customers with either status."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM orders WHERE status = 'On Road' OR status = 'Shipped';",
            "SELECT T1.customer_id\nFROM Customers T1\nJOIN Orders T2 ON T1.customer_id = T2.customer_id\nWHERE T2.order_status = \"On Road\"\nINTERSECT\nSELECT T1.customer_id\nFROM Customers T1\nJOIN Orders T2 ON T1.customer_id = T2.customer_id\nWHERE T2.order_status = \"Shipped\""
        ],
        "rule_sql": []
    },
    "2597": {
        "db_id": "inn_1",
        "question": "For each bed type, find the average base price of different bed type.",
        "ground_truth": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "amends": [
            "Do use `bedType` instead of `bed_type` for the grouping column. Do use `avg(basePrice)` instead of `AVG(price) as average_price` for the aggregate calculation, removing the explicit alias. Do reference the table as `Rooms` instead of `rooms` to match the correct case sensitivity. The amended query now correctly calculates average base prices by bed type without the unnecessary alias."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bed_type, AVG(price) as average_price FROM rooms GROUP BY bed_type",
            "SELECT bedType, avg(basePrice) FROM Rooms GROUP BY bedType"
        ],
        "rule_sql": []
    },
    "417": {
        "db_id": "flight_1",
        "question": "Show names for all aircraft with at least two flights.",
        "ground_truth": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "amends": [
            "Do select `T2.name` from the `Aircraft` table instead of `name` from the `aircraft` table. Do join `Flight AS T1` with `Aircraft AS T2` on `T1.aid = T2.aid` instead of querying only the `aircraft` table. Do add `GROUP BY T1.aid` to group by aircraft ID instead of no grouping. Do move the count filter to `HAVING count(*) >= 2` instead of using `WHERE flight_count >= 2` on a non-aggregated column. The amended query now correctly counts flights per aircraft and filters for those with at least two flights, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM aircraft WHERE flight_count >= 2;",
            "SELECT T2.name \nFROM Flight AS T1 \nJOIN Aircraft AS T2 ON T1.aid = T2.aid \nGROUP BY T1.aid \nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "136": {
        "db_id": "bike_1",
        "question": "What is the id of the bike that traveled the most in 94002?",
        "ground_truth": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do use table name `trip` instead of `trips` and remove quotes around `94002` instead of keeping them as string literal. Do add `GROUP BY bike_id` instead of omitting aggregation grouping. Do change ordering to `COUNT(*) DESC` instead of `distance DESC` to count trips per bike instead of using distance. The amended query now correctly identifies the bike with the most trips from zip code 94002 by counting occurrences rather than selecting based on distance.",
            "Do remove the explicit `trip_count` column from the SELECT list instead of including it, as it's not needed for the final result. Do move the `COUNT(*)` aggregate function to the ORDER BY clause instead of keeping it in the SELECT list with an alias, since we only need to order by the count without selecting it. Do maintain the same GROUP BY on `bike_id` and WHERE filter on `zip_code = 94002` instead of changing them. The amended query now correctly returns only the bike_id with the highest trip count for zip code 94002, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bike_id FROM trips WHERE zip_code = '94002' ORDER BY distance DESC LIMIT 1;",
            "SELECT bike_id, COUNT(*) as trip_count FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY trip_count DESC LIMIT 1;",
            "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "6177": {
        "db_id": "music_4",
        "question": "Please list the age and famous title of artists in descending order of age.",
        "ground_truth": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",
        "amends": [
            "Do use table name `artist` instead of `artists`. Do change column order to `Famous_Title, Age` instead of `age, famous_title`. Do use proper case `Famous_Title` and `Age` instead of lowercase `famous_title` and `age`. Do apply `ORDER BY Age DESC` instead of `ORDER BY age ASC`. The amended query now correctly selects from the proper table with appropriate column casing and descending age ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age, famous_title FROM artists ORDER BY age ASC;",
            "SELECT Famous_Title, Age FROM artist ORDER BY Age DESC;"
        ],
        "rule_sql": []
    },
    "566": {
        "db_id": "store_1",
        "question": "What are the states with the most invoices?",
        "ground_truth": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "amends": [
            "Do reference `billing_state` instead of `state` in the SELECT list and GROUP BY clause. Do add a WHERE filter `billing_country = \"USA\"` instead of omitting it. Do change the ORDER BY to use `COUNT(*) DESC` instead of `invoice_count ASC`. Do modify the LIMIT to `1` instead of `5`. The amended query now correctly filters to USA billing addresses, counts invoices per state, and returns the state with the highest invoice count, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, COUNT(*) as invoice_count FROM invoices GROUP BY state ORDER BY invoice_count ASC LIMIT 5;",
            "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nWHERE billing_country = 'USA'\nGROUP BY billing_state\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1838": {
        "db_id": "browser_web",
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "ground_truth": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;",
        "amends": [
            "Do select `T1.name` from the `web_client_accelerator` table instead of `accelerator_name` from a non-existent `browsers` table. Do add joins with `accelerator_compatible_browser` and `browser` tables instead of querying a single incorrect table. Do use `JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id` and `JOIN browser AS T3 ON T2.browser_id = T3.id` instead of missing these essential relationships. Do apply the market share filter on `T3.market_share > 15` instead of applying it to a non-existent column in the wrong table. The amended query now correctly identifies accelerators compatible with browsers having market share over 15% by properly joining the relationship tables, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT accelerator_name FROM browsers WHERE market_share > 15",
            "SELECT DISTINCT T1.name \nFROM Web_client_accelerator AS T1\nJOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id\nJOIN browser AS T3 ON T2.browser_id = T3.id\nWHERE T3.market_share > 15"
        ],
        "rule_sql": []
    },
    "4621": {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are all the distinct premise types?",
        "ground_truth": "SELECT DISTINCT premises_type FROM premises",
        "amends": [
            "Do reference the column `premises_type` instead of `premise_type` in the SELECT list, as the correct column name includes the plural form. The amended query now correctly identifies distinct values from the premises_type column, matching the intended behavior of the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT premise_type FROM premises;",
            "SELECT DISTINCT premises_type FROM Premises;"
        ],
        "rule_sql": []
    },
    "634": {
        "db_id": "store_1",
        "question": "What are the names of the tracks that are Rock or Jazz songs?",
        "ground_truth": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
        "amends": [
            "Do reference `T2.name` from the joined table instead of `name` directly from tracks. Do join `genres AS T1` to `tracks AS T2` on `T1.id = T2.genre_id` instead of querying only the tracks table. Do filter on `T1.name = \"Rock\" OR T1.name = \"Jazz\"` instead of filtering directly on the genre column in tracks. The amended query now correctly uses the relational structure with proper table joins and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM tracks WHERE genre = 'Rock' OR genre = 'Jazz';",
            "SELECT T2.name \nFROM tracks AS T2\nJOIN genres AS T1 ON T1.id = T2.genre_id\nWHERE T1.name = 'Rock' OR T1.name = 'Jazz'"
        ],
        "rule_sql": []
    },
    "6845": {
        "db_id": "flight_4",
        "question": "List all countries and their number of airlines in the descending order of number of airlines.",
        "ground_truth": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as airline_count FROM airlines GROUP BY country ORDER BY airline_count ASC;"
        ],
        "rule_sql": []
    },
    "5611": {
        "db_id": "swimming",
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "ground_truth": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006",
        "amends": [
            "Do `count(DISTINCT city)` instead of `COUNT(*)` to count distinct cities rather than all rows. Do `FROM stadium` instead of `FROM stadiums` to reference the correct table name. Do `opening_year < 2006` instead of `opened_year > 2006` to filter for stadiums opened before 2006 rather than after 2006. The amended query now correctly counts distinct cities from stadiums opened before 2006."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stadiums WHERE opened_year > 2006;",
            "SELECT COUNT(DISTINCT City) FROM stadium WHERE Opening_year < 2006"
        ],
        "rule_sql": []
    },
    "4574": {
        "db_id": "company_office",
        "question": "Which industry has the most companies?",
        "ground_truth": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do use `Industry` column name instead of `industry` to match the correct case. Do order by `COUNT(*) DESC` instead of `company_count ASC` to find the industry with the highest count rather than the lowest. Do remove the `company_count` alias from the SELECT list instead of including it, as the RIGHT_SQL only returns the industry name. Do maintain the `GROUP BY Industry` and `LIMIT 1` clauses as they correctly identify the top industry by count. The amended query now correctly returns the industry with the highest company count instead of the lowest."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT industry, COUNT(*) as company_count FROM companies GROUP BY industry ORDER BY company_count ASC LIMIT 1;",
            "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1094": {
        "db_id": "match_season",
        "question": "Return all players sorted by college in ascending alphabetical order.",
        "ground_truth": "SELECT player FROM match_season ORDER BY College ASC",
        "amends": [
            "Do select only `player` instead of all columns with `*`. Do use table `match_season` instead of `players`. Do order by `College` in ascending order instead of `college` in descending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM players ORDER BY college DESC;",
            "SELECT Player FROM match_season ORDER BY College ASC"
        ],
        "rule_sql": []
    },
    "1427": {
        "db_id": "college_2",
        "question": "What are the names of students who took a course in the Fall of 2003?",
        "ground_truth": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "amends": [
            "Do reference the `student` table instead of `students` in the FROM clause. Do use a subquery with `id IN (SELECT id FROM takes WHERE semester = 'Fall' AND year = 2003)` instead of filtering directly on semester and year in the WHERE clause. Do remove the direct semester and year filters from the main query instead of keeping them, as those conditions now belong in the subquery against the `takes` table. The amended query now correctly joins through the takes relationship to find students enrolled in Fall 2003 courses, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE semester = 'Fall' AND year = 2003;",
            "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND year = 2003)"
        ],
        "rule_sql": []
    },
    "6893": {
        "db_id": "tracking_orders",
        "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "ground_truth": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "amends": [
            "Do select `T1.customer_name` from the `customers` table instead of selecting `customer_name` directly from `orders`. Do add an explicit `JOIN` between `customers AS T1` and `orders AS T2` on `T1.customer_id = T2.customer_id` instead of querying only the `orders` table. Do filter on `T2.order_status = \"Packing\"` instead of `status = 'Packing'` to use the correct column reference and table alias. The amended query now properly joins customer data with order status information and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT customer_name FROM orders WHERE status = 'Packing';",
            "SELECT DISTINCT T1.customer_name\nFROM Customers AS T1\nJOIN Orders AS T2 ON T1.customer_id = T2.customer_id\nWHERE T2.order_status = 'Packing'"
        ],
        "rule_sql": []
    },
    "5962": {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "ground_truth": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "amends": [
            "Do select `T2.Name` from the `Tourist_Attractions` table instead of `name` from a single table. Do join `Locations AS T1` with `Tourist_Attractions AS T2` using `T1.Location_ID = T2.Location_ID` instead of querying only the `tourist_attractions` table. Do filter on `T1.Address = \"254 Ottilie Junction\"` instead of `address = '254 Ottilie Junction'` and use `T2.How_to_Get_There = \"bus\"` instead of `transportation = 'bus'`, while maintaining the OR condition between these predicates. The amended query now correctly joins location data with tourist attractions and uses the appropriate column names from the joined tables, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM tourist_attractions WHERE transportation = 'bus' OR address = '254 Ottilie Junction';",
            "SELECT T2.Name \nFROM Locations AS T1 \nJOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID \nWHERE T1.Address = '254 Ottilie Junction' OR T2.How_to_Get_There = 'bus'"
        ],
        "rule_sql": []
    },
    "1217": {
        "db_id": "apartment_rentals",
        "question": "What are the first names and last names of all the guests?",
        "ground_truth": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "amends": [
            "Do select `guest_first_name` and `guest_last_name` instead of just `first_name`. Do use the correct table name `Guests` instead of `guests`. The amended query now correctly retrieves both first and last name columns from the appropriate table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM guests;",
            "SELECT guest_first_name, guest_last_name FROM Guests;"
        ],
        "rule_sql": []
    },
    "2835": {
        "db_id": "restaurant_1",
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "ground_truth": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';",
        "amends": [
            "Do select `Fname` and `Lname` instead of `first_name` and `last_name`. Do use table `Student` instead of `students`. Do filter with `Age > 18` instead of `age <= 18`. Do filter with `Major != 600` instead of `major = 600`. Do filter with `Sex = 'F'` instead of `gender = 'male'`. The amended query now correctly selects female students over 18 years old not in major 600."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM students WHERE gender = 'male' AND age <= 18 AND major = 600;",
            "SELECT Fname, Lname FROM Student WHERE Age > 18 AND Sex = 'F' AND Major != 600"
        ],
        "rule_sql": []
    },
    "4100": {
        "db_id": "company_employee",
        "question": "What is the maximum and minimum market value of companies?",
        "ground_truth": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
        "amends": [
            "Do reference the correct table name `company` instead of `companies` and use the correct column name `Market_Value_in_Billion` instead of `market_value`. Do remove the `WHERE market_value > 1000000` filter instead of keeping it, as the right query aggregates all records without filtering. The amended query now correctly calculates the maximum and minimum market values in billions across all companies in the table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(market_value), MIN(market_value) FROM companies WHERE market_value > 1000000;",
            "SELECT MAX(Market_Value_in_Billion) AS Max_Market_Value, MIN(Market_Value_in_Billion) AS Min_Market_Value FROM company"
        ],
        "rule_sql": []
    },
    "2284": {
        "db_id": "entrepreneur",
        "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "ground_truth": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "amends": [
            "Do select `T2.Date_of_Birth` from the joined `people` table instead of selecting `date_of_birth` directly from `entrepreneurs`. Do join `entrepreneur AS T1` with `people AS T2` using `T1.People_ID = T2.People_ID` instead of querying only the `entrepreneurs` table. Do reference the investor filter as `T1.Investor` instead of just `investor` to specify the table alias. Do use double quotes for string values `\"Simon Woodroffe\"` and `\"Peter Jones\"` instead of single quotes. The amended query now correctly retrieves date of birth from the related people table through proper table joining and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date_of_birth FROM entrepreneurs WHERE investor = 'Simon Woodroffe' OR investor = 'Peter Jones'",
            "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\""
        ],
        "rule_sql": []
    },
    "1555": {
        "db_id": "customers_and_invoices",
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "ground_truth": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
        "amends": [
            "Do join `Accounts AS T1` with `Customers AS T2` on `T1.customer_id = T2.customer_id` instead of querying only the `accounts` table. Do reference columns `T1.account_name` and `T1.other_account_details` instead of `account_name` and `account_details`. Do filter on `T2.customer_first_name` and `T2.customer_last_name` instead of filtering directly on the accounts table. Do use double quotes around string literals instead of single quotes. The amended query now correctly joins customer data to retrieve account information based on customer name criteria."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT account_name, account_details FROM accounts WHERE customer_first_name = 'Meaghan' AND customer_last_name = 'Keeling';",
            "SELECT T1.account_name, T1.other_account_details \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nWHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\""
        ],
        "rule_sql": []
    },
    "6248": {
        "db_id": "ship_1",
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "ground_truth": "SELECT count(*) ,  flag FROM ship GROUP BY flag",
        "amends": [
            "Do select `count(*)` and `flag` instead of `flag` and `COUNT(*)`. Do use `GROUP BY flag` instead of `GROUP BY ship_name`. Do query from `ship` table instead of `ships` table. The amended query now correctly counts records grouped by flag values rather than by ship names, matching the intended behavior.",
            "Do place `flag` after the aggregate function instead of before it in the SELECT list. Do use `count(*)` as the first column instead of `COUNT(*)` as the second column. Do maintain the same `GROUP BY flag` clause instead of changing the grouping logic. The amended query now correctly positions the aggregate function first while preserving the same grouping behavior and result set."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT flag, COUNT(*) FROM ships GROUP BY ship_name;",
            "SELECT flag, COUNT(*) FROM Ship GROUP BY flag;",
            "SELECT count(*), flag FROM Ship GROUP BY flag"
        ],
        "rule_sql": []
    },
    "2480": {
        "db_id": "movie_1",
        "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "ground_truth": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "amends": [
            "Do use `DISTINCT` to eliminate duplicate rows instead of omitting it. Do reference tables with aliases `T1`, `T2`, and `T3` instead of `ra`, `m`, and `r`. Do join `Rating AS T1` with `Movie AS T2` on `T1.mID = T2.mID` instead of joining `Rating ra` with `Movie m` on `ra.mID = m.mID`. Do join `Rating AS T1` with `Reviewer AS T3` on `T1.rID = T3.rID` instead of joining `Reviewer r` with `Rating ra` on `r.rID = ra.rID`. Do filter with `T2.director = T3.name` instead of `r.name != m.director` to find ratings where the reviewer is the movie director rather than excluding them. The amended query now correctly identifies ratings by reviewers who directed the movies they reviewed, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT r.name, m.title, ra.stars\nFROM Reviewer r\nJOIN Rating ra ON r.rID = ra.rID\nJOIN Movie m ON ra.mID = m.mID\nWHERE r.name != m.director;",
            "SELECT DISTINCT T3.name, T2.title, T1.stars\nFROM Rating AS T1\nJOIN Movie AS T2 ON T1.mID = T2.mID\nJOIN Reviewer AS T3 ON T1.rID = T3.rID\nWHERE T2.director = T3.name;"
        ],
        "rule_sql": []
    },
    "2174": {
        "db_id": "formula_1",
        "question": "How many drivers did not race in 2009?",
        "ground_truth": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "amends": [
            "Do use `count(DISTINCT driverId)` instead of `COUNT(*)` to count unique drivers rather than all rows. Do query from `results` table instead of `drivers` to access race participation data. Do add a subquery filter with `raceId NOT IN (SELECT raceId FROM races WHERE YEAR != 2009)` instead of the simple `year != 2009` condition to exclude races from years other than 2009, which correctly identifies drivers who participated only in 2009 races. Do remove the direct year filter from the WHERE clause and instead use a correlated subquery approach to filter based on race years. The amended query now correctly counts distinct drivers who participated exclusively in races from 2009, matching the intended behavior.",
            "Do filter by `raceId NOT IN` subquery instead of `driverId NOT IN` subquery. Do use a simpler subquery that selects `raceId FROM races WHERE YEAR != 2009` instead of the complex join with `DISTINCT driverId`. Do remove the unnecessary join between `results` and `races` in the subquery since the subquery only needs to identify races from years other than 2009. The amended query now correctly counts distinct drivers who only participated in races from 2009, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM drivers WHERE year != 2009;",
            "SELECT COUNT(DISTINCT driverId) \nFROM results \nWHERE driverId NOT IN (\n    SELECT DISTINCT driverId \n    FROM results \n    JOIN races ON results.raceId = races.raceId \n    WHERE races.year != 2009\n)",
            "SELECT COUNT(DISTINCT driverId) \nFROM results \nWHERE raceId NOT IN (SELECT raceId FROM races WHERE year != 2009)"
        ],
        "rule_sql": []
    },
    "2645": {
        "db_id": "inn_1",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "ground_truth": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "amends": [
            "Do select `T2.roomName` instead of `room_name` from the wrong table. Do join `Reservations AS T1` and `Rooms AS T2` with `ON T1.Room = T2.RoomId` instead of querying only the `rooms` table. Do filter on `firstname LIKE '%ROY%'` instead of `customer_first_name` to reference the correct column from the joined table. The amended query now correctly retrieves room names by joining reservations with rooms and filtering on the guest's first name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT room_name FROM rooms WHERE customer_first_name LIKE '%ROY%';",
            "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.FirstName LIKE '%ROY%'"
        ],
        "rule_sql": []
    },
    "4561": {
        "db_id": "company_office",
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "ground_truth": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "amends": [
            "Do select `T3.name` and `T2.name` instead of `building_name` and `company_name`. Do use `Office_locations AS T1` as the primary source instead of `buildings`. Do join `buildings AS T2` on `T1.building_id = T2.id` instead of directly joining companies to buildings. Do add a second join to `Companies AS T3` on `T1.company_id = T3.id` instead of the single join structure. Do remove the `WHERE office_location = 'building'` filter instead of keeping it, as the join logic now properly handles the relationship through the Office_locations table. The amended query correctly establishes the many-to-many relationship between buildings and companies through the junction table, ensuring accurate data retrieval.",
            "Do maintain the exact same column selection order with `T3.name` followed by `T2.name` instead of reversing them to `T2.name, T3.name`. Do preserve the identical join structure with `JOIN buildings AS T2 ON T1.building_id = T2.id` and `JOIN Companies AS T3 ON T1.company_id = T3.id` without any changes to table aliases, join conditions, or predicates. The amended query now correctly matches the RIGHT_SQL's behavior by maintaining the proper column output sequence while keeping all other query elements unchanged."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building_name, company_name FROM buildings JOIN companies ON buildings.id = companies.building_id WHERE office_location = 'building';",
            "SELECT T2.name, T3.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
            "SELECT T3.name, T2.name \nFROM Office_locations AS T1\nJOIN buildings AS T2 ON T1.building_id = T2.id\nJOIN Companies AS T3 ON T1.company_id = T3.id"
        ],
        "rule_sql": []
    },
    "6844": {
        "db_id": "flight_4",
        "question": "What are the countries with the most airlines whose active status is Y?",
        "ground_truth": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do remove `COUNT(*) as airline_count` from the SELECT list instead of including it. Do add `LIMIT 1` to the query instead of omitting it. Do change the ORDER BY clause to use `count(*) DESC` instead of `airline_count DESC`. The amended query now correctly returns only the top country with the most active airlines instead of listing all countries with their counts."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count DESC;",
            "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "5758": {
        "db_id": "dorm_1",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "ground_truth": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "amends": [
            "Do select `T1.dorm_name` and `T1.student_capacity` instead of `name` and `capacity`. Do use `FROM dorm AS T1` with `JOIN has_amenity AS T2 ON T1.dormid = T2.dormid` and `JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid` instead of just `FROM dorms`. Do add `GROUP BY T2.dormid` instead of omitting it. Do use `ORDER BY count(*)` instead of `ORDER BY COUNT(amenities)`. The amended query now correctly joins the necessary tables to count amenities per dorm and returns the dorm with the fewest amenities, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, capacity FROM dorms ORDER BY COUNT(amenities) ASC LIMIT 1;",
            "SELECT T1.dorm_name, T1.student_capacity\nFROM Dorm AS T1\nJOIN Has_amenity AS T2 ON T1.dormid = T2.dormid\nJOIN Dorm_amenity AS T3 ON T2.amenid = T3.amenid\nGROUP BY T2.dormid\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6913": {
        "db_id": "tracking_orders",
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "ground_truth": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "amends": [
            "Do select `T1.date_order_placed` instead of `order_date`. Do add `JOIN shipments AS T2` instead of omitting the shipments table. Do use join condition `ON T1.order_id = T2.order_id` instead of no join condition. Do filter on `T2.shipment_tracking_number = 3452` instead of `tracking_number = 3452`. The amended query now correctly joins the orders and shipments tables to retrieve the order date based on shipment tracking number, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_date FROM orders WHERE tracking_number = 3452;",
            "SELECT T1.date_order_placed \nFROM Orders AS T1\nJOIN Shipments AS T2 ON T1.order_id = T2.order_id\nWHERE T2.shipment_tracking_number = 3452"
        ],
        "rule_sql": []
    },
    "4930": {
        "db_id": "store_product",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "ground_truth": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "amends": [
            "Do select `product` instead of `*` for the column list. Do reference table `product` instead of `products` as the data source. Do use filter `max_page_size = \"A4\"` instead of `page_size = 'A4'` for the correct column name and quote style. Do use comparison `pages_per_minute_color < 5` instead of `pages_per_minute_color > 5` to filter for values below rather than above the threshold. The amended query now correctly selects from the proper table with accurate column references and filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE page_size = 'A4' AND pages_per_minute_color > 5;",
            "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5"
        ],
        "rule_sql": []
    },
    "1092": {
        "db_id": "match_season",
        "question": "Show the country names and the corresponding number of players.",
        "ground_truth": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "amends": [
            "Do specify `Country_name` from the `country` table instead of `country` from the `players` table. Do add a `JOIN` between `country AS T1` and `match_season AS T2` with the predicate `ON T1.Country_id = T2.Country` instead of querying only the `players` table. Do group by `T1.Country_name` instead of `country` to ensure proper aggregation after the join. The amended query now correctly counts matches per country by joining the country and match_season tables, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) FROM players GROUP BY country;",
            "SELECT T1.Country_name, COUNT(*) AS Number_of_Players\nFROM country AS T1\nJOIN match_season AS T2 ON T1.Country_id = T2.Country\nGROUP BY T1.Country_name;"
        ],
        "rule_sql": []
    },
    "6068": {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customers who use the most frequently used payment method.",
        "ground_truth": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "amends": [
            "Do select `customer_name` instead of `c.name` and remove the join to `orders` table. Do use a subquery to find the most frequent `payment_method` instead of grouping by customer attributes. Do filter with `WHERE payment_method =` instead of joining and grouping. Do remove `GROUP BY c.customer_id, c.name` and `ORDER BY COUNT(o.payment_method) DESC LIMIT 1` from the main query, instead moving this logic to a subquery that counts payment methods across all customers. The amended query now correctly identifies customers who use the most common payment method instead of finding the customer with the most orders of a specific payment method."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.name\nORDER BY COUNT(o.payment_method) DESC\nLIMIT 1;",
            "SELECT customer_name\nFROM Customers\nWHERE payment_method = (\n    SELECT payment_method\n    FROM Customers\n    GROUP BY payment_method\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);"
        ],
        "rule_sql": []
    },
    "6206": {
        "db_id": "roller_coaster",
        "question": "List the names of countries whose language is not \"German\".",
        "ground_truth": "SELECT Name FROM country WHERE Languages != \"German\"",
        "amends": [
            "Do reference the `Name` column instead of `name` and use the `country` table instead of `countries`. Do use inequality filter `!= \"German\"` instead of equality filter `= 'German'` and reference the `Languages` column instead of `language`. Do use double quotes around the string literal instead of single quotes. The amended query now correctly filters for countries where the language is not German instead of where it is German, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE language = 'German';",
            "SELECT \"Name\" FROM country WHERE \"Languages\" != \"German\""
        ],
        "rule_sql": []
    },
    "2278": {
        "db_id": "entrepreneur",
        "question": "Return the weight of the shortest person.",
        "ground_truth": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "amends": [
            "Do select the actual `Weight` column value instead of using `MAX(weight)` aggregation. Do add `ORDER BY Height ASC` to sort by height in ascending order instead of omitting any ordering. Do add `LIMIT 1` to return only the top row instead of returning a single aggregated maximum value. The amended query now correctly returns the weight of the person with the smallest height rather than the maximum weight across all people, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(weight) FROM people;",
            "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3584": {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "ground_truth": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "amends": [
            "Do select `T2.song_name` instead of `name` and use a `UNION` operation instead of a single query. Do join `files AS T1` with `song AS T2` on `T1.f_id = T2.f_id` instead of querying only the `songs` table. Do filter with `T1.duration LIKE \"4:%\"` instead of `duration = 240` to match time format patterns. Do use `languages = \"english\"` instead of `language = 'English'` for case consistency and column name accuracy. Do add a separate `SELECT song_name FROM song` branch in the UNION instead of combining conditions with OR. The amended query now correctly retrieves song names from related tables with proper duration pattern matching and language filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM songs WHERE duration = 240 OR language = 'English';",
            "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\""
        ],
        "rule_sql": []
    },
    "6988": {
        "db_id": "culture_company",
        "question": "Show all director names who have a movie in both year 1999 and 2000.",
        "ground_truth": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999",
        "amends": [
            "Do use `INTERSECT` to find common directors instead of `OR` with `DISTINCT` which returns directors from either year. Do query from table `movie` instead of `movies`. Do use column `director` instead of `director_name`. Do add a second query for year `1999` instead of combining both years in a single `WHERE` clause. Do remove the `DISTINCT` modifier since `INTERSECT` inherently returns unique values. Do use exact year comparison `YEAR = 2000` and `YEAR = 1999` instead of the `OR` condition that incorrectly includes directors from either year individually. The amended query now correctly returns only directors who made movies in both 1999 and 2000, matching the RIGHT_SQL's set intersection behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT director_name FROM movies WHERE year = 1999 OR year = 2000;",
            "SELECT Director FROM movie WHERE Year = 1999 INTERSECT SELECT Director FROM movie WHERE Year = 2000"
        ],
        "rule_sql": []
    },
    "1710": {
        "db_id": "epinions_1",
        "question": "For each user, find their name and the number of reviews written by them.",
        "ground_truth": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "amends": [
            "Do select `T1.name` instead of `user_name` and join `useracct AS T1` to `review AS T2` instead of querying only `reviews`. Do use `ON T1.u_id = T2.u_id` for the join condition instead of grouping by `user_id` without proper table specification. Do group by `T2.u_id` instead of `user_id` to ensure correct aggregation with the joined table structure. The amended query now correctly retrieves user names from the useracct table while counting reviews from the review table based on the user ID relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_name, COUNT(*) FROM reviews GROUP BY user_id;",
            "SELECT T1.name, COUNT(T2.a_id) AS review_count\nFROM useracct AS T1\nJOIN review AS T2 ON T1.u_id = T2.u_id\nGROUP BY T2.u_id"
        ],
        "rule_sql": []
    },
    "922": {
        "db_id": "insurance_fnol",
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "ground_truth": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "amends": [
            "Do add `t1.` prefix to `customer_name` instead of using the bare column name. Do add `JOIN first_notification_of_loss AS t2` and `JOIN services AS t3` instead of querying only the `customers` table. Do use `ON t1.customer_id = t2.customer_id` and `ON t2.service_id = t3.service_id` join conditions instead of missing table relationships. Do change the WHERE clause to `t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"` instead of the impossible `service_name = 'Close a policy' AND service_name = 'Upgrade a policy'` that could never return results. Do reference `t3.service_name` instead of the non-existent `service_name` column in the customers table. The amended query now correctly joins the necessary tables and uses OR logic to find customers with either service type, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE service_name = 'Close a policy' AND service_name = 'Upgrade a policy';",
            "SELECT DISTINCT t1.Customer_name\nFROM Customers AS t1\nJOIN First_Notification_of_Loss AS t2 ON t1.Customer_ID = t2.Customer_ID\nJOIN Services AS t3 ON t2.Service_ID = t3.Service_ID\nWHERE t3.Service_name = 'Close a policy' OR t3.Service_name = 'Upgrade a policy'"
        ],
        "rule_sql": []
    },
    "840": {
        "db_id": "chinook_1",
        "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "ground_truth": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "amends": [
            "Do select `Title` and `AlbumID` instead of `title` and `album_id`. Do join `ALBUM AS T1` with `TRACK AS T2` on `T1.AlbumId = T2.AlbumId` instead of querying only the `albums` table. Do filter on `T2.UnitPrice > 1` instead of filtering on `unit_price > 1` from the wrong table. Do add `GROUP BY T2.AlbumID` instead of omitting grouping. The amended query now correctly joins album and track tables, filters on track prices, and groups results by album ID to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, album_id FROM albums WHERE unit_price > 1",
            "SELECT T1.Title, T1.AlbumId \nFROM Album AS T1 \nJOIN Track AS T2 ON T1.AlbumId = T2.AlbumId \nWHERE T2.UnitPrice > 1 \nGROUP BY T1.AlbumId"
        ],
        "rule_sql": []
    },
    "6231": {
        "db_id": "ship_1",
        "question": "Return the rank for which there are the fewest captains.",
        "ground_truth": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference table `captain` instead of `captains` in the FROM clause. Do remove the explicit column alias `captain_count` and instead use the aggregate expression `count(*)` directly in the ORDER BY clause. Do omit the explicit column `captain_count` from the SELECT list and instead only select `rank` while maintaining the same grouping and ordering logic. The amended query now correctly references the intended table structure and achieves the same result of finding the rank with the highest count of captains.",
            "Do add `DESC` to the `ORDER BY count(*)` clause instead of using the default ascending order, which would return the least common rank rather than the most common rank. Do ensure the amended query now correctly returns the most frequent rank by ordering the count in descending order and taking the first result, matching the RIGHT_SQL's behavior.",
            "Do use `ORDER BY count(*) DESC` instead of `ORDER BY count(*) ASC` to find the rank with the highest count rather than the lowest count. Do use lowercase `rank` in both the SELECT and GROUP BY clauses instead of mixed case `Rank` for consistency, though this may be a cosmetic difference depending on the database's case sensitivity. The amended query now correctly identifies the most common rank by counting occurrences in descending order.",
            "Do `ORDER BY count(*) DESC` instead of `ORDER BY count(*) ASC` to get the rank with the highest count instead of the lowest count, which correctly identifies the most common rank rather than the least common rank.",
            "Do `ORDER BY count(*) DESC` instead of `ORDER BY count(*) ASC` to get the rank with the highest count rather than the lowest count, which correctly identifies the most common rank instead of the least common one. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rank, COUNT(*) as captain_count FROM captains GROUP BY rank ORDER BY captain_count DESC LIMIT 1;",
            "SELECT Rank FROM captain GROUP BY Rank ORDER BY count(*) LIMIT 1;",
            "SELECT Rank FROM captain GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
            "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) ASC LIMIT 1;",
            "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
            "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) ASC LIMIT 1"
        ],
        "rule_sql": []
    },
    "5785": {
        "db_id": "customer_complaints",
        "question": "What are the phone numbers of all customers and all staff members?",
        "ground_truth": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "amends": [
            "Do reference `phone_number` column instead of `phone` in both SELECT clauses to correctly access the actual column name in the tables. Do maintain the UNION operation between the customer and staff phone number queries instead of changing the set operation. The amended query now correctly retrieves phone numbers from both customer and staff tables using the proper column name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM customers UNION SELECT phone FROM staff;",
            "SELECT phone_number FROM Customers\nUNION\nSELECT phone_number FROM Staff"
        ],
        "rule_sql": []
    },
    "4788": {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "ground_truth": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "amends": [
            "Do use `T1.customer_name` instead of `c.name` for the SELECT list. Do add `customer_orders AS T2` and `order_items AS T3` as additional JOIN sources instead of omitting them. Do use `T1.customer_id = T2.customer_id` instead of `c.id = o.customer_id` for the first JOIN predicate. Do add `T2.order_id = T3.order_id` as a second JOIN predicate instead of omitting it. Do use `COUNT(DISTINCT T3.product_id)` instead of `COUNT(o.product_id)` to count distinct products instead of all product occurrences. Do use `T1.customer_id` instead of `c.id` for GROUP BY. The amended query now correctly identifies customers with at least 3 distinct products by properly joining through the customer_orders and order_items tables and using DISTINCT counting."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.name \nFROM customers c \nJOIN orders o ON c.id = o.customer_id \nGROUP BY c.id \nHAVING COUNT(o.product_id) >= 3",
            "SELECT DISTINCT T1.customer_name\nFROM Customers AS T1\nJOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id\nJOIN Order_Items AS T3 ON T2.order_id = T3.order_id\nGROUP BY T1.customer_id\nHAVING COUNT(DISTINCT T3.product_id) >= 3"
        ],
        "rule_sql": []
    },
    "4229": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the code of the location with the largest number of documents.",
        "ground_truth": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do use `GROUP BY location_code` instead of omitting it, which enables proper aggregation. Do place the `COUNT(*)` aggregate in the ORDER BY clause instead of incorrectly using it without grouping. Do remove the unnecessary table reference `FROM documents` instead of keeping it, and do use the correct table name `Document_locations` instead of `documents`. The amended query now correctly groups by location_code and orders by the count of documents per location, matching the intended behavior.",
            "Do select only `location_code` instead of including `COUNT(*) AS document_count` in the SELECT list. Do order by `count(*) DESC` instead of ordering by the alias `document_count DESC`. Do maintain the same FROM source `Document_locations` and GROUP BY clause `location_code` while removing the unnecessary column alias from the output. The amended query now correctly returns only the location_code with the highest document count while matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location_code FROM documents ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT Location_Code, COUNT(*) AS document_count FROM Document_Locations GROUP BY Location_Code ORDER BY document_count DESC LIMIT 1;",
            "SELECT location_code FROM Document_Locations GROUP BY location_code ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2241": {
        "db_id": "machine_repair",
        "question": "Show the name of technicians aged either 36 or 37",
        "ground_truth": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
        "amends": [
            "Do reference the table as `technician` instead of `technicians` and use column names `Name` and `Age` instead of `name` and `age` to match the correct schema, while maintaining the same filter condition `Age = 36 OR Age = 37` instead of `age = 36 OR age = 37`. The amended query now correctly selects from the proper table with accurate column names while preserving the intended age filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM technicians WHERE age = 36 OR age = 37;",
            "SELECT Name FROM technician WHERE Age = 36 OR Age = 37;"
        ],
        "rule_sql": []
    },
    "3690": {
        "db_id": "baseball_1",
        "question": "Count the number of games taken place in park \"Columbia Park\" in 1907.",
        "ground_truth": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
        "amends": [
            "Do join `home_game` and `park` tables with `INNER JOIN` on `park_id` instead of querying only the `games` table. Do filter on `T1.year = 1907` and `T2.park_name = 'Columbia Park'` instead of filtering directly on `park_name` and `year` in a single table. Do use proper table aliases `T1` and `T2` for clarity instead of referencing columns without table context. The amended query now correctly joins the relational tables and matches the RIGHT_SQL's behavior.",
            "Do use `count(*)` instead of `SUM(T1.games)` for counting records. Do remove the `INNER` keyword from the join specification instead of keeping it explicit. Do ensure proper spacing around the equals operator in the join condition `T1.park_id = T2.park_id` instead of inconsistent spacing. The amended query now correctly counts all matching records rather than summing game values, while maintaining the same filtering logic on year and park name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE park_name = 'Columbia Park' AND year = 1907;",
            "SELECT SUM(T1.games) \nFROM home_game T1\nINNER JOIN park T2 ON T1.park_id = T2.park_id\nWHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'",
            "SELECT COUNT(*)\nFROM home_game T1\nJOIN park T2 ON T1.park_id = T2.park_id\nWHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'"
        ],
        "rule_sql": []
    },
    "3891": {
        "db_id": "insurance_policies",
        "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
        "ground_truth": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
        "amends": [
            "Do use column names `Payment_ID`, `Date_Payment_Made`, and `Amount_Payment` instead of `payment_id`, `payment_date`, and `amount`. Do filter on `Payment_Method_Code = 'Visa'` instead of `payment_method = 'Mastercard'`. The amended query now correctly selects the specified columns and filters for Visa payments instead of Mastercard payments, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT payment_id, payment_date, amount FROM payments WHERE payment_method = 'Mastercard';",
            "SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa';"
        ],
        "rule_sql": []
    },
    "288": {
        "db_id": "twitter_1",
        "question": "Find the id of users who are followed by Mary and Susan.",
        "ground_truth": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
        "amends": [
            "Do use `INTERSECT` to find common followers instead of multiple `IN` subqueries. Do join `user_profiles` with `follows` on `uid = f2` instead of querying the `users` table. Do reference columns as `T2.f1` and `T2.f2` instead of `follower_id` and `followed_id`. Do filter with `T1.name = \"Mary\"` and `T1.name = \"Susan\"` in separate SELECT statements instead of using multiple `IN` conditions with the same subquery pattern. Do use table aliases `T1` and `T2` instead of direct table references. The amended query now correctly finds the intersection of followers between Mary and Susan using proper join semantics."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT follower_id FROM follows WHERE followed_id IN (SELECT id FROM users WHERE name = 'Mary') AND followed_id IN (SELECT id FROM users WHERE name = 'Susan')",
            "SELECT T2.f2\nFROM user_profiles T1\nJOIN follows T2 ON T1.uid = T2.f1\nWHERE T1.name = 'Mary'\nINTERSECT\nSELECT T2.f2\nFROM user_profiles T1\nJOIN follows T2 ON T1.uid = T2.f1\nWHERE T1.name = 'Susan'"
        ],
        "rule_sql": []
    },
    "4855": {
        "db_id": "local_govt_and_lot",
        "question": "When is the last day any resident moved in?",
        "ground_truth": "SELECT max(date_moved_in) FROM Residents",
        "amends": [
            "Do use the correct column name `date_moved_in` instead of the incorrect `move_in_date` and reference the correct table name `Residents` instead of `residents` to ensure accurate data retrieval from the proper database table with the appropriate column that contains the maximum move-in date information."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(move_in_date) FROM residents;",
            "SELECT MAX(date_moved_in) AS last_move_in_date FROM Residents;"
        ],
        "rule_sql": []
    },
    "6982": {
        "db_id": "culture_company",
        "question": "Show all movie titles, years, and directors, ordered by budget.",
        "ground_truth": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million",
        "amends": [
            "Do reference table `movie` instead of `movies` in the FROM clause. Do order by `budget_million` instead of `title` in the ORDER BY clause. The amended query now correctly references the intended table and sorts results by budget instead of title."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, year, director FROM movies ORDER BY title;",
            "SELECT Title, Year, Director FROM movie ORDER BY Budget_million;"
        ],
        "rule_sql": []
    },
    "6895": {
        "db_id": "tracking_orders",
        "question": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "ground_truth": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "amends": [
            "Do select `DISTINCT T1.customer_details` instead of `*` to return only specific columns with uniqueness. Do add `JOIN orders AS T2` instead of querying only the `customers` table to incorporate order data. Do use the join condition `ON T1.customer_id = T2.customer_id` instead of no join to properly relate customers to their orders. Do change the filter to `WHERE T2.order_status = \"On Road\"` instead of `WHERE status = 'On Road'` to check the order status rather than customer status. Do add table aliases `T1` and `T2` instead of no aliases for clarity. The amended query now correctly identifies customers with orders that are on road rather than customers themselves being on road."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM customers WHERE status = 'On Road';",
            "SELECT DISTINCT T1.customer_details FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""
        ],
        "rule_sql": []
    },
    "6842": {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "ground_truth": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `country` instead of `country.name` and remove the explicit alias `airline_count`. Do use `airlines` as the single table source instead of joining `country` with `airline` on `country.id = airline.country_id`. Do remove the `WHERE airline.home_airline = 1` filter instead of keeping it. Do use `count(*)` for aggregation instead of `COUNT(airline.id)` and group by `country` instead of `country.id`. Do maintain `ORDER BY count(*) DESC` and `LIMIT 1` as in the original. The amended query now correctly returns the country with the most airlines without unnecessary joins and filters.",
            "Do remove `COUNT(*)` from the SELECT list instead of including it, as the query only needs to return the country with the highest count rather than both the country and its count value. The amended query now correctly returns just the country column while maintaining the same grouping, ordering by count in descending order, and limiting to one result, matching the RIGHT_SQL's behavior of identifying the country with the most airlines."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country.name, COUNT(airline.id) as airline_count\nFROM country\nJOIN airline ON country.id = airline.country_id\nWHERE airline.home_airline = 1\nGROUP BY country.id\nORDER BY airline_count DESC\nLIMIT 1;",
            "SELECT country, COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "1997": {
        "db_id": "gas_company",
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "ground_truth": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "amends": [
            "Do reference the table as `company` instead of `companies` and use column `company` instead of `company_name`. Do change the filter to `!= 'USA'` instead of `= 'USA'` to exclude US headquarters instead of including them. The amended query now correctly selects from the company table and filters for non-US headquarters, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, main_industry FROM companies WHERE headquarters = 'USA';",
            "SELECT company, Main_Industry FROM company WHERE Headquarters != 'USA';"
        ],
        "rule_sql": []
    },
    "5532": {
        "db_id": "products_gen_characteristics",
        "question": "How many products are there under the category \"Seeds\"?",
        "ground_truth": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"",
        "amends": [
            "Do reference `product_category_code` instead of `category` in the WHERE filter. Do use the literal value \"Seeds\" instead of 'Flowers' for the filter condition. The amended query now correctly counts products with the specified category code rather than using an incorrect column name and value."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'Flowers';",
            "SELECT COUNT(*) FROM Products WHERE product_category_code = 'Seeds';"
        ],
        "rule_sql": []
    },
    "1595": {
        "db_id": "customers_and_invoices",
        "question": "Show all product sizes.",
        "ground_truth": "SELECT DISTINCT product_size FROM Products",
        "amends": [
            "Do select `product_size` instead of `*` and add `DISTINCT` instead of omitting it. Do reference table `Products` instead of `products` and remove the `WHERE size IS NULL` filter instead of keeping it. The amended query now matches the intended behavior of selecting unique product sizes from the Products table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE size IS NULL;",
            "SELECT DISTINCT product_size FROM Products;"
        ],
        "rule_sql": []
    },
    "6499": {
        "db_id": "scientist_1",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "ground_truth": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "amends": [
            "Do add `assignedto AS T2` table with `JOIN` instead of querying only `scientists` table. Do change join condition to `ON T1.ssn = T2.scientist` instead of missing the join entirely. Do modify SELECT list to include `count(*)` and `T1.name` instead of `name, COUNT(project_id)`. Do specify `GROUP BY T1.name` with table alias instead of just `name`. The amended query now correctly joins the scientists with their project assignments and counts all projects per scientist, matching the RIGHT_SQL's behavior.",
            "Do place the `count(*)` aggregate first in the SELECT list instead of second, and use lowercase `name` instead of `Name` for the column reference while maintaining the same `T1` table alias. The FROM clause with JOIN condition remains identical with proper table aliases and join predicate `T1.ssn = T2.scientist`. The GROUP BY clause correctly uses lowercase `name` instead of `Name` but otherwise maintains the same grouping logic. The amended query now matches RIGHT_SQL's behavior with the correct column order and case sensitivity."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, COUNT(project_id) FROM scientists GROUP BY name;",
            "SELECT T1.Name, COUNT(*) \nFROM Scientists AS T1 \nJOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist \nGROUP BY T1.Name",
            "SELECT COUNT(*) AS project_count, T1.name\nFROM Scientists AS T1\nJOIN AssignedTo AS T2 ON T1.ssn = T2.scientist\nGROUP BY T1.name"
        ],
        "rule_sql": []
    },
    "4519": {
        "db_id": "document_management",
        "question": "Find all the name of documents without any sections.",
        "ground_truth": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "amends": [
            "Do select `document_name` instead of `name` in the SELECT list. Do change the WHERE filter to use `document_code NOT IN` with a subquery against `document_sections` instead of checking `section_id IS NULL`. Do add a correlated subquery to check for document codes not present in document_sections instead of relying on a simple NULL check. The amended query now correctly identifies documents that are not associated with any section by checking against the document_sections table rather than assuming a NULL section_id indicates this condition, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM documents WHERE section_id IS NULL;",
            "SELECT document_name FROM Documents WHERE document_code NOT IN (SELECT DISTINCT document_code FROM Document_Sections)"
        ],
        "rule_sql": []
    },
    "5301": {
        "db_id": "manufactory_1",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "ground_truth": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM manufacturers WHERE revenue > (SELECT AVG(revenue) FROM manufacturers)"
        ],
        "rule_sql": []
    },
    "2150": {
        "db_id": "local_govt_in_alabama",
        "question": "Which services type had both successful and failure event details?",
        "ground_truth": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'",
        "amends": [
            "Do select `service_type_code` from the `services` table instead of `service_type` from `events`. Do join `services AS T1` with `EVENTS AS T2` on `T1.service_id = T2.service_id` instead of querying only the `events` table. Do use `INTERSECT` to find services with both 'Success' and 'Fail' events instead of the impossible condition `event_details = 'successful' AND event_details = 'failure'`. Do filter for `event_details = 'Success'` in one branch and `event_details = 'Fail'` in the other instead of the contradictory single filter. The amended query now correctly identifies services that have experienced both successful and failed events by using an intersection of two properly joined queries."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT service_type FROM events WHERE event_details = 'successful' AND event_details = 'failure'",
            "SELECT T1.Service_Type_Code\nFROM Services AS T1\nJOIN Events AS T2 ON T1.Service_ID = T2.Service_ID\nWHERE T2.Event_Details = 'Success'\nINTERSECT\nSELECT T1.Service_Type_Code\nFROM Services AS T1\nJOIN Events AS T2 ON T1.Service_ID = T2.Service_ID\nWHERE T2.Event_Details = 'Fail'"
        ],
        "rule_sql": []
    },
    "4017": {
        "db_id": "ship_mission",
        "question": "For each type, what is the average tonnage?",
        "ground_truth": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE",
        "amends": [
            "Do reference the `ship` table instead of `ships` and use column `Tonnage` instead of `weight` in the aggregate function. Do use `avg(Tonnage)` without an alias instead of `AVG(weight) as average_tonnage` while maintaining the same `GROUP BY type` structure. The amended query now correctly calculates average tonnage from the appropriate table and column while matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT type, AVG(weight) as average_tonnage FROM ships GROUP BY type;",
            "SELECT type, avg(Tonnage) FROM ship GROUP BY type"
        ],
        "rule_sql": []
    },
    "4523": {
        "db_id": "document_management",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "ground_truth": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "amends": [
            "Do add explicit table aliases with `t1.access_count` instead of bare column references. Do add `JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code` and `JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code` instead of querying only the `documents` table. Do change the filter to `t3.functional_area_description = \"Acknowledgement\"` instead of `functional_area = 'Acknowledgement'` to properly reference the joined table and use the correct column name. The amended query now correctly joins the necessary tables to filter by functional area description and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(access_count) FROM documents WHERE functional_area = 'Acknowledgement';",
            "SELECT AVG(t1.access_count) \nFROM Documents AS t1\nJOIN Document_Functional_Areas AS t2 ON t1.document_code = t2.document_code\nJOIN Functional_Areas AS t3 ON t2.functional_area_code = t3.functional_area_code\nWHERE t3.functional_area_description = \"Acknowledgement\""
        ],
        "rule_sql": []
    },
    "4963": {
        "db_id": "soccer_2",
        "question": "How many students received a yes from tryouts?",
        "ground_truth": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "amends": [
            "Do query the `tryout` table instead of the `students` table. Do filter on `decision = 'yes'` instead of `tryout_result = 'no'`. Do count records with positive decisions instead of counting records with negative outcomes. The amended query now correctly counts approved tryout applications rather than counting students with negative results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE tryout_result = 'no';",
            "SELECT COUNT(*) FROM Tryout WHERE decision = 'yes';"
        ],
        "rule_sql": []
    },
    "1244": {
        "db_id": "apartment_rentals",
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "ground_truth": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "amends": [
            "Do select `T1.building_address` instead of `address`. Do join `Apartment_Buildings AS T1` and `Apartments AS T2` instead of querying only `buildings`. Do use `ON T1.building_id = T2.building_id` to establish the relationship between buildings and apartments. Do filter on `T2.bathroom_count > 2` instead of `bathrooms > 2` to correctly check apartment bathroom counts rather than building-level bathroom information. The amended query now properly joins the building and apartment tables to find buildings containing apartments with more than two bathrooms, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM buildings WHERE bathrooms > 2",
            "SELECT T1.building_address \nFROM Apartment_Buildings AS T1\nJOIN Apartments AS T2 ON T1.building_id = T2.building_id\nWHERE T2.bathroom_count > 2\nGROUP BY T1.building_address"
        ],
        "rule_sql": []
    },
    "488": {
        "db_id": "allergy_1",
        "question": "What student id corresponds to the oldest student?",
        "ground_truth": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "amends": [
            "Do select `StuID` instead of `student_id` and use a subquery to find the maximum age instead of ordering by age ascending with limit. Do change the table name to `Student` instead of `students` and add a WHERE clause filtering for `age = (SELECT max(age) FROM Student)` instead of using ORDER BY with LIMIT 1. Do remove the ORDER BY and LIMIT clauses entirely instead of keeping them, as the subquery approach directly identifies the student with the maximum age rather than relying on sorting and limiting. The amended query now correctly returns the student ID with the maximum age by using a subquery to calculate the maximum value and then filtering for matching records, which ensures accurate results even when multiple students share the same maximum age."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM students ORDER BY age ASC LIMIT 1;",
            "SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)"
        ],
        "rule_sql": []
    },
    "5357": {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "ground_truth": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "amends": [
            "Do select `problem_log_id` and `log_entry_date` instead of `problem_id` and `log_date`. Do reference table `problem_log` instead of `problem_logs`. Do keep the `WHERE` filter on `problem_id = 10` unchanged. The amended query now correctly retrieves the specific log identifier and date entries from the proper table while maintaining the same filtering condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT problem_id, log_date FROM problem_logs WHERE problem_id = 10",
            "SELECT problem_log_id, log_entry_date FROM Problem_Log WHERE problem_id = 10"
        ],
        "rule_sql": []
    },
    "6707": {
        "db_id": "driving_school",
        "question": "What is the average price for a lesson taught by Janessa Sawayn?",
        "ground_truth": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "amends": [
            "Do join `Lessons AS T1` with `Staff AS T2` on `T1.staff_id = T2.staff_id` instead of querying only the `lessons` table. Do filter on `T2.first_name = \"Janessa\"` and `T2.last_name = \"Sawayn\"` instead of using `teacher_name = 'Janessa Sawayn'`. Do use the correct table aliases `T1` and `T2` instead of omitting them. The amended query now correctly joins the tables and matches the intended behavior by properly identifying the teacher through their first and last names in the Staff table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM lessons WHERE teacher_name = 'Janessa Sawayn';",
            "SELECT AVG(T1.price) AS average_price\nFROM Lessons AS T1\nJOIN Staff AS T2 ON T1.staff_id = T2.staff_id\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'"
        ],
        "rule_sql": []
    },
    "5563": {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
        "ground_truth": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "amends": [
            "Do use a three-table join structure with `products AS t1`, `product_characteristics AS t2`, and `CHARACTERISTICS AS t3` instead of querying only the `product_characteristics` table. Do join `t1.product_id = t2.product_id` and `t2.characteristic_id = t3.characteristic_id` instead of missing the necessary table relationships. Do reference `t3.characteristic_name` instead of directly selecting from the wrong table. Do filter on `t1.product_name = \"sesame\"` instead of filtering `product_name` from the wrong table. Do filter on `t3.characteristic_type_code = \"Grade\"` instead of using `characteristic_type` from the wrong table. The amended query now correctly joins through the proper table relationships to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT characteristic_name FROM product_characteristics WHERE product_name = 'sesame' AND characteristic_type = 'Grade';",
            "SELECT t3.characteristic_name\nFROM products AS t1\nJOIN product_characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nWHERE t1.product_name = 'sesame'\nAND t3.characteristic_type_code = 'Grade'"
        ],
        "rule_sql": []
    },
    "1615": {
        "db_id": "customers_and_invoices",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "ground_truth": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "amends": [
            "Do join `Products` table as `T2` instead of omitting it, and do reference `T2.product_name` instead of just `product_name`. Do use `sum(T1.product_quantity)` instead of `COUNT(*)` to calculate actual quantity totals instead of counting rows. Do specify `Order_items` as `T1` with proper join condition `ON T1.product_id = T2.product_id` instead of querying `orders` table directly without proper table relationships. Do group by `T2.product_name` instead of the ambiguous `product_name` to ensure correct aggregation by the joined table's column. The amended query now correctly calculates product quantity sums from the related tables instead of counting order rows."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, COUNT(*) as total_quantity FROM orders GROUP BY product_name;",
            "SELECT T2.product_name, SUM(T1.product_quantity) AS total_quantity\nFROM Order_Items T1\nJOIN Products T2 ON T1.product_id = T2.product_id\nGROUP BY T2.product_name"
        ],
        "rule_sql": []
    },
    "1637": {
        "db_id": "wedding",
        "question": "Show the country where people older than 30 and younger than 25 are from.",
        "ground_truth": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM people WHERE age > 30 AND age < 25;"
        ],
        "rule_sql": []
    },
    "3870": {
        "db_id": "insurance_policies",
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "ground_truth": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "amends": [
            "Do select `Date_Claim_Made` instead of `MAX(date)` to get the actual column value rather than an aggregate. Do add `ORDER BY Date_Claim_Made ASC` instead of omitting ordering to sort the results. Do add `LIMIT 1` instead of omitting it to return only the first row. Do remove the aggregate function `MAX()` instead of keeping it since we want the minimum date value through ordering rather than maximum aggregation. The amended query now correctly retrieves the earliest claim date by sorting ascending and limiting to one row instead of finding the maximum date."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(date) FROM claims;",
            "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1641": {
        "db_id": "wedding",
        "question": "Show the name and age for all male people who don't have a wedding.",
        "ground_truth": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "amends": [
            "Do use `is_male = 'T'` instead of `gender = 'male'` for the gender filter. Do replace the `wedding IS NULL` condition with `people_id NOT IN (SELECT male_id FROM wedding)` instead of checking for null values. Do add a subquery `(SELECT male_id FROM wedding)` instead of omitting it, which properly identifies married individuals by their presence in the wedding table rather than relying on a nullable column. The amended query now correctly matches the RIGHT_SQL's behavior by using a boolean flag for gender and properly identifying unmarried individuals through a correlated subquery."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, age FROM people WHERE gender = 'male' AND wedding IS NULL;",
            "SELECT Name, Age FROM people WHERE Is_Male = 'T' AND People_ID NOT IN (SELECT Male_ID FROM wedding)"
        ],
        "rule_sql": []
    },
    "6015": {
        "db_id": "game_1",
        "question": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "ground_truth": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
        "amends": [
            "Do select `StuID` instead of `student_id` and use `HAVING sum(hoursperweek) > 10` instead of `WHERE hours_per_week > 10` to filter after aggregation rather than before. Do change the table reference to `Sportsinfo` instead of `sports_schedule` and aggregate with `sum()` on `hoursperweek` instead of filtering individual rows. Do remove the incorrect `GROUP BY student_id` with pre-aggregation filtering and instead use proper `GROUP BY StuID` with post-aggregation `HAVING` condition. The amended query now correctly calculates total hours per student before applying the threshold filter, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM sports_schedule WHERE hours_per_week > 10 GROUP BY student_id",
            "SELECT StuID FROM SportsInfo GROUP BY StuID HAVING SUM(HoursPerWeek) > 10"
        ],
        "rule_sql": []
    },
    "902": {
        "db_id": "insurance_fnol",
        "question": "Return the sum and average of all settlement amounts.",
        "ground_truth": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "amends": [
            "Do maintain the same SELECT list with `SUM(settlement_amount)` and `AVG(settlement_amount)` instead of changing any aggregate functions. Do remove the `WHERE settlement_amount > 1000000` filter instead of keeping it, as the correct query should include all settlement amounts without filtering. Do preserve the same FROM clause with `settlements` table instead of changing the data source. The amended query now matches RIGHT_SQL's behavior by calculating aggregates across all records rather than only those exceeding 1,000,000."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements WHERE settlement_amount > 1000000;",
            "SELECT SUM(settlement_amount), AVG(settlement_amount) FROM Settlements"
        ],
        "rule_sql": []
    },
    "2967": {
        "db_id": "sakila_1",
        "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
        "ground_truth": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do include only `title` and `film_id` in the SELECT list instead of adding `copy_count` as an alias. Do use `T1` and `T2` as table aliases instead of `f` and `i`. Do reference `count(*)` directly in the ORDER BY clause instead of using the alias `copy_count`. The amended query now correctly returns only the film title and ID while ordering by the actual count of inventory items.",
            "Do group by only `T1.film_id` instead of both `T1.film_id` and `T1.title` since `T1.title` is functionally dependent on `T1.film_id` and the aggregation works correctly with just the film_id grouping. Do maintain the same `JOIN` on `T1.film_id = T2.film_id` instead of changing it. Do keep the `ORDER BY count(*) DESC LIMIT 1` structure instead of altering it, as this correctly identifies the film with the most inventory items. The amended query now matches RIGHT_SQL's behavior by properly grouping only on the film identifier while maintaining the correct aggregation logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT f.title, f.film_id, COUNT(i.inventory_id) as copy_count\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nGROUP BY f.film_id\nORDER BY copy_count DESC\nLIMIT 1;",
            "SELECT T1.film_id, T1.title\nFROM film T1\nJOIN inventory T2 ON T1.film_id = T2.film_id\nGROUP BY T1.film_id, T1.title\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT T1.title, T1.film_id\nFROM film T1\nJOIN inventory T2 ON T1.film_id = T2.film_id\nGROUP BY T1.film_id\nORDER BY count(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2941": {
        "db_id": "sakila_1",
        "question": "Count the number of cities in Australia.",
        "ground_truth": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "amends": [
            "Do join `city` with `country` on `country_id` instead of querying `cities` table directly. Do reference `country` column from the joined `country` table instead of assuming it exists in the `city` table. Do use proper table aliases `T1` and `T2` instead of omitting them. The amended query now correctly counts cities by joining through the country_id relationship instead of relying on a non-existent country column in the city table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE country = 'Australia';",
            "SELECT COUNT(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia';"
        ],
        "rule_sql": []
    },
    "6071": {
        "db_id": "customers_and_addresses",
        "question": "What are the details of all products?",
        "ground_truth": "SELECT DISTINCT product_details FROM products",
        "amends": [
            "Do select `product_details` instead of `*` and add `DISTINCT` instead of omitting it. Do query from `products` instead of `customers`. The amended query now correctly retrieves unique product details from the products table instead of all columns from the customers table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM customers;",
            "SELECT DISTINCT product_details FROM Products;"
        ],
        "rule_sql": []
    },
    "5020": {
        "db_id": "soccer_2",
        "question": "Find the name of the tryout players who are from the college with largest size.",
        "ground_truth": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "amends": [
            "Do select `T2.pName` from the `player` table instead of `name` from `tryout_players`. Do use `JOIN` between `tryout AS T1` and `player AS T2` on `T1.pID = T2.pID` instead of querying only `tryout_players`. Do filter with `T1.cName = (subquery)` instead of `college_size = (subquery)`. Do use a subquery that selects `cName` with `ORDER BY enr DESC LIMIT 1` instead of `MAX(college_size)` from `colleges`. The amended query now correctly joins player information with tryout data and finds players from the college with the highest enrollment rather than using college size directly."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM tryout_players WHERE college_size = (SELECT MAX(college_size) FROM colleges);",
            "SELECT T2.pName \nFROM Tryout AS T1 \nJOIN Player AS T2 ON T1.pID = T2.pID \nWHERE T1.cName = (\n    SELECT cName \n    FROM College \n    ORDER BY enr DESC \n    LIMIT 1\n)"
        ],
        "rule_sql": []
    },
    "1129": {
        "db_id": "climbing",
        "question": "What are the names of climbers and the corresponding names of mountains that they climb?",
        "ground_truth": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "amends": [
            "Do reference table `climber AS T1` instead of `climbers`, and `mountain AS T2` instead of `mountains`. Do join on `T1.Mountain_ID = T2.Mountain_ID` instead of `climbers.climber_id = mountains.mountain_id` to correctly relate climbers to their associated mountains. Do select `T1.Name` and `T2.Name` instead of `climber_name` and `mountain_name` to use the proper column names. The amended query now correctly joins climbers to mountains through the Mountain_ID relationship instead of incorrectly joining climber_id to mountain_id."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT climber_name, mountain_name FROM climbers JOIN mountains ON climbers.climber_id = mountains.mountain_id;",
            "SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"
        ],
        "rule_sql": []
    },
    "1864": {
        "db_id": "wrestler",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "ground_truth": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "amends": [
            "Do reference the table as `elimination` instead of `eliminations` to match the correct table name. Do use column name `Team` instead of `team` to maintain consistent casing. Do remove the alias `as eliminations` instead of keeping it since the right query doesn't include an alias for the count. The amended query now correctly counts eliminations by team from the elimination table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team, COUNT(*) as eliminations FROM eliminations GROUP BY team;",
            "SELECT Team, COUNT(*) FROM elimination GROUP BY Team;"
        ],
        "rule_sql": []
    },
    "666": {
        "db_id": "journal_committee",
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "ground_truth": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'",
        "amends": [
            "Do use `avg(T1.sales)` with table alias instead of `AVG(sales)` without qualification. Do join `journal AS T1` with `journal_committee AS T2` on `T1.journal_ID = T2.journal_ID` instead of querying `journals` alone with a subquery on `editors`. Do filter with `T2.work_type = 'Photo'` in the WHERE clause instead of using an IN subquery with `editor_id` from a non-existent `editors` table. Do remove the subquery entirely instead of keeping the incorrect correlation through `editor_id`. The amended query now correctly joins the relevant tables and filters by work_type directly, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(sales) FROM journals WHERE editor_id IN (SELECT editor_id FROM editors WHERE work_type = 'Photo');",
            "SELECT AVG(T1.Sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID WHERE T2.Work_Type = 'Photo'"
        ],
        "rule_sql": []
    },
    "5015": {
        "db_id": "soccer_2",
        "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "ground_truth": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of no aliases. Do select `max(T1.HS)` and `pPos` instead of `position` and `MAX(hours)`. Do join `player AS T1` with `tryout AS T2` on `T1.pID = T2.pID` instead of querying only the `students` table. Do filter on `T1.HS > 1000` instead of `hours > 1000`. Do group by `T2.pPos` instead of `position`. The amended query now correctly joins the player and tryout tables to calculate maximum high scores by position, matching the RIGHT_SQL's behavior.",
            "Do place `pPos` after `max(T1.HS)` in the SELECT list instead of before it. Do remove the alias `T2.` prefix from `pPos` instead of keeping it. The amended query now correctly selects the maximum HS value grouped by position without unnecessary table aliasing in the output column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position, MAX(hours) FROM students WHERE hours > 1000 GROUP BY position;",
            "SELECT T2.pPos, max(T1.HS) \nFROM player AS T1 \nJOIN tryout AS T2 ON T1.pID = T2.pID \nWHERE T1.HS > 1000 \nGROUP BY T2.pPos",
            "SELECT max(T1.HS), pPos\nFROM player AS T1\nJOIN tryout AS T2 ON T1.pID = T2.pID\nWHERE T1.HS > 1000\nGROUP BY pPos"
        ],
        "rule_sql": []
    },
    "4259": {
        "db_id": "club_1",
        "question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
        "ground_truth": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "amends": [
            "Do use explicit table joins with `club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid` instead of querying a single `members` table. Do select `t3.lname` instead of `first_name` to retrieve the correct column name from the appropriate table. Do filter on `t1.clubname = \"Bootup Baltimore\"` instead of `club_name = 'Bootup Baltimore'` to use the proper column name and table reference. The amended query now correctly joins the three related tables to find student last names for the specified club, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM members WHERE club_name = 'Bootup Baltimore';",
            "SELECT t3.LName \nFROM Club AS t1 \nJOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID \nJOIN Student AS t3 ON t2.StuID = t3.StuID \nWHERE t1.ClubName = 'Bootup Baltimore'"
        ],
        "rule_sql": []
    },
    "4358": {
        "db_id": "tracking_grants_for_research",
        "question": "Which projects have no outcome? List the project details.",
        "ground_truth": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "amends": [
            "Do select `project_details` instead of `*` for all columns. Do reference the `Projects` table instead of `projects` with incorrect casing. Do use a `NOT IN` subquery condition instead of checking `outcome IS NULL`. Do reference the `Project_outcomes` table in the subquery instead of omitting it entirely. The amended query now correctly identifies projects without outcomes by checking against a dedicated outcomes table rather than relying on a potentially missing NULL column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM projects WHERE outcome IS NULL;",
            "SELECT project_details FROM Projects WHERE project_id NOT IN (SELECT project_id FROM Project_Outcomes)"
        ],
        "rule_sql": []
    },
    "1678": {
        "db_id": "theme_gallery",
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "ground_truth": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",
        "amends": [
            "Do reference table `exhibition` instead of `exhibitions` in the FROM clause. Do order by `ticket_price DESC` instead of `theme DESC` in the ORDER BY clause. Do include column `YEAR` instead of `year` in the SELECT list. The amended query now correctly references the intended table and sorts results by ticket price rather than theme."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT theme, year FROM exhibitions ORDER BY theme DESC;",
            "SELECT Theme, Year FROM exhibition ORDER BY Ticket_Price DESC;"
        ],
        "rule_sql": []
    },
    "1466": {
        "db_id": "college_2",
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "ground_truth": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "amends": [
            "Do reference table `instructor` instead of `instructors` in the FROM clause. Do use column `dept_name` instead of `department` in the WHERE filter. Do use comparison operator `>` instead of `<` for the salary condition, filtering for salaries greater than 80000 instead of less than 80000. The amended query now correctly selects names from the instructor table where the department is 'Comp. Sci.' and salary exceeds 80000, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM instructors WHERE department = 'Comp. Sci.' AND salary < 80000;",
            "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000"
        ],
        "rule_sql": []
    },
    "6229": {
        "db_id": "ship_1",
        "question": "What are the names, classes, and ranks of all captains?",
        "ground_truth": "SELECT name ,  CLASS ,  rank FROM captain",
        "amends": [
            "Do reference table `captain` instead of `captains` as the FROM source. Do maintain the same SELECT list with columns `name`, `class`, and `rank` without any changes to column selection, aliases, or expressions. Do preserve the WHERE filter on `rank = 'Lieutenant'` without modification to predicate logic or NULL handling. The amended query now correctly references the intended table and matches RIGHT_SQL's behavior.",
            "Do maintain the exact same SELECT list with `name`, `class`, and `rank` instead of changing any columns or expressions. Do preserve the FROM clause with `captain` table instead of modifying the source. Do keep the WHERE filter `rank = 'Lieutenant'` instead of altering the predicate. The amended query now matches RIGHT_SQL's behavior as there are no substantive differences between the queries - only whitespace and formatting variations that do not affect the logical execution or results.",
            "Do maintain the exact same SELECT list with columns `name`, `class`, and `rank` instead of changing any column selection. Do preserve the FROM clause with table `captain` instead of modifying the data source. Do keep the WHERE filter condition `rank = 'Lieutenant'` instead of altering or removing the predicate. The amended query now correctly matches the RIGHT_SQL's behavior with identical structure and semantics.",
            "Do maintain the exact same SELECT list with columns `name`, `class`, and `rank` instead of changing any column selection. Do preserve the FROM clause with table `captain` instead of modifying the data source. Do keep the WHERE filter condition `rank = 'Lieutenant'` instead of altering the predicate logic. The amended query now correctly matches the RIGHT_SQL's behavior with identical structure and semantics.",
            "Do maintain the exact same SELECT list with `name`, `class`, and `rank` instead of changing any columns or expressions. Do preserve the FROM clause with `captain` table instead of adding or removing any tables. Do keep the WHERE filter `rank = 'Lieutenant'` instead of removing or modifying the condition. The amended query now matches RIGHT_SQL's behavior as both queries are functionally identical with only minor whitespace formatting differences that do not affect the logic or results."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, class, rank FROM captains WHERE rank = 'Lieutenant';",
            "SELECT name, class, rank FROM captain WHERE rank = 'Lieutenant';",
            "SELECT name, class, rank FROM captain WHERE rank = 'Lieutenant'",
            "SELECT name, class, rank FROM captain WHERE rank = 'Lieutenant'",
            "SELECT name, class, rank FROM captain WHERE rank = 'Lieutenant'",
            "SELECT name, class, rank FROM captain WHERE rank = 'Lieutenant'"
        ],
        "rule_sql": []
    },
    "5212": {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "ground_truth": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM songs WHERE title = 'Le Pop';"
        ],
        "rule_sql": []
    },
    "5736": {
        "db_id": "dorm_1",
        "question": "Find the average age of students living in each dorm and the name of dorm.",
        "ground_truth": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name",
        "amends": [
            "Do specify `avg(T1.age)` with explicit table alias instead of `AVG(age)` without table qualification. Do add table sources with explicit joins instead of a single table reference - specifically do `JOIN lives_in AS T2 ON T1.stuid = T2.stuid` and `JOIN dorm AS T3 ON T3.dormid = T2.dormid` instead of omitting these necessary joins. Do change the GROUP BY clause to `T3.dorm_name` instead of `dorm_id` to properly group by the dorm name column from the joined dorm table. Do include the dorm name in the SELECT list as `T3.dorm_name` instead of selecting it without proper table qualification. The amended query now correctly joins the necessary tables to calculate average age by dorm name and matches the RIGHT_SQL's behavior.",
            "Do use `avg(T1.age)` without an alias instead of `AVG(T1.Age) AS average_age` to match the column case and remove the explicit alias. Do place `T3.dorm_name` after the aggregate function instead of listing it first in the SELECT clause. Do maintain the same join conditions with `JOIN lives_in AS T2 ON T1.stuid = T2.stuid` and `JOIN dorm AS T3 ON T3.dormid = T2.dormid` while preserving the identical GROUP BY T3.dorm_name structure. The amended query now correctly calculates the average age per dormitory without unnecessary aliasing while maintaining the same logical behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dorm_name, AVG(age) FROM students GROUP BY dorm_id;",
            "SELECT T3.dorm_name, AVG(T1.Age) AS average_age\nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nJOIN Dorm AS T3 ON T3.dormid = T2.dormid\nGROUP BY T3.dorm_name",
            "SELECT avg(T1.Age), T3.dorm_name FROM Student AS T1 JOIN lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name"
        ],
        "rule_sql": []
    },
    "5801": {
        "db_id": "customer_complaints",
        "question": "Count the number of customers that have the customer type that is most common.",
        "ground_truth": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do group by `customer_type_code` instead of `customer_type` to use the correct column for grouping customer types. The amended query now matches RIGHT_SQL's behavior by properly counting records per customer type code rather than an incorrect column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers GROUP BY customer_type ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT COUNT(*) AS customer_count\nFROM Customers\nWHERE customer_type_code = (\n    SELECT customer_type_code\n    FROM Customers\n    GROUP BY customer_type_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
        ],
        "rule_sql": []
    },
    "2518": {
        "db_id": "movie_1",
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "ground_truth": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "amends": [
            "Do use `mID` instead of `movie_id` for the grouping column and `stars` instead of `rating_star` for the rating values. Do change the HAVING condition to `>= 2` instead of `> 1` to include movies with exactly 2 ratings. Do remove the alias `avg_rating` instead of keeping it. The amended query now correctly filters for movies with at least two ratings and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_id, AVG(rating_star) as avg_rating\nFROM ratings\nGROUP BY movie_id\nHAVING COUNT(*) > 1;",
            "SELECT mID, AVG(stars) FROM Rating GROUP BY mID HAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "4084": {
        "db_id": "student_1",
        "question": "Which classroom has the most students?",
        "ground_truth": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select only `classroom` instead of including `COUNT(*)` in the SELECT list. Do reference table `list` instead of `students` in the FROM clause. Do maintain the same GROUP BY on `classroom`, ORDER BY on `count(*) DESC`, and LIMIT 1 clause structure. The amended query now correctly returns only the classroom with the highest count instead of both the classroom and count value, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT classroom, COUNT(*) FROM students GROUP BY classroom ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT Classroom FROM list GROUP BY Classroom ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "4150": {
        "db_id": "film_rank",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "ground_truth": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "amends": [
            "Do reference table `film` instead of `films` and use column `Studio` instead of `studio` to match the correct schema. Do use double quotes `\"%Universal%\"` for the pattern matching instead of single quotes `'%Universal%'` to maintain consistency with the right SQL. The amended query now correctly selects from the `film` table with proper column casing and quotation style, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, studio FROM films WHERE studio LIKE '%Universal%';",
            "SELECT Title, Studio FROM film WHERE Studio LIKE \"%Universal%\""
        ],
        "rule_sql": []
    },
    "1139": {
        "db_id": "climbing",
        "question": "How many climbers are from each country?",
        "ground_truth": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
        "amends": [
            "Do reference the `climber` table instead of the `climbers` table. Do use consistent capitalization with `Country` instead of `country` in both the SELECT list and GROUP BY clause. The amended query now correctly references the intended table and maintains consistent column naming to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) FROM climbers GROUP BY country;",
            "SELECT Country, COUNT(*) AS number_of_climbers FROM climber GROUP BY Country;"
        ],
        "rule_sql": []
    },
    "1331": {
        "db_id": "college_2",
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "ground_truth": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "amends": [
            "Do reference the table as `department` instead of `departments` and use column `dept_name` instead of `department_name`. Do change the sort direction to `DESC` instead of `ASC` in the ORDER BY clause. The amended query now correctly retrieves from the department table with the proper column names and descending budget order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name, building FROM departments ORDER BY budget ASC LIMIT 1;",
            "SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1189": {
        "db_id": "election_representative",
        "question": "What parties have at least three representatives?",
        "ground_truth": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3",
        "amends": [
            "Do use `Party` column instead of `party` and reference `representative` table instead of `representatives`. Do change the aggregate condition to `>= 3` instead of `> 2` to include groups with exactly 3 members. The amended query now correctly filters for political parties with three or more representatives, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party, COUNT(*) FROM representatives GROUP BY party HAVING COUNT(*) > 2",
            "SELECT Party FROM representative GROUP BY Party HAVING COUNT(Representative_ID) >= 3;"
        ],
        "rule_sql": []
    },
    "3651": {
        "db_id": "baseball_1",
        "question": "Find all the players' first name and last name who have empty death record.",
        "ground_truth": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
        "amends": [
            "Do select `name_first` and `name_last` instead of `first_name` and `last_name`. Do use table `player` instead of `players`. Do filter on `death_year = ''` instead of `death_date IS NOT NULL`. The amended query now correctly retrieves players with empty death year values rather than non-null death dates, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM players WHERE death_date IS NOT NULL;",
            "SELECT name_first, name_last FROM player WHERE death_year = '';"
        ],
        "rule_sql": []
    },
    "3877": {
        "db_id": "insurance_policies",
        "question": "Tell me the the claim date and settlement date for each settlement case.",
        "ground_truth": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
        "amends": [
            "Do use column names `Date_Claim_Made` and `Date_Claim_Settled` instead of `claim_date` and `settlement_date`. Do reference table `Settlements` instead of `settlements`. Do remove the WHERE filter `claim_date > settlement_date` instead of keeping it. The amended query now correctly retrieves all settlement records without the incorrect date comparison filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT claim_date, settlement_date FROM settlements WHERE claim_date > settlement_date",
            "SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements;"
        ],
        "rule_sql": []
    },
    "5206": {
        "db_id": "music_2",
        "question": "What is the most used instrument?",
        "ground_truth": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do query the `instruments` table instead of the `songs` table. Do use `count(*)` directly in the ORDER BY clause instead of selecting it as `usage_count`. Do remove the explicit column alias `usage_count` instead of keeping it. Do omit the COUNT(*) from the SELECT list instead of including it, as only the instrument column is needed. The amended query now correctly returns the most frequently occurring instrument from the instruments table rather than counting instrument usage in songs."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT instrument, COUNT(*) as usage_count FROM songs GROUP BY instrument ORDER BY usage_count DESC LIMIT 1;",
            "SELECT Instrument FROM Instruments GROUP BY Instrument ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6192": {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
        "ground_truth": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
        "amends": [
            "Do use `INTERSECT` to combine results from two separate queries instead of using contradictory `WHERE` conditions in a single query. Do remove the `DISTINCT` modifier since `INTERSECT` inherently returns distinct results instead of keeping it. Do change the table aliases from `a` and `v` to `T1` and `T2` instead of the original aliases. Do correct the table names to `artist` and `volume` instead of `artists` and `volumes`. Do split the contradictory conditions into separate queries with `Weeks_on_Top > 2` in one branch and `Weeks_on_Top < 2` in another instead of having both conditions in the same `WHERE` clause. Do use proper column case `Famous_Title` and `Artist_ID` instead of lowercase versions. The amended query now correctly finds artists with volumes that have both more than 2 weeks on top and less than 2 weeks on top through set intersection, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT a.famous_title\nFROM artists a\nJOIN volumes v ON a.artist_id = v.artist_id\nWHERE v.weeks_on_top > 2\nAND v.weeks_on_top < 2;",
            "SELECT T1.Famous_Title\nFROM artist T1\nJOIN volume T2 ON T1.Artist_ID = T2.Artist_ID\nWHERE T2.Weeks_on_Top > 2\nINTERSECT\nSELECT T1.Famous_Title\nFROM artist T1\nJOIN volume T2 ON T1.Artist_ID = T2.Artist_ID\nWHERE T2.Weeks_on_Top < 2"
        ],
        "rule_sql": []
    },
    "870": {
        "db_id": "chinook_1",
        "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "ground_truth": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "amends": [
            "Do select `FirstName` and `SupportRepId` from the `CUSTOMER` table instead of `first_name` and `support_rep_id` from the `employees` table. Do join `EMPLOYEE` on `T1.SupportRepId = T2.EmployeeId` instead of querying the `employees` table directly. Do add `GROUP BY T1.SupportRepId` and move the count filter to `HAVING COUNT(*) >= 10` instead of using `WHERE customer_count >= 10` against a non-existent column. Do use proper table aliases `T1` and `T2` instead of no aliases. The amended query now correctly counts customers per support representative and filters for those with at least 10 customers, matching the intended behavior.",
            "Do select `T1.FirstName` instead of `T2.FirstName` to correctly reference the customer's first name from the Customer table rather than mistakenly attempting to get it from the Employee table. Do add the `AS` keyword for table aliases instead of omitting it for better readability, though this is a cosmetic change. The amended query now correctly retrieves customer first names while maintaining the same grouping and filtering logic to find support representatives with at least 10 customers, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, support_rep_id FROM employees WHERE customer_count >= 10;",
            "SELECT T2.FirstName, T1.SupportRepId \nFROM Customer T1\nJOIN Employee T2 ON T1.SupportRepId = T2.EmployeeId\nGROUP BY T1.SupportRepId\nHAVING COUNT(*) >= 10",
            "SELECT T1.FirstName, T1.SupportRepId \nFROM Customer AS T1\nJOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId\nGROUP BY T1.SupportRepId\nHAVING COUNT(*) >= 10"
        ],
        "rule_sql": []
    },
    "4086": {
        "db_id": "student_1",
        "question": "Report the number of students in each classroom.",
        "ground_truth": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
        "amends": [
            "Do select `classroom` and `count(*)` instead of selecting `classroom` and `COUNT(*)` with incorrect grouping. Do use `FROM list` instead of `FROM students` as the data source. Do group by `classroom` instead of incorrectly grouping by `student_id` to properly count students per classroom. The amended query now correctly aggregates student counts by classroom rather than producing incorrect per-student counts."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT classroom, COUNT(*) FROM students GROUP BY student_id;",
            "SELECT Classroom, COUNT(*) FROM list GROUP BY Classroom;"
        ],
        "rule_sql": []
    },
    "4157": {
        "db_id": "film_rank",
        "question": "Return the title of the film with the highest high estimate?",
        "ground_truth": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
        "amends": [
            "Do add `film_market_estimation` table with `JOIN` on `film.Film_ID = film_market_estimation.Film_ID` instead of querying only the `films` table. Do specify the table alias `t1` for the `title` column as `t1.title` instead of just `title`. Do use the correct table name `film` instead of `films` in the FROM clause. The amended query now correctly joins the film data with market estimation data to access the `high_estimate` column for proper ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films ORDER BY high_estimate DESC LIMIT 1;",
            "SELECT t1.title FROM film t1 JOIN film_market_estimation t2 ON t1.Film_ID = t2.Film_ID ORDER BY t2.High_Estimate DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "3912": {
        "db_id": "hospital_1",
        "question": "List the name of physicians who never took any appointment.",
        "ground_truth": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` subquery. Do reference the `physician` table directly instead of `physicians`. Do join `appointment` to `physician` on `T1.Physician = T2.EmployeeID` instead of filtering by `physician_id` in a subquery. Do select from `appointment AS T1` and `physician AS T2` with explicit aliases instead of implicit table references. Do use the correct column name `EmployeeID` for joining instead of assuming `physician_id` exists. The amended query now correctly identifies physicians without appointments using proper set operations and join conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM physicians WHERE physician_id NOT IN (SELECT physician_id FROM appointments);",
            "SELECT T2.Name\nFROM physician AS T2\nEXCEPT\nSELECT T2.Name\nFROM appointment AS T1\nJOIN physician AS T2 ON T1.Physician = T2.EmployeeID"
        ],
        "rule_sql": []
    },
    "6920": {
        "db_id": "tracking_orders",
        "question": "For each product, show its name and the number of times it was ordered.",
        "ground_truth": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "amends": [
            "Do add `orders AS T1 JOIN order_items AS T2 JOIN products AS T3` with join conditions `T1.order_id = T2.order_id AND T2.product_id = T3.product_id` instead of querying only `FROM products` without joins. Do change the GROUP BY clause to use `T3.product_id` instead of `product_id` to properly group by the joined table's identifier. Do maintain `COUNT(*)` and `product_name` selection but reference them as `T3.product_name` instead of just `product_name` to specify the table source. The amended query now correctly joins the three tables to count orders per product instead of just counting products directly, matching the RIGHT_SQL's behavior of analyzing order data rather than product catalog data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, COUNT(*) FROM products GROUP BY product_id;",
            "SELECT T3.product_name, COUNT(*) AS order_count\nFROM Orders AS T1\nJOIN Order_Items AS T2 ON T1.order_id = T2.order_id\nJOIN Products AS T3 ON T2.product_id = T3.product_id\nGROUP BY T3.product_id"
        ],
        "rule_sql": []
    },
    "6019": {
        "db_id": "game_1",
        "question": "Which sport has most number of students on scholarship?",
        "ground_truth": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do query the `Sportsinfo` table instead of the `students` table. Do select `sportname` instead of `sport` and `COUNT(*)`. Do filter on `onscholarship = 'Y'` instead of `scholarship = 'yes'`. Do group by `sportname` instead of `sport`. Do order by `count(*) DESC` instead of `student_count DESC`. The amended query now correctly retrieves sports with scholarship information from the appropriate table using the proper column names and filter values.",
            "Do select only `sportname` instead of including `SportName, COUNT(*)` in the SELECT list. Do maintain the same `WHERE` filter on `onscholarship = 'Y'` instead of changing it. Do keep the `GROUP BY sportname` clause unchanged instead of modifying it. Do preserve the `ORDER BY count(*) DESC` and `LIMIT 1` clauses without alteration instead of changing them. The amended query now correctly returns only the sportname with the highest count of scholarship recipients instead of returning both the sportname and count value."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sport, COUNT(*) as student_count FROM students WHERE scholarship = 'yes' GROUP BY sport ORDER BY student_count DESC LIMIT 1;",
            "SELECT SportName, COUNT(*) \nFROM SportsInfo \nWHERE OnScholarship = 'Y' \nGROUP BY SportName \nORDER BY COUNT(*) DESC \nLIMIT 1",
            "SELECT sportname FROM SportsInfo WHERE OnScholarship = 'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6196": {
        "db_id": "music_4",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "ground_truth": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "amends": [
            "Do reference table `volume` instead of `volumes` and use column `Issue_Date` instead of `issue_date` in the SELECT clause. Do use column `Weeks_on_Top` instead of `weeks_on_top` in the ORDER BY clause. The amended query now correctly references the proper table and column names to match the intended schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT issue_date FROM volumes ORDER BY weeks_on_top ASC LIMIT 1;",
            "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5388": {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "ground_truth": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "amends": [
            "Do select `T1.problem_id` instead of `id` and add table alias `T1`. Do change the FROM source to `problems AS T1 JOIN staff AS T2` instead of just `problems` and add the join condition `ON T1.reported_by_staff_id = T2.staff_id`. Do change the WHERE filter to use `date_problem_reported` instead of `reported_date` and reference the correct column name. Do replace the subquery with a correlated version that joins `problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id` instead of a simple table reference, and add the predicate `WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\"` instead of just `reporter = 'Lysanne Turcotte'`. Do add `min()` aggregation to the subquery instead of selecting a single date value. The amended query now correctly joins staff tables to resolve names and uses proper date comparison logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM problems WHERE reported_date < (SELECT reported_date FROM problems WHERE reporter = 'Lysanne Turcotte')",
            "SELECT T1.problem_id\nFROM problems AS T1\nJOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id\nWHERE T1.date_problem_reported < (\n    SELECT MIN(T3.date_problem_reported)\n    FROM problems AS T3\n    JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id\n    WHERE T4.staff_first_name = 'Lysanne' AND T4.staff_last_name = 'Turcotte'\n)"
        ],
        "rule_sql": []
    },
    "2923": {
        "db_id": "icfp_1",
        "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
        "ground_truth": "SELECT fname ,  lname FROM authors ORDER BY lname",
        "amends": [
            "Do select `fname` and `lname` instead of `first_name` and `last_name` in the SELECT list. Do order by `lname` instead of `first_name ASC` in the ORDER BY clause, removing the explicit ASC specification. The amended query now matches RIGHT_SQL's behavior by using the correct column names and sorting criteria."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM authors ORDER BY first_name ASC;",
            "SELECT fname, lname FROM Authors ORDER BY lname;"
        ],
        "rule_sql": []
    },
    "6903": {
        "db_id": "tracking_orders",
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "ground_truth": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "amends": [
            "Do join `customers AS T1` with `orders AS T2` on `T1.customer_id = T2.customer_id` instead of querying only the `orders` table without any join. Do select `T2.date_order_placed` instead of `order_date`. Do use double quotes around `\"Jeramie\"` instead of single quotes. Do filter on `T1.customer_name` instead of directly filtering on `customer_name` in the orders table. The amended query now correctly retrieves order dates by joining customer information and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_date FROM orders WHERE customer_name = 'Jeramie';",
            "SELECT T2.date_order_placed \nFROM Customers AS T1 \nJOIN Orders AS T2 ON T1.customer_id = T2.customer_id \nWHERE T1.customer_name = \"Jeramie\""
        ],
        "rule_sql": []
    },
    "4816": {
        "db_id": "aircraft",
        "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
        "ground_truth": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
        "amends": [
            "Do select `T1.Aircraft` instead of `aircraft_name` and use proper table aliases. Do join `airport_aircraft AS T2` on `T1.Aircraft_ID = T2.Aircraft_ID` instead of querying a single table, and add a second join to `airport AS T3` on `T2.Airport_ID = T3.Airport_ID` to establish the proper relationship. Do filter on `T3.Airport_Name = \"London Gatwick\"` instead of `airport = 'London Gatwick'` to correctly reference the airport table. The amended query now properly joins the three related tables to find aircraft associated with the specified airport, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT aircraft_name FROM aircrafts WHERE airport = 'London Gatwick';",
            "SELECT T1.Aircraft \nFROM aircraft AS T1\nJOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nJOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID\nWHERE T3.Airport_Name = 'London Gatwick'"
        ],
        "rule_sql": []
    },
    "1112": {
        "db_id": "climbing",
        "question": "List the names of climbers in descending order of points.",
        "ground_truth": "SELECT Name FROM climber ORDER BY Points DESC",
        "amends": [
            "Do use column name `Name` instead of `name` and table name `climber` instead of `climbers`. Do order by `Points DESC` instead of `points ASC` to sort in descending order rather than ascending. The amended query now correctly references the proper table and column names with the intended descending sort order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM climbers ORDER BY points ASC;",
            "SELECT Name FROM climber ORDER BY Points DESC;"
        ],
        "rule_sql": []
    },
    "2001": {
        "db_id": "gas_company",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "ground_truth": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "amends": [
            "Do reference the `company` table instead of the `companies` table in the FROM clause. The amended query now correctly aggregates market_value statistics from the appropriate table while maintaining the same aggregate functions and NULL filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM companies WHERE market_value IS NOT NULL",
            "SELECT MIN(Market_Value) AS min_market_value, MAX(Market_Value) AS max_market_value, AVG(Market_Value) AS avg_market_value FROM company WHERE Market_Value IS NOT NULL"
        ],
        "rule_sql": []
    },
    "5056": {
        "db_id": "device",
        "question": "What are the names of shops in ascending order of open year?",
        "ground_truth": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "amends": [
            "Do select `Shop_Name` instead of `name` and use `Open_Year` instead of `open_year`. Do order by `ASC` instead of `DESC` direction. The amended query now correctly references the proper column names and sorting order to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM shops ORDER BY open_year DESC;",
            "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC;"
        ],
        "rule_sql": []
    },
    "3008": {
        "db_id": "loan_1",
        "question": "How many customers are there?",
        "ground_truth": "SELECT sum(no_of_customers) FROM bank",
        "amends": [
            "Do select `sum(no_of_customers)` instead of `COUNT(*)`. Do query from `bank` table instead of `orders` table. The amended query now correctly calculates the total number of customers from the bank table rather than counting all rows from the orders table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders;",
            "SELECT SUM(no_of_customers) FROM bank;"
        ],
        "rule_sql": []
    },
    "1850": {
        "db_id": "wrestler",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "ground_truth": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "amends": [
            "Do reference table `wrestler` instead of `wrestlers` to match the correct table name. Do use column name `Reign` instead of `reign` to maintain proper case sensitivity. Do use filter condition `LOCATION != \"Tokyo , Japan\"` instead of `location != 'Tokyo,Japan'` to match the exact spacing and formatting in the location value. The amended query now correctly filters wrestlers not from Tokyo, Japan while maintaining the distinct selection of reign values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT reign FROM wrestlers WHERE location != 'Tokyo,Japan';",
            "SELECT DISTINCT Reign FROM wrestler WHERE Location != \"Tokyo , Japan\";"
        ],
        "rule_sql": []
    },
    "1035": {
        "db_id": "phone_1",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "ground_truth": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",
        "amends": [
            "Do remove the `WHERE mode = 'used'` filter instead of keeping it, as the right query aggregates all records from the screen_mode table without any conditional filtering. Do use lowercase function names `max`, `min`, and `avg` instead of uppercase `MAX`, `MIN`, and `AVG` for consistency with the right query's syntax. Do remove the column aliases `max_kb`, `min_kb`, and `avg_kb` instead of including them, as the right query returns the results without explicit aliases. The amended query now matches the right SQL's behavior of calculating aggregate statistics across all records in the screen_mode table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(used_kb) as max_kb, MIN(used_kb) as min_kb, AVG(used_kb) as avg_kb FROM screen_mode WHERE mode = 'used';",
            "SELECT max(used_kb), min(used_kb), avg(used_kb) FROM screen_mode"
        ],
        "rule_sql": []
    },
    "1156": {
        "db_id": "body_builder",
        "question": "What are the names of body builders?",
        "ground_truth": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "amends": [
            "Do select `T2.Name` from the `people` table instead of `name` from the `body_builders` table. Do join `people AS T2` to `body_builder AS T1` on `T1.People_ID = T2.People_ID` instead of querying only the `body_builders` table. Do remove the `WHERE occupation = 'doctor'` filter instead of keeping it, as the correct logic requires retrieving all body builders from the joined tables without occupation filtering. The amended query now correctly retrieves body builder names by joining the relevant tables and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM body_builders WHERE occupation = 'doctor';",
            "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"
        ],
        "rule_sql": []
    },
    "3579": {
        "db_id": "music_1",
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "ground_truth": "SELECT song_name FROM song ORDER BY resolution",
        "amends": [
            "Do reference `song_name` instead of `name` in the SELECT list. Do reference table `song` instead of `songs` in the FROM clause. The amended query now correctly matches the intended behavior with proper column and table references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM songs ORDER BY resolution;",
            "SELECT song_name FROM song ORDER BY resolution;"
        ],
        "rule_sql": []
    },
    "6674": {
        "db_id": "driving_school",
        "question": "Which customer status code has least number of customers?",
        "ground_truth": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "amends": [
            "Do select `customer_status_code` instead of `status_code` and omit the `COUNT(*) as customer_count` alias from the SELECT list. Do group by `customer_status_code` instead of `status_code`. Do order by `count(*) ASC` instead of `customer_count DESC` while keeping the `LIMIT 1` clause. The amended query now correctly selects the customer status code with the smallest count of customers instead of the largest count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT status_code, COUNT(*) as customer_count FROM customers GROUP BY status_code ORDER BY customer_count DESC LIMIT 1;",
            "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(*) ASC LIMIT 1"
        ],
        "rule_sql": []
    },
    "4690": {
        "db_id": "college_3",
        "question": "What are the full names and gradepoints for all enrollments?",
        "ground_truth": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "amends": [
            "Do add joins to `GRADECONVERSION` and `STUDENT` tables instead of querying only the `enrollments` table. Do use `T3.Fname` and `T3.LName` instead of `first_name` and `last_name` from the original table. Do include `T2.gradepoint` instead of the raw `grade` column. Do join on `T1.Grade = T2.lettergrade` to convert letter grades to grade points instead of using the letter grade directly. Do join on `T1.StuID = T3.StuID` to connect enrollments to student information instead of omitting this relationship. The amended query now correctly joins multiple tables to convert letter grades to numeric grade points and retrieve student names from the appropriate source."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, grade FROM enrollments;",
            "SELECT T3.Fname, T3.LName, T2.gradepoint \nFROM Enrolled_in T1\nJOIN Gradeconversion T2 ON T1.Grade = T2.lettergrade\nJOIN Student T3 ON T1.StuID = T3.StuID"
        ],
        "rule_sql": []
    },
    "4377": {
        "db_id": "tracking_grants_for_research",
        "question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
        "ground_truth": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "amends": [
            "Do reference table `Project_Staff` instead of `project_members`. Do use column `role_code` instead of `role` for the role condition. Do use column `date_from` instead of `start_date` for the date comparison. The amended query now correctly references the appropriate table and column names while maintaining the same logical conditions for counting records where the role is leader or the date is before the specified timestamp."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM project_members WHERE role = 'leader' OR start_date < '1989-04-24 23:51:54';",
            "SELECT COUNT(*) \nFROM Project_Staff \nWHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'"
        ],
        "rule_sql": []
    },
    "4899": {
        "db_id": "school_player",
        "question": "What are the denomination more than one school have?",
        "ground_truth": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "amends": [
            "Do use `Denomination` instead of `denomination` for the column name in the SELECT list and GROUP BY clause. Do reference table `school` instead of `schools` in the FROM clause. Do remove the `COUNT(*)` from the SELECT list instead of including it, keeping only the grouping column. The HAVING clause remains unchanged with `COUNT(*) > 1`. The amended query now correctly identifies duplicate denominations in the school table by selecting only the denomination column while maintaining the count filter in HAVING."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT denomination, COUNT(*) FROM schools GROUP BY denomination HAVING COUNT(*) > 1;",
            "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "476": {
        "db_id": "allergy_1",
        "question": "What are the student ids for students over 20 years old?",
        "ground_truth": "SELECT StuID FROM Student WHERE age  >  20",
        "amends": [
            "Do reference the table as `Student` instead of `students` and use column `StuID` instead of `student_id` in the SELECT list. Do change the WHERE filter to `age > 20` instead of `age <= 20`, reversing the age condition from selecting students 20 or younger to selecting those older than 20. The amended query now correctly matches the RIGHT_SQL's behavior of retrieving student IDs for students over age 20."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM students WHERE age <= 20;",
            "SELECT StuID FROM Student WHERE Age > 20"
        ],
        "rule_sql": []
    },
    "3996": {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are on call.",
        "ground_truth": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "amends": [
            "Do use `DISTINCT T1.name` instead of just `name` to eliminate duplicate nurse names. Do join `nurse AS T1` with `on_call AS T2` instead of querying only the `nurses` table. Do specify the join condition `ON T1.EmployeeID = T2.nurse` instead of filtering with `WHERE on_call = 'no'`. Do reference the correct table aliases and column relationships instead of the incorrect single-table approach. The amended query now correctly identifies nurses who are on call by joining the appropriate tables with proper relationship mapping."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM nurses WHERE on_call = 'no';",
            "SELECT DISTINCT T1.Name\nFROM Nurse AS T1\nJOIN On_Call AS T2 ON T1.EmployeeID = T2.Nurse;"
        ],
        "rule_sql": []
    },
    "5831": {
        "db_id": "workshop_paper",
        "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?",
        "ground_truth": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80",
        "amends": [
            "Do use `INTERSECT` to find colleges meeting both conditions instead of `WHERE` with contradictory filters. Do query the `submission` table instead of the `authors` table. Do reference the `Scores` column instead of `submission_score`. Do use proper column name `College` instead of `college`. Do remove the contradictory `submission_score < 80` filter that would never return results and instead use set intersection to find colleges with both high and low scores. The amended query now correctly identifies colleges that have both submissions with scores above 90 and below 80 using proper set operations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT college \nFROM authors \nWHERE submission_score > 90 \nAND submission_score < 80;",
            "SELECT College FROM submission WHERE Scores > 90\nINTERSECT\nSELECT College FROM submission WHERE Scores < 80;"
        ],
        "rule_sql": []
    },
    "3661": {
        "db_id": "baseball_1",
        "question": "Find the players' first name and last name who won award both in 1960 and in 1961.",
        "ground_truth": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
        "amends": [
            "Do add `JOIN player_award AS T2` instead of querying only the `players` table. Do change the WHERE condition to `T2.year = 1960` instead of `award_year = 1960 AND award_year = 1961` which was impossible. Do use `INTERSECT` to find players who won awards in both years instead of the contradictory AND condition. Do specify table aliases `T1.name_first` and `T1.name_last` instead of unqualified `first_name, last_name`. The amended query now correctly identifies players who received awards in both 1960 and 1961 by intersecting the results from two separate queries for each year.",
            "Do remove the `ON T1.player_id = T2.player_id` join condition from both parts of the query instead of including explicit join predicates. Do maintain the `INTERSECT` operation between the two SELECT statements that find players with awards in different years. Do keep the same column selection of `name_first` and `name_last` from the `player` table with the same aliases. Do preserve the year filters `T2.year = 1960` and `T2.year = 1961` in the WHERE clauses for the respective halves of the INTERSECT. The amended query now correctly uses implicit join syntax while maintaining the same logical behavior of finding players who received awards in both 1960 and 1961.",
            "Do remove the `ON T1.player_id = T2.player_id` join condition from both parts of the query instead of including explicit join predicates. Do keep the `INTERSECT` operation between the two SELECT statements instead of changing the set operation. Do maintain the same column selection `T1.name_first` and `T1.name_last` instead of altering the SELECT list. Do preserve the year filters `T2.year = 1960` and `T2.year = 1961` in the WHERE clauses instead of modifying the filtering logic. The amended query now correctly uses implicit joins without explicit ON conditions while maintaining the same INTERSECT behavior to find players who received awards in both 1960 and 1961.",
            "Do use explicit `JOIN` syntax instead of comma-separated table joins. Do remove the redundant `T1.player_id = T2.player_id` join condition from both sides of the INTERSECT instead of keeping it, as the JOIN syntax implies this relationship. Do maintain the same `SELECT` list with `name_first` and `name_last` columns instead of changing it. Do preserve the INTERSECT operation between the two queries for finding players who received awards in both 1960 and 1961 instead of altering the set operation. The amended query now correctly uses modern JOIN syntax while maintaining the same logical behavior as the RIGHT_SQL.",
            "Do use `JOIN player_award AS T2` without an ON clause instead of specifying `ON T1.player_id = T2.player_id` in both parts of the query. Do keep the `INTERSECT` operation between the two SELECT statements that find players with awards in different years (1960 and 1961) instead of changing the set operation. The amended query now correctly identifies players who received awards in both 1960 and 1961 by using the INTERSECT operation between the two year-specific result sets."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM players WHERE award_year = 1960 AND award_year = 1961;",
            "SELECT T1.name_first, T1.name_last\nFROM player AS T1\nJOIN player_award AS T2 ON T1.player_id = T2.player_id\nWHERE T2.year = 1960\nINTERSECT\nSELECT T1.name_first, T1.name_last\nFROM player AS T1\nJOIN player_award AS T2 ON T1.player_id = T2.player_id\nWHERE T2.year = 1961",
            "SELECT T1.name_first, T1.name_last\nFROM player AS T1\nJOIN player_award AS T2 ON T1.player_id = T2.player_id\nWHERE T2.year = 1960\nINTERSECT\nSELECT T1.name_first, T1.name_last\nFROM player AS T1\nJOIN player_award AS T2 ON T1.player_id = T2.player_id\nWHERE T2.year = 1961",
            "SELECT T1.name_first, T1.name_last\nFROM player T1, player_award T2\nWHERE T1.player_id = T2.player_id AND T2.year = 1960\nINTERSECT\nSELECT T1.name_first, T1.name_last\nFROM player T1, player_award T2\nWHERE T1.player_id = T2.player_id AND T2.year = 1961",
            "SELECT T1.name_first, T1.name_last\nFROM player T1\nJOIN player_award T2 ON T1.player_id = T2.player_id\nWHERE T2.year = 1960\nINTERSECT\nSELECT T1.name_first, T1.name_last\nFROM player T1\nJOIN player_award T2 ON T1.player_id = T2.player_id\nWHERE T2.year = 1961",
            "SELECT T1.name_first, T1.name_last\nFROM player AS T1\nJOIN player_award AS T2\nWHERE T2.year = 1960\nINTERSECT\nSELECT T1.name_first, T1.name_last\nFROM player AS T1\nJOIN player_award AS T2\nWHERE T2.year = 1961"
        ],
        "rule_sql": []
    },
    "3802": {
        "db_id": "e_learning",
        "question": "Find the login name of the course author that teaches the course with name \"advanced database\".",
        "ground_truth": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"",
        "amends": [
            "Do select `T1.login_name` instead of `author_name` from the `Course_Authors_and_Tutors` table instead of only `courses`. Do add a `JOIN` between `Course_Authors_and_Tutors AS T1` and `Courses AS T2` on `T1.author_id = T2.author_id` instead of querying a single table. Do use the correct table alias `T2.course_name` in the WHERE filter instead of directly referencing `course_name`. The amended query now correctly joins the author and course tables to retrieve the login name for authors of the specified course, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM courses WHERE course_name = 'advanced database';",
            "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'advanced database'"
        ],
        "rule_sql": []
    },
    "4327": {
        "db_id": "tracking_grants_for_research",
        "question": "From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?",
        "ground_truth": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'",
        "amends": [
            "Do select `date_from` and `date_to` columns instead of `MIN(start_date)` and `MAX(end_date)` aggregates. Do use a `UNION` operation instead of a single query with joins. Do reference the `Project_Staff` table instead of joining `staff_projects`, `projects`, and `staff` tables. Do filter by `role_code = 'leader'` in the second part of the union instead of using `WHERE s.role = 'leader'` in a join. Do use a subquery with `GROUP BY project_id ORDER BY count(*) DESC LIMIT 1` to find the project with most staff instead of grouping by project_id and ordering by staff count. Do remove the explicit grouping and ordering clauses from the main query structure. The amended query now correctly retrieves date ranges using a union approach that combines results for the project with most staff and leader roles separately.",
            "Do use a single subquery with `IN` instead of a CTE with `=` for the project_id filter. Do remove the `ORDER BY staff_count DESC` and `LIMIT 1` from the subquery instead of keeping them in a separate CTE. Do remove the redundant second `project_id =` condition in the UNION branch instead of duplicating it. Do simplify the query structure by eliminating the CTE and using a direct subquery in the WHERE clause instead of the complex CTE approach. The amended query now correctly retrieves date ranges for both the project with the most staff and all leader roles, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(start_date), MAX(end_date) \nFROM staff_projects sp\nJOIN projects p ON sp.project_id = p.project_id\nJOIN staff s ON sp.staff_id = s.staff_id\nWHERE s.role = 'leader'\nGROUP BY p.project_id\nORDER BY COUNT(DISTINCT sp.staff_id) DESC\nLIMIT 1;",
            "WITH ProjectStaffCounts AS (\n    SELECT project_id, COUNT(*) as staff_count\n    FROM Project_Staff\n    GROUP BY project_id\n    ORDER BY staff_count DESC\n    LIMIT 1\n)\nSELECT date_from, date_to\nFROM Project_Staff\nWHERE project_id = (SELECT project_id FROM ProjectStaffCounts)\n\nUNION\n\nSELECT date_from, date_to\nFROM Project_Staff\nWHERE role_code = 'leader'\nAND project_id = (SELECT project_id FROM ProjectStaffCounts);",
            "SELECT date_from, date_to FROM Project_Staff WHERE project_id IN (\n    SELECT project_id FROM Project_Staff \n    GROUP BY project_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)\nUNION\nSELECT date_from, date_to FROM Project_Staff \nWHERE role_code = 'leader'"
        ],
        "rule_sql": []
    },
    "1782": {
        "db_id": "small_bank_1",
        "question": "Find the average checking balance.",
        "ground_truth": "SELECT avg(balance) FROM checking",
        "amends": [
            "Do reference table `checking` instead of `accounts` in the FROM clause. Do remove the WHERE filter `account_type = 'savings'` instead of keeping it. The amended query now correctly calculates the average balance from the checking table without unnecessary filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(balance) FROM accounts WHERE account_type = 'savings';",
            "SELECT AVG(balance) FROM CHECKING;"
        ],
        "rule_sql": []
    },
    "38": {
        "db_id": "farm",
        "question": "Show the status of the city that has hosted the greatest number of competitions.",
        "ground_truth": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do specify `T1.Status` with table alias instead of just `status` without qualification. Do join `city AS T1` with `farm_competition AS T2` on `T1.City_ID = T2.Host_city_ID` instead of querying only `cities` table without any join. Do add `GROUP BY T2.Host_city_ID` to aggregate by host city instead of missing grouping. Do order by `COUNT(*)` instead of `COUNT(competitions.city_id)` which references a non-existent table. Do use proper table aliases `T1` and `T2` throughout instead of unqualified column references. The amended query now correctly aggregates competition counts by host city and returns the status of the city with the most competitions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT status FROM cities ORDER BY COUNT(competitions.city_id) DESC LIMIT 1;",
            "SELECT T1.Status\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nGROUP BY T2.Host_city_ID\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "5511": {
        "db_id": "voter_2",
        "question": "Find the major that is studied by the most female students.",
        "ground_truth": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `STUDENT` instead of `students` and use column name `Sex` instead of `gender` with value `\"F\"` instead of `'female'`. Do select only `Major` instead of both `major` and `COUNT(*) as female_count`. Do order by `count(*)` directly instead of using the alias `female_count`. Do maintain the same `GROUP BY major`, `ORDER BY DESC`, and `LIMIT 1` structure. The amended query now correctly returns only the major with the highest count of female students while matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT major, COUNT(*) as female_count \nFROM students \nWHERE gender = 'female' \nGROUP BY major \nORDER BY female_count DESC \nLIMIT 1;",
            "SELECT Major FROM Student WHERE Sex = \"F\" GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "1201": {
        "db_id": "apartment_rentals",
        "question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.",
        "ground_truth": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
        "amends": [
            "Do select `building_short_name` instead of `building_name` and use table `Apartment_Buildings` instead of `buildings`. Do filter on `building_manager = \"Emma\"` instead of `manager = 'Emma'` with proper column name and quote style. The amended query now correctly retrieves the building short name from the Apartment_Buildings table filtered by the building manager named Emma."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building_name FROM buildings WHERE manager = 'Emma';",
            "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma';"
        ],
        "rule_sql": []
    },
    "1843": {
        "db_id": "browser_web",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "ground_truth": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "amends": [
            "Do select `T2.name` and `T3.name` instead of `browser_name` and `accelerator_name`. Do join from `accelerator_compatible_browser AS T1` instead of `compatibility`. Do add `JOIN browser AS T2 ON T1.browser_id = T2.id` and `JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id` instead of omitting these table joins. Do order by `T1.compatible_since_year DESC` instead of `compatible_year ASC`. The amended query now correctly retrieves browser and accelerator names through proper table relationships with the appropriate sort order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT browser_name, accelerator_name FROM compatibility ORDER BY compatible_year ASC;",
            "SELECT T2.name, T3.name\nFROM accelerator_compatible_browser AS T1\nJOIN browser AS T2 ON T1.browser_id = T2.id\nJOIN Web_client_accelerator AS T3 ON T1.accelerator_id = T3.id\nORDER BY T1.compatible_since_year DESC;"
        ],
        "rule_sql": []
    },
    "3502": {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
        "ground_truth": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, hire_date FROM employees WHERE department_id IN (SELECT department_id FROM employees WHERE first_name = 'Clara') AND first_name != 'Clara';"
        ],
        "rule_sql": []
    },
    "2718": {
        "db_id": "storm_record",
        "question": "Show the name of storms which don't have affected region in record.",
        "ground_truth": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "amends": [
            "Do query from table `storm` instead of `storms`. Do use a subquery with `NOT IN` condition on `storm_id` instead of filtering for `IS NULL` on `affected_region`. Do reference the correct table name `affected_region` in the subquery instead of treating it as a column. The amended query now correctly identifies storms that have no associated affected regions by checking for missing entries in the related table rather than relying on null column values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM storms WHERE affected_region IS NULL;",
            "SELECT Name FROM storm WHERE Storm_ID NOT IN (SELECT Storm_ID FROM affected_region)"
        ],
        "rule_sql": []
    },
    "2888": {
        "db_id": "icfp_1",
        "question": "Find the number of papers published by the institution \"University of Pennsylvania\".",
        "ground_truth": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
        "amends": [
            "Do count `DISTINCT t1.title` instead of `COUNT(*)` to get unique paper titles rather than total rows. Do join `authorship AS t2` on `t1.paperid = t2.paperid` and `inst AS t3` on `t2.instid = t3.instid` instead of querying only the `papers` table to properly connect papers to their institutions through authorship. Do filter on `t3.name = \"University of Pennsylvania\"` instead of `institution = 'University of Pennsylvania'` to use the correct table and column for institution names. The amended query now correctly counts distinct paper titles from the University of Pennsylvania by properly joining through the authorship relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE institution = 'University of Pennsylvania';",
            "SELECT COUNT(DISTINCT t1.title) \nFROM Papers AS t1\nJOIN Authorship AS t2 ON t1.paperID = t2.paperID\nJOIN Inst AS t3 ON t2.instID = t3.instID\nWHERE t3.name = 'University of Pennsylvania'"
        ],
        "rule_sql": []
    },
    "4848": {
        "db_id": "local_govt_and_lot",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "ground_truth": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "amends": [
            "Do select `T1.customer_id` and `T1.customer_details` with explicit table aliases instead of `id` and `details` without table qualification. Do add `JOIN Customer_Events AS T2` with an explicit join instead of omitting the necessary table join. Do use `ON T1.customer_id = T2.customer_id` for the join condition instead of having no join condition. Do add `GROUP BY T1.customer_id` to properly group the results instead of omitting the GROUP BY clause. Do move the count filter to `HAVING count(*) >= 3` instead of incorrectly placing `COUNT(events) >= 3` in the WHERE clause where aggregate functions cannot be used. The amended query now correctly joins the customer and events tables, groups by customer, and uses HAVING to filter based on the aggregate count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, details FROM customers WHERE COUNT(events) >= 3",
            "SELECT T1.customer_id, T1.customer_details\nFROM Customers AS T1\nJOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T1.customer_id\nHAVING COUNT(*) >= 3"
        ],
        "rule_sql": []
    },
    "78": {
        "db_id": "student_assessment",
        "question": "What are the details of the student who registered for the most number of courses?",
        "ground_truth": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.student_details` instead of `*` to retrieve specific column data. Do add `JOIN` with `student_course_registrations AS T2` instead of querying only the `students` table to incorporate registration data. Do use `ON T1.student_id = T2.student_id` instead of no join condition to properly relate the tables. Do add `GROUP BY T1.student_id` instead of no grouping to aggregate by student. Do change `ORDER BY count(*) DESC` instead of `ORDER BY student_id DESC` to sort by course registration count rather than student ID. Do keep `LIMIT 1` to return only the top result. The amended query now correctly identifies the student with the most course registrations instead of simply returning the last student by ID."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students ORDER BY student_id DESC LIMIT 1;",
            "SELECT T1.student_details\nFROM Students AS T1\nJOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2795": {
        "db_id": "election",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "ground_truth": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference the `Comptroller` column instead of `name` and use the table `party` instead of `comptrollers`. Do remove the alias `frequency` from the count aggregation instead of keeping it. Do order by `COUNT(*)` directly instead of using the alias `frequency`. The amended query now correctly counts comptroller frequencies from the party table and matches the intended behavior.",
            "Do add `LIMIT 1` at the end of the query instead of omitting it, which restricts the result to only the top row with the highest count rather than returning all grouped results. The amended query now matches RIGHT_SQL's behavior by returning only the single Comptroller with the highest count of party records."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, COUNT(*) as frequency FROM comptrollers GROUP BY name ORDER BY frequency DESC LIMIT 1;",
            "SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC;",
            "SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4028": {
        "db_id": "student_1",
        "question": "Find the number of students in total.",
        "ground_truth": "SELECT count(*) FROM list",
        "amends": [
            "Do reference the `list` table instead of the `students` table in the FROM clause. Do filter on the `grade = 'A'` condition instead of omitting it, as the WHERE clause was completely removed. Do use lowercase `count(*)` instead of uppercase `COUNT(*)`, though this is purely cosmetic. The amended query now correctly counts all records from the list table without any grade filtering, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE grade = 'A';",
            "SELECT count(*) FROM list;"
        ],
        "rule_sql": []
    },
    "4410": {
        "db_id": "network_2",
        "question": "Who is the oldest person whose job is student?",
        "ground_truth": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "amends": [
            "Do reference the table as `Person` instead of `people` in the FROM clause. Do add a subquery condition `age = (SELECT max(age) FROM person WHERE job = 'student')` instead of using `ORDER BY age ASC LIMIT 1`. Do include the filter `job = 'student'` in both the main query and subquery instead of only in the main WHERE clause. Do remove the `ORDER BY` and `LIMIT` clauses instead of keeping them, as the maximum age is now determined through the subquery. The amended query now correctly identifies students with the maximum age rather than just the youngest student, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE job = 'student' ORDER BY age ASC LIMIT 1;",
            "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT MAX(age) FROM Person WHERE job = 'student')"
        ],
        "rule_sql": []
    },
    "1017": {
        "db_id": "university_basketball",
        "question": "What is the maximum enrollment across all schools?",
        "ground_truth": "SELECT max(Enrollment) FROM university",
        "amends": [
            "Do use `max(Enrollment)` instead of `MIN(enrollment)` to select the maximum enrollment value rather than the minimum. Do reference the `university` table instead of the `schools` table to query from the correct data source. The amended query now correctly retrieves the maximum enrollment value from the university table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(enrollment) FROM schools;",
            "SELECT MAX(Enrollment) FROM university;"
        ],
        "rule_sql": []
    },
    "650": {
        "db_id": "journal_committee",
        "question": "List the names of editors in ascending order of age.",
        "ground_truth": "SELECT Name FROM editor ORDER BY Age ASC",
        "amends": [
            "Do reference table `editor` instead of `editors`. Do select column `Name` instead of `name`. Do use `ORDER BY Age ASC` instead of `ORDER BY age DESC`, changing both the column reference and sort direction. The amended query now correctly references the intended table and column names with proper casing and applies ascending sort order as specified."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM editors ORDER BY age DESC;",
            "SELECT Name FROM editor ORDER BY Age ASC;"
        ],
        "rule_sql": []
    },
    "353": {
        "db_id": "flight_1",
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "ground_truth": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "amends": [
            "Do reference table `Aircraft` instead of `aircrafts` while keeping the same aggregate functions `MIN(distance)`, `AVG(distance)`, and `MAX(distance)` unchanged. The amended query now correctly references the proper table name and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(distance), AVG(distance), MAX(distance) FROM aircrafts;",
            "SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft;"
        ],
        "rule_sql": []
    },
    "2780": {
        "db_id": "election",
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "ground_truth": "SELECT County_name FROM county ORDER BY County_name DESC",
        "amends": [
            "Do select `County_name` instead of `name` and use `DESC` ordering instead of `ASC`. Do reference table `county` instead of `counties`. The amended query now correctly selects the county names in descending order from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM counties ORDER BY name ASC;",
            "SELECT County_name FROM county ORDER BY County_name DESC;"
        ],
        "rule_sql": []
    },
    "2521": {
        "db_id": "movie_1",
        "question": "What are the ids of all reviewers who did not give 4 stars?",
        "ground_truth": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "amends": [
            "Do use `EXCEPT` to exclude specific records instead of a simple `WHERE` filter. Do reference the table as `Rating` instead of `reviews`. Do select column `rID` instead of `reviewer_id`. Do include a subquery to exclude `stars = 4` records instead of filtering for `stars != 4`. Do structure the query with set operations instead of a single filter condition. The amended query now correctly uses set semantics to exclude ratings with exactly 4 stars, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reviewer_id FROM reviews WHERE stars != 4;",
            "SELECT rID FROM Reviewer\nEXCEPT\nSELECT rID FROM Rating WHERE stars = 4"
        ],
        "rule_sql": []
    },
    "5500": {
        "db_id": "voter_2",
        "question": "For each advisor, report the total number of students advised by him or her.",
        "ground_truth": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",
        "amends": [
            "Do use column name `Advisor` instead of `advisor_id` in both the SELECT list and GROUP BY clause. Do reference table `STUDENT` instead of `students` in the FROM clause. Do group by `Advisor` instead of `student_id` to properly aggregate counts by advisor rather than by individual students. The amended query now correctly counts students grouped by their advisor rather than incorrectly grouping by student IDs themselves."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT advisor_id, COUNT(*) FROM students GROUP BY student_id;",
            "SELECT Advisor, COUNT(*) AS total_students FROM Student GROUP BY Advisor;"
        ],
        "rule_sql": []
    },
    "4003": {
        "db_id": "ship_mission",
        "question": "What are the types and nationalities of every ship?",
        "ground_truth": "SELECT TYPE ,  Nationality FROM ship",
        "amends": [
            "Do select `TYPE` and `Nationality` columns instead of `ship_name` and `type`. Do reference table `ship` instead of `ships`. Do remove the `WHERE nationality = 'American'` filter instead of keeping it. The amended query now matches the intended behavior by selecting different columns from the correct table without filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ship_name, type FROM ships WHERE nationality = 'American';",
            "SELECT Type, Nationality FROM ship;"
        ],
        "rule_sql": []
    },
    "1412": {
        "db_id": "college_2",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "ground_truth": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "amends": [
            "Do select `semester` and `YEAR` instead of `semester`, `year`, and `COUNT(*) as student_count`. Do use `FROM takes` instead of `FROM enrollments`. Do remove the explicit `GROUP BY` clause instead of keeping `GROUP BY semester, year`. Do order by `count(*)` instead of `student_count DESC`. Do remove the alias `student_count` instead of keeping it. The amended query now correctly identifies the semester and year with the minimum enrollment count from the takes table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT semester, year, COUNT(*) as student_count\nFROM enrollments\nGROUP BY semester, year\nORDER BY student_count DESC\nLIMIT 1;",
            "SELECT semester, year FROM takes GROUP BY semester, year ORDER BY COUNT(*) LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1802": {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "ground_truth": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "amends": [
            "Do add tables `checking AS T2` and `savings AS T3` with `JOIN` conditions `ON T1.custid = T2.custid` and `ON T1.custid = T3.custid` instead of querying only the `accounts` table. Do change the SELECT list to `T1.name, T2.balance` instead of `name, checking_balance`. Do change the ORDER BY to `T3.balance` instead of `savings_balance DESC`. Do remove the `DESC` modifier from ORDER BY instead of keeping it. The amended query now correctly joins multiple tables to retrieve the checking balance while ordering by savings balance, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, checking_balance FROM accounts ORDER BY savings_balance DESC LIMIT 1;",
            "SELECT T1.name, T2.balance\nFROM ACCOUNTS AS T1\nJOIN CHECKING AS T2 ON T1.custid = T2.custid\nJOIN SAVINGS AS T3 ON T1.custid = T3.custid\nORDER BY T3.balance\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2602": {
        "db_id": "inn_1",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "ground_truth": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "amends": [
            "Do join `Reservations` and `Rooms` tables instead of querying only `room_occupancy`. Do use `JOIN` with `ON T1.Room = T2.RoomId` instead of no join condition. Do filter with `T2.maxOccupancy = T1.Adults + T1.Kids` instead of `adults + kids > max_occupancy`. Do reference columns with table aliases `T1.Adults` and `T1.Kids` instead of standalone column names. Do count reservations where occupancy equals maximum instead of where it exceeds maximum. The amended query now correctly identifies reservations that exactly match room capacity limits."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM room_occupancy \nWHERE adults + kids > max_occupancy;",
            "SELECT COUNT(*) \nFROM Reservations T1\nJOIN Rooms T2 ON T1.Room = T2.RoomId\nWHERE T2.maxOccupancy = T1.Adults + T1.Kids"
        ],
        "rule_sql": []
    },
    "6343": {
        "db_id": "e_government",
        "question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".",
        "ground_truth": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "amends": [
            "Do select `state_province_county` instead of `state` from the `addresses` table instead of `buildings`. Do use a `LIKE` pattern match with `%6862 Kaitlyn Knolls%` instead of exact equality comparison with `building_name = '6862 Kaitlyn Knolls'`. Do remove the `line_number = 1` filter instead of keeping it. The amended query now correctly searches for address patterns in the appropriate table and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state FROM buildings WHERE building_name = '6862 Kaitlyn Knolls' AND line_number = 1",
            "SELECT state_province_county FROM Addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'"
        ],
        "rule_sql": []
    },
    "4542": {
        "db_id": "document_management",
        "question": "Give the codes of document types that have more than 2 corresponding documents.",
        "ground_truth": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 2"
        ],
        "rule_sql": []
    },
    "5025": {
        "db_id": "soccer_2",
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "ground_truth": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "amends": [
            "Do use `cName` instead of `name` for the column selection. Do reference table `College` instead of `colleges` as the source. Do use `enr` instead of `students` for the enrollment column. Do use `state` instead of `city` for the location filter. Do restructure the query with `UNION` instead of a single `OR` condition, separating the Arizona and Louisiana cases into distinct queries. Do filter Arizona colleges with `enr < 13000 AND state = \"AZ\"` instead of `city = 'AZ' AND students < 13000`. Do filter Louisiana colleges with `enr > 15000 AND state = \"LA\"` instead of `city = 'LA' AND students > 15000`. The amended query now correctly uses state abbreviations instead of city names and properly separates the distinct criteria sets with UNION."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM colleges WHERE (city = 'LA' AND students > 15000) OR (city = 'AZ' AND students < 13000);",
            "SELECT cName FROM College WHERE state = 'LA' AND enr > 15000\nUNION\nSELECT cName FROM College WHERE state = 'AZ' AND enr < 13000"
        ],
        "rule_sql": []
    },
    "4684": {
        "db_id": "college_3",
        "question": "Give the names of the courses with at least five enrollments.",
        "ground_truth": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "amends": [
            "Do select `T1.CName` instead of `course_name` and use a table alias. Do join `COURSE AS T1` with `ENROLLED_IN AS T2` on `T1.CID = T2.CID` instead of querying a single table. Do add `GROUP BY T2.CID` instead of omitting grouping. Do use `HAVING COUNT(*) >= 5` instead of `WHERE enrollment_count > 5` to filter by aggregated count rather than a direct column comparison. The amended query now correctly counts enrollments per course and filters for courses with at least 5 enrollments, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE enrollment_count > 5;",
            "SELECT T1.CName\nFROM Course AS T1\nJOIN Enrolled_in AS T2 ON T1.CID = T2.CID\nGROUP BY T2.CID\nHAVING COUNT(*) >= 5"
        ],
        "rule_sql": []
    },
    "2958": {
        "db_id": "sakila_1",
        "question": "What is the total amount of all payments?",
        "ground_truth": "SELECT sum(amount) FROM payment",
        "amends": [
            "Do reference the `payment` table instead of the non-existent `payments` table. Do use lowercase `sum(amount)` instead of uppercase `SUM(amount)` for consistency. Do remove the `WHERE amount > 1000` filter instead of keeping it, as the right query aggregates all payment amounts without filtering. The amended query now correctly sums all amounts from the payment table without unnecessary filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payments WHERE amount > 1000;",
            "SELECT sum(amount) FROM payment;"
        ],
        "rule_sql": []
    },
    "2389": {
        "db_id": "csu_1",
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "ground_truth": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "amends": [
            "Do select `campusfee` from the `csu_fees` table instead of `campus_fee` from `universities`. Do join `campuses` table using `csu_fees.campus = campuses.id` instead of querying a single table. Do filter on `campuses.campus = \"San Francisco State University\"` instead of `university_name = 'San Francisco State University'`. Do keep the `year = 2000` filter but apply it to `csu_fees.year` instead of an unspecified table. The amended query now correctly joins the fee and campus tables to retrieve the specific campus fee data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT campus_fee FROM universities WHERE university_name = 'San Francisco State University' AND year = 2000;",
            "SELECT csu_fees.CampusFee \nFROM csu_fees \nJOIN Campuses ON csu_fees.Campus = Campuses.Id \nWHERE Campuses.Campus = 'San Francisco State University' \nAND csu_fees.Year = 2000"
        ],
        "rule_sql": []
    },
    "5417": {
        "db_id": "shop_membership",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "ground_truth": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
        "amends": [
            "Do reference table `member` instead of `members` in the FROM clause. Do use `ORDER BY LEVEL DESC` instead of `ORDER BY level ASC` to sort in descending order rather than ascending. The amended query now correctly selects from the member table and sorts by level in descending order, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT card_number, name, hometown FROM members ORDER BY level ASC;",
            "SELECT Card_Number, Name, Hometown FROM member ORDER BY Level DESC;"
        ],
        "rule_sql": []
    },
    "4537": {
        "db_id": "document_management",
        "question": "List all the image name and URLs in the order of their names.",
        "ground_truth": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "amends": [
            "Do use column aliases `image_name` and `image_url` instead of the original column names `name` and `url`. Do change the ORDER BY clause to sort by `image_name` instead of `image_url`. The amended query now correctly references the intended column names and sorts by the appropriate column, matching the behavior of the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, url FROM images ORDER BY url;",
            "SELECT image_name, image_url FROM Images ORDER BY image_name;"
        ],
        "rule_sql": []
    },
    "2418": {
        "db_id": "candidate_poll",
        "question": "which gender got the highest average uncertain ratio.",
        "ground_truth": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "amends": [
            "Do select `t1.sex` instead of `gender` and remove the explicit alias `avg_uncertain_ratio` instead of keeping it. Do use `FROM people AS t1 JOIN candidate AS t2` instead of `FROM table_name` with different table sources and join structure. Do apply the join condition `ON t1.people_id = t2.people_id` instead of no join condition. Do calculate `avg(t2.unsure_rate)` in the ORDER BY clause instead of selecting it in the SELECT list with alias `AVG(uncertain_ratio) as avg_uncertain_ratio`. Do order by the aggregate function directly instead of referencing an alias. The amended query now correctly joins the people and candidate tables, calculates the average unsure rate per sex, and returns the sex with the highest average unsure rate, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, AVG(uncertain_ratio) as avg_uncertain_ratio FROM table_name GROUP BY gender ORDER BY avg_uncertain_ratio DESC LIMIT 1;",
            "SELECT t1.Sex\nFROM people AS t1\nJOIN candidate AS t2 ON t1.People_ID = t2.People_ID\nGROUP BY t1.Sex\nORDER BY AVG(t2.Unsure_rate) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "6007": {
        "db_id": "game_1",
        "question": "How many games are played for all students?",
        "ground_truth": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "amends": [
            "Do select `sum(gamesplayed)` instead of `COUNT(*)`. Do query from `Sportsinfo` table instead of `games` table. Do remove the `WHERE student_id IS NOT NULL` filter instead of keeping it. The amended query now correctly calculates total games played from the Sportsinfo table rather than counting records with non-null student IDs from a different table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE student_id IS NOT NULL",
            "SELECT SUM(GamesPlayed) FROM SportsInfo;"
        ],
        "rule_sql": []
    },
    "3188": {
        "db_id": "college_1",
        "question": "Where is the history department?",
        "ground_truth": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
        "amends": [
            "Do select `dept_address` instead of `*` from the result set. Do reference table `department` instead of `departments` as the data source. Do filter on `dept_name = 'History'` instead of `name = 'Mathematics'` in the WHERE clause. The amended query now correctly retrieves the address for the History department instead of all columns from a non-existent Mathematics department."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM departments WHERE name = 'Mathematics';",
            "SELECT dept_address FROM department WHERE dept_name = 'History'"
        ],
        "rule_sql": []
    },
    "1398": {
        "db_id": "college_2",
        "question": "Find the total credits of courses provided by different department.",
        "ground_truth": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "amends": [
            "Do use `dept_name` instead of `department` in both the SELECT list and GROUP BY clause. Do place the aggregate function `sum(credits)` before the column instead of after it. Do reference table `course` instead of `courses` in the FROM clause. The amended query now correctly aggregates credits by department name using the proper table and column references.",
            "Do place the aggregate function `sum(credits)` first in the SELECT list instead of placing `dept_name` first, while maintaining the same GROUP BY clause and table source. The amended query now matches RIGHT_SQL's behavior with identical logical results despite the column order difference."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, SUM(credits) FROM courses GROUP BY department;",
            "SELECT dept_name, SUM(credits) FROM course GROUP BY dept_name",
            "SELECT sum(credits), dept_name FROM course GROUP BY dept_name"
        ],
        "rule_sql": []
    },
    "5698": {
        "db_id": "dorm_1",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "ground_truth": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "amends": [
            "Do select `dorm_name` and `gender` instead of `name` and `gender_type`. Do use table `dorm` instead of `dorms`. Do change the condition to `student_capacity > 300 OR student_capacity < 100` instead of `capacity > 300 AND capacity < 300`. Do use column `student_capacity` instead of `capacity`. The amended query now correctly selects dormitory names and gender information from the dorm table using the proper capacity column with an OR condition to find dorms with capacity either above 300 or below 100, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, gender_type FROM dorms WHERE capacity > 300 AND capacity < 100;",
            "SELECT dorm_name, gender FROM Dorm WHERE student_capacity > 300 OR student_capacity < 100;"
        ],
        "rule_sql": []
    },
    "2911": {
        "db_id": "icfp_1",
        "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.",
        "ground_truth": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "amends": [
            "Do select `t1.lname` instead of `first_name` and use table aliases throughout. Do add joins to `authorship AS t2` and `papers AS t3` instead of querying only the `authors` table. Do use join conditions `t1.authid = t2.authid` and `t2.paperid = t3.paperid` instead of no joins. Do filter on `t3.title LIKE \"%Monadic%\"` instead of `paper_title` which doesn't exist in the authors table. The amended query now correctly joins through the authorship relationship to find papers with the specified title and returns the corresponding author last names, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM authors WHERE paper_title LIKE '%Monadic%';",
            "SELECT t1.lname \nFROM Authors AS t1\nJOIN Authorship AS t2 ON t1.authID = t2.authID\nJOIN Papers AS t3 ON t2.paperID = t3.paperID\nWHERE t3.title LIKE '%Monadic%'"
        ],
        "rule_sql": []
    },
    "226": {
        "db_id": "book_2",
        "question": "Show different publishers together with the number of publications they have.",
        "ground_truth": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "amends": [
            "Do reference the table as `publication` instead of `publications` to match the correct schema. Do capitalize the column name as `Publisher` instead of `publisher` in both the SELECT list and GROUP BY clause to maintain case consistency. The amended query now correctly counts publications by publisher using the proper table and column names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) FROM publications GROUP BY publisher;",
            "SELECT Publisher, COUNT(*) AS Number_of_Publications FROM publication GROUP BY Publisher;"
        ],
        "rule_sql": []
    },
    "6374": {
        "db_id": "flight_company",
        "question": "What are the ids and names of the companies that operated more than one flight?",
        "ground_truth": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1",
        "amends": [
            "Do select `T1.id` and `T1.name` instead of `company_id` and `company_name`. Do use `operate_company AS T1` joined with `flight AS t2` on `T1.id = T2.company_id` instead of querying only the `companies` table. Do add `GROUP BY T1.id` instead of omitting grouping. Do move the count filter to `HAVING count(*) > 1` instead of using `WHERE COUNT(flight_id) > 1` without grouping. The amended query now correctly aggregates flight counts per company and filters using HAVING instead of WHERE, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_id, company_name FROM companies WHERE COUNT(flight_id) > 1",
            "SELECT T1.id, T1.name\nFROM operate_company AS T1\nJOIN flight AS T2 ON T1.id = T2.company_id\nGROUP BY T1.id\nHAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "6565": {
        "db_id": "wine_1",
        "question": "What is the color of the grape whose wine products has the highest average price?",
        "ground_truth": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
        "amends": [
            "Do join `WINE` table on `GRAPES.Grape = WINE.Grape` instead of querying only the `grapes` table. Do add `GROUP BY T2.Grape` to aggregate wine prices by grape type instead of attempting to order by aggregate without grouping. Do select `T1.Color` from the joined table structure instead of just `color` from a single table. Do use table aliases `T1` and `T2` for clarity instead of no aliases. The amended query now correctly calculates average wine prices by grape type and returns the color of the grape with the highest average price, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT color FROM grapes ORDER BY AVG(price) DESC LIMIT 1;",
            "SELECT T1.Color \nFROM grapes T1\nJOIN wine T2 ON T1.Grape = T2.Grape\nGROUP BY T2.Grape\nORDER BY AVG(T2.Price) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4400": {
        "db_id": "network_2",
        "question": "How many females does this network has?",
        "ground_truth": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "amends": [
            "Do reference table `Person` instead of `users` in the FROM clause. Do filter for `gender = 'female'` instead of `gender = 'male'` in the WHERE condition. The amended query now correctly counts records from the Person table where gender is female, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male';",
            "SELECT COUNT(*) FROM Person WHERE gender = 'female';"
        ],
        "rule_sql": []
    },
    "1913": {
        "db_id": "protein_institute",
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "ground_truth": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building",
        "amends": [
            "Do use lowercase function names `avg`, `max`, and `min` instead of uppercase `AVG`, `MAX`, and `MIN`. Do reference the correct table name `building` instead of the incorrect plural form `buildings`. Do remove the `WHERE floors > 0` filter instead of keeping it, as the right query aggregates all records without filtering. The amended query now correctly calculates statistics across all buildings in the database."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(floors), MAX(floors), MIN(floors) FROM buildings WHERE floors > 0;",
            "SELECT avg(Floors) as average_floors, max(Floors) as max_floors, min(Floors) as min_floors FROM building"
        ],
        "rule_sql": []
    },
    "5315": {
        "db_id": "manufactory_1",
        "question": "How many different products are produced in each headquarter city?",
        "ground_truth": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "amends": [
            "Do select `count(DISTINCT T1.name)` and `T2.Headquarter` instead of `headquarter_city` and `COUNT(*)`. Do join `manufacturers AS T2` on `T1.Manufacturer = T2.code` instead of querying only the `products` table. Do group by `T2.Headquarter` instead of `headquarter_city`. Do add the manufacturers table join and distinct count logic instead of the simple count aggregation. The amended query now correctly counts distinct product names per manufacturer headquarters instead of counting all products per city.",
            "Do place `T2.Headquarter` after the aggregate function instead of listing it first in the SELECT clause. Do use lowercase `count` and `name` instead of uppercase `COUNT` and `Name` to match the schema. Do add proper spacing around the equals sign in the join condition `T1.Manufacturer = T2.code` instead of the original formatting. The amended query now correctly counts distinct product names grouped by manufacturer headquarters while maintaining the same logical behavior as the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT headquarter_city, COUNT(*) FROM products GROUP BY headquarter_city;",
            "SELECT T2.Headquarter, COUNT(DISTINCT T1.Name) \nFROM Products AS T1 \nJOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code \nGROUP BY T2.Headquarter",
            "SELECT count(DISTINCT T1.name), T2.Headquarter FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter"
        ],
        "rule_sql": []
    },
    "200": {
        "db_id": "bike_1",
        "question": "What are the dates that have an average sea level pressure between 30.3 and 31?",
        "ground_truth": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "amends": [
            "Do reference table `weather` instead of `weather_data` and use column `mean_sea_level_pressure_inches` instead of `sea_level_pressure`. Do remove the subquery comparing to average pressure instead of including it, and do keep the `BETWEEN 30.3 AND 31` filter on the correct pressure column instead of applying it to the wrong column. The amended query now correctly filters for dates where mean sea level pressure falls within the specified range without the unnecessary average comparison."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date FROM weather_data WHERE sea_level_pressure = (SELECT AVG(sea_level_pressure) FROM weather_data) AND sea_level_pressure BETWEEN 30.3 AND 31;",
            "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
        ],
        "rule_sql": []
    },
    "4845": {
        "db_id": "local_govt_and_lot",
        "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "ground_truth": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
        "amends": [
            "Do specify table aliases `T1` and `T2` instead of omitting them. Do join `Residents_Services AS T2` on `T1.resident_id = T2.resident_id` instead of querying only the `residents` table. Do select `T1.other_details` instead of `details`. Do use `count(*)` instead of `COUNT(service_id)` for the aggregate. Do order by `count(*) DESC` instead of `service_count ASC`. The amended query now correctly joins the necessary tables to count services per resident and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT resident_id, details, COUNT(service_id) as service_count \nFROM residents \nGROUP BY resident_id \nORDER BY service_count ASC;",
            "SELECT T1.resident_id, T1.other_details, COUNT(*) AS service_count\nFROM Residents AS T1\nJOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id\nGROUP BY T1.resident_id, T1.other_details\nORDER BY COUNT(*) DESC;"
        ],
        "rule_sql": []
    },
    "5885": {
        "db_id": "cre_Theme_park",
        "question": "How many available hotels are there in total?",
        "ground_truth": "SELECT count(*) FROM HOTELS",
        "amends": [
            "Do use consistent case for `count(*)` instead of mixing `COUNT(*)` and `count(*)`, and do use consistent table name casing `HOTELS` instead of `hotels`. Do remove the `WHERE status = 'booked'` filter instead of keeping it, as the right query counts all records without filtering. The amended query now matches RIGHT_SQL's behavior of counting all rows in the HOTELS table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM hotels WHERE status = 'booked';",
            "SELECT COUNT(*) FROM Hotels;"
        ],
        "rule_sql": []
    },
    "5405": {
        "db_id": "shop_membership",
        "question": "What are the names for the 3 branches that have the most memberships?",
        "ground_truth": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "amends": [
            "Do select `name` from the `branch` table instead of selecting `branch_name` and `COUNT(*) as member_count` from the `memberships` table. Do remove the aggregation with `GROUP BY branch_name` and the count calculation instead of keeping them. Do order by `membership_amount DESC` instead of ordering by the removed `member_count DESC`. Do remove the `memberships` table from the FROM clause and use only the `branch` table instead. The amended query now correctly selects branch names ordered by their membership amounts rather than counting members per branch, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT branch_name, COUNT(*) as member_count FROM memberships GROUP BY branch_name ORDER BY member_count DESC LIMIT 3;",
            "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
        ],
        "rule_sql": []
    },
    "552": {
        "db_id": "store_1",
        "question": "What are the titles of all the albums?",
        "ground_truth": "SELECT title FROM albums;",
        "amends": [
            "Do select `title` instead of `name` from the albums table, as the column containing album names is correctly named title rather than name. The amended query now matches the right SQL's behavior by retrieving the correct column data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM albums;",
            "SELECT title FROM albums;"
        ],
        "rule_sql": []
    },
    "2173": {
        "db_id": "formula_1",
        "question": "How many drivers did not participate in the races held in 2009?",
        "ground_truth": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "amends": [
            "Do use `count(DISTINCT driverId)` instead of `COUNT(*)` to count unique drivers. Do query from `results` table instead of `drivers` table as the source. Do filter with `raceId NOT IN` subquery instead of `driver_id NOT IN` subquery. Do change the subquery to select `raceId` from `races` instead of `driver_id`. Do use `YEAR != 2009` condition in the subquery instead of `year = 2009` to exclude races from other years. The amended query now correctly counts distinct drivers who participated in races from the year 2009 only, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM drivers WHERE driver_id NOT IN (SELECT driver_id FROM races WHERE year = 2009);",
            "SELECT COUNT(DISTINCT driverId) \nFROM results \nWHERE raceId NOT IN (\n    SELECT raceId \n    FROM races \n    WHERE year != 2009\n)"
        ],
        "rule_sql": []
    },
    "6722": {
        "db_id": "activity_1",
        "question": "What are the rank, first name, and last name of the faculty members?",
        "ground_truth": "SELECT rank ,  Fname ,  Lname FROM Faculty",
        "amends": [
            "Do select columns `Fname` and `Lname` instead of `first_name` and `last_name`, and do query from table `Faculty` instead of `students`, while removing the `rank` column instead of keeping it. The amended query now correctly retrieves first and last names from the Faculty table.",
            "Do add `rank` to the SELECT list instead of omitting it. The amended query now includes all three required columns and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rank, first_name, last_name FROM students;",
            "SELECT Fname, Lname FROM Faculty;",
            "SELECT rank, Fname, Lname FROM Faculty;"
        ],
        "rule_sql": []
    },
    "2387": {
        "db_id": "csu_1",
        "question": "How many people graduated from San Francisco State University in 2004?",
        "ground_truth": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "amends": [
            "Do use `sum(t1.graduate)` instead of `COUNT(*)` to sum actual graduate counts rather than counting rows. Do join `discipline_enrollments AS t1` with `campuses AS t2` instead of querying a single `graduates` table. Do use `ON t1.campus = t2.id` instead of no join condition to properly link campus data. Do filter with `t1.year = 2004` instead of `year = 2004` with explicit table reference. Do filter with `t2.campus = \"San Francisco State University\"` instead of `university = 'San Francisco State University'` to use the correct column name and table source. The amended query now correctly aggregates graduate counts from the proper relational structure instead of counting rows from a potentially incorrect single table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM graduates WHERE university = 'San Francisco State University' AND year = 2004;",
            "SELECT SUM(t1.Graduate) \nFROM discipline_enrollments AS t1\nJOIN Campuses AS t2 ON t1.Campus = t2.Id\nWHERE t1.Year = 2004 \nAND t2.Campus = 'San Francisco State University'"
        ],
        "rule_sql": []
    },
    "661": {
        "db_id": "journal_committee",
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "ground_truth": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
        "amends": [
            "Do select `T2.Name` from the `editor` table instead of `editor_name` from the `editors` table. Do join `journal_committee AS T1` and `journal AS T3` instead of querying only a single table. Do use `JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID` to connect committee members to their editor details instead of assuming editors exist independently. Do add `JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID` to access journal sales data through proper relationships instead of directly querying journal sales from an editors table. Do filter with `T3.Sales > 3000` on the actual journal sales column instead of using `journal_sales > 3000` from an incorrect table context. The amended query now correctly identifies editors associated with high-selling journals through proper table relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT editor_name FROM editors WHERE journal_sales > 3000",
            "SELECT T2.Name \nFROM journal_committee AS T1\nJOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID\nJOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID\nWHERE T3.Sales > 3000"
        ],
        "rule_sql": []
    },
    "819": {
        "db_id": "chinook_1",
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "ground_truth": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "amends": [
            "Do join `ALBUM AS T1` with `ARTIST AS T2` on `T1.ArtistId = T2.ArtistId` instead of querying only the `albums` table. Do filter on `T2.Name = \"AC/DC\"` instead of `artist = 'AC/DC'` to properly reference the artist name from the joined table. Do select `Title` from the album table instead of `title` to match the correct column name. The amended query now correctly joins the artist table to filter albums by artist name and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM albums WHERE artist = 'AC/DC';",
            "SELECT T1.Title FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC'"
        ],
        "rule_sql": []
    },
    "2753": {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "ground_truth": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "amends": [
            "Do select specific columns `Lieutenant_Governor` and `Comptroller` instead of generic `name` and `position` columns. Do query from table `party` instead of table `officials`. Do use double quotes `\"Democratic\"` for the party filter instead of single quotes `'Democratic'`. Do remove the complex position filter condition `(position = 'Lieutenant Governor' OR position = 'Comptroller')` instead of keeping it, as the column selection now directly targets the specific official roles. The amended query now correctly retrieves Democratic Lieutenant Governors and Comptrollers from the party table as intended."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, position FROM officials WHERE party = 'Democratic' AND (position = 'Lieutenant Governor' OR position = 'Comptroller');",
            "SELECT \"Lieutenant_Governor\", \"Comptroller\" FROM \"party\" WHERE \"Party\" = \"Democratic\""
        ],
        "rule_sql": []
    },
    "1383": {
        "db_id": "college_2",
        "question": "Give all information regarding instructors, in order of salary from least to greatest.",
        "ground_truth": "SELECT * FROM instructor ORDER BY salary",
        "amends": [
            "Do reference table `instructor` instead of `instructors` to ensure the correct table name is used. Do use ascending `ORDER BY salary` instead of descending `ORDER BY salary DESC` to sort by salary in ascending order rather than descending. The amended query now correctly selects from the intended table and applies the proper sorting direction to match the expected behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM instructors ORDER BY salary DESC;",
            "SELECT * FROM instructor ORDER BY salary ASC;"
        ],
        "rule_sql": []
    },
    "2797": {
        "db_id": "election",
        "question": "Which parties did not have any delegates in elections?",
        "ground_truth": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "amends": [
            "Do reference the `Party` column instead of `party_name` and use table `party` instead of `parties`. Do use `Party_ID` instead of `party_id` in the WHERE clause. Do change the subquery to select `Party` from the `election` table instead of selecting `DISTINCT party_id` from the `delegates` table. The amended query now correctly identifies parties not present in election records by using the appropriate table and column names from the schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party_name FROM parties WHERE party_id NOT IN (SELECT DISTINCT party_id FROM delegates);",
            "SELECT p.Party FROM party p WHERE p.Party_ID NOT IN (SELECT DISTINCT e.Party FROM election e)"
        ],
        "rule_sql": []
    },
    "5631": {
        "db_id": "swimming",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "ground_truth": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
        "amends": [
            "Do reference table `stadium` instead of `stadiums` and use column `opening_year` instead of `opened_year` while keeping the same aggregate function `avg(capacity)` and filter condition for year 2005. The amended query now correctly matches the intended behavior by using the proper table and column names from the schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(capacity) FROM stadiums WHERE opened_year = 2005;",
            "SELECT AVG(Capacity) FROM stadium WHERE Opening_year = 2005;"
        ],
        "rule_sql": []
    },
    "6570": {
        "db_id": "wine_1",
        "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
        "ground_truth": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "amends": [
            "Do use `DISTINCT Winery` instead of `winery` to eliminate duplicate results. Do use `BETWEEN 50 AND 100` instead of `price > 100 AND price < 50` to correctly filter for prices between 50 and 100 inclusive, fixing the contradictory filter that would never return results. Do reference `WINE` table instead of `wines` to match the correct table name. The amended query now correctly returns distinct wineries with prices between 50 and 100, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT winery FROM wines WHERE price > 100 AND price < 50;",
            "SELECT DISTINCT Winery FROM wine WHERE Price BETWEEN 50 AND 100;"
        ],
        "rule_sql": []
    },
    "160": {
        "db_id": "bike_1",
        "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?",
        "ground_truth": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "amends": [
            "Do reference column `min_dew_point_f` instead of `dew_point_min` in both the main query and subquery. Do use aggregate function `min(min_dew_point_f)` instead of `MIN(dew_point_min)` in the subquery. Do compare against numeric value `94107` instead of string literal `'94107'` for the zip_code condition. The amended query now correctly filters for records where the minimum dew point is below the overall minimum dew point for the specified zip code, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date, zip_code FROM weather WHERE dew_point_min < (SELECT MIN(dew_point_min) FROM weather WHERE zip_code = '94107')",
            "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)"
        ],
        "rule_sql": []
    },
    "3034": {
        "db_id": "loan_1",
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "ground_truth": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "amends": [
            "Do select only `sum(acc_bal)` instead of selecting both `customer_id` and `SUM(balance)` with a GROUP BY clause. Do query from the `customer` table instead of the `accounts` table. Do remove the `GROUP BY customer_id` clause instead of keeping it since the aggregation now applies to all matching rows without grouping. Do use column `acc_bal` for summation instead of `balance`. The amended query now correctly aggregates account balances from customer records in Utah or Texas without unnecessary grouping."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, SUM(balance) FROM accounts WHERE state = 'Utah' OR state = 'Texas' GROUP BY customer_id",
            "SELECT SUM(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas';"
        ],
        "rule_sql": []
    },
    "6726": {
        "db_id": "activity_1",
        "question": "What are the faculty ids of all the male faculty members?",
        "ground_truth": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
        "amends": [
            "Do use column alias `FacID` instead of `faculty_id` in the SELECT list. Do use table name `Faculty` instead of `faculty` in the FROM clause. Do use filter condition `Sex = 'M'` instead of `gender = 'female'` in the WHERE clause, changing both the column reference and the gender value being filtered. The amended query now correctly matches the RIGHT_SQL's behavior by selecting the appropriate column with the correct alias from the properly cased table name while filtering for male rather than female records."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT faculty_id FROM faculty WHERE gender = 'female';",
            "SELECT FacID FROM Faculty WHERE Sex = 'M'"
        ],
        "rule_sql": []
    },
    "4047": {
        "db_id": "student_1",
        "question": "what are the last names of the teachers who teach grade 5?",
        "ground_truth": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "amends": [
            "Do select `DISTINCT T2.lastname` instead of `first_name` to retrieve unique last names rather than first names. Do join `list AS T1` with `teachers AS T2` on `T1.classroom = T2.classroom` instead of querying only the `teachers` table without any join. Do keep the `WHERE grade = 5` filter but apply it to the joined tables instead of a single table. The amended query now correctly identifies unique teacher lastnames for grade 5 by joining classroom assignments between lists and teachers tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM teachers WHERE grade = 5;",
            "SELECT DISTINCT T2.LastName\nFROM list AS T1\nJOIN teachers AS T2 ON T1.Classroom = T2.Classroom\nWHERE T1.Grade = 5"
        ],
        "rule_sql": []
    },
    "5684": {
        "db_id": "dorm_1",
        "question": "How many students are there?",
        "ground_truth": "SELECT count(*) FROM student",
        "amends": [
            "Do query the `student` table instead of the `teachers` table, changing the data source entirely while maintaining the same aggregate function structure with `count(*)`. The amended query now correctly counts records from the student table instead of the teachers table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teachers;",
            "SELECT COUNT(*) FROM Student;"
        ],
        "rule_sql": []
    },
    "6073": {
        "db_id": "customers_and_addresses",
        "question": "Find the name of all customers whose name contains \"Alex\".",
        "ground_truth": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "amends": [
            "Do select `customer_name` instead of `*` to specify the exact column needed. Do use `customer_name` in the WHERE filter instead of `name` to reference the correct column name. Do use double quotes for the string pattern instead of single quotes for consistency with the right SQL's formatting. The amended query now correctly selects only the customer_name column and filters on the proper column name, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM customers WHERE name LIKE '%Alex%';",
            "SELECT customer_name FROM Customers WHERE customer_name LIKE \"%Alex%\""
        ],
        "rule_sql": []
    },
    "3248": {
        "db_id": "college_1",
        "question": "How many employees are there all together?",
        "ground_truth": "SELECT count(*) FROM employee",
        "amends": [
            "Do reference the `employee` table instead of the `employees` table. Do remove the `WHERE department = 'Sales'` filter instead of keeping it. The amended query now correctly counts all records from the employee table without any department filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE department = 'Sales';",
            "SELECT COUNT(*) FROM EMPLOYEE;"
        ],
        "rule_sql": []
    },
    "535": {
        "db_id": "allergy_1",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "ground_truth": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "amends": [
            "Do select `fname` and `major` instead of `first_name` and `major`. Do use table `Student` instead of `students`. Do remove the direct `allergy != 'soy'` filter instead of keeping it. Do add a subquery with `NOT IN` condition instead of omitting it, using `StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")` to properly exclude students with soy allergies by checking the related allergy table rather than assuming the allergy column exists directly in the student table. The amended query now correctly matches the intended behavior by properly handling the allergy relationship through the associated table structure.",
            "Do use double quotes `\"Soy\"` instead of single quotes `'soy'` for the allergy value comparison. Do reference the correct table name `Has_allergy` instead of `Has_Allergy` to match the actual schema. The amended query now correctly identifies students without soy allergies by using the proper table reference and string literal format."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, major FROM students WHERE allergy != 'soy';",
            "SELECT fname, major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
            "SELECT fname, major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")"
        ],
        "rule_sql": []
    },
    "4992": {
        "db_id": "soccer_2",
        "question": "What is the name of school that has the smallest enrollment in each state?",
        "ground_truth": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "amends": [
            "Do reference table `college` instead of `schools` and use column `cName` instead of `name` in the SELECT list. Do use column `enr` instead of `enrollment` for the aggregate function while maintaining the `MIN` aggregation. Do keep the `GROUP BY state` clause unchanged as it correctly groups by state. The amended query now matches RIGHT_SQL's behavior by selecting from the correct table with the appropriate column names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, name, MIN(enrollment) FROM schools GROUP BY state;",
            "SELECT cName, state, MIN(enr) AS min_enrollment FROM College GROUP BY state"
        ],
        "rule_sql": []
    },
    "4953": {
        "db_id": "soccer_2",
        "question": "What is the number of colleges with a student population greater than 15000?",
        "ground_truth": "SELECT count(*) FROM College WHERE enr  >  15000",
        "amends": [
            "Do reference the `College` table instead of `colleges` in the FROM clause. Do use the `enr` column instead of `student_population` in the WHERE filter condition. Do maintain the same aggregate function `count(*)` and comparison operator `>` with the same threshold value 15000. The amended query now correctly references the proper table and column names to match the intended logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM colleges WHERE student_population > 15000;",
            "SELECT COUNT(*) FROM College WHERE enr > 15000"
        ],
        "rule_sql": []
    },
    "6998": {
        "db_id": "culture_company",
        "question": "Show all company names with a movie directed in year 1999.",
        "ground_truth": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999",
        "amends": [
            "Do select `T2.company_name` from the joined table instead of `company_name` directly from the movies table. Do join `movie AS T1` with `culture_company AS T2` using `ON T1.movie_id = T2.movie_id` instead of querying a single table. Do filter on `T1.year = 1999` instead of `year = 1999` to reference the correct table alias. The amended query now correctly retrieves company names from the culture_company table by joining with movie data and filtering by year, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name FROM movies WHERE year = 1999",
            "SELECT T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.Year = 1999"
        ],
        "rule_sql": []
    },
    "938": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names and locations of all enzymes listed?",
        "ground_truth": "SELECT name ,  LOCATION FROM enzyme",
        "amends": [
            "Do reference table `enzyme` instead of `enzymes` and use uppercase `LOCATION` instead of lowercase `location` instead of the original column name casing. Do remove the `WHERE id > 0` filter instead of keeping it, as the right query retrieves all records without filtering. The amended query now correctly selects from the proper table name with the specified column casing and returns all records without unnecessary filtering, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, location FROM enzymes WHERE id > 0;",
            "SELECT name, Location FROM enzyme"
        ],
        "rule_sql": []
    },
    "2045": {
        "db_id": "party_people",
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "ground_truth": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
        "amends": [
            "Do select columns `minister`, `took_office`, and `left_office` instead of `minister_name`, `office_start_date`, and `office_end_date`. Do query from table `party` instead of `ministers`. Do order by `left_office` instead of `office_start_date`. The amended query now correctly retrieves minister information from the party table sorted by departure date."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT minister_name, office_start_date, office_end_date FROM ministers ORDER BY office_start_date;",
            "SELECT minister, took_office, left_office FROM party ORDER BY left_office;"
        ],
        "rule_sql": []
    },
    "2810": {
        "db_id": "news_report",
        "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "ground_truth": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3",
        "amends": [
            "Do use `INTERSECT` to find common nationalities instead of self-joining the same table twice with different aliases. Do query the `journalist` table instead of `nations` and `journalists` tables. Do select `Nationality` column instead of `nation_name`. Do filter with `Years_working > 10` in the first branch and `Years_working < 3` in the second branch instead of applying both conditions simultaneously through joins. Do remove the `DISTINCT` keyword since `INTERSECT` inherently returns unique values. Do eliminate the table aliases and join conditions entirely. The amended query now correctly identifies journalists who have both experienced members (>10 years) and junior members (<3 years) within the same nationality, matching the RIGHT_SQL's set intersection behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT n.nation_name\nFROM nations n\nJOIN journalists j1 ON n.nation_id = j1.nation_id\nJOIN journalists j2 ON n.nation_id = j2.nation_id\nWHERE j1.years_working > 10 AND j2.years_working < 3",
            "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3"
        ],
        "rule_sql": []
    },
    "3826": {
        "db_id": "e_learning",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "ground_truth": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "amends": [
            "Do reference `Courses AS T1` and `Student_Course_Enrolment AS T2` instead of the non-existent `students` table. Do use `JOIN` with predicate `T1.course_id = T2.course_id` instead of missing the table relationship entirely. Do count `*` instead of `student_id` to include all enrollment records. Do group by `T1.course_name` with proper table qualification instead of unqualified `course_name`. The amended query now correctly joins the course and enrollment tables to count actual course enrollments."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name, COUNT(student_id) FROM students GROUP BY course_name;",
            "SELECT T1.course_name, COUNT(*) AS enrollment_count\nFROM Courses AS T1\nJOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_name;"
        ],
        "rule_sql": []
    },
    "6781": {
        "db_id": "activity_1",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "ground_truth": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "amends": [
            "Do add `T1.activity_name` with table alias instead of just `activity_name`, and do add `FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID` with explicit join instead of just `FROM activities`. Do change `GROUP BY T1.actID` instead of `GROUP BY activity_name` to ensure proper grouping by the primary key. The amended query now correctly joins the Activity and Faculty_participates_in tables and groups by the activity ID rather than name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT activity_name, COUNT(*) FROM activities GROUP BY activity_name;",
            "SELECT T1.activity_name, COUNT(T2.FacID) AS faculty_count\nFROM Activity AS T1\nJOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid\nGROUP BY T1.actid;"
        ],
        "rule_sql": []
    },
    "6507": {
        "db_id": "scientist_1",
        "question": "Find the name of scientists who are not assigned to any project.",
        "ground_truth": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
        "amends": [
            "Do select `Name` instead of `name` in the SELECT list. Do change the WHERE filter to use `ssn NOT IN` with a subquery instead of `project_id IS NOT NULL`. Do add a correlated subquery `(SELECT scientist FROM AssignedTo)` instead of omitting it. The amended query now correctly filters scientists who are not assigned to any projects rather than those with non-null project IDs, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM scientists WHERE project_id IS NOT NULL;",
            "SELECT Name FROM Scientists WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo)"
        ],
        "rule_sql": []
    },
    "5471": {
        "db_id": "voter_2",
        "question": "List all the distinct president votes and the vice president votes.",
        "ground_truth": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "amends": [
            "Do use `DISTINCT` instead of omitting it to eliminate duplicate rows. Do reference columns `President_Vote` and `VICE_President_Vote` instead of `president_votes` and `vice_president_votes` with corrected case sensitivity. Do query from table `VOTING_RECORD` instead of `votes` to access the correct data source. The amended query now matches RIGHT_SQL's behavior by selecting unique vote records from the proper voting table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT president_votes, vice_president_votes FROM votes",
            "SELECT DISTINCT President_Vote, Vice_President_Vote FROM Voting_record;"
        ],
        "rule_sql": []
    },
    "1684": {
        "db_id": "theme_gallery",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "ground_truth": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "amends": [
            "Do use `INTERSECT` to find themes with both low and high attendance instead of `OR` which finds themes with either condition. Do join `exhibition_record` and `exhibition` tables instead of `themes` and `exhibitions`. Do reference `exhibition_id` for joining instead of `theme_id`. Do select `theme` column instead of `name`. Do remove `DISTINCT` since `INTERSECT` inherently returns unique results instead of keeping it. Do split the query into two separate SELECT statements with different WHERE conditions instead of a single query with OR. The amended query now correctly identifies themes that have both attendance below 100 and above 500, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT t.name \nFROM themes t\nJOIN exhibitions e ON t.id = e.theme_id\nWHERE e.attendance < 100 OR e.attendance > 500;",
            "SELECT Theme FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance < 100\nINTERSECT\nSELECT Theme FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance > 500"
        ],
        "rule_sql": []
    },
    "2790": {
        "db_id": "election",
        "question": "Show the name of the party that has the most delegates.",
        "ground_truth": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do join `election` and `party` tables with `INNER JOIN` on `T1.Party = T2.Party_ID` instead of querying only the `parties` table. Do select `T2.Party` instead of `party_name`. Do add `GROUP BY T1.Party` and aggregate with `COUNT(*)` instead of ordering by `delegates`. Do order by `COUNT(*) DESC` instead of `delegates DESC`. The amended query now correctly identifies the party with the most election entries by counting occurrences in the election table rather than relying on a delegates column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party_name FROM parties ORDER BY delegates DESC LIMIT 1;",
            "SELECT T2.Party\nFROM election T1\nINNER JOIN party T2 ON T1.Party = T2.Party_ID\nGROUP BY T1.Party\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3938": {
        "db_id": "hospital_1",
        "question": "How many different types of rooms are there?",
        "ground_truth": "SELECT count(DISTINCT roomtype) FROM room",
        "amends": [
            "Do `count(DISTINCT roomtype)` instead of `COUNT(*)` to count distinct room types rather than all rows. Do reference table `room` instead of `rooms` to use the correct table name. End with confirmation that the amended query now correctly counts distinct room types from the room table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rooms;",
            "SELECT COUNT(DISTINCT RoomType) FROM Room;"
        ],
        "rule_sql": []
    },
    "2539": {
        "db_id": "county_public_safety",
        "question": "Return the minimum and maximum crime rates across all counties.",
        "ground_truth": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
        "amends": [
            "Do reference the `county_public_safety` table instead of the `counties` table. Do use lowercase function names `min` and `max` instead of uppercase `MIN` and `MAX`. Do reference the column as `Crime_rate` instead of `crime_rate`. Do remove the `IS NOT NULL` filter instead of keeping it since the aggregate functions inherently handle null values. Do remove the column aliases `min_crime_rate` and `max_crime_rate` instead of including them. The amended query now correctly calculates the minimum and maximum crime rates from the appropriate table without unnecessary null filtering and aliases."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(crime_rate) AS min_crime_rate, MAX(crime_rate) AS max_crime_rate FROM counties WHERE crime_rate IS NOT NULL",
            "SELECT min(Crime_rate), max(Crime_rate) FROM county_public_safety"
        ],
        "rule_sql": []
    },
    "1990": {
        "db_id": "phone_market",
        "question": "For each phone, show its names and total number of stocks.",
        "ground_truth": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
        "amends": [
            "Do select `T2.Name` and `sum(T1.Num_of_stock)` instead of `name` and `COUNT(*)`. Do join `phone_market AS T1` with `phone AS T2` on `T1.Phone_ID = T2.Phone_ID` instead of querying only `phones` table. Do group by `T2.Name` instead of `name`. The amended query now correctly aggregates stock quantities by phone name through proper table joining."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, COUNT(*) FROM phones GROUP BY name;",
            "SELECT T2.Name, SUM(T1.Num_of_stock) \nFROM phone_market AS T1 \nJOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID \nGROUP BY T2.Name"
        ],
        "rule_sql": []
    },
    "1303": {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "ground_truth": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "amends": [
            "Do select `player_api_id` from `Player` instead of `player_id` from `players`. Do use `INTERSECT` with a second query on `Player_Attributes` instead of a single table query. Do filter `height >= 180` in the first query on `Player` instead of combining it with `overall_rating` in one table. Do filter `overall_rating > 85` in the second query on `Player_Attributes` instead of including it in the main `WHERE` clause. Do remove the `AND` condition between height and rating instead of keeping them together in one filter. The amended query now correctly finds players who meet both criteria by intersecting results from two different tables, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_id FROM players WHERE height >= 180 AND overall_rating > 85;",
            "SELECT player_api_id FROM Player WHERE height >= 180\nINTERSECT\nSELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85"
        ],
        "rule_sql": []
    },
    "4143": {
        "db_id": "film_rank",
        "question": "What is the name of teh studio that created the most films?",
        "ground_truth": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference table as `film` instead of `films` and use column `Studio` instead of `studio_name`. Do order by `COUNT(*) DESC` instead of `ASC` and use alias `film_count` in the ORDER BY clause instead of referencing the aggregate directly. Do remove the column alias `film_count` from the SELECT list instead of keeping it, as the RIGHT_SQL does not include an alias for the count. The amended query now correctly identifies the studio with the highest film count by using descending order and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT studio_name, COUNT(*) as film_count FROM films GROUP BY studio_name ORDER BY film_count ASC LIMIT 1;",
            "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2933": {
        "db_id": "sakila_1",
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "ground_truth": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'"
        ],
        "rule_sql": []
    },
    "6643": {
        "db_id": "driving_school",
        "question": "In what city does Janessa Sawayn live?",
        "ground_truth": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "amends": [
            "Do select `T1.city` from the `Addresses` table instead of `city` from the `users` table. Do join `Staff AS T2` on `T1.address_id = T2.staff_address_id` instead of querying the `users` table directly. Do filter on `T2.first_name` and `T2.last_name` instead of filtering on non-existent columns in the original table. Do use double quotes for string literals `\"Janessa\"` and `\"Sawayn\"` instead of single quotes. The amended query now correctly retrieves city information from the Addresses table by joining with Staff table using the proper relationship, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM users WHERE first_name = 'Janessa' AND last_name = 'Sawayn';",
            "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\""
        ],
        "rule_sql": []
    },
    "5424": {
        "db_id": "shop_membership",
        "question": "Show member names without any registered branch.",
        "ground_truth": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "amends": [
            "Do reference the `member` table instead of `members` in the FROM clause. Do use a subquery with `NOT IN` condition checking for `member_id` values in the `membership_register_branch` table instead of filtering with `WHERE branch_id IS NOT NULL`. Do remove the `branch_id` column reference entirely instead of including it in the WHERE condition. The amended query now correctly identifies members not registered in any branch by checking against the membership register table instead of relying on a potentially incorrect NULL check on branch_id."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM members WHERE branch_id IS NOT NULL;",
            "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM membership_register_branch)"
        ],
        "rule_sql": []
    },
    "711": {
        "db_id": "customers_card_transactions",
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "ground_truth": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "amends": [
            "Do reference the `Customers_cards` table instead of the `cards` table in the FROM clause. Do maintain the same SELECT list with `customer_id` and `count(*)` and the same GROUP BY clause with `customer_id`. The amended query now correctly references the intended table source while preserving the aggregation logic to count records per customer."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, COUNT(*) FROM cards GROUP BY customer_id;",
            "SELECT customer_id, COUNT(*) AS number_of_cards FROM Customers_Cards GROUP BY customer_id"
        ],
        "rule_sql": []
    },
    "3842": {
        "db_id": "e_learning",
        "question": "Find the personal names of students not enrolled in any course.",
        "ground_truth": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id",
        "amends": [
            "Do select `personal_name` instead of `name` and use `EXCEPT` instead of `NOT IN` with a subquery. Do reference the `Students` table directly instead of `students` and add table alias `T1` for the main query. Do add a `JOIN` with `Student_Course_Enrolment AS T2` on `T1.student_id = T2.student_id` instead of using a subquery with `enrollments` table. Do remove the `WHERE` clause with `NOT IN` predicate instead of keeping it. The amended query now correctly identifies students not enrolled in any courses using proper table names and join semantics instead of the potentially problematic `NOT IN` approach with null values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE student_id NOT IN (SELECT student_id FROM enrollments)",
            "SELECT T1.personal_name FROM Students AS T1 EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id"
        ],
        "rule_sql": []
    },
    "2205": {
        "db_id": "formula_1",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "ground_truth": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "amends": [
            "Do use `OR` instead of `AND` in the WHERE clause to correctly select races where time is either after 12:00:00 or before 09:00:00, instead of incorrectly requiring both conditions to be true simultaneously which would return no results. The amended query now matches RIGHT_SQL's behavior by properly handling the time range logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM races WHERE time > '12:00:00' AND time < '09:00:00';",
            "SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00';"
        ],
        "rule_sql": []
    },
    "1980": {
        "db_id": "phone_market",
        "question": "What are the memories and carriers of phones?",
        "ground_truth": "SELECT Memory_in_G ,  Carrier FROM phone",
        "amends": [
            "Do use `Memory_in_G` instead of `memory` for the column name and `Carrier` instead of `carrier` for proper case sensitivity. Do reference the table as `phone` instead of `phones` to match the correct table name. Do remove the `WHERE memory > 0 AND carrier IS NOT NULL` filter instead of keeping it, as the right query does not include any filtering conditions. The amended query now correctly selects the specified columns from the proper table without unnecessary filtering, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT memory, carrier FROM phones WHERE memory > 0 AND carrier IS NOT NULL;",
            "SELECT Memory_in_G, Carrier FROM phone;"
        ],
        "rule_sql": []
    },
    "2883": {
        "db_id": "icfp_1",
        "question": "List the titles of the papers whose authors are from the institution \"Indiana University\".",
        "ground_truth": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "amends": [
            "Do add `DISTINCT` modifier instead of omitting it to eliminate duplicate titles. Do change the FROM clause to use explicit `JOIN` syntax with `papers AS t1` joined to `authorship AS t2` on `t1.paperid = t2.paperid` instead of querying only the `papers` table directly. Do add a second join to `inst AS t3` on `t2.instid = t3.instid` instead of missing this relationship entirely. Do change the WHERE filter to use `t3.name = \"Indiana University\"` instead of the incorrect `author_institution = 'Indiana University'` column reference. The amended query now correctly identifies papers through the proper join relationships and institutional name matching, eliminating the schema assumption bug in the original query."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE author_institution = 'Indiana University'",
            "SELECT DISTINCT t1.title\nFROM papers AS t1\nJOIN authorship AS t2 ON t1.paperID = t2.paperID\nJOIN inst AS t3 ON t2.instID = t3.instID\nWHERE t3.name = 'Indiana University'"
        ],
        "rule_sql": []
    },
    "431": {
        "db_id": "flight_1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "ground_truth": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `T2.name` instead of `a.name` and use `count(*)` instead of `COUNT(c.eid)` in the ORDER BY clause. Do join `Certificate AS T1` instead of `certificates c` and `Aircraft AS T2` instead of `aircraft a`. Do use the join condition `T2.aid = T1.aid` instead of `a.aid = c.aid`. Do group by `T1.aid` instead of `a.aid`. The amended query now correctly returns the aircraft name with the most certificates by counting all certificate records per aircraft rather than counting specific employee IDs.",
            "Do change the sort direction to `DESC` instead of `ASC` in the `ORDER BY` clause, which now correctly orders the results by descending count instead of ascending count.",
            "Do change the `ORDER BY` clause to `DESC` instead of `ASC` to correctly identify the aircraft with the most certificates. The amended query now matches RIGHT_SQL's behavior by ordering the count in descending order to find the maximum value."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.name FROM aircraft a JOIN certificates c ON a.aid = c.aid GROUP BY a.aid ORDER BY COUNT(c.eid) DESC LIMIT 1;",
            "SELECT T2.name\nFROM certificate AS T1\nJOIN aircraft AS T2 ON T2.aid = T1.aid\nGROUP BY T1.aid\nORDER BY count(*) ASC\nLIMIT 1",
            "SELECT T2.name\nFROM certificate AS T1\nJOIN aircraft AS T2 ON T2.aid = T1.aid\nGROUP BY T1.aid\nORDER BY COUNT(*) ASC\nLIMIT 1",
            "SELECT T2.name\nFROM Certificate AS T1\nJOIN Aircraft AS T2 ON T2.aid = T1.aid\nGROUP BY T1.aid\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "3778": {
        "db_id": "e_learning",
        "question": "List all the dates of enrollment and completion of students.",
        "ground_truth": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "amends": [
            "Do reference `date_of_enrolment` and `date_of_completion` columns instead of `enrollment_date` and `completion_date`. Do query from `Student_Course_Enrolment` table instead of `students` table. Do remove the `WHERE enrollment_date IS NOT NULL OR completion_date IS NOT NULL` filter instead of keeping it. Do remove the `ORDER BY enrollment_date` clause instead of including it. The amended query now correctly references the proper table and column names without unnecessary filtering or sorting."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT enrollment_date, completion_date FROM students WHERE enrollment_date IS NOT NULL OR completion_date IS NOT NULL ORDER BY enrollment_date;",
            "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment"
        ],
        "rule_sql": []
    },
    "2991": {
        "db_id": "sakila_1",
        "question": "Return the address and email of the customer with the first name Linda.",
        "ground_truth": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "amends": [
            "Do select `T2.address` and `T1.email` instead of `address` and `email` without table aliases. Do use `FROM customer AS T1 JOIN address AS T2` instead of `FROM customers` alone, adding the address table with an explicit join. Do specify the join condition `ON T2.address_id = T1.address_id` instead of omitting any join relationship. Do filter on `T1.first_name = 'LINDA'` with uppercase instead of `first_name = 'Linda'` with lowercase and without table qualification. The amended query now correctly joins customer and address tables to retrieve the associated address data and uses proper case sensitivity for the filter condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address, email FROM customers WHERE first_name = 'Linda';",
            "SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'"
        ],
        "rule_sql": []
    },
    "6711": {
        "db_id": "driving_school",
        "question": "What are the last names that are used by customers and staff?",
        "ground_truth": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "amends": [
            "Do use `INTERSECT` instead of `UNION` to find common last names between tables rather than combining all names. Do reference `Customers` with proper capitalization instead of lowercase `customers` to match the actual table name. Do reference `Staff` with proper capitalization instead of lowercase `staff` to maintain naming consistency. The amended query now correctly identifies only those last names that exist in both the Customers and Staff tables, matching the RIGHT_SQL's intersection behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name FROM customers UNION SELECT last_name FROM staff",
            "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff;"
        ],
        "rule_sql": []
    },
    "2796": {
        "db_id": "election",
        "question": "What are the names of parties that do not have delegates in election?",
        "ground_truth": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "amends": [
            "Do reference table `party` instead of `parties` and select column `Party` instead of `name`. Do use filter `Party_ID NOT IN` instead of `party_id NOT IN` and reference subquery from table `election` instead of `delegates` with column `Party` instead of `party_id`. The amended query now correctly filters parties not found in the election table instead of the delegates table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM parties WHERE party_id NOT IN (SELECT party_id FROM delegates)",
            "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
        ],
        "rule_sql": []
    },
    "3563": {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "ground_truth": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "amends": [
            "Do use `avg(rating)` without an alias instead of `AVG(rating) as average_rating`. Do reference the `languages` column instead of `language`. Do query from the `song` table instead of `songs`. Do group by `languages` instead of `language`. The amended query now correctly calculates the average rating grouped by languages from the song table.",
            "Do place `languages` after `avg(rating)` in the SELECT list instead of before it, maintaining the same GROUP BY clause. The amended query now correctly returns the average rating grouped by languages, matching the RIGHT_SQL's behavior.",
            "Do place the `languages` column after the aggregate function `avg(rating)` in the SELECT list instead of listing it first. Do maintain the same GROUP BY clause with `languages` to ensure proper aggregation by language groups. The amended query now correctly calculates average ratings grouped by languages while maintaining the same logical behavior as the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language, AVG(rating) as average_rating FROM songs GROUP BY language;",
            "SELECT languages, avg(rating) FROM song GROUP BY languages;",
            "SELECT languages, avg(rating) FROM song GROUP BY languages;",
            "SELECT avg(rating), languages FROM song GROUP BY languages;"
        ],
        "rule_sql": []
    },
    "1662": {
        "db_id": "theme_gallery",
        "question": "Return the name of the artist who has the latest join year.",
        "ground_truth": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "amends": [
            "Do reference table `artist` instead of `artists` to use the correct table name. Do order by column `year_join` instead of `join_year` to use the proper column name for the join year. The amended query now correctly retrieves the artist name from the right table ordered by the correct join year column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM artists ORDER BY join_year DESC LIMIT 1;",
            "SELECT Name FROM artist ORDER BY Year_Join DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6690": {
        "db_id": "driving_school",
        "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "ground_truth": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of no aliases. Do reference the correct column `amount_payment` instead of `amount`. Do use an explicit `JOIN` with `ON T1.customer_id = T2.customer_id` instead of a subquery with `IN`. Do reference the joined table `T2` for the `first_name` and `last_name` filters instead of using a subquery. Do use double quotes around string literals instead of single quotes. The amended query now correctly joins the payment and customer tables directly and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payments WHERE customer_id IN (SELECT customer_id FROM customers WHERE first_name = 'Carole' AND last_name = 'Bernhard')",
            "SELECT SUM(T1.amount_payment) AS total_payment\nFROM Customer_Payments T1\nJOIN Customers T2 ON T1.customer_id = T2.customer_id\nWHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""
        ],
        "rule_sql": []
    },
    "4911": {
        "db_id": "store_product",
        "question": "What is the name of the district with the smallest area?",
        "ground_truth": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "amends": [
            "Do select `district_name` instead of `name` and order by `city_area` in ascending order instead of `area` in descending order. Do reference table `district` instead of `districts`. The amended query now correctly retrieves the district name with the smallest city area from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM districts ORDER BY area DESC LIMIT 1;",
            "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1224": {
        "db_id": "apartment_rentals",
        "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "ground_truth": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "amends": [
            "Do select `T1.booking_start_date` twice instead of `start_date` and `end_date`. Do add `Apartment_Bookings AS T1` and `Apartments AS T2` with a `JOIN` on `T1.apt_id = T2.apt_id` instead of querying only the `apartments` table. Do filter on `T2.bedroom_count > 2` instead of `bedrooms > 2`. The amended query now correctly joins booking and apartment data to filter bookings for apartments with more than two bedrooms, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_date, end_date FROM apartments WHERE bedrooms > 2",
            "SELECT T1.booking_start_date, T1.booking_start_date\nFROM Apartment_Bookings AS T1\nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id\nWHERE T2.bedroom_count > 2"
        ],
        "rule_sql": []
    },
    "766": {
        "db_id": "race_track",
        "question": "What are the names, classes, and dates for all races?",
        "ground_truth": "SELECT name ,  CLASS ,  date FROM race",
        "amends": [
            "Do reference table `race` instead of `races` in the FROM clause, as the correct table name is singular rather than plural. The WHERE clause remains unchanged with `date IS NULL` filter. The SELECT list maintains the same columns `name`, `class`, and `date` without any changes to expressions, aliases, or aggregates. There are no joins, GROUP BY/HAVING clauses, window functions, subqueries, CTEs, ordering, limiting, or UNION operations to modify. The amended query now correctly queries the `race` table instead of the non-existent `races` table, matching the RIGHT_SQL's behavior.",
            "Do include all records from the `race` table instead of filtering with `WHERE date IS NULL`, as the right query removes the filter entirely to return all rows rather than only those with null dates. The amended query now matches the right SQL's behavior by selecting all name, class, and date values without any filtering conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, class, date FROM races WHERE date IS NULL;",
            "SELECT name, class, date FROM race WHERE date IS NULL",
            "SELECT name, class, date FROM race"
        ],
        "rule_sql": []
    },
    "6991": {
        "db_id": "culture_company",
        "question": "Which directors had a movie in either 1999 or 2000?",
        "ground_truth": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
        "amends": [
            "Do reference table `movie` instead of `movies` in the FROM clause. Do use uppercase `YEAR` instead of lowercase `year` for the column name in the WHERE filter conditions. The amended query now correctly references the intended table and column names to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies WHERE year = 1999 OR year = 2000;",
            "SELECT DISTINCT Director FROM movie WHERE Year = 1999 OR Year = 2000;"
        ],
        "rule_sql": []
    },
    "4872": {
        "db_id": "school_player",
        "question": "How many different positions of players are there?",
        "ground_truth": "SELECT count(DISTINCT POSITION) FROM player",
        "amends": [
            "Do use `count(DISTINCT POSITION)` instead of `COUNT(*)` to count distinct positions rather than all rows. Do reference the correct table name `player` instead of `players` to ensure the query targets the proper data source. The amended query now correctly counts unique player positions rather than total player records, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players;",
            "SELECT COUNT(DISTINCT Position) FROM player;"
        ],
        "rule_sql": []
    },
    "439": {
        "db_id": "allergy_1",
        "question": "How many allergies are there?",
        "ground_truth": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "amends": [
            "Do select `count(DISTINCT allergy)` instead of `COUNT(*)` to count distinct allergy values rather than all rows. Do query from `Allergy_type` table instead of `patients` table to access the correct data source. Do remove the `WHERE allergy IS NOT NULL` filter instead of keeping it since counting distinct values inherently excludes nulls. The amended query now correctly counts distinct allergy types from the appropriate table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE allergy IS NOT NULL;",
            "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type"
        ],
        "rule_sql": []
    },
    "919": {
        "db_id": "insurance_fnol",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "ground_truth": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "amends": [
            "Do select `customer_name` from `customers` instead of `name` from `users`. Do use `EXCEPT` instead of `NOT IN` with a subquery. Do join `customers AS t1` with `first_notification_of_loss AS t2` on `t1.customer_id = t2.customer_id` instead of filtering with a subquery on `notifications` with `type = 'loss'`. Do reference `t1.customer_name` in the second part of the EXCEPT instead of selecting from a single table. The amended query now correctly identifies customers without loss notifications by using EXCEPT with a proper join instead of the potentially problematic NOT IN approach with a subquery."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM users WHERE user_id NOT IN (SELECT user_id FROM notifications WHERE type = 'loss')",
            "SELECT Customer_name FROM Customers\nEXCEPT\nSELECT t1.Customer_name FROM Customers AS t1\nJOIN First_Notification_of_Loss AS t2 ON t1.Customer_ID = t2.Customer_ID;"
        ],
        "rule_sql": []
    },
    "2959": {
        "db_id": "sakila_1",
        "question": "Return the sum of all payment amounts.",
        "ground_truth": "SELECT sum(amount) FROM payment",
        "amends": [
            "Do use `sum(amount)` instead of `COUNT(*)` to calculate the total payment amount rather than counting rows. Do reference table `payment` instead of `payments` to use the correct table name. The amended query now correctly sums payment amounts from the proper table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM payments;",
            "SELECT SUM(amount) FROM payment;"
        ],
        "rule_sql": []
    },
    "5230": {
        "db_id": "music_2",
        "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
        "ground_truth": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"",
        "amends": [
            "Do select `TYPE` from the `vocals` table instead of `vocal_type` from `musicians`. Do join `vocals AS T1` with `songs AS T2` on `T1.songid = T2.songid` instead of querying a single table. Do add a second join to `band AS T3` on `T1.bandmate = T3.id` instead of omitting band relationships. Do filter on `T3.firstname = \"Solveig\"` instead of `first_name = 'Solveig'` and on `T2.title = \"A Bar In Amsterdam\"` instead of `song_title = 'A Bar in Amsterdam'`. The amended query now correctly retrieves vocal type through proper table relationships instead of relying on a denormalized musicians table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vocal_type FROM musicians WHERE first_name = 'Solveig' AND song_title = 'A Bar in Amsterdam';",
            "SELECT T1.Type \nFROM Vocals AS T1\nJOIN Songs AS T2 ON T1.SongId = T2.SongId\nJOIN Band AS T3 ON T1.Bandmate = T3.Id\nWHERE T3.Firstname = 'Solveig' \nAND T2.Title = 'A Bar in Amsterdam'"
        ],
        "rule_sql": []
    },
    "2432": {
        "db_id": "candidate_poll",
        "question": "List all info about all people.",
        "ground_truth": "SELECT * FROM people",
        "amends": [
            "Do reference the `people` table instead of the `employees` table in the FROM clause. The amended query now correctly retrieves data from the intended table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees",
            "SELECT * FROM people;"
        ],
        "rule_sql": []
    },
    "3882": {
        "db_id": "insurance_policies",
        "question": "What is the total amount of payment?",
        "ground_truth": "SELECT sum(Amount_Payment) FROM Payments",
        "amends": [
            "Do reference the correct column name `Amount_Payment` instead of `amount` in both the SELECT aggregate and WHERE filter. Do reference the correct table name `Payments` instead of `payments` in the FROM clause. Do remove the `WHERE amount > 1000` filter instead of keeping it, as the right query aggregates all payments without filtering. Do use lowercase `sum` function instead of uppercase `SUM` for consistency with the right query's syntax. The amended query now correctly sums all payment amounts from the Payments table without unnecessary filtering, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payments WHERE amount > 1000",
            "SELECT sum(Amount_Payment) FROM Payments"
        ],
        "rule_sql": []
    },
    "1064": {
        "db_id": "match_season",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "ground_truth": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "amends": [
            "Do select from `match_season` table instead of `players` table. Do use column names `Draft_Pick_Number` and `Draft_Class` instead of `draft_pick_number` and `draft_class`. Do filter on `POSITION = \"Defender\"` instead of `position = 'defender'` with proper case sensitivity and quotation style. The amended query now correctly retrieves draft information from the match_season table for defenders with proper column references and filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT draft_pick_number, draft_class FROM players WHERE position = 'defender';",
            "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = \"Defender\";"
        ],
        "rule_sql": []
    },
    "4966": {
        "db_id": "soccer_2",
        "question": "Find the max, average and min training hours of all players.",
        "ground_truth": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",
        "amends": [
            "Do select `avg(HS)`, `max(HS)`, and `min(HS)` instead of `MAX(training_hours)`, `AVG(training_hours)`, and `MIN(training_hours)`. Do use table `Player` instead of `players`. Do remove the `WHERE training_hours > 100` filter instead of keeping it, as the right query aggregates all rows without filtering. The amended query now correctly calculates statistics on the HS column from the Player table without unnecessary filtering.",
            "Do use lowercase function names `avg`, `max`, and `min` instead of uppercase `MAX`, `AVG`, and `MIN`. Do remove the column aliases `max_hs`, `avg_hs`, and `min_hs` instead of keeping them. Do change the order of aggregate functions to `avg(HS)`, `max(HS)`, `min(HS)` instead of `MAX(HS)`, `AVG(HS)`, `MIN(HS)`. The amended query now matches the right SQL's behavior with identical aggregate function selection and presentation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(training_hours), AVG(training_hours), MIN(training_hours) FROM players WHERE training_hours > 100;",
            "SELECT MAX(HS) as max_hs, AVG(HS) as avg_hs, MIN(HS) as min_hs FROM Player;",
            "SELECT avg(HS), max(HS), min(HS) FROM Player"
        ],
        "rule_sql": []
    },
    "1920": {
        "db_id": "protein_institute",
        "question": "Show the name of buildings that do not have any institution.",
        "ground_truth": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
        "amends": [
            "Do query from `building` table instead of `buildings` table. Do use `building_id NOT IN` subquery filter instead of `institution_id IS NOT NULL` condition. Do remove the incorrect `institution_id` column reference and instead use a correlated subquery checking for building_id absence in the institution table. The amended query now correctly identifies buildings not associated with any institution by checking for non-existence in the institution table rather than relying on a potentially incorrect null check."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM buildings WHERE institution_id IS NOT NULL",
            "SELECT Name FROM building WHERE building_id NOT IN (SELECT building_id FROM Institution WHERE building_id IS NOT NULL)"
        ],
        "rule_sql": []
    },
    "2117": {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "ground_truth": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "amends": [
            "Do join `Ref_Shipping_Agents` with `Documents` on `shipping_agent_code` instead of querying only the `documents` table. Do reference `Ref_Shipping_Agents.shipping_agent_name` and count `Documents.document_id` instead of using `COUNT(*)` with `shipping_agent_name`. Do group by `Ref_Shipping_Agents.shipping_agent_code` instead of `shipping_agent_name`. Do order by `count(Documents.document_id)` in descending order instead of ascending order. The amended query now correctly joins the reference table, counts specific document IDs, groups by the join key, and finds the shipping agent with the highest document count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shipping_agent_name, COUNT(*) as document_count FROM documents GROUP BY shipping_agent_name ORDER BY document_count ASC LIMIT 1;",
            "SELECT rsa.shipping_agent_name, COUNT(d.document_id) AS document_count\nFROM Ref_Shipping_Agents rsa\nJOIN Documents d ON rsa.shipping_agent_code = d.shipping_agent_code\nGROUP BY rsa.shipping_agent_code\nORDER BY document_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5561": {
        "db_id": "products_gen_characteristics",
        "question": "What are the names and data types of the characteristics of the 'cumin' product?",
        "ground_truth": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"",
        "amends": [
            "Do join `products AS t1` and `product_characteristics AS t2` on `t1.product_id = t2.product_id` instead of querying `characteristics` directly. Do join `CHARACTERISTICS AS t3` on `t2.characteristic_id = t3.characteristic_id` instead of missing the relationship tables. Do select `t3.characteristic_name` and `t3.characteristic_data_type` instead of `name` and `type`. Do filter on `t1.product_name = \"cumin\"` instead of `product = 'cumin'` to properly reference the product name field. The amended query now correctly navigates the relational schema through the appropriate join relationships to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, type FROM characteristics WHERE product = 'cumin';",
            "SELECT t3.characteristic_name, t3.characteristic_data_type\nFROM products AS t1\nJOIN product_characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nWHERE t1.product_name = 'cumin'"
        ],
        "rule_sql": []
    },
    "1745": {
        "db_id": "gymnast",
        "question": "Return the names of people, ordered alphabetically.",
        "ground_truth": "SELECT Name FROM People ORDER BY Name ASC",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people ORDER BY name DESC;"
        ],
        "rule_sql": []
    },
    "2428": {
        "db_id": "candidate_poll",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "ground_truth": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "amends": [
            "Do select `t1.name` from the `people` table instead of `name` from the `candidates` table. Do join `candidate AS t2` on `t1.people_id = t2.people_id` instead of querying only the `candidates` table. Do filter on `t1.sex = 'F'` instead of `sex = 'M'` to select female candidates. Do use table alias `t1` for the `people` table and reference columns with the alias throughout the query. The amended query now correctly joins the people and candidate tables to retrieve female candidate names as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM candidates WHERE sex = 'M' ORDER BY name ASC;",
            "SELECT t1.Name FROM people AS t1 JOIN candidate AS t2 ON t1.People_ID = t2.People_ID WHERE t1.Sex = 'F' ORDER BY t1.Name ASC"
        ],
        "rule_sql": []
    },
    "4188": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many roles are there?",
        "ground_truth": "SELECT count(*) FROM ROLES",
        "amends": [
            "Do query the `ROLES` table instead of the `users` table, as the intended data source has changed from user records to role records. The amended query now correctly counts records from the ROLES table instead of users, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users;",
            "SELECT COUNT(*) FROM Roles;"
        ],
        "rule_sql": []
    },
    "2905": {
        "db_id": "icfp_1",
        "question": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.",
        "ground_truth": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE title LIKE '%ML%';"
        ],
        "rule_sql": []
    },
    "1741": {
        "db_id": "gymnast",
        "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
        "ground_truth": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "amends": [
            "Do select `Total_Points` instead of `name, floor_exercise_points`. Do order by `Floor_Exercise_Points` instead of `total_points`. Do query from table `gymnast` instead of `gymnasts`. The amended query now correctly selects the total points column and orders by floor exercise points from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, floor_exercise_points FROM gymnasts ORDER BY total_points DESC;",
            "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC;"
        ],
        "rule_sql": []
    },
    "6877": {
        "db_id": "flight_4",
        "question": "Find the id of routes whose source and destination airports are in the United States.",
        "ground_truth": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "amends": [
            "Do reference `rid` instead of `id` in the SELECT list. Do use `src_apid` instead of `source_airport` and `dst_apid` instead of `destination_airport` in the WHERE clause conditions. Do reference `apid` instead of `id` in both subqueries' SELECT lists while maintaining the same filter logic on `country = 'United States'`. The amended query now correctly matches the intended behavior with proper column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM routes WHERE source_airport IN (SELECT id FROM airports WHERE country = 'United States') AND destination_airport IN (SELECT id FROM airports WHERE country = 'United States');",
            "SELECT rid\nFROM routes\nWHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States')\nAND dst_apid IN (SELECT apid FROM airports WHERE country = 'United States');"
        ],
        "rule_sql": []
    },
    "3977": {
        "db_id": "hospital_1",
        "question": "Compute the mean price of procedures physician John Wen was trained in.",
        "ground_truth": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "amends": [
            "Do use `avg(T3.cost)` instead of `AVG(price)` to reference the correct column name and table alias. Do join `physician AS T1` instead of omitting this table entirely. Do add `trained_in AS T2` with join condition `T1.employeeid = T2.physician` instead of missing this intermediate relationship table. Do join `procedures AS T3` with condition `T3.code = T2.treatment` instead of directly filtering by physician_id. Do filter with `T1.name = \"John Wen\"` instead of using a subquery `WHERE physician_id = (SELECT id FROM physicians WHERE name = 'John Wen')`. Do remove the subquery correlation and instead use explicit table joins to properly connect physicians to their procedures through the trained_in relationship. The amended query now correctly matches the intended logic by joining through the proper relationship tables to find procedures that physicians are trained to perform."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM procedures WHERE physician_id = (SELECT id FROM physicians WHERE name = 'John Wen')",
            "SELECT AVG(T3.Cost) AS MeanPrice\nFROM Physician AS T1\nJOIN Trained_In AS T2 ON T1.EmployeeID = T2.Physician\nJOIN Procedures AS T3 ON T3.Code = T2.Treatment\nWHERE T1.Name = 'John Wen'"
        ],
        "rule_sql": []
    },
    "1340": {
        "db_id": "college_2",
        "question": "How many different courses offered by Physics department?",
        "ground_truth": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "amends": [
            "Do `count(DISTINCT course_id)` instead of `COUNT(*)` to count unique course identifiers rather than all rows. Do reference table `course` instead of `courses` for the correct table name. Do filter on column `dept_name` instead of `department` using the proper column name for department filtering. The amended query now correctly counts distinct physics courses as intended."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM courses WHERE department = 'Physics';",
            "SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics';"
        ],
        "rule_sql": []
    },
    "3208": {
        "db_id": "college_1",
        "question": "How many classes exist for each school?",
        "ground_truth": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "amends": [
            "Do add joins to `course` and `department` tables instead of querying only the `classes` table. Do specify `T3.school_code` in the SELECT list instead of just `school`. Do use explicit table aliases `T1`, `T2`, and `T3` instead of no aliases. Do join `CLASS` to `course` on `T1.crs_code = T2.crs_code` instead of no join conditions. Do join `course` to `department` on `T2.dept_code = T3.dept_code` instead of no secondary join. Do group by `T3.school_code` instead of just `school`. The amended query now correctly counts classes by school code through proper table relationships instead of relying on potentially incorrect direct school references.",
            "Do place `T3.school_code` after the aggregate in the SELECT list instead of before it, and do remove the alias `class_count` instead of keeping it. Do use lowercase `count(*)` instead of uppercase `COUNT(*)`, and do use lowercase table aliases in the FROM clause instead of uppercase. The amended query now correctly matches the behavior of the RIGHT_SQL.",
            "Do place `count(*)` before `T3.school_code` in the SELECT list instead of after it. Do add the `AS` keyword for table aliases in the FROM clause instead of omitting it. Do include spaces around the equals operators in join conditions instead of omitting them. The amended query now correctly matches the RIGHT_SQL's behavior with identical logic and output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school, COUNT(*) FROM classes GROUP BY school;",
            "SELECT T3.SCHOOL_CODE, COUNT(*) AS class_count\nFROM CLASS T1\nJOIN COURSE T2 ON T1.CRS_CODE = T2.CRS_CODE\nJOIN DEPARTMENT T3 ON T2.DEPT_CODE = T3.DEPT_CODE\nGROUP BY T3.SCHOOL_CODE",
            "SELECT T3.school_code, count(*)\nFROM CLASS T1\nJOIN COURSE T2 ON T1.crs_code = T2.crs_code\nJOIN DEPARTMENT T3 ON T2.dept_code = T3.dept_code\nGROUP BY T3.school_code",
            "SELECT count(*) AS class_count, T3.school_code\nFROM CLASS AS T1\nJOIN COURSE AS T2 ON T1.crs_code = T2.crs_code\nJOIN DEPARTMENT AS T3 ON T2.dept_code = T3.dept_code\nGROUP BY T3.school_code"
        ],
        "rule_sql": []
    },
    "1941": {
        "db_id": "cinema",
        "question": "Show each location and the number of cinemas there.",
        "ground_truth": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
        "amends": [
            "Do reference the `cinema` table instead of `cinemas` in the FROM clause. Do group by `LOCATION` instead of `cinema_id` to match the selected column. Do use uppercase `LOCATION` instead of lowercase `location` for consistency with the right SQL. Do maintain the `COUNT(*)` aggregate function without change. The amended query now correctly counts records grouped by location rather than by cinema_id, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location, COUNT(*) FROM cinemas GROUP BY cinema_id;",
            "SELECT Location, COUNT(*) AS Number_of_Cinemas FROM cinema GROUP BY Location;"
        ],
        "rule_sql": []
    },
    "2621": {
        "db_id": "inn_1",
        "question": "What is the average minimum and price of the rooms for each different decor.",
        "ground_truth": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",
        "amends": [
            "Do select `avg(basePrice)` and `min(basePrice)` instead of `AVG(price) as average_price`. Do use the correct column name `basePrice` instead of `price` for the aggregate calculations. Do remove the alias `average_price` instead of keeping it since the right query returns multiple aggregate columns without aliases. The amended query now correctly calculates both average and minimum base prices grouped by decor, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT decor, AVG(price) as average_price FROM rooms GROUP BY decor;",
            "SELECT decor, AVG(basePrice) as avg_base_price, MIN(basePrice) as min_base_price FROM Rooms GROUP BY decor;"
        ],
        "rule_sql": []
    },
    "3310": {
        "db_id": "college_1",
        "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
        "ground_truth": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "amends": [
            "Do select `emp_fname` and `crs_code` instead of `first_name` and `course_code`. Do use `CLASS` and `employee` tables with an `INNER JOIN` on `prof_num=emp_num` instead of only the `teachers` table. Do add table aliases `T1` and `T2` instead of omitting them. The amended query now correctly joins employee data with class information to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, course_code FROM teachers;",
            "SELECT T2.EMP_FNAME, T1.CRS_CODE FROM CLASS T1 INNER JOIN EMPLOYEE T2 ON T1.PROF_NUM = T2.EMP_NUM"
        ],
        "rule_sql": []
    },
    "6799": {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "ground_truth": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "amends": [
            "Do select `lname` from `Faculty` instead of `first_name` from `faculty`. Do add joins to `Faculty_participates_in` and `activity` tables instead of querying a single table. Do use `INTERSECT` to find faculty who participate in both activities instead of `OR` which finds faculty in either activity. Do filter on `activity_name` with proper table references instead of directly on `activity` column. Do fix the join condition from `T2.actid = T2.actid` to proper foreign key relationships (though this appears to be a typo in the provided RIGHT_SQL that should be `T2.actid = T3.actid`). The amended query now correctly identifies faculty who participate in both Canoeing and Kayaking activities instead of those who participate in either activity.",
            "Do select `lname` instead of `Fname` to retrieve the correct column. Do use table aliases `T1`, `T2`, and `T3` instead of `f`, `fpi`, and `a` for consistency. Do fix the join condition from `fpi.actid = a.actid` to `T2.actid = T2.actid` in both query parts, though this appears to be a typographical error that should be corrected to `T2.actid = T3.actid` for proper table joining. The INTERSECT operation remains unchanged to find faculty who participate in both activities. The amended query now correctly retrieves last names of faculty participating in both Canoeing and Kayaking.",
            "Do use lowercase `lname` instead of uppercase `Lname` in the SELECT list. Do fix the JOIN condition from `T2.actid = T3.actid` to `T2.actid = T2.actid` instead of the incorrect table reference. The amended query now correctly identifies faculty members who participate in both Canoeing and Kayaking activities by using proper join conditions and consistent column naming.",
            "Do use `T2.actid = T3.actid` instead of `T2.actid = T2.actid` in both JOIN conditions to properly link the activity tables. The amended query now correctly identifies faculty members who participate in both Canoeing and Kayaking activities by fixing the join predicate that was incorrectly self-referencing instead of connecting to the activity table.",
            "Do use `T2.actid = T3.actid` instead of `T2.actid = T2.actid` in both JOIN conditions, as the original incorrectly self-joins the same table column rather than properly joining between the Faculty_Participates_in and Activity tables. Do maintain the identical SELECT list with `T1.lname`, FROM sources with `Faculty`, `Faculty_Participates_in`, and `Activity` tables, WHERE filters for both 'Canoeing' and 'Kayaking' activities, and INTERSECT operation to find faculty who participate in both activities. The amended query now correctly joins the tables and matches the intended behavior of finding faculty members who participate in both canoeing and kayaking activities."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM faculty WHERE activity = 'Canoeing' OR activity = 'Kayaking';",
            "SELECT f.Fname\nFROM Faculty f\nJOIN Faculty_Participates_in fpi ON f.FacID = fpi.FacID\nJOIN Activity a ON fpi.actid = a.actid\nWHERE a.activity_name = 'Canoeing'\nINTERSECT\nSELECT f.Fname\nFROM Faculty f\nJOIN Faculty_Participates_in fpi ON f.FacID = fpi.FacID\nJOIN Activity a ON fpi.actid = a.actid\nWHERE a.activity_name = 'Kayaking'",
            "SELECT T1.Lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Canoeing'\nINTERSECT\nSELECT T1.Lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Kayaking'",
            "SELECT T1.lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Canoeing'\nINTERSECT\nSELECT T1.lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Kayaking'",
            "SELECT T1.lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Canoeing'\nINTERSECT\nSELECT T1.lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Kayaking'",
            "SELECT T1.lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Canoeing'\nINTERSECT\nSELECT T1.lname\nFROM Faculty T1\nJOIN Faculty_Participates_in T2 ON T1.FacID = T2.FacID\nJOIN Activity T3 ON T2.actid = T3.actid\nWHERE T3.activity_name = 'Kayaking'"
        ],
        "rule_sql": []
    },
    "4541": {
        "db_id": "document_management",
        "question": "What document types have more than 2 corresponding documents?",
        "ground_truth": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
        "amends": [
            "Do reference `document_type_code` in both the SELECT list and GROUP BY clause instead of using `document_type`, ensuring the column name matches the actual schema. The HAVING clause remains unchanged with `COUNT(*) > 2` to filter groups with more than two records. This amendment corrects the column reference to match the intended schema design while preserving the aggregation logic that identifies document types with multiple occurrences.",
            "Do remove the `COUNT(*) as document_count` column from the SELECT list instead of including it, as the RIGHT_SQL only needs the grouping column for the HAVING clause. Do keep the same `GROUP BY document_type_code` and `HAVING count(*) > 2` logic unchanged. The amended query now matches RIGHT_SQL's behavior by returning only the document_type_code values that appear more than twice, without the unnecessary count column in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT document_type FROM documents GROUP BY document_type HAVING COUNT(*) > 2",
            "SELECT document_type_code, COUNT(*) as document_count FROM Documents GROUP BY document_type_code HAVING COUNT(*) > 2",
            "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(*) > 2"
        ],
        "rule_sql": []
    },
    "3670": {
        "db_id": "baseball_1",
        "question": "Find the name and id of the team that won the most times in 2008 postseason.",
        "ground_truth": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
        "amends": [
            "Do select `T2.name` and `T1.team_id_winner` instead of `team_name`, `team_id`, and `COUNT(*) as wins`. Do join `postseason AS T1` with `team AS T2` on `T1.team_id_winner = T2.team_id_br` instead of querying only `games` table. Do filter on `T1.year = 2008` instead of `year = 2008 AND postseason = 1`. Do group by `T1.team_id_winner` instead of `team_name, team_id`. Do order by `count(*) DESC` instead of `wins DESC`. The amended query now correctly identifies the winning team from postseason games in 2008 by joining with team information and counting wins through proper aggregation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, team_id, COUNT(*) as wins \nFROM games \nWHERE year = 2008 AND postseason = 1 \nGROUP BY team_name, team_id \nORDER BY wins DESC \nLIMIT 1;",
            "SELECT T2.name, T1.team_id_winner\nFROM postseason AS T1\nJOIN team AS T2 ON T1.team_id_winner = T2.team_id_br\nWHERE T1.year = 2008\nGROUP BY T1.team_id_winner\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4185": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Give me the name and description of the location with code x.",
        "ground_truth": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
        "amends": [
            "Do select `location_name` and `location_description` instead of `name` and `description`. Do reference table `Ref_locations` instead of `locations`. Do filter on `location_code = \"x\"` instead of `code = 'x'` with proper quote usage. The amended query now correctly retrieves location-specific data from the appropriate reference table with accurate column and table names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, description FROM locations WHERE code = 'x';",
            "SELECT location_name, location_description FROM Ref_Locations WHERE location_code = 'x';"
        ],
        "rule_sql": []
    },
    "1103": {
        "db_id": "match_season",
        "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
        "ground_truth": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "amends": [
            "Do reference table `match_season` instead of `players` in the FROM clause. Do use column `College` instead of `college` in the SELECT list, GROUP BY clause, and ORDER BY clause. Do change the sort direction to `DESC` instead of `ASC` in the ORDER BY clause while maintaining the same HAVING condition of `count(*) >= 2`. The amended query now correctly identifies colleges with multiple entries from the match_season table instead of the players table, using proper column naming and descending sort order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT college FROM players GROUP BY college HAVING COUNT(*) >= 2 ORDER BY college ASC;",
            "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC;"
        ],
        "rule_sql": []
    },
    "233": {
        "db_id": "book_2",
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "ground_truth": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
        "amends": [
            "Do reference table `publication` instead of `publications` and use column `Price` instead of `price`. Do use `OR` condition with `Publisher = \"Person\" OR Publisher = \"Wiley\"` instead of incorrect `AND` condition with `publisher = 'Person' AND publisher = 'Wiley'`. Do use double quotes for string literals `\"Person\"` and `\"Wiley\"` instead of single quotes. The amended query now correctly retrieves prices from publications where the publisher is either Person or Wiley, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM publications WHERE publisher = 'Person' AND publisher = 'Wiley'",
            "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\""
        ],
        "rule_sql": []
    },
    "1861": {
        "db_id": "wrestler",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "ground_truth": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "amends": [
            "Do select `T1.Time` from the `elimination` table instead of `elimination_time` from the `wrestlers` table. Do join `wrestler AS T2` on `T1.Wrestler_ID = T2.Wrestler_ID` instead of querying only the `wrestlers` table. Do order by `T2.Days_held DESC` instead of `days_held DESC` to properly reference the joined table's column. The amended query now correctly retrieves elimination time by joining the elimination and wrestler tables and ordering by days held, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT elimination_time FROM wrestlers ORDER BY days_held DESC LIMIT 1;",
            "SELECT T1.Time \nFROM Elimination AS T1\nJOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID\nORDER BY T2.Days_held DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6869": {
        "db_id": "flight_4",
        "question": "Find the number of routes with destination airports in Italy.",
        "ground_truth": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "amends": [
            "Do add `JOIN airports AS T2` instead of querying only the `routes` table. Do use the join condition `ON T1.dst_apid = T2.apid` instead of missing the table relationship entirely. Do filter on `T2.country = 'Italy'` instead of incorrectly filtering on `destination_country` which doesn't exist in the schema. The amended query now correctly counts routes by joining to airports and filtering on the country field from the airports table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM routes WHERE destination_country = 'Italy';",
            "SELECT COUNT(*) \nFROM routes AS T1\nJOIN airports AS T2 ON T1.dst_apid = T2.apid\nWHERE T2.country = 'Italy'"
        ],
        "rule_sql": []
    },
    "3042": {
        "db_id": "loan_1",
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "ground_truth": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "amends": [
            "Do use `cust_name` instead of `name` for the customer name column. Do reference `customer` and `loan` tables instead of `customers` and `loans`. Do use `cust_id` for the join condition instead of `customer_id`. Do change the loan type filter to `'Mortgages'` instead of `'Mortgage'` in the first part. Do restructure the query using `INTERSECT` between two separate joins instead of joining the same table twice with different aliases. Do remove the redundant second join condition and instead use separate queries for each loan type with intersection logic. Do ensure the query finds customers who have both mortgage and auto loans through set intersection rather than multiple joins on the same table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM customers c\nJOIN loans l1 ON c.customer_id = l1.customer_id\nJOIN loans l2 ON c.customer_id = l2.customer_id\nWHERE l1.loan_type = 'Mortgage' AND l2.loan_type = 'Auto';",
            "SELECT cust_name FROM customer WHERE cust_ID IN (SELECT cust_ID FROM loan WHERE loan_type = 'Mortgages') INTERSECT SELECT cust_name FROM customer WHERE cust_ID IN (SELECT cust_ID FROM loan WHERE loan_type = 'Auto')"
        ],
        "rule_sql": []
    },
    "3410": {
        "db_id": "hr_1",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "ground_truth": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, department_id FROM employees WHERE last_name = 'McEwen';"
        ],
        "rule_sql": []
    },
    "1175": {
        "db_id": "election_representative",
        "question": "List the votes of elections in descending order.",
        "ground_truth": "SELECT Votes FROM election ORDER BY Votes DESC",
        "amends": [
            "Do select only `Votes` column instead of selecting all columns with `*`. Do reference table as `election` instead of `elections`. Do order by `Votes DESC` instead of `votes ASC`, changing both the column name case and sort direction. The amended query now correctly selects only the Votes column from the election table in descending order, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM elections ORDER BY votes ASC;",
            "SELECT Votes FROM election ORDER BY Votes DESC;"
        ],
        "rule_sql": []
    },
    "2103": {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "ground_truth": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
        "amends": [
            "Do reference `shipping_agent_code` instead of `agent_code` and use table `Ref_Shipping_Agents` instead of `shipping_agents`. Do filter on `shipping_agent_name = \"UPS\"` instead of `agent_name = 'FedEx'` with proper double quotes for the string literal. The amended query now correctly retrieves the shipping agent code for UPS from the appropriate reference table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT agent_code FROM shipping_agents WHERE agent_name = 'FedEx';",
            "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";"
        ],
        "rule_sql": []
    },
    "4742": {
        "db_id": "department_store",
        "question": "Return the ids of the two department store chains with the most department stores.",
        "ground_truth": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "amends": [
            "Do select `dept_store_chain_id` instead of `chain_id` in the SELECT list. Do remove the alias `store_count` instead of keeping it. Do group by `dept_store_chain_id` instead of `chain_id`. Do order by `count(*)` directly instead of using the alias `store_count`. The amended query now correctly references the proper column name throughout and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT chain_id, COUNT(*) as store_count FROM department_stores GROUP BY chain_id ORDER BY store_count DESC LIMIT 2;",
            "SELECT dept_store_chain_id\nFROM Department_Stores\nGROUP BY dept_store_chain_id\nORDER BY COUNT(*) DESC\nLIMIT 2"
        ],
        "rule_sql": []
    },
    "4910": {
        "db_id": "store_product",
        "question": "Which district has the least area?",
        "ground_truth": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "amends": [
            "Do select `district_name` instead of `district` and `MAX(area)`. Do use table `district` instead of `districts`. Do order by `city_area` instead of `area`. Do remove the aggregate function `MAX` instead of keeping it. The amended query now correctly retrieves the district name with the smallest city area from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district, MAX(area) FROM districts ORDER BY area ASC LIMIT 1;",
            "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4305": {
        "db_id": "club_1",
        "question": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.",
        "ground_truth": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
        "amends": [
            "Do use `DISTINCT t1.clubname` instead of `club_name` without distinct. Do join `club AS t1` with `member_of_club AS t2` on `t1.clubid = t2.clubid` instead of querying `clubs` table directly. Do add another join to `student AS t3` on `t2.stuid = t3.stuid` instead of missing this relationship. Do move the filter to `t3.city_code = \"BAL\"` instead of applying it directly to the club table, which correctly identifies clubs through their student members rather than assuming clubs have city codes. The amended query now matches RIGHT_SQL's behavior by properly filtering clubs based on their student members' city codes."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT club_name FROM clubs WHERE city_code = 'BAL';",
            "SELECT DISTINCT t1.ClubName FROM Club AS t1 JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID JOIN Student AS t3 ON t2.StuID = t3.StuID WHERE t3.city_code = 'BAL'"
        ],
        "rule_sql": []
    },
    "458": {
        "db_id": "allergy_1",
        "question": "Which allergy type is the least common?",
        "ground_truth": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do reference the table as `Allergy_type` instead of `allergies` and the column as `allergytype` instead of `allergy_type`. Do order by `count(*) ASC` instead of `count DESC` to sort in ascending order by the count of records. Do select only `allergytype` instead of both `allergy_type` and `COUNT(*) as count` since the count is only used for ordering. The amended query now correctly returns the allergy type with the smallest count in ascending order, matching the RIGHT_SQL's behavior.",
            "Do remove the `JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy` clause instead of including an unnecessary join to the Has_Allergy table. Do use `allergytype` in lowercase instead of `AllergyType` for consistency. Do maintain the `GROUP BY allergytype` aggregation instead of grouping by the wrong case. Do keep the `ORDER BY count(*) ASC LIMIT 1` to find the least common allergy type instead of altering the ordering logic. The amended query now correctly counts allergy types directly from the Allergy_type table without the extraneous join, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT allergy_type, COUNT(*) as count FROM allergies GROUP BY allergy_type ORDER BY count DESC LIMIT 1;",
            "SELECT AllergyType FROM Allergy_Type JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy GROUP BY AllergyType ORDER BY COUNT(*) ASC LIMIT 1;",
            "SELECT allergytype FROM Allergy_Type GROUP BY allergytype ORDER BY COUNT(*) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4942": {
        "db_id": "store_product",
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "ground_truth": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
        "amends": [
            "Do use table aliases `t1`, `t2`, and `t3` for `store`, `store_district`, and `district` respectively instead of `d` and `s` for `districts` and `stores`. Do join through a junction table `store_district` with `t1.store_id = t2.store_id` and `t2.district_id = t3.district_id` instead of directly joining `districts` to `stores` on `d.id = s.district_id`. Do use `INTERSECT` to find districts that have both store types instead of `OR` in the `WHERE` clause. Do reference columns as `t3.District_name`, `t1.Type`, and specific values \"City Mall\" and \"Village Store\" instead of `d.name`, `s.type`, and values 'city mall' and 'village store'. Do remove `DISTINCT` since `INTERSECT` inherently returns unique results instead of keeping it. The amended query now correctly identifies districts that contain both City Mall and Village Store types using proper table relationships and set operations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT d.name \nFROM districts d \nJOIN stores s ON d.id = s.district_id \nWHERE s.type = 'city mall' OR s.type = 'village store'",
            "SELECT t3.District_name\nFROM store t1\nJOIN store_district t2 ON t1.Store_ID = t2.Store_ID\nJOIN district t3 ON t2.District_ID = t3.District_ID\nWHERE t1.Type = 'City Mall'\nINTERSECT\nSELECT t3.District_name\nFROM store t1\nJOIN store_district t2 ON t1.Store_ID = t2.Store_ID\nJOIN district t3 ON t2.District_ID = t3.District_ID\nWHERE t1.Type = 'Village Store'"
        ],
        "rule_sql": []
    },
    "5145": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "ground_truth": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "amends": [
            "Do select `T1.Actual_Delivery_Date` instead of `delivery_date`. Do add `FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2` instead of `FROM orders`. Do use `ON T1.Order_ID = T2.Order_ID` instead of no join condition. Do change filter to `T2.Order_Quantity = 1` instead of `quantity = 1`. The amended query now correctly joins the Customer_Orders and ORDER_ITEMS tables to filter by order quantity and retrieve the actual delivery date."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT delivery_date FROM orders WHERE quantity = 1;",
            "SELECT T1.Actual_Delivery_Date\nFROM Customer_Orders AS T1\nJOIN Order_Items AS T2 ON T1.Order_ID = T2.Order_ID\nWHERE T2.Order_Quantity = '1'"
        ],
        "rule_sql": []
    },
    "3861": {
        "db_id": "insurance_policies",
        "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
        "ground_truth": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",
        "amends": [
            "Do use column names `Date_Claim_Made` and `Date_Claim_Settled` instead of `claim_date` and `settlement_date`. Do use table name `Claims` instead of `claims`. Do use column name `Amount_Claimed` instead of `claimed_amount` in both the main query and subquery. Do use `avg(Amount_Claimed)` instead of `AVG(claimed_amount)` in the subquery. The amended query now correctly references the actual schema elements while maintaining the same logical behavior of selecting claims where the claimed amount exceeds the average."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT claim_date, settlement_date FROM claims WHERE claimed_amount > (SELECT AVG(claimed_amount) FROM claims)",
            "SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT avg(Amount_Claimed) FROM Claims)"
        ],
        "rule_sql": []
    },
    "1867": {
        "db_id": "wrestler",
        "question": "Which teams had more than 3 eliminations?",
        "ground_truth": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
        "amends": [
            "Do select `Team` instead of `team_name` and use `HAVING COUNT(*) > 3` instead of `WHERE eliminations > 3`. Do query from `elimination` table instead of `teams` table and add `GROUP BY Team` instead of omitting it. The amended query now correctly counts eliminations per team and filters for teams with more than 3 eliminations, matching the right SQL's behavior.",
            "Do remove the `COUNT(*) as eliminations` column from the SELECT list instead of including it, as the RIGHT_SQL only needs to return the Team column for groups meeting the elimination count condition. Do keep the `GROUP BY Team` and `HAVING COUNT(*) > 3` clauses unchanged since they correctly identify teams with more than 3 eliminations. The amended query now matches RIGHT_SQL's behavior by returning only team names that meet the elimination threshold without unnecessary aggregation results in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE eliminations > 3;",
            "SELECT Team, COUNT(*) as eliminations FROM Elimination GROUP BY Team HAVING COUNT(*) > 3",
            "SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(*) > 3"
        ],
        "rule_sql": []
    },
    "4097": {
        "db_id": "company_employee",
        "question": "List the names of companies by ascending number of sales.",
        "ground_truth": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
        "amends": [
            "Do select `Name` instead of `company_name` and `COUNT(*) as sales_count`. Do use `FROM company` instead of `FROM sales`. Do remove `GROUP BY company_name` and the aggregation. Do change ordering to `ORDER BY Sales_in_Billion ASC` instead of `ORDER BY sales_count DESC`. Do remove the alias and count functionality entirely. The amended query now correctly selects company names ordered by sales figures rather than counting sales records."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, COUNT(*) as sales_count FROM sales GROUP BY company_name ORDER BY sales_count DESC;",
            "SELECT Name FROM company ORDER BY Sales_in_Billion ASC;"
        ],
        "rule_sql": []
    },
    "1482": {
        "db_id": "college_2",
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "ground_truth": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor) ORDER BY salary;"
        ],
        "rule_sql": []
    },
    "423": {
        "db_id": "flight_1",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "ground_truth": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "amends": [
            "Do reference `T3.name` instead of `a.name` for the aircraft name. Do join `Employee AS T1` instead of `pilots p` as the employee table. Do join `Certificate AS T2` instead of `certificates c` as the certificate table. Do join `Aircraft AS T3` instead of `aircrafts a` as the aircraft table. Do use `T1.eid = T2.eid` instead of `c.pilot_id = p.id` for the employee-certificate join condition. Do use `T3.aid = T2.aid` instead of `a.id = c.aircraft_id` for the aircraft-certificate join condition. Do filter on `T1.name = \"John Williams\"` instead of separate `p.first_name = 'John' AND p.last_name = 'Williams'` conditions for the employee name. The amended query now correctly joins the proper tables with appropriate join conditions and filters for the employee named John Williams."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.name FROM aircrafts a JOIN certificates c ON a.id = c.aircraft_id JOIN pilots p ON c.pilot_id = p.id WHERE p.first_name = 'John' AND p.last_name = 'Williams'",
            "SELECT T3.name \nFROM Employee AS T1\nJOIN Certificate AS T2 ON T1.eid = T2.eid\nJOIN Aircraft AS T3 ON T3.aid = T2.aid\nWHERE T1.name = 'John Williams'"
        ],
        "rule_sql": []
    },
    "6670": {
        "db_id": "driving_school",
        "question": "How many customers in total?",
        "ground_truth": "SELECT count(*) FROM Customers;",
        "amends": [
            "Do select from `Customers` instead of `orders` to count the correct table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistent function naming. The amended query now correctly counts records from the Customers table instead of orders, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders;",
            "SELECT count(*) FROM Customers;"
        ],
        "rule_sql": []
    },
    "4623": {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show each premise type and the number of premises in that type.",
        "ground_truth": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",
        "amends": [
            "Do use the correct column name `premises_type` in the SELECT list and GROUP BY clause instead of the incorrect `premise_type`, ensuring accurate aggregation by the proper premises type categorization. The amended query now correctly counts records grouped by the actual `premises_type` column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT premise_type, COUNT(*) FROM premises GROUP BY premise_type;",
            "SELECT premises_type, COUNT(*) AS number_of_premises FROM Premises GROUP BY premises_type;"
        ],
        "rule_sql": []
    },
    "6691": {
        "db_id": "driving_school",
        "question": "What is the total amount of moeny paid by the customer Carole Bernhard?",
        "ground_truth": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "amends": [
            "Do reference the `amount_payment` column from the `Customer_Payments` table instead of the generic `amount` column. Do join the `Customers` table on `customer_id` instead of querying only the `payments` table. Do filter by both `first_name` and `last_name` columns from the `Customers` table instead of using a single `customer_name` field. Do use table aliases `T1` and `T2` for clarity instead of no table qualification. The amended query now correctly aggregates payment amounts by joining related customer data and filtering with proper name fields."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payments WHERE customer_name = 'Carole Bernhard'",
            "SELECT SUM(T2.amount_payment) AS total_amount_paid\nFROM Customers T1\nJOIN Customer_Payments T2 ON T1.customer_id = T2.customer_id\nWHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'"
        ],
        "rule_sql": []
    },
    "6396": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "ground_truth": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "amends": [
            "Do use `STATEMENT_ID` in both the SELECT list and GROUP BY clause instead of mixing `statement_id` in SELECT with `account_id` in GROUP BY. Do reference the correct table name `Accounts` instead of `accounts` to match the schema. Do maintain consistent column naming by using `STATEMENT_ID` throughout instead of having mismatched identifiers that would cause grouping errors. The amended query now correctly groups and counts records by statement_id rather than attempting to group by a different column than what's selected."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT statement_id, COUNT(*) FROM accounts GROUP BY account_id;",
            "SELECT STATEMENT_ID, COUNT(Account_ID) AS Number_of_Accounts FROM Accounts GROUP BY STATEMENT_ID;"
        ],
        "rule_sql": []
    },
    "2513": {
        "db_id": "movie_1",
        "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?",
        "ground_truth": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
        "amends": [
            "Do select `T2.name` from the `Reviewer` table instead of `reviewer_name` from the `reviewers` table. Do join `Rating AS T1` with `Reviewer AS T2` on `T1.rID = T2.rID` instead of querying only the `reviewers` table. Do filter on `T1.stars > 3` from the joined `Rating` table instead of `rating > 3` from the original table. The amended query now correctly retrieves reviewer names based on ratings from the related Rating table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reviewer_name FROM reviewers WHERE rating > 3;",
            "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3"
        ],
        "rule_sql": []
    },
    "4880": {
        "db_id": "school_player",
        "question": "Show the locations of schools that have more than 1 player.",
        "ground_truth": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "amends": [
            "Do select `T2.Location` from the `school` table instead of `location` from `schools`. Do use `JOIN` between `player` and `school` tables on `T1.School_ID = T2.School_ID` instead of querying only the `schools` table. Do add `GROUP BY T1.School_ID` to group by school identifier instead of no grouping. Do move the count filter to `HAVING COUNT(*) > 1` instead of using `WHERE player_count > 1`. The amended query now correctly identifies schools with multiple players by joining the player and school tables and counting players per school, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM schools WHERE player_count > 1;",
            "SELECT T2.Location \nFROM player T1\nJOIN school T2 ON T1.School_ID = T2.School_ID\nGROUP BY T1.School_ID\nHAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "5683": {
        "db_id": "dorm_1",
        "question": "What is the total student capacity of all dorms?",
        "ground_truth": "SELECT sum(student_capacity) FROM dorm",
        "amends": [
            "Do reference the `student_capacity` column instead of `capacity` and use the correct table name `dorm` instead of `dorms`. The amended query now correctly calculates the total student capacity from the appropriate table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(capacity) FROM dorms;",
            "SELECT SUM(student_capacity) AS total_capacity FROM Dorm;"
        ],
        "rule_sql": []
    },
    "5473": {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have class president votes?",
        "ground_truth": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "amends": [
            "Do select `T1.LName` instead of `first_name` and change the table reference from `students` to `STUDENT AS T1`. Do add a `JOIN` with `VOTING_RECORD AS T2` instead of querying a single table. Do use the join condition `T1.StuID = T2.CLASS_President_VOTE` instead of the filter `votes > 0`. Do remove the `WHERE` clause entirely instead of keeping the `votes > 0` condition. The amended query now correctly retrieves distinct last names of students who received votes for class president by joining the appropriate tables with the correct relationship, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT first_name FROM students WHERE votes > 0;",
            "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Class_President_Vote"
        ],
        "rule_sql": []
    },
    "5300": {
        "db_id": "manufactory_1",
        "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "ground_truth": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "amends": [
            "Do reference the `manufacturers` table instead of `companies` in both the main query and subquery. Do use the correct table name `manufacturers` in the FROM clause instead of the incorrect `companies` table. Do maintain the same aggregate function `avg(revenue)` in the subquery but apply it to the correct `manufacturers` table instead of the wrong `companies` table. The amended query now correctly filters manufacturers based on revenue exceeding the average revenue of all manufacturers, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM companies WHERE revenue > (SELECT AVG(revenue) FROM companies)",
            "SELECT Name FROM Manufacturers WHERE Revenue > (SELECT AVG(Revenue) FROM Manufacturers)"
        ],
        "rule_sql": []
    },
    "1593": {
        "db_id": "customers_and_invoices",
        "question": "Show the account id and name with at least 4 transactions.",
        "ground_truth": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "amends": [
            "Do select `T1.account_id` and `T2.account_name` instead of `account_id` and `name`. Do use `FROM Financial_transactions AS T1 JOIN Accounts AS T2` instead of `FROM accounts`. Do add `ON T1.account_id = T2.account_id` join condition instead of omitting it. Do add `GROUP BY T1.account_id` instead of omitting grouping. Do move the count filter to `HAVING count(*) >= 4` instead of using `WHERE transaction_count >= 4`. The amended query now correctly counts transactions per account and filters on the aggregate count rather than a presumed column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT account_id, name FROM accounts WHERE transaction_count >= 4;",
            "SELECT T1.account_id, T2.account_name\nFROM Financial_Transactions AS T1\nJOIN Accounts AS T2 ON T1.account_id = T2.account_id\nGROUP BY T1.account_id\nHAVING COUNT(*) >= 4"
        ],
        "rule_sql": []
    },
    "5128": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the description, code and the corresponding count of each service type?",
        "ground_truth": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
        "amends": [
            "Do specify explicit table aliases `T1.Service_Type_Description` and `T2.Service_Type_Code` instead of generic column names `description` and `code`. Do change the FROM clause to use a `JOIN` between `Ref_Service_Types AS T1` and `Services AS T2` instead of a single table `service_types`. Do add the join condition `ON T1.Service_Type_Code = T2.Service_Type_Code` instead of omitting it. Do modify the GROUP BY clause to use only `T2.Service_Type_Code` instead of grouping by both `description` and `code`. Do remove the alias `count` from the aggregate function instead of keeping it. The amended query now correctly joins the reference and services tables to count services by type code while maintaining the proper relationship between service type descriptions and codes."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description, code, COUNT(*) as count FROM service_types GROUP BY description, code",
            "SELECT \n    T1.Service_Type_Description AS description, \n    T2.Service_Type_Code AS code, \n    COUNT(*) \nFROM \n    Ref_Service_Types AS T1 \nJOIN \n    Services AS T2 \nON \n    T1.Service_Type_Code = T2.Service_Type_Code \nGROUP BY \n    T2.Service_Type_Code"
        ],
        "rule_sql": []
    },
    "3331": {
        "db_id": "college_1",
        "question": "Find the first names of students who took exactly one class.",
        "ground_truth": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "amends": [
            "Do use `T1.stu_fname` instead of `first_name` and add table alias qualification. Do add `FROM student AS T1 JOIN enroll AS T2` instead of omitting the join to the enroll table. Do use `ON T1.stu_num = T2.stu_num` instead of the incorrect `WHERE COUNT(class_id) = 1` predicate. Do add `GROUP BY T2.stu_num` instead of omitting grouping. Do move the count condition to `HAVING count(*) = 1` instead of placing it in the `WHERE` clause where aggregate functions cannot be used. Do remove the incorrect `class_id` reference and use `count(*)` instead. The amended query now correctly identifies students enrolled in exactly one class by joining the student and enroll tables and using proper aggregate filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE COUNT(class_id) = 1;",
            "SELECT T1.stu_fname \nFROM student AS T1 \nJOIN enroll AS T2 ON T1.stu_num = T2.stu_num \nGROUP BY T2.stu_num \nHAVING count(*) = 1"
        ],
        "rule_sql": []
    },
    "6244": {
        "db_id": "ship_1",
        "question": "how many ships are there?",
        "ground_truth": "SELECT count(*) FROM ship",
        "amends": [
            "Do query the `ship` table instead of the `airplanes` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)`. The amended query now correctly counts records from the ship table rather than the airplanes table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM airplanes;",
            "SELECT count(*) FROM ship"
        ],
        "rule_sql": []
    },
    "4252": {
        "db_id": "club_1",
        "question": "What are the names of all clubs?",
        "ground_truth": "SELECT clubname FROM club",
        "amends": [
            "Do select only `clubname` instead of all columns with `*`. Do reference the correct table name `club` instead of the incorrect `clubs`. The amended query now correctly retrieves only the clubname column from the club table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM clubs;",
            "SELECT ClubName FROM Club;"
        ],
        "rule_sql": []
    },
    "3228": {
        "db_id": "college_1",
        "question": "How many unique classes are offered?",
        "ground_truth": "SELECT count(DISTINCT class_code) FROM CLASS",
        "amends": [
            "Do use `count(DISTINCT class_code)` instead of `COUNT(*)` to count distinct class codes rather than all rows. Do reference table `CLASS` instead of `classes` with the correct table name. The amended query now correctly counts distinct class codes from the CLASS table instead of counting all rows from the classes table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM classes;",
            "SELECT COUNT(DISTINCT CLASS_CODE) FROM CLASS;"
        ],
        "rule_sql": []
    },
    "972": {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many different FDA approval statuses exist for medicines?",
        "ground_truth": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "amends": [
            "Do use `count(DISTINCT FDA_approved)` instead of `COUNT(*)` to count distinct FDA approval values rather than all rows. Do reference the `medicine` table instead of `medicines` to use the correct table name. Do remove the `WHERE approval_status = 'FDA approved'` filter instead of keeping it, as the distinct count approach eliminates the need for explicit filtering. The amended query now correctly counts distinct FDA approval status values across all records in the medicine table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM medicines WHERE approval_status = 'FDA approved';",
            "SELECT COUNT(DISTINCT FDA_approved) FROM medicine;"
        ],
        "rule_sql": []
    },
    "2466": {
        "db_id": "movie_1",
        "question": "What is the maximum stars and year for the most recent movie?",
        "ground_truth": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of no table references. Do join `Rating AS T1` with `Movie AS T2` on `T1.mID = T2.mID` instead of querying only the `movies` table. Do add a WHERE clause filtering for `T2.year = (SELECT max(YEAR) FROM Movie)` instead of ordering by year and limiting to one row. Do remove the ORDER BY and LIMIT clauses instead of keeping them, as the subquery handles the maximum year logic. Do include `T2.year` in the SELECT list instead of only showing aggregate functions. The amended query now correctly finds the maximum stars for movies from the most recent year by properly joining the Rating and Movie tables and using a subquery to identify the maximum year."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(stars), MIN(year) FROM movies ORDER BY year DESC LIMIT 1;",
            "SELECT MAX(T1.stars) AS max_stars, T2.year\nFROM Rating AS T1\nJOIN Movie AS T2 ON T1.mID = T2.mID\nWHERE T2.year = (SELECT MAX(year) FROM Movie)"
        ],
        "rule_sql": []
    },
    "3183": {
        "db_id": "college_1",
        "question": "What is the code of the school where the accounting department belongs to?",
        "ground_truth": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
        "amends": [
            "Do reference table `department` instead of `departments`. Do use column `dept_name` instead of `department_name`. Do use string literal `\"Accounting\"` instead of `'accounting'` to match case sensitivity requirements. The amended query now correctly retrieves school codes from the department table for the Accounting department."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_code FROM departments WHERE department_name = 'accounting';",
            "SELECT SCHOOL_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting';"
        ],
        "rule_sql": []
    },
    "1221": {
        "db_id": "apartment_rentals",
        "question": "What are the apartment number, start date, and end date of each apartment booking?",
        "ground_truth": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "amends": [
            "Do specify explicit table aliases `T2.apt_number`, `T1.booking_start_date` instead of generic column names `apartment_number`, `start_date`, `end_date`. Do join `Apartments AS T2` on `T1.apt_id = T2.apt_id` instead of querying only the `bookings` table. Do use the correct column `booking_start_date` for both date fields instead of separate `start_date` and `end_date` columns. Do remove the `WHERE apartment_number IS NOT NULL` filter instead of keeping it, as the join condition now properly handles the relationship. The amended query now correctly joins the booking and apartment tables to retrieve apartment numbers with their corresponding booking dates.",
            "Do select `T1.booking_start_date` twice instead of selecting `T1.booking_end_date` in the second position. The amended query now matches RIGHT_SQL's behavior by correctly retrieving the apartment number and booking start dates while excluding the end date."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT apartment_number, start_date, end_date FROM bookings WHERE apartment_number IS NOT NULL",
            "SELECT T2.apt_number, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1\nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id",
            "SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date \nFROM Apartment_Bookings AS T1\nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id"
        ],
        "rule_sql": []
    },
    "5695": {
        "db_id": "dorm_1",
        "question": "How many different genders are there in the dorms?",
        "ground_truth": "SELECT count(DISTINCT gender) FROM dorm",
        "amends": [
            "Do `count(DISTINCT gender)` instead of `COUNT(*)` to count distinct gender values rather than all rows. Do reference table `dorm` instead of `dorms` with the correct table name. Do remove the `WHERE gender = 'male'` filter instead of keeping it to include all gender values rather than filtering for only males. The amended query now correctly counts distinct gender values from the dorm table without unnecessary filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM dorms WHERE gender = 'male';",
            "SELECT COUNT(DISTINCT gender) FROM Dorm;"
        ],
        "rule_sql": []
    },
    "1023": {
        "db_id": "phone_1",
        "question": "the names of models that launched between 2002 and 2004.",
        "ground_truth": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
        "amends": [
            "Do reference `Model_name` instead of `name` and use table `chip_model` instead of `models`. Do use `BETWEEN 2002 AND 2004` instead of `launch_year = 2002 OR launch_year = 2004` and reference `Launch_year` instead of `launch_year`. The amended query now correctly selects from the appropriate table with inclusive year range filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM models WHERE launch_year = 2002 OR launch_year = 2004;",
            "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004"
        ],
        "rule_sql": []
    },
    "5967": {
        "db_id": "cre_Theme_park",
        "question": "How many tourists did not make any visit?",
        "ground_truth": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "amends": [
            "Do reference the `Visitors` table instead of `tourists` and use `count(*)` instead of `COUNT(*)`. Do filter with `Tourist_ID NOT IN` subquery instead of checking `visit_id IS NULL`. Do add a correlated subquery `SELECT Tourist_ID FROM Visits` instead of omitting it. Do remove the incorrect null check condition and replace it with proper exclusion logic based on the Visits table relationship. The amended query now correctly identifies visitors who have no associated visits by using a NOT IN subquery instead of relying on a potentially incorrect null check."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tourists WHERE visit_id IS NULL;",
            "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits)"
        ],
        "rule_sql": []
    },
    "6682": {
        "db_id": "driving_school",
        "question": "List first name and last name of customers lived in city Lockmanfurt.",
        "ground_truth": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
        "amends": [
            "Do add table `Customers AS T1` and `Addresses AS T2` with a `JOIN` on `T1.customer_address_id = T2.address_id` instead of querying only the `customers` table. Do reference columns as `T1.first_name` and `T1.last_name` instead of just `first_name` and `last_name`. Do move the city filter to `T2.city` in the `WHERE` clause instead of applying it directly to the customers table. Do use double quotes around 'Lockmanfurt' instead of single quotes. The amended query now correctly joins customer and address data to filter by city from the appropriate table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE city = 'Lockmanfurt';",
            "SELECT T1.first_name, T1.last_name\nFROM Customers AS T1\nJOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id\nWHERE T2.city = \"Lockmanfurt\""
        ],
        "rule_sql": []
    },
    "6552": {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "ground_truth": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "amends": [
            "Do select `T2.Name` from the `WINE` table instead of `name` from `wines`. Do join `APPELLATIONS AS T1` with `WINE AS T2` on `T1.Appelation = T2.Appelation` instead of querying a single table. Do filter on `T1.County = \"Monterey\"` and `T2.price < 50` instead of `county = 'Monterey' AND price < 50`. The amended query now correctly joins the appellations and wine tables to filter wines by county and price, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM wines WHERE price < 50 AND county = 'Monterey';",
            "SELECT T2.Name FROM wine AS T2 JOIN appellations AS T1 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Monterey' AND T2.Price < 50"
        ],
        "rule_sql": []
    },
    "2900": {
        "db_id": "icfp_1",
        "question": "Retrieve the country that has published the most papers.",
        "ground_truth": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do join `inst AS t1` and `authorship AS t2` on `t1.instid = t2.instid` instead of querying `papers` directly without proper joins. Do join `papers AS t3` on `t2.paperid = t3.paperid` instead of omitting the authorship relationship. Do select `t1.country` instead of `country` to specify the table source. Do use `COUNT(*)` in the `ORDER BY` clause instead of referencing the alias `paper_count`. Do order by `DESC` instead of `ASC` to find the maximum count instead of the minimum. Do remove the explicit column alias `paper_count` in the SELECT list instead of keeping it since it's not referenced. The amended query now correctly identifies the country with the highest paper count by properly joining through the authorship relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as paper_count FROM papers GROUP BY country ORDER BY paper_count ASC LIMIT 1;",
            "SELECT t1.country\nFROM Inst AS t1\nJOIN Authorship AS t2 ON t1.instID = t2.instID\nJOIN Papers AS t3 ON t2.paperID = t3.paperID\nGROUP BY t1.country\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5068": {
        "db_id": "device",
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "ground_truth": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",
        "amends": [
            "Do select `T3.Shop_Name` and `T2.Carrier` instead of `shop_name` and `device_name`. Do use `stock AS T1` joined with `device AS T2` on `T1.Device_ID = T2.Device_ID` instead of directly joining `shops` with `devices`. Do add a second join with `shop AS T3` on `T1.Shop_ID = T3.Shop_ID` instead of the single join approach. The amended query now correctly retrieves shop names and carrier information through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shop_name, device_name FROM shops JOIN devices ON shops.shop_id = devices.shop_id",
            "SELECT T3.Shop_Name, T2.Carrier\nFROM stock AS T1\nJOIN device AS T2 ON T1.Device_ID = T2.Device_ID\nJOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID;"
        ],
        "rule_sql": []
    },
    "4921": {
        "db_id": "store_product",
        "question": "What city is the headquarter of the store Blackville?",
        "ground_truth": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "amends": [
            "Do join `store AS t1` with `store_district AS t2` on `t1.store_id = t2.store_id` instead of querying `stores` table directly. Do then join `district AS t3` on `t2.district_id = t3.district_id` instead of omitting these necessary table relationships. Do select `t3.headquartered_city` instead of `city` to get the correct column from the proper table. Do use proper table aliases and join conditions instead of a simple single-table query that cannot retrieve the headquarters city information. The amended query now correctly joins through the relational structure to find the headquarters city for the specified store name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM stores WHERE store_name = 'Blackville';",
            "SELECT t3.Headquartered_City \nFROM store AS t1 \nJOIN store_district AS t2 ON t1.Store_ID = t2.Store_ID \nJOIN district AS t3 ON t2.District_ID = t3.District_ID \nWHERE t1.Store_Name = 'Blackville';"
        ],
        "rule_sql": []
    },
    "4396": {
        "db_id": "tracking_grants_for_research",
        "question": "Which role is most common for the staff?",
        "ground_truth": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `role_code` instead of `role` and remove the alias `count` instead of keeping it. Do use `Project_Staff` as the source table instead of `staff`. Do move the aggregate function `count(*)` to the `ORDER BY` clause instead of including it in the `SELECT` list. Do maintain the `GROUP BY role_code` grouping and `LIMIT 1` restriction without change. The amended query now correctly returns the role code with the highest count from the Project_Staff table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role, COUNT(*) as count FROM staff GROUP BY role ORDER BY count DESC LIMIT 1;",
            "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2354": {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "ground_truth": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "amends": [
            "Do reference table `csu_fees` instead of `campuses` and column `campusfee` instead of `fee` while keeping the same aggregate function `avg` and filter condition `YEAR = 2005` instead of `year = 2005`, with the amended query now correctly calculating the average campus fee from the appropriate table for the year 2005."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(fee) FROM campuses WHERE year = 2005;",
            "SELECT AVG(CampusFee) FROM csu_fees WHERE Year = 2005;"
        ],
        "rule_sql": []
    },
    "6786": {
        "db_id": "activity_1",
        "question": "Which activity has the most faculty members participating in? Find the activity name.",
        "ground_truth": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add `T1.activity_name` with table alias instead of just `activity_name` without qualification. Do add `FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID` instead of just `FROM activities`. Do add `GROUP BY T1.actID` to aggregate by activity ID instead of omitting grouping. Do change `ORDER BY count(*) DESC` to order by participant count instead of `faculty_count DESC`. The amended query now correctly joins the activity and participation tables, groups by activity ID to count faculty participants, and orders by the actual participation count rather than a potentially incorrect faculty_count column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT activity_name FROM activities ORDER BY faculty_count DESC LIMIT 1;",
            "SELECT T1.activity_name\nFROM Activity AS T1\nJOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid\nGROUP BY T1.actid\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "6060": {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "ground_truth": "SELECT avg(order_quantity) FROM order_items",
        "amends": [
            "Do reference the `order_quantity` column instead of `quantity` and use the `order_items` table instead of `orders`. Do remove the `GROUP BY order_id` clause instead of keeping it, as the average should be calculated across all order items rather than grouped by order. The amended query now correctly calculates the overall average order quantity from the order_items table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(quantity) FROM orders GROUP BY order_id;",
            "SELECT AVG(order_quantity) AS average_order_quantity FROM Order_Items;"
        ],
        "rule_sql": []
    },
    "2625": {
        "db_id": "inn_1",
        "question": "How many rooms cost more than 120, for each different decor?",
        "ground_truth": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
        "amends": [
            "Do reference the table as `Rooms` instead of `rooms` to match the correct schema. Do use the column name `basePrice` instead of `price` for the filter condition. Do keep the same `SELECT decor, COUNT(*)` and `GROUP BY decor` structure as they remain unchanged. The amended query now correctly filters on the basePrice column in the Rooms table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT decor, COUNT(*) FROM rooms WHERE price > 120 GROUP BY decor;",
            "SELECT decor, COUNT(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor;"
        ],
        "rule_sql": []
    },
    "3785": {
        "db_id": "e_learning",
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "ground_truth": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "amends": [
            "Do select `date_test_taken` instead of `test_name, test_date`. Do use table `Student_Tests_Taken` instead of `test_results`. Do filter on `test_result = \"Pass\"` instead of `result = 'Pass'`. The amended query now correctly retrieves the test date from the appropriate table with the correct column names and filtering condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT test_name, test_date FROM test_results WHERE result = 'Pass';",
            "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass';"
        ],
        "rule_sql": []
    },
    "612": {
        "db_id": "store_1",
        "question": "What are the names of all the media types?",
        "ground_truth": "SELECT name FROM media_types;",
        "amends": [
            "Do remove the `WHERE id = 1` filter instead of keeping it, which allows selecting all media type names rather than just the one with ID 1. The amended query now matches RIGHT_SQL's behavior by returning all records from the media_types table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM media_types WHERE id = 1;",
            "SELECT name FROM media_types;"
        ],
        "rule_sql": []
    },
    "4751": {
        "db_id": "department_store",
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "ground_truth": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "amends": [
            "Do use `product_name` and `product_id` instead of `name` and `id` in the SELECT list. Do use `BETWEEN 600 AND 700` instead of `price > 700 OR price < 600` in the WHERE clause to correctly filter for products within the price range rather than excluding it. The amended query now matches RIGHT_SQL's behavior by selecting the appropriate columns and applying the correct price range filter.",
            "Do maintain the same `SELECT` list columns but change their order to `product_name, product_id` instead of `product_id, product_name`. Do keep the same `FROM` source `products` with the same case instead of `Products`. Do preserve the identical `WHERE` filter `product_price BETWEEN 600 AND 700` without any changes. The amended query now matches RIGHT_SQL's behavior by correcting the column order and table name case while maintaining the same filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, id FROM products WHERE price > 700 OR price < 600;",
            "SELECT product_id, product_name FROM Products WHERE product_price BETWEEN 600 AND 700",
            "SELECT product_name, product_id FROM Products WHERE product_price BETWEEN 600 AND 700"
        ],
        "rule_sql": []
    },
    "2457": {
        "db_id": "movie_1",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "ground_truth": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "amends": [
            "Do select `T2.name` and `avg(T1.stars)` instead of `reviewer_id` and `AVG(stars)`. Do join `Rating AS T1` with `Reviewer AS T2` on `T1.rID = T2.rID` instead of querying only the `ratings` table. Do group by `T2.name` instead of `movie_id`. The amended query now correctly calculates average star ratings grouped by reviewer names rather than by movie IDs, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reviewer_id, AVG(stars) FROM ratings GROUP BY movie_id;",
            "SELECT T2.name, AVG(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name"
        ],
        "rule_sql": []
    },
    "4090": {
        "db_id": "student_1",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "ground_truth": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "amends": [
            "Do reference table `list` instead of `students` in the FROM clause. Do use string literal `\"4\"` instead of numeric `4` in the WHERE filter for the grade comparison. Do maintain the same SELECT list with `classroom` and `COUNT(*)` aggregation, and preserve the GROUP BY on `classroom`. The amended query now correctly filters for grade as a string value and references the appropriate table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT classroom, COUNT(*) FROM students WHERE grade = 4 GROUP BY classroom;",
            "SELECT Classroom, COUNT(*) FROM list WHERE Grade = \"4\" GROUP BY Classroom;"
        ],
        "rule_sql": []
    },
    "449": {
        "db_id": "allergy_1",
        "question": "What is the type of allergy Cat?",
        "ground_truth": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
        "amends": [
            "Do reference table `Allergy_type` instead of `allergies` and select column `allergytype` instead of `allergy_type`. Do filter on column `allergy` with value 'Cat' instead of filtering on `allergy_name` with value 'Cat'. The amended query now correctly references the appropriate table and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT allergy_type FROM allergies WHERE allergy_name = 'Cat';",
            "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'Cat';"
        ],
        "rule_sql": []
    },
    "3591": {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "ground_truth": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "amends": [
            "Do select `song_name` instead of `name` and use table `song` instead of `songs`. Do change the WHERE clause to use `OR` between conditions instead of `AND`, and use column `genre_is` instead of `genre` and `languages` instead of `language`. Do use double quotes around string literals `\"modern\"` and `\"english\"` instead of single quotes and lowercase 'english' instead of 'English'. The amended query now correctly retrieves songs that are either modern genre or in English language instead of requiring both conditions simultaneously."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM songs WHERE genre = 'modern' AND language = 'English';",
            "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\";"
        ],
        "rule_sql": []
    },
    "667": {
        "db_id": "customers_card_transactions",
        "question": "How many accounts do we have?",
        "ground_truth": "SELECT count(*) FROM Accounts",
        "amends": [
            "Do reference the `Accounts` table instead of the `users` table in the FROM clause. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for the aggregate function. The amended query now correctly counts records from the Accounts table instead of the users table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users;",
            "SELECT count(*) FROM Accounts;"
        ],
        "rule_sql": []
    },
    "154": {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "ground_truth": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "amends": [
            "Do select `date` and `zip_code` instead of `zip_code`, `MAX(temperature)`, and `date`. Do use table `weather` instead of `weather_stations`. Do filter on `max_temperature_f >= 80` instead of `temperature >= 80`. Do remove the `GROUP BY zip_code` and `ORDER BY max_temp DESC` clauses instead of keeping them. The amended query now correctly retrieves dates and zip codes where maximum temperatures meet the threshold without unnecessary aggregation and sorting."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code, MAX(temperature) as max_temp, date FROM weather_stations WHERE temperature >= 80 GROUP BY zip_code ORDER BY max_temp DESC;",
            "SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80"
        ],
        "rule_sql": []
    },
    "920": {
        "db_id": "insurance_fnol",
        "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
        "ground_truth": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` with a subquery to properly handle NULL values and set differences. Do change the source table from `notifications_of_loss` to `first_notification_of_loss` instead of using the incorrect table name. Do add an explicit table alias `t1` for the customers table in the second query instead of omitting it. Do use a `JOIN` operation between `customers AS t1` and `first_notification_of_loss AS t2` on `t1.customer_id = t2.customer_id` instead of a subquery with `NOT IN`. Do reference `t1.customer_name` in the EXCEPT clause instead of the base table name to maintain proper scope. The amended query now correctly identifies customers without loss notifications using proper set operations and table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM notifications_of_loss);",
            "SELECT Customer_name FROM Customers\nEXCEPT\nSELECT t1.Customer_name \nFROM Customers AS t1\nJOIN First_Notification_of_Loss AS t2 ON t1.Customer_ID = t2.Customer_ID"
        ],
        "rule_sql": []
    },
    "1737": {
        "db_id": "gymnast",
        "question": "Count the number of gymnasts.",
        "ground_truth": "SELECT count(*) FROM gymnast",
        "amends": [
            "Do reference table `gymnast` instead of `gymnasts` to ensure the query targets the correct database table. This change fixes the table name reference to match the intended data source, ensuring accurate count results by querying the proper table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM gymnasts;",
            "SELECT COUNT(*) FROM gymnast;"
        ],
        "rule_sql": []
    },
    "3439": {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "ground_truth": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "amends": [
            "Do use column `hire_date` instead of `join_date` in the WHERE filter, as the correct column name for employee hiring dates is `hire_date` rather than `join_date`. The amended query now correctly filters employees based on their actual hire date column and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE join_date > '1987-09-07';",
            "SELECT * FROM employees WHERE hire_date > '1987-09-07';"
        ],
        "rule_sql": []
    },
    "6717": {
        "db_id": "activity_1",
        "question": "What ranks do we have for faculty?",
        "ground_truth": "SELECT DISTINCT rank FROM Faculty",
        "amends": [
            "Do select only the `rank` column instead of all columns with `*`. Do add `DISTINCT` to return unique rank values instead of returning duplicates. Do use the correct table name `Faculty` (with capital F) instead of `faculty` (with lowercase f). The amended query now correctly returns distinct rank values from the Faculty table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM faculty;",
            "SELECT DISTINCT Rank FROM Faculty;"
        ],
        "rule_sql": []
    },
    "3800": {
        "db_id": "e_learning",
        "question": "List each test result and its count in descending order of count.",
        "ground_truth": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "amends": [
            "Do reference the `Student_Tests_Taken` table instead of the `test_results` table. Do order by `COUNT(*) DESC` instead of `test_result DESC` to sort by the count of results rather than the result values themselves. The amended query now correctly aggregates test results from the appropriate table and orders them by frequency in descending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT test_result, COUNT(*) FROM test_results GROUP BY test_result ORDER BY test_result DESC;",
            "SELECT test_result, COUNT(*) AS count\nFROM Student_Tests_Taken\nGROUP BY test_result\nORDER BY COUNT(*) DESC;"
        ],
        "rule_sql": []
    },
    "6295": {
        "db_id": "city_record",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "ground_truth": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of direct table references. Do join `city` and `temperature` tables on `T1.city_id = T2.city_id` instead of querying a single `cities` table. Do reference temperature columns as `T2.Feb` and `T2.Jun` instead of `temperature_feb` and `temperature_jun`. Do use a UNION to combine with a second query joining `city` and `hosting_city` tables on `T3.city_id = T4.host_city` instead of the `host_city = 'yes'` filter. Do select `city` instead of `city_name` as the output column. The amended query now correctly handles the data model with separate tables and UNION operation to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM cities WHERE temperature_feb > temperature_jun OR host_city = 'yes';",
            "SELECT T1.City\nFROM city T1\nJOIN temperature T2 ON T1.City_ID = T2.City_ID\nWHERE T2.Feb > T2.Jun\nUNION\nSELECT T3.City\nFROM city T3\nJOIN hosting_city T4 ON T3.City_ID = T4.Host_City"
        ],
        "rule_sql": []
    },
    "2409": {
        "db_id": "candidate_poll",
        "question": "What are the average height and weight across males (sex is M)?",
        "ground_truth": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "amends": [
            "Do use `sex = 'M'` filter instead of `sex = 'F'` to select male records instead of female records. Do remove the `avg_height` and `avg_weight` column aliases instead of keeping them, making the result columns unnamed. The amended query now correctly calculates average height and weight for males instead of females and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) as avg_height, AVG(weight) as avg_weight FROM people WHERE sex = 'F';",
            "SELECT AVG(Height), AVG(Weight) FROM people WHERE Sex = 'M'"
        ],
        "rule_sql": []
    },
    "5314": {
        "db_id": "manufactory_1",
        "question": "Find the number of different products that are produced by companies at different headquarter cities.",
        "ground_truth": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "amends": [
            "Do select `count(DISTINCT T1.name)` and `T2.Headquarter` instead of `COUNT(*)` and `company_id`. Do join `manufacturers AS T2` with `products AS T1` using `ON T1.Manufacturer = T2.code` instead of only querying the `products` table. Do group by `T2.Headquarter` instead of `company_id`. The amended query now correctly counts distinct product names per manufacturer headquarters location rather than simply counting all products per company."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products GROUP BY company_id;",
            "SELECT COUNT(DISTINCT T1.Name) AS product_count, T2.Headquarter\nFROM Products AS T1\nJOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code\nGROUP BY T2.Headquarter"
        ],
        "rule_sql": []
    },
    "3319": {
        "db_id": "college_1",
        "question": "Find names of all students who took some course and got A or C.",
        "ground_truth": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "amends": [
            "Do select `T1.stu_fname` and `T1.stu_lname` instead of just `name`. Do use `FROM student AS T1 JOIN enroll AS T2` instead of `FROM students` alone. Do add the join condition `ON T1.stu_num = T2.stu_num` instead of omitting it. Do filter on `T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'` instead of `grade = 'A' OR grade = 'C'` to reference the correct table and column. The amended query now correctly joins the student and enroll tables and filters on enrollment grades instead of a non-existent grade column in the students table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE grade = 'A' OR grade = 'C';",
            "SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'"
        ],
        "rule_sql": []
    },
    "5836": {
        "db_id": "workshop_paper",
        "question": "Show each author and the number of workshops they submitted to.",
        "ground_truth": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "amends": [
            "Do use `T2.Author` instead of `author_name` for the author column. Do add `COUNT(DISTINCT T1.workshop_id)` instead of `COUNT(*)` to count distinct workshops. Do change the FROM clause to `acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID` instead of just `workshops` with a single table. Do use `GROUP BY T2.Author` instead of `GROUP BY author_name` to match the selected column. The amended query now correctly counts distinct workshops per author by joining the acceptance and submission tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name, COUNT(*) FROM workshops GROUP BY author_name;",
            "SELECT T2.Author, COUNT(DISTINCT T1.Workshop_ID) AS workshop_count FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author"
        ],
        "rule_sql": []
    },
    "678": {
        "db_id": "customers_card_transactions",
        "question": "How many accounts are there for each customer id?",
        "ground_truth": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "amends": [
            "Do group by `customer_id` instead of `account_id` to correctly aggregate account counts per customer, and do use the correct table name `Accounts` instead of `accounts` to match the schema. The amended query now correctly counts accounts per customer and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, COUNT(*) FROM accounts GROUP BY account_id;",
            "SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id"
        ],
        "rule_sql": []
    },
    "6573": {
        "db_id": "wine_1",
        "question": "What are the maximum price and score of wines produced by St. Helena appelation?",
        "ground_truth": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "amends": [
            "Do reference table `WINE` instead of `wines` in the FROM clause. Do use column names `Price` and `Score` instead of `price` and `score` in the SELECT list. Do use double quotes around the string literal \"St. Helena\" instead of single quotes. The amended query now correctly references the proper table and column names while maintaining the same aggregation logic and filtering condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price), MAX(score) FROM wines WHERE appelation = 'St. Helena';",
            "SELECT MAX(Price) AS \"Maximum Price\", MAX(Score) AS \"Maximum Score\" FROM \"wine\" WHERE \"Appelation\" = \"St. Helena\""
        ],
        "rule_sql": []
    },
    "6362": {
        "db_id": "school_bus",
        "question": "Show the type of school and the number of buses for each type.",
        "ground_truth": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "amends": [
            "Do join `school_bus AS T1` and `school AS T2` on `T1.school_id = T2.school_id` instead of querying only the `buses` table. Do select `T2.type` instead of `school_type` while maintaining the `COUNT(*)` aggregate. Do group by `T2.type` instead of `school_type` to properly categorize the count by school type from the joined school table. The amended query now correctly counts buses per school type by joining the necessary tables to access the type information."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_type, COUNT(*) FROM buses GROUP BY school_type;",
            "SELECT T2.Type, COUNT(*) AS Number_of_Buses FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type"
        ],
        "rule_sql": []
    },
    "5338": {
        "db_id": "manufactory_1",
        "question": "Select all the data from the products and each product's manufacturer.",
        "ground_truth": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "amends": [
            "Do add `JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code` instead of querying only the `products` table. Do add table alias `T1` for the products table instead of leaving it unaliased. The amended query now correctly joins the products table with manufacturers table to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products",
            "SELECT T1.*, T2.* FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code"
        ],
        "rule_sql": []
    },
    "6115": {
        "db_id": "customers_and_addresses",
        "question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?",
        "ground_truth": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "amends": [
            "Do join multiple tables `customers AS t1`, `customer_orders AS t2`, and `order_items AS t3` instead of querying only the `purchases` table. Do use explicit `JOIN` syntax with `ON t1.customer_id = t2.customer_id` and `ON t2.order_id = t3.order_id` instead of no joins. Do reference the specific column `t3.order_quantity` instead of the ambiguous `quantity`. Do use double quotes for the string literal \"Rodrick Heaney\" instead of single quotes. Do qualify the customer name filter with the table alias `t1.customer_name` instead of the unqualified `customer_name`. The amended query now correctly aggregates order quantities from the related order items table through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM purchases WHERE customer_name = 'Rodrick Heaney';",
            "SELECT SUM(t3.order_quantity) AS total_quantity\nFROM customers AS t1\nJOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id\nJOIN order_items AS t3 ON t2.order_id = t3.order_id\nWHERE t1.customer_name = \"Rodrick Heaney\""
        ],
        "rule_sql": []
    },
    "1123": {
        "db_id": "climbing",
        "question": "Return the countries of the mountains that have a height larger than 5000.",
        "ground_truth": "SELECT Country FROM mountain WHERE Height  >  5000",
        "amends": [
            "Do reference the table as `mountain` instead of `mountains` to match the correct table name. Do capitalize the column name as `Country` instead of `country` to match the correct column casing. Do capitalize the column name as `Height` instead of `height` in the WHERE clause to match the correct column casing. The amended query now correctly references the proper table and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM mountains WHERE height > 5000;",
            "SELECT Country FROM mountain WHERE Height > 5000"
        ],
        "rule_sql": []
    },
    "3141": {
        "db_id": "assets_maintenance",
        "question": "List the asset id, details, make and model for every asset.",
        "ground_truth": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "amends": [
            "Do reference columns `asset_details`, `asset_make`, and `asset_model` instead of `details`, `make`, and `model` respectively. Do query from table `Assets` instead of `assets`. Do remove the `WHERE asset_id IS NULL` filter instead of keeping it, as the correct query retrieves all records without filtering for null asset IDs. The amended query now matches RIGHT_SQL's behavior by selecting all assets with their complete details."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT asset_id, details, make, model FROM assets WHERE asset_id IS NULL;",
            "SELECT asset_id, asset_details, asset_make, asset_model FROM Assets"
        ],
        "rule_sql": []
    },
    "4995": {
        "db_id": "soccer_2",
        "question": "What are the different states that have students trying out?",
        "ground_truth": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "amends": [
            "Do add `JOIN tryout AS T2 ON T1.cName = T2.cName` instead of omitting the table join entirely. Do change the FROM clause to `college AS T1` instead of `students` as the source table. Do remove the `WHERE tryout_status = 'trying'` filter instead of keeping it, as the join condition now handles the relationship between college and tryout tables. The amended query now correctly retrieves distinct states from colleges that have tryouts by joining on the college name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT state FROM students WHERE tryout_status = 'trying';",
            "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName"
        ],
        "rule_sql": []
    },
    "4615": {
        "db_id": "entertainment_awards",
        "question": "List the year in which there are more than one festivals.",
        "ground_truth": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1",
        "amends": [
            "Do reference table `festival_detail` instead of `festivals` in the FROM clause. The amended query now correctly identifies duplicate years from the appropriate table while maintaining the same grouping and filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM festivals GROUP BY year HAVING COUNT(*) > 1",
            "SELECT Year FROM festival_detail GROUP BY Year HAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "590": {
        "db_id": "store_1",
        "question": "What is the first and last name of the employee who reports to Nancy Edwards?",
        "ground_truth": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
        "amends": [
            "Do select `T2.first_name` and `T2.last_name` instead of `first_name` and `last_name` without table qualification. Do add `employees AS T1` and `employees AS T2` with a `JOIN` instead of querying only one `employees` table. Do use `ON T1.id = T2.reports_to` instead of filtering directly on `reports_to = 'Nancy Edwards'`. Do filter with `T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"` instead of the incorrect composite string comparison. The amended query now correctly finds employees who report to Nancy Edwards by joining the employees table to itself and matching on the manager's ID rather than attempting to match a concatenated name string."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE reports_to = 'Nancy Edwards';",
            "SELECT T2.first_name, T2.last_name\nFROM employees AS T1\nJOIN employees AS T2 ON T1.id = T2.reports_to\nWHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards'"
        ],
        "rule_sql": []
    },
    "6094": {
        "db_id": "customers_and_addresses",
        "question": "For which countries are there more than four distinct addresses listed?",
        "ground_truth": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "amends": [
            "Do use `count(address_id)` in the HAVING clause instead of `COUNT(*)` to count specific non-null address identifiers rather than all rows. Do remove the `address_count` alias from the SELECT list instead of keeping it since it's not needed in the final output. The amended query now correctly filters groups based on the count of actual address records rather than total row count, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as address_count FROM addresses GROUP BY country HAVING COUNT(*) > 4",
            "SELECT country FROM Addresses GROUP BY country HAVING COUNT(address_id) > 4"
        ],
        "rule_sql": []
    },
    "6737": {
        "db_id": "activity_1",
        "question": "Which building has most faculty members?",
        "ground_truth": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select only `building` instead of including `COUNT(*) as faculty_count` in the SELECT list. Do order by `count(*) DESC` instead of `faculty_count ASC` to find the building with the highest faculty count rather than the lowest. Do remove the alias `faculty_count` from the ORDER BY clause since it's no longer present in the SELECT list. The amended query now correctly identifies the building with the most faculty members by counting faculty per building and ordering descending by count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building, COUNT(*) as faculty_count FROM faculty GROUP BY building ORDER BY faculty_count ASC LIMIT 1;",
            "SELECT Building FROM Faculty GROUP BY Building ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5621": {
        "db_id": "swimming",
        "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "ground_truth": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'",
        "amends": [
            "Do join `stadium AS t1` with `event AS t2` on `t1.id = t2.stadium_id` instead of querying only the `stadiums` table. Do filter on `t2.name = 'World Junior'` instead of `event_name = 'World Junior'` to correctly reference the event table. Do qualify columns with table aliases as `t1.name` and `t1.capacity` instead of unqualified `name` and `capacity` for explicit table reference. The amended query now correctly joins stadium and event tables to find stadiums hosting the specific event, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, capacity FROM stadiums WHERE event_name = 'World Junior'",
            "SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.ID = t2.Stadium_ID WHERE t2.Name = 'World Junior'"
        ],
        "rule_sql": []
    },
    "3251": {
        "db_id": "college_1",
        "question": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "ground_truth": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
        "amends": [
            "Do use tables `CLASS`, `enroll`, `course`, and `department` instead of `students`, `classes`, and `professors`. Do join `CLASS` to `enroll` on `class_code` instead of joining `students` to `classes` on `class_id`. Do join `CLASS` to `course` on `crs_code` instead of joining `classes` to `professors` on `professor_id`. Do join `course` to `department` on `dept_code` instead of filtering directly on professor department. Do filter on `dept_name = 'Accounting'` instead of `department = 'accounting'`. The amended query now correctly counts enrollments in accounting department courses instead of students taught by accounting professors."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students s JOIN classes c ON s.class_id = c.id JOIN professors p ON c.professor_id = p.id WHERE p.department = 'accounting';",
            "SELECT COUNT(*) AS student_count\nFROM ENROLL e\nJOIN CLASS c ON e.CLASS_CODE = c.CLASS_CODE\nJOIN COURSE crs ON c.CRS_CODE = crs.CRS_CODE\nJOIN DEPARTMENT d ON crs.DEPT_CODE = d.DEPT_CODE\nWHERE d.DEPT_NAME = 'Accounting';"
        ],
        "rule_sql": []
    },
    "3787": {
        "db_id": "e_learning",
        "question": "Count the number of tests with \"Fail\" result.",
        "ground_truth": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
        "amends": [
            "Do reference table `Student_Tests_Taken` instead of `tests` and filter on column `test_result` with value `\"Fail\"` instead of `result` with value `'Pass'`."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tests WHERE result = 'Pass';",
            "SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = 'Fail';"
        ],
        "rule_sql": []
    },
    "6252": {
        "db_id": "ship_1",
        "question": "List all ship names in the order of built year and class.",
        "ground_truth": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
        "amends": [
            "Do reference table `ship` instead of `ships` in the FROM clause. Do order by column `built_year` instead of `year` and maintain `CLASS` ordering instead of `class`. The amended query now correctly references the intended table structure and ordering columns to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM ships ORDER BY year, class;",
            "SELECT Name FROM Ship ORDER BY Built_Year, Class;"
        ],
        "rule_sql": []
    },
    "4506": {
        "db_id": "document_management",
        "question": "What is the total access count of documents that are of the most common document type?",
        "ground_truth": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do use `GROUP BY document_type_code` instead of a subquery to find the most frequent document type. Do remove the `WHERE` clause with the subquery instead of keeping it, as the grouping and ordering directly identifies the target group. Do add `ORDER BY count(*) DESC LIMIT 1` to the main query instead of using it in a subquery, which allows selecting the sum for the most frequent document type group directly. The amended query now correctly aggregates access counts by document_type_code and returns the sum for the group with the highest document count, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(access_count) FROM documents WHERE document_type = (SELECT document_type FROM documents GROUP BY document_type ORDER BY COUNT(*) DESC LIMIT 1);",
            "SELECT SUM(access_count) AS total_access_count\nFROM Documents\nGROUP BY document_type_code\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5182": {
        "db_id": "music_2",
        "question": "Find all the songs performed by artist with last name \"Heilo\"",
        "ground_truth": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "amends": [
            "Do select only `Title` from `T3` instead of selecting all columns with `*`. Do join `Performance` as `T1` with `Band` as `T2` on `T1.bandmate = T2.id` instead of querying only the `songs` table. Do add a second join to `Songs` as `T3` on `T3.SongId = T1.SongId` instead of omitting these table relationships. Do filter on `T2.Lastname = \"Heilo\"` instead of filtering directly on `artist_last_name` in the songs table. The amended query now correctly retrieves song titles performed by band members with the last name Heilo through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM songs WHERE artist_last_name = 'Heilo';",
            "SELECT T3.Title \nFROM Performance AS T1\nJOIN Band AS T2 ON T1.Bandmate = T2.Id\nJOIN Songs AS T3 ON T3.SongId = T1.SongId\nWHERE T2.Lastname = 'Heilo'"
        ],
        "rule_sql": []
    },
    "1601": {
        "db_id": "customers_and_invoices",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "ground_truth": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add `Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number` as the FROM source instead of just `invoices`. Do change the SELECT list to `T2.invoice_number, T2.invoice_date` instead of `invoice_number, invoice_date` without table qualification. Do add `GROUP BY T1.invoice_number` instead of omitting grouping. Do change the ORDER BY to `count(*) DESC` instead of `COUNT(transaction_id) DESC` since the transaction count is now properly aggregated. The amended query now correctly joins the transaction and invoice tables, groups by invoice number to count transactions per invoice, and returns the invoice with the highest transaction count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT invoice_number, invoice_date FROM invoices ORDER BY COUNT(transaction_id) DESC LIMIT 1;",
            "SELECT T2.invoice_number, T2.invoice_date\nFROM Financial_Transactions AS T1\nJOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number\nGROUP BY T1.invoice_number\nORDER BY count(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "3320": {
        "db_id": "college_1",
        "question": "What are the names of all students taking a course who received an A or C?",
        "ground_truth": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "amends": [
            "Do select `T1.stu_fname` and `T1.stu_lname` instead of `s.name`. Do join `student AS T1` with `enroll AS T2` instead of `students s` with `grades g`. Do use join condition `T1.stu_num = T2.stu_num` instead of `s.id = g.student_id`. Do filter on `T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'` instead of `g.grade = 'A' OR g.grade = 'C'`. The amended query now correctly retrieves student names from the appropriate tables with proper join conditions and grade filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name FROM students s JOIN grades g ON s.id = g.student_id WHERE g.grade = 'A' OR g.grade = 'C';",
            "SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' OR T2.enroll_grade = 'C'"
        ],
        "rule_sql": []
    },
    "3967": {
        "db_id": "hospital_1",
        "question": "Tell me the highest, lowest, and average cost of procedures.",
        "ground_truth": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",
        "amends": [
            "Do use the `procedures` table instead of the `patients` table as the data source. Do remove the column aliases `highest_cost`, `lowest_cost`, and `average_cost` instead of keeping them. The amended query now correctly calculates aggregate statistics from the procedures table without unnecessary aliasing."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(cost) AS highest_cost, MIN(cost) AS lowest_cost, AVG(cost) AS average_cost FROM patients;",
            "SELECT MAX(Cost), MIN(Cost), AVG(Cost) FROM Procedures;"
        ],
        "rule_sql": []
    },
    "2135": {
        "db_id": "company_1",
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "ground_truth": "SELECT fname ,  lname FROM employee WHERE salary  >  30000",
        "amends": [
            "Do reference columns `fname` and `lname` instead of `first_name` and `last_name`. Do use table name `employee` instead of `employees`. Do apply filter `salary > 30000` instead of `salary < 30000`, changing the comparison operator from less than to greater than. The amended query now correctly selects first and last names from the employee table where salary exceeds 30000, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE salary < 30000;",
            "SELECT Fname, Lname FROM employee WHERE Salary > 30000"
        ],
        "rule_sql": []
    },
    "6004": {
        "db_id": "game_1",
        "question": "What are the ids for all sporty students who are on scholarship?",
        "ground_truth": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "amends": [
            "Do select `StuID` instead of `id` and use table `Sportsinfo` instead of `students`. Do filter on `onscholarship = 'Y'` instead of using separate `sporty = 'yes'` or `scholarship = 'yes'` conditions. The amended query now correctly retrieves scholarship students from the appropriate table with the proper column names and filter logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM students WHERE sporty = 'yes' OR scholarship = 'yes';",
            "SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Y'"
        ],
        "rule_sql": []
    },
    "6473": {
        "db_id": "scientist_1",
        "question": "How many different scientists are assigned to any project?",
        "ground_truth": "SELECT count(DISTINCT scientist) FROM assignedto",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM scientists;"
        ],
        "rule_sql": []
    },
    "3002": {
        "db_id": "sakila_1",
        "question": "Where does the staff member with the first name Elsa live?",
        "ground_truth": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'",
        "amends": [
            "Do add table `address AS T2` instead of omitting it. Do add `JOIN` on `T1.address_id = T2.address_id` instead of missing the join condition. Do change column reference to `T2.address` instead of just `address`. Do keep `WHERE T1.first_name = 'Elsa'` as the filter condition. The amended query now correctly joins the staff and address tables to retrieve the address from the appropriate table while maintaining the same filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM staff WHERE first_name = 'Elsa';",
            "SELECT T2.address \nFROM staff AS T1 \nJOIN address AS T2 ON T1.address_id = T2.address_id \nWHERE T1.first_name = 'Elsa'"
        ],
        "rule_sql": []
    },
    "4428": {
        "db_id": "network_2",
        "question": "Find the number of people who is under 40 for each gender.",
        "ground_truth": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
        "amends": [
            "Do use table name `Person` instead of `people` in the FROM clause. Do move the `gender` column to the SELECT list instead of placing it first. Do change the age filter to `age < 40` instead of `age > 40` to select younger individuals. Do adjust the column order by placing `count(*)` first instead of `gender` in the SELECT list. The amended query now correctly counts people under 40 years old grouped by gender using the proper table name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, COUNT(*) FROM people WHERE age > 40 GROUP BY gender;",
            "SELECT COUNT(*) AS count, gender FROM Person WHERE age < 40 GROUP BY gender;"
        ],
        "rule_sql": []
    },
    "5672": {
        "db_id": "dorm_1",
        "question": "How many female students (sex is F) whose age is below 25?",
        "ground_truth": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "amends": [
            "Do reference table `student` instead of `students` in the FROM clause. Do change the WHERE filter to `sex = 'F'` instead of `sex = 'M'` and `age < 25` instead of `age >= 25`. The amended query now correctly counts female students under 25 years old instead of male students 25 or older."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE sex = 'M' AND age >= 25;",
            "SELECT COUNT(*) FROM Student WHERE sex = 'F' AND age < 25"
        ],
        "rule_sql": []
    },
    "6025": {
        "db_id": "game_1",
        "question": "Show student ids who are female and play football.",
        "ground_truth": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "amends": [
            "Do select `StuID` from `Student` instead of `student_id` from `students`. Do filter for `sex = 'F'` instead of `gender = 'male'`. Do use `INTERSECT` with a second query selecting `StuID` from `Sportsinfo` where `sportname = \"Football\"` instead of a single query with `sport = 'football'` condition. Do reference table `Sportsinfo` instead of omitting it. The amended query now correctly finds female students who play football by intersecting results from two separate tables, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM students WHERE gender = 'male' AND sport = 'football';",
            "SELECT StuID FROM Student WHERE Sex = 'F'\nINTERSECT\nSELECT StuID FROM SportsInfo WHERE SportName = 'Football'"
        ],
        "rule_sql": []
    },
    "1330": {
        "db_id": "college_2",
        "question": "Find the name and building of the department with the highest budget.",
        "ground_truth": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "amends": [
            "Do use column alias `dept_name` instead of `name` in the SELECT list. Do change the ORDER BY direction to `DESC` instead of `ASC` for the `budget` column. End with confirmation that the amended query now matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, building FROM department ORDER BY budget ASC LIMIT 1;",
            "SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3750": {
        "db_id": "program_share",
        "question": "find the number of different programs that are broadcast during night time.",
        "ground_truth": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "amends": [
            "Do select `count(DISTINCT program_id)` instead of `COUNT(*)` to count unique programs rather than all rows. Do query from `broadcast` table instead of `programs` to access the correct data source. Do filter on `time_of_day = 'Night'` instead of `time = 'night'` to use the proper column name and case-sensitive value. Do remove the asterisk wildcard and instead specify the distinct count of program identifiers to accurately measure unique program broadcasts during nighttime hours."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM programs WHERE time = 'night';",
            "SELECT COUNT(DISTINCT Program_ID) FROM broadcast WHERE Time_of_day = 'Night';"
        ],
        "rule_sql": []
    },
    "4460": {
        "db_id": "network_2",
        "question": "Find the male friend of Alice whose job is a doctor?",
        "ground_truth": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "amends": [
            "Do select `T2.friend` instead of `*` from all columns. Do use `Person AS T1 JOIN PersonFriend AS T2` instead of a single `friends` table. Do apply the join condition `ON T1.name = T2.friend` instead of no join. Do filter with `T2.name = 'Alice'` instead of `name = 'Alice'`. Do filter with `T1.gender = 'male'` instead of `gender = 'female'`. Do filter with `T1.job = 'doctor'` instead of `job = 'doctor'`. The amended query now correctly finds male doctors who are friends of Alice by joining the Person and PersonFriend tables with proper relationship conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM friends WHERE gender = 'female' AND job = 'doctor' AND name = 'Alice';",
            "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'"
        ],
        "rule_sql": []
    },
    "6139": {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who never placed an order.",
        "ground_truth": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "amends": [
            "Do select `customer_name` instead of `name` and use `EXCEPT` to find customers without orders instead of filtering for `order_id IS NULL`. Do add a join between `customers AS t1` and `customer_orders AS t2` on `t1.customer_id = t2.customer_id` instead of omitting the join entirely. Do remove the `WHERE` clause with `order_id IS NULL` instead of keeping it, as the `EXCEPT` operation correctly identifies customers who have no matching records in the joined orders table. The amended query now matches the right SQL's behavior of properly finding customers without any orders."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE order_id IS NULL;",
            "SELECT customer_name FROM Customers\nEXCEPT\nSELECT t1.customer_name FROM Customers AS t1\nJOIN Customer_Orders AS t2 ON t1.customer_id = t2.customer_id"
        ],
        "rule_sql": []
    },
    "3067": {
        "db_id": "loan_1",
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "ground_truth": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "amends": [
            "Do select `T1.bname` instead of `branch_name` and add aggregation with `sum(T2.amount)` instead of ordering by raw `amount`. Do join `bank AS T1` to `loan AS T2` on `T1.branch_id = T2.branch_id` instead of querying only `loans` table. Do add `GROUP BY T1.bname` instead of omitting grouping. Do order by `sum(T2.amount) DESC` instead of `amount DESC` to correctly aggregate loan amounts per branch. The amended query now matches RIGHT_SQL's behavior by properly calculating the branch with the highest total loan amount."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT branch_name FROM loans ORDER BY amount DESC LIMIT 1;",
            "SELECT T1.bname\nFROM bank AS T1\nJOIN loan AS T2 ON T1.branch_ID = T2.branch_ID\nGROUP BY T1.bname\nORDER BY SUM(T2.amount) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6327": {
        "db_id": "e_government",
        "question": "Count the number of services.",
        "ground_truth": "SELECT count(*) FROM services",
        "amends": [
            "Do query the `services` table instead of the `employees` table. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees;",
            "SELECT COUNT(*) FROM Services;"
        ],
        "rule_sql": []
    },
    "3032": {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "ground_truth": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "amends": [
            "Do use column alias `cust_name` instead of `name` and `acc_bal` instead of `balance`. Do reference table `customer` instead of `customers`. Do use lowercase pattern matching `'%a%'` instead of uppercase `'%A%'` to ensure case-insensitive matching. The amended query now correctly retrieves customer names and account balances from the customer table using case-insensitive pattern matching."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, balance FROM customers WHERE name LIKE '%A%';",
            "SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'"
        ],
        "rule_sql": []
    },
    "4745": {
        "db_id": "department_store",
        "question": "For each product type, return the maximum and minimum price.",
        "ground_truth": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
        "amends": [
            "Do reference `product_type_code` instead of `product_type` in the SELECT list and GROUP BY clause. Do use `max(product_price)` and `min(product_price)` instead of `MAX(price)` and `MIN(price)` for the aggregate functions. Do group by `product_type_code` instead of `product_id` to properly aggregate by product type rather than individual products. The amended query now correctly calculates maximum and minimum prices grouped by product type codes instead of by individual product IDs, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_type, MAX(price), MIN(price) FROM products GROUP BY product_id;",
            "SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price FROM Products GROUP BY product_type_code"
        ],
        "rule_sql": []
    },
    "4329": {
        "db_id": "tracking_grants_for_research",
        "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
        "ground_truth": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "amends": [
            "Do select specific columns `T2.organisation_id` and `T2.organisation_details` instead of using `SELECT *`. Do join tables `Grants AS T1` and `Organisations AS T2` with an `INNER JOIN` on `T1.organisation_id = T2.organisation_id` instead of querying only the `organizations` table. Do aggregate with `GROUP BY T2.organisation_id` and filter with `HAVING sum(T1.grant_amount) > 6000` instead of using a simple `WHERE grant_amount > 6000` filter on individual rows. The amended query now correctly calculates the total grant amount per organization and filters for organizations with aggregate grants exceeding 6000, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM organizations WHERE grant_amount > 6000;",
            "SELECT T2.organisation_id, T2.organisation_details\nFROM Grants AS T1\nINNER JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id\nGROUP BY T2.organisation_id\nHAVING SUM(T1.grant_amount) > 6000"
        ],
        "rule_sql": []
    },
    "3458": {
        "db_id": "hr_1",
        "question": "What are the job ids for jobs done more than once for a period of more than 300 days?",
        "ground_truth": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "amends": [
            "Do query the `job_history` table instead of the `jobs` table. Do use `GROUP BY job_id` instead of omitting grouping. Do move the count condition to `HAVING COUNT(*) >= 2` instead of placing it in the `WHERE` clause. Do use arithmetic subtraction `end_date - start_date > 300` instead of `DATEDIFF(end_date, start_date) > 300`. The amended query now correctly identifies job IDs from the job_history table where the duration exceeds 300 days and the job appears at least twice, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_id FROM jobs WHERE COUNT(*) > 1 AND DATEDIFF(end_date, start_date) > 300",
            "SELECT job_id FROM job_history WHERE (end_date - start_date) > 300 GROUP BY job_id HAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "170": {
        "db_id": "bike_1",
        "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
        "ground_truth": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "amends": [
            "Do select `id` from `station` instead of `station_id` from `stations`. Do use `EXCEPT` with a subquery instead of a single query with `MIN()` aggregate. Do move the aggregate condition to a `HAVING` clause in the subquery instead of using `MIN()` directly in the `WHERE` clause. Do use `< 7` instead of `>= 7` for the bikes available threshold. Do reference `lat` instead of `latitude` as the column name. The amended query now correctly identifies stations with latitude greater than 37.4 that don't have any status records with fewer than 7 bikes available, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT station_id FROM stations WHERE latitude > 37.4 AND MIN(bikes_available) >= 7;",
            "SELECT id FROM station WHERE lat > 37.4\nEXCEPT\nSELECT station_id FROM status WHERE bikes_available < 7"
        ],
        "rule_sql": []
    },
    "3904": {
        "db_id": "hospital_1",
        "question": "What are names of patients who made an appointment?",
        "ground_truth": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "amends": [
            "Do join `appointment AS T1` to `patient AS T2` on `T1.patient = T2.ssn` instead of filtering on `appointment_id IS NOT NULL` without proper table relationships. Do select `name` from the joined patient table instead of from a single table with incomplete context. Do remove the `WHERE` filter condition entirely instead of using it to indirectly check for appointment existence, as the explicit join properly establishes the relationship between appointments and patients. The amended query now correctly retrieves patient names by establishing the proper relationship between appointment and patient tables through the join condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM patients WHERE appointment_id IS NOT NULL",
            "SELECT T2.Name \nFROM Appointment AS T1 \nJOIN Patient AS T2 ON T1.Patient = T2.SSN"
        ],
        "rule_sql": []
    },
    "3493": {
        "db_id": "hr_1",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "ground_truth": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "amends": [
            "Do reference columns with table aliases `T1.first_name` and `T1.job_id` instead of using unqualified column names. Do add a `JOIN` with `departments AS T2` instead of querying only the `employees` table. Do use the join condition `T1.department_id = T2.department_id` instead of filtering directly on a department column. Do filter on `T2.department_name = 'Finance'` instead of `department = 'Finance'` since the department name should come from the departments table rather than a column in employees. The amended query now correctly joins the tables and filters on the proper department name column to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, job_id FROM employees WHERE department = 'Finance';",
            "SELECT T1.first_name, T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'"
        ],
        "rule_sql": []
    },
    "5516": {
        "db_id": "products_gen_characteristics",
        "question": "How many products are there?",
        "ground_truth": "SELECT count(*) FROM products",
        "amends": [
            "Do query the `products` table instead of the `customers` table, as the intended data source has changed from customer records to product information. The amended query now correctly counts records from the products table instead of customers, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers;",
            "SELECT COUNT(*) FROM Products;"
        ],
        "rule_sql": []
    },
    "4916": {
        "db_id": "store_product",
        "question": "Find the names of all stores in Khanewal District.",
        "ground_truth": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
        "amends": [
            "Do select `t1.store_name` instead of `name` and use proper table aliases. Do add joins to `store_district AS t2` and `district AS t3` instead of querying only the `stores` table. Do use join conditions `ON t1.store_id = t2.store_id` and `ON t2.district_id = t3.district_id` instead of no join predicates. Do filter on `t3.district_name = \"Khanewal District\"` instead of `district = 'Khanewal'` to use the correct district name from the proper table. The amended query now correctly joins the necessary tables to filter stores by district name and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM stores WHERE district = 'Khanewal';",
            "SELECT t1.Store_Name \nFROM store AS t1\nJOIN store_district AS t2 ON t1.Store_ID = t2.Store_ID\nJOIN district AS t3 ON t2.District_ID = t3.District_ID\nWHERE t3.District_name = 'Khanewal District'"
        ],
        "rule_sql": []
    },
    "5675": {
        "db_id": "dorm_1",
        "question": "What are the first names of all students who are older than 20?",
        "ground_truth": "SELECT fname FROM student WHERE age  >  20",
        "amends": [
            "Do select `fname` instead of `first_name` and use table `student` instead of `students`. Do change the filter to `age > 20` instead of `age < 20`. The amended query now correctly retrieves first names from the student table for those over 20 years old."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE age < 20;",
            "SELECT fname FROM Student WHERE Age > 20;"
        ],
        "rule_sql": []
    },
    "3234": {
        "db_id": "college_1",
        "question": "How many courses does the department of Computer Information Systmes offer?",
        "ground_truth": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
        "amends": [
            "Do join `department` and `course` tables with `INNER JOIN` on `T1.dept_code = T2.dept_code` instead of querying only the `courses` table. Do filter on `dept_name = \"Computer Info. Systems\"` instead of `department = 'Computer Information Systems'` to use the correct column name and department naming convention. Do use proper table aliases `T1` and `T2` instead of omitting them, and do use double quotes for the string literal instead of single quotes. The amended query now correctly joins the department and course tables to count courses specifically from the Computer Info. Systems department, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM courses WHERE department = 'Computer Information Systems';",
            "SELECT COUNT(*) FROM DEPARTMENT T1 INNER JOIN COURSE T2 ON T1.DEPT_CODE = T2.DEPT_CODE WHERE T1.DEPT_NAME = \"Computer Info. Systems\""
        ],
        "rule_sql": []
    },
    "3334": {
        "db_id": "college_1",
        "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "ground_truth": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
        "amends": [
            "Do join `department AS T2` instead of querying `departments` alone. Do use `T2.dept_name` instead of `department_name` in the SELECT list. Do add `course AS T1` as a source table instead of omitting it. Do use `T1.crs_description LIKE '%Statistics%'` instead of `course_description LIKE '%Statistics%'` in the WHERE filter. Do implement `JOIN ... ON T1.dept_code = T2.dept_code` instead of missing the table relationship entirely. The amended query now correctly joins course and department tables to find departments offering statistics courses, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name FROM departments WHERE course_description LIKE '%Statistics%'",
            "SELECT T2.DEPT_NAME \nFROM COURSE AS T1 \nJOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE \nWHERE T1.CRS_DESCRIPTION LIKE '%Statistics%'"
        ],
        "rule_sql": []
    },
    "1409": {
        "db_id": "college_2",
        "question": "What is the name of the deparment with the highest enrollment?",
        "ground_truth": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `dept_name` instead of `department_name` and do aggregate with `count(*)` instead of referencing `enrollment`. Do use `GROUP BY dept_name` instead of omitting grouping. Do move the source table to `student` instead of `departments`. Do order by `count(*) DESC` instead of `enrollment DESC`. The amended query now correctly identifies departments by counting students per department rather than relying on a potentially incorrect enrollment column.",
            "Do remove `COUNT(*) as enrollment_count` from the SELECT list instead of including it, and do remove the alias `enrollment_count` instead of keeping it. Do maintain the same `GROUP BY dept_name` clause instead of changing it. Do maintain the same `ORDER BY count(*) DESC` instead of changing it. Do maintain the same `LIMIT 1` instead of changing it. The amended query now correctly returns only the department name with the highest enrollment count instead of including unnecessary aggregate results in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name FROM departments ORDER BY enrollment DESC LIMIT 1;",
            "SELECT dept_name, COUNT(*) as enrollment_count FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1562": {
        "db_id": "customers_and_invoices",
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "ground_truth": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "amends": [
            "Do reference columns with table aliases `T1.customer_first_name`, `T1.customer_last_name`, and `T1.phone_number` instead of unqualified `first_name`, `last_name`, and `phone_number`. Do add `JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id` instead of filtering with `WHERE account_id IS NOT NULL`. Do remove the `WHERE account_id IS NOT NULL` condition instead of keeping it, as the join condition now properly filters for customers with accounts. The amended query now correctly matches the RIGHT_SQL's behavior by using an explicit join to validate customer-account relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT first_name, last_name, phone_number FROM customers WHERE account_id IS NOT NULL;",
            "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number\nFROM Customers AS T1\nJOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
        ],
        "rule_sql": []
    },
    "5426": {
        "db_id": "shop_membership",
        "question": "List the branch name and city without any registered members.",
        "ground_truth": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "amends": [
            "Do select `name` and `city` instead of `branch_name` and `city`. Do use table `branch` instead of `branches`. Do remove the `WHERE member_id IS NULL` filter instead of keeping it. Do add a subquery with `NOT IN` condition checking `branch_id` against `membership_register_branch` instead of omitting this correlation. The amended query now correctly identifies branches without members by checking the membership register relationship rather than relying on a potentially incorrect NULL check on member_id."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT branch_name, city FROM branches WHERE member_id IS NULL;",
            "SELECT name, city FROM branch WHERE Branch_ID NOT IN (SELECT Branch_ID FROM membership_register_branch)"
        ],
        "rule_sql": []
    },
    "2677": {
        "db_id": "party_host",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "ground_truth": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "amends": [
            "Do use `Nationality` instead of `nation` for the column name and `HOST` instead of `hosts` for the table name. Do remove the `DISTINCT` keyword instead of keeping it since the INTERSECT operation inherently returns distinct values. Do replace the single query with `INTERSECT` between two separate queries instead of using a single WHERE clause with conflicting conditions. Do split the age conditions into separate queries with `Age > 45` and `Age < 35` instead of combining them with AND which would never return results. Do use proper column and table names that match the schema requirements. The amended query now correctly uses INTERSECT to find nationalities where hosts are both over 45 and under 35 years old, which matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT nation FROM hosts WHERE age > 45 AND age < 35;",
            "SELECT Nationality FROM host WHERE Age > '45' INTERSECT SELECT Nationality FROM host WHERE Age < '35'"
        ],
        "rule_sql": []
    },
    "6747": {
        "db_id": "activity_1",
        "question": "Show the number of male and female assistant professors.",
        "ground_truth": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "amends": [
            "Do use column name `sex` instead of `gender` and table name `Faculty` instead of `professors`. Do use filter condition `rank = \"AsstProf\"` instead of `title = 'Assistant Professor'` while maintaining the same COUNT(*) aggregation and GROUP BY logic. The amended query now correctly matches the RIGHT_SQL's behavior with equivalent semantic meaning despite different column and table naming conventions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, COUNT(*) FROM professors WHERE title = 'Assistant Professor' GROUP BY gender;",
            "SELECT sex, COUNT(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex;"
        ],
        "rule_sql": []
    },
    "3993": {
        "db_id": "hospital_1",
        "question": "How many patients are not using Procrastin-X as medication?",
        "ground_truth": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "amends": [
            "Do use `patient` as the table name instead of `patients`. Do change the WHERE filter to use a subquery with `SSN NOT IN` instead of directly filtering on `medication = 'Procrastin-X'`. Do add a subquery that joins `Prescribes AS T1` with `Medication AS T2` on `T1.Medication = T2.Code` instead of omitting these tables. Do filter the subquery with `T2.name = 'Procrastin-X'` instead of the direct medication filter. Do reference `T1.patient` in the subquery's SELECT instead of the original direct column reference. The amended query now correctly counts patients who have not been prescribed 'Procrastin-X' by using proper table relationships instead of assuming medication data exists directly in the patient table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE medication = 'Procrastin-X';",
            "SELECT COUNT(*) \nFROM Patient \nWHERE SSN NOT IN (\n    SELECT T1.Patient \n    FROM Prescribes AS T1 \n    JOIN Medication AS T2 ON T1.Medication = T2.Code \n    WHERE T2.Name = 'Procrastin-X'\n)"
        ],
        "rule_sql": []
    },
    "440": {
        "db_id": "allergy_1",
        "question": "How many allergy entries are there?",
        "ground_truth": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "amends": [
            "Do select `count(DISTINCT allergy)` instead of `COUNT(*)`. Do query from `Allergy_type` instead of `patients`. The amended query now correctly counts distinct allergy types from the appropriate table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients;",
            "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type;"
        ],
        "rule_sql": []
    },
    "4907": {
        "db_id": "store_product",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "ground_truth": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "amends": [
            "Do use `district_name` instead of `name` for the column selection. Do reference the `district` table instead of `districts` as the source. Do use `City_Population` instead of `population` for the second filter condition. The amended query now correctly selects from the appropriate table with the proper column names while maintaining the same logical filtering conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM districts WHERE city_area > 10 OR population > 100000",
            "SELECT district_name FROM district WHERE City_Area > 10 OR City_Population > 100000"
        ],
        "rule_sql": []
    },
    "1391": {
        "db_id": "college_2",
        "question": "What are the names of students who have more than one advisor?",
        "ground_truth": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "amends": [
            "Do add table `advisor` with a `JOIN` on `student.id = advisor.s_id` instead of querying only the `students` table. Do change the SELECT list to reference `T1.name` with table alias instead of just `name`. Do remove the `WHERE` filter on `advisor_count` instead of keeping it, as this column doesn't exist in the schema. Do add `GROUP BY T2.s_id` to group by student ID instead of omitting grouping. Do move the count condition to `HAVING count(*) > 1` instead of using a non-existent column in WHERE, which properly counts advisor relationships per student. The amended query now correctly identifies students with more than one advisor by joining and counting relationships, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE advisor_count > 1;",
            "SELECT T1.name FROM student T1 JOIN advisor T2 ON T1.ID = T2.s_ID GROUP BY T2.s_ID HAVING count(*) > 1"
        ],
        "rule_sql": []
    },
    "2832": {
        "db_id": "restaurant_1",
        "question": "Which major has least number of students? List the major and the number of students.",
        "ground_truth": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
        "amends": [
            "Do use `count(*)` without an alias instead of `COUNT(*) as student_count` in the SELECT list. Do reference `Major` with proper case instead of `major` in both SELECT and GROUP BY clauses. Do order by `count(Major)` instead of the alias `student_count` in the ORDER BY clause. The amended query now correctly orders by the actual count of majors rather than an aliased column reference, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT major, COUNT(*) as student_count FROM students GROUP BY major ORDER BY student_count ASC LIMIT 1;",
            "SELECT Major, COUNT(*) FROM Student GROUP BY Major ORDER BY COUNT(*) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1718": {
        "db_id": "epinions_1",
        "question": "Find the number of items without any review.",
        "ground_truth": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "amends": [
            "Do use `count(*)` instead of `COUNT(*)` for consistency. Do query from `item` table instead of `items` table. Do change the WHERE condition to use `i_id NOT IN (subquery)` instead of `review_id IS NULL`. Do add a subquery `SELECT i_id FROM review` instead of checking for NULL values directly. Do remove the direct NULL check on `review_id` column instead of keeping it, as the correct logic requires identifying items that have no corresponding entries in the review table rather than just checking for NULL values in a specific column. The amended query now correctly identifies items without any reviews by using a NOT IN subquery against the review table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM items WHERE review_id IS NULL;",
            "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
        ],
        "rule_sql": []
    },
    "5843": {
        "db_id": "workshop_paper",
        "question": "Which authors did not submit to any workshop?",
        "ground_truth": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "amends": [
            "Do select `Author` from `submission` instead of `author_name` from `authors`. Do use a `WHERE` filter with `NOT IN` subquery checking `acceptance` table instead of filtering `workshop_id IS NULL`. Do reference `Submission_ID` in both main query and subquery instead of using different column names. The amended query now correctly identifies authors whose submissions haven't been accepted by checking the absence of records in the acceptance table rather than relying on null workshop IDs."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM authors WHERE workshop_id IS NULL;",
            "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM Acceptance)"
        ],
        "rule_sql": []
    },
    "2674": {
        "db_id": "party_host",
        "question": "Show the most common nationality of hosts.",
        "ground_truth": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select `Nationality` instead of `nationality, COUNT(*) as count` and remove the count column from the output. Do change the aggregation to use `ORDER BY COUNT(*) DESC` instead of `ORDER BY count ASC` to find the most common nationality rather than the least common. Do reference table `HOST` instead of `hosts` to match the correct table name. Do maintain `GROUP BY Nationality` and `LIMIT 1` but with the corrected ordering direction to return the nationality with the highest count instead of the lowest."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nationality, COUNT(*) as count FROM hosts GROUP BY nationality ORDER BY count ASC LIMIT 1;",
            "SELECT Nationality FROM host GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1195": {
        "db_id": "apartment_rentals",
        "question": "Count the total number of apartment bookings.",
        "ground_truth": "SELECT count(*) FROM Apartment_Bookings",
        "amends": [
            "Do reference the `Apartment_Bookings` table instead of the `bookings` table. Do remove the `WHERE room_type = 'hotel'` filter instead of keeping it, as the correct query counts all records without filtering. The amended query now matches the RIGHT_SQL's behavior by counting all rows from the Apartment_Bookings table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM bookings WHERE room_type = 'hotel';",
            "SELECT COUNT(*) FROM Apartment_Bookings;"
        ],
        "rule_sql": []
    },
    "5671": {
        "db_id": "dorm_1",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "ground_truth": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
        "amends": [
            "Do select `dorm_name` instead of `name` and use `student_capacity > 300` instead of `capacity < 300`. Do reference table `dorm` instead of `dorms`. The amended query now correctly selects dorm names where student capacity exceeds 300 instead of selecting names where capacity is below 300, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM dorms WHERE capacity < 300;",
            "SELECT dorm_name FROM Dorm WHERE student_capacity > 300;"
        ],
        "rule_sql": []
    },
    "3768": {
        "db_id": "e_learning",
        "question": "How many courses are there in total?",
        "ground_truth": "SELECT count(*) FROM COURSES",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students;"
        ],
        "rule_sql": []
    },
    "5526": {
        "db_id": "products_gen_characteristics",
        "question": "Find the names of all the product characteristics.",
        "ground_truth": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
        "amends": [
            "Do select only `characteristic_name` instead of all columns with `*`. Do add `DISTINCT` instead of omitting it to eliminate duplicate characteristic names. Do change the table source to `CHARACTERISTICS` instead of `products` to query from the correct table containing characteristic data. The amended query now correctly retrieves unique characteristic names from the appropriate table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products;",
            "SELECT DISTINCT characteristic_name FROM Characteristics;"
        ],
        "rule_sql": []
    },
    "2083": {
        "db_id": "pilot_record",
        "question": "How many pilots are there?",
        "ground_truth": "SELECT count(*) FROM pilot",
        "amends": [
            "Do reference the `pilot` table instead of the `employees` table. Do filter by the table source instead of using a `WHERE job_title = 'pilot'` condition. The amended query now correctly counts records from the pilot table directly rather than filtering employees by job title, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE job_title = 'pilot';",
            "SELECT COUNT(*) FROM pilot;"
        ],
        "rule_sql": []
    },
    "6099": {
        "db_id": "customers_and_addresses",
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "ground_truth": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "amends": [
            "Do use `max(t2.active_to_date)` instead of `active_to_date` to get the maximum date value. Do join `customers AS t1` with `customer_contact_channels AS t2` on `t1.customer_id = t2.customer_id` instead of querying `contact_channels` alone. Do filter on `t1.customer_name = 'Tillman Ernser'` instead of `contact_name = 'Tillman Ernser'` to use the correct table relationship. Do remove `ORDER BY contact_date DESC LIMIT 1` instead of keeping it since the aggregate function handles the maximum value retrieval. The amended query now correctly retrieves the maximum active_to_date for the specified customer through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT active_to_date FROM contact_channels WHERE contact_name = 'Tillman Ernser' ORDER BY contact_date DESC LIMIT 1;",
            "SELECT MAX(t2.active_to_date) \nFROM customers AS t1 \nJOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id \nWHERE t1.customer_name = 'Tillman Ernser'"
        ],
        "rule_sql": []
    },
    "2575": {
        "db_id": "inn_1",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "ground_truth": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
        "amends": [
            "Do use column names `roomName` and `RoomId` instead of `room_name` and `room_id`. Do reference table `Rooms` instead of `rooms`. Do filter on `basePrice > 160` instead of `cost > 160`. Do filter on `maxOccupancy > 2` instead of `capacity <= 2`, changing both the column reference and the inequality direction. The amended query now correctly selects rooms with base price exceeding 160 and maximum occupancy greater than 2, matching the intended behavior.",
            "Do maintain the column selection order as `roomName, RoomId` instead of `RoomId, roomName` while keeping the same table source `Rooms` and identical WHERE filter conditions `basePrice > 160 AND maxOccupancy > 2`. The amended query now matches RIGHT_SQL's behavior with the correct column presentation order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT room_name, room_id FROM rooms WHERE cost > 160 AND capacity <= 2;",
            "SELECT RoomId, roomName FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;",
            "SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;"
        ],
        "rule_sql": []
    },
    "2487": {
        "db_id": "movie_1",
        "question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?",
        "ground_truth": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
        "amends": [
            "Do select `title` and `director` columns instead of `title` and `name` from different tables. Do join `Movie` table to itself as `T1` and `T2` instead of joining `movies` to `directors` table. Do use `ON T1.director = T2.director` instead of `ON m.director_id = d.id`. Do add filter `T1.title != T2.title` instead of incorrect `WHERE COUNT(m.director_id) > 1`. Do remove `GROUP BY` clause instead of keeping it. Do add `ORDER BY T1.director, T1.title` instead of omitting ordering. The amended query now correctly finds movies by the same director with different titles, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, d.name \nFROM movies m \nJOIN directors d ON m.director_id = d.id \nWHERE COUNT(m.director_id) > 1 \nGROUP BY d.name, m.title;",
            "SELECT T1.title, T1.director\nFROM Movie T1\nJOIN Movie T2 ON T1.director = T2.director\nWHERE T1.title != T2.title\nORDER BY T1.director, T1.title;"
        ],
        "rule_sql": []
    },
    "6152": {
        "db_id": "music_4",
        "question": "Give the distinct famous release dates for all artists.",
        "ground_truth": "SELECT distinct(Famous_Release_date) FROM artist",
        "amends": [
            "Do use `distinct(Famous_Release_date)` instead of `DISTINCT release_date` to select the correct column with proper function syntax. Do reference table `artist` instead of `artists` to use the correct table name. Do remove the `WHERE famous = 1` filter instead of keeping it since the right query does not include any filtering condition. The amended query now correctly selects the distinct famous release dates from the artist table without unnecessary filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT release_date FROM artists WHERE famous = 1;",
            "SELECT DISTINCT(Famous_Release_date) FROM artist;"
        ],
        "rule_sql": []
    },
    "1747": {
        "db_id": "gymnast",
        "question": "Return the names of the gymnasts.",
        "ground_truth": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "amends": [
            "Do select `T2.Name` from the `people` table instead of `gymnast_name` from the `gymnasts` table. Do join `gymnast AS T1` with `people AS T2` using the predicate `T1.Gymnast_ID = T2.People_ID` instead of querying a single table without any joins. The amended query now correctly retrieves gymnast names from the people table by establishing the proper relationship between gymnast and people entities."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gymnast_name FROM gymnasts;",
            "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"
        ],
        "rule_sql": []
    },
    "5004": {
        "db_id": "soccer_2",
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "ground_truth": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
        "amends": [
            "Do use `T1.state` instead of `c.state` for the column selection. Do reference `college AS T1` instead of `colleges c` as the main table source. Do join `tryout AS T2` instead of joining both `students` and `tryouts` tables. Do use `ON T1.cName = T2.cName` instead of `ON c.college_id = s.college_id` and `ON s.student_id = t.student_id` for the join condition. Do use `WHERE T2.pPos = 'striker'` instead of `WHERE t.position = 'striker'` for the filter condition. Do remove `DISTINCT` instead of keeping it since the join logic ensures uniqueness. The amended query now correctly matches the intended behavior by directly linking colleges to tryouts through the college name rather than through the student intermediary table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.state \nFROM colleges c \nJOIN students s ON c.college_id = s.college_id \nJOIN tryouts t ON s.student_id = t.student_id \nWHERE t.position = 'striker';",
            "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'"
        ],
        "rule_sql": []
    },
    "6531": {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that have scores higher than 90.",
        "ground_truth": "SELECT Name FROM WINE WHERE score  >  90",
        "amends": [
            "Do use table name `WINE` instead of `wines` and column name `Name` instead of `wine_name` to match the correct schema. Do remove `DISTINCT` instead of keeping it since duplicates are acceptable in the result set. Do maintain the same `WHERE score > 90` filter condition without changes. The amended query now correctly retrieves wine names from the WINE table where scores exceed 90, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT wine_name FROM wines WHERE score > 90;",
            "SELECT Name FROM wine WHERE Score > 90"
        ],
        "rule_sql": []
    },
    "4104": {
        "db_id": "company_employee",
        "question": "Show the headquarters that have at least two companies.",
        "ground_truth": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2",
        "amends": [
            "Do use table name `company` instead of `companies` and column name `Headquarters` instead of `headquarters` to match the correct schema. Do change the HAVING condition to `COUNT(*) >= 2` instead of `COUNT(*) = 1` to filter for groups with two or more records rather than exactly one record. The amended query now correctly identifies headquarters locations that appear in two or more company records, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*) = 1;",
            "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "130": {
        "db_id": "bike_1",
        "question": "How many stations are in Mountain View?",
        "ground_truth": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "amends": [
            "Do reference table `station` instead of `stations` in the FROM clause. Do use double quotes `\"Mountain View\"` instead of single quotes `'Mountain View'` for the string literal in the WHERE filter, though this may be database-specific formatting. The amended query now correctly counts records from the `station` table where city equals Mountain View, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stations WHERE city = 'Mountain View';",
            "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\";"
        ],
        "rule_sql": []
    },
    "1146": {
        "db_id": "climbing",
        "question": "Show the range that has the most number of mountains.",
        "ground_truth": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `mountain` instead of `mountains` and use column name `Range` instead of `range`. Do order by `COUNT(*) DESC` instead of `mountain_count ASC` to get the range with the highest count. Do remove the explicit column alias `mountain_count` and instead use the aggregate function directly in the ORDER BY clause. Do select only `Range` instead of both `range` and the count aggregate in the SELECT list. The amended query now correctly identifies the mountain range with the most peaks by counting occurrences per range and ordering descending by count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT range, COUNT(*) as mountain_count FROM mountains GROUP BY range ORDER BY mountain_count ASC LIMIT 1;",
            "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6770": {
        "db_id": "activity_1",
        "question": "Give me the number of faculty members who participate in an activity",
        "ground_truth": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "amends": [
            "Do use `count(DISTINCT FacID)` instead of `COUNT(*)` to count distinct faculty IDs rather than all rows. Do query from `Faculty_participates_in` table instead of `faculty` to access the participation relationship data. Do remove the `WHERE activity_id IS NOT NULL` filter instead of keeping it, as the distinct count inherently handles participation. The amended query now correctly counts unique faculty members who participate in activities, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM faculty WHERE activity_id IS NOT NULL",
            "SELECT COUNT(DISTINCT FacID) FROM Faculty_Participates_in"
        ],
        "rule_sql": []
    },
    "5488": {
        "db_id": "voter_2",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "ground_truth": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "amends": [
            "Do add `JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote` instead of querying only the `students` table. Do change the filter `vote_type = 'senator'` to the join condition `T1.StuID = Class_Senator_Vote` instead of keeping it as a WHERE clause. Do change the column reference `election_cycle` to `T2.Election_Cycle` instead of the original table's column. Do change the string literal `'spring'` to `\"Spring\"` instead of the lowercase version. Do use table alias `T1` for the `STUDENT` table instead of the original table name. The amended query now correctly joins the student and voting record tables to count senator votes from NYC during the spring election cycle."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE city_code = 'NYC' AND election_cycle = 'spring' AND vote_type = 'senator';",
            "SELECT COUNT(*) \nFROM Student AS T1\nJOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote\nWHERE T1.city_code = 'NYC' AND T2.Election_Cycle = 'Spring'"
        ],
        "rule_sql": []
    },
    "6802": {
        "db_id": "activity_1",
        "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
        "ground_truth": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "amends": [
            "Do use `INTERSECT` to find students who participate in both activities instead of `OR` which finds students in either activity. Do join `participates_in` table as `T1` instead of querying `activities` table directly. Do join `activity` table as `T2` on `T2.actid = T1.actid` instead of incorrect self-join condition `T2.actid = T2.actid`. Do filter by `activity_name = 'Canoeing'` in first branch and `activity_name = 'Kayaking'` in second branch instead of single `WHERE` clause with `OR`. Do select `T1.stuid` instead of `student_id`. The amended query now correctly identifies students who participate in both Canoeing and Kayaking activities using proper table relationships and intersection logic.",
            "Do use `T2.actid = T2.actid` instead of `T2.actid = T1.actid` in both JOIN conditions, which creates a self-join on the activity table rather than joining between tables. Do maintain the same SELECT list with `T1.stuid` and WHERE filters for `'Canoeing'` and `'Kayaking'` activities instead of changing them. Do preserve the INTERSECT operation structure instead of modifying the set operation. The amended query now correctly matches the RIGHT_SQL's behavior by fixing the join predicate to reference the same table alias on both sides."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM activities WHERE activity = 'Canoeing' OR activity = 'Kayaking';",
            "SELECT T1.stuid\nFROM Participates_in T1\nJOIN Activity T2 ON T2.actid = T1.actid\nWHERE T2.activity_name = 'Canoeing'\nINTERSECT\nSELECT T1.stuid\nFROM Participates_in T1\nJOIN Activity T2 ON T2.actid = T1.actid\nWHERE T2.activity_name = 'Kayaking'",
            "SELECT T1.stuid\nFROM Participates_in T1\nJOIN Activity T2 ON T2.actid = T2.actid\nWHERE T2.activity_name = 'Canoeing'\nINTERSECT\nSELECT T1.stuid\nFROM Participates_in T1\nJOIN Activity T2 ON T2.actid = T2.actid\nWHERE T2.activity_name = 'Kayaking'"
        ],
        "rule_sql": []
    },
    "5291": {
        "db_id": "manufactory_1",
        "question": "What are the names of companies with revenue between 100 and 150?",
        "ground_truth": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
        "amends": [
            "Do query the `manufacturers` table instead of the `companies` table. Do use the `BETWEEN` operator with `revenue BETWEEN 100 AND 150` instead of the `OR` condition with `revenue > 150 OR revenue < 100`, which incorrectly excluded the desired revenue range between 100 and 150. The amended query now correctly selects manufacturers with revenue values inclusively between 100 and 150, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM companies WHERE revenue > 150 OR revenue < 100;",
            "SELECT Name FROM Manufacturers WHERE Revenue BETWEEN 100 AND 150;"
        ],
        "rule_sql": []
    },
    "433": {
        "db_id": "flight_1",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "ground_truth": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "amends": [
            "Do select only `T2.name` instead of selecting both `name` and `distance`. Do use `JOIN` between `Certificate AS T1` and `Aircraft AS T2` on `T2.aid = T1.aid` instead of querying only the `aircrafts` table. Do move the `distance > 5000` filter to the `WHERE` clause instead of keeping it as a simple filter. Do add `GROUP BY T1.aid` instead of omitting grouping. Do change the certificate count condition to `ORDER BY count(*) >= 5` instead of using `certificate_count >= 5` directly in the `WHERE` clause. The amended query now correctly joins the Certificate and Aircraft tables, groups by aircraft ID, and uses an aggregate count to filter aircrafts with at least 5 certificates while maintaining the distance constraint, matching the RIGHT_SQL's behavior.",
            "Do move the condition `count(*) >= 5` to `ORDER BY` instead of `HAVING` to sort results by the count rather than filtering by it. Do remove the `GROUP BY T1.aid` clause instead of keeping it since the query no longer requires grouping when using `ORDER BY` instead of `HAVING`. The amended query now correctly sorts aircraft names by certificate count rather than filtering for those with at least 5 certificates, matching the RIGHT_SQL's behavior.",
            "Do move the condition `count(*) >= 5` to the `ORDER BY` clause instead of using it in the `HAVING` clause. Do remove the `HAVING` clause entirely instead of keeping it. Do add `ORDER BY` instead of omitting it. The amended query now correctly sorts the results by the count condition rather than filtering groups, matching the RIGHT_SQL's behavior.",
            "Do move the condition `count(*) >= 5` to the `ORDER BY` clause instead of keeping it in the `HAVING` clause, as the right SQL uses ordering rather than filtering for this aggregate expression. Do remove the `HAVING` clause entirely instead of retaining it, since the right query does not include any having conditions. The amended query now correctly matches the right SQL's behavior by ordering results based on the count rather than filtering them."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, distance FROM aircrafts WHERE distance > 5000 AND certificate_count >= 5",
            "SELECT T2.name\nFROM certificate AS T1\nJOIN aircraft AS T2 ON T2.aid = T1.aid\nWHERE T2.distance > 5000\nGROUP BY T1.aid\nHAVING COUNT(*) >= 5",
            "SELECT T2.name\nFROM certificate AS T1\nJOIN aircraft AS T2 ON T2.aid = T1.aid\nWHERE T2.distance > 5000\nGROUP BY T1.aid\nHAVING COUNT(*) >= 5",
            "SELECT T2.name\nFROM certificate AS T1\nJOIN aircraft AS T2 ON T2.aid = T1.aid\nWHERE T2.distance > 5000\nGROUP BY T1.aid\nHAVING COUNT(*) >= 5",
            "SELECT T2.name\nFROM certificate AS T1\nJOIN aircraft AS T2 ON T2.aid = T1.aid\nWHERE T2.distance > 5000\nGROUP BY T1.aid\nORDER BY count(*) >= 5"
        ],
        "rule_sql": []
    },
    "1359": {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "ground_truth": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "amends": [
            "Do use `dept_name` instead of `name` for the column name in the SELECT list. Do reference `department` instead of `departments` as the table name in both the main query and subquery. Do use lowercase `avg` instead of uppercase `AVG` for the aggregate function in the subquery. The amended query now correctly references the department table structure and uses consistent naming conventions throughout."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, budget FROM departments WHERE budget > (SELECT AVG(budget) FROM departments)",
            "SELECT dept_name, budget FROM department WHERE budget > (SELECT avg(budget) FROM department)"
        ],
        "rule_sql": []
    },
    "717": {
        "db_id": "customers_card_transactions",
        "question": "What is the customer id, first and last name with least number of accounts.",
        "ground_truth": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do select `T1.customer_id`, `T2.customer_first_name`, and `T2.customer_last_name` instead of `customer_id`, `first_name`, and `last_name`. Do join `Customers_cards AS T1` with `Customers AS T2` on `T1.customer_id = T2.customer_id` instead of joining `customers` with `accounts` on `customers.customer_id = accounts.customer_id`. Do group by only `T1.customer_id` instead of grouping by `customer_id`, `first_name`, and `last_name`. Do order by `count(*) ASC` instead of ordering by `num_accounts ASC`. Do remove the explicit count of `account_id` with alias `num_accounts` instead of keeping it. The amended query now correctly identifies the customer with the fewest cards by counting rows in the Customers_cards table rather than accounts, using proper table aliases and grouping only on the customer identifier."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, first_name, last_name, COUNT(account_id) as num_accounts \nFROM customers \nJOIN accounts ON customers.customer_id = accounts.customer_id \nGROUP BY customer_id, first_name, last_name \nORDER BY num_accounts ASC \nLIMIT 1;",
            "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name\nFROM Customers_Cards AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T1.customer_id\nORDER BY COUNT(*) ASC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "970": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?",
        "ground_truth": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
        "amends": [
            "Do select `name` and `trade_name` from `medicine` instead of `medicine_name` and `trade_name` from `medicines`. Do use `EXCEPT` set operation instead of `NOT IN` subquery. Do join `medicine` as `T1` with `medicine_enzyme_interaction` as `T2` on `T2.medicine_id = T1.id` instead of querying a single `medicines` table. Do then join with `enzyme` as `T3` on `T3.id = T2.enzyme_id` instead of referencing `enzyme_id` directly. Do filter for `T3.product = 'Protoporphyrinogen IX'` instead of `product = 'Heme'` in the subquery. The amended query now correctly identifies medicines that do not interact with enzymes producing Protoporphyrinogen IX rather than Heme, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medicine_name, trade_name FROM medicines WHERE enzyme_id NOT IN (SELECT enzyme_id FROM enzymes WHERE product = 'Heme')",
            "SELECT name, Trade_Name FROM medicine\nEXCEPT\nSELECT T1.name, T1.Trade_Name\nFROM medicine T1\nJOIN medicine_enzyme_interaction T2 ON T2.medicine_id = T1.id\nJOIN enzyme T3 ON T3.id = T2.enzyme_id\nWHERE T3.Product = 'Protoporphyrinogen IX'"
        ],
        "rule_sql": []
    },
    "6754": {
        "db_id": "activity_1",
        "question": "Which students are advised by Michael Goodrich? Give me their first and last names.",
        "ground_truth": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "amends": [
            "Do use `T2.fname` and `T2.lname` instead of `first_name` and `last_name` from the wrong table. Do join `Faculty AS T1` with `Student AS T2` on `T1.FacID = T2.advisor` instead of querying the `students` table directly. Do filter on `T1.fname = \"Michael\" AND T1.lname = \"Goodrich\"` instead of using `advisor = 'Michael Goodrich'` which incorrectly assumes the advisor name is stored in a single column. The amended query now correctly joins the Faculty and Student tables to find students advised by Michael Goodrich, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM students WHERE advisor = 'Michael Goodrich';",
            "SELECT T2.Fname, T2.LName FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.Advisor WHERE T1.Fname = 'Michael' AND T1.Lname = 'Goodrich'"
        ],
        "rule_sql": []
    },
    "1592": {
        "db_id": "customers_and_invoices",
        "question": "What is the id of the account with the most transactions?",
        "ground_truth": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference the correct table name `Financial_transactions` instead of the incorrect `transactions` table. The amended query now correctly identifies the source table while maintaining the same aggregation logic of grouping by `account_id`, ordering by the count of transactions in descending order, and limiting to the top result, which matches the intended behavior of the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT account_id FROM transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT account_id\nFROM Financial_Transactions\nGROUP BY account_id\nORDER BY COUNT(transaction_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "270": {
        "db_id": "musical",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "ground_truth": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "amends": [
            "Do use `INTERSECT` to find nominees who won both awards instead of incorrectly using `AND` conditions that can never be true simultaneously. Do query from a consolidated `musical` table instead of joining multiple tables through complex relationships. Do specify the award name directly in separate `SELECT` statements instead of filtering on the same column with conflicting values. Do reference `Nominee` and `Award` columns instead of the original schema's `name` and relationship-based joins. Do remove the `DISTINCT` keyword and category filter since the intersection operation inherently returns unique results and the award context is already established. The amended query now correctly identifies nominees who have received both Tony Award and Drama Desk Award in musical categories."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT n.name \nFROM nominees n\nJOIN nominations nom ON n.id = nom.nominee_id\nJOIN awards a ON nom.award_id = a.id\nWHERE a.name = 'Tony Award' \nAND a.name = 'Drama Desk Award'\nAND nom.category LIKE '%Musical%';",
            "SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'"
        ],
        "rule_sql": []
    },
    "4483": {
        "db_id": "network_2",
        "question": "What are the names of all of Alice's friends of friends?",
        "ground_truth": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "amends": [
            "Do use table aliases `T1`, `T2`, `T3`, and `T4` instead of `f1` and `f2`. Do reference columns `name` and `friend` instead of `user_name` and `friend_id`. Do add a chain of three joins connecting `PersonFriend` to `Person` and then through multiple `PersonFriend` relationships instead of a single self-join. Do include an additional filter `T4.name != 'Alice'` to exclude Alice herself from the results instead of omitting this exclusion. Do structure the query to find friends of friends through multiple relationship hops instead of direct friends only. The amended query now correctly implements the multi-hop friendship traversal and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT f2.friend_name \nFROM friends f1 \nJOIN friends f2 ON f1.friend_id = f2.user_id \nWHERE f1.user_name = 'Alice'",
            "SELECT DISTINCT T4.name\nFROM PersonFriend T1\nJOIN Person T2 ON T1.friend = T2.name\nJOIN PersonFriend T3 ON T2.name = T3.name\nJOIN Person T4 ON T3.friend = T4.name\nWHERE T1.name = 'Alice'\nAND T4.name != 'Alice';"
        ],
        "rule_sql": []
    },
    "3462": {
        "db_id": "hr_1",
        "question": "What are all the employee ids and the names of the countries in which they work?",
        "ground_truth": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "amends": [
            "Do add `departments AS T2` and `locations AS T3` as join sources instead of omitting them, and change the join path to `T1.department_id = T2.department_id` then `T2.location_id = T3.location_id` then `T3.country_id = T4.country_id` instead of directly joining `employees` to `countries` on `country_id`. Do use table aliases `T1`, `T2`, `T3`, and `T4` instead of no aliases, and reference columns with these aliases in the SELECT list as `T1.employee_id` and `T4.country_name` instead of unqualified `employee_id` and `country_name`. The amended query now correctly traverses the relational hierarchy from employees through departments and locations to countries to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT employee_id, country_name FROM employees JOIN countries ON employees.country_id = countries.id",
            "SELECT T1.EMPLOYEE_ID, T4.COUNTRY_NAME\nFROM employees AS T1\nJOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID\nJOIN locations AS T3 ON T2.LOCATION_ID = T3.LOCATION_ID\nJOIN countries AS T4 ON T3.COUNTRY_ID = T4.COUNTRY_ID"
        ],
        "rule_sql": []
    },
    "2669": {
        "db_id": "party_host",
        "question": "Compute the average number of hosts for parties.",
        "ground_truth": "SELECT avg(Number_of_hosts) FROM party",
        "amends": [
            "Do reference the correct column name `Number_of_hosts` instead of the incorrect `hosts` column. Do reference the correct table name `party` instead of the incorrect `parties` table. The amended query now correctly calculates the average number of hosts from the appropriate table and column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(hosts) FROM parties;",
            "SELECT AVG(Number_of_hosts) FROM party;"
        ],
        "rule_sql": []
    },
    "2912": {
        "db_id": "icfp_1",
        "question": "Retrieve the title of the paper that has the largest number of authors.",
        "ground_truth": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "amends": [
            "Do select `t2.title` from the `papers` table instead of `title` from the `papers` table alone. Do join `authorship AS t1` with `papers AS t2` on `t1.paperid = t2.paperid` instead of querying only the `papers` table. Do add a WHERE filter `t1.authorder = (SELECT max(authorder) FROM authorship)` to find the last author instead of ordering by a non-existent `author_count` column. Do remove the incorrect `ORDER BY author_count DESC LIMIT 1` clause instead of using it to attempt to find the last author. The amended query now correctly identifies papers where an author has the maximum authorder value, matching the intended behavior of finding the last author for each paper."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers ORDER BY author_count DESC LIMIT 1;",
            "SELECT t2.title \nFROM authorship AS t1 \nJOIN papers AS t2 ON t1.paperid = t2.paperid \nWHERE t1.authorder = (SELECT MAX(authorder) FROM authorship)"
        ],
        "rule_sql": []
    },
    "1386": {
        "db_id": "college_2",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "ground_truth": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "amends": [
            "Do select `T1.title` and `T3.name` instead of `course_name` and `instructor_name`. Do join `course AS T1` instead of querying `courses` directly. Do add `JOIN teaches AS T2 ON T1.course_id = T2.course_id` instead of omitting the teaches table. Do add `JOIN instructor AS T3 ON T2.id = T3.id` instead of omitting the instructor table. Do use `YEAR = 2008` instead of `year = 2008`. Do order by `T1.title` instead of `course_name`. The amended query now correctly joins the necessary tables to retrieve course titles and instructor names for the specified year."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name, instructor_name FROM courses WHERE year = 2008 ORDER BY course_name ASC;",
            "SELECT T1.title, T3.name\nFROM course AS T1\nJOIN teaches AS T2 ON T1.course_id = T2.course_id\nJOIN instructor AS T3 ON T2.ID = T3.ID\nJOIN section AS T4 ON T2.course_id = T4.course_id AND T2.sec_id = T4.sec_id AND T2.semester = T4.semester AND T2.year = T4.year\nWHERE T2.year = 2008\nORDER BY T1.title;"
        ],
        "rule_sql": []
    },
    "6962": {
        "db_id": "culture_company",
        "question": "How many book clubs are there?",
        "ground_truth": "SELECT count(*) FROM book_club",
        "amends": [
            "Do reference the `book_club` table instead of the `members` table in the FROM clause. Do count all rows from the correct table instead of counting from the wrong table. The amended query now correctly counts records from the book_club table instead of the members table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM members;",
            "SELECT COUNT(*) FROM book_club;"
        ],
        "rule_sql": []
    },
    "4525": {
        "db_id": "document_management",
        "question": "Find names of the document without any images.",
        "ground_truth": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
        "amends": [
            "Do select `document_name` instead of `name` and use `EXCEPT` to exclude documents with images instead of filtering for `image_id IS NULL`. Do add joins with `document_sections` on `document_code` and `document_sections_images` on `section_id` instead of omitting these table relationships entirely. Do remove the `WHERE` clause filter instead of keeping it, as the exclusion logic is now handled through the `EXCEPT` operation with joined tables. The amended query correctly identifies documents without any associated images through proper table relationships rather than relying on a potentially incorrect null check in the original table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM documents WHERE image_id IS NULL;",
            "SELECT document_name FROM Documents\nEXCEPT\nSELECT d.document_name\nFROM Documents d\nJOIN Document_Sections ds ON d.document_code = ds.document_code\nJOIN Document_Sections_Images dsi ON ds.section_id = dsi.section_id"
        ],
        "rule_sql": []
    },
    "1981": {
        "db_id": "phone_market",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "ground_truth": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "amends": [
            "Do reference the table as `phone` instead of `phones` and use the correct column name `Carrier` instead of `carrier` for the output. Do use the precise column name `Memory_in_G` instead of `memory` in the WHERE filter condition, maintaining the same comparison operator `> 32` instead of the incorrect column reference. The DISTINCT clause remains appropriately applied to eliminate duplicate carrier values from the results. The amended query now correctly filters phones with memory greater than 32GB and returns distinct carrier names, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT carrier FROM phones WHERE memory > 32;",
            "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32"
        ],
        "rule_sql": []
    },
    "2122": {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "ground_truth": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "amends": [
            "Do use `document_status_code` instead of `status` and `document_type_code` instead of `document_type` in the WHERE clause. Do add an INTERSECT operation instead of a single query. Do join with `Ref_Shipping_Agents` on `shipping_agent_code` instead of filtering directly on `shipping_agent`. Do filter on `shipping_agent_name` instead of `shipping_agent` in the joined table. The amended query now correctly uses code-based filtering and properly intersects document status/type criteria with shipping agent criteria through a table join, matching the RIGHT_SQL's behavior.",
            "Do use direct value comparison `document_status_code = \"done\"` instead of joining with `Ref_Document_Status` and filtering on `document_status_description`. Do use direct value comparison `document_type_code = \"Paper\"` instead of joining with `Ref_Document_Types` and filtering on `document_type_description`. Do combine the first two conditions with `AND` in a single `WHERE` clause instead of using separate `INTERSECT` operations. Do keep the `JOIN` with `Ref_Shipping_Agents` on `shipping_agent_code` and filter on `shipping_agent_name = \"USPS\"` as in the original, but use it with `INTERSECT` against the combined first query instead of as a separate intersection. Do remove the redundant table aliases `d`, `ds`, `dt`, and `sa` instead of keeping them. The amended query now correctly uses direct code comparisons where appropriate while maintaining the intersection logic for the shipping agent condition, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT document_id FROM documents WHERE status = 'done' AND document_type = 'Paper' AND shipping_agent = 'USPS';",
            "SELECT d.document_id\nFROM Documents d\nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code\nWHERE ds.document_status_description = 'done'\nINTERSECT\nSELECT d.document_id\nFROM Documents d\nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code\nWHERE dt.document_type_description = 'Paper'\nINTERSECT\nSELECT d.document_id\nFROM Documents d\nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code\nWHERE sa.shipping_agent_name = 'USPS'",
            "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\"\nINTERSECT\nSELECT d.document_id FROM Documents d JOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code WHERE sa.shipping_agent_name = \"USPS\""
        ],
        "rule_sql": []
    },
    "3261": {
        "db_id": "college_1",
        "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "ground_truth": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
        "amends": [
            "Do select `emp_fname` and `prof_office` instead of `last_name` and `office`. Do join `employee` table as `T2` with `professor` table as `T1` on `T1.emp_num = T2.emp_num` instead of selecting only from `professors` table. Do order by `emp_fname` instead of `last_name`. The amended query now correctly retrieves employee first names and professor offices by joining the related tables through the employee number relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, office FROM professors ORDER BY last_name ASC;",
            "SELECT T2.emp_fname, T1.prof_office \nFROM professor T1 \nJOIN employee T2 ON T1.emp_num = T2.emp_num \nORDER BY T2.emp_fname"
        ],
        "rule_sql": []
    },
    "2005": {
        "db_id": "gas_company",
        "question": "List all headquarters and the number of companies in each headquarter.",
        "ground_truth": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "amends": [
            "Do reference the `headquarters` column instead of `headquarter` to match the correct column name. Do use the correct table name `company` instead of `companies` in the FROM clause. Do group by `headquarters` instead of `company` to align with the selected column and ensure proper aggregation. The amended query now correctly counts records grouped by headquarters location."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT headquarter, COUNT(*) FROM companies GROUP BY company;",
            "SELECT Headquarters, COUNT(*) AS Number_of_Companies FROM company GROUP BY Headquarters;"
        ],
        "rule_sql": []
    },
    "4112": {
        "db_id": "film_rank",
        "question": "How many film are there?",
        "ground_truth": "SELECT count(*) FROM film",
        "amends": [
            "Do select from `film` table instead of `actors` table. Do count all rows from the correct table instead of counting from the wrong table. The amended query now correctly counts records from the film table as intended."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actors;",
            "SELECT COUNT(*) FROM film;"
        ],
        "rule_sql": []
    },
    "6960": {
        "db_id": "architecture",
        "question": "How many architects haven't built a mill before year 1850?",
        "ground_truth": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
        "amends": [
            "Do reference the `architect` table instead of `architects` and use `count(*)` instead of `COUNT(*)`. Do remove the `WHERE` clause filtering on `year_built < 1850 AND building_type = 'mill'` instead of keeping it. Do add a subquery with `NOT IN` condition instead of omitting it, using `SELECT architect_id FROM mill WHERE built_year < 1850` to filter architects not associated with mills built before 1850. The amended query now correctly counts architects who did not design mills constructed before 1850, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM architects WHERE year_built < 1850 AND building_type = 'mill';",
            "SELECT count(*) FROM architect WHERE id NOT IN (SELECT architect_id FROM mill WHERE built_year < 1850)"
        ],
        "rule_sql": []
    },
    "3107": {
        "db_id": "behavior_monitoring",
        "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "ground_truth": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `teacher_id` and `last_name` from the joined tables instead of selecting from a single table. Do use an explicit `JOIN` between `Detention` and `Teachers` tables with `ON T1.teacher_id = T2.teacher_id` instead of a correlated subquery in the ORDER BY clause. Do add a `WHERE` filter for `detention_type_code = \"AFTER\"` instead of filtering within a subquery. Do add `GROUP BY T1.teacher_id` to aggregate by teacher instead of omitting grouping. Do use `ORDER BY count(*) DESC` to sort by the actual count of detentions instead of ordering by a subquery result. The amended query now correctly joins the tables, filters for after-school detentions, groups by teacher, and orders by the count of detentions to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT teacher_id, last_name FROM teachers ORDER BY (SELECT COUNT(*) FROM detentions WHERE detentions.teacher_id = teachers.teacher_id AND detention_type = 'AFTER') DESC LIMIT 1;",
            "SELECT T.teacher_id, T.last_name\nFROM Detention D\nJOIN Teachers T ON D.teacher_id = T.teacher_id\nWHERE D.detention_type_code = 'AFTER'\nGROUP BY T.teacher_id, T.last_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1236": {
        "db_id": "apartment_rentals",
        "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
        "ground_truth": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "amends": [
            "Do add `Apartment_Bookings` and `Guests` tables instead of only `guests`. Do use explicit table aliases `T1` and `T2` instead of no aliases. Do join on `T1.guest_id = T2.guest_id` instead of no join condition. Do select `T2.guest_first_name` and `T2.guest_last_name` instead of `first_name` and `last_name`. Do filter on `T1.booking_status_code = \"Confirmed\"` instead of `status = 'Confirmed'`. The amended query now correctly joins booking and guest tables to filter confirmed bookings and retrieve corresponding guest names, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM guests WHERE status = 'Confirmed';",
            "SELECT T2.guest_first_name, T2.guest_last_name\nFROM Apartment_Bookings T1\nJOIN Guests T2 ON T1.guest_id = T2.guest_id\nWHERE T1.booking_status_code = 'Confirmed'"
        ],
        "rule_sql": []
    },
    "4603": {
        "db_id": "entertainment_awards",
        "question": "What is the location of the festival with the largest number of audience?",
        "ground_truth": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "amends": [
            "Do reference the `festival_detail` table instead of the `festivals` table. Do order by `Num_of_Audience` instead of `audience` to use the correct column name. The amended query now correctly retrieves the location with the highest audience count from the appropriate table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM festivals ORDER BY audience DESC LIMIT 1;",
            "SELECT Location FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "3673": {
        "db_id": "baseball_1",
        "question": "What is the total number of postseason games that team Boston Red Stockings participated in?",
        "ground_truth": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
        "amends": [
            "Do use a subquery with `UNION` instead of querying the `games` table directly. Do join `postseason` with `team` on `team_id_winner = team_id_br` instead of filtering by team name in the WHERE clause. Do also join on `team_id_loser = team_id_br` to capture both winning and losing scenarios instead of only checking one condition. Do filter by `T2.name = 'Boston Red Stockings'` in both union branches instead of using a single WHERE condition on the original table. Do remove the direct `season_type` filter since the query now specifically targets the `postseason` table instead of a generic games table. The amended query now correctly counts postseason appearances for the Boston Red Stockings regardless of whether they won or lost, matching the intended behavior.",
            "Do use `count(*)` instead of `SUM(wins + losses)` to count games. Do use `UNION` instead of `UNION ALL` to eliminate duplicate games. Do remove the explicit column selection and use `SELECT *` instead of specifying `wins, losses` in the subqueries. Do add table aliases `T1` and `T2` instead of omitting them. Do maintain the same join conditions on `team_id_winner` and `team_id_loser` with the correct team ID matching. The amended query now correctly counts all unique postseason games involving the Boston Red Stockings as either winner or loser, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE team = 'Boston Red Stockings' AND season_type = 'postseason';",
            "SELECT SUM(wins + losses) AS total_postseason_games\nFROM (\n    SELECT wins, losses\n    FROM postseason p\n    JOIN team t ON p.team_id_winner = t.team_id_br\n    WHERE t.name = 'Boston Red Stockings'\n    \n    UNION ALL\n    \n    SELECT wins, losses\n    FROM postseason p\n    JOIN team t ON p.team_id_loser = t.team_id_br\n    WHERE t.name = 'Boston Red Stockings'\n)",
            "SELECT COUNT(*) AS total_postseason_games\nFROM (\n    SELECT *\n    FROM postseason p\n    JOIN team t ON p.team_id_winner = t.team_id_br\n    WHERE t.name = 'Boston Red Stockings'\n    \n    UNION\n    \n    SELECT *\n    FROM postseason p\n    JOIN team t ON p.team_id_loser = t.team_id_br\n    WHERE t.name = 'Boston Red Stockings'\n) AS games;"
        ],
        "rule_sql": []
    },
    "3077": {
        "db_id": "loan_1",
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "ground_truth": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "amends": [
            "Do select `T1.bname` and `T1.city` with explicit table aliases instead of `name` and `city` without table qualification. Do join `bank AS T1` with `loan AS T2` on `T1.branch_id = T2.branch_id` instead of querying only `bank_branches` without any join. Do filter on `T2.loan_type = 'Business'` with proper table reference instead of filtering on `loan_type` from a single table. Do use uppercase 'Business' instead of lowercase 'business' for the loan type comparison. The amended query now correctly joins the bank and loan tables to filter business loans from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, city FROM bank_branches WHERE loan_type = 'business';",
            "SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.loan_type = 'Business'"
        ],
        "rule_sql": []
    },
    "2346": {
        "db_id": "csu_1",
        "question": "Which year has the most degrees conferred?",
        "ground_truth": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "amends": [
            "Do select `YEAR` instead of `year, COUNT(*) as degree_count`, do use `sum(degrees)` in the ORDER BY instead of `degree_count`, do order `DESC` instead of `ASC`, and do remove the alias `degree_count` instead of keeping it. The amended query now correctly returns the year with the highest total degrees by summing the degrees column rather than counting rows, and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as degree_count FROM degrees GROUP BY year ORDER BY degree_count ASC LIMIT 1;",
            "SELECT Year FROM degrees GROUP BY Year ORDER BY SUM(Degrees) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3112": {
        "db_id": "behavior_monitoring",
        "question": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "ground_truth": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"",
        "amends": [
            "Do select `T1.date_of_notes` instead of `assessment_date`. Do join `Assessment_Notes AS T1` with `Students AS T2` instead of querying only the `students` table. Do use the join condition `T1.student_id = T2.student_id` to properly relate assessment notes to students. Do reference `T2.first_name` in the WHERE clause instead of directly filtering the students table. Do use double quotes around 'Fanny' instead of single quotes for string comparison. The amended query now correctly retrieves assessment note dates by joining through the proper student relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT assessment_date FROM students WHERE first_name = 'Fanny';",
            "SELECT T1.date_of_notes \nFROM Assessment_Notes AS T1 \nJOIN Students AS T2 ON T1.student_id = T2.student_id \nWHERE T2.first_name = \"Fanny\""
        ],
        "rule_sql": []
    },
    "4079": {
        "db_id": "student_1",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "ground_truth": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "amends": [
            "Do select `DISTINCT T1.lastname` instead of `last_name` and use table alias `T1` instead of bare column reference. Do join `teachers AS T2` instead of omitting the join and reference `teacher` directly. Do use join condition `ON T1.classroom = T2.classroom` instead of no join condition. Do keep `T1.grade = 3` filter but move it to WHERE clause. Do change teacher filter to `T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"` instead of single `teacher != 'COVIN JEROME'` condition, properly separating first and last name comparisons. The amended query now correctly joins student and teacher data through classroom relationship and properly filters on separate name fields."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name FROM students WHERE grade = 3 AND teacher != 'COVIN JEROME';",
            "SELECT DISTINCT T1.LastName \nFROM list AS T1\nJOIN teachers AS T2 ON T1.Classroom = T2.Classroom\nWHERE T1.Grade = 3\nAND (T2.FirstName != 'COVIN' OR T2.LastName != 'JEROME')"
        ],
        "rule_sql": []
    },
    "2932": {
        "db_id": "sakila_1",
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "ground_truth": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "amends": [
            "Do reference the `address` table instead of the `addresses` table in the FROM clause. Do use consistent spacing around the equals operator in the WHERE clause instead of inconsistent spacing. The amended query now correctly queries from the proper table name and maintains consistent formatting while preserving the same logical behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone, postal_code FROM addresses WHERE address = '1031 Daugavpils Parkway';",
            "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway';"
        ],
        "rule_sql": []
    },
    "6744": {
        "db_id": "activity_1",
        "question": "How many faculty members do we have for each rank and gender?",
        "ground_truth": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "amends": [
            "Do include `sex` in the SELECT list instead of omitting it, and do add `sex` to the GROUP BY clause instead of grouping only by `rank`. Do use the correct column name `sex` instead of `gender` and the correct table name `Faculty` instead of `faculty` to match the schema. The amended query now correctly groups by both rank and sex to show counts for each combination, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rank, gender, COUNT(*) FROM faculty GROUP BY rank;",
            "SELECT rank, sex, COUNT(*) as count FROM Faculty GROUP BY rank, sex;"
        ],
        "rule_sql": []
    },
    "2611": {
        "db_id": "inn_1",
        "question": "What are the number of rooms for each bed type?",
        "ground_truth": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
        "amends": [
            "Do reference the `bedType` column instead of `bed_type` and use `Rooms` table instead of `rooms`. Do group by `bedType` instead of `room_id` to correctly count occurrences by bed type rather than by individual room identifiers."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bed_type, COUNT(*) FROM rooms GROUP BY room_id;",
            "SELECT bedType, COUNT(*) AS number_of_rooms FROM Rooms GROUP BY bedType;"
        ],
        "rule_sql": []
    },
    "425": {
        "db_id": "flight_1",
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "ground_truth": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "amends": [
            "Do specify `T1.name` with table alias instead of just `name` without qualification. Do add joins to `Certificate AS T2` and `Aircraft AS T3` instead of querying only the `employees` table. Do use `JOIN` with `ON T1.eid = T2.eid` and `ON T3.aid = T2.aid` instead of no joins. Do filter on `T3.name = \"Boeing 737-800\"` instead of filtering directly on `certificate = 'Boeing 737-800'` which incorrectly assumes the certificate column exists in the employees table. The amended query now correctly joins through the certificate and aircraft tables to find employees certified for the specific aircraft type, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM employees WHERE certificate = 'Boeing 737-800';",
            "SELECT T1.name \nFROM employee AS T1\nJOIN certificate AS T2 ON T1.eid = T2.eid\nJOIN aircraft AS T3 ON T3.aid = T2.aid\nWHERE T3.name = 'Boeing 737-800'"
        ],
        "rule_sql": []
    },
    "253": {
        "db_id": "musical",
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "ground_truth": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
        "amends": [
            "Do reference `T1.Name` instead of `a.name` in the SELECT list. Do use table alias `T1` for the actor table instead of `a` and `T2` for the musical table instead of `m`. Do join on `T1.Musical_ID = T2.Musical_ID` instead of `a.musical_id = m.id`. Do filter on `T2.Name = \"The Phantom of the Opera\"` instead of `m.title = 'The Phantom of the Opera'`. The amended query now correctly matches the intended behavior by using the proper column names and join conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.name FROM actors a JOIN musicals m ON a.musical_id = m.id WHERE m.title = 'The Phantom of the Opera';",
            "SELECT T1.Name \nFROM actor T1 \nJOIN musical T2 ON T1.Musical_ID = T2.Musical_ID \nWHERE T2.Name = \"The Phantom of the Opera\""
        ],
        "rule_sql": []
    },
    "6345": {
        "db_id": "e_government",
        "question": "Return the name of the organization which has the most contact individuals.",
        "ground_truth": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do join `organization_contact_individuals AS t2` on `t1.organization_id = t2.organization_id` instead of omitting the join table entirely. Do add `GROUP BY t1.organization_name` instead of ordering by a non-aggregated column. Do use `count(*)` in the ORDER BY instead of `COUNT(contact_individuals)` which references an undefined column. Do specify `t1.organization_name` in the SELECT instead of just `organization_name` for clarity. The amended query now correctly counts contact individuals per organization and returns the organization with the most contacts."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization_name FROM organizations ORDER BY COUNT(contact_individuals) DESC LIMIT 1;",
            "SELECT t1.organization_name\nFROM Organizations AS t1\nJOIN Organization_Contact_Individuals AS t2 ON t1.organization_id = t2.organization_id\nGROUP BY t1.organization_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5101": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the store names of drama workshop groups?",
        "ground_truth": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "amends": [
            "Do select `Store_Name` from the `Drama_Workshop_Groups` table instead of selecting `store_name` from the `workshops` table with a `WHERE category = 'drama'` filter. The amended query now correctly retrieves store names from the appropriate table dedicated to drama workshop groups, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT store_name FROM workshops WHERE category = 'drama'",
            "SELECT Store_Name FROM Drama_Workshop_Groups;"
        ],
        "rule_sql": []
    },
    "2314": {
        "db_id": "perpetrator",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "ground_truth": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
        "amends": [
            "Do select `T1.Height` instead of `height` and remove the `COUNT(injured)` aggregation instead of including it. Do join `people AS T1` with `perpetrator AS T2` on `T1.People_ID = T2.People_ID` instead of querying only the `perpetrators` table without any join. Do remove the `WHERE` clause entirely instead of having any filters. Do remove the `GROUP BY` and aggregation instead of grouping by height and counting injuries. Do order by `T2.Injured DESC` instead of ordering by the non-existent `injury_count` alias. The amended query now correctly retrieves heights from the people table joined with perpetrator data and orders by injury status rather than attempting to count injuries without proper grouping."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT height, COUNT(injured) as injury_count FROM perpetrators ORDER BY injury_count DESC;",
            "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC"
        ],
        "rule_sql": []
    },
    "5664": {
        "db_id": "customers_and_products_contacts",
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "ground_truth": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "amends": [
            "Do add table joins with `customers AS T2` and `addresses AS T3` instead of querying only `customer_address_history`. Do use explicit column references like `T2.customer_name` and `T3.city` instead of direct column names. Do include join conditions `ON T1.customer_id = T2.customer_id` and `ON T1.address_id = T3.address_id` instead of missing relationship definitions. Do remove `customer_address` from the SELECT list instead of including it. The amended query now correctly joins related tables to retrieve customer and address information with proper relationships established."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name, customer_address, city, date_from, date_to FROM customer_address_history",
            "SELECT T2.customer_name, T3.city, T1.date_from, T1.date_to\nFROM Customer_Address_History AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nJOIN Addresses AS T3 ON T1.address_id = T3.address_id"
        ],
        "rule_sql": []
    },
    "3939": {
        "db_id": "hospital_1",
        "question": "Find the number of distinct room types available.",
        "ground_truth": "SELECT count(DISTINCT roomtype) FROM room",
        "amends": [
            "Do use `count(DISTINCT roomtype)` instead of `COUNT(room_type)` to count distinct values rather than all non-null values. Do reference table `room` instead of `rooms` to use the correct table name. Do add the `DISTINCT` keyword instead of omitting it to ensure unique room types are counted. The amended query now correctly counts distinct room types from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(room_type) FROM rooms;",
            "SELECT COUNT(DISTINCT RoomType) FROM Room;"
        ],
        "rule_sql": []
    },
    "1860": {
        "db_id": "wrestler",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "ground_truth": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "amends": [
            "Do select `T1.Time` from the `elimination` table instead of `elimination_time` from the `wrestlers` table. Do join `wrestler` table as `T2` on `T1.Wrestler_ID = T2.Wrestler_ID` instead of querying only the `wrestlers` table. Do order by `T2.Days_held` instead of `days_held` to properly reference the joined table's column. The amended query now correctly retrieves elimination time by joining the elimination and wrestler tables and ordering by days held, matching the intended behavior.",
            "Do add `LIMIT 1` to return only the top result instead of omitting it, which ensures only the single record with the highest `Days_held` value is returned rather than all records sorted in descending order. The amended query now matches RIGHT_SQL's behavior by correctly limiting the output to one row."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT elimination_time FROM wrestlers ORDER BY days_held DESC LIMIT 1;",
            "SELECT T1.Time \nFROM Elimination T1\nJOIN wrestler T2 ON T1.Wrestler_ID = T2.Wrestler_ID\nORDER BY T2.Days_held DESC;",
            "SELECT T1.Time \nFROM Elimination T1\nJOIN wrestler T2 ON T1.Wrestler_ID = T2.Wrestler_ID\nORDER BY T2.Days_held DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "6026": {
        "db_id": "game_1",
        "question": "What are the ids of all female students who play football?",
        "ground_truth": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "amends": [
            "Do select `StuID` instead of `id` and use `INTERSECT` instead of `AND` to find students who meet both conditions. Do reference table `Student` instead of `students` and use column `sex` with value `'F'` instead of `gender` with value `'male'`. Do add a second query selecting from `Sportsinfo` table with condition `sportname = \"Football\"` instead of filtering directly on `sport = 'football'` in the WHERE clause. Do use proper table and column names that match the schema structure, ensuring the query correctly identifies female students who play football through set intersection rather than single-table filtering. The amended query now correctly matches RIGHT_SQL's behavior using INTERSECT to combine results from two separate tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM students WHERE gender = 'male' AND sport = 'football';",
            "SELECT StuID FROM Student WHERE Sex = 'F'\nINTERSECT\nSELECT StuID FROM SportsInfo WHERE SportName = 'Football'"
        ],
        "rule_sql": []
    },
    "5569": {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
        "ground_truth": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "amends": [
            "Do select `product_name` instead of `name` and add joins to `product_characteristics`, `CHARACTERISTICS`, and `ref_colors` tables instead of querying only the `products` table. Do join `products AS t1` with `product_characteristics AS t2` on `t1.product_id = t2.product_id` instead of missing this relationship entirely. Do join `t2` with `CHARACTERISTICS AS t3` on `t2.characteristic_id = t3.characteristic_id` instead of having no characteristic table linkage. Do join `t1` with `ref_colors AS t4` on `t1.color_code = t4.color_code` instead of directly filtering on color values. Do filter on `t4.color_description = \"red\"` instead of `color = 'red'` and on `t3.characteristic_name = \"fast\"` instead of `characteristic = 'fast'`, moving from direct column comparisons to proper reference table lookups. The amended query now correctly joins multiple reference tables to resolve color and characteristic values through proper foreign key relationships instead of relying on denormalized data in a single table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE color = 'red' AND characteristic = 'fast';",
            "SELECT t1.product_name\nFROM Products AS t1\nJOIN Product_Characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN Characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nJOIN Ref_Colors AS t4 ON t1.color_code = t4.color_code\nWHERE t4.color_description = 'red' AND t3.characteristic_name = 'fast'"
        ],
        "rule_sql": []
    },
    "3546": {
        "db_id": "music_1",
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "ground_truth": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "amends": [
            "Do query the `files` table instead of the `songs` table. Do use a `LIKE` operator with pattern `\"4:%\"` for duration matching instead of exact equality `= 240`. Do count records from the correct table with the appropriate duration filter pattern instead of using incorrect table and exact numeric comparison."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM songs WHERE duration = 240;",
            "SELECT COUNT(*) FROM files WHERE duration LIKE '4:%'"
        ],
        "rule_sql": []
    },
    "3702": {
        "db_id": "baseball_1",
        "question": "Find the team that attended the least number of home games in 1980.",
        "ground_truth": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
        "amends": [
            "Do select `T2.name` instead of `team_name` and `COUNT(*) as home_games`. Do use `FROM home_game AS T1 JOIN team AS T2` instead of `FROM games`. Do apply join condition `ON T1.team_id = T2.team_id_br` instead of no join. Do filter with `T1.year = 1980` instead of `year = 1980`. Do remove `GROUP BY team_name` instead of keeping it. Do order by `T1.attendance ASC` instead of `home_games DESC`. Do keep `LIMIT 1` as is. The amended query now correctly retrieves the team with the lowest attendance in 1980 instead of counting home games.",
            "Do remove `T1.attendance` from the SELECT list instead of including it, as the RIGHT_SQL only selects `T2.name`. Do keep the same FROM clause with `home_game AS T1` and `team AS T2` joined on `T1.team_id = T2.team_id_br`. Do maintain the WHERE filter on `T1.year = 1980` and the ORDER BY on `T1.attendance ASC` with LIMIT 1. The amended query now correctly returns only team names instead of both names and attendance values, matching RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, COUNT(*) as home_games \nFROM games \nWHERE year = 1980 \nGROUP BY team_name \nORDER BY home_games DESC \nLIMIT 1;",
            "SELECT T2.name, T1.attendance\nFROM home_game AS T1\nJOIN team AS T2 ON T1.team_id = T2.team_id_br\nWHERE T1.year = 1980\nORDER BY T1.attendance ASC\nLIMIT 1;",
            "SELECT T2.name\nFROM home_game AS T1\nJOIN team AS T2 ON T1.team_id = T2.team_id_br\nWHERE T1.year = 1980\nORDER BY T1.attendance ASC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "6498": {
        "db_id": "scientist_1",
        "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
        "ground_truth": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
        "amends": [
            "Do use `count(*)` instead of `COUNT(s.id)` to count all rows rather than non-null scientist IDs. Do reference `projects AS T1` instead of `p` and join `assignedto AS T2` instead of `scientists s` to connect through the assignment bridge table. Do join on `T1.code = T2.project` instead of `p.id = s.project_id` to use the correct project identifier and relationship. Do keep the `T1.hours > 300` filter in the WHERE clause instead of changing its position. Do maintain `GROUP BY T1.name` instead of altering the grouping. The amended query now correctly counts assignments through the proper relationship table and matches the RIGHT_SQL's behavior.",
            "Do use `count(*)` without an alias instead of `COUNT(*) AS NumberOfScientists` in the SELECT list. Do place `T1.name` after the aggregate instead of `T1.Name` first in the SELECT list. Do use lowercase `name` instead of capitalized `Name` for the column reference. The amended query now correctly returns the count of scientists per project with hours greater than 300, matching the right SQL's behavior.",
            "Do place `count(*)` before `T1.name` in the SELECT list instead of after it, though this is purely cosmetic ordering. Do maintain the same FROM clause with `projects AS T1` JOIN `assignedto AS T2` on `T1.code = T2.project`, the same WHERE filter `T1.hours > 300`, and the same GROUP BY `T1.name`. The amended query now matches RIGHT_SQL's behavior with identical logic and results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, COUNT(s.id) as scientist_count\nFROM projects p\nLEFT JOIN scientists s ON p.id = s.project_id\nWHERE p.hours > 300\nGROUP BY p.name;",
            "SELECT T1.Name, COUNT(*) AS NumberOfScientists\nFROM Projects AS T1\nJOIN AssignedTo AS T2 ON T1.Code = T2.Project\nWHERE T1.Hours > 300\nGROUP BY T1.Name",
            "SELECT T1.name, count(*)\nFROM projects AS T1\nJOIN assignedto AS T2 ON T1.code = T2.project\nWHERE T1.hours > 300\nGROUP BY T1.name",
            "SELECT count(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name"
        ],
        "rule_sql": []
    },
    "925": {
        "db_id": "insurance_fnol",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "ground_truth": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "amends": [
            "Do use `customer_name` column instead of `name` column in the WHERE clause. Do use `LIKE \"%Diana%\"` pattern matching instead of exact equality `= 'Diana'` to find partial matches containing the name Diana. The amended query now correctly searches for customers with names containing Diana anywhere in the string rather than requiring an exact match."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM customers WHERE name = 'Diana';",
            "SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%'"
        ],
        "rule_sql": []
    },
    "2258": {
        "db_id": "machine_repair",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "ground_truth": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "amends": [
            "Do select `T2.Name` and `COUNT(*)` instead of `technician_name` and `COUNT(machine_id)`. Do use `FROM repair_assignment AS T1 JOIN technician AS T2` instead of `FROM technicians`. Do join on `T1.technician_ID = T2.technician_ID` instead of missing the join condition. Do group by `T2.Name` instead of `technician_id`. The amended query now correctly joins the assignment and technician tables to count repairs per technician name rather than incorrectly counting machines from a single table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT technician_name, COUNT(machine_id) AS machine_count FROM technicians GROUP BY technician_id",
            "SELECT T2.Name, COUNT(*) \nFROM repair_assignment AS T1 \nJOIN technician AS T2 ON T1.technician_id = T2.technician_id \nGROUP BY T2.Name"
        ],
        "rule_sql": []
    },
    "3143": {
        "db_id": "assets_maintenance",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "ground_truth": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.part_id` and `T1.part_name` instead of `part_id`, `part_name`, and `COUNT(skill_id) as skill_count`. Do join `Part_Faults AS T2` on `T1.part_id = T2.part_id` instead of joining `part_skills` on `parts.part_id = part_skills.part_id`. Do add a second join to `Skills_Required_To_Fix AS T3` on `T2.part_fault_id = T3.part_fault_id` instead of omitting it. Do group by only `T1.part_id` instead of grouping by both `part_id` and `part_name`. Do order by `count(*) DESC` instead of `skill_count ASC`. Do remove the explicit column alias `skill_count` instead of keeping it. The amended query now correctly identifies parts with the most required repair skills by counting fault-related skill requirements instead of direct part-skill associations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT part_id, part_name, COUNT(skill_id) as skill_count\nFROM parts\nJOIN part_skills ON parts.part_id = part_skills.part_id\nGROUP BY part_id, part_name\nORDER BY skill_count ASC\nLIMIT 1;",
            "SELECT T1.part_id, T1.part_name\nFROM Parts AS T1\nJOIN Part_Faults AS T2 ON T1.part_id = T2.part_id\nJOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id\nGROUP BY T1.part_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3050": {
        "db_id": "loan_1",
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "ground_truth": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "amends": [
            "Do use column names `cust_name`, `acc_type`, and `acc_bal` instead of `name`, `account_type`, and `account_balance`. Do reference table `customer` instead of `customers`. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, account_type, account_balance FROM customers ORDER BY credit_score DESC LIMIT 1;",
            "SELECT cust_name, acc_type, acc_bal FROM customer WHERE credit_score = (SELECT MAX(credit_score) FROM customer)"
        ],
        "rule_sql": []
    },
    "3573": {
        "db_id": "music_1",
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "ground_truth": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "amends": [
            "Do join `artist AS T1` with `song AS T2` on `T1.artist_name = T2.artist_name` instead of querying only the `artists` table. Do filter on `T2.song_name LIKE \"%love%\"` instead of filtering on `song_title` which doesn't exist in the artists table. Do reference columns with table aliases `T1.artist_name` and `T1.country` instead of unqualified column names. The amended query now correctly joins the artist and song tables to find artists whose songs contain \"love\" in the song name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name, country FROM artists WHERE song_title LIKE '%love%';",
            "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE '%love%'"
        ],
        "rule_sql": []
    },
    "533": {
        "db_id": "allergy_1",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "ground_truth": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "amends": [
            "Do change the table reference from `students` to `Student` instead of keeping the original table name. Do replace the direct filter on `allergy` with a subquery that checks `StuID NOT IN` instead of using simple column comparisons. Do add a join between `Has_allergy` and `Allergy_Type` tables on `Allergy` instead of omitting these necessary table relationships. Do use proper join conditions `ON T1.Allergy = T2.Allergy` instead of missing the join predicate entirely. Do filter on `allergytype` values \"food\" and \"animal\" in the subquery instead of filtering directly on the `allergy` column in the main query. The amended query now correctly excludes students with food or animal allergies by using the proper relational structure through the allergy tracking tables instead of relying on potentially incorrect direct column filters."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE age > 18 AND (allergy != 'food' OR allergy != 'animal')",
            "SELECT COUNT(*) \nFROM Student \nWHERE Age > 18 \nAND StuID NOT IN (\n    SELECT DISTINCT ha.StuID \n    FROM Has_Allergy ha \n    JOIN Allergy_Type at ON ha.Allergy = at.Allergy \n    WHERE at.AllergyType IN ('food', 'animal')\n)"
        ],
        "rule_sql": []
    },
    "3020": {
        "db_id": "loan_1",
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "ground_truth": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "amends": [
            "Do select `cust_name` instead of `name` and order by `acc_bal` instead of `account_balance`. Do use table `customer` instead of `customers`. The amended query now correctly references the intended column names and table structure to match the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers ORDER BY account_balance DESC;",
            "SELECT cust_name FROM customer ORDER BY acc_bal ASC;"
        ],
        "rule_sql": []
    },
    "5945": {
        "db_id": "cre_Theme_park",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "ground_truth": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do query the `Tourist_Attractions` table instead of the `tourist_transportation` table. Do select the `How_to_Get_There` column instead of `transportation_method`. Do use `COUNT(*)` directly in the `ORDER BY` clause instead of aliasing it as `count` and ordering by that alias. Do remove the explicit column alias `as count` instead of keeping it. The amended query now correctly retrieves the most common transportation method from the Tourist_Attractions table rather than from a different transportation-specific table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT transportation_method, COUNT(*) as count FROM tourist_transportation GROUP BY transportation_method ORDER BY count DESC LIMIT 1;",
            "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3368": {
        "db_id": "sports_competition",
        "question": "What is the most common competition type?",
        "ground_truth": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `competition` instead of `competitions` to match the correct schema. Do place the aggregate function `COUNT(*)` directly in the `ORDER BY` clause instead of selecting it as a column with an alias. Do remove the explicit column selection of `count` from the `SELECT` list instead of including it, since only `Competition_type` is needed. Do use proper casing `Competition_type` instead of `competition_type` for the column name to match the correct schema. The amended query now correctly returns only the competition type with the highest count without unnecessary columns in the result set."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT competition_type, COUNT(*) as count FROM competitions GROUP BY competition_type ORDER BY count DESC LIMIT 1;",
            "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "3611": {
        "db_id": "music_1",
        "question": "Find the country of origin for the artist who made the least number of songs?",
        "ground_truth": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "amends": [
            "Do join `artist AS T1` with `song AS T2` on `T1.artist_name = T2.artist_name` instead of querying only `artists` without any join. Do group by `T2.artist_name` instead of ordering by a count without grouping. Do order by `count(*)` instead of ordering by `COUNT(songs.id)` without proper grouping. Do select `T1.country` instead of selecting just `country` without table qualification. The amended query now correctly counts songs per artist by country and returns the country with the fewest songs per artist, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM artists ORDER BY COUNT(songs.id) ASC LIMIT 1;",
            "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY COUNT(*) LIMIT 1"
        ],
        "rule_sql": []
    },
    "6145": {
        "db_id": "music_4",
        "question": "List the age of all music artists.",
        "ground_truth": "SELECT Age FROM artist",
        "amends": [
            "Do select `Age` from the `artist` table instead of selecting `name` from the `music_artists` table. Do use the correct table name `artist` instead of the incorrect `music_artists` table. The amended query now correctly retrieves age information from the appropriate artist table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM music_artists;",
            "SELECT Age FROM artist;"
        ],
        "rule_sql": []
    },
    "6437": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project detail for the project with document \"King Book\"?",
        "ground_truth": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
        "amends": [
            "Do specify `T1.project_details` in the SELECT list instead of using `*` to select all columns. Do join `Documents AS T2` instead of querying only the `projects` table. Do use `JOIN` with the predicate `T1.project_id = T2.project_id` instead of missing the join condition entirely. Do filter on `T2.document_name = \"King Book\"` instead of incorrectly filtering on `document = 'King Book'` from the wrong table. Do use proper table aliases `T1` and `T2` instead of no aliases. The amended query now correctly retrieves project details by joining with the Documents table and filtering on the document name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM projects WHERE document = 'King Book';",
            "SELECT T1.Project_Details \nFROM Projects AS T1\nJOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID\nWHERE T2.Document_Name = 'King Book'"
        ],
        "rule_sql": []
    },
    "598": {
        "db_id": "store_1",
        "question": "What is the the phone number of Nancy Edwards?",
        "ground_truth": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';"
        ],
        "rule_sql": []
    },
    "2800": {
        "db_id": "election",
        "question": "Which committees have delegates from both democratic party and liberal party?",
        "ground_truth": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "amends": [
            "Do use `INTERSECT` to find committees belonging to both parties instead of incorrectly using `AND` with the same column. Do join `election` and `party` tables on `Party = Party_ID` instead of querying a single `committees` table. Do reference `T1.Committee` instead of `committee_name` as the output column. Do filter for `\"Democratic\"` in one branch and `\"Liberal\"` in another branch instead of trying to filter for both values simultaneously in a single WHERE clause. Do use proper table aliases `T1` and `T2` instead of no table references. The amended query now correctly identifies committees that belong to both Democratic and Liberal parties by intersecting two separate queries, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT committee_name FROM committees WHERE party = 'Democratic' AND party = 'Liberal'",
            "SELECT T1.Committee\nFROM election T1\nJOIN party T2 ON T1.Party = T2.Party_ID\nWHERE T2.Party = 'Democratic'\nINTERSECT\nSELECT T1.Committee\nFROM election T1\nJOIN party T2 ON T1.Party = T2.Party_ID\nWHERE T2.Party = 'Liberal'"
        ],
        "rule_sql": []
    },
    "668": {
        "db_id": "customers_card_transactions",
        "question": "Count the number of accounts.",
        "ground_truth": "SELECT count(*) FROM Accounts",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers;"
        ],
        "rule_sql": []
    },
    "6": {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "ground_truth": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "amends": [
            "Do select `creation` instead of `creation_year` and use table alias `T1` instead of `d`. Do join `management AS T2` instead of `managers m` and use join condition `T1.department_id = T2.department_id` instead of `d.manager_id = m.id`. Do join `head AS T3` instead of `secretaries s` and use join condition `T2.head_id = T3.head_id` instead of `m.secretary_id = s.id`. Do filter on `T3.born_state = 'Alabama'` instead of `s.birth_state = 'Alabama'`. The amended query now correctly retrieves creation years from departments linked through management to heads born in Alabama."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT d.creation_year \nFROM departments d \nJOIN managers m ON d.manager_id = m.id \nJOIN secretaries s ON m.secretary_id = s.id \nWHERE s.birth_state = 'Alabama';",
            "SELECT DISTINCT T1.Creation\nFROM department AS T1\nJOIN management AS T2 ON T1.Department_ID = T2.department_ID\nJOIN head AS T3 ON T2.head_ID = T3.head_ID\nWHERE T3.born_state = 'Alabama';"
        ],
        "rule_sql": []
    },
    "4273": {
        "db_id": "club_1",
        "question": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?",
        "ground_truth": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "amends": [
            "Do use table aliases `t3.fname` and `t3.lname` instead of direct column names `first_name` and `last_name`. Do join three tables `club AS t1`, `member_of_club AS t2`, and `student AS t3` instead of querying a single `members` table. Do use `INNER JOIN` with `t1.clubid = t2.clubid` and `t2.stuid = t3.stuid` instead of no joins. Do filter on `t1.clubname = \"Hopkins Student Enterprises\"` instead of `club_name = 'Hopkins Student Enterprises'`. Do filter on `t3.sex = \"M\"` instead of `gender = 'female'`. The amended query now correctly joins the necessary tables and filters for male students in the specified club, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM members WHERE gender = 'female' AND club_name = 'Hopkins Student Enterprises';",
            "SELECT t3.Fname, t3.LName \nFROM club AS t1 \nINNER JOIN member_of_club AS t2 ON t1.ClubID = t2.ClubID \nINNER JOIN student AS t3 ON t2.StuID = t3.StuID \nWHERE t1.ClubName = 'Hopkins Student Enterprises' \nAND t3.Sex = 'M'"
        ],
        "rule_sql": []
    },
    "4578": {
        "db_id": "company_office",
        "question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?",
        "ground_truth": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"",
        "amends": [
            "Do use `INTERSECT` to find common industries instead of incorrectly using `AND` with mutually exclusive conditions. Do query for `Headquarters = \"USA\"` in one branch and `Headquarters = \"China\"` in another branch instead of trying to match both values in a single row. Do reference the correct column name `Headquarters` instead of `headquarter` and table name `Companies` instead of `companies`. Do use double quotes for string literals instead of single quotes. The amended query now correctly finds industries that have headquarters in both USA and China by intersecting two separate result sets, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT industry FROM companies WHERE headquarter = 'USA' AND headquarter = 'China'",
            "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\""
        ],
        "rule_sql": []
    },
    "2698": {
        "db_id": "storm_record",
        "question": "How many storms had death records?",
        "ground_truth": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "amends": [
            "Do reference table `storm` instead of `storms` and use column `Number_Deaths` instead of `death` while maintaining the same aggregate count logic and filter condition for values greater than zero, with the amended query now correctly matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM storms WHERE death > 0;",
            "SELECT COUNT(*) FROM storm WHERE Number_Deaths > 0"
        ],
        "rule_sql": []
    },
    "6069": {
        "db_id": "customers_and_addresses",
        "question": "What are all the payment methods?",
        "ground_truth": "SELECT DISTINCT payment_method FROM customers",
        "amends": [
            "Do select `payment_method` instead of `*` and use `DISTINCT` instead of omitting it. Do query from `customers` table instead of `payment_methods` table. Do remove the `WHERE method_name = 'Credit Card'` filter instead of keeping it. The amended query now correctly retrieves distinct payment methods from the customers table as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM payment_methods WHERE method_name = 'Credit Card';",
            "SELECT DISTINCT payment_method FROM Customers;"
        ],
        "rule_sql": []
    },
    "676": {
        "db_id": "customers_card_transactions",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "ground_truth": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "amends": [
            "Do add `Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id` instead of querying only the `customers` table. Do use `T2.customer_first_name` and `T2.customer_last_name` instead of `first_name` and `last_name` to reference the correct table columns. Do use double quotes around string values instead of single quotes for consistency. The amended query now correctly joins the Accounts and Customers tables to count records based on the specified customer name criteria, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE first_name = 'Art' AND last_name = 'Turcotte';",
            "SELECT COUNT(*) \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nWHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""
        ],
        "rule_sql": []
    },
    "1190": {
        "db_id": "election_representative",
        "question": "What states have at least two representatives?",
        "ground_truth": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "amends": [
            "Do use the table name `representative` instead of `representatives` and the column name `State` instead of `state`. Do change the HAVING condition to `COUNT(*) >= 2` instead of `COUNT(*) > 1` to include states with exactly 2 representatives rather than excluding them. The amended query now correctly identifies states with two or more representatives and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state FROM representatives GROUP BY state HAVING COUNT(*) > 1",
            "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2;"
        ],
        "rule_sql": []
    },
    "3887": {
        "db_id": "insurance_policies",
        "question": "Find the policy type the most customers choose.",
        "ground_truth": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `Policy_Type_Code` instead of `policy_type` and `COUNT(*)` without alias instead of aliasing as `customer_count`. Do use `Customer_Policies` table instead of `customers` table. Do order by `count(*) DESC` instead of `customer_count ASC` while keeping the same `GROUP BY` clause structure and `LIMIT 1`.",
            "Do remove `COUNT(*)` from the SELECT list instead of including it, as the query only needs to return the Policy_Type_Code with the highest count rather than displaying the count value itself. Do keep the `GROUP BY Policy_Type_Code` and `ORDER BY count(*) DESC LIMIT 1` unchanged, as these correctly identify the policy type with the maximum occurrence count. The amended query now matches RIGHT_SQL's behavior by returning only the policy type code with the highest frequency."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT policy_type, COUNT(*) as customer_count FROM customers GROUP BY policy_type ORDER BY customer_count ASC LIMIT 1;",
            "SELECT Policy_Type_Code, COUNT(*) \nFROM Customer_Policies \nGROUP BY Policy_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1",
            "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "3557": {
        "db_id": "music_1",
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "ground_truth": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "amends": [
            "Do join `artist AS T1` with `song AS T2` on `T1.artist_name = T2.artist_name` instead of querying only the `artists` table. Do reference `T1.country` instead of just `country`. Do filter on `T1.gender = \"Female\"` instead of `gender = 'female'` with different case and quotes. Do filter on `T2.languages = \"bangla\"` instead of `language = 'Bangla'` with different column name, case, and quotes. The amended query now correctly joins artist and song tables to find countries where female artists have songs in the Bangla language, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM artists WHERE gender = 'female' AND language = 'Bangla';",
            "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\""
        ],
        "rule_sql": []
    },
    "3080": {
        "db_id": "loan_1",
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "ground_truth": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "amends": [
            "Do reference the `amount` column from the `loan` table instead of the `loan_amount` column from the `loans` table. Do join the `bank` table with the `loan` table on `branch_id` instead of querying a single `loans` table. Do filter on `state` from the `bank` table instead of `branch_state` from the `loans` table. Do use proper table aliases `T1` and `T2` instead of no aliases. The amended query now correctly aggregates loan amounts from New York branches by properly joining the branch and loan tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(loan_amount) FROM loans WHERE branch_state = 'New York'",
            "SELECT SUM(T2.amount) AS total_loan_amount\nFROM bank T1\nJOIN loan T2 ON T1.branch_ID = T2.branch_ID\nWHERE T1.state = 'New York'"
        ],
        "rule_sql": []
    },
    "5211": {
        "db_id": "music_2",
        "question": "What are the instruments are used in the song \"Le Pop\"?",
        "ground_truth": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "amends": [
            "Do add `JOIN instruments AS T1` on `T1.songid = T2.songid` instead of querying only the `songs` table without any join. Do reference `instruments` table instead of omitting it entirely. Do use proper table aliases `T1` and `T2` instead of accessing columns without table qualification. Do specify the join condition `T1.songid = T2.songid` instead of having no relationship between tables. The amended query now correctly joins the instruments and songs tables to retrieve instruments associated with the specified song title, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT instrument FROM songs WHERE title = 'Le Pop';",
            "SELECT T1.Instrument \nFROM Instruments AS T1 \nJOIN Songs AS T2 ON T1.SongId = T2.SongId \nWHERE T2.Title = 'Le Pop'"
        ],
        "rule_sql": []
    },
    "2434": {
        "db_id": "movie_1",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "ground_truth": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "amends": [
            "Do reference the table as `Movie` instead of `movies` to match the correct schema. Do use the exact case `Steven Spielberg` instead of `steven spielberg` for proper string matching. The amended query now correctly filters for movies directed by Steven Spielberg using the proper table name and case-sensitive director name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE director = 'steven spielberg';",
            "SELECT title FROM Movie WHERE director = 'Steven Spielberg';"
        ],
        "rule_sql": []
    },
    "1121": {
        "db_id": "climbing",
        "question": "Give the names of mountains in alphabetical order.",
        "ground_truth": "SELECT Name FROM mountain ORDER BY Name ASC",
        "amends": [
            "Do reference the table as `mountain` instead of `mountains` and use column name `Name` instead of `name`. Do use `ASC` ordering instead of `DESC` ordering. The amended query now correctly references the singular table name with proper column casing and ascending sort order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM mountains ORDER BY name DESC;",
            "SELECT Name FROM mountain ORDER BY Name ASC;"
        ],
        "rule_sql": []
    },
    "4284": {
        "db_id": "club_1",
        "question": "What is the location of the club named \"Tennis Club\"?",
        "ground_truth": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"",
        "amends": [
            "Do select `clublocation` instead of `name` and use table `club` instead of `clubs`. Do use filter `clubname = \"Tennis Club\"` instead of `location = 'Tennis Club'` with proper double quotes instead of single quotes. The amended query now correctly retrieves the club location from the club table based on the club name matching \"Tennis Club\"."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM clubs WHERE location = 'Tennis Club';",
            "SELECT ClubLocation FROM Club WHERE ClubName = \"Tennis Club\";"
        ],
        "rule_sql": []
    },
    "2066": {
        "db_id": "party_people",
        "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?",
        "ground_truth": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
        "amends": [
            "Do use `member_name` instead of `name` as the column selection. Do query from `member` table instead of `members` table. Do use `INTERSECT` with two separate queries instead of the impossible `WHERE party_id = 3 AND party_id = 1` condition. Do structure as two separate `SELECT` statements with `WHERE party_id = 3` and `WHERE party_id = 1` respectively, combined with `INTERSECT` to find members belonging to both parties, instead of the contradictory single filter that could never return results. The amended query now correctly identifies members who belong to both party 3 and party 1 using set intersection logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM members WHERE party_id = 3 AND party_id = 1;",
            "SELECT Member_Name FROM member WHERE Party_ID = '3' INTERSECT SELECT Member_Name FROM member WHERE Party_ID = '1'"
        ],
        "rule_sql": []
    },
    "5112": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List all product names in ascending order of price.",
        "ground_truth": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "amends": [
            "Do reference the column `Product_Name` instead of `product_name` to match the correct case sensitivity. Do reference the table `Products` instead of `products` to maintain proper table naming conventions. Do order by `Product_Price` instead of `price` to use the correct column name for sorting. Do use `ASC` ordering instead of `DESC` to sort in ascending rather than descending order. The amended query now correctly selects product names sorted by product price in ascending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products ORDER BY price DESC;",
            "SELECT Product_Name FROM Products ORDER BY Product_Price ASC;"
        ],
        "rule_sql": []
    },
    "809": {
        "db_id": "chinook_1",
        "question": "List the names of all music genres.",
        "ground_truth": "SELECT Name FROM GENRE",
        "amends": [
            "Do reference the `Name` column from the `GENRE` table instead of the `genre_name` column from the `artists` table. Do use the correct table name `GENRE` instead of the incorrect table `artists`. The amended query now correctly retrieves genre names from the appropriate table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre_name FROM artists;",
            "SELECT Name FROM Genre;"
        ],
        "rule_sql": []
    },
    "6129": {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "ground_truth": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `t2.product_details` instead of `product_name` and `COUNT(*) as order_count`. Do use `FROM order_items AS t1 JOIN products AS t2` instead of `FROM orders` with a missing join. Do add the join condition `ON t1.product_id = t2.product_id` instead of omitting it. Do group by `t1.product_id` instead of `product_name`. Do order by `count(*) DESC` instead of `order_count ASC`. The amended query now correctly joins the order_items and products tables to retrieve product details for the most frequently ordered product.",
            "Do include only `t2.product_details` in the SELECT list instead of both `t2.product_details` and `COUNT(*) as order_count`. Do keep the `JOIN` on `t1.product_id = t2.product_id` unchanged. Do maintain the `GROUP BY t1.product_id` grouping. Do preserve the `ORDER BY count(*) DESC` ordering. Do retain the `LIMIT 1` restriction. The amended query now correctly returns only the product details of the most frequently ordered product instead of including an unnecessary count column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, COUNT(*) as order_count FROM orders GROUP BY product_name ORDER BY order_count ASC LIMIT 1;",
            "SELECT t2.product_details, COUNT(*) as order_count\nFROM Order_Items AS t1\nJOIN Products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT t2.product_details \nFROM Order_Items AS t1 \nJOIN Products AS t2 ON t1.product_id = t2.product_id \nGROUP BY t1.product_id \nORDER BY COUNT(*) DESC \nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2870": {
        "db_id": "icfp_1",
        "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "ground_truth": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "amends": [
            "Do select `DISTINCT t3.name` instead of `institution` from a single table. Do join three tables `authors AS t1`, `authorship AS t2`, and `inst AS t3` instead of querying only `people`. Do use `JOIN` with `t1.authid = t2.authid` and `t2.instid = t3.instid` instead of no joins. Do filter with `t1.fname = \"Matthias\" AND t1.lname = \"Blume\"` instead of `name = 'Matthias Blume'`. The amended query now correctly retrieves distinct institution names by joining across the author, authorship, and institution tables with proper filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT institution FROM people WHERE name = 'Matthias Blume';",
            "SELECT DISTINCT t3.name\nFROM Authors AS t1\nJOIN Authorship AS t2 ON t1.authID = t2.authID\nJOIN Inst AS t3 ON t2.instID = t3.instID\nWHERE t1.fname = 'Matthias' AND t1.lname = 'Blume'"
        ],
        "rule_sql": []
    },
    "4732": {
        "db_id": "department_store",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "ground_truth": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "amends": [
            "Do join `product_suppliers AS T1` with `products AS T2` on `T1.product_id = T2.product_id` instead of querying `products` alone. Do select `T2.product_type_code` instead of `product_type`, `T2.product_name` instead of `name`, and `T2.product_price` instead of `price`. Do filter on `T1.supplier_id = 3` instead of `supplier_id = 3` to correctly reference the supplier relationship through the join. The amended query now properly links products with their suppliers and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_type, name, price FROM products WHERE supplier_id = 3",
            "SELECT T2.product_type_code, T2.product_name, T2.product_price \nFROM product_suppliers AS T1 \nJOIN products AS T2 ON T1.product_id = T2.product_id \nWHERE T1.supplier_id = 3"
        ],
        "rule_sql": []
    },
    "4152": {
        "db_id": "film_rank",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "ground_truth": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` with a subquery. Do reference table `film` instead of `studios` and `films`. Do select column `Studio` instead of `studio_name`. Do remove the `DISTINCT` keyword since `EXCEPT` inherently returns distinct values. Do use double quotes around string literal `\"Walter Hill\"` instead of single quotes. Do reference column `Director` instead of `director`. The amended query now correctly uses set operations to find studios that haven't worked with Walter Hill, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT studio_name \nFROM studios \nWHERE studio_id NOT IN (\n    SELECT studio_id \n    FROM films \n    WHERE director = 'Walter Hill'\n)",
            "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\""
        ],
        "rule_sql": []
    },
    "1816": {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "ground_truth": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "amends": [
            "Do add `T2.balance` and `T3.balance` to the SELECT list instead of only `name` and `checking_balance`. Do change the FROM clause to join `accounts AS T1` with `checking AS T2` on `T1.custid = T2.custid` and join with `savings AS T3` on `T1.custid = T3.custid` instead of selecting only from the `accounts` table. Do remove the incorrect column reference `checking_balance` instead of keeping it, as this column doesn't exist in the schema. The amended query now correctly joins three tables to retrieve both checking and savings balances along with customer names, matching the RIGHT_SQL's behavior.",
            "Do list columns as `T2.balance`, `T3.balance`, `T1.name` instead of `T1.name`, `T2.balance AS checking_balance`, `T3.balance AS saving_balance`. Do remove the aliases `checking_balance` and `saving_balance` instead of keeping them. The amended query now matches RIGHT_SQL's behavior.",
            "Do reorder the SELECT list to `T2.balance, T3.balance, T1.name` instead of `T1.name, T2.balance, T3.balance` while maintaining the same FROM clause structure with `JOIN checking AS T2 ON T1.custid = T2.custid` and `JOIN savings AS T3 ON T1.custid = T3.custid`. The amended query now matches RIGHT_SQL's behavior with identical logic but different column ordering in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, checking_balance FROM accounts;",
            "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS saving_balance\nFROM accounts AS T1\nJOIN checking AS T2 ON T1.custid = T2.custid\nJOIN savings AS T3 ON T1.custid = T3.custid",
            "SELECT T1.name, T2.balance, T3.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid JOIN SAVINGS AS T3 ON T1.custid = T3.custid",
            "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid"
        ],
        "rule_sql": []
    },
    "3703": {
        "db_id": "baseball_1",
        "question": "List the names of states that have more than 2 parks.",
        "ground_truth": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "amends": [
            "Do reference the `state` column instead of `state_name` to match the correct table schema. Do reference the `park` table instead of `parks` to use the correct table name. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency with the right SQL, though this is a cosmetic difference. The amended query now correctly identifies states with more than 2 parks using the proper table and column names.",
            "Do remove `count(*) as park_count` from the SELECT list instead of including it, as the RIGHT_SQL only needs to return the state column for groups meeting the HAVING condition. The GROUP BY clause on `state` and HAVING filter `count(*) > 2` remain unchanged, correctly identifying states with more than two parks. The amended query now matches RIGHT_SQL's behavior by returning only state names without the aggregate count in the result set."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state_name FROM parks GROUP BY state_name HAVING COUNT(*) > 2",
            "SELECT state, count(*) as park_count FROM park GROUP BY state HAVING count(*) > 2;",
            "SELECT state FROM park GROUP BY state HAVING count(*) > 2"
        ],
        "rule_sql": []
    },
    "6901": {
        "db_id": "tracking_orders",
        "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "ground_truth": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "amends": [
            "Do join `customers AS T1` with `orders AS T2` on `T1.customer_id = T2.customer_id` instead of querying `orders` table alone. Do select `T2.order_id` and `T2.order_status` instead of `id` and `status`. Do filter on `T1.customer_name = \"Jeramie\"` instead of filtering directly on `orders.customer_name`. The amended query now correctly joins customer and order tables to retrieve order information based on customer name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, status FROM orders WHERE customer_name = 'Jeramie';",
            "SELECT T2.order_id, T2.order_status \nFROM Customers AS T1 \nJOIN Orders AS T2 ON T1.customer_id = T2.customer_id \nWHERE T1.customer_name = 'Jeramie'"
        ],
        "rule_sql": []
    },
    "2701": {
        "db_id": "storm_record",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "ground_truth": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "amends": [
            "Do select `dates_active` and `number_deaths` instead of `date_active` and `number_of_deaths`. Do reference table `storm` instead of `storms`. Do use filter `number_deaths >= 1` instead of `number_of_deaths = 0`. The amended query now correctly selects active dates and filters for storms with at least one death, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, date_active, number_of_deaths FROM storms WHERE number_of_deaths = 0;",
            "SELECT Name, Dates_active, Number_Deaths FROM storm WHERE Number_Deaths >= 1;"
        ],
        "rule_sql": []
    },
    "907": {
        "db_id": "insurance_fnol",
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "ground_truth": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "amends": [
            "Do join `customers AS t1` and `customers_policies AS t2` on `t1.customer_id = t2.customer_id` instead of querying only the `policies` table without proper joins. Do filter on `t1.customer_name = 'Dayana Robel'` instead of filtering directly on a customer_name field in the policies table. Do count records from the joined relationship instead of counting from a single table without the necessary customer-policy association. The amended query now correctly retrieves policy counts by establishing the proper relationship between customers and their policies through the join."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM policies WHERE customer_name = 'Dayana Robel';",
            "SELECT COUNT(*) AS policy_count\nFROM Customers AS t1\nJOIN Customers_Policies AS t2 ON t1.Customer_ID = t2.Customer_ID\nWHERE t1.Customer_name = 'Dayana Robel'"
        ],
        "rule_sql": []
    },
    "6408": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "ground_truth": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "amends": [
            "Do select `count(*)` and `project_id` instead of `product_id` and `COUNT(*)`. Do use `project_id` in the GROUP BY clause instead of `type_code`. Do filter on `document_type_code = \"BK\"` instead of `type_code = 'BK'`. Do reference the table as `Documents` instead of `documents`. The amended query now correctly groups by project_id and counts documents per project for book-type documents, matching the intended behavior.",
            "Do place `project_id` after the aggregate function in the SELECT list instead of before it, maintaining the same column order as in the GROUP BY clause. Do use double quotes `\"BK\"` for the string literal instead of single quotes `'BK'` to match the required string formatting. The amended query now correctly returns the count of documents grouped by project_id for document type \"BK\", matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_id, COUNT(*) FROM documents WHERE type_code = 'BK' GROUP BY type_code;",
            "SELECT project_id, COUNT(*) FROM Documents WHERE document_type_code = 'BK' GROUP BY project_id;",
            "SELECT COUNT(*), project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id"
        ],
        "rule_sql": []
    },
    "1969": {
        "db_id": "products_for_hire",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "ground_truth": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "amends": [
            "Do select `gender_mf` instead of `gender` in the SELECT list. Do filter on `good_or_bad_customer = 'good'` instead of `customer_status = 'good'` in the WHERE clause. Do order by `last_name` instead of `first_name` in the ORDER BY clause. The amended query now correctly references the appropriate column names and sorting criteria to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, gender FROM customers WHERE customer_status = 'good' ORDER BY first_name;",
            "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 'good' ORDER BY last_name;"
        ],
        "rule_sql": []
    },
    "102": {
        "db_id": "student_assessment",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "ground_truth": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "amends": [
            "Do use table `student_course_registrations` instead of `registrations` and do use table `student_course_attendance` instead of `attendance` in both UNION branches, while maintaining the same `student_id = 121` filter condition and UNION operation structure. The amended query now correctly references the appropriate student-course relationship tables instead of the generic tables, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_id FROM registrations WHERE student_id = 121 UNION SELECT course_id FROM attendance WHERE student_id = 121",
            "SELECT course_id FROM Student_Course_Registrations WHERE student_id = 121\nUNION\nSELECT course_id FROM Student_Course_Attendance WHERE student_id = 121"
        ],
        "rule_sql": []
    },
    "2696": {
        "db_id": "storm_record",
        "question": "Show names for all regions except for Denmark.",
        "ground_truth": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "amends": [
            "Do select `region_name` instead of `name` and use table `region` instead of `regions`. Do filter on `region_name != 'Denmark'` instead of `country != 'Denmark'` to correctly reference the column being selected rather than a non-existent country column. The amended query now matches RIGHT_SQL's behavior by properly selecting from the correct table with appropriate column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM regions WHERE country != 'Denmark';",
            "SELECT region_name FROM region WHERE region_name != 'Denmark';"
        ],
        "rule_sql": []
    },
    "1754": {
        "db_id": "gymnast",
        "question": "What is the total point count of the youngest gymnast?",
        "ground_truth": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "amends": [
            "Do select `T1.Total_Points` instead of aggregating `SUM(points)` without grouping. Do join `gymnast AS T1` with `people AS T2` on `T1.Gymnast_ID = T2.People_ID` instead of querying only the `gymnasts` table. Do remove the `WHERE` filter comparing `age` to a subquery minimum instead of keeping it. Do add `ORDER BY T2.Age ASC` instead of omitting ordering. Do add `LIMIT 1` instead of omitting row limiting. The amended query now correctly retrieves the youngest gymnast's total points by joining tables and ordering by age rather than using an incorrect subquery comparison that would return all gymnasts of minimum age."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(points) FROM gymnasts WHERE age = (SELECT MIN(age) FROM gymnasts);",
            "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
        ],
        "rule_sql": []
    },
    "5276": {
        "db_id": "manufactory_1",
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "ground_truth": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
        "amends": [
            "Do use column names `name` and `headquarter` instead of `manufacturer_name` and `headquarters` to match the correct schema. The amended query now correctly selects the intended columns while maintaining the same ORDER BY clause on revenue, ensuring the result set matches the expected behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT manufacturer_name, headquarters FROM manufacturers ORDER BY revenue DESC;",
            "SELECT name, headquarter FROM Manufacturers ORDER BY Revenue DESC;"
        ],
        "rule_sql": []
    },
    "3347": {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "ground_truth": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "amends": [
            "Do use column `Silver` instead of `gold_medals` in both aggregate functions. Do use table `club_rank` instead of `clubs` as the data source. Do remove the aliases `max_silver` and `min_silver` instead of keeping them, making the result columns unnamed. The amended query now correctly calculates maximum and minimum silver medal counts from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(gold_medals) as max_silver, MIN(gold_medals) as min_silver FROM clubs;",
            "SELECT MAX(Silver), MIN(Silver) FROM club_rank"
        ],
        "rule_sql": []
    },
    "3903": {
        "db_id": "hospital_1",
        "question": "Find the name and position of the head of the department with the least employees.",
        "ground_truth": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "amends": [
            "Do select `T2.name` and `T2.position` instead of `name` and `position`. Do use `FROM department AS T1 JOIN physician AS T2` instead of `FROM employees` with a subquery. Do join on `T1.head = T2.EmployeeID` instead of filtering with `department_id = (subquery)`. Do add `GROUP BY departmentID` and `ORDER BY count(departmentID)` instead of using a subquery with `GROUP BY department_id ORDER BY COUNT(*)`. Do remove the `WHERE position = 'Head'` filter instead of keeping it, as the join condition `T1.head = T2.EmployeeID` already handles this logic. The amended query now correctly identifies department heads by joining department and physician tables rather than using a problematic subquery approach.",
            "Do remove the `JOIN Affiliated_With AS T3` table and its join condition `T1.DepartmentID = T3.Department` instead of including it. Do change the GROUP BY clause to use `departmentID` instead of `T1.DepartmentID`. Do modify the ORDER BY clause to use `count(departmentID)` instead of `COUNT(T3.Physician)`. Do remove the `ASC` keyword from ORDER BY instead of keeping it. The amended query now correctly finds the department head with the simplest count logic instead of incorrectly joining additional tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, position FROM employees WHERE department_id = (SELECT department_id FROM employees GROUP BY department_id ORDER BY COUNT(*) ASC LIMIT 1) AND position = 'Head'",
            "SELECT T2.Name, T2.Position\nFROM Department AS T1\nJOIN Physician AS T2 ON T1.Head = T2.EmployeeID\nJOIN Affiliated_With AS T3 ON T1.DepartmentID = T3.Department\nGROUP BY T1.DepartmentID\nORDER BY COUNT(T3.Physician) ASC\nLIMIT 1;",
            "SELECT T2.Name, T2.Position\nFROM Department AS T1\nJOIN Physician AS T2 ON T1.Head = T2.EmployeeID\nGROUP BY T1.DepartmentID\nORDER BY COUNT(T1.DepartmentID)\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4681": {
        "db_id": "college_3",
        "question": "Which building does the instructor who teaches the most number of courses live in?",
        "ground_truth": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T2.Building` from the `FACULTY` table instead of `building` from the `instructors` table. Do join `COURSE AS T1` with `FACULTY AS T2` on `T1.Instructor = T2.FacID` instead of querying a single table. Do group by `T1.Instructor` instead of omitting grouping. Do count all rows with `count(*)` instead of counting `courses`. Do order by the count in descending order and limit to one result, maintaining the same final structure. The amended query now correctly identifies the building with the most courses by joining course and faculty data and counting courses per instructor."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building FROM instructors ORDER BY COUNT(courses) DESC LIMIT 1;",
            "SELECT T2.Building \nFROM COURSE AS T1 \nJOIN FACULTY AS T2 ON T1.Instructor = T2.FacID \nGROUP BY T1.Instructor \nORDER BY COUNT(*) DESC \nLIMIT 1"
        ],
        "rule_sql": []
    },
    "6005": {
        "db_id": "game_1",
        "question": "Show last names for all student who are on scholarship.",
        "ground_truth": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "amends": [
            "Do select `T2.Lname` from the `Student` table instead of `first_name` from `students`. Do join `Sportsinfo AS T1` with `Student AS T2` on `T1.StuID = T2.StuID` instead of querying a single table. Do filter on `T1.onscholarship = 'Y'` instead of `scholarship = 'yes'` to use the correct column name and value format. The amended query now correctly retrieves last names of students on scholarship by joining the appropriate tables with the proper join condition and filtering criteria."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE scholarship = 'yes';",
            "SELECT T2.LName FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.OnScholarship = 'Y'"
        ],
        "rule_sql": []
    },
    "2142": {
        "db_id": "local_govt_in_alabama",
        "question": "How many participants belong to the type 'Organizer'?",
        "ground_truth": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'",
        "amends": [
            "Do use `participant_type_code` instead of `type` for the column name in the WHERE filter. Do use the literal value `'Organizer'` instead of `'Participant'` for the filter condition. The amended query now correctly counts organizers rather than participants by using the appropriate column and value that matches the intended logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM participants WHERE type = 'Participant';",
            "SELECT COUNT(*) FROM Participants WHERE participant_type_code = 'Organizer';"
        ],
        "rule_sql": []
    },
    "950": {
        "db_id": "medicine_enzyme_interaction",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "ground_truth": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "amends": [
            "Do select `T1.id` and `T1.Name` instead of `m.medicine_id` and `m.name`. Do use `JOIN` with `medicine_enzyme_interaction AS T2` on `T2.medicine_id = T1.id` instead of a subquery with `interactions` table. Do group by `T1.id` instead of grouping within a subquery. Do use `HAVING count(*) >= 2` instead of `HAVING COUNT(DISTINCT enzyme_id) > 1` to count total interactions rather than distinct enzymes. Do reference table `medicine AS T1` instead of `medicines m`. The amended query now correctly identifies medicines with at least two enzyme interactions rather than those interacting with multiple distinct enzymes."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.medicine_id, m.name \nFROM medicines m \nWHERE m.medicine_id IN (\n    SELECT medicine_id \n    FROM interactions \n    GROUP BY medicine_id \n    HAVING COUNT(DISTINCT enzyme_id) > 1\n)",
            "SELECT T1.id, T1.name\nFROM medicine AS T1\nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id\nGROUP BY T1.id\nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "3931": {
        "db_id": "hospital_1",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "ground_truth": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "amends": [
            "Do reference the table as `physician` with alias `T1` instead of `physicians` without an alias. Do select `T1.name` with explicit table reference instead of just `name`. Do add a `JOIN` with `patient AS T2` on `T1.employeeid = T2.PCP` instead of querying only the physicians table. Do add `GROUP BY T1.employeeid` to group by physician identifier instead of no grouping. Do move the count filter to `HAVING count(*) > 1` instead of using `WHERE patient_count > 1` with a non-existent column. The amended query now correctly counts patients per physician and filters for those with more than one patient, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM physicians WHERE patient_count > 1;",
            "SELECT T1.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID HAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "6131": {
        "db_id": "customers_and_addresses",
        "question": "Find the name and ID of the product whose total order quantity is the largest.",
        "ground_truth": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "amends": [
            "Do select `t2.product_details` and `t2.product_id` instead of `name` and `product_id`. Do join `order_items AS t1` with `products AS t2` on `t1.product_id = t2.product_id` instead of querying only the `products` table. Do add `GROUP BY t1.product_id` instead of omitting grouping. Do order by `sum(t1.order_quantity)` instead of `order_quantity DESC`. The amended query now correctly identifies the product with the highest total order quantity by joining order items with products, aggregating quantities, and sorting appropriately.",
            "Do include `t2.product_details` and `t2.product_id` in the SELECT list instead of `t2.product_id`, `t2.product_details`, and `SUM(t1.order_quantity) as total_quantity`. Do remove the alias `total_quantity` instead of keeping it. Do use `ORDER BY sum(t1.order_quantity)` instead of `ORDER BY total_quantity DESC`. Do omit the DESC modifier instead of including it. The amended query now matches RIGHT_SQL's behavior.",
            "Do include `t2.product_id` in the SELECT list instead of omitting it. Do use `ORDER BY sum(t1.order_quantity)` without DESC instead of `ORDER BY SUM(t1.order_quantity) DESC` to sort in ascending order rather than descending order. The amended query now correctly identifies the product with the smallest total order quantity rather than the largest, matching the RIGHT_SQL's behavior.",
            "Do reverse the column order in the SELECT list, placing `product_details` before `product_id` instead of the original order. Do change the ORDER BY direction to ascending with `ORDER BY sum(t1.order_quantity)` instead of descending with `DESC`. The amended query now correctly returns the product with the lowest total order quantity rather than the highest, matching the RIGHT_SQL's behavior.",
            "Do remove the `DESC` ordering direction from the `ORDER BY sum(t1.order_quantity)` clause instead of keeping it, which changes the query to return the product with the lowest total order quantity rather than the highest. The amended query now matches RIGHT_SQL's behavior by correctly identifying the product with the minimum sales volume."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, product_id FROM products ORDER BY order_quantity DESC LIMIT 1;",
            "SELECT t2.product_id, t2.product_details, SUM(t1.order_quantity) as total_quantity\nFROM Order_Items AS t1\nJOIN Products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY total_quantity DESC\nLIMIT 1;",
            "SELECT t2.product_id, t2.product_details\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY SUM(t1.order_quantity) DESC\nLIMIT 1;",
            "SELECT t2.product_id, t2.product_details\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY sum(t1.order_quantity) DESC\nLIMIT 1;",
            "SELECT t2.product_details, t2.product_id\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY sum(t1.order_quantity) DESC\nLIMIT 1;",
            "SELECT t2.product_details, t2.product_id\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY sum(t1.order_quantity) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "706": {
        "db_id": "customers_card_transactions",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "ground_truth": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "amends": [
            "Do join `Customers_cards AS T1` with `Customers AS T2` on `T1.customer_id = T2.customer_id` instead of querying only the `cards` table without any joins. Do filter on `T2.customer_first_name = \"Art\"` and `T2.customer_last_name = \"Turcotte\"` instead of filtering on `first_name` and `last_name` from the wrong table. Do use double quotes around string literals instead of single quotes for consistency. The amended query now correctly counts cards associated with customers named Art Turcotte by properly joining the customer and card tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cards WHERE first_name = 'Art' AND last_name = 'Turcotte';",
            "SELECT COUNT(*) \nFROM Customers_Cards AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nWHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""
        ],
        "rule_sql": []
    },
    "2474": {
        "db_id": "movie_1",
        "question": "Find the names of all reviewers who have contributed three or more ratings.",
        "ground_truth": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3",
        "amends": [
            "Do select `T2.name` from the `Reviewer` table instead of `name` from the `reviewers` table. Do join `Rating AS T1` with `Reviewer AS T2` on `T1.rID = T2.rID` instead of querying only the `reviewers` table. Do add a `GROUP BY T1.rID` clause instead of omitting grouping. Do move the count condition to `HAVING COUNT(*) >= 3` instead of placing it in the `WHERE` clause with incorrect syntax. Do use `COUNT(*)` instead of `COUNT(rating)` to count all ratings rather than non-null rating values. The amended query now correctly identifies reviewers with at least 3 ratings by joining the rating and reviewer tables and using proper grouping with a HAVING clause."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM reviewers WHERE COUNT(rating) >= 3;",
            "SELECT T2.name\nFROM Rating AS T1\nJOIN Reviewer AS T2 ON T1.rID = T2.rID\nGROUP BY T1.rID\nHAVING COUNT(*) >= 3"
        ],
        "rule_sql": []
    },
    "4912": {
        "db_id": "store_product",
        "question": "Find the total population of the top 3 districts with the largest area.",
        "ground_truth": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
        "amends": [
            "Do reference the `city_population` column instead of `population` and use the `district` table name instead of `districts`. Do order by `city_area` instead of `area` while maintaining the same DESC direction and LIMIT 3 clause. The amended query now correctly aggregates population data from the appropriate table and column while preserving the top 3 ranking by area functionality."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(population) FROM districts ORDER BY area DESC LIMIT 3;",
            "SELECT SUM(city_population) AS total_population\nFROM district\nORDER BY city_area DESC\nLIMIT 3"
        ],
        "rule_sql": []
    },
    "6862": {
        "db_id": "flight_4",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "ground_truth": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "amends": [
            "Do select `count(*)` and `T1.name` instead of `airport_name` and `COUNT(*) as route_count`. Do join `airports AS T1` with `routes AS T2` on `T1.apid = T2.src_apid` instead of querying only the `routes` table. Do group by `T1.name` instead of `airport_name`. Do order by `count(*) DESC` instead of `route_count ASC`. The amended query now correctly counts routes originating from each airport by joining the airports table with routes on the source airport ID, matching the intended behavior.",
            "Do place the `count(*)` aggregate before `T1.name` in the SELECT list instead of having `T1.name` first. Do maintain the same FROM clause with `airports AS T1` JOINed to `routes AS T2` on `T1.apid = T2.src_apid`, the same GROUP BY `T1.name`, and the same ORDER BY `count(*) DESC` as the original query. The amended query now matches RIGHT_SQL's behavior with identical logic and output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT airport_name, COUNT(*) as route_count FROM routes GROUP BY airport_name ORDER BY route_count ASC;",
            "SELECT T1.name, count(*) \nFROM airports AS T1 \nJOIN routes AS T2 ON T1.apid = T2.src_apid \nGROUP BY T1.name \nORDER BY count(*) DESC",
            "SELECT count(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "rule_sql": []
    },
    "4417": {
        "db_id": "network_2",
        "question": "What is the name of the person whose age is below 30?",
        "ground_truth": "SELECT name FROM Person WHERE age  <  30",
        "amends": [
            "Do reference the table as `Person` instead of `persons` to match the correct schema. Do use the comparison operator `<` for `age` instead of `>` to filter for younger individuals instead of older ones. The amended query now correctly selects names from the Person table where age is less than 30, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM persons WHERE age > 30;",
            "SELECT name FROM Person WHERE age < 30;"
        ],
        "rule_sql": []
    },
    "5330": {
        "db_id": "manufactory_1",
        "question": "Compute the average price of all the products.",
        "ground_truth": "SELECT avg(price) FROM products",
        "amends": [
            "Do use lowercase `avg` function instead of uppercase `AVG` for consistency with standard SQL conventions. Do remove the `WHERE price > 1000` filter instead of keeping it, as the right query calculates the average price across all products rather than only those above 1000. The amended query now matches RIGHT_SQL's behavior by computing the overall average price from the entire products table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM products WHERE price > 1000;",
            "SELECT avg(Price) FROM Products;"
        ],
        "rule_sql": []
    },
    "2873": {
        "db_id": "icfp_1",
        "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
        "ground_truth": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
        "amends": [
            "Do select `DISTINCT t3.name` instead of `institution` to retrieve distinct institution names rather than a potentially duplicated column. Do join `authors AS t1` with `authorship AS t2` on `t1.authid = t2.authid` instead of querying only the authors table, adding the necessary join to connect authors to their institutional affiliations. Do then join `inst AS t3` on `t2.instid = t3.instid` instead of omitting this table, properly linking to the institutions table to access institution names. Do filter with `t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\"` instead of `name = 'Katsuhiro Ueno'`, correctly splitting the full name into first and last name components for accurate matching. The amended query now correctly retrieves distinct institution names for the specified author by properly joining through the authorship relationship table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT institution FROM authors WHERE name = 'Katsuhiro Ueno';",
            "SELECT DISTINCT t3.name \nFROM Authors AS t1\nJOIN Authorship AS t2 ON t1.authID = t2.authID\nJOIN Inst AS t3 ON t2.instID = t3.instID\nWHERE t1.fname = 'Katsuhiro' AND t1.lname = 'Ueno'"
        ],
        "rule_sql": []
    },
    "4394": {
        "db_id": "tracking_grants_for_research",
        "question": "What are the descriptions of all the project outcomes?",
        "ground_truth": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "amends": [
            "Do specify explicit columns `T1.outcome_description` instead of selecting all columns with `*`. Do add table `Research_outcomes AS T1` instead of omitting it. Do add `JOIN Project_outcomes AS T2` instead of querying only `project_outcomes`. Do add join condition `ON T1.outcome_code = T2.outcome_code` instead of having no join predicate. The amended query now correctly retrieves outcome descriptions from the Research_outcomes table joined with Project_outcomes on their outcome codes, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM project_outcomes;",
            "SELECT T1.outcome_description FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code;"
        ],
        "rule_sql": []
    },
    "5934": {
        "db_id": "cre_Theme_park",
        "question": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.",
        "ground_truth": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "amends": [
            "Do select `T1.Name` and `T3.Visit_Date` instead of `attraction_name` and `visit_date`. Do use `FROM` with three joined tables `Tourist_Attractions AS T1`, `VISITORS AS T2`, and `VISITS AS T3` instead of a single table `tourists`. Do add explicit join conditions `ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID` instead of no joins. Do filter on `T2.Tourist_Details` with values \"Vincent\" or \"Vivian\" instead of `tourist_name`. The amended query now correctly joins multiple tables to retrieve attraction names and visit dates for the specified tourists."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT attraction_name, visit_date FROM tourists WHERE tourist_name = 'Vincent' OR tourist_name = 'Vivian'",
            "SELECT T1.Name, T3.Visit_Date\nFROM Tourist_Attractions AS T1\nJOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID\nJOIN Visitors AS T2 ON T2.Tourist_ID = T3.Tourist_ID\nWHERE T2.Tourist_Details IN ('Vincent', 'Vivian')\nORDER BY T1.Name, T3.Visit_Date;"
        ],
        "rule_sql": []
    },
    "4165": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many document types are there?",
        "ground_truth": "SELECT count(*) FROM Ref_document_types",
        "amends": [
            "Do reference the `Ref_document_types` table instead of the `documents` table. The amended query now correctly counts records from the reference document types table rather than the documents table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM documents;",
            "SELECT COUNT(*) FROM Ref_Document_Types;"
        ],
        "rule_sql": []
    },
    "5983": {
        "db_id": "game_1",
        "question": "Show all video game types and the number of video games in each type.",
        "ground_truth": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",
        "amends": [
            "Do use column `gtype` in both the SELECT list and GROUP BY clause instead of using `type` in SELECT and `game_id` in GROUP BY. Do reference the correct table name `Video_games` instead of `video_games` to match the actual schema. The amended query now correctly groups by the same column used in the aggregation and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT type, COUNT(*) FROM video_games GROUP BY game_id;",
            "SELECT GType, COUNT(*) AS NumberOfGames FROM Video_Games GROUP BY GType;"
        ],
        "rule_sql": []
    },
    "1768": {
        "db_id": "gymnast",
        "question": "List the distinct hometowns that are not associated with any gymnast.",
        "ground_truth": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "amends": [
            "Do use `people` table instead of `gymnasts` table for the main source. Do add `EXCEPT` operation with a subquery instead of a simple `WHERE` filter. Do change from filtering `gymnast_id IS NULL` to joining `gymnast` and `people` tables on `T1.Gymnast_ID = T2.People_ID` to find excluded hometowns. Do reference `Hometown` from `people` table instead of `hometown` from `gymnasts` table. Do remove the incorrect `WHERE gymnast_id IS NULL` condition instead of keeping it. The amended query now correctly finds hometowns from people that are not associated with any gymnasts through the proper join relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT hometown FROM gymnasts WHERE gymnast_id IS NULL;",
            "SELECT DISTINCT p.Hometown\nFROM people p\nEXCEPT\nSELECT DISTINCT p.Hometown\nFROM people p\nJOIN gymnast g ON p.People_ID = g.Gymnast_ID"
        ],
        "rule_sql": []
    },
    "606": {
        "db_id": "store_1",
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "ground_truth": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "amends": [
            "Do use `JOIN` instead of `LEFT JOIN` and change the join condition to `T1.reports_to = T2.id` instead of `e.employee_id = r.manager_id`. Do reference tables as `T1` and `T2` with explicit aliases instead of `e` and `r`. Do select `count(T1.reports_to)` instead of `COUNT(r.employee_id) AS report_count`. Do group by `T1.reports_to` instead of `e.employee_id`. Do add `ORDER BY count(T1.reports_to) DESC` and `LIMIT 1` instead of omitting ordering and limiting. Do remove the selection of `first_name` and `last_name` from the wrong table alias and instead select them from the manager table `T2`. The amended query now correctly counts direct reports per manager and returns only the manager with the highest report count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT e.first_name, e.last_name, COUNT(r.employee_id) AS report_count\nFROM employees e\nLEFT JOIN employees r ON e.employee_id = r.manager_id\nGROUP BY e.employee_id;",
            "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) AS report_count\nFROM employees T1\nJOIN employees T2 ON T1.reports_to = T2.id\nGROUP BY T1.reports_to\nORDER BY COUNT(T1.reports_to) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1454": {
        "db_id": "college_2",
        "question": "Find the total number of students and total number of instructors for each department.",
        "ground_truth": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "amends": [
            "Do use `count(DISTINCT T2.id)` and `count(DISTINCT T3.id)` instead of `COUNT(*) as total_students` and `COUNT(*) as total_instructors` to count distinct IDs rather than all rows. Do join `department AS T1` with `student AS T2` on `T1.dept_name = T2.dept_name` and with `instructor AS T3` on `T1.dept_name = T3.dept_name` instead of querying only from `students` to properly relate departments with both students and instructors. Do group by `T3.dept_name` instead of `department` to use the explicit table alias. The amended query now correctly counts distinct students and instructors per department by joining through the department table.",
            "Do select `count(DISTINCT T2.id)`, `count(DISTINCT T3.id)`, and `T3.dept_name` instead of `T1.dept_name`, `COUNT(DISTINCT T2.ID) as total_students`, and `COUNT(DISTINCT T3.ID) as total_instructors`. Do use `JOIN` instead of `LEFT JOIN` for both table joins. Do group by `T3.dept_name` instead of `T1.dept_name`. Do remove the aliases `as total_students` and `as total_instructors` instead of keeping them. The amended query now correctly uses inner joins to only include departments with matching students and instructors, groups by the instructor department name, and removes unnecessary column aliases to match the RIGHT_SQL's behavior.",
            "Do place the `T3.dept_name` column at the end of the SELECT list instead of at the beginning. Do remove the table alias `T3` from the `COUNT(DISTINCT T2.ID)` expression instead of keeping it. Do add commas between the SELECT expressions instead of omitting them. The amended query now correctly matches the RIGHT_SQL's behavior with proper column ordering and expression formatting."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) as total_students, COUNT(*) as total_instructors FROM students GROUP BY department",
            "SELECT \n    T1.dept_name,\n    COUNT(DISTINCT T2.ID) as total_students,\n    COUNT(DISTINCT T3.ID) as total_instructors\nFROM \n    department AS T1\nLEFT JOIN \n    student AS T2 ON T1.dept_name = T2.dept_name\nLEFT JOIN \n    instructor AS T3 ON T1.dept_name = T3.dept_name\nGROUP BY \n    T1.dept_name",
            "SELECT T3.dept_name, COUNT(DISTINCT T2.ID), COUNT(DISTINCT T3.ID)\nFROM department AS T1\nJOIN student AS T2 ON T1.dept_name = T2.dept_name\nJOIN instructor AS T3 ON T1.dept_name = T3.dept_name\nGROUP BY T3.dept_name",
            "SELECT count(DISTINCT T2.ID), count(DISTINCT T3.ID), T3.dept_name\nFROM department AS T1\nJOIN student AS T2 ON T1.dept_name = T2.dept_name\nJOIN instructor AS T3 ON T1.dept_name = T3.dept_name\nGROUP BY T3.dept_name"
        ],
        "rule_sql": []
    },
    "2808": {
        "db_id": "news_report",
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "ground_truth": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",
        "amends": [
            "Do reference the table as `journalist` instead of `journalists` and use the column name `Nationality` instead of `nationality` in both the SELECT list and GROUP BY clause, while maintaining the same COUNT(*) aggregation. The amended query now correctly references the singular table name and properly capitalizes the Nationality column throughout to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nationality, COUNT(*) FROM journalists GROUP BY nationality;",
            "SELECT Nationality, COUNT(*) AS Number_of_Journalists FROM journalist GROUP BY Nationality;"
        ],
        "rule_sql": []
    },
    "5013": {
        "db_id": "soccer_2",
        "question": "What is the average number of hours spent practicing for students who got rejected?",
        "ground_truth": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "amends": [
            "Do select `avg(T1.HS)` from the `player` table instead of `AVG(hours_practiced)` from the `students` table. Do join with `tryout AS T2` on `T1.pID = T2.pID` instead of querying a single table. Do filter with `T2.decision = 'no'` instead of `status = 'accepted'`. The amended query now correctly calculates the average of HS values from player records that have a 'no' decision in tryouts, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(hours_practiced) FROM students WHERE status = 'accepted';",
            "SELECT AVG(T1.HS) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'"
        ],
        "rule_sql": []
    },
    "6308": {
        "db_id": "e_government",
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "ground_truth": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
        "amends": [
            "Do select `individual_first_name`, `individual_middle_name`, and `individual_last_name` instead of `first_name`, `middle_name`, and `last_name` to use the correct column names from the schema. Do order by `individual_last_name` instead of `first_name` to sort by last name rather than first name. The amended query now correctly references the proper column names and implements the intended sorting behavior based on last names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, middle_name, last_name FROM individuals ORDER BY first_name;",
            "SELECT individual_first_name, individual_middle_name, individual_last_name FROM Individuals ORDER BY individual_last_name ASC;"
        ],
        "rule_sql": []
    },
    "6636": {
        "db_id": "driving_school",
        "question": "How many staff have the first name Ludie?",
        "ground_truth": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM staff WHERE first_name = 'Ludie';"
        ],
        "rule_sql": []
    },
    "3203": {
        "db_id": "college_1",
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "ground_truth": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "amends": [
            "Do use `count(*)` without an alias instead of `COUNT(*) as class_count`. Do reference `class_room` instead of `room_number` as the grouping column. Do move the count filter to `HAVING count(*) >= 2` instead of using `WHERE class_count >= 2` after GROUP BY. Do reference table `CLASS` instead of `classes`. The amended query now correctly uses HAVING for aggregate filtering after GROUP BY and matches the right SQL's behavior.",
            "Do place the `count(*)` aggregate function first in the SELECT list instead of placing `CLASS_ROOM` first. Do maintain the same `GROUP BY class_room` clause instead of changing the grouping logic. Do preserve the `HAVING count(*) >= 2` filter instead of altering the condition. The amended query now correctly orders the output columns while maintaining identical grouping and filtering behavior to match the RIGHT_SQL's results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT room_number, COUNT(*) as class_count FROM classes GROUP BY room_number WHERE class_count >= 2;",
            "SELECT CLASS_ROOM, COUNT(*) FROM CLASS GROUP BY CLASS_ROOM HAVING COUNT(*) >= 2",
            "SELECT count(*), CLASS_ROOM FROM CLASS GROUP BY CLASS_ROOM HAVING count(*) >= 2"
        ],
        "rule_sql": []
    },
    "4554": {
        "db_id": "company_office",
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "ground_truth": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
        "amends": [
            "Do use column name `Sales_billion` instead of `sales` in both aggregate functions. Do use table name `Companies` instead of `companies` in the FROM clause. Do use double quotes around string literal `\"Banking\"` instead of single quotes for the WHERE filter. The amended query now correctly references the actual column and table names while maintaining the same filtering logic for non-Banking industry records."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(sales), MIN(sales) FROM companies WHERE industry != 'Banking';",
            "SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry != \"Banking\""
        ],
        "rule_sql": []
    },
    "1411": {
        "db_id": "college_2",
        "question": "How many students are in each department?",
        "ground_truth": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "amends": [
            "Do use `dept_name` instead of `department` for both the column reference and GROUP BY clause. Do place the aggregate function `count(*)` first in the SELECT list instead of second. Do reference the table as `student` instead of `students`. The amended query now correctly counts records grouped by department name from the student table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) FROM students GROUP BY department;",
            "SELECT count(*), dept_name FROM student GROUP BY dept_name"
        ],
        "rule_sql": []
    },
    "6955": {
        "db_id": "architecture",
        "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "ground_truth": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
        "amends": [
            "Do use `architect AS T1` instead of `architects` and add explicit joins to `bridge AS T2` and `mill AS T2` instead of filtering on non-existent columns. Do join on `T1.id = T2.architect_id` instead of using WHERE conditions with `bridges_built` and `mills_built`. Do add `GROUP BY T1.id` and `HAVING count(*) = 2` for bridges instead of `bridges_built >= 2`, and `HAVING count(*) = 1` for mills instead of `mills_built = 1`. Do use `UNION` to combine results from both bridge and mill queries instead of using OR conditions. The amended query now correctly counts actual bridge and mill constructions through proper joins and grouping rather than relying on potentially incorrect direct column filters."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, name, gender FROM architects WHERE bridges_built >= 2 OR mills_built = 1;",
            "SELECT T1.id, T1.name, T1.gender\nFROM architect AS T1\nJOIN bridge AS T2 ON T1.id = T2.architect_id\nGROUP BY T1.id\nHAVING COUNT(*) = 2\n\nUNION\n\nSELECT T1.id, T1.name, T1.gender\nFROM architect AS T1\nJOIN mill AS T2 ON T1.id = T2.architect_id\nGROUP BY T1.id\nHAVING COUNT(*) = 1"
        ],
        "rule_sql": []
    },
    "2950": {
        "db_id": "sakila_1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "ground_truth": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add `film_actor` table with `JOIN` on `T1.film_id = T2.film_id` instead of querying only the `film` table. Do use `count(*)` in the `ORDER BY` clause instead of `COUNT(actor_id)` which would return null since `actor_id` is not in the `film` table. Do include all selected columns (`T2.title`, `T2.film_id`, `T2.description`) in the `GROUP BY` clause instead of only grouping by `film_id`. Do reference columns with table aliases (`T2.title`) instead of unqualified column names. The amended query now correctly joins the film_actor table to count actors per film and returns the film with the highest actor count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT film_id, title, description, COUNT(actor_id) as actor_count \nFROM film \nGROUP BY film_id \nORDER BY actor_count DESC \nLIMIT 1;",
            "SELECT f.title, f.film_id, f.description\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nGROUP BY f.film_id, f.title, f.description\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3207": {
        "db_id": "college_1",
        "question": "Find the number of classes in each school.",
        "ground_truth": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "amends": [
            "Do add joins to `course` and `department` tables instead of querying only the `classes` table. Do specify `T3.school_code` in the SELECT list instead of just `school`. Do use proper table aliases with column references instead of unqualified column names. Do join `CLASS` to `course` on `T1.crs_code = T2.crs_code` instead of missing this relationship. Do join `course` to `department` on `T2.dept_code = T3.dept_code` instead of omitting the department connection. Do group by `T3.school_code` instead of grouping by an unspecified `school` column. The amended query now correctly aggregates class counts by school code through the proper table relationships.",
            "Do use `count(*)` instead of `COUNT(T1.CLASS_CODE)` to count all rows rather than non-null class codes. Do place `T3.school_code` after the aggregate in the SELECT list instead of before it. Do use lowercase column and table names like `school_code` instead of uppercase `SCHOOL_CODE` for consistency. Do add the `AS` keyword for table aliases like `CLASS AS T1` instead of omitting it. The amended query now correctly counts all department-class associations and matches the right SQL's behavior.",
            "Do place `T3.school_code` after the aggregate in the SELECT list instead of before it, and do remove the alias `class_count` instead of keeping it. Do use lowercase `course` and `department` instead of uppercase table names, and do add spaces around the equals operators in the join conditions instead of omitting them. The amended query now correctly returns the count of classes grouped by school code without the unnecessary column alias.",
            "Do place `T3.school_code` after `count(*)` in the SELECT list instead of before it to maintain proper column ordering. Do add a space before `T3.school_code` in the GROUP BY clause instead of omitting it for consistent formatting. The amended query now correctly counts class records grouped by school code while maintaining the same logical behavior as the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school, COUNT(*) FROM classes GROUP BY school;",
            "SELECT T3.SCHOOL_CODE, COUNT(T1.CLASS_CODE) AS number_of_classes\nFROM CLASS T1\nJOIN COURSE T2 ON T1.CRS_CODE = T2.CRS_CODE\nJOIN DEPARTMENT T3 ON T2.DEPT_CODE = T3.DEPT_CODE\nGROUP BY T3.SCHOOL_CODE",
            "SELECT T3.school_code, COUNT(*) AS class_count\nFROM CLASS AS T1\nJOIN COURSE AS T2 ON T1.CRS_CODE = T2.CRS_CODE\nJOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE\nGROUP BY T3.school_code",
            "SELECT T3.school_code, COUNT(*)\nFROM CLASS AS T1\nJOIN course AS T2 ON T1.crs_code = T2.crs_code\nJOIN department AS T3 ON T2.dept_code = T3.dept_code\nGROUP BY T3.school_code",
            "SELECT count(*), T3.school_code \nFROM CLASS AS T1 \nJOIN course AS T2 ON T1.crs_code = T2.crs_code \nJOIN department AS T3 ON T2.dept_code = T3.dept_code \nGROUP BY T3.school_code"
        ],
        "rule_sql": []
    },
    "4758": {
        "db_id": "department_store",
        "question": "Return the names and ids of customers who have TN in their address.",
        "ground_truth": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "amends": [
            "Do use `customer_name` and `customer_id` instead of `name` and `id` in the SELECT list to reference the correct column names. Do use `customer_address` instead of `address` in the WHERE filter to reference the correct column name for the address field. Do use double quotes `\"%TN%\"` instead of single quotes `'%TN%'` for the string pattern matching, though this may be database-specific formatting. The amended query now correctly references the actual column names in the schema and matches the RIGHT_SQL's behavior.",
            "Do reverse the column order to `customer_name, customer_id` instead of `customer_id, customer_name` while maintaining the same `customer_address LIKE \"%TN%\"` filter. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, id FROM customers WHERE address LIKE '%TN%';",
            "SELECT customer_id, customer_name FROM Customers WHERE customer_address LIKE \"%TN%\"",
            "SELECT customer_name, customer_id FROM Customers WHERE customer_address LIKE \"%TN%\""
        ],
        "rule_sql": []
    },
    "4534": {
        "db_id": "document_management",
        "question": "What is the description of the most popular role among users that have logged in?",
        "ground_truth": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "amends": [
            "Do select `role_description` from the `ROLES` table instead of selecting `role` and `COUNT(*)` from the `users` table. Do use a subquery to get the `role_code` with the highest count of users where `user_login = 1` instead of counting logged-in users by role. Do filter the main query with `role_code = (subquery)` instead of using a WHERE clause on `login_status`. Do remove the GROUP BY clause from the outer query and instead use it in the subquery to group by `role_code`. Do order by `count(*) DESC` in the subquery instead of ordering by the count alias in the outer query. Do maintain the LIMIT 1 in the subquery to get the most frequent role code instead of limiting the outer query results. The amended query now correctly identifies the role description for the role code with the most users having user_login = 1, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role, COUNT(*) as count FROM users WHERE login_status = 'logged_in' GROUP BY role ORDER BY count DESC LIMIT 1;",
            "SELECT role_description FROM Roles WHERE role_code = (SELECT role_code FROM Users WHERE user_login = '1' GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "6646": {
        "db_id": "driving_school",
        "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "ground_truth": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
        "amends": [
            "Do join `Customers AS T2` instead of omitting it, and use `T1.customer_id = T2.customer_id` as the join condition instead of missing the table relationship. Do reference `T2.first_name` and `T2.last_name` in the WHERE clause instead of `customer_first_name` and `customer_last_name` which don't exist in the Lessons table. Do aggregate `sum(T1.lesson_time)` instead of `SUM(duration)` to use the correct column name and table alias. Do use proper table aliases `T1` and `T2` instead of unqualified column references. The amended query now correctly joins the tables and uses the appropriate column names from each table to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(duration) FROM lessons WHERE customer_first_name = 'Rylan' AND customer_last_name = 'Goodwin';",
            "SELECT SUM(T1.lesson_time) AS total_lesson_time\nFROM Lessons AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nWHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin'"
        ],
        "rule_sql": []
    },
    "285": {
        "db_id": "twitter_1",
        "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "ground_truth": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
        "amends": [
            "Do use `T1.name` from `user_profiles AS T1` instead of `name` from `users`. Do join `follows AS T2` on `T1.uid = T2.f1` instead of querying a single table. Do group by `T2.f1` and add `HAVING count(*)` instead of using a simple `WHERE followers` filter. Do compare against a subquery that counts follows for `T1.name = 'Tyler Swift'` instead of comparing raw follower counts. Do remove the incorrect table reference `users` and replace it with the correct schema using `user_profiles` and `follows` tables. The amended query now correctly counts follows relationships instead of using a non-existent followers column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM users WHERE followers > (SELECT followers FROM users WHERE name = 'Tyler Swift')",
            "SELECT T1.name\nFROM user_profiles AS T1\nJOIN follows AS T2 ON T1.uid = T2.f1\nGROUP BY T2.f1\nHAVING COUNT(*) > (\n    SELECT COUNT(*)\n    FROM user_profiles AS T3\n    JOIN follows AS T4 ON T3.uid = T4.f1\n    WHERE T3.name = 'Tyler Swift'\n    GROUP BY T4.f1\n)"
        ],
        "rule_sql": []
    },
    "151": {
        "db_id": "bike_1",
        "question": "What is the average longitude of stations that never had bike availability more than 10?",
        "ground_truth": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "amends": [
            "Do use `avg(long)` instead of `AVG(longitude)` for the aggregate function and column reference. Do reference table `station` instead of `stations` in the FROM clause. Do use `id` instead of `station_id` for the station identifier column. Do add `GROUP BY station_id` and `HAVING max(bikes_available) > 10` in the subquery instead of using a simple filter without aggregation, ensuring we check for stations that have ever had more than 10 bikes available rather than stations with any individual record showing more than 10 bikes. The amended query now correctly identifies stations based on their maximum bikes available count rather than any single occurrence."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(longitude) FROM stations WHERE station_id NOT IN (SELECT station_id FROM status WHERE bikes_available > 10);",
            "SELECT AVG(long) \nFROM station \nWHERE id NOT IN (\n    SELECT station_id \n    FROM status \n    GROUP BY station_id \n    HAVING MAX(bikes_available) > 10\n)"
        ],
        "rule_sql": []
    },
    "941": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "ground_truth": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "amends": [
            "Do reference table `enzyme` instead of `enzymes` in the FROM clause. Do use column name `LOCATION` instead of `location` in the WHERE filter condition. The amended query now correctly references the intended table and column names to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product, chromosome, porphyria FROM enzymes WHERE location = 'Cytosol';",
            "SELECT Product, Chromosome, Porphyria FROM enzyme WHERE LOCATION = 'Cytosol'"
        ],
        "rule_sql": []
    },
    "1483": {
        "db_id": "college_2",
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "ground_truth": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "amends": [
            "Do use the comparison operator `<` instead of `>` in the WHERE clause filter, changing `salary > (SELECT MAX(salary) FROM instructor)` to `salary < (SELECT max(salary) FROM instructor)`, which correctly selects salaries that are less than the maximum salary instead of incorrectly selecting salaries greater than the maximum salary. The amended query now matches RIGHT_SQL's behavior by returning all distinct salaries that are below the maximum salary value."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT salary FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor)",
            "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)"
        ],
        "rule_sql": []
    },
    "526": {
        "db_id": "allergy_1",
        "question": "How old are the students with allergies to food and animal types on average?",
        "ground_truth": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "amends": [
            "Do use a subquery with `INTERSECT` to find students with both food and animal allergies instead of incorrectly filtering for `allergies = 'food' AND allergies = 'animal'` which would never return results. Do join `Has_allergy` with `Allergy_Type` tables instead of querying a non-existent `students` table. Do reference the correct table name `Student` instead of `students`. Do use proper column names `StuID` and `Allergy` instead of `age` and `allergies`. Do filter on `allergytype` values instead of directly on allergy names. The amended query now correctly identifies students who have both food and animal allergies by intersecting two sets of student IDs."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM students WHERE allergies = 'food' AND allergies = 'animal';",
            "SELECT AVG(Age) AS AverageAge\nFROM Student\nWHERE StuID IN (\n    SELECT StuID\n    FROM Has_Allergy ha\n    JOIN Allergy_Type at ON ha.Allergy = at.Allergy\n    WHERE at.AllergyType = 'food'\n    INTERSECT\n    SELECT StuID\n    FROM Has_Allergy ha\n    JOIN Allergy_Type at ON ha.Allergy = at.Allergy\n    WHERE at.AllergyType = 'animal'\n)"
        ],
        "rule_sql": []
    },
    "5201": {
        "db_id": "music_2",
        "question": "What are the names of the songs whose title has the word \"the\"?",
        "ground_truth": "SELECT title FROM songs WHERE title LIKE '% the %'",
        "amends": [
            "Do select `title` instead of `name` to retrieve the correct column containing song titles. Do modify the WHERE filter to `'% the %'` instead of `'%the%'` to properly match titles containing the word \"the\" surrounded by spaces rather than any occurrence of the substring \"the\". The amended query now correctly returns song titles that contain the standalone word \"the\" and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM songs WHERE title LIKE '%the%';",
            "SELECT Title FROM Songs WHERE Title LIKE '% the %'"
        ],
        "rule_sql": []
    },
    "5598": {
        "db_id": "products_gen_characteristics",
        "question": "What are characteristic names used at least twice across all products?",
        "ground_truth": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "amends": [
            "Do add joins to `products AS t1` and `CHARACTERISTICS AS t3` instead of querying only `product_characteristics`. Do join `t1.product_id = t2.product_id` and `t2.characteristic_id = t3.characteristic_id` instead of missing these relationships. Do change the HAVING condition to `count(*) >= 2` instead of `COUNT(*) = 1` to find characteristics with at least two products. Do qualify the column as `t3.characteristic_name` instead of unqualified `characteristic_name`. The amended query now correctly identifies characteristics shared by multiple products through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT characteristic_name FROM product_characteristics GROUP BY characteristic_name HAVING COUNT(*) = 1;",
            "SELECT t3.characteristic_name\nFROM Products AS t1\nJOIN Product_Characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN Characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nGROUP BY t3.characteristic_name\nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "133": {
        "db_id": "bike_1",
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "ground_truth": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select `start_station_name` and `start_station_id` instead of `station_name` and `station_id`. Do use table `trip` instead of `trips`. Do filter with `start_date LIKE \"8/%\"` instead of `strftime('%m', start_time) = '08'`. Do group by only `start_station_name` instead of both `station_name` and `station_id`. Do order by `COUNT(*) DESC` instead of `trip_count DESC`. The amended query now correctly identifies the most popular starting station for August trips using proper date filtering and aggregation.",
            "Do include `start_station_id` in the SELECT list instead of omitting it, and do remove the `COUNT(*) as trip_count` aggregation from the SELECT list instead of keeping it. Do maintain the `WHERE` filter on `start_date LIKE '8/%'` and the `GROUP BY start_station_name` clause without change. Do preserve the `ORDER BY COUNT(*) DESC` and `LIMIT 1` clauses exactly as they were. The amended query now correctly selects only the station name and ID while maintaining the grouping and ordering logic to find the most frequently used station in August."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT station_name, station_id, COUNT(*) as trip_count \nFROM trips \nWHERE strftime('%m', start_time) = '08' \nGROUP BY station_name, station_id \nORDER BY trip_count DESC \nLIMIT 1;",
            "SELECT start_station_name, start_station_id, COUNT(*) as trip_count\nFROM trip\nWHERE start_date LIKE '8/%'\nGROUP BY start_station_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE '8/%' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4399": {
        "db_id": "network_2",
        "question": "How many friends does Dan have?",
        "ground_truth": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "amends": [
            "Do add `Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name` as the FROM source instead of querying only the `friends` table. Do change the SELECT clause to `count(T2.friend)` instead of `COUNT(*)` to count specific friend relationships. Do maintain the filter `WHERE T1.name = 'Dan'` instead of `WHERE name = 'Dan'` but now applied to the correct table alias. The amended query now correctly joins the Person and PersonFriend tables to count Dan's friends rather than attempting to count from a single table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM friends WHERE name = 'Dan';",
            "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'"
        ],
        "rule_sql": []
    },
    "5035": {
        "db_id": "soccer_2",
        "question": "What are the names of all the states with college students playing in the mid position but no goalies?",
        "ground_truth": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "amends": [
            "Do use `EXCEPT` set operation instead of `WHERE` filters with contradictory conditions. Do join `college` and `tryout` tables on `cName` instead of joining `states`, `colleges`, and `players` on state/college IDs. Do select `state` column instead of `name` from a different table. Do filter for `pPos = 'mid'` in the first part and `pPos = 'goalie'` in the second part of the EXCEPT operation instead of using both `position = 'mid'` and `position != 'goalie'` in WHERE. Do remove `DISTINCT` since EXCEPT inherently returns distinct results. The amended query now correctly finds states with mid-position players but excluding those that also have goalie players, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.name \nFROM states s \nJOIN colleges c ON s.state_id = c.state_id \nJOIN players p ON c.college_id = p.college_id \nWHERE p.position = 'mid' \nAND p.position != 'goalie'",
            "SELECT state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE pPos = 'mid' EXCEPT SELECT state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE pPos = 'goalie'"
        ],
        "rule_sql": []
    },
    "703": {
        "db_id": "customers_card_transactions",
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "ground_truth": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "amends": [
            "Do join `Customers_cards AS T1` with `Customers AS T2` on `T1.customer_id = T2.customer_id` instead of querying only the `customers` table without any join. Do select `T2.customer_first_name`, `T2.customer_last_name`, and `T2.customer_phone` instead of `first_name`, `last_name`, and `phone`. Do filter on `T1.card_number = \"4560596484842\"` instead of filtering directly on the customers table's `card_number` field. Do use double quotes around the card number value instead of single quotes. The amended query now correctly retrieves customer information by joining the card data with customer details and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, phone FROM customers WHERE card_number = '4560596484842';",
            "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone \nFROM Customers_Cards AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nWHERE T1.card_number = \"4560596484842\""
        ],
        "rule_sql": []
    },
    "1173": {
        "db_id": "body_builder",
        "question": "What is the minimum snatch score?",
        "ground_truth": "SELECT min(snatch) FROM body_builder",
        "amends": [
            "Do select `min(snatch)` instead of `MAX(snatch_score)`. Do query from `body_builder` table instead of `competition_results` table. The amended query now correctly retrieves the minimum snatch value from the body_builder table rather than the maximum snatch_score from competition_results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(snatch_score) FROM competition_results;",
            "SELECT MIN(Snatch) FROM body_builder;"
        ],
        "rule_sql": []
    },
    "2292": {
        "db_id": "entrepreneur",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "ground_truth": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "amends": [
            "Do reference table `entrepreneur` instead of `investments` and use column `Investor` instead of `investor_name` in the SELECT list and GROUP BY clause. Do use `COUNT(*)` instead of `COUNT(entrepreneur_id)` in the HAVING clause to count all rows rather than non-null values of a specific column. The amended query now correctly counts entrepreneurs per investor from the appropriate table and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT investor_name FROM investments GROUP BY investor_name HAVING COUNT(entrepreneur_id) >= 2;",
            "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "6436": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "ground_truth": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "amends": [
            "Do join `Projects AS T1` with `Documents AS T2` on `T1.project_id = T2.project_id` instead of querying only the `projects` table. Do use `T1.project_details` instead of `details` in the SELECT list. Do add a `GROUP BY T1.project_id` clause instead of omitting grouping. Do move the count filter to `HAVING count(*) > 2` instead of using `WHERE document_count > 2`. The amended query now correctly counts related documents per project and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_id, details FROM projects WHERE document_count > 2",
            "SELECT T1.Project_ID, T1.Project_Details\nFROM Projects AS T1\nJOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID\nGROUP BY T1.Project_ID\nHAVING COUNT(*) > 2"
        ],
        "rule_sql": []
    },
    "5221": {
        "db_id": "music_2",
        "question": "What is the type of vocables that appears most frequently?",
        "ground_truth": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference table `vocals` instead of `vocables` in the FROM clause. Do select only `TYPE` instead of both `type` and `COUNT(*) as frequency` in the SELECT list. Do order by `count(*) DESC` directly in the ORDER BY clause instead of ordering by the alias `frequency DESC`. The amended query now correctly returns the most frequent TYPE from the vocals table by counting occurrences per type and ordering by that count in descending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT type, COUNT(*) as frequency FROM vocables GROUP BY type ORDER BY frequency DESC LIMIT 1;",
            "SELECT Type FROM Vocals GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1785": {
        "db_id": "small_bank_1",
        "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
        "ground_truth": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "amends": [
            "Do reference the `savings` table instead of `accounts` in both the main query and subquery. Do use `balance` column instead of `savings_balance` for the comparison. Do remove the `WHERE account_type = 'checking'` filter from the subquery instead of including it, as the right query compares savings balances against the average of all savings balances rather than checking account balances. The amended query now correctly counts savings accounts where the balance exceeds the average balance across all savings accounts, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM accounts WHERE savings_balance > (SELECT AVG(savings_balance) FROM accounts WHERE account_type = 'checking')",
            "SELECT COUNT(*) \nFROM SAVINGS \nWHERE balance > (SELECT AVG(balance) FROM SAVINGS)"
        ],
        "rule_sql": []
    },
    "3482": {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees who are managers?",
        "ground_truth": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "amends": [
            "Do add `DISTINCT` instead of omitting it, and do add `departments AS T2` with a `JOIN` on `T1.department_id = T2.department_id` instead of querying only the `employees` table. Do change the WHERE filter to `T1.employee_id = T2.manager_id` instead of `job_title = 'Manager'`, and do add table alias `T1` for `employees` instead of no alias. The amended query now correctly identifies employees who are managers of their departments by joining with the departments table and matching employee IDs to manager IDs, rather than relying on job title text matching.",
            "Do remove the explicit table alias `T1.*` instead of keeping it, as the RIGHT_SQL uses a simple `*` which selects all columns from both joined tables. The join condition `T1.department_id = T2.department_id` and filter `T1.employee_id = T2.manager_id` remain unchanged, maintaining the same logic to find employees who are managers of their departments. The amended query now matches RIGHT_SQL's behavior by selecting all columns without the table-specific alias."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE job_title = 'Manager';",
            "SELECT DISTINCT T1.* FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"
        ],
        "rule_sql": []
    },
    "2025": {
        "db_id": "gas_company",
        "question": "Show company name and main industry without a gas station.",
        "ground_truth": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "amends": [
            "Do select `company` instead of `company_name` and use table `company` instead of `companies`. Do add a WHERE condition with `company_id NOT IN` subquery instead of filtering by `main_industry = 'Gas Station'`. Do remove the direct industry filter and instead exclude companies that exist in the `station_company` table through the subquery correlation. The amended query now correctly identifies companies not associated with gas stations by checking their absence from the junction table rather than relying on industry classification."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, main_industry FROM companies WHERE main_industry = 'Gas Station';",
            "SELECT Company, Main_Industry FROM company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company)"
        ],
        "rule_sql": []
    },
    "4291": {
        "db_id": "club_1",
        "question": "Which clubs are located at \"AKW\"? Return the club names.",
        "ground_truth": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"",
        "amends": [
            "Do reference the `clubname` column instead of `club_name` and use the `club` table instead of `clubs`. Do use the `clublocation` filter instead of `location` and apply the equality condition with double quotes around 'AKW' instead of single quotes. The amended query now correctly retrieves club names from the club table where the club location matches AKW, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT club_name FROM clubs WHERE location = 'AKW';",
            "SELECT ClubName FROM Club WHERE ClubLocation = \"AKW\";"
        ],
        "rule_sql": []
    },
    "5762": {
        "db_id": "dorm_1",
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "ground_truth": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "amends": [
            "Do use table aliases `T1` and column names `fname` and `lname` instead of `s.first_name` and `s.last_name`. Do join `student AS T1` with `lives_in AS T2` on `T1.stuid = T2.stuid` instead of joining `students` with `dorms` and `amenities`. Do use a subquery with `has_amenity AS T3` and `dorm_amenity AS T4` joined on `T3.amenid = T4.amenid` instead of directly joining `dorms` with `amenities`. Do filter with `WHERE T2.dormid IN (subquery)` instead of `WHERE a.amenity_name = 'TV Lounge'`. Do remove the direct table joins to `dorms` and `amenities` and instead use a correlated subquery approach. The amended query now correctly identifies students living in dorms with TV lounges through the proper relationship chain."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.last_name \nFROM students s \nJOIN dorms d ON s.dorm_id = d.dorm_id \nJOIN amenities a ON d.dorm_id = a.dorm_id \nWHERE a.amenity_name = 'TV Lounge';",
            "SELECT T1.Fname, T1.LName \nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid \n    FROM Has_amenity AS T3\n    JOIN Dorm_amenity AS T4 ON T3.amenid = T4.amenid\n    WHERE T4.amenity_name = 'TV Lounge'\n)"
        ],
        "rule_sql": []
    },
    "3072": {
        "db_id": "loan_1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "ground_truth": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "amends": [
            "Do use `DISTINCT` instead of omitting it to eliminate duplicate rows. Do select `T1.cust_name` and `T1.credit_score` with explicit table aliases instead of `name` and `credit_score` without table qualification. Do join `customer AS T1` with `loan AS T2` on `T1.cust_id = T2.cust_id` instead of filtering with `WHERE loan_id IS NOT NULL` which incorrectly assumes a direct relationship. Do remove the `WHERE` clause entirely instead of keeping the incorrect `loan_id IS NOT NULL` filter that doesn't properly relate the tables. The amended query now correctly identifies customers who have loans by joining the customer and loan tables on the customer ID relationship, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, credit_score FROM customers WHERE loan_id IS NOT NULL",
            "SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_ID = T2.cust_ID"
        ],
        "rule_sql": []
    },
    "5742": {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "ground_truth": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "amends": [
            "Do use `T1.fname` instead of `first_name` for the SELECT list. Do add joins to `lives_in AS T2` and `dorm AS T3` instead of querying only the `students` table. Do use `JOIN` with `T1.stuid = T2.stuid` and `T3.dormid = T2.dormid` instead of a simple WHERE filter on `hall`. Do filter on `T3.dorm_name = 'Smith Hall'` instead of `hall = 'Smith Hall'` to properly reference the dorm name through the joined tables. The amended query now correctly retrieves student first names by joining through the appropriate relationship tables to match the dorm name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE hall = 'Smith Hall';",
            "SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'"
        ],
        "rule_sql": []
    },
    "725": {
        "db_id": "customers_card_transactions",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "ground_truth": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "amends": [
            "Do select `card_type_code` instead of `card_type` and count `DISTINCT customer_id` instead of `COUNT(*)`. Do use table `Customers_cards` instead of `customers` and group by `card_type_code` instead of `card_type`. The amended query now correctly counts unique customers per card type code rather than total records per card type."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT card_type, COUNT(*) FROM customers GROUP BY card_type;",
            "SELECT card_type_code, COUNT(DISTINCT customer_id) AS number_of_customers FROM Customers_Cards GROUP BY card_type_code;"
        ],
        "rule_sql": []
    },
    "5453": {
        "db_id": "voter_2",
        "question": "What are the last names of students studying major 50?",
        "ground_truth": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "amends": [
            "Do reference column `LName` instead of `first_name` in the SELECT list. Do use table name `STUDENT` instead of `students` in the FROM clause. Do reference column `Major` instead of `major` in the WHERE filter. The amended query now correctly retrieves last names from the STUDENT table for students with major 50, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE major = 50;",
            "SELECT LName FROM Student WHERE Major = 50;"
        ],
        "rule_sql": []
    },
    "4136": {
        "db_id": "film_rank",
        "question": "Please list the countries and years of film market estimations.",
        "ground_truth": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "amends": [
            "Do specify table aliases `T1` and `T2` instead of omitting them, and do add explicit column prefixes `T2.Country` and `T1.Year` instead of unqualified `country` and `year`. Do change the FROM clause to use a `JOIN` between `film_market_estimation AS T1` and `market AS T2` instead of a single table `film_market_estimations`, and do add the join condition `ON T1.Market_ID = T2.Market_ID` instead of omitting it entirely. The amended query now correctly joins the tables to retrieve country information from the market table rather than assuming it exists in the film market estimations table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, year FROM film_market_estimations",
            "SELECT T2.Country, T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID"
        ],
        "rule_sql": []
    },
    "3226": {
        "db_id": "college_1",
        "question": "How many schools are there in the department?",
        "ground_truth": "SELECT count(DISTINCT school_code) FROM department",
        "amends": [
            "Do count `DISTINCT school_code` instead of `COUNT(*)` to count unique schools rather than all rows. Do query from `department` table instead of `schools` table to access the correct data source. Do remove the `WHERE department = 'department'` filter instead of keeping it since the query now correctly targets the department table directly. The amended query now correctly counts distinct school codes from the department table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM schools WHERE department = 'department';",
            "SELECT COUNT(DISTINCT SCHOOL_CODE) FROM DEPARTMENT;"
        ],
        "rule_sql": []
    },
    "2884": {
        "db_id": "icfp_1",
        "question": "Find all the papers published by the institution \"Google\".",
        "ground_truth": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "amends": [
            "Do select only `t1.title` with `DISTINCT` instead of selecting all columns with `*`. Do add joins to `authorship AS t2` on `t1.paperid = t2.paperid` and `inst AS t3` on `t2.instid = t3.instid` instead of querying only the `papers` table. Do filter on `t3.name = \"Google\"` instead of filtering on `author = 'Google'`. The amended query now correctly identifies papers by institution name rather than author name and eliminates duplicates, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM papers WHERE author = 'Google';",
            "SELECT DISTINCT t1.title FROM Papers AS t1 JOIN Authorship AS t2 ON t1.paperID = t2.paperID JOIN Inst AS t3 ON t2.instID = t3.instID WHERE t3.name = 'Google'"
        ],
        "rule_sql": []
    },
    "4689": {
        "db_id": "college_3",
        "question": "Find the student first and last names and grade points of all enrollments.",
        "ground_truth": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "amends": [
            "Do select `T3.Fname`, `T3.LName`, and `T2.gradepoint` instead of `first_name`, `last_name`, and `grade_points`. Do use a multi-table join from `ENROLLED_IN AS T1`, `GRADECONVERSION AS T2`, and `STUDENT AS T3` instead of a single table `students`. Do add join conditions `T1.Grade = T2.lettergrade` and `T1.StuID = T3.StuID` instead of having no join predicates. The amended query now correctly joins multiple tables to retrieve grade point information based on enrollment records and grade conversions, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, grade_points FROM students;",
            "SELECT T3.Fname, T3.LName, T2.gradepoint\nFROM Enrolled_in AS T1\nJOIN Gradeconversion AS T2 ON T1.Grade = T2.lettergrade\nJOIN Student AS T3 ON T1.StuID = T3.StuID"
        ],
        "rule_sql": []
    },
    "3136": {
        "db_id": "assets_maintenance",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "ground_truth": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "amends": [
            "Do specify table aliases `T1.fault_description` and `T2.fault_status` instead of unqualified column names. Do add `FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2` instead of just `FROM logs`. Do add join condition `ON T1.fault_log_entry_id = T2.fault_log_entry_id` instead of the incorrect `WHERE fault_id IS NULL` filter. Do remove the erroneous `WHERE` clause entirely instead of keeping it. The amended query now correctly joins the two tables and returns the appropriate columns with proper table qualification."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT fault_description, fault_status FROM logs WHERE fault_id IS NULL;",
            "SELECT T1.fault_description, T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id"
        ],
        "rule_sql": []
    },
    "2848": {
        "db_id": "customer_deliveries",
        "question": "Find the names of customers who are not living in the state of California.",
        "ground_truth": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "amends": [
            "Do select `customer_name` instead of `name` and use `EXCEPT` to exclude California addresses instead of directly filtering for California. Do add joins to `customer_addresses` and `addresses` tables instead of omitting them, with proper join conditions on `customer_id` and `address_id` instead of missing these relationships. Do filter on `state_province_county = 'California'` in the excluded subquery instead of filtering `state = 'California'` in the main query, which changes the logic from finding customers in California to finding customers not in California. The amended query now correctly identifies customers without California addresses by using EXCEPT to remove those with California addresses, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE state = 'California';",
            "SELECT customer_name FROM Customers\nEXCEPT\nSELECT c.customer_name\nFROM Customers c\nJOIN Customer_Addresses ca ON c.customer_id = ca.customer_id\nJOIN Addresses a ON ca.address_id = a.address_id\nWHERE a.state_province_county = 'California'"
        ],
        "rule_sql": []
    },
    "752": {
        "db_id": "race_track",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "ground_truth": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "amends": [
            "Do reference table `track` instead of `tracks` in the FROM clause. Do use column `year_opened` instead of `opened` in the WHERE filter condition. Do order by `seating` instead of `name` in the ORDER BY clause. The amended query now correctly filters tracks opened after 2000 using the proper column name and orders results by seating capacity instead of name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, seating FROM tracks WHERE opened > 2000 ORDER BY name;",
            "SELECT Name, Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating;"
        ],
        "rule_sql": []
    },
    "3927": {
        "db_id": "hospital_1",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "ground_truth": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do specify `T1.name` with table alias instead of just `name`. Do add `FROM nurse AS T1 JOIN appointment AS T2` with explicit table aliases instead of omitting table sources. Do use `ON T1.employeeid = T2.prepnurse` for the join condition instead of missing the join entirely. Do add `GROUP BY T1.employeeid` to properly aggregate by nurse instead of omitting grouping. Do use `count(*)` to count appointments instead of `COUNT(appointment_id)` which would count non-null values only. The amended query now correctly joins nurse and appointment tables, groups by nurse ID, and counts all appointments to find the nurse with the most appointments, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM nurses ORDER BY COUNT(appointment_id) DESC LIMIT 1;",
            "SELECT T1.Name\nFROM Nurse AS T1\nJOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse\nGROUP BY T1.EmployeeID\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5059": {
        "db_id": "device",
        "question": "Give the average quantity of stocks.",
        "ground_truth": "SELECT avg(Quantity) FROM stock",
        "amends": [
            "Do use `avg` aggregate function instead of `SUM` to calculate the average instead of the total sum. Do reference column `Quantity` with proper case instead of lowercase `quantity`. Do reference table `stock` in singular form instead of plural `stocks`. The amended query now correctly calculates the average quantity from the stock table instead of summing quantities."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM stocks;",
            "SELECT AVG(Quantity) FROM stock;"
        ],
        "rule_sql": []
    },
    "5533": {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products in the category 'Seeds'.",
        "ground_truth": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"",
        "amends": [
            "Do reference `product_category_code` instead of `category` in the WHERE filter. Do use double quotes `\"Seeds\"` instead of single quotes `'Seeds'` for the string literal. The amended query now correctly filters by the appropriate column name and uses consistent string quoting to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'Seeds';",
            "SELECT COUNT(*) FROM Products WHERE product_category_code = \"Seeds\""
        ],
        "rule_sql": []
    },
    "1182": {
        "db_id": "election_representative",
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "ground_truth": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000",
        "amends": [
            "Do specify the full table reference `T2.Name` instead of just `name`. Do join the `election` table as `T1` with `representative` as `T2` on `T1.Representative_ID = T2.Representative_ID` instead of querying only the `representatives` table. Do use the correct table name `representative` instead of `representatives`. Do maintain the filter `Votes > 10000` in the WHERE clause. The amended query now correctly joins election data with representative information to filter representatives based on vote counts."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM representatives WHERE votes > 10000;",
            "SELECT T2.Name \nFROM election AS T1 \nJOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID \nWHERE T1.Votes > 10000"
        ],
        "rule_sql": []
    },
    "6455": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the budget type code with most number of documents.",
        "ground_truth": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do query from `Documents_with_expenses` instead of `documents` for the correct table source. Do remove the explicit `COUNT(*) as document_count` column from the SELECT list instead of including it, as only `budget_type_code` is needed. Do change the ORDER BY to use `count(*) DESC` instead of `document_count ASC` to find the most frequent budget type rather than the least frequent. Do maintain the `GROUP BY budget_type_code` and `LIMIT 1` clauses to group by budget type and return only the top result. The amended query now correctly identifies the most common budget_type_code from the Documents_with_expenses table and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT budget_type_code, COUNT(*) as document_count FROM documents GROUP BY budget_type_code ORDER BY document_count ASC LIMIT 1;",
            "SELECT Budget_Type_Code FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "5751": {
        "db_id": "dorm_1",
        "question": "What are the names of the amenities that Smith Hall has?",
        "ground_truth": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'",
        "amends": [
            "Do select `T3.amenity_name` with table alias qualification instead of unqualified `amenity_name`. Do change the FROM clause to use a three-table join chain starting with `dorm AS T1` instead of a single table `amenities`. Do add `JOIN has_amenity AS T2 ON T1.dormid = T2.dormid` and `JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid` instead of directly querying the amenities table. Do change the WHERE filter to `T1.dorm_name = 'Smith Hall'` instead of `hall_name = 'Smith Hall'` to properly reference the dorm table. The amended query now correctly navigates the relational schema through appropriate joins to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT amenity_name FROM amenities WHERE hall_name = 'Smith Hall';",
            "SELECT T3.amenity_name\nFROM dorm AS T1\nJOIN has_amenity AS T2 ON T1.dormid = T2.dormid\nJOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid\nWHERE T1.dorm_name = 'Smith Hall'"
        ],
        "rule_sql": []
    },
    "1917": {
        "db_id": "protein_institute",
        "question": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "ground_truth": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
        "amends": [
            "Do reference the table as `institution` instead of `institutions`. Do use column alias `TYPE` instead of `institution_type` in both SELECT and GROUP BY clauses. Do remove the aliases `num_institutions` and `total_enrollment` instead of keeping them. The amended query now correctly aggregates by institution type with proper table and column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT institution_type, COUNT(*) as num_institutions, SUM(enrollment) as total_enrollment FROM institutions GROUP BY institution_type",
            "SELECT Type, COUNT(*) AS num_institutions, SUM(Enrollment) AS total_enrollment FROM Institution GROUP BY Type;"
        ],
        "rule_sql": []
    },
    "3125": {
        "db_id": "behavior_monitoring",
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "ground_truth": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "amends": [
            "Do use `Addresses` table with proper joins on `address_id` instead of directly querying `students` and `teachers` tables. Do select `line_1` from the joined `Addresses` table instead of `address_line1` from the base tables. Do add explicit table aliases `T1` and `T2` instead of omitting them. Do use `JOIN` operations with proper foreign key relationships (`T1.address_id = T2.address_id`) instead of simple table scans. The amended query now correctly retrieves address line data through proper table relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT address_line1 FROM students INTERSECT SELECT DISTINCT address_line1 FROM teachers;",
            "SELECT DISTINCT a.line_1\nFROM Addresses a\nJOIN Students s ON a.address_id = s.address_id\nJOIN Teachers t ON a.address_id = t.address_id;"
        ],
        "rule_sql": []
    },
    "5507": {
        "db_id": "voter_2",
        "question": "Count the number of voting records for each election cycle.",
        "ground_truth": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "amends": [
            "Do use consistent case sensitivity with `Election_Cycle` instead of `election_cycle` for both the SELECT list and GROUP BY clause, and do use the correct table name `VOTING_RECORD` instead of `voting_records` in the FROM clause, while maintaining the same aggregation logic with `count(*)` grouped by election cycle. The amended query now matches the RIGHT_SQL's behavior with proper identifier casing and table reference."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT election_cycle, COUNT(*) FROM voting_records GROUP BY election_cycle;",
            "SELECT Election_Cycle, COUNT(*) FROM Voting_record GROUP BY Election_Cycle"
        ],
        "rule_sql": []
    },
    "5599": {
        "db_id": "products_gen_characteristics",
        "question": "Give the names of characteristics that are in two or more products?",
        "ground_truth": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "amends": [
            "Do add joins to `products AS t1` and `CHARACTERISTICS AS t3` instead of querying only `product_characteristics`. Do join `t1.product_id = t2.product_id` instead of missing the products table connection. Do join `t2.characteristic_id = t3.characteristic_id` instead of omitting the characteristics table relationship. Do use `t3.characteristic_name` in SELECT and GROUP BY instead of directly using `characteristic_name` from the wrong table. Do use `count(*)` instead of `COUNT(DISTINCT product_id)` since the joins ensure proper counting. The amended query now correctly identifies characteristics shared by multiple products through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT characteristic_name FROM product_characteristics GROUP BY characteristic_name HAVING COUNT(DISTINCT product_id) >= 2;",
            "SELECT t3.characteristic_name\nFROM Products AS t1\nJOIN Product_Characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN Characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nGROUP BY t3.characteristic_name\nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "5891": {
        "db_id": "cre_Theme_park",
        "question": "Show the names and details of all the staff members.",
        "ground_truth": "SELECT Name ,  Other_Details FROM Staff",
        "amends": [
            "Do select `Name` and `Other_Details` instead of `name` and `details`. Do query from `Staff` table instead of `staff_members` table. Do use proper column and table names that match the actual schema instead of incorrect naming conventions. The amended query now correctly retrieves the specified columns from the appropriate table with the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, details FROM staff_members WHERE id = 1;",
            "SELECT Name, Other_Details FROM Staff;"
        ],
        "rule_sql": []
    },
    "5916": {
        "db_id": "cre_Theme_park",
        "question": "Give me the detail and opening hour for each museum.",
        "ground_truth": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID",
        "amends": [
            "Do select specific columns `T1.Museum_Details` and `T2.Opening_Hours` instead of using `*` to select all columns. Do add a `JOIN` with table `TOURIST_ATTRACTIONS AS T2` instead of querying only the `museums` table. Do use the join condition `T1.Museum_ID = T2.Tourist_Attraction_ID` instead of having no join condition. The amended query now correctly retrieves museum details with their corresponding opening hours by joining the two related tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM museums;",
            "SELECT T1.Museum_Details, T2.Opening_Hours FROM Museums AS T1 JOIN Tourist_Attractions AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID"
        ],
        "rule_sql": []
    },
    "2181": {
        "db_id": "formula_1",
        "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
        "ground_truth": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "amends": [
            "Do use `EXCEPT` set operation to exclude drivers from Chinese Grand Prix instead of using `AND rc.name != 'Chinese Grand Prix'` which incorrectly filters races instead of drivers. Do join tables in the order `races \u2192 results \u2192 drivers` instead of `drivers \u2192 results \u2192 races` to properly structure the query logic. Do add a second query block with `WHERE T1.name = \"Chinese Grand Prix\"` for the EXCEPT operation instead of attempting to filter within a single WHERE clause. Do reference columns with table aliases `T1.name`, `T2.raceid`, `T2.driverid`, and `T3.forename/surname` instead of the original aliases for clarity. The amended query now correctly returns drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.forename, d.surname \nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races rc ON r.raceId = rc.raceId\nWHERE rc.name = 'Australian Grand Prix'\nAND rc.name != 'Chinese Grand Prix';",
            "SELECT T3.forename, T3.surname\nFROM races T1\nJOIN results T2 ON T1.raceId = T2.raceId\nJOIN drivers T3 ON T2.driverId = T3.driverId\nWHERE T1.name = 'Australian Grand Prix'\nEXCEPT\nSELECT T3.forename, T3.surname\nFROM races T1\nJOIN results T2 ON T1.raceId = T2.raceId\nJOIN drivers T3 ON T2.driverId = T3.driverId\nWHERE T1.name = 'Chinese Grand Prix'"
        ],
        "rule_sql": []
    },
    "1829": {
        "db_id": "browser_web",
        "question": "What is the maximum, minimum and average market share of the listed browsers?",
        "ground_truth": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser",
        "amends": [
            "Do reference table `browser` instead of `browsers` and remove the `WHERE browser_name = 'Chrome'` filter instead of keeping it. Do use lowercase function names `max`, `min`, and `avg` instead of uppercase `MAX`, `MIN`, and `AVG`. Do remove column aliases `max_share`, `min_share`, and `avg_share` instead of including them. The amended query now correctly aggregates all browser market share data without filtering for Chrome specifically."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(market_share) as max_share, MIN(market_share) as min_share, AVG(market_share) as avg_share FROM browsers WHERE browser_name = 'Chrome';",
            "SELECT max(market_share), min(market_share), avg(market_share) FROM browser"
        ],
        "rule_sql": []
    },
    "6306": {
        "db_id": "city_record",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "ground_truth": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "amends": [
            "Do select `t1.gdp` and `t1.Regional_Population` instead of `GDP` and `population`. Do use `FROM city AS T1 JOIN hosting_city AS T2` instead of `FROM cities`. Do join on `T1.city_id = T2.host_city` instead of no join condition. Do add `GROUP BY t2.Host_City` instead of omitting grouping. Do move the count filter to `HAVING count(*) > 1` instead of `WHERE host_count > 1`. The amended query now correctly aggregates data from joined tables and applies the count filter after grouping, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT GDP, population FROM cities WHERE host_count > 1;",
            "SELECT t1.GDP, t1.Regional_Population \nFROM city AS t1 \nJOIN hosting_city AS t2 ON t1.City_ID = t2.Host_City \nGROUP BY t2.Host_City \nHAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "429": {
        "db_id": "flight_1",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "ground_truth": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "amends": [
            "Do use `EXCEPT` with a correlated subquery pattern instead of a simple `WHERE` filter. Do add joins to `Certificate` and `Aircraft` tables instead of omitting them. Do reference `T1.eid = T2.eid` and `T3.aid = T2.aid` join conditions instead of missing table relationships. Do filter on `T3.name = \"Boeing 737-800\"` instead of `certificate != 'Boeing 737-800'` to properly exclude employees with that specific aircraft certification. Do use table aliases `T1`, `T2`, `T3` instead of no aliases. The amended query now correctly identifies employees without Boeing 737-800 certification by using set operations instead of incorrect column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM employees WHERE certificate != 'Boeing 737-800';",
            "SELECT T1.name\nFROM employee T1\nEXCEPT\nSELECT T1.name\nFROM employee T1\nJOIN certificate T2 ON T1.eid = T2.eid\nJOIN aircraft T3 ON T2.aid = T3.aid\nWHERE T3.name = 'Boeing 737-800'"
        ],
        "rule_sql": []
    },
    "521": {
        "db_id": "allergy_1",
        "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "ground_truth": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
        "amends": [
            "Do reference `Allergy` and `AllergyType` columns instead of `name` and `type`. Do join through `Has_allergy` bridge table instead of directly joining allergies to students. Do use `T1.Allergy = T2.Allergy` join condition instead of `student_id` direct relationship. Do reference `StuID` for student identification instead of `id`. Do use table aliases `T1`, `T2`, `T3` instead of single-letter aliases. Do use double quotes around string literal \"Lisa\" instead of single quotes. The amended query now correctly models the many-to-many relationship between students and allergies through the bridge table and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.name, a.type FROM allergies a JOIN students s ON a.student_id = s.id WHERE s.first_name = 'Lisa' ORDER BY a.name;",
            "SELECT T2.Allergy, T2.AllergyType \nFROM Student T1\nJOIN Has_Allergy T3 ON T1.StuID = T3.StuID\nJOIN Allergy_Type T2 ON T3.Allergy = T2.Allergy\nWHERE T1.Fname = \"Lisa\"\nORDER BY T2.Allergy;"
        ],
        "rule_sql": []
    },
    "1184": {
        "db_id": "election_representative",
        "question": "What is the party of the representative that has the smallest number of votes.",
        "ground_truth": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1",
        "amends": [
            "Do select `T2.Party` from the `representative` table instead of `party` from the `representatives` table. Do join `election AS T1` with `representative AS T2` on `T1.Representative_ID = T2.Representative_ID` instead of querying a single table. Do order by `votes ASC` instead of `votes DESC` to get the minimum instead of maximum votes. The amended query now correctly retrieves the party from the representative with the fewest votes by joining election and representative tables and using ascending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party FROM representatives ORDER BY votes DESC LIMIT 1;",
            "SELECT T2.Party \nFROM election AS T1 \nJOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID \nORDER BY T1.Votes ASC \nLIMIT 1"
        ],
        "rule_sql": []
    },
    "3538": {
        "db_id": "music_1",
        "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "ground_truth": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "amends": [
            "Do add `DISTINCT` instead of omitting it. Do change the source from `artists` to `artist AS T1` instead of keeping the original table name. Do add `JOIN song AS T2` instead of querying only one table. Do change the join condition to `T1.artist_name = T2.artist_name` instead of having no join. Do move the filter to `T2.rating > 9` instead of `rating > 9` on the artist table. The amended query now correctly filters songs by rating and returns distinct artists, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name, country FROM artists WHERE rating > 9;",
            "SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9"
        ],
        "rule_sql": []
    },
    "5482": {
        "db_id": "voter_2",
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "ground_truth": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "amends": [
            "Do select `Fname` and `LName` with `DISTINCT` instead of `first_name` and `last_name` without distinct. Do join `STUDENT AS T1` with `VOTING_RECORD AS T2` on `T1.StuID = T2.President_VOTE` instead of querying only the `students` table. Do filter for `T1.sex = \"F\"` instead of `sex = 'M'`. Do remove the `president_votes > 0` filter instead of keeping it, as the join condition now properly handles the voting logic. The amended query now correctly identifies female students who voted for president by joining the appropriate tables and using the correct gender filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM students WHERE sex = 'M' AND president_votes > 0",
            "SELECT DISTINCT T1.Fname, T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.President_Vote WHERE T1.Sex = 'F'"
        ],
        "rule_sql": []
    },
    "5524": {
        "db_id": "products_gen_characteristics",
        "question": "List the description of all the colors.",
        "ground_truth": "SELECT color_description FROM ref_colors",
        "amends": [
            "Do select only `color_description` instead of selecting all columns with `*`. Do reference the `ref_colors` table instead of the `colors` table. The amended query now correctly retrieves only the color description column from the appropriate reference table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM colors;",
            "SELECT color_description FROM Ref_Colors;"
        ],
        "rule_sql": []
    },
    "4719": {
        "db_id": "department_store",
        "question": "For each payment method, return how many customers use it.",
        "ground_truth": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
        "amends": [
            "Do reference `payment_method_code` instead of `payment_method` in the SELECT list and GROUP BY clause. Do group by `payment_method_code` instead of `customer_id` to correctly aggregate counts by payment method rather than by individual customers. The amended query now matches RIGHT_SQL's behavior by properly counting records grouped by payment method codes."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT payment_method, COUNT(*) FROM customers GROUP BY customer_id;",
            "SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code;"
        ],
        "rule_sql": []
    },
    "4532": {
        "db_id": "document_management",
        "question": "Count the number of users that are logged in.",
        "ground_truth": "SELECT count(*) FROM users WHERE user_login  =  1",
        "amends": [
            "Do count `*` instead of `COUNT(*)` for consistency. Do filter on `user_login = 1` instead of `is_logged_in = 'false'` to use the correct column name, proper boolean representation with integer 1 instead of string 'false', and fix the logical condition to check for logged-in users rather than non-logged-in users. The amended query now correctly counts logged-in users by checking the user_login column with proper boolean semantics."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE is_logged_in = 'false';",
            "SELECT COUNT(*) FROM Users WHERE user_login = 1;"
        ],
        "rule_sql": []
    },
    "4139": {
        "db_id": "film_rank",
        "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "ground_truth": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC",
        "amends": [
            "Do join `market` table as `T2` on `T1.Market_ID = T2.Market_ID` instead of querying `film_market_estimation` alone. Do filter on `T2.Country = \"Japan\"` instead of `market = 'Japan'`. Do select `T1.Year` with proper table qualification instead of just `year`. Do order by `T1.Year DESC` instead of `year ASC`. The amended query now correctly joins the market table to filter by country name instead of relying on a potentially incorrect market field, and sorts in descending order to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM film_market_estimation WHERE market = 'Japan' ORDER BY year ASC;",
            "SELECT T1.Year \nFROM film_market_estimation T1 \nJOIN market T2 ON T1.Market_ID = T2.Market_ID \nWHERE T2.Country = 'Japan' \nORDER BY T1.Year DESC"
        ],
        "rule_sql": []
    },
    "5479": {
        "db_id": "voter_2",
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
        "ground_truth": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "amends": [
            "Do select `DISTINCT T1.Advisor` instead of `advisor_name` from a single table. Do use `JOIN` between `STUDENT AS T1` and `VOTING_RECORD AS T2` instead of querying only `advisors` with a subquery. Do join on `T1.StuID = T2.Treasurer_Vote` instead of filtering by `student_id IN` subquery. Do filter with `T2.Election_Cycle = \"Spring\"` instead of `election_cycle = 'spring'` and remove the `position = 'treasurer'` condition since the join on `Treasurer_Vote` column implicitly handles this logic. The amended query now correctly identifies advisors of students who voted for treasurer in the spring election cycle."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT advisor_name FROM advisors WHERE student_id IN (SELECT student_id FROM votes WHERE position = 'treasurer' AND election_cycle = 'spring');",
            "SELECT DISTINCT T1.Advisor\nFROM Student AS T1\nJOIN Voting_record AS T2 ON T1.StuID = T2.Treasurer_Vote\nWHERE T2.Election_Cycle = 'Spring'"
        ],
        "rule_sql": []
    },
    "1613": {
        "db_id": "customers_and_invoices",
        "question": "Show all product names without an order.",
        "ground_truth": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "amends": [
            "Do select `product_name` instead of `p.name` and use `EXCEPT` instead of a join with filter. Do change the source from `products` with alias `p` to `Products` without alias instead of keeping the alias. Do remove the `LEFT JOIN` on `orders` with condition `p.id = o.product_id` instead of including it. Do add a subquery with `JOIN` between `Products AS T1` and `Order_items AS T2` on `T1.product_id = T2.product_id` instead of omitting it. Do completely remove the `WHERE o.id IS NOT NULL` filter instead of keeping it, as the EXCEPT operation inherently handles the logic of finding products without orders. The amended query now correctly identifies products that have never been ordered using EXCEPT semantics instead of the flawed join approach."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name FROM products p LEFT JOIN orders o ON p.id = o.product_id WHERE o.id IS NOT NULL;",
            "SELECT product_name FROM Products\nEXCEPT\nSELECT T1.product_name\nFROM Products AS T1\nJOIN Order_Items AS T2 ON T1.product_id = T2.product_id"
        ],
        "rule_sql": []
    },
    "3269": {
        "db_id": "college_1",
        "question": "What is the name of department where has the smallest number of professors?",
        "ground_truth": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
        "amends": [
            "Do join `professor` and `department` tables with `JOIN` on `T1.dept_code = T2.dept_code` instead of querying only `departments` without any joins. Do add `GROUP BY T1.dept_code` to aggregate by department code instead of missing grouping entirely. Do use `count(*)` in the `ORDER BY` clause instead of `COUNT(professor_id)` without proper grouping. Do select `T2.dept_name` from the joined department table instead of `department_name` from a single table. The amended query now correctly aggregates professor counts by department and returns the department with the fewest professors, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name FROM departments ORDER BY COUNT(professor_id) ASC LIMIT 1;",
            "SELECT T2.DEPT_NAME\nFROM PROFESSOR T1\nJOIN DEPARTMENT T2 ON T1.DEPT_CODE = T2.DEPT_CODE\nGROUP BY T1.DEPT_CODE\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4946": {
        "db_id": "soccer_2",
        "question": "What is the average enrollment number?",
        "ground_truth": "SELECT avg(enr) FROM College",
        "amends": [
            "Do use table `College` instead of `enrollments` and column `enr` instead of `name` for the aggregate function. Do calculate the average of numeric column `enr` instead of attempting to average a text column `name`, which would cause a type error. The amended query now correctly computes the average enrollment value from the appropriate table and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(name) FROM enrollments;",
            "SELECT AVG(enr) FROM College;"
        ],
        "rule_sql": []
    },
    "1880": {
        "db_id": "wrestler",
        "question": "What is the number of distinct teams that suffer elimination?",
        "ground_truth": "SELECT COUNT (DISTINCT team) FROM elimination",
        "amends": [
            "Do select `COUNT(DISTINCT team)` from the `elimination` table instead of `COUNT(*)` from the `teams` table. Do query the `elimination` table instead of the `teams` table. Do remove the `WHERE elimination = 'yes'` filter instead of keeping it, as the distinct count on team inherently captures the elimination context. The amended query now correctly counts distinct teams from the elimination table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teams WHERE elimination = 'yes';",
            "SELECT COUNT(DISTINCT Team) FROM Elimination"
        ],
        "rule_sql": []
    },
    "750": {
        "db_id": "race_track",
        "question": "What are the names and locations of all tracks?",
        "ground_truth": "SELECT name ,  LOCATION FROM track",
        "amends": [
            "Do select `LOCATION` instead of `album_id` and use table `track` instead of `tracks` instead of selecting `name, album_id` from `tracks`. The amended query now correctly retrieves the name and location from the track table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, album_id FROM tracks;",
            "SELECT Name, Location FROM track;"
        ],
        "rule_sql": []
    },
    "6130": {
        "db_id": "customers_and_addresses",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "ground_truth": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `t2.product_details` instead of `p.product_id, p.product_name, COUNT(o.order_id) as order_count`. Do use `FROM order_items AS t1 JOIN products AS t2` instead of `FROM products p LEFT JOIN order_details od LEFT JOIN orders o`. Do join on `t1.product_id = t2.product_id` instead of `p.product_id = od.product_id` and `od.order_id = o.order_id`. Do group by `t1.product_id` instead of `p.product_id, p.product_name`. Do order by `count(*) DESC` instead of `order_count DESC`. The amended query now correctly retrieves product details from the products table joined with order_items, grouping by product_id to count orders and returning the product with the highest order count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.product_id, p.product_name, COUNT(o.order_id) as order_count\nFROM products p\nLEFT JOIN order_details od ON p.product_id = od.product_id\nLEFT JOIN orders o ON od.order_id = o.order_id\nGROUP BY p.product_id, p.product_name\nORDER BY order_count DESC\nLIMIT 1;",
            "SELECT t2.product_details\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3792": {
        "db_id": "e_learning",
        "question": "How many students have personal names that contain the word \"son\"?",
        "ground_truth": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE personal_name LIKE '%son%';"
        ],
        "rule_sql": []
    },
    "1302": {
        "db_id": "soccer_1",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "ground_truth": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "amends": [
            "Do reference table `Player_Attributes` instead of `players` in the FROM clause. Do keep the same SELECT list with `preferred_foot` and `count(*)`, maintain the same WHERE filter `overall_rating > 80`, and preserve the identical GROUP BY clause `preferred_foot`. The amended query now correctly queries the Player_Attributes table instead of the players table while maintaining identical logic and output behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT preferred_foot, COUNT(*) \nFROM players \nWHERE overall_rating > 80 \nGROUP BY preferred_foot;",
            "SELECT preferred_foot, COUNT(*) \nFROM Player_Attributes \nWHERE overall_rating > 80 \nGROUP BY preferred_foot"
        ],
        "rule_sql": []
    },
    "2184": {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "ground_truth": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "amends": [
            "Do select `T1.forename` instead of `first_name` and change the table source to use `drivers AS T1` joined with `driverstandings AS T2` instead of querying only the `drivers` table. Do use `JOIN` with `T1.driverid = T2.driverid` instead of no join condition. Do change the WHERE filter to `T2.position = 1` instead of `position = 'standing'` and `T2.wins = 1` instead of `won = 'yes'`, while removing the string literals for numeric comparisons. The amended query now correctly joins the drivers and driverstandings tables to find drivers who achieved first position with one win, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT first_name FROM drivers WHERE position = 'standing' AND won = 'yes';",
            "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 AND T2.wins = 1"
        ],
        "rule_sql": []
    },
    "3445": {
        "db_id": "hr_1",
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "ground_truth": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM employees WHERE commission_pct IS NULL AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
        ],
        "rule_sql": []
    },
    "2811": {
        "db_id": "news_report",
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "ground_truth": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
        "amends": [
            "Do select `Date`, `Name`, and `venue` instead of `date`, `place`, and `name`. Do order by `Event_Attendance DESC` instead of `attendance ASC`. Do use table `event` instead of `events`. The amended query now correctly selects the appropriate columns with proper casing, references the correct table name, and applies the intended descending sort order on attendance data.",
            "Do use column order `Date, Name, venue` instead of `Date, Venue, Name` to match the correct column sequence. Do maintain the same `ORDER BY Event_Attendance DESC` clause without changes. The amended query now correctly selects and orders the columns as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date, place, name FROM events ORDER BY attendance ASC;",
            "SELECT Date, Venue, Name FROM event ORDER BY Event_Attendance DESC;",
            "SELECT Date, Name, Venue FROM event ORDER BY Event_Attendance DESC;"
        ],
        "rule_sql": []
    },
    "2473": {
        "db_id": "movie_1",
        "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?",
        "ground_truth": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "amends": [
            "Do join `Rating AS T1`, `Movie AS T2`, and `Reviewer AS T3` tables instead of querying only the `movies` table. Do specify `JOIN Movie AS T2 ON T1.mID = T2.mID` and `JOIN Reviewer AS T3 ON T1.rID = T3.rID` instead of missing these join conditions. Do select `T3.name` instead of `reviewer_name`, `T2.title` instead of `film_title`, `T1.stars` instead of `movie_rating`, and `T1.ratingDate` instead of `rating_date`. Do order by `T3.name`, `T2.title`, and `T1.stars` instead of the original column names. The amended query now correctly joins the three related tables and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reviewer_name, film_title, movie_rating, rating_date \nFROM movies \nORDER BY reviewer_name, film_title, movie_rating;",
            "SELECT T3.name, T2.title, T1.stars, T1.ratingDate\nFROM Rating AS T1\nJOIN Movie AS T2 ON T1.mID = T2.mID\nJOIN Reviewer AS T3 ON T1.rID = T3.rID\nORDER BY T3.name, T2.title, T1.stars;"
        ],
        "rule_sql": []
    },
    "299": {
        "db_id": "twitter_1",
        "question": "Find the average number of followers for the users who had some tweets.",
        "ground_truth": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "amends": [
            "Do use `avg(followers)` instead of `AVG(followers_count)` for the aggregate function and column reference. Do query from `user_profiles` instead of `users` as the source table. Do apply a filter using `UID IN (SELECT UID FROM tweets)` subquery instead of `tweet_count > 0` direct column filter. Do remove the incorrect column reference `tweet_count` and replace it with a correlated subquery that properly identifies users who have tweets. The amended query now correctly calculates the average followers for users who have posted tweets by joining through the proper relationship between user profiles and tweets tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(followers_count) FROM users WHERE tweet_count > 0",
            "SELECT AVG(followers) FROM user_profiles WHERE uid IN (SELECT uid FROM tweets)"
        ],
        "rule_sql": []
    },
    "5687": {
        "db_id": "dorm_1",
        "question": "What is the average age for each city and what are those cities?",
        "ground_truth": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
        "amends": [
            "Do select `avg(age)` and `city_code` instead of `AVG(age)` and `city`. Do use table `student` instead of `users`. Do group by `city_code` instead of `city`. Do remove the `ORDER BY city` clause instead of keeping it. The amended query now correctly aggregates average age by city code from the student table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, AVG(age) FROM users GROUP BY city ORDER BY city;",
            "SELECT AVG(age) AS avg_age, city_code FROM Student GROUP BY city_code;"
        ],
        "rule_sql": []
    },
    "4701": {
        "db_id": "college_3",
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "ground_truth": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "amends": [
            "Do join tables `ENROLLED_IN AS T1`, `GRADECONVERSION AS T2`, and `STUDENT AS T3` with explicit join conditions instead of querying a single table. Do use join predicates `T1.Grade = T2.lettergrade` and `T1.StuID = T3.StuID` instead of no joins. Do reference columns `T2.gradepoint` for aggregation instead of `grade_point`. Do filter on `T3.city_code = \"NYC\"` instead of `city = 'NYC'`. Do maintain the same aggregate functions `MAX` and `MIN` but applied to the correct joined data source. The amended query now correctly calculates grade point statistics by joining enrollment records with grade conversions and student location data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(grade_point), MIN(grade_point) FROM students WHERE city = 'NYC';",
            "SELECT MAX(T2.gradepoint) AS max_grade_point, MIN(T2.gradepoint) AS min_grade_point\nFROM Enrolled_in AS T1\nJOIN Gradeconversion AS T2 ON T1.Grade = T2.lettergrade\nJOIN Student AS T3 ON T1.StuID = T3.StuID\nWHERE T3.city_code = 'NYC'"
        ],
        "rule_sql": []
    },
    "5710": {
        "db_id": "dorm_1",
        "question": "List in alphabetic order all different amenities.",
        "ground_truth": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "amends": [
            "Do select only `amenity_name` instead of all columns with `*`. Do query from `dorm_amenity` table instead of `amenities` table. Do remove the explicit `ASC` direction from the `ORDER BY` clause instead of keeping it, as ascending order is the default. The amended query now correctly retrieves amenity names from the appropriate table with proper column selection and ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM amenities ORDER BY amenity_name ASC;",
            "SELECT amenity_name FROM Dorm_amenity ORDER BY amenity_name;"
        ],
        "rule_sql": []
    },
    "2568": {
        "db_id": "county_public_safety",
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "ground_truth": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
        "amends": [
            "Do select `name` instead of `city_name` and change the table reference to `city` instead of `cities`. Do use a subquery with `county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)` instead of a direct filter `crime_rate < 100` on the cities table. Do reference the correct column name `Crime_rate` with proper capitalization instead of `crime_rate`. The amended query now correctly filters cities based on county-level crime data from the county_public_safety table instead of incorrectly assuming crime_rate exists directly on the cities table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM cities WHERE crime_rate < 100;",
            "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)"
        ],
        "rule_sql": []
    },
    "4308": {
        "db_id": "club_1",
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "ground_truth": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "amends": [
            "Do use `count(DISTINCT t1.clubname)` instead of `COUNT(*)` to count distinct club names rather than all rows. Do add `FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid` instead of `FROM students` to properly join the three tables through their relationships. Do change the WHERE clause to `t3.fname = \"Eric\" AND t3.lname = \"Tai\"` instead of `name = 'Eric Tai'` to match on separate first and last name columns rather than a single concatenated name field. The amended query now correctly counts the number of distinct clubs that Eric Tai is a member of, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE name = 'Eric Tai';",
            "SELECT COUNT(DISTINCT t1.ClubID) \nFROM Club AS t1 \nJOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID \nJOIN Student AS t3 ON t2.StuID = t3.StuID \nWHERE t3.Fname = 'Eric' AND t3.LName = 'Tai'"
        ],
        "rule_sql": []
    },
    "399": {
        "db_id": "flight_1",
        "question": "Show the flight number of flights with three lowest distances.",
        "ground_truth": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "amends": [
            "Do reference the `flno` column instead of `flight_number` and use the `Flight` table instead of `flights` while maintaining the same `ORDER BY distance ASC` and `LIMIT 3` structure. The amended query now correctly matches the intended behavior by using the proper table and column names from the schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT flight_number FROM flights ORDER BY distance ASC LIMIT 3;",
            "SELECT flno FROM flight ORDER BY distance ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "3272": {
        "db_id": "college_1",
        "question": "Which department has the most professors with a Ph.D.?",
        "ground_truth": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T2.dept_name` and `T1.dept_code` instead of `department` and `COUNT(*) as num_phd_professors`. Do join `department AS T2` on `T1.dept_code = T2.dept_code` instead of querying only the `professors` table. Do filter on `T1.prof_high_degree = 'Ph.D.'` instead of `degree = 'Ph.D.'`. Do group by `T1.dept_code` instead of `department`. Do order by `count(*) DESC` instead of `num_phd_professors DESC`. The amended query now correctly joins with the department table to retrieve department names while maintaining the same limit behavior.",
            "Do remove `COUNT(*) as num_phd_professors` from the SELECT list instead of including it, and do remove the aggregation function while keeping the GROUP BY clause for grouping purposes only. Do maintain `T2.dept_name` and `T1.dept_code` in the SELECT list instead of adding an aggregate count. Do preserve the `JOIN` between `PROFESSOR` and `DEPARTMENT` on `T1.dept_code = T2.dept_code` instead of changing the join condition. Do keep the WHERE filter `T1.prof_high_degree = 'Ph.D.'` unchanged instead of modifying it. Do maintain the GROUP BY on `T1.dept_code` for grouping instead of removing it, and do preserve the ORDER BY `count(*) DESC` and LIMIT 1 for ranking purposes instead of altering the sorting. The amended query now correctly returns department details for the department with the most Ph.D. professors instead of including an unnecessary count column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) as num_phd_professors \nFROM professors \nWHERE degree = 'Ph.D.' \nGROUP BY department \nORDER BY num_phd_professors DESC \nLIMIT 1;",
            "SELECT T2.DEPT_NAME, T1.DEPT_CODE, COUNT(*) as num_phd_professors \nFROM PROFESSOR AS T1 \nJOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE \nWHERE T1.PROF_HIGH_DEGREE = 'Ph.D.' \nGROUP BY T1.DEPT_CODE \nORDER BY COUNT(*) DESC \nLIMIT 1",
            "SELECT T2.dept_name, T1.dept_code\nFROM PROFESSOR AS T1\nJOIN DEPARTMENT AS T2 ON T1.dept_code = T2.dept_code\nWHERE T1.prof_high_degree = 'Ph.D.'\nGROUP BY T1.dept_code\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4487": {
        "db_id": "decoration_competition",
        "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "ground_truth": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"",
        "amends": [
            "Do use `OR` between country conditions instead of `AND` to include members from either country. Do reference column `Name` instead of `name` and table `member` instead of `members` to match the correct schema. Do use double quotes for string literals `\"United States\"` and `\"Canada\"` instead of single quotes. The amended query now correctly returns members from either the United States or Canada instead of incorrectly requiring both country conditions to be true simultaneously, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM members WHERE country = 'United States' AND country = 'Canada'",
            "SELECT Name FROM member WHERE Country = \"United States\" OR Country = \"Canada\""
        ],
        "rule_sql": []
    },
    "4439": {
        "db_id": "network_2",
        "question": "What is the name and age of every male? Order the results by age.",
        "ground_truth": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "amends": [
            "Do select only `name` instead of both `name` and `age` from the result set. Do query from table `Person` instead of table `people` as the data source. Do filter for `gender = 'male'` instead of `gender = 'female'` in the WHERE clause. The amended query now correctly retrieves only names from the Person table where gender is male, ordered by age, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, age FROM people WHERE gender = 'female' ORDER BY age;",
            "SELECT name FROM Person WHERE gender = 'male' ORDER BY age;"
        ],
        "rule_sql": []
    },
    "1444": {
        "db_id": "college_2",
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "ground_truth": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "amends": [
            "Do reference table `instructor` instead of `instructors` and column `id` instead of `instructor_id` in the main query. Do reference table `teaches` instead of `courses` and column `id` instead of `instructor_id` in the subquery, while keeping the same `semester = 'Spring'` filter. The amended query now correctly matches the intended logic by using the appropriate table and column names from the schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM instructors WHERE instructor_id NOT IN (SELECT instructor_id FROM courses WHERE semester = 'Spring');",
            "SELECT name FROM instructor WHERE ID NOT IN (SELECT ID FROM teaches WHERE semester = 'Spring')"
        ],
        "rule_sql": []
    },
    "3339": {
        "db_id": "sports_competition",
        "question": "List the distinct region of clubs in ascending alphabetical order.",
        "ground_truth": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
        "amends": [
            "Do use `DISTINCT` to return unique values instead of potentially duplicate rows. Do reference the table as `club` instead of `clubs`. Do use proper case `Region` instead of lowercase `region` for column names. Do sort with `ASC` order instead of `DESC` order. The amended query now correctly returns distinct region values from the club table in ascending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM clubs ORDER BY region DESC;",
            "SELECT DISTINCT Region FROM club ORDER BY Region ASC;"
        ],
        "rule_sql": []
    },
    "3950": {
        "db_id": "hospital_1",
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "ground_truth": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "amends": [
            "Do select `DISTINCT T2.name` from the `patient` table instead of `name` from the `patients` table. Do join three tables using `undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID` instead of querying a single `patients` table. Do filter with `T3.room = 111` instead of `room_number = 111` and completely remove the `treatment_status = 'undergoing'` condition. The amended query now correctly identifies patients undergoing treatment in room 111 by properly joining the undergoes, patient, and stay tables with appropriate relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM patients WHERE treatment_status = 'undergoing' AND room_number = 111;",
            "SELECT DISTINCT T2.Name\nFROM undergoes AS T1\nJOIN patient AS T2 ON T1.Patient = T2.SSN\nJOIN stay AS T3 ON T1.Stay = T3.StayID\nWHERE T3.Room = 111;"
        ],
        "rule_sql": []
    },
    "4067": {
        "db_id": "student_1",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "ground_truth": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "amends": [
            "Do join `list AS T1` and `teachers AS T2` on `T1.classroom = T2.classroom` instead of querying only the `students` table. Do filter on `T2.firstname = \"LORIA\"` and `T2.lastname = \"ONDERSMA\"` instead of using a single `teacher_name` column. Do use the correct table structure with separate first and last name columns instead of assuming a combined teacher_name field. The amended query now correctly matches the RIGHT_SQL's behavior by properly joining tables and filtering on the appropriate name fields."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE teacher_name = 'LORIA ONDERSMA';",
            "SELECT COUNT(*) \nFROM list AS T1\nJOIN teachers AS T2 ON T1.Classroom = T2.Classroom\nWHERE T2.FirstName = 'LORIA' AND T2.LastName = 'ONDERSMA'"
        ],
        "rule_sql": []
    },
    "44": {
        "db_id": "farm",
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "ground_truth": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "amends": [
            "Do use `Status` instead of `status` for the column name and change the table reference to `city` instead of `cities`. Do remove the `COUNT(*) as city_count` column from the SELECT list instead of including it, and remove the explicit alias. Do change the ORDER BY to use `COUNT(*) ASC` instead of `city_count DESC`, moving the aggregate function from the SELECT clause to the ORDER BY clause instead of referencing an alias. The amended query now correctly selects only the Status column, groups by Status, and orders by the count in ascending order instead of descending."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT status, COUNT(*) as city_count FROM cities GROUP BY status ORDER BY city_count DESC;",
            "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
        ],
        "rule_sql": []
    },
    "690": {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers who hold an account.",
        "ground_truth": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "amends": [
            "Do select `count(DISTINCT customer_id)` instead of `COUNT(*)` to count unique customers rather than all rows. Do query from `Accounts` table instead of `customers` table to access the correct data source. Do remove the `WHERE account_id IS NOT NULL` filter instead of keeping it since the count should include all accounts regardless of null values. The amended query now correctly counts distinct customer IDs from the Accounts table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE account_id IS NOT NULL;",
            "SELECT COUNT(DISTINCT customer_id) FROM Accounts"
        ],
        "rule_sql": []
    },
    "4789": {
        "db_id": "department_store",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "ground_truth": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "amends": [
            "Do add `T1.staff_name` and `T1.staff_gender` instead of `name` and `gender`. Do add `Staff_Department_Assignments AS T2` with `JOIN` instead of omitting it. Do change the join condition to `T1.staff_id = T2.staff_id` instead of no join. Do move the filter to `T2.job_title_code = \"Sales Person\"` instead of `job = 'Sales Person'`. Do add an `EXCEPT` clause with a subquery for `T2.job_title_code = \"Clerical Staff\"` instead of using `AND job != 'Clerical Staff'`. The amended query now correctly excludes staff with clerical roles while including only sales personnel through proper table joins and set operations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, gender FROM staff WHERE job = 'Sales Person' AND job != 'Clerical Staff';",
            "SELECT T1.staff_name, T1.staff_gender\nFROM Staff AS T1\nJOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id\nWHERE T2.job_title_code = 'Sales Person'\nEXCEPT\nSELECT T1.staff_name, T1.staff_gender\nFROM Staff AS T1\nJOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id\nWHERE T2.job_title_code = 'Clerical Staff'"
        ],
        "rule_sql": []
    },
    "2749": {
        "db_id": "election",
        "question": "What are the delegate and committee information for each election record?",
        "ground_truth": "SELECT Delegate ,  Committee FROM election",
        "amends": [
            "Do specify columns `Delegate` and `Committee` in the SELECT list instead of using `*` to select all columns. Do reference table `election` instead of `elections` to ensure the correct table is queried. The amended query now matches RIGHT_SQL's behavior by selecting specific columns from the correct table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM elections;",
            "SELECT Delegate, Committee FROM election;"
        ],
        "rule_sql": []
    },
    "2460": {
        "db_id": "movie_1",
        "question": "Find the names of all reviewers who have ratings with a NULL value for the date.",
        "ground_truth": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "amends": [
            "Do add `DISTINCT` instead of omitting it. Do change the source from `reviewers` to `Reviewer AS T1 JOIN Rating AS T2` instead of a single table. Do add `ON T1.rID = T2.rID` join condition instead of no join. Do change the filter from `rating_date IS NULL` to `ratingDate = \"null\"` instead of checking for NULL values. Do remove the table alias `reviewers` and use explicit table names instead."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM reviewers WHERE rating_date IS NULL;",
            "SELECT DISTINCT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.ratingDate = \"null\""
        ],
        "rule_sql": []
    },
    "6883": {
        "db_id": "flight_4",
        "question": "Find the busiest destination airport that runs most number of routes in China.",
        "ground_truth": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.name` instead of `a.AirportID, a.Name, COUNT(r.RouteID) as RouteCount`. Do use table aliases `T1` for `airports` and `T2` for `routes` instead of `a` and `r`. Do join on `T1.apid = T2.dst_apid` instead of `a.AirportID = r.DestinationAirportID`. Do group by `T1.name` instead of `a.AirportID, a.Name`. Do order by `count(*) DESC` instead of `RouteCount DESC`. The amended query now correctly counts routes per airport name for Chinese airports and returns the name with the highest route count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.AirportID, a.Name, COUNT(r.RouteID) as RouteCount \nFROM Airports a \nJOIN Routes r ON a.AirportID = r.DestinationAirportID \nWHERE a.Country = 'China' \nGROUP BY a.AirportID, a.Name \nORDER BY RouteCount DESC \nLIMIT 1;",
            "SELECT T1.name\nFROM airports T1\nJOIN routes T2 ON T1.apid = T2.dst_apid\nWHERE T1.country = 'China'\nGROUP BY T1.name\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "3840": {
        "db_id": "e_learning",
        "question": "Find the student ID and middle name for all the students with at most two enrollments.",
        "ground_truth": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of no aliases. Do join `Student_Course_Enrolment AS T1` with `Students AS T2` on `T1.student_id = T2.student_id` instead of querying only the `students` table. Do select `T1.student_id` and `T2.middle_name` instead of `student_id` and `middle_name` without table qualification. Do add `GROUP BY T1.student_id` instead of omitting grouping. Do move the count filter to `HAVING COUNT(*) <= 2` instead of using `WHERE COUNT(enrollments.student_id) <= 2` which is invalid syntax. Do remove the incorrect table reference `enrollments.student_id` in the count function instead of keeping it. The amended query now correctly counts enrollments per student and filters those with two or fewer enrollments, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id, middle_name FROM students WHERE COUNT(enrollments.student_id) <= 2",
            "SELECT T1.student_id, T2.middle_name\nFROM Student_Course_Enrolment AS T1\nJOIN Students AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nHAVING COUNT(*) <= 2"
        ],
        "rule_sql": []
    },
    "1965": {
        "db_id": "products_for_hire",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "ground_truth": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "amends": [
            "Do select `T2.product_description` instead of `description`. Do use `FROM products_booked AS T1 JOIN products_for_hire AS T2` instead of `FROM products`. Do add join condition `ON T1.product_id = T2.product_id` instead of omitting it. Do filter on `T1.booked_amount = 102.76` instead of `amount = 102.76`. The amended query now correctly joins the booking and product tables to retrieve descriptions for products with the specified booked amount."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM products WHERE amount = 102.76;",
            "SELECT T2.product_description \nFROM Products_Booked AS T1 \nJOIN Products_for_Hire AS T2 ON T1.product_id = T2.product_id \nWHERE T1.booked_amount = 102.76"
        ],
        "rule_sql": []
    },
    "6149": {
        "db_id": "music_4",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "ground_truth": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "amends": [
            "Do reference the `Famous_Title` column instead of `title` and use the `artist` table instead of `artists`. Do use the filter condition `Artist = \"Triumfall\"` instead of `artist_name = 'Triumfall'` with proper double quotes for the string literal. The amended query now correctly retrieves the desired data from the appropriate table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM artists WHERE artist_name = 'Triumfall';",
            "SELECT Famous_Title FROM artist WHERE Artist = \"Triumfall\";"
        ],
        "rule_sql": []
    },
    "5800": {
        "db_id": "customer_complaints",
        "question": "How many customers are there in the customer type with the most customers?",
        "ground_truth": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do group by `customer_type_code` instead of `customer_type` to use the correct column for categorization. The amended query now matches RIGHT_SQL's behavior by properly counting records per customer type code."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers GROUP BY customer_type ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT COUNT(*) AS customer_count\nFROM Customers\nGROUP BY customer_type_code\nORDER BY customer_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5837": {
        "db_id": "workshop_paper",
        "question": "How many workshops did each author submit to? Return the author name and the number of workshops.",
        "ground_truth": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "amends": [
            "Do use `T2.Author` instead of `author_name` for the author column. Do add `COUNT(DISTINCT T1.workshop_id)` instead of `COUNT(*)` to count distinct workshops. Do change the FROM clause to `acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID` instead of just `workshops` with a single table. Do use `GROUP BY T2.Author` instead of `GROUP BY author_name` to match the selected column. The amended query now correctly joins the acceptance and submission tables to count distinct workshops per author, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name, COUNT(*) FROM workshops GROUP BY author_name;",
            "SELECT T2.Author, COUNT(DISTINCT T1.Workshop_ID) AS NumberOfWorkshops FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author"
        ],
        "rule_sql": []
    },
    "3083": {
        "db_id": "loan_1",
        "question": "What is the average credit score for customers who have taken a loan?",
        "ground_truth": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "amends": [
            "Do reference the `customer` table instead of `customers` in the FROM clause. Do use a subquery with `SELECT cust_id FROM loan` in the WHERE condition instead of filtering directly on `loan_amount > 0`. Do remove the aggregate function `AVG` and instead use the lowercase `avg` function for consistency. The amended query now correctly calculates the average credit score only for customers who have taken loans, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(credit_score) FROM customers WHERE loan_amount > 0",
            "SELECT avg(credit_score) FROM customer WHERE cust_ID IN (SELECT cust_ID FROM loan)"
        ],
        "rule_sql": []
    },
    "5288": {
        "db_id": "manufactory_1",
        "question": "Find the founder of the company whose name begins with the letter 'S'.",
        "ground_truth": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
        "amends": [
            "Do select `founder` instead of `*` from the SELECT list. Do query the `manufacturers` table instead of the `companies` table in the FROM clause while keeping the `WHERE name LIKE 'S%'` filter unchanged. The amended query now correctly retrieves founder information from the manufacturers table rather than all columns from a non-existent companies table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM companies WHERE name LIKE 'S%';",
            "SELECT founder FROM Manufacturers WHERE name LIKE 'S%'"
        ],
        "rule_sql": []
    },
    "166": {
        "db_id": "bike_1",
        "question": "How many trips did not end in San Francisco?",
        "ground_truth": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
        "amends": [
            "Do add `JOIN station AS T2 ON T1.end_station_id = T2.id` instead of querying only the `trips` table. Do filter on `T2.city != \"San Francisco\"` instead of directly filtering `end_city` which doesn't exist in the schema. Do use proper table aliasing with `trip AS T1` instead of the incorrect table name `trips`. The amended query now correctly joins the station table to access city information and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trips WHERE end_city != 'San Francisco';",
            "SELECT COUNT(*) \nFROM trip AS T1\nJOIN station AS T2 ON T1.end_station_id = T2.id\nWHERE T2.city != 'San Francisco'"
        ],
        "rule_sql": []
    },
    "3970": {
        "db_id": "hospital_1",
        "question": "Find the three most expensive procedures.",
        "ground_truth": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "amends": [
            "Do select only `name` instead of all columns with `*`. Do order by `cost` instead of `price`. The amended query now correctly returns the top 3 procedure names by cost instead of all columns by price.",
            "Do use lowercase `name` instead of uppercase `Name` for the column selection. Do use ascending `ORDER BY cost` instead of descending `ORDER BY Cost DESC` for the sorting. Do maintain the same `LIMIT 3` clause without changes. The amended query now matches the correct behavior by selecting the three least expensive procedures rather than the three most expensive.",
            "Do `ORDER BY cost` without `DESC` instead of `ORDER BY cost DESC` to sort by ascending cost rather than descending cost. Do use lowercase `procedures` instead of uppercase `Procedures` for the table name to match the correct case sensitivity. The amended query now matches RIGHT_SQL's behavior by selecting the three least expensive procedures instead of the three most expensive.",
            "Do remove `DESC` from the `ORDER BY` clause instead of keeping it, changing the sort order from descending to ascending. Do maintain the same `SELECT name` column list and `FROM procedures` source table without any changes. Do preserve the `LIMIT 3` clause to return exactly three rows. The amended query now matches RIGHT_SQL's behavior by sorting procedures by cost in ascending order rather than descending order.",
            "Do remove `DESC` from the `ORDER BY` clause instead of keeping it, which changes the sorting direction from descending to ascending order. This amendment ensures the query now returns the three least expensive procedures instead of the three most expensive procedures, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM procedures ORDER BY price ASC LIMIT 3;",
            "SELECT Name FROM Procedures ORDER BY Cost DESC LIMIT 3;",
            "SELECT name FROM Procedures ORDER BY cost DESC LIMIT 3;",
            "SELECT name FROM procedures ORDER BY cost DESC LIMIT 3;",
            "SELECT name FROM procedures ORDER BY cost DESC LIMIT 3;",
            "SELECT name FROM procedures ORDER BY cost DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "21": {
        "db_id": "farm",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "ground_truth": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "amends": [
            "Do select `Hosts` from the `farm_competition` table instead of `host` from the `competitions` table. Do use the filter `Theme != 'Aliens'` instead of `theme = 'Aliens'` to exclude rather than include records with the 'Aliens' theme. The amended query now correctly retrieves the Hosts column from the farm_competition table while filtering out entries with the 'Aliens' theme, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT host FROM competitions WHERE theme = 'Aliens';",
            "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens';"
        ],
        "rule_sql": []
    },
    "2845": {
        "db_id": "customer_deliveries",
        "question": "How many different payment methods are there?",
        "ground_truth": "SELECT count(DISTINCT payment_method) FROM customers",
        "amends": [
            "Do select `count(DISTINCT payment_method)` instead of `COUNT(*)`. Do query from `customers` table instead of `payments` table. The amended query now correctly counts distinct payment methods from the customers table rather than counting all rows from the payments table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM payments;",
            "SELECT COUNT(DISTINCT payment_method) FROM Customers;"
        ],
        "rule_sql": []
    },
    "1538": {
        "db_id": "insurance_and_eClaims",
        "question": "For each policy type, return its type code and its count in the record.",
        "ground_truth": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "amends": [
            "Do reference `policy_type_code` in the SELECT list instead of `policy_type` to match the GROUP BY clause and ensure consistent column usage. Do maintain the same aggregate function `count(*)` and table source `policies` without changes. The amended query now correctly groups and counts by the actual column name present in the table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT policy_type, COUNT(*) FROM policies GROUP BY policy_type_code",
            "SELECT Policy_Type_Code, COUNT(*) AS Count FROM Policies GROUP BY Policy_Type_Code;"
        ],
        "rule_sql": []
    },
    "6031": {
        "db_id": "game_1",
        "question": "Show total hours per week and number of games played for students under 20.",
        "ground_truth": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
        "amends": [
            "Do select `sum(hoursperweek)` and `sum(gamesplayed)` without aliases instead of `SUM(hours_per_week) as total_hours` and `COUNT(*) as games_played`. Do use `Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID` as the source instead of only `students`. Do apply filter `T2.age < 20` instead of `age >= 20`. Do remove `GROUP BY student_id` instead of keeping it. The amended query now correctly aggregates sports information from joined tables with the proper age filter and without unnecessary grouping."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(hours_per_week) as total_hours, COUNT(*) as games_played \nFROM students \nWHERE age >= 20\nGROUP BY student_id;",
            "SELECT SUM(HoursPerWeek), SUM(GamesPlayed) FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age < 20"
        ],
        "rule_sql": []
    },
    "1428": {
        "db_id": "college_2",
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "ground_truth": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "amends": [
            "Do join `course AS T1` with `SECTION AS T2` on `T1.course_id = T2.course_id` instead of querying only the `courses` table. Do reference `title` as `T1.title` instead of just `title` without table qualification. Do capitalize `semester = 'Fall'` instead of using lowercase `'fall'`. Do use table alias `T1` in the SELECT clause instead of omitting it. The amended query now correctly joins the course and section tables to retrieve course titles for sections meeting in Chandler building during Fall 2010 semester."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM courses WHERE building = 'Chandler' AND semester = 'fall' AND year = 2010;",
            "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.building = 'Chandler' AND T2.semester = 'Fall' AND T2.year = 2010"
        ],
        "rule_sql": []
    },
    "2265": {
        "db_id": "entrepreneur",
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "ground_truth": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "amends": [
            "Do use table name `entrepreneur` instead of `entrepreneurs` and select column `Company` instead of `company_name`. Do order by `Money_Requested DESC` instead of `money_requested ASC` to sort in descending order rather than ascending. The amended query now correctly references the proper table and column names while implementing the intended descending sort order on money requested values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, money_requested FROM entrepreneurs ORDER BY money_requested ASC;",
            "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC;"
        ],
        "rule_sql": []
    },
    "5780": {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "ground_truth": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "amends": [
            "Do add `JOIN complaints AS t2 ON t1.customer_id = t2.customer_id` instead of querying only the `customers` table. Do reference `t2.date_complaint_raised` in the `ORDER BY` instead of `complaint_date` which doesn't exist in the joined tables. Do use table alias `t1.phone_number` instead of just `phone_number` for clarity with the join. The amended query now correctly joins customer and complaint data to find the most recent complaint's associated phone number, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number FROM customers ORDER BY complaint_date DESC LIMIT 1;",
            "SELECT t1.phone_number \nFROM Customers AS t1\nJOIN Complaints AS t2 ON t1.customer_id = t2.customer_id\nORDER BY t2.date_complaint_raised DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2332": {
        "db_id": "csu_1",
        "question": "Which campus was opened between 1935 and 1939?",
        "ground_truth": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "amends": [
            "Do select `campus` instead of `campus_name` in the SELECT list. Do use the range condition `YEAR >= 1935 AND YEAR <= 1939` instead of the OR condition `opened_year = 1935 OR opened_year = 1939` to include all years between 1935 and 1939 inclusively. Do reference the column `YEAR` instead of `opened_year` in the WHERE clause. The amended query now correctly returns all campuses opened between 1935 and 1939 inclusive, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT campus_name FROM campuses WHERE opened_year = 1935 OR opened_year = 1939;",
            "SELECT Campus FROM Campuses WHERE Year >= 1935 AND Year <= 1939;"
        ],
        "rule_sql": []
    },
    "3669": {
        "db_id": "baseball_1",
        "question": "What are the name and id of the team with the most victories in 2008 postseason?",
        "ground_truth": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
        "amends": [
            "Do select `T2.name` and `T1.team_id_winner` instead of `name` and `id`. Do join `postseason AS T1` with `team AS T2` on `T1.team_id_winner = T2.team_id_br` instead of querying only `teams`. Do filter on `T1.year = 2008` instead of `year = 2008`. Do add `GROUP BY T1.team_id_winner` instead of omitting grouping. Do order by `count(*) DESC` instead of `wins DESC`. The amended query now correctly identifies the team with the most postseason wins in 2008 rather than just the team with the most regular season wins."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, id FROM teams WHERE year = 2008 ORDER BY wins DESC LIMIT 1;",
            "SELECT T2.name, T1.team_id_winner\nFROM postseason AS T1\nJOIN team AS T2 ON T1.team_id_winner = T2.team_id_br\nWHERE T1.year = 2008\nGROUP BY T1.team_id_winner\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4151": {
        "db_id": "film_rank",
        "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "ground_truth": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "amends": [
            "Do reference the `film` table instead of `films` in the FROM clause. Do use the exact column name `Studio` instead of `studio` to match the schema. Do use double quotes for the string pattern \"%Universal%\" instead of single quotes. The amended query now correctly references the proper table and column names while maintaining the same filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, studio FROM films WHERE studio LIKE '%Universal%';",
            "SELECT Title, Studio FROM film WHERE Studio LIKE \"%Universal%\""
        ],
        "rule_sql": []
    },
    "4645": {
        "db_id": "college_3",
        "question": "What are the phones of departments in Room 268?",
        "ground_truth": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "amends": [
            "Do reference the `DPhone` column instead of `phone` and use the correct table name `DEPARTMENT` instead of `departments`. Do use the numeric value `268` without quotes instead of the string literal `'268'` to match the data type of the `Room` column. The amended query now correctly retrieves phone numbers from the DEPARTMENT table where the room number equals 268."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM departments WHERE room = '268';",
            "SELECT DPhone FROM Department WHERE Room = 268;"
        ],
        "rule_sql": []
    },
    "2948": {
        "db_id": "sakila_1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "ground_truth": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "amends": [
            "Do `ORDER BY rental_rate DESC` instead of `ORDER BY rental_rate ASC` to sort films by highest rental rate rather than lowest rental rate. The amended query now matches RIGHT_SQL's behavior by correctly identifying the film with the highest rental rate."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, rental_rate FROM film ORDER BY rental_rate ASC LIMIT 1;",
            "SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1449": {
        "db_id": "college_2",
        "question": "How many instructors are in the department with the highest budget, and what is their average salary?",
        "ground_truth": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
        "amends": [
            "Do use `avg(T1.salary)` and `count(*)` without aliases instead of `COUNT(*) AS instructor_count` and `AVG(salary) AS avg_salary`. Do join `instructor AS T1` with `department AS T2` on `T1.dept_name = T2.dept_name` instead of filtering by a subquery on `department_id`. Do remove the `WHERE` clause with subquery entirely instead of keeping it. Do add `ORDER BY T2.budget DESC LIMIT 1` at the end instead of using the subquery for ordering and limiting. Do reference columns with table aliases `T1.salary` and `T2.budget` instead of unqualified column names. The amended query now correctly joins tables and applies ordering/limiting at the main query level to match the intended behavior.",
            "Do reverse the column order in the SELECT list by placing `avg(T1.salary)` first instead of `count(*)` first, while keeping both aggregate functions. Do maintain the same `JOIN` on `T1.dept_name = T2.dept_name` between instructor and department tables, preserve the `ORDER BY T2.budget DESC` sorting, and retain the `LIMIT 1` clause unchanged. The amended query now matches RIGHT_SQL's behavior with identical logic and output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS instructor_count, AVG(salary) AS avg_salary \nFROM instructors \nWHERE department_id = (SELECT department_id FROM departments ORDER BY budget DESC LIMIT 1);",
            "SELECT count(*), avg(T1.salary) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
            "SELECT avg(T1.salary), count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "4829": {
        "db_id": "aircraft",
        "question": "List the names of aircrafts and that won matches at least twice.",
        "ground_truth": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
        "amends": [
            "Do select `T1.Aircraft` instead of `name` and use a proper table alias. Do join `MATCH AS T2` instead of querying only the `aircrafts` table, adding the necessary join condition `ON T1.Aircraft_ID = T2.Winning_Aircraft`. Do add `GROUP BY T2.Winning_Aircraft` instead of omitting grouping, and do move the count filter to `HAVING COUNT(*) >= 2` instead of using `WHERE wins >= 2` which incorrectly references a non-existent column. The amended query now correctly counts match wins per aircraft and filters for those with at least two wins, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM aircrafts WHERE wins >= 2;",
            "SELECT T1.Aircraft \nFROM aircraft AS T1\nJOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft\nGROUP BY T2.Winning_Aircraft\nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "1463": {
        "db_id": "college_2",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "ground_truth": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "amends": [
            "Do reference columns from the `SECTION` table with `T2` prefix instead of using unqualified column names. Do join `course AS T1` with `SECTION AS T2` on `T1.course_id = T2.course_id` instead of querying only the `courses` table. Do filter on `T1.dept_name = 'Psychology'` instead of `department = 'Psychology'`. Do order by `T1.title` instead of `course_title`. The amended query now correctly joins course and section tables to retrieve building and room information for psychology department courses."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building, room_number, semester, year FROM courses WHERE department = 'Psychology' ORDER BY course_title;",
            "SELECT T2.building, T2.room_number, T2.semester, T2.year\nFROM course AS T1\nJOIN section AS T2 ON T1.course_id = T2.course_id\nWHERE T1.dept_name = 'Psychology'\nORDER BY T1.title;"
        ],
        "rule_sql": []
    },
    "1916": {
        "db_id": "protein_institute",
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "ground_truth": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
        "amends": [
            "Do use column name `institution` instead of `name` and maintain `LOCATION` instead of `location` in the SELECT list. Do reference table `institution` instead of `institutions` in the FROM clause. Do use filter condition `founded > 1990` instead of `founded_year > 1990` for the year comparison. Do filter for `TYPE = 'Private'` instead of `type = 'Public'` to match the correct institution type criteria. The amended query now correctly retrieves private institutions founded after 1990 from the institution table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, location FROM institutions WHERE founded_year > 1990 AND type = 'Public';",
            "SELECT institution, LOCATION FROM Institution WHERE founded > 1990 AND TYPE = 'Private';"
        ],
        "rule_sql": []
    },
    "6650": {
        "db_id": "driving_school",
        "question": "How many staff live in state Georgia?",
        "ground_truth": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "amends": [
            "Do reference the `Addresses` table instead of the `staff` table. Do filter on the `state_province_county` column instead of the `state` column. Do use double quotes around the string literal \"Georgia\" instead of single quotes. The amended query now correctly counts addresses in Georgia rather than incorrectly counting staff records."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM staff WHERE state = 'Georgia';",
            "SELECT COUNT(*) FROM Addresses WHERE state_province_county = \"Georgia\""
        ],
        "rule_sql": []
    },
    "5178": {
        "db_id": "music_2",
        "question": "Find all the stage positions of the musicians with first name \"Solveig\"",
        "ground_truth": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"",
        "amends": [
            "Do select `T1.stageposition` instead of `stage_position` and add `DISTINCT` instead of omitting it. Do use `FROM Performance AS T1 JOIN Band AS T2` instead of `FROM musicians` and add the join condition `ON T1.bandmate = T2.id` instead of omitting it. Do move the filter to `WHERE Firstname = \"Solveig\"` instead of `WHERE first_name = 'Solveig'` but note this changes the table context from musicians to Band. The amended query now correctly retrieves distinct stage positions from Performance table joined with Band table where the band member's first name matches, matching RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT stage_position FROM musicians WHERE first_name = 'Solveig';",
            "SELECT DISTINCT T1.StagePosition FROM Performance AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id WHERE T2.Firstname = 'Solveig'"
        ],
        "rule_sql": []
    },
    "1365": {
        "db_id": "college_2",
        "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "ground_truth": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "amends": [
            "Do use the `course` table instead of `courses` and reference `dept_name` column instead of `department`. Do use `EXCEPT` set operation to exclude Psychology titles instead of using `AND department != 'Psychology'` which would incorrectly filter out all rows since no row can simultaneously have department equal to 'Statistics' and not equal to 'Psychology'. Do structure the query as two separate SELECT statements with EXCEPT instead of a single WHERE clause with contradictory conditions. The amended query now correctly returns Statistics course titles excluding those that also appear in Psychology, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM courses WHERE department = 'Statistics' AND department != 'Psychology';",
            "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'"
        ],
        "rule_sql": []
    },
    "2687": {
        "db_id": "party_host",
        "question": "What are the name and the nationality of the host of the highest age?",
        "ground_truth": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "amends": [
            "Do use table name `HOST` instead of `hosts`. Do order by `Age DESC` instead of `age ASC`. Do use column names `Name` and `Nationality` instead of `name` and `nationality`. The amended query now correctly retrieves the oldest host from the HOST table with proper column and table references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, nationality FROM hosts ORDER BY age ASC LIMIT 1;",
            "SELECT Name, Nationality FROM host ORDER BY Age DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6082": {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who live in Colorado state?",
        "ground_truth": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "amends": [
            "Do select `t1.customer_name` instead of `name`. Do add `JOIN customer_addresses AS t2` and `JOIN addresses AS t3` instead of querying only the `customers` table. Do use `ON t1.customer_id = t2.customer_id` and `ON t2.address_id = t3.address_id` instead of no join conditions. Do filter on `t3.state_province_county = \"Colorado\"` instead of `state = 'California'`. The amended query now correctly joins related tables to filter by address state rather than assuming state exists directly on the customers table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE state = 'California';",
            "SELECT t1.customer_name\nFROM Customers AS t1\nJOIN Customer_Addresses AS t2 ON t1.customer_id = t2.customer_id\nJOIN Addresses AS t3 ON t2.address_id = t3.address_id\nWHERE t3.state_province_county = 'Colorado'"
        ],
        "rule_sql": []
    },
    "1037": {
        "db_id": "phone_1",
        "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "ground_truth": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "amends": [
            "Do select `T1.WiFi` and `T3.Type` instead of `wifi` and `screen_mode_type`. Do join `chip_model AS T1` and `phone AS T2` on `T1.Model_name = T2.chip_model` instead of querying only the `hardware` table. Do join `screen_mode AS T3` on `T2.screen_mode = T3.Graphics_mode` instead of omitting this table. Do filter on `T2.Hardware_Model_name = \"LG-P760\"` instead of `model = 'LG-P760'`. The amended query now correctly joins multiple tables to retrieve WiFi and screen type information for the specified hardware model."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT wifi, screen_mode_type FROM hardware WHERE model = 'LG-P760';",
            "SELECT T1.WiFi, T3.Type FROM phone AS T2 JOIN chip_model AS T1 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\""
        ],
        "rule_sql": []
    },
    "329": {
        "db_id": "product_catalog",
        "question": "Find the names of catalog entries with level number 8.",
        "ground_truth": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "amends": [
            "Do select `t1.catalog_entry_name` instead of `name` and change the FROM clause to use `Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2` instead of just `catalog_entries`. Do add a join condition `ON t1.catalog_entry_id = t2.catalog_entry_id` instead of omitting it. Do change the WHERE filter to use `t2.catalog_level_number = \"8\"` instead of `level = 8` and move the filter to reference the joined table instead of the original table. The amended query now correctly joins the necessary tables to access the catalog level information and returns the appropriate catalog entry names matching the specified level."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM catalog_entries WHERE level = 8;",
            "SELECT t1.catalog_entry_name \nFROM Catalog_Contents AS t1 \nJOIN Catalog_Contents_Additional_Attributes AS t2 \nON t1.catalog_entry_id = t2.catalog_entry_id \nWHERE t2.catalog_level_number = 8"
        ],
        "rule_sql": []
    },
    "3551": {
        "db_id": "music_1",
        "question": "What is the most popular file format?",
        "ground_truth": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "amends": [
            "Do use `formats` instead of `format` in both the SELECT list and GROUP BY clause. Do order by `COUNT(*) DESC` instead of ordering by the alias `count DESC`. Do remove the alias `as count` from the COUNT(*) expression instead of keeping it. The amended query now correctly groups by and selects the formats column while ordering by the actual count value rather than an alias, matching the intended behavior.",
            "Do select only `formats` instead of including `COUNT(*)` in the SELECT list, as the aggregate count is only needed for ordering purposes. Do maintain the `GROUP BY formats` clause to group by the distinct format values. Do keep the `ORDER BY COUNT(*) DESC` to order by the count of records in descending order. Do preserve the `LIMIT 1` to return only the single most frequent format. The amended query now correctly returns only the format value with the highest count instead of returning both the format and its count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT format, COUNT(*) as count FROM files GROUP BY format ORDER BY count DESC LIMIT 1;",
            "SELECT formats, COUNT(*) FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3751": {
        "db_id": "program_share",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "ground_truth": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "amends": [
            "Do select `count(DISTINCT program_id)` instead of `COUNT(*)` to count unique programs rather than all rows. Do query from `broadcast` table instead of `programs` to access the correct data source. Do filter on `time_of_day = 'Night'` instead of `time = 'Night'` to use the proper column name and semantic meaning. The amended query now correctly counts distinct program broadcasts during nighttime hours rather than counting all program records with a time field."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM programs WHERE time = 'Night';",
            "SELECT COUNT(DISTINCT Program_ID) FROM broadcast WHERE Time_of_day = 'Night'"
        ],
        "rule_sql": []
    },
    "540": {
        "db_id": "store_1",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "ground_truth": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "amends": [
            "Do reference `billing_country` instead of `Country` in both the SELECT list and GROUP BY clause. Do use the column name `total` instead of `Total` in the SUM aggregation. Do remove the alias `TotalSize` instead of keeping it, and reference `SUM(total)` directly in the ORDER BY clause instead of using the alias. Do maintain the same GROUP BY logic, DESC ordering, and LIMIT 8, but with corrected column references that now match the actual schema. The amended query now correctly aggregates by the billing_country field and orders by the actual sum of total values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Country, SUM(Total) as TotalSize FROM invoices GROUP BY Country ORDER BY TotalSize DESC LIMIT 8;",
            "SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8"
        ],
        "rule_sql": []
    },
    "4893": {
        "db_id": "school_player",
        "question": "Which schools do not have any player? Give me the school locations.",
        "ground_truth": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
        "amends": [
            "Do select `LOCATION` instead of `school_location` and use table `school` instead of `schools`. Do filter with `School_ID NOT IN` subquery instead of `player_id IS NULL` condition. Do reference `School_ID` column in the subquery instead of `player_id` column. The amended query now correctly identifies schools without associated players by checking for non-existent School_ID values in the Player table rather than relying on null player_id values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_location FROM schools WHERE player_id IS NULL;",
            "SELECT Location FROM school WHERE School_ID NOT IN (SELECT School_ID FROM player)"
        ],
        "rule_sql": []
    },
    "4905": {
        "db_id": "store_product",
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "ground_truth": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "amends": [
            "Do use the correct table name `district` instead of the incorrect `districts` table. Do maintain the exact same column names `District_name` and `City_Population` instead of changing their case or spelling. Do preserve the identical `BETWEEN` filter on `City_Population` with the same range values instead of altering the predicate logic. The amended query now correctly references the proper table while maintaining all the original selection criteria and filtering behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district_name, city_population FROM districts WHERE city_population BETWEEN 200000 AND 2000000",
            "SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000;"
        ],
        "rule_sql": []
    },
    "6580": {
        "db_id": "wine_1",
        "question": "Which wineries produce at least four wines?",
        "ground_truth": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
        "amends": [
            "Do reference the table as `WINE` instead of `wines` and use the column name `Winery` instead of `winery` in both SELECT and GROUP BY clauses. Do change the aggregate condition to `count(*) >= 4` instead of `wine_count >= 3`, removing the column alias from the HAVING clause. Do remove the `wine_count` alias from the SELECT list instead of including it, as only the `Winery` column is needed in the final output. The amended query now correctly filters for wineries with at least 4 wines instead of 3, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT winery, COUNT(*) as wine_count FROM wines GROUP BY winery HAVING wine_count >= 3;",
            "SELECT Winery FROM WINE GROUP BY Winery HAVING COUNT(*) >= 4"
        ],
        "rule_sql": []
    },
    "4707": {
        "db_id": "college_3",
        "question": "Find the first name of students not enrolled in any course.",
        "ground_truth": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "amends": [
            "Do use column name `Fname` instead of `first_name` and table name `STUDENT` instead of `students` in the SELECT clause. Do use column name `StuID` instead of `student_id` and table name `ENROLLED_IN` instead of `enrollments` in the subquery. Do maintain the same NOT IN subquery structure but with corrected table and column names to match the schema. The amended query now correctly identifies students not enrolled in any courses using the proper schema terminology."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE student_id NOT IN (SELECT student_id FROM enrollments);",
            "SELECT Fname FROM Student WHERE StuID NOT IN (SELECT StuID FROM Enrolled_in)"
        ],
        "rule_sql": []
    },
    "980": {
        "db_id": "university_basketball",
        "question": "What are the public schools and what are their locations?",
        "ground_truth": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "amends": [
            "Do select `school` and `LOCATION` instead of `school_name` and `address`. Do query from `university` instead of `schools`. Do filter on `affiliation = 'Public'` instead of `type = 'private'`. The amended query now correctly retrieves public universities with their names and locations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_name, address FROM schools WHERE type = 'private';",
            "SELECT School, Location FROM university WHERE Affiliation = 'Public';"
        ],
        "rule_sql": []
    },
    "2588": {
        "db_id": "inn_1",
        "question": "How many king beds are there?",
        "ground_truth": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
        "amends": [
            "Do `sum(beds)` instead of `COUNT(*)` to sum the quantity of beds rather than count rows. Do `Rooms` instead of `beds` as the source table. Do `bedtype = 'King'` instead of `type = 'queen'` to filter for King bed types rather than queen. The amended query now correctly sums the number of King beds from the Rooms table instead of counting rows of queen beds from the beds table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM beds WHERE type = 'queen';",
            "SELECT SUM(beds) FROM Rooms WHERE bedType = 'King';"
        ],
        "rule_sql": []
    },
    "5135": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the names of the workshop groups where services with product name \"film\" are performed.",
        "ground_truth": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"",
        "amends": [
            "Do select `T1.Store_Phone` and `T1.Store_Email_Address` instead of `wg.name`. Do use table alias `T1` for `Drama_Workshop_Groups` instead of `wg` for `workshop_groups`. Do join `Services AS T2` instead of `services s`. Do use join condition `T1.Workshop_Group_ID = T2.Workshop_Group_ID` instead of `wg.id = s.workshop_group_id`. Do remove the join to `products p` instead of keeping it. Do filter on `T2.Product_Name = \"film\"` instead of `p.name = 'film'`. The amended query now correctly retrieves store contact information for workshop groups offering film products without requiring the products table join."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT wg.name \nFROM workshop_groups wg\nJOIN services s ON wg.id = s.workshop_group_id\nJOIN products p ON s.product_id = p.id\nWHERE p.name = 'film';",
            "SELECT T1.Store_Phone, T1.Store_Email_Address\nFROM Drama_Workshop_Groups AS T1\nJOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID\nWHERE T2.Product_Name = 'film';"
        ],
        "rule_sql": []
    },
    "4062": {
        "db_id": "student_1",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "ground_truth": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "amends": [
            "Do select `T2.firstname` and `T2.lastname` instead of `t.first_name` and `t.last_name`. Do join `list AS T1` and `teachers AS T2` instead of joining `teachers t` and `students s`. Do use join condition `T1.classroom = T2.classroom` instead of `t.teacher_id = s.student_id`. Do filter on `T1.firstname = \"EVELINA\"` and `T1.lastname = \"BROMLEY\"` instead of filtering on `s.first_name = 'EVELINA'` and `s.last_name = 'BROMLEY'`. The amended query now correctly joins the list and teachers tables by classroom and filters on the list table's student attributes to find the corresponding teacher."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.first_name, t.last_name FROM teachers t JOIN students s ON t.teacher_id = s.student_id WHERE s.first_name = 'EVELINA' AND s.last_name = 'BROMLEY'",
            "SELECT T2.FirstName, T2.LastName\nFROM list AS T1\nJOIN teachers AS T2 ON T1.Classroom = T2.Classroom\nWHERE T1.FirstName = 'EVELINA' AND T1.LastName = 'BROMLEY'"
        ],
        "rule_sql": []
    },
    "2359": {
        "db_id": "csu_1",
        "question": "What is the total number of degrees granted after 2000 for each Orange county campus?",
        "ground_truth": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "amends": [
            "Do join `campuses AS T1` with `degrees AS T2` on `T1.id = T2.campus` instead of querying only the `degrees` table. Do reference `T1.campus` and `T1.county` instead of just `campus` and `county`. Do use `sum(T2.degrees)` instead of `COUNT(*)` to sum actual degree counts rather than counting rows. Do filter on `T2.year >= 2000` instead of `year > 2000` to include the year 2000. Do specify `T1.county = \"Orange\"` instead of `county = 'Orange'` with proper table qualification. The amended query now correctly aggregates degree counts from joined campus and degree data with inclusive year filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT campus, COUNT(*) as total_degrees FROM degrees WHERE county = 'Orange' AND year > 2000 GROUP BY campus;",
            "SELECT T1.Campus, SUM(T2.Degrees) AS TotalDegrees\nFROM Campuses AS T1\nJOIN degrees AS T2 ON T1.Id = T2.Campus\nWHERE T1.County = \"Orange\" AND T2.Year >= 2000\nGROUP BY T1.Campus"
        ],
        "rule_sql": []
    },
    "658": {
        "db_id": "journal_committee",
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "ground_truth": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
        "amends": [
            "Do use table aliases `T2` and `T3` instead of full table names `editors` and `journals`. Do select columns `Name` and `Theme` instead of `editor_name` and `journal_theme`. Do join through the junction table `journal_committee AS T1` instead of directly joining `editors` to `journals`. Do use join conditions `T1.Editor_ID = T2.Editor_ID` and `T1.Journal_ID = T3.Journal_ID` instead of `editors.journal_id = journals.journal_id`. Do remove the `WHERE committee_member = 'yes'` filter instead of keeping it, as the committee membership is inherently represented by the junction table structure. The amended query now correctly represents the many-to-many relationship between editors and journals through the committee association table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT editor_name, journal_theme FROM editors JOIN journals ON editors.journal_id = journals.journal_id WHERE committee_member = 'yes';",
            "SELECT T2.Name, T3.Theme\nFROM journal_committee AS T1\nJOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID\nJOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID"
        ],
        "rule_sql": []
    },
    "4075": {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "ground_truth": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "amends": [
            "Do add `FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom` instead of just `FROM teachers`. Do change the WHERE filter to `T1.firstname = \"MADLOCK\" AND T1.lastname = \"RAY\"` instead of `student_name = 'MADLOCK RAY'`. Do remove the direct reference to `teachers` table in the filter and instead join through the `list` table to properly match the student by first and last name separately. The amended query now correctly joins the student list with teachers by classroom and filters for the specific student name components instead of relying on a potentially incorrect concatenated student_name field."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teachers WHERE student_name = 'MADLOCK RAY';",
            "SELECT COUNT(DISTINCT T2.LastName || ' ' || T2.FirstName) \nFROM list AS T1 \nJOIN teachers AS T2 ON T1.Classroom = T2.Classroom \nWHERE T1.FirstName = 'MADLOCK' AND T1.LastName = 'RAY'"
        ],
        "rule_sql": []
    },
    "1250": {
        "db_id": "apartment_rentals",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "ground_truth": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "amends": [
            "Do use column name `apt_number` instead of `apartment_number` in the SELECT list. Do change the sort direction to `ASC` instead of `DESC` in the ORDER BY clause. Do reference table name `Apartments` instead of `apartments` to match the correct schema. The amended query now correctly selects the appropriate column with proper casing and ascending room count ordering as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT apartment_number FROM apartments ORDER BY room_count DESC;",
            "SELECT apt_number FROM Apartments ORDER BY room_count ASC;"
        ],
        "rule_sql": []
    },
    "1350": {
        "db_id": "college_2",
        "question": "How many different instructors have taught some course?",
        "ground_truth": "SELECT COUNT (DISTINCT id) FROM teaches",
        "amends": [
            "Do select `COUNT(DISTINCT id)` from the `teaches` table instead of `COUNT(*)` from the `instructors` table. Do use the `teaches` table as the data source instead of the `instructors` table. Do count distinct instructor IDs instead of counting all rows regardless of duplicates. The amended query now correctly counts unique instructors from the teaches table instead of all rows from the instructors table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM instructors;",
            "SELECT COUNT(DISTINCT ID) FROM teaches;"
        ],
        "rule_sql": []
    },
    "4792": {
        "db_id": "department_store",
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "ground_truth": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "amends": [
            "Do reference `customer_address` in the WHERE filter instead of `address`. Do use inequality comparison `!= \"Credit Card\"` instead of equality comparison `= 'credit card'` to exclude credit card payments rather than include them. Do maintain the same SELECT list with `customer_id` and `customer_name` from the `customers` table. The amended query now correctly filters for Wyoming addresses while excluding credit card payment methods, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, customer_name FROM customers WHERE address LIKE '%WY%' AND payment_method = 'credit card';",
            "SELECT customer_id, customer_name FROM Customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card';"
        ],
        "rule_sql": []
    },
    "3341": {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "ground_truth": "SELECT avg(Gold) FROM club_rank",
        "amends": [
            "Do use table `club_rank` instead of `clubs` and aggregate column `Gold` instead of `silver_medals`. Do calculate the average of `Gold` using lowercase `avg` function instead of uppercase `AVG` with different column semantics. The amended query now correctly calculates the average gold medals from the appropriate table with the intended column reference."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(silver_medals) FROM clubs;",
            "SELECT AVG(Gold) FROM club_rank"
        ],
        "rule_sql": []
    },
    "2367": {
        "db_id": "csu_1",
        "question": "What campuses are in Los Angeles county?",
        "ground_truth": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "amends": [
            "Do select only the `campus` column instead of selecting all columns with `*`. Do use double quotes `\"Los Angeles\"` for the string literal instead of single quotes `'Los Angeles'` to match the right SQL's formatting. The amended query now correctly returns only campus names from Los Angeles county instead of all columns."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM campuses WHERE county = 'Los Angeles';",
            "SELECT Campus FROM Campuses WHERE County = \"Los Angeles\""
        ],
        "rule_sql": []
    },
    "6993": {
        "db_id": "culture_company",
        "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
        "ground_truth": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
        "amends": [
            "Do use column `budget_million` instead of `budget` in all aggregate functions. Do reference table `movie` instead of `movies` as the FROM source. Do maintain the same WHERE filter `year < 2000` with identical logic. The amended query now correctly references the appropriate column and table names while preserving the original filtering logic and aggregate calculations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(budget), MAX(budget), MIN(budget) FROM movies WHERE year < 2000",
            "SELECT AVG(Budget_million) AS average_budget, MAX(Budget_million) AS maximum_budget, MIN(Budget_million) AS minimum_budget FROM movie WHERE Year < 2000"
        ],
        "rule_sql": []
    },
    "4500": {
        "db_id": "document_management",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "ground_truth": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT document_name, access_count FROM documents ORDER BY access_count DESC;"
        ],
        "rule_sql": []
    },
    "2770": {
        "db_id": "election",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "ground_truth": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "amends": [
            "Do select `T2.Comptroller` from the `party` table instead of `comptroller` from the `parties` table. Do join `election AS T1` with `party AS T2` on `T1.Party = T2.Party_ID` instead of querying only the `parties` table. Do filter on `T1.District = 1 OR T1.District = 2` instead of `delegate_district = 1 OR delegate_district = 2`. The amended query now correctly joins election data with party information to retrieve comptroller values for specific districts, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT comptroller FROM parties WHERE delegate_district = 1 OR delegate_district = 2;",
            "SELECT T2.Comptroller \nFROM election AS T1 \nJOIN party AS T2 ON T1.Party = T2.Party_ID \nWHERE T1.District = 1 OR T1.District = 2"
        ],
        "rule_sql": []
    },
    "1567": {
        "db_id": "customers_and_invoices",
        "question": "What is the customer id, first and last name with most number of accounts.",
        "ground_truth": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.customer_id`, `T2.customer_first_name`, and `T2.customer_last_name` instead of `customer_id`, `first_name`, and `last_name`. Do use `FROM Accounts AS T1 JOIN Customers AS T2` instead of `FROM customers` alone. Do add `ON T1.customer_id = T2.customer_id` join condition instead of omitting it. Do group by `T1.customer_id` instead of grouping by `customer_id, first_name, last_name`. Do order by `count(*) DESC` instead of ordering by `account_count DESC`. Do remove the explicit `COUNT(account_id) as account_count` column from SELECT instead of including it. The amended query now correctly joins the Accounts and Customers tables to find the customer with the most accounts, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, first_name, last_name, COUNT(account_id) as account_count\nFROM customers\nGROUP BY customer_id, first_name, last_name\nORDER BY account_count DESC\nLIMIT 1;",
            "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name\nFROM Accounts AS T1\nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T1.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4351": {
        "db_id": "tracking_grants_for_research",
        "question": "For each project id, how many staff does it have? List them in increasing order.",
        "ground_truth": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "amends": [
            "Do join `Project_Staff AS T1` with `Projects AS T2` on `T1.project_id = T2.project_id` instead of querying only the `staff` table without proper joins. Do qualify `project_id` as `T1.project_id` in both SELECT and GROUP BY instead of using unqualified column references. Do order by `count(*) ASC` instead of `project_id ASC` to sort by the aggregate result rather than the grouping column. Do add the Projects table join to ensure referential integrity instead of counting staff without validating project existence."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_id, COUNT(*) FROM staff GROUP BY project_id ORDER BY project_id ASC;",
            "SELECT T1.project_id, COUNT(*) AS staff_count\nFROM Project_Staff AS T1\nJOIN Projects AS T2 ON T1.project_id = T2.project_id\nGROUP BY T1.project_id\nORDER BY staff_count ASC"
        ],
        "rule_sql": []
    },
    "6820": {
        "db_id": "flight_4",
        "question": "What is the country of the airport with the highest elevation?",
        "ground_truth": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3739": {
        "db_id": "program_share",
        "question": "What are the name, origin and owner of each program?",
        "ground_truth": "SELECT name ,  origin ,  OWNER FROM program",
        "amends": [
            "Do add `OWNER` to the SELECT list instead of omitting it. Do correct the table name to `program` instead of `programs`. The amended query now correctly includes all required columns and references the proper table name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, origin FROM programs;",
            "SELECT Name, Origin, Owner FROM program;"
        ],
        "rule_sql": []
    },
    "4594": {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "ground_truth": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
        "amends": [
            "Do add `Products_in_Events` table with `JOIN` on `T1.Product_ID = T2.Product_ID` instead of querying only the `products` table. Do use `COUNT(*)` instead of `COUNT(event_id)` to count all joined rows. Do add `GROUP BY T1.Product_Name` instead of omitting grouping for the aggregate function. Do change sort direction to `DESC` instead of `ASC` for the event count ordering. The amended query now correctly joins product data with event relationships and groups by product name to count events per product, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, COUNT(event_id) AS event_count FROM products ORDER BY event_count ASC;",
            "SELECT p.Product_Name, COUNT(*) AS NumberOfEvents\nFROM Products p\nJOIN Products_in_Events pie ON p.Product_ID = pie.Product_ID\nGROUP BY p.Product_Name\nORDER BY NumberOfEvents DESC;"
        ],
        "rule_sql": []
    },
    "4275": {
        "db_id": "club_1",
        "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
        "ground_truth": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "amends": [
            "Do use explicit table aliases `t3.fname` and `t3.lname` instead of direct column names `first_name` and `last_name`. Do join three tables `club AS t1`, `member_of_club AS t2`, and `student AS t3` instead of querying a single `members` table. Do use `INNER JOIN` relationships with `t1.clubid = t2.clubid` and `t2.stuid = t3.stuid` instead of a simple filter. Do filter on `t1.clubname = \"Bootup Baltimore\"` instead of `organization = 'Bootup Baltimore'`. Do filter on `t3.major = \"600\"` as a string instead of `major = 600` as a number. The amended query now correctly joins the club membership relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM members WHERE organization = 'Bootup Baltimore' AND major = 600;",
            "SELECT t3.Fname, t3.LName FROM Club AS t1 INNER JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID INNER JOIN Student AS t3 ON t2.StuID = t3.StuID WHERE t1.ClubName = 'Bootup Baltimore' AND t3.Major = '600'"
        ],
        "rule_sql": []
    },
    "6457": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids of documents which don't have expense budgets?",
        "ground_truth": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "amends": [
            "Do use `EXCEPT` to find documents without expenses instead of checking for `NULL` in a single table. Do query from `Documents` instead of `documents` to match the correct table name. Do subtract documents with expenses via `EXCEPT SELECT document_id FROM Documents_with_expenses` instead of relying on `WHERE expense_budget IS NULL` which may not correctly identify the absence of expense records. The amended query now correctly identifies documents that exist in the Documents table but have no corresponding records in the Documents_with_expenses table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT document_id FROM documents WHERE expense_budget IS NULL;",
            "SELECT Document_ID FROM Documents\nEXCEPT\nSELECT Document_ID FROM Documents_with_Expenses"
        ],
        "rule_sql": []
    },
    "469": {
        "db_id": "allergy_1",
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "ground_truth": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "amends": [
            "Do use column aliases `Fname`, `Lname`, and `Age` instead of `first_name`, `last_name`, and `age`. Do filter on `Sex = 'F'` instead of `sex = 'M'`. Do reference table `Student` instead of `students`. The amended query now correctly selects female students with the appropriate column names and table reference."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, age FROM students WHERE sex = 'M';",
            "SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F';"
        ],
        "rule_sql": []
    },
    "457": {
        "db_id": "allergy_1",
        "question": "Which allergy type has least number of allergies?",
        "ground_truth": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do reference the table as `Allergy_type` instead of `allergies` and use the column `allergytype` instead of `allergy_type`. Do order by `count(*) ASC` instead of `count DESC` to sort in ascending order by the count of records. Do select only `allergytype` instead of both `allergy_type` and `COUNT(*) as count` since the count is only used for ordering. The amended query now correctly identifies the least common allergy type by counting occurrences in ascending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT allergy_type, COUNT(*) as count FROM allergies GROUP BY allergy_type ORDER BY count DESC LIMIT 1;",
            "SELECT AllergyType FROM Allergy_Type GROUP BY AllergyType ORDER BY COUNT(*) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "939": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "ground_truth": "SELECT max(OMIM) FROM enzyme",
        "amends": [
            "Do use `max` aggregation instead of `MIN` aggregation. Do reference column `OMIM` instead of `omim` with proper case sensitivity. Do query from table `enzyme` instead of `enzymes` with corrected table name. The amended query now correctly retrieves the maximum OMIM value from the enzyme table instead of the minimum value from an incorrectly named table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(omim) FROM enzymes;",
            "SELECT MAX(OMIM) FROM enzyme;"
        ],
        "rule_sql": []
    },
    "1830": {
        "db_id": "browser_web",
        "question": "What is the id and market share of the browser Safari?",
        "ground_truth": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "amends": [
            "Do reference table `browser` instead of `browsers` in the FROM clause. Do filter for `name = 'Safari'` instead of `name = 'Chrome'` in the WHERE condition. The amended query now correctly retrieves data for Safari browser from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, market_share FROM browsers WHERE name = 'Chrome';",
            "SELECT id, market_share FROM browser WHERE name = 'Safari';"
        ],
        "rule_sql": []
    },
    "2786": {
        "db_id": "election",
        "question": "Show the names of counties that have at least two delegates.",
        "ground_truth": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "amends": [
            "Do select `T1.County_name` from the `county` table instead of `county_name` from the `delegates` table. Do join `election AS T2` on `T1.County_id = T2.District` instead of querying only the `delegates` table without any joins. Do group by `T1.County_id` instead of `county_name` to ensure proper aggregation. Do use `COUNT(*)` instead of `COUNT(delegate_id)` to count all rows in the grouped results. The amended query now correctly joins county and election data and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county_name FROM delegates GROUP BY county_name HAVING COUNT(delegate_id) >= 2;",
            "SELECT T1.County_name \nFROM county AS T1\nJOIN election AS T2 ON T1.County_Id = T2.District\nGROUP BY T1.County_Id\nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "6181": {
        "db_id": "music_4",
        "question": "Please show the categories of the music festivals and the count.",
        "ground_truth": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category",
        "amends": [
            "Do reference the `music_festival` table instead of the `festivals` table. Do use the column name `Category` instead of `category` while maintaining the same case sensitivity. The amended query now correctly queries the intended table with the proper column naming convention."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, COUNT(*) FROM festivals GROUP BY category;",
            "SELECT Category, COUNT(*) AS count FROM music_festival GROUP BY Category;"
        ],
        "rule_sql": []
    },
    "2476": {
        "db_id": "movie_1",
        "question": "Find the names of all reviewers who rated Gone with the Wind.",
        "ground_truth": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
        "amends": [
            "Do use `SELECT DISTINCT T3.name` instead of `SELECT name` to eliminate duplicate reviewer names. Do join three tables `Rating AS T1`, `Movie AS T2`, and `Reviewer AS T3` instead of querying only the `reviewers` table. Do add join conditions `T1.mID = T2.mID` and `T1.rID = T3.rID` instead of missing proper table relationships. Do filter on `T2.title = 'Gone with the Wind'` instead of `movie_title = 'Gone with the Wind'` to use the correct column name from the Movie table. The amended query now correctly identifies reviewers who rated the specific movie through proper table joins and distinct selection."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM reviewers WHERE movie_title = 'Gone with the Wind';",
            "SELECT DISTINCT T3.name\nFROM Rating AS T1\nJOIN Movie AS T2 ON T1.mID = T2.mID\nJOIN Reviewer AS T3 ON T1.rID = T3.rID\nWHERE T2.title = 'Gone with the Wind'"
        ],
        "rule_sql": []
    },
    "5202": {
        "db_id": "music_2",
        "question": "What are all the instruments used?",
        "ground_truth": "SELECT DISTINCT instrument FROM Instruments",
        "amends": [
            "Do specify `instrument` instead of `*` in the SELECT list, do add `DISTINCT` instead of omitting it, do use proper table name `Instruments` instead of `instruments`, and do remove the `WHERE id = 1` filter instead of keeping it. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM instruments WHERE id = 1;",
            "SELECT DISTINCT Instrument FROM Instruments;"
        ],
        "rule_sql": []
    },
    "1960": {
        "db_id": "products_for_hire",
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "ground_truth": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "amends": [
            "Do join `discount_coupons` as `T2` on `T1.coupon_id = T2.coupon_id` instead of querying only the `customers` table. Do filter on `T2.coupon_amount = 500` instead of filtering `coupon_amount` directly from the customers table. Do select `T1.good_or_bad_customer` instead of using a CASE expression to derive `customer_status` from coupon amounts. Do remove the CASE expression logic entirely instead of attempting to classify customer status based on coupon values. The amended query now correctly joins to the discount_coupons table to validate coupon amounts and retrieves the pre-defined customer status classification, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN coupon_amount = 500 THEN 'bad'\n        ELSE 'good'\n    END AS customer_status\nFROM customers\nWHERE coupon_amount = 500;",
            "SELECT DISTINCT T1.good_or_bad_customer\nFROM Customers T1\nJOIN Discount_Coupons T2 ON T1.coupon_id = T2.coupon_id\nWHERE T2.coupon_amount = 500"
        ],
        "rule_sql": []
    },
    "4722": {
        "db_id": "department_store",
        "question": "Give the product id for the product that was ordered most frequently.",
        "ground_truth": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do query the `order_items` table instead of the `orders` table to correctly analyze product-level data. The amended query now matches RIGHT_SQL's behavior by using the appropriate data source for product information."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_id FROM orders GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT product_id\nFROM Order_Items\nGROUP BY product_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5496": {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "ground_truth": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "amends": [
            "Do `JOIN VOTING_RECORD` on `T1.StuID = PRESIDENT_Vote` instead of filtering with `president_votes > 0`. Do use `EXCEPT` to exclude records instead of filtering with `advisor_id != 2192`. Do reference `T1.LName` from the `STUDENT` table instead of `last_name` from `students`. Do use table alias `T1` for `STUDENT` instead of no alias. Do filter with `Advisor = \"2192\"` as a string comparison instead of `advisor_id != 2192` as a numeric comparison. Do maintain `DISTINCT` in both the main query and the EXCEPT clause instead of a single DISTINCT. The amended query now correctly identifies students who voted for president while excluding those with advisor 2192, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT last_name FROM students WHERE president_votes > 0 AND advisor_id != 2192;",
            "SELECT DISTINCT T1.LName FROM Student T1 JOIN Voting_record ON T1.StuID = Voting_record.President_Vote EXCEPT SELECT DISTINCT T1.LName FROM Student T1 WHERE T1.Advisor = '2192'"
        ],
        "rule_sql": []
    },
    "1104": {
        "db_id": "match_season",
        "question": "What are the names of teams that do no have match season record?",
        "ground_truth": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "amends": [
            "Do reference the `Name` column instead of `team_name` and use table `team` instead of `teams`. Do use `Team_id` instead of `team_id` in the main query's WHERE clause. Do reference `Team` instead of `team_id` in the subquery's SELECT list and use table `match_season` instead of `match_season_records`. The amended query now correctly identifies teams without matches by checking against the appropriate team identifier column in the subquery."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE team_id NOT IN (SELECT team_id FROM match_season_records);",
            "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
        ],
        "rule_sql": []
    },
    "3359": {
        "db_id": "sports_competition",
        "question": "What is the average points of players from club with name \"AIB\".",
        "ground_truth": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"",
        "amends": [
            "Do reference the `club` table as `T1` and `player` table as `T2` instead of only using the `players` table. Do join `T1.Club_ID = T2.Club_ID` instead of filtering directly on club name. Do select `avg(T2.Points)` instead of `AVG(goals)` to use the correct column name. Do filter on `T1.name = \"AIB\"` in the WHERE clause instead of `club_name = 'AIB'` to properly reference the joined table. The amended query now correctly calculates average points for players belonging to club AIB by properly joining the club and player tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(goals) FROM players WHERE club_name = 'AIB';",
            "SELECT AVG(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = 'AIB'"
        ],
        "rule_sql": []
    },
    "4693": {
        "db_id": "college_3",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "ground_truth": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "amends": [
            "Do add table `FACULTY AS T1` and `MEMBER_OF AS T2` with an `INNER JOIN` on `T1.FacID = T2.FacID` instead of querying only the `faculties` table. Do change the column selection to `T1.Fname` and `T1.Lname` instead of `first_name` and `last_name`. Do move the department filter to `T2.DNO = 520` in the WHERE clause instead of `department_number = 520` on the original table. The amended query now correctly joins faculty with their department membership and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM faculties WHERE department_number = 520",
            "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 INNER JOIN Member_of AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520"
        ],
        "rule_sql": []
    },
    "2714": {
        "db_id": "storm_record",
        "question": "List the name for storms and the number of affected regions for each storm.",
        "ground_truth": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
        "amends": [
            "Do join `storm AS T1` with `affected_region AS T2` on `T1.storm_id = T2.storm_id` instead of querying only the `storms` table without any join. Do select `T1.name` instead of `storm_name` and remove the alias `affected_regions` instead of keeping it. Do group by `T1.storm_id` instead of `storm_name` to ensure proper aggregation across the joined tables. The amended query now correctly counts affected regions per storm by joining the related tables and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT storm_name, COUNT(*) as affected_regions FROM storms GROUP BY storm_name;",
            "SELECT T1.Name, COUNT(T2.Region_id) AS Number_of_affected_regions\nFROM storm AS T1\nJOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID\nGROUP BY T1.Storm_ID"
        ],
        "rule_sql": []
    },
    "5075": {
        "db_id": "device",
        "question": "What is the name of the shop that has the greatest quantity of devices in stock?",
        "ground_truth": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "amends": [
            "Do select `T2.Shop_Name` instead of `name` to use the correct column name from the joined table. Do use `FROM stock AS T1 JOIN shop AS T2` instead of `FROM shops` to properly join the stock and shop tables. Do add `ON T1.Shop_ID = T2.Shop_ID` instead of omitting the join condition to correctly relate the tables. Do add `GROUP BY T1.Shop_ID` instead of omitting grouping to aggregate stock quantities per shop. Do order by `SUM(T1.quantity) DESC` instead of `stock_quantity DESC` to sort by the total stock quantity sum rather than a single column. The amended query now correctly calculates and returns the shop with the highest total stock quantity."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM shops ORDER BY stock_quantity DESC LIMIT 1;",
            "SELECT T2.Shop_Name\nFROM stock AS T1\nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID\nGROUP BY T1.Shop_ID\nORDER BY SUM(T1.Quantity) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6474": {
        "db_id": "scientist_1",
        "question": "Count the number of different scientists assigned to any project.",
        "ground_truth": "SELECT count(DISTINCT scientist) FROM assignedto",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM scientists;"
        ],
        "rule_sql": []
    },
    "3499": {
        "db_id": "hr_1",
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "ground_truth": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "amends": [
            "Do reference `department_id` instead of `department` in both the outer query filter and subquery column selection. Do use double quotes `\"Clara\"` instead of single quotes `'Clara'` for the string literal comparison. The amended query now correctly matches employees by department_id rather than department name, ensuring proper relational integrity and matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, hire_date FROM employees WHERE department = (SELECT department FROM employees WHERE first_name = 'Clara')",
            "SELECT e.FIRST_NAME, e.LAST_NAME, e.HIRE_DATE \nFROM employees e \nWHERE e.DEPARTMENT_ID = (\n    SELECT DEPARTMENT_ID \n    FROM employees \n    WHERE FIRST_NAME = \"Clara\"\n)"
        ],
        "rule_sql": []
    },
    "2076": {
        "db_id": "party_people",
        "question": "Return the names of parties that have two or more events.",
        "ground_truth": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "amends": [
            "Do use `T2.party_name` from the `party` table instead of `party_name` from an undefined source. Do join `party_events AS T1` with `party AS T2` on `T1.party_id = T2.party_id` instead of querying a single `parties` table. Do add proper `GROUP BY T1.party_id` instead of attempting to aggregate without grouping. Do move the count condition to `HAVING count(*) >= 2` instead of placing it in the `WHERE` clause where aggregate functions cannot be used. The amended query now correctly identifies parties with at least two events by properly joining the relevant tables and using HAVING for aggregate filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party_name FROM parties WHERE COUNT(event_id) >= 2",
            "SELECT T2.Party_name \nFROM party_events AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nGROUP BY T1.Party_ID \nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "2151": {
        "db_id": "local_govt_in_alabama",
        "question": "How many events did not have any participants?",
        "ground_truth": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
        "amends": [
            "Do filter by `event_id NOT IN` a subquery selecting from `Participants_in_Events` instead of checking `participant_id IS NULL`. Do use the subquery `SELECT event_id FROM Participants_in_Events` to identify events without participants instead of relying on a null check in the main table. The amended query now correctly identifies events that have no associated participants by checking against the join table rather than assuming null values indicate missing relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE participant_id IS NULL;",
            "SELECT COUNT(*) \nFROM Events \nWHERE Event_ID NOT IN (SELECT Event_ID FROM Participants_in_Events)"
        ],
        "rule_sql": []
    },
    "3363": {
        "db_id": "sports_competition",
        "question": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "ground_truth": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "amends": [
            "Do select only `position` instead of selecting both `position` and `AVG(points)` with an alias. Do use `HAVING avg(Points) >= 20` instead of `WHERE avg_points > 20` to filter aggregate results after grouping. Do group by `name` instead of `position` to aggregate at the player level. Do use `>=` comparison instead of `>` for the threshold condition. Do reference the table as `player` instead of `players` and the column as `Points` instead of `points`. The amended query now correctly filters aggregated results using HAVING instead of WHERE and matches the intended behavior.",
            "Do group by `name` instead of `Position` in the GROUP BY clause, and do select `POSITION` (case-insensitive) instead of `Position` in the SELECT list, while keeping the HAVING condition `avg(Points) >= 20` unchanged. The amended query now correctly groups by player name while selecting their position and filtering for those with average points of at least 20, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position, AVG(points) as avg_points \nFROM players \nWHERE avg_points > 20 \nGROUP BY position",
            "SELECT Position FROM player GROUP BY Position HAVING AVG(Points) >= 20",
            "SELECT Position FROM player GROUP BY name HAVING AVG(Points) >= 20"
        ],
        "rule_sql": []
    },
    "5577": {
        "db_id": "products_gen_characteristics",
        "question": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?",
        "ground_truth": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "amends": [
            "Do add joins to `product_characteristics`, `CHARACTERISTICS`, and `ref_colors` tables instead of querying only the `products` table. Do use proper join conditions with `ON t1.product_id = t2.product_id`, `ON t2.characteristic_id = t3.characteristic_id`, and `ON t1.color_code = t4.color_code` instead of missing these relationships entirely. Do reference `t4.color_description = \"white\"` instead of directly filtering `color = 'white'` without the color lookup table. Do reference `t3.characteristic_name = \"hot\"` instead of directly filtering `characteristic_name = 'hot'` without the proper characteristic table join. Do use table aliases `t1`, `t2`, `t3`, and `t4` for clarity instead of no aliases. The amended query now correctly joins the necessary lookup tables to properly filter by color description and characteristic name, matching the intended behavior.",
            "Do use `count(*)` instead of `COUNT(DISTINCT t1.product_id)` to count all matching rows rather than distinct products. Do use `JOIN` instead of `LEFT JOIN` for all table connections to ensure only matching records are included. Do use double quotes `\"white\"` and `\"hot\"` instead of single quotes for string literals. Do remove the unnecessary table aliases from the SELECT clause since only a count is needed. The amended query now correctly counts all products that are either white or have the 'hot' characteristic, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE color = 'white' OR characteristic_name = 'hot';",
            "SELECT COUNT(DISTINCT t1.product_id)\nFROM Products t1\nLEFT JOIN Product_Characteristics t2 ON t1.product_id = t2.product_id\nLEFT JOIN Characteristics t3 ON t2.characteristic_id = t3.characteristic_id\nLEFT JOIN Ref_Colors t4 ON t1.color_code = t4.color_code\nWHERE t4.color_description = 'white' OR t3.characteristic_name = 'hot';",
            "SELECT COUNT(*)\nFROM Products t1\nJOIN Ref_Colors t4 ON t1.color_code = t4.color_code\nJOIN Product_Characteristics t2 ON t1.product_id = t2.product_id\nJOIN Characteristics t3 ON t2.characteristic_id = t3.characteristic_id\nWHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\""
        ],
        "rule_sql": []
    },
    "909": {
        "db_id": "insurance_fnol",
        "question": "What is the name of the customer who has the most policies listed?",
        "ground_truth": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add `JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id` instead of querying only the `customers` table. Do add `GROUP BY t1.customer_name` instead of omitting grouping. Do change the ORDER BY to `count(*) DESC` instead of `policy_count DESC` to properly count policies per customer. Do add table alias `t1` to `customer_name` instead of using the bare column name. The amended query now correctly joins the policies table, groups by customer, and orders by the actual count of policies to identify the customer with the most policies."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers ORDER BY policy_count DESC LIMIT 1;",
            "SELECT t1.Customer_name\nFROM Customers AS t1\nJOIN Customers_Policies AS t2 ON t1.Customer_ID = t2.Customer_ID\nGROUP BY t1.Customer_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4338": {
        "db_id": "tracking_grants_for_research",
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "ground_truth": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
        "amends": [
            "Do select `project_details` instead of `*` to return only specific columns. Do use table name `Projects` instead of `projects` with proper casing. Do change the filter to `project_id NOT IN` subquery instead of `researcher_count = 0` to correctly identify projects without researchers. Do add a correlated subquery checking `Project_Staff` table for `role_code = 'researcher'` instead of relying on a direct count column. Do remove the incorrect `researcher_count` column reference and instead use proper relational logic through the staff assignment table. The amended query now correctly identifies projects that have no researcher staff members by checking the actual staff assignments rather than relying on a potentially incorrect count field."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM projects WHERE researcher_count = 0;",
            "SELECT project_details FROM Projects WHERE project_id NOT IN (SELECT DISTINCT project_id FROM Project_Staff WHERE role_code = 'researcher');"
        ],
        "rule_sql": []
    },
    "3299": {
        "db_id": "college_1",
        "question": "What is the department name of the students with lowest gpa belongs to?",
        "ground_truth": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
        "amends": [
            "Do select `T2.dept_name` instead of `department_name` to reference the correct table alias. Do join `student AS T1` with `department AS T2` instead of querying only the `students` table to establish the proper relationship. Do use the join condition `T1.dept_code = T2.dept_code` instead of omitting any table connection to properly link student records with their departments. Do order by `stu_gpa` instead of `gpa` to reference the correct column name from the student table. The amended query now correctly retrieves the department name for the student with the lowest GPA by properly joining the tables and using the correct column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name FROM students ORDER BY gpa ASC LIMIT 1;",
            "SELECT T2.DEPT_NAME\nFROM STUDENT AS T1\nJOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE\nORDER BY T1.STU_GPA ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "719": {
        "db_id": "customers_card_transactions",
        "question": "Show all card type codes and the number of cards in each type.",
        "ground_truth": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "amends": [
            "Do reference `card_type_code` instead of `card_type` in the SELECT list. Do use `Customers_cards` as the table source instead of `cards`. Do group by `card_type_code` instead of `card_id` to properly aggregate counts by card type categories. The amended query now correctly counts records grouped by card type codes rather than individual card identifiers, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT card_type, COUNT(*) FROM cards GROUP BY card_id;",
            "SELECT card_type_code, COUNT(*) AS number_of_cards FROM Customers_Cards GROUP BY card_type_code;"
        ],
        "rule_sql": []
    },
    "4315": {
        "db_id": "club_1",
        "question": "Find the average age of the members in the club \"Bootup Baltimore\".",
        "ground_truth": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "amends": [
            "Do specify `avg(t3.age)` with table alias instead of `AVG(age)` without qualification. Do add `FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid` with explicit table joins instead of `FROM members` with a single table. Do change the filter to `t1.clubname = \"Bootup Baltimore\"` with proper table qualification and double quotes instead of `club_name = 'Bootup Baltimore'` with incorrect column name and single quotes. The amended query now correctly joins the necessary tables to calculate the average age of students in the specified club, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM members WHERE club_name = 'Bootup Baltimore';",
            "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.ClubID = t2.ClubID JOIN student AS t3 ON t2.StuID = t3.StuID WHERE t1.ClubName = \"Bootup Baltimore\""
        ],
        "rule_sql": []
    },
    "2610": {
        "db_id": "inn_1",
        "question": "Find the number of rooms for each bed type.",
        "ground_truth": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
        "amends": [
            "Do reference the `bedType` column instead of `bed_type` and group by `bedType` instead of `room_id` to correctly count rooms by bed type rather than producing per-room counts. Do use the correct table name `Rooms` instead of `rooms` to match the actual schema. The amended query now correctly aggregates room counts by bed type categories as intended."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bed_type, COUNT(*) FROM rooms GROUP BY room_id;",
            "SELECT bedType, COUNT(*) AS room_count FROM Rooms GROUP BY bedType"
        ],
        "rule_sql": []
    },
    "824": {
        "db_id": "chinook_1",
        "question": "Find the name of the artist who made the album \"Balls to the Wall\".",
        "ground_truth": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "amends": [
            "Do join `ALBUM AS T1` and `ARTIST AS T2` instead of querying only the `artists` table. Do use `T1.ArtistId = T2.ArtistId` as the join condition instead of missing the table relationship entirely. Do select `T2.Name` from the joined table instead of `name` from a single table. Do filter on `T1.Title = \"Balls to the Wall\"` instead of `album_name = 'Balls to the Wall'` using the correct column name and table alias. The amended query now correctly retrieves artist names by joining the album and artist tables with proper relationship conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM artists WHERE album_name = 'Balls to the Wall';",
            "SELECT T2.Name \nFROM Album AS T1 \nJOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId \nWHERE T1.Title = \"Balls to the Wall\""
        ],
        "rule_sql": []
    },
    "5623": {
        "db_id": "swimming",
        "question": "Find the name of the swimmer who has the most records.",
        "ground_truth": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do specify `t1.name` with table alias instead of just `name` without qualification. Do add `FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id` instead of omitting the join and table sources. Do add `GROUP BY t2.swimmer_id` instead of omitting the grouping clause. Do keep `ORDER BY COUNT(*) DESC LIMIT 1` as it correctly orders by the count of records per swimmer and limits to the top result. The amended query now correctly joins the swimmer and record tables, groups by swimmer to count their records, and returns the name of the swimmer with the most records, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM swimmers ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.ID = t2.Swimmer_ID GROUP BY t2.Swimmer_ID ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "1259": {
        "db_id": "apartment_rentals",
        "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.",
        "ground_truth": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "amends": [
            "Do select `apt_type_code`, `bathroom_count`, and `bedroom_count` instead of `apartment_type_code`, `bathrooms`, and `bedrooms`. Do use `sum(room_count)` in the ORDER BY clause instead of `COUNT(*) as total_rooms`. Do remove the alias `total_rooms` from the SELECT list instead of including it. Do change the table name from `apartments` to `Apartments` instead of keeping the original. The amended query now correctly aggregates room counts by apartment type and orders by the total room sum rather than counting records, matching the intended behavior.",
            "Do group by only `apt_type_code` instead of grouping by `apt_type_code, bathroom_count, bedroom_count`. Do use `sum(room_count)` directly instead of `SUM(CAST(room_count AS INTEGER))` for the ordering. Do remove the explicit casting since the aggregation handles numeric conversion appropriately. The amended query now correctly aggregates by apartment type and orders by the total room count sum for each type, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT apartment_type_code, bathrooms, bedrooms, COUNT(*) as total_rooms \nFROM apartments \nGROUP BY apartment_type_code \nORDER BY total_rooms DESC \nLIMIT 1;",
            "SELECT apt_type_code, bathroom_count, bedroom_count\nFROM Apartments\nGROUP BY apt_type_code, bathroom_count, bedroom_count\nORDER BY SUM(CAST(room_count AS INTEGER)) DESC\nLIMIT 1;",
            "SELECT apt_type_code, bathroom_count, bedroom_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY SUM(room_count) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4247": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Which employees do not destroy any document? Find their employee ids.",
        "ground_truth": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "amends": [
            "Do use `EXCEPT` to exclude destroyed documents instead of filtering with `WHERE document_destroyed = 0`. Do reference the `Destroyed_by_Employee_ID` column from the `Documents_to_be_destroyed` table instead of checking a `document_destroyed` flag. Do query from the `Employees` table instead of `employees` and join with the destruction records table instead of relying on a single table approach. The amended query now correctly identifies employees who haven't destroyed documents by using set operations instead of potentially incomplete flag-based filtering, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT employee_id FROM employees WHERE document_destroyed = 0",
            "SELECT Employee_ID FROM Employees\nEXCEPT\nSELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Destroyed_by_Employee_ID IS NOT NULL"
        ],
        "rule_sql": []
    },
    "1781": {
        "db_id": "small_bank_1",
        "question": "Find the total balance across checking accounts.",
        "ground_truth": "SELECT sum(balance) FROM checking",
        "amends": [
            "Do reference table `checking` instead of `accounts` in the FROM clause. Do remove the WHERE filter `account_type = 'savings'` instead of keeping it. The amended query now correctly sums all balances from the checking table without unnecessary filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(balance) FROM accounts WHERE account_type = 'savings';",
            "SELECT SUM(balance) FROM CHECKING;"
        ],
        "rule_sql": []
    },
    "806": {
        "db_id": "coffee_shop",
        "question": "Which months have more than 2 happy hours?",
        "ground_truth": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
        "amends": [
            "Do reference the table as `happy_hour` instead of `happy_hours` in the FROM clause. Do include only the `MONTH` column in the SELECT list instead of both `month` and `COUNT(*)`. Do use uppercase `MONTH` for column references instead of lowercase `month` throughout the query. The amended query now correctly identifies months with more than 2 records from the happy_hour table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT month, COUNT(*) FROM happy_hours GROUP BY month HAVING COUNT(*) > 2",
            "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2"
        ],
        "rule_sql": []
    },
    "1339": {
        "db_id": "college_2",
        "question": "Count the number of departments which offer courses.",
        "ground_truth": "SELECT count(DISTINCT dept_name) FROM course",
        "amends": [
            "Do select `count(DISTINCT dept_name)` instead of `COUNT(*)` to count unique department names rather than all rows. Do query from the `course` table instead of the `departments` table to access the correct data source. Do remove the `WHERE course_id IS NOT NULL` filter instead of keeping it since the count should include all courses regardless of course_id status. The amended query now correctly counts distinct department names from the course table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM departments WHERE course_id IS NOT NULL;",
            "SELECT COUNT(DISTINCT dept_name) FROM course;"
        ],
        "rule_sql": []
    },
    "1556": {
        "db_id": "customers_and_invoices",
        "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
        "ground_truth": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
        "amends": [
            "Do specify columns `account_name` and `other_account_details` instead of selecting all columns with `*`. Do join `Accounts` with `Customers` on `customer_id` instead of querying only the `accounts` table. Do filter on `customer_first_name` and `customer_last_name` in the `Customers` table instead of using a single `customer_name` field in the `Accounts` table. The amended query now correctly joins related tables and uses proper name fields to match the intended customer."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM accounts WHERE customer_name = 'Meaghan Keeling';",
            "SELECT a.account_name, a.other_account_details\nFROM Accounts a\nJOIN Customers c ON a.customer_id = c.customer_id\nWHERE c.customer_first_name = 'Meaghan' AND c.customer_last_name = 'Keeling';"
        ],
        "rule_sql": []
    },
    "2703": {
        "db_id": "storm_record",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "ground_truth": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "amends": [
            "Do reference the correct table name `storm` instead of `storms`. Do use the correct column name `damage_millions_USD` instead of `damage_millions` for both aggregate functions. Do maintain the same filter condition `max_speed > 1000` in the WHERE clause. The amended query now correctly calculates average and maximum damage in USD from the appropriate table while preserving the high-speed storm filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(damage_millions), MAX(damage_millions) FROM storms WHERE max_speed > 1000;",
            "SELECT AVG(Damage_millions_USD) AS average_damage, MAX(Damage_millions_USD) AS maximum_damage FROM storm WHERE Max_speed > 1000"
        ],
        "rule_sql": []
    },
    "451": {
        "db_id": "allergy_1",
        "question": "How many allergies have type animal?",
        "ground_truth": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "amends": [
            "Do reference table `Allergy_type` instead of `allergies` and use column `allergytype` instead of `type` for filtering. Do use double quotes `\"animal\"` instead of single quotes `'animal'` for the string literal value. The amended query now correctly counts records from the appropriate table with the specified allergy type filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM allergies WHERE type = 'animal';",
            "SELECT COUNT(*) FROM Allergy_Type WHERE AllergyType = \"animal\";"
        ],
        "rule_sql": []
    },
    "2963": {
        "db_id": "sakila_1",
        "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
        "ground_truth": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category.name FROM category JOIN film_category ON category.category_id = film_category.category_id JOIN film ON film_category.film_id = film.film_id WHERE film.title = 'HUNGER ROOF';"
        ],
        "rule_sql": []
    },
    "4454": {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Bob.",
        "ground_truth": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of bare table references. Do join `Person` and `PersonFriend` tables with `JOIN` on `T1.name = T2.name` instead of querying a single `persons` table. Do filter on `T2.friend = 'Bob'` instead of `friend_name = 'Bob'` to reference the correct column from the joined table. Do select `T1.name` from the Person table instead of just `name` to be explicit about the source table. The amended query now correctly models the relationship between persons and their friends through a proper join structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM persons WHERE friend_name = 'Bob';",
            "SELECT T1.name FROM Person T1 JOIN PersonFriend T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'"
        ],
        "rule_sql": []
    },
    "2180": {
        "db_id": "formula_1",
        "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?",
        "ground_truth": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "amends": [
            "Do use `INTERSECT` to find drivers who participated in both races instead of `OR` which finds drivers in either race. Do join through `results` table using `raceid` instead of directly joining `drivers` to `races` on `driver_id`. Do reference columns as `driverid` and `forename` instead of `id` and `first_name`. Do filter on `name` column instead of `race_name`. Do use double quotes for string literals instead of single quotes. Do add table aliases `T1`, `T2`, and `T3` for clarity instead of minimal aliasing. The amended query now correctly identifies drivers who competed in both the Australian and Chinese Grand Prix races."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.id, d.first_name \nFROM drivers d \nJOIN races r ON d.id = r.driver_id \nWHERE r.race_name = 'Australian Grand Prix' \nOR r.race_name = 'Chinese Grand Prix';",
            "SELECT T1.driverId, T1.forename\nFROM drivers T1\nJOIN results T2 ON T1.driverId = T2.driverId\nJOIN races T3 ON T2.raceId = T3.raceId\nWHERE T3.name = \"Australian Grand Prix\"\nINTERSECT\nSELECT T1.driverId, T1.forename\nFROM drivers T1\nJOIN results T2 ON T1.driverId = T2.driverId\nJOIN races T3 ON T2.raceId = T3.raceId\nWHERE T3.name = \"Chinese Grand Prix\""
        ],
        "rule_sql": []
    },
    "6074": {
        "db_id": "customers_and_addresses",
        "question": "Which customer's name contains \"Alex\"? Find the full name.",
        "ground_truth": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "amends": [
            "Do reference `customer_name` in the SELECT list and WHERE clause instead of `first_name` to correctly match the column name in the table schema. This amendment ensures the query properly filters and returns the intended customer names containing 'Alex' rather than attempting to access a non-existent `first_name` column. The amended query now matches RIGHT_SQL's behavior by using the correct column name throughout."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers WHERE first_name LIKE '%Alex%';",
            "SELECT customer_name FROM Customers WHERE customer_name LIKE '%Alex%';"
        ],
        "rule_sql": []
    },
    "3021": {
        "db_id": "loan_1",
        "question": "What are the names of all customers, ordered by account balance?",
        "ground_truth": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "amends": [
            "Do select `cust_name` instead of `name` and do order by `acc_bal` instead of `name ASC`. Do use table `customer` instead of `customers`. The amended query now correctly retrieves customer names ordered by account balance from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers ORDER BY name ASC;",
            "SELECT cust_name FROM customer ORDER BY acc_bal"
        ],
        "rule_sql": []
    },
    "1392": {
        "db_id": "college_2",
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "ground_truth": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "amends": [
            "Do reference table `classroom` instead of `rooms` in the FROM clause. Do place the `building` column after the aggregate function instead of before it in the SELECT list. Do use `count(*)` instead of `COUNT(*)` for the aggregate function syntax. The amended query now correctly counts rooms with capacity over 50 grouped by building from the classroom table.",
            "Do place the `building` column after `count(*)` in the SELECT list instead of before it, maintaining the same aggregation logic and grouping structure. The amended query now matches RIGHT_SQL's behavior with identical output results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building, COUNT(*) FROM rooms WHERE capacity > 50 GROUP BY building;",
            "SELECT building, count(*) FROM classroom WHERE capacity > 50 GROUP BY building;",
            "SELECT count(*), building FROM classroom WHERE capacity > 50 GROUP BY building"
        ],
        "rule_sql": []
    },
    "4161": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Count the number of all the calendar items.",
        "ground_truth": "SELECT count(*) FROM Ref_calendar",
        "amends": [
            "Do reference table `Ref_calendar` instead of `calendar_items` to use the correct data source. Do remove the `WHERE id > 0` filter instead of keeping it to count all records without unnecessary filtering. The amended query now correctly counts all entries in the Ref_calendar table as intended."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM calendar_items WHERE id > 0;",
            "SELECT COUNT(*) FROM Ref_Calendar;"
        ],
        "rule_sql": []
    },
    "4296": {
        "db_id": "club_1",
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "ground_truth": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "amends": [
            "Do use explicit table aliases `t3.fname` and `t3.lname` instead of direct column names `first_name` and `last_name`. Do join three tables `club AS t1`, `member_of_club AS t2`, and `student AS t3` instead of querying a single `members` table. Do use `INNER JOIN` with proper join conditions `t1.clubid = t2.clubid` and `t2.stuid = t3.stuid` instead of no joins. Do filter on `t1.clubname = \"Hopkins Student Enterprises\"` instead of `club_name = 'Hopkins Student Enterprises'`. Do filter on `t2.position = \"CTO\"` instead of `position = 'CEO'`. The amended query now correctly retrieves student names for the CTO position of the specified club through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM members WHERE club_name = 'Hopkins Student Enterprises' AND position = 'CEO';",
            "SELECT t3.Fname, t3.Lname \nFROM Club AS t1 \nINNER JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID \nINNER JOIN Student AS t3 ON t2.StuID = t3.StuID \nWHERE t1.ClubName = 'Hopkins Student Enterprises' \nAND t2.Position = 'CTO'"
        ],
        "rule_sql": []
    },
    "6379": {
        "db_id": "flight_company",
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "ground_truth": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
        "amends": [
            "Do use `INTERSECT` to find pilots who work for both service types instead of joining multiple tables with the same aliases. Do reference `operate_company` and `flight` tables instead of `pilots`, `flights`, and `companies`. Do filter on `principal_activities` instead of `service_type`. Do select `pilot` column instead of `name`. Do use proper table aliases `T1` and `T2` instead of `p`, `f1`, `c1`, `f2`, `c2`. Do remove the redundant join pattern that created duplicate company checks and instead use set intersection to find pilots serving both cargo and catering services. The amended query now correctly identifies pilots who work for companies with both principal activities using proper table relationships and set operations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name \nFROM pilots p\nJOIN flights f1 ON p.pilot_id = f1.pilot_id\nJOIN companies c1 ON f1.company_id = c1.company_id\nJOIN flights f2 ON p.pilot_id = f2.pilot_id\nJOIN companies c2 ON f2.company_id = c2.company_id\nWHERE c1.service_type = 'Cargo' \nAND c2.service_type = 'Catering services';",
            "SELECT T1.pilot\nFROM flight T1\nJOIN operate_company T2 ON T1.company_id = T2.id\nWHERE T2.Principal_activities = 'Cargo'\nINTERSECT\nSELECT T1.pilot\nFROM flight T1\nJOIN operate_company T2 ON T1.company_id = T2.id\nWHERE T2.Principal_activities = 'Catering services'"
        ],
        "rule_sql": []
    },
    "4894": {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "ground_truth": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "amends": [
            "Do use `INTERSECT` to find denominations that meet both conditions instead of `OR` which finds denominations meeting either condition. Do reference the table as `school` instead of `schools` and use proper column casing with `Denomination` and `Founded` instead of lowercase `denomination` and `founded`. Do structure the query as two separate `SELECT` statements with `INTERSECT` instead of a single query with `OR` logic, ensuring only denominations that have both founding dates before 1890 AND after 1900 are returned. The amended query now correctly identifies denominations with schools founded both before 1890 and after 1900, matching the RIGHT_SQL's intersection behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT denomination FROM schools WHERE founded < 1890 OR founded > 1900;",
            "SELECT Denomination FROM school WHERE Founded < 1890\nINTERSECT\nSELECT Denomination FROM school WHERE Founded > 1900"
        ],
        "rule_sql": []
    },
    "5724": {
        "db_id": "dorm_1",
        "question": "Find the number of students in each major.",
        "ground_truth": "SELECT count(*) ,  major FROM student GROUP BY major",
        "amends": [
            "Do select `major` and `COUNT(*)` instead of `major` and `COUNT(*)` with incorrect grouping. Do group by `major` instead of grouping by `student_id`, which incorrectly aggregates by individual students rather than by academic majors. Do use the correct table name `student` instead of the incorrect pluralized `students`. The amended query now properly counts students by their academic majors rather than producing incorrect per-student counts, matching the intended behavior of counting students grouped by major.",
            "Do place `major` after the aggregate function instead of before it in the SELECT list. Do use `count(*)` without a space instead of `COUNT(*)` with uppercase. Do reference the table as `student` in lowercase instead of `Student` with uppercase. The amended query now correctly groups by major and counts students per major, matching the intended behavior.",
            "Do place the `major` column after the aggregate function instead of before it in the SELECT list. Do maintain the same `COUNT(*)` aggregate function and `GROUP BY major` clause without changes. The amended query now correctly follows standard SQL syntax where non-aggregated columns should appear after aggregate functions in the SELECT list when using GROUP BY, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT major, COUNT(*) FROM students GROUP BY student_id;",
            "SELECT major, COUNT(*) FROM Student GROUP BY major;",
            "SELECT major, COUNT(*) FROM student GROUP BY major",
            "SELECT COUNT(*), major FROM student GROUP BY major"
        ],
        "rule_sql": []
    },
    "4080": {
        "db_id": "student_1",
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "ground_truth": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "amends": [
            "Do count `DISTINCT classroom` instead of counting all classroom values without distinct. Do count `*` to get total rows instead of summing `student_count` which may not represent actual row counts. Do use table `list` instead of `grades` as the data source. Do remove the column aliases `classroom_count` and `total_students` instead of keeping them. The amended query now correctly counts distinct classrooms per grade and total records per grade rather than potentially incorrect student count sums."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT grade, COUNT(classroom) as classroom_count, SUM(student_count) as total_students\nFROM grades\nGROUP BY grade;",
            "SELECT Grade, COUNT(DISTINCT Classroom) AS classroom_count, COUNT(*) AS total_students FROM list GROUP BY Grade;"
        ],
        "rule_sql": []
    },
    "4740": {
        "db_id": "department_store",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "ground_truth": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "amends": [
            "Do join `departments AS T1` with `department_stores AS T2` on `T1.dept_store_id = T2.dept_store_id` instead of querying `department_stores` alone. Do filter on `T1.department_name = \"marketing\"` and `T1.department_name = \"managing\"` in separate queries instead of filtering `department` column directly. Do use `INTERSECT` to find common department stores instead of using `OR` between department conditions. Do select `T2.dept_store_id` and `T2.store_name` instead of `id` and `name`. The amended query now correctly identifies department stores that have both marketing and managing departments through set intersection."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, name FROM department_stores WHERE department = 'marketing' OR department = 'managing';",
            "SELECT T2.dept_store_id, T2.store_name\nFROM departments AS T1\nJOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id\nWHERE T1.department_name = 'marketing'\nINTERSECT\nSELECT T2.dept_store_id, T2.store_name\nFROM departments AS T1\nJOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id\nWHERE T1.department_name = 'managing'"
        ],
        "rule_sql": []
    },
    "1753": {
        "db_id": "gymnast",
        "question": "What are the names of the five oldest people?",
        "ground_truth": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
        "amends": [
            "Do use column name `Name` instead of `name` and table name `People` instead of `people` to match proper case sensitivity. Do change the sort order to `DESC` instead of `ASC` to sort by descending age. The amended query now correctly selects from the People table with proper case handling and sorts results in descending age order as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people ORDER BY age ASC LIMIT 5;",
            "SELECT Name FROM People ORDER BY Age DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "3911": {
        "db_id": "hospital_1",
        "question": "What are the names of all the physicians who took appointments.",
        "ground_truth": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "amends": [
            "Do select `T2.name` from the `physician` table instead of `name` from the `physicians` table. Do join `appointment AS T1` with `physician AS T2` on `T1.Physician = T2.EmployeeID` instead of querying only the `physicians` table with a `WHERE appointment_id IS NOT NULL` filter. Do remove the incorrect `appointment_id IS NOT NULL` condition instead of keeping it, as the relationship is properly established through the join condition. The amended query now correctly retrieves physician names by joining the appointment and physician tables on the appropriate key relationship, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM physicians WHERE appointment_id IS NOT NULL;",
            "SELECT T2.Name \nFROM appointment AS T1 \nJOIN physician AS T2 ON T1.Physician = T2.EmployeeID \nGROUP BY T2.Name;"
        ],
        "rule_sql": []
    },
    "6985": {
        "db_id": "culture_company",
        "question": "Count the number of different directors.",
        "ground_truth": "SELECT COUNT (DISTINCT director) FROM movie",
        "amends": [
            "Do count `DISTINCT director` instead of counting all rows with `COUNT(*)`. Do reference table `movie` instead of `movies`. Do remove the `WHERE director IS NOT NULL` filter instead of keeping it, as counting distinct values inherently excludes nulls. The amended query now correctly counts unique directors rather than all movies with non-null directors, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE director IS NOT NULL;",
            "SELECT COUNT(DISTINCT Director) FROM movie;"
        ],
        "rule_sql": []
    },
    "4372": {
        "db_id": "tracking_grants_for_research",
        "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "ground_truth": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "amends": [
            "Do select `organisation_details` instead of `*` from the result set. Do join `Organisations AS T1` with `organisation_Types AS T2` instead of querying only the `organisations` table. Do use the join condition `T1.organisation_type = T2.organisation_type` instead of no join. Do filter on `T2.organisation_type_description = 'Sponsor'` instead of `description = 'Sponsor'`. Do order by `organisation_details` instead of `name DESC`. The amended query now correctly retrieves organization details by joining with the organization types table and filtering on the type description rather than the organization description field."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM organisations WHERE description = 'Sponsor' ORDER BY name DESC;",
            "SELECT T1.organisation_details \nFROM Organisations AS T1 \nJOIN Organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type \nWHERE T2.organisation_type_description = 'Sponsor' \nORDER BY T1.organisation_details ASC"
        ],
        "rule_sql": []
    },
    "3422": {
        "db_id": "hr_1",
        "question": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "ground_truth": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "amends": [
            "Do use `BETWEEN 8000 AND 12000` in the WHERE filter instead of `salary > 12000 OR salary < 8000` to correctly select employees with salaries within the specified range rather than those outside it. The amended query now matches RIGHT_SQL's behavior by returning phone numbers for employees earning between 8000 and 12000 inclusive."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number FROM employees WHERE salary > 12000 OR salary < 8000;",
            "SELECT PHONE_NUMBER FROM employees WHERE SALARY BETWEEN 8000 AND 12000;"
        ],
        "rule_sql": []
    },
    "5777": {
        "db_id": "customer_complaints",
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "ground_truth": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "amends": [
            "Do select `email_address` instead of `email` and remove the `products` table join instead of including it. Do remove the `WHERE` clause subquery that filtered by the most complained product instead of keeping it, and do change the `GROUP BY` to `customer_id` instead of `email`. Do add `ORDER BY count(*) LIMIT 1` to return only the customer with the most complaints instead of returning all customers with complaints. The amended query now correctly identifies the single customer with the highest number of complaints rather than all customers who complained about the most complained product.",
            "Do reference `email_address` in the SELECT list instead of grouping by `customer_id` without including it in GROUP BY. Do use `ORDER BY count(*)` without DESC instead of `ORDER BY COUNT(*) DESC` to get the customer with the fewest complaints rather than the most. Do use table aliases `t1` and `t2` consistently instead of mixed alias usage. The amended query now correctly returns the customer with the minimum number of complaints as specified in RIGHT_SQL.",
            "Do use `t1.email_address` instead of `c.email_address` for the column alias consistency. Do use `customers AS t1` and `complaints AS t2` instead of `Customers c` and `Complaints co` for table aliases. Do use `t1.customer_id = t2.customer_id` instead of `c.customer_id = co.customer_id` for the join condition to maintain alias consistency. Do use `ORDER BY count(*)` instead of `ORDER BY COUNT(*) DESC` to sort in ascending order by default instead of descending. The amended query now matches the RIGHT_SQL's behavior with consistent aliases and ascending order sorting.",
            "Do remove the `DESC` modifier from the `ORDER BY count(*)` clause instead of keeping it, which changes the sorting direction from descending to ascending order. The amended query now matches RIGHT_SQL's behavior by returning the customer with the fewest complaints rather than the most complaints."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.email \nFROM customers c\nJOIN complaints cm ON c.customer_id = cm.customer_id\nJOIN products p ON cm.product_id = p.product_id\nWHERE p.product_id = (SELECT product_id FROM complaints GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)\nGROUP BY c.email",
            "SELECT c.email_address\nFROM Customers c\nJOIN Complaints co ON c.customer_id = co.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT c.email_address\nFROM Customers c\nJOIN Complaints co ON c.customer_id = co.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT t1.email_address\nFROM Customers AS t1\nJOIN Complaints AS t2 ON t1.customer_id = t2.customer_id\nGROUP BY t1.customer_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
            "SELECT t1.email_address\nFROM Customers AS t1\nJOIN Complaints AS t2 ON t1.customer_id = t2.customer_id\nGROUP BY t1.customer_id\nORDER BY count(*) LIMIT 1"
        ],
        "rule_sql": []
    },
    "1974": {
        "db_id": "products_for_hire",
        "question": "How many products are never booked with amount higher than 200?",
        "ground_truth": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
        "amends": [
            "Do reference table `Products_for_hire` instead of `products` in the FROM clause. Do reference table `products_booked` instead of `bookings` in the subquery. Do use column `booked_amount` instead of `amount` in the subquery filter condition. Do maintain the same NOT IN subquery structure but with corrected table and column references. The amended query now correctly counts products from the hire catalog that haven't been booked for amounts exceeding 200, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM bookings WHERE amount > 200);",
            "SELECT COUNT(*) \nFROM Products_for_Hire\nWHERE product_id NOT IN (\n    SELECT DISTINCT product_id \n    FROM Products_Booked \n    WHERE booked_amount > 200\n)"
        ],
        "rule_sql": []
    },
    "963": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "ground_truth": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "amends": [
            "Do select `T1.id` and `T1.trade_name` instead of `medicine_id` and `trade_name`. Do join `medicine_enzyme_interaction AS T2` on `T2.medicine_id = T1.id` instead of querying only the `medicines` table. Do add `GROUP BY T1.id` and move the count condition to `HAVING COUNT(*) >= 3` instead of using `WHERE enzyme_count >= 3`. The amended query now correctly counts enzyme interactions per medicine and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medicine_id, trade_name FROM medicines WHERE enzyme_count >= 3;",
            "SELECT T1.id, T1.Trade_Name\nFROM medicine AS T1\nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id\nGROUP BY T1.id\nHAVING COUNT(*) >= 3"
        ],
        "rule_sql": []
    },
    "748": {
        "db_id": "race_track",
        "question": "Count the number of tracks.",
        "ground_truth": "SELECT count(*) FROM track",
        "amends": [
            "Do query the `track` table instead of the `albums` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency. The amended query now correctly counts records from the track table instead of the albums table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM albums;",
            "SELECT count(*) FROM track;"
        ],
        "rule_sql": []
    },
    "5154": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "ground_truth": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "amends": [
            "Do select `T1.City_Town` instead of `city` and remove the alias `drama_groups` instead of keeping it. Do join `Addresses AS T1` with `Drama_Workshop_Groups AS T2` on `T1.Address_ID = T2.Address_ID` instead of querying only `workshops` with a `WHERE type = 'drama'` filter. Do group by `T1.City_Town` instead of `city`. The amended query now correctly counts drama workshop groups by city/town through proper table relationships instead of relying on a type column filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as drama_groups FROM workshops WHERE type = 'drama' GROUP BY city;",
            "SELECT T1.City_Town, COUNT(*) AS drama_groups\nFROM Addresses AS T1\nJOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID\nGROUP BY T1.City_Town"
        ],
        "rule_sql": []
    },
    "210": {
        "db_id": "bike_1",
        "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?",
        "ground_truth": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "amends": [
            "Do join `station AS T1` and `trip AS T2` instead of querying `trips` directly. Do add `station AS T3` and `trip AS T4` with join conditions `T1.id = T2.start_station_id` and `T3.id = T4.end_station_id` instead of filtering on station names. Do filter on `T1.city = \"Mountain View\"` and `T3.city = \"Palo Alto\"` instead of filtering on `start_station` and `end_station` columns. Do add join condition `T2.id = T4.id` to properly relate the trips instead of omitting this relationship. The amended query now correctly counts trips between stations in the specified cities by properly joining the station and trip tables with appropriate relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trips WHERE start_station = 'Mountain View' AND end_station = 'Palo Alto';",
            "SELECT COUNT(*) \nFROM station AS T1 \nJOIN trip AS T2 ON T1.id = T2.start_station_id \nJOIN station AS T3 ON T3.id = T2.end_station_id \nWHERE T1.city = 'Mountain View' AND T3.city = 'Palo Alto'"
        ],
        "rule_sql": []
    },
    "1898": {
        "db_id": "school_finance",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "ground_truth": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "amends": [
            "Do select `donator_name` from the `endowment` table instead of `name` from the `donors` table. Do use `EXCEPT` to exclude records with `amount < 9` instead of using a simple `WHERE amount >= 9` filter. Do reference the correct table name `endowment` instead of `donors`. The amended query now correctly identifies donors who have contributed exactly $9 or more by excluding those with amounts less than 9, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM donors WHERE amount >= 9;",
            "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9"
        ],
        "rule_sql": []
    },
    "2234": {
        "db_id": "machine_repair",
        "question": "What is the number of technicians?",
        "ground_truth": "SELECT count(*) FROM technician",
        "amends": [
            "Do query the `technician` table instead of the `employees` table. Do filter for all records instead of filtering for `job_title = 'Manager'`. Do use lowercase `count(*)` instead of uppercase `COUNT(*)`."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE job_title = 'Manager';",
            "SELECT count(*) FROM technician;"
        ],
        "rule_sql": []
    },
    "6590": {
        "db_id": "wine_1",
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
        "ground_truth": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "amends": [
            "Do use exact column names `Grape`, `Winery`, and `YEAR` instead of lowercase variants `grapes`, `wineries`, and `years`. Do reference table `WINE` instead of `wines`. Do maintain the filter `Price > 100` instead of `price > 100` to preserve case sensitivity. Do order by `YEAR` instead of `year` to match the correct column reference. The amended query now correctly matches the RIGHT_SQL's behavior with proper column and table casing."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT grapes, wineries, years FROM wines WHERE price > 100 ORDER BY year;",
            "SELECT Grape, Winery, Year FROM wine WHERE Price > 100 ORDER BY Year;"
        ],
        "rule_sql": []
    },
    "6421": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the document type code with fewer than 3 documents.",
        "ground_truth": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
        "amends": [
            "Do use `HAVING count(*) < 3` instead of `HAVING COUNT(*) > 3` to filter for document types with fewer than 3 occurrences rather than more than 3 occurrences. Do reference the correct table name `Documents` instead of `documents` to ensure proper case sensitivity. The amended query now correctly identifies document types with fewer than three documents and matches the RIGHT_SQL's behavior.",
            "Do use lowercase `document_type_code` in both SELECT and GROUP BY instead of mixed-case `Document_Type_Code`. Do remove the alias `as Document_Count` from the COUNT(*) expression instead of keeping it. Do maintain the same HAVING clause with `count(*) < 3` instead of changing it. The amended query now correctly returns only the document_type_code values without the unnecessary count column, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 3;",
            "SELECT Document_Type_Code, COUNT(*) as Document_Count\nFROM Documents\nGROUP BY Document_Type_Code\nHAVING COUNT(*) < 3",
            "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3"
        ],
        "rule_sql": []
    },
    "3098": {
        "db_id": "behavior_monitoring",
        "question": "Find the maximum and minimum monthly rental for all student addresses.",
        "ground_truth": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses",
        "amends": [
            "Do reference the `Student_Addresses` table instead of the `students` table. Do remove the `WHERE address IS NOT NULL` filter instead of keeping it, as the correct table already contains only relevant address records. The amended query now correctly aggregates rental data from the appropriate source table without unnecessary filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(monthly_rental), MIN(monthly_rental) FROM students WHERE address IS NOT NULL;",
            "SELECT MAX(monthly_rental) AS max_monthly_rental, MIN(monthly_rental) AS min_monthly_rental FROM Student_Addresses;"
        ],
        "rule_sql": []
    },
    "1793": {
        "db_id": "small_bank_1",
        "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?",
        "ground_truth": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of referencing the same table multiple times without joins. Do join `accounts AS T1` with `checking AS T2` on `T1.custid = T2.custid` instead of filtering directly on the accounts table. Do filter on `T2.balance > (SELECT avg(balance) FROM checking)` instead of `checking_balance > (SELECT AVG(checking_balance) FROM accounts)`. Do use `INTERSECT` to combine results with a second query instead of using multiple AND conditions in a single WHERE clause. Do add a second query joining `accounts AS T1` with `savings AS T2` on `T1.custid = T2.custid` instead of referencing savings_balance from the accounts table. Do filter the second query on `T2.balance < (SELECT avg(balance) FROM savings)` instead of `savings_balance < (SELECT AVG(savings_balance) FROM accounts)`. Do remove the direct balance columns from the accounts table and instead reference balance from the joined checking and savings tables. The amended query now correctly identifies customers whose checking balance exceeds the average checking balance and whose savings balance is below the average savings balance using proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM accounts WHERE checking_balance > (SELECT AVG(checking_balance) FROM accounts) AND savings_balance < (SELECT AVG(savings_balance) FROM accounts);",
            "SELECT T1.name\nFROM accounts AS T1\nJOIN checking AS T2 ON T1.custid = T2.custid\nWHERE T2.balance > (SELECT avg(balance) FROM checking)\nINTERSECT\nSELECT T1.name\nFROM accounts AS T1\nJOIN savings AS T2 ON T1.custid = T2.custid\nWHERE T2.balance < (SELECT avg(balance) FROM savings)"
        ],
        "rule_sql": []
    },
    "4267": {
        "db_id": "club_1",
        "question": "How many clubs does \"Linda Smith\" have membership for?",
        "ground_truth": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "amends": [
            "Do join `club AS t1` and `member_of_club AS t2` on `t1.clubid = t2.clubid` instead of querying only the `memberships` table. Do join `student AS t3` on `t2.stuid = t3.stuid` instead of omitting the student table relationship. Do filter on `t3.fname = \"Linda\" AND t3.lname = \"Smith\"` instead of `member_name = 'Linda Smith'` to properly match first and last name separately. The amended query now correctly counts memberships by joining through the proper table relationships and filtering on individual name components instead of a combined name field."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM memberships WHERE member_name = 'Linda Smith';",
            "SELECT COUNT(*) \nFROM Club AS t1 \nJOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID \nJOIN Student AS t3 ON t2.StuID = t3.StuID \nWHERE t3.Fname = 'Linda' AND t3.LName = 'Smith'"
        ],
        "rule_sql": []
    },
    "6632": {
        "db_id": "driving_school",
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "ground_truth": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "amends": [
            "Do reference the column `date_joined_staff` instead of `hire_date` in the SELECT list. Do use double quotes for string literals \"Janessa\" and \"Sawayn\" instead of single quotes. The amended query now correctly retrieves the date_joined_staff column with proper string literal formatting, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT hire_date FROM staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';",
            "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
        ],
        "rule_sql": []
    },
    "1170": {
        "db_id": "body_builder",
        "question": "How many persons are not body builders?",
        "ground_truth": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
        "amends": [
            "Do reference the `people` table instead of `persons` in the FROM clause. Do use `count(*)` instead of `COUNT(*)` for the aggregate function. Do change the WHERE filter to use a subquery with `people_id NOT IN (SELECT People_ID FROM body_builder)` instead of the direct filter `occupation != 'Body Builder'`. Do remove the direct column reference `occupation` and instead implement a correlated exclusion using the `body_builder` table. The amended query now correctly identifies people who are not body builders by checking against the dedicated body_builder table rather than relying on occupation text matching, which ensures accurate results even if occupation data changes or contains variations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM persons WHERE occupation != 'Body Builder';",
            "SELECT count(*) FROM people WHERE People_ID NOT IN (SELECT People_ID FROM body_builder)"
        ],
        "rule_sql": []
    },
    "2437": {
        "db_id": "movie_1",
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "ground_truth": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "amends": [
            "Do reference the table as `Movie` instead of `movies` to match the correct schema. Do use the function `YEAR` instead of the column `year` to properly extract the year component from the date field. The amended query now correctly filters for movies directed by James Cameron released after the year 2000, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE director = 'James Cameron' AND year > 2000;",
            "SELECT title FROM Movie WHERE director = 'James Cameron' AND year > 2000"
        ],
        "rule_sql": []
    },
    "55": {
        "db_id": "farm",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "ground_truth": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "amends": [
            "Do reference the table as `city` instead of `cities` and use column names `Census_Ranking` and `Status` instead of `census_ranking` and `status`. Do use double quotes `\"Village\"` instead of single quotes `'Village'` for the string literal comparison. The amended query now correctly references the proper table and column names with appropriate quoting."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT census_ranking FROM cities WHERE status != 'Village';",
            "SELECT \"Census_Ranking\" FROM \"city\" WHERE \"Status\" != \"Village\";"
        ],
        "rule_sql": []
    },
    "6584": {
        "db_id": "wine_1",
        "question": "What are the names of wines produced before any wine from the Brander winery?",
        "ground_truth": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "amends": [
            "Do reference the table as `WINE` instead of `wines` and use column names `Name`, `YEAR`, and `Winery` instead of `name`, `year`, and `winery`. Do use double quotes around `\"Brander\"` instead of single quotes. Do maintain the same subquery structure with `min(YEAR)` instead of `MIN(year)` but keep the identical logic for finding wines with years earlier than the minimum year from the Brander winery. The amended query now correctly references the proper table and column names while preserving the intended filtering behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM wines WHERE year < (SELECT MIN(year) FROM wines WHERE winery = 'Brander')",
            "SELECT Name FROM WINE WHERE YEAR < (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")"
        ],
        "rule_sql": []
    },
    "3640": {
        "db_id": "baseball_1",
        "question": "For each year, return the year and the average number of attendance at home games.",
        "ground_truth": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
        "amends": [
            "Do reference table `home_game` instead of `games` in the FROM clause. Do remove the WHERE filter `location = 'home'` instead of keeping it since the filtering is now handled by the table selection. Do use uppercase `YEAR` instead of lowercase `year` for the column alias. The amended query now correctly calculates average attendance from the pre-filtered home_game table instead of applying a WHERE filter to a broader games table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, AVG(attendance) FROM games WHERE location = 'home' GROUP BY year",
            "SELECT year, AVG(attendance) AS YEAR FROM home_game GROUP BY year;"
        ],
        "rule_sql": []
    },
    "5605": {
        "db_id": "swimming",
        "question": "How many stadiums are there?",
        "ground_truth": "SELECT count(*) FROM stadium",
        "amends": [
            "Do query the `stadium` table instead of the `teams` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency. The amended query now correctly counts records from the stadium table instead of teams."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teams;",
            "SELECT count(*) FROM stadium;"
        ],
        "rule_sql": []
    },
    "195": {
        "db_id": "bike_1",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "ground_truth": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "amends": [
            "Do use `SELECT DISTINCT zip_code` instead of `SELECT zip_code` without distinct. Do query from the `weather` table instead of `weather_data`. Do remove the `WHERE` clause with `MAX(dew_point)` aggregation instead of keeping it. Do use `EXCEPT` set operation to filter out zip codes instead of using `GROUP BY` with conditional aggregation. Do add a subquery to exclude zip codes where `max_dew_point_f >= 70` instead of trying to filter aggregated results in the main query. Do reference the correct column `max_dew_point_f` instead of the non-existent `dew_point` column. The amended query now correctly identifies zip codes that never reached 70\u00b0F maximum dew point by using set operations instead of flawed aggregation logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code FROM weather_data WHERE MAX(dew_point) < 70 GROUP BY zip_code;",
            "SELECT DISTINCT zip_code FROM weather\nEXCEPT\nSELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70"
        ],
        "rule_sql": []
    },
    "6505": {
        "db_id": "scientist_1",
        "question": "Select the project names which are not assigned yet.",
        "ground_truth": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
        "amends": [
            "Do select `Name` instead of `project_name` from the `Projects` table instead of `projects`. Do use a `WHERE` filter with `Code NOT IN` subquery instead of checking `assigned = 'yes'`. Do add a correlated subquery `(SELECT Project FROM AssignedTo)` instead of omitting it, which correctly identifies unassigned projects by checking for codes not present in the AssignedTo table rather than relying on a simple boolean flag. The amended query now matches RIGHT_SQL's behavior by properly filtering for unassigned projects through the subquery mechanism."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_name FROM projects WHERE assigned = 'yes';",
            "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"
        ],
        "rule_sql": []
    },
    "6520": {
        "db_id": "wine_1",
        "question": "What is the winery at which the wine with the highest score was made?",
        "ground_truth": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
        "amends": [
            "Do reference table `WINE` instead of `wines` and use column `Winery` instead of `winery` to match the correct schema. Do use `ORDER BY SCORE` without specifying `ASC` direction instead of explicitly stating `ASC`, as ascending order is the default. The amended query now correctly retrieves the winery with the lowest score from the WINE table, matching the intended behavior.",
            "Do order by `SCORE` in ascending order instead of `Score DESC` in descending order. The amended query now matches RIGHT_SQL's behavior by returning the winery with the lowest score rather than the highest score.",
            "Do order by `SCORE` in ascending order instead of `Score DESC` in descending order. The amended query now matches RIGHT_SQL's behavior by returning the winery with the lowest score rather than the highest score."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT winery FROM wines ORDER BY score ASC LIMIT 1;",
            "SELECT Winery FROM wine ORDER BY Score DESC LIMIT 1;",
            "SELECT Winery FROM wine ORDER BY Score DESC LIMIT 1;",
            "SELECT Winery FROM wine ORDER BY Score DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2091": {
        "db_id": "pilot_record",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "ground_truth": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
        "amends": [
            "Do use `INTERSECT` to find positions that meet both conditions instead of using `AND` which creates an impossible condition. Do query from table `pilot` instead of `pilots` to match the correct schema. Do split the conditions into separate `SELECT` statements with `Join_Year < 2000` and `Join_Year > 2005` instead of combining them with `AND join_year > 2005 AND join_year < 2000` which would never return results. Do use proper column name `Join_Year` instead of `join_year` for case sensitivity. The amended query now correctly finds positions where pilots joined before 2000 and also after 2005 using set intersection logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position FROM pilots WHERE join_year > 2005 AND join_year < 2000;",
            "SELECT Position FROM pilot WHERE Join_Year < 2000\nINTERSECT\nSELECT Position FROM pilot WHERE Join_Year > 2005"
        ],
        "rule_sql": []
    },
    "647": {
        "db_id": "store_1",
        "question": "Find number of tracks in each genre?",
        "ground_truth": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
        "amends": [
            "Do add `T1.name` to the SELECT list instead of `genre_id`, and change the aggregate to `count(*)` without a specific column reference. Do change the FROM clause to use `genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id` instead of just `tracks`, adding a proper join between genres and tracks tables. Do change the GROUP BY clause to use `T1.name` instead of `album_id` to correctly group by genre names rather than album identifiers. The amended query now correctly counts tracks per genre name instead of attempting to count by album_id while selecting genre_id.",
            "Do place the aggregate function `count(*)` first in the SELECT list instead of after `T1.name`, and do remove the alias `AS track_count` instead of keeping it, while maintaining the same FROM sources with `JOIN` on `T1.id = T2.genre_id` and identical GROUP BY `T1.name` logic. The amended query now matches RIGHT_SQL's behavior.",
            "Do place `count(*)` before `T1.name` in the SELECT list instead of after it. Do maintain the same FROM clause with `JOIN` on `T1.id = T2.genre_id` and preserve the `GROUP BY T1.name` clause. The amended query now matches RIGHT_SQL's behavior with identical column ordering and aggregation logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre_id, COUNT(*) FROM tracks GROUP BY album_id;",
            "SELECT T1.name, COUNT(*) AS track_count FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
            "SELECT T1.name, count(*) FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
            "SELECT count(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name"
        ],
        "rule_sql": []
    },
    "164": {
        "db_id": "bike_1",
        "question": "What is the id of the trip that started from the station with the highest dock count?",
        "ground_truth": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "amends": [
            "Do use `JOIN` with `trip AS T1` and `station AS T2` instead of a subquery in the `WHERE` clause. Do reference `T1.id` instead of `trip_id` from the trips table. Do join on `T1.start_station_id = T2.id` instead of using an equality comparison with a subquery result. Do add `ORDER BY T2.dock_count DESC` instead of ordering only within the subquery. Do add `LIMIT 1` at the outer query level instead of only within the subquery. The amended query now correctly retrieves the trip ID from the trip with the highest dock count start station by joining the tables and ordering appropriately."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT trip_id FROM trips WHERE start_station_id = (SELECT station_id FROM stations ORDER BY dock_count DESC LIMIT 1);",
            "SELECT T1.id \nFROM trip AS T1\nJOIN station AS T2 ON T1.start_station_id = T2.id\nORDER BY T2.dock_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5095": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "ground_truth": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT planned_delivery_date, actual_delivery_date FROM bookings WHERE planned_delivery_date IS NOT NULL"
        ],
        "rule_sql": []
    },
    "3779": {
        "db_id": "e_learning",
        "question": "What are all the dates of enrollment and completion in record?",
        "ground_truth": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "amends": [
            "Do reference the `date_of_enrolment` and `date_of_completion` columns instead of `enrollment_date` and `completion_date`. Do query from the `Student_Course_Enrolment` table instead of the `record` table. The amended query now correctly references the appropriate table and column names to match the intended schema structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT enrollment_date, completion_date FROM record",
            "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment;"
        ],
        "rule_sql": []
    },
    "6042": {
        "db_id": "game_1",
        "question": "What are the ids of all students and number of hours played?",
        "ground_truth": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "amends": [
            "Do use `sum(hours_played)` instead of `COUNT(hours_played)` to calculate total hours rather than count non-null values. Do add `GROUP BY Stuid` instead of omitting it to aggregate by student. Do reference table `Plays_games` instead of `students` as the correct data source. Do use column alias `Stuid` instead of `student_id` to match the schema. The amended query now correctly calculates total hours played per student from the appropriate table with proper aggregation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id, COUNT(hours_played) FROM students;",
            "SELECT StuID, SUM(Hours_Played) AS Hours_Played FROM Plays_Games GROUP BY StuID"
        ],
        "rule_sql": []
    },
    "4280": {
        "db_id": "club_1",
        "question": "What is the description of the club named \"Tennis Club\"?",
        "ground_truth": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"",
        "amends": [
            "Do select `clubdesc` instead of `name` and use table `club` instead of `clubs`. Do filter on `clubname = \"Tennis Club\"` instead of `description = 'Tennis Club'`. The amended query now correctly retrieves the club description from the appropriate table using the correct column names and filter condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM clubs WHERE description = 'Tennis Club';",
            "SELECT ClubDesc FROM Club WHERE ClubName = 'Tennis Club';"
        ],
        "rule_sql": []
    },
    "3197": {
        "db_id": "college_1",
        "question": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "ground_truth": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "amends": [
            "Do count `DISTINCT dept_name` instead of counting all rows with `COUNT(*)`. Do use `school_code` instead of `school_id` as the grouping column. Do reference table `department` instead of `departments`. Do maintain the `HAVING` clause condition but apply it to `count(DISTINCT dept_name)` instead of `COUNT(*)`. The amended query now correctly counts distinct department names per school code rather than total department records, matching the intended behavior.",
            "Do place `school_code` in the SELECT list after the aggregate instead of before it, and do use `count(DISTINCT dept_name)` as the first column instead of `SCHOOL_CODE`. Do maintain the same GROUP BY clause on `school_code` and the same HAVING condition on `count(DISTINCT dept_name) < 5` instead of changing them. The amended query now matches RIGHT_SQL's behavior with identical logic and output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_id, COUNT(*) as department_count \nFROM departments \nGROUP BY school_id \nHAVING COUNT(*) < 5",
            "SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_NAME) AS department_count\nFROM DEPARTMENT\nGROUP BY SCHOOL_CODE\nHAVING COUNT(DISTINCT DEPT_NAME) < 5",
            "SELECT count(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5"
        ],
        "rule_sql": []
    },
    "779": {
        "db_id": "race_track",
        "question": "Show the name of track and the number of races in each track.",
        "ground_truth": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "amends": [
            "Do join `track AS T2` instead of omitting it, and do use `ON T1.track_id = T2.track_id` instead of no join condition. Do select `T2.name` instead of `track_name` and do group by `T1.track_id` instead of `track_name`. The amended query now correctly joins the track table to access track names and groups by the appropriate ID column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT track_name, COUNT(*) FROM races GROUP BY track_name;",
            "SELECT T2.Name, COUNT(T1.Race_ID) AS Number_of_Races\nFROM race AS T1\nJOIN track AS T2 ON T1.Track_ID = T2.Track_ID\nGROUP BY T1.Track_ID"
        ],
        "rule_sql": []
    },
    "1082": {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "ground_truth": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "amends": [
            "Do reference `T1.Season`, `T1.Player`, and `T2.Name` instead of `season`, `player`, and `team_name`. Do join `match_season AS T1` with `team AS T2` instead of `players` with `teams`. Do use the join condition `T1.Team = T2.Team_id` instead of `players.team_id = teams.id`. The amended query now correctly matches the intended behavior by using the proper table aliases, column references, and join predicate."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT season, player, team_name FROM players JOIN teams ON players.team_id = teams.id",
            "SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id"
        ],
        "rule_sql": []
    },
    "610": {
        "db_id": "store_1",
        "question": "How much money did Lucas Mancini spend?",
        "ground_truth": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "amends": [
            "Do use `sum(T2.total)` instead of `SUM(amount)` for the aggregate expression. Do join `customers AS T1` with `invoices AS T2` on `T1.id = T2.customer_id` instead of querying only the `transactions` table. Do filter on `T1.first_name = \"Lucas\"` and `T1.last_name = \"Mancini\"` instead of `customer_name = 'Lucas'` and `customer_lastname = 'Mancini'` to reference the correct table columns. The amended query now correctly aggregates invoice totals for the specified customer by properly joining the customer and invoice tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM transactions WHERE customer_name = 'Lucas' AND customer_lastname = 'Mancini';",
            "SELECT SUM(T2.total) AS total_spent\nFROM customers AS T1\nJOIN invoices AS T2 ON T1.id = T2.customer_id\nWHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'"
        ],
        "rule_sql": []
    },
    "4824": {
        "db_id": "aircraft",
        "question": "What is the name of the aircraft that has won an award the most?",
        "ground_truth": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.Aircraft` instead of `aircraft_name` and do join `aircraft AS T1` with `MATCH AS T2` instead of querying only the `awards` table. Do use the join condition `T1.Aircraft_ID = T2.Winning_Aircraft` instead of grouping by `aircraft_name` from a single table. Do group by `T2.Winning_Aircraft` instead of `aircraft_name` while maintaining the same aggregate count and ordering logic. The amended query now correctly joins the aircraft and match tables to count awards per aircraft, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT aircraft_name, COUNT(*) as award_count FROM awards GROUP BY aircraft_name ORDER BY award_count DESC LIMIT 1;",
            "SELECT T1.Aircraft\nFROM aircraft AS T1\nJOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft\nGROUP BY T2.Winning_Aircraft\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3467": {
        "db_id": "hr_1",
        "question": "display job title and average salary of employees.",
        "ground_truth": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "amends": [
            "Do add `jobs AS T2` table with `JOIN` on `T1.job_id = T2.job_id` instead of querying only the `employees` table. Do change the GROUP BY clause to `T2.job_title` instead of `department_id` to group by job title rather than department. Do reference the joined table alias `T2` for the job_title column instead of directly using `job_title` from the employees table. The amended query now correctly calculates average salary by job title by joining the jobs table to access job titles, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_title, AVG(salary) FROM employees GROUP BY department_id;",
            "SELECT T2.job_title, AVG(T1.salary) AS average_salary\nFROM employees AS T1\nJOIN jobs AS T2 ON T1.job_id = T2.job_id\nGROUP BY T2.job_title"
        ],
        "rule_sql": []
    },
    "5867": {
        "db_id": "tracking_share_transactions",
        "question": "Show the maximum and minimum share count of different transaction types.",
        "ground_truth": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "amends": [
            "Do reference `transaction_type_code` instead of `transaction_type` in both the SELECT list and GROUP BY clause, as the correct column name should be used consistently throughout the query to ensure proper aggregation by transaction type codes rather than an incorrect or non-existent column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT transaction_type, MAX(share_count), MIN(share_count) FROM transactions GROUP BY transaction_type;",
            "SELECT transaction_type_code, MAX(share_count) AS max_share_count, MIN(share_count) AS min_share_count FROM Transactions GROUP BY transaction_type_code"
        ],
        "rule_sql": []
    },
    "3424": {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "ground_truth": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "amends": [
            "Do use `commission_pct` instead of `commission` for the column name, and do use `!= \"null\"` instead of `IS NOT NULL` for the null check condition, while keeping the same `salary BETWEEN 8000 AND 12000` range filter and `department_id != 40` exclusion unchanged. The amended query now correctly references the actual column name and properly handles string-based null representation instead of SQL NULL semantics, matching the RIGHT_SQL's behavior.",
            "Do use proper operator precedence with `OR` connecting the entire condition instead of incorrectly grouping `commission_pct != \"null\" OR department_id != 40` within parentheses, which changes the logical evaluation. Do maintain the same `BETWEEN` filter on `salary` and the same inequality checks on `commission_pct` and `department_id` instead of altering the core filter conditions. The amended query now correctly evaluates the salary range combined with either the commission check or department check, matching the RIGHT_SQL's behavior.",
            "Do use proper operator precedence with `OR` connecting the final condition instead of incorrectly grouping `commission_pct != \"null\" OR department_id != 40` with parentheses, which changes the logical evaluation order. The amended query now correctly evaluates the salary range first, then applies the OR condition between the commission check and department filter, matching the RIGHT_SQL's intended behavior.",
            "Do use proper operator precedence with `OR` connecting the entire condition instead of incorrectly grouping `commission_pct != \"null\" OR department_id != 40` with parentheses, which changes the logical evaluation. Do maintain the same `salary BETWEEN 8000 AND 12000` filter and both inequality checks `commission_pct != \"null\"` and `department_id != 40` but with corrected grouping that now properly includes employees who meet either the commission condition or department condition along with the salary range, instead of requiring both conditions to be true simultaneously. The amended query now matches RIGHT_SQL's behavior with the intended logical structure.",
            "Do use proper operator precedence with `OR` connecting the final condition instead of incorrectly grouping `commission_pct != \"null\" OR department_id != 40` within parentheses, which changes the logical evaluation order. Do maintain the `salary BETWEEN 8000 AND 12000` filter and both inequality checks `commission_pct != \"null\"` and `department_id != 40` but with the correct operator precedence that now properly includes rows where either commission is not null OR department is not 40, instead of requiring both conditions to be true when combined with the salary range. The amended query now matches RIGHT_SQL's behavior with the correct logical operator precedence."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission IS NOT NULL OR department_id != 40",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)",
            "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND (commission_pct != \"null\" OR department_id != 40)"
        ],
        "rule_sql": []
    },
    "5121": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "ground_truth": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
        "amends": [
            "Do join `Addresses AS T1` and `Stores AS T2` on `T1.Address_ID = T2.Address_ID` instead of querying only the `stores` table. Do select `T1.City_Town` instead of `city` from the stores table. Do use the correct table relationship through the address join instead of assuming the city column exists directly in the stores table. Do reference the store name filter as `T2.Store_Name` instead of `store_name` from the single table approach. The amended query now correctly retrieves the city/town information from the related addresses table using the proper table relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM stores WHERE store_name = 'FJA Filming';",
            "SELECT T1.City_Town \nFROM Addresses AS T1 \nJOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID \nWHERE T2.Store_Name = 'FJA Filming'"
        ],
        "rule_sql": []
    },
    "1509": {
        "db_id": "insurance_and_eClaims",
        "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "ground_truth": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "amends": [
            "Do join `policies AS t1` with `customers AS t2` on `t1.customer_id = t2.customer_id` instead of querying only the `customers` table. Do filter on `t2.customer_details = 'Dayana Robel'` instead of filtering on `customer_name = 'Dayana Robel'`. Do select `policy_type_code` from the joined `policies` table instead of selecting it directly from the `customers` table where it doesn't exist. The amended query now correctly retrieves policy information by joining the relevant tables and using the proper filter condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT policy_type_code FROM customers WHERE customer_name = 'Dayana Robel'",
            "SELECT t1.Policy_Type_Code \nFROM Policies AS t1 \nJOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID \nWHERE t2.Customer_Details = 'Dayana Robel'"
        ],
        "rule_sql": []
    },
    "3247": {
        "db_id": "college_1",
        "question": "Find the total number of employees.",
        "ground_truth": "SELECT count(*) FROM employee",
        "amends": [
            "Do reference the `employee` table instead of `employees` to match the correct table name in the schema. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency with the right SQL's formatting. Do remove the `WHERE department = 'Sales'` filter instead of keeping it, as the right query counts all employees without department filtering. The amended query now correctly counts all records from the employee table without any filters."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE department = 'Sales';",
            "SELECT count(*) FROM EMPLOYEE"
        ],
        "rule_sql": []
    },
    "2603": {
        "db_id": "inn_1",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "ground_truth": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of `r` and `rm`. Do join on `T1.Room = T2.RoomId` instead of `r.room_id = rm.room_id`. Do filter with `T2.maxOccupancy = T1.Adults + T1.Kids` instead of `r.adults + r.kids = rm.max_capacity`. Do use `count(*)` instead of `COUNT(*)`. The amended query now correctly matches the intended logic by properly joining reservations to rooms and comparing total guests to maximum occupancy."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM reservations r\nJOIN rooms rm ON r.room_id = rm.room_id\nWHERE r.adults + r.kids = rm.max_capacity;",
            "SELECT count(*) FROM Reservations T1 JOIN Rooms T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids"
        ],
        "rule_sql": []
    },
    "1388": {
        "db_id": "college_2",
        "question": "Find the name of instructors who are advising more than one student.",
        "ground_truth": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "amends": [
            "Do add table `instructor AS T1` and `advisor AS T2` with a `JOIN` on `T1.id = T2.i_id` instead of querying only `instructors` table. Do change the SELECT list to `T1.name` instead of `name` and add `GROUP BY T2.i_id` instead of no grouping. Do move the count filter to `HAVING count(*) > 1` instead of `WHERE student_count > 1` since the aggregation requires post-grouping filtering. The amended query now correctly identifies instructors with multiple advisees through proper table joining and aggregation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM instructors WHERE student_count > 1;",
            "SELECT T1.name\nFROM instructor AS T1\nJOIN advisor AS T2 ON T1.ID = T2.i_ID\nGROUP BY T2.i_ID\nHAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "3592": {
        "db_id": "music_1",
        "question": "What are the names of the songs that are modern or sung in English?",
        "ground_truth": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "amends": [
            "Do reference `song_name` instead of `name` in the SELECT list. Do use table name `song` instead of `songs` in the FROM clause. Do reference column `genre_is` instead of `genre` in the WHERE filter. Do reference column `languages` instead of `language` in the WHERE filter. Do use lowercase string comparison `\"english\"` instead of `'English'` for case sensitivity. The amended query now correctly references the actual table and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM songs WHERE genre = 'modern' OR language = 'English';",
            "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'"
        ],
        "rule_sql": []
    },
    "43": {
        "db_id": "farm",
        "question": "What are the statuses and average populations of each city?",
        "ground_truth": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "amends": [
            "Do reference the `Status` column instead of `status` and use proper capitalization for `avg(Population)` instead of `AVG(population)`. Do group by `Status` instead of `city` to correctly aggregate population averages by status rather than by individual city names. Do reference the `city` table instead of `cities` to match the correct table name in the database schema. The amended query now correctly calculates average population grouped by status categories rather than by individual city entries."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT status, AVG(population) FROM cities GROUP BY city;",
            "SELECT Status, avg(Population) FROM city GROUP BY Status;"
        ],
        "rule_sql": []
    },
    "833": {
        "db_id": "chinook_1",
        "question": "Show the album names, ids and the number of tracks for each album.",
        "ground_truth": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "amends": [
            "Do join `ALBUM AS T1` to `TRACK AS T2` on `T1.AlbumId = T2.AlbumId` instead of querying only the `tracks` table. Do select `T1.Title` and `T2.AlbumID` instead of `album_id` and `title` without table qualification. Do group by `T2.AlbumID` instead of `album_id` to match the joined table's column reference. The amended query now correctly retrieves album titles from the ALBUM table while counting tracks from the TRACK table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT album_id, title, COUNT(*) FROM tracks GROUP BY album_id;",
            "SELECT T1.Title, T2.AlbumId, COUNT(*) AS NumberOfTracks FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumId"
        ],
        "rule_sql": []
    },
    "110": {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "ground_truth": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "amends": [
            "Do reference column `max_temperature_f` instead of `max_temperature` in the WHERE filter, as the correct column name uses the Fahrenheit suffix to properly identify temperature values above 85 degrees. The amended query now matches RIGHT_SQL's behavior by using the accurate column reference for temperature filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date FROM weather WHERE max_temperature > 85;",
            "SELECT date FROM weather WHERE max_temperature_f > 85;"
        ],
        "rule_sql": []
    },
    "1569": {
        "db_id": "customers_and_invoices",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "ground_truth": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "amends": [
            "Do use `T1.customer_id`, `T2.customer_first_name`, and `T2.customer_last_name` instead of `c.id`, `c.first_name`, and `c.last_name` for column selection. Do use `INNER JOIN` between `Accounts AS T1` and `Customers AS T2` on `T1.customer_id = T2.customer_id` instead of `LEFT JOIN` between `customers c` and `accounts a` on `c.id = a.customer_id`. Do use `count(*)` instead of `COUNT(a.id)` for the aggregate function. Do group by only `T1.customer_id` instead of grouping by `c.id`, `c.first_name`, and `c.last_name`. The amended query now correctly matches the intended behavior of counting accounts per customer while ensuring proper table relationships and grouping logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.id, c.first_name, c.last_name, COUNT(a.id) as account_count\nFROM customers c\nLEFT JOIN accounts a ON c.id = a.customer_id\nGROUP BY c.id, c.first_name, c.last_name",
            "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, COUNT(*) AS number_of_accounts\nFROM Accounts AS T1\nINNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id\nGROUP BY T1.customer_id"
        ],
        "rule_sql": []
    },
    "662": {
        "db_id": "journal_committee",
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "ground_truth": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
        "amends": [
            "Do add table `journal_committee` as `T2` with a `JOIN` on `T1.Editor_ID = T2.Editor_ID` instead of querying only the `editors` table. Do reference columns with table aliases as `T1.editor_id` and `T1.Name` instead of `editor_id` and `editor_name`. Do change the `GROUP BY` to only `T1.editor_id` instead of grouping by both `editor_id` and `editor_name`. The amended query now correctly joins the editor and journal_committee tables to count committee memberships per editor, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT editor_id, editor_name, COUNT(*) FROM editors GROUP BY editor_id, editor_name",
            "SELECT T1.Editor_ID, T1.Name, COUNT(T2.Journal_ID) AS Number_of_Committees\nFROM editor AS T1\nJOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID\nGROUP BY T1.Editor_ID"
        ],
        "rule_sql": []
    },
    "2622": {
        "db_id": "inn_1",
        "question": "List the name of all rooms sorted by their prices.",
        "ground_truth": "SELECT roomName FROM Rooms ORDER BY basePrice;",
        "amends": [
            "Do select `roomName` instead of `name` from the table. Do order by `basePrice` instead of `price` in descending order. The amended query now correctly references the appropriate column names and ordering criteria to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM rooms ORDER BY price DESC;",
            "SELECT roomName FROM Rooms ORDER BY basePrice DESC;"
        ],
        "rule_sql": []
    },
    "512": {
        "db_id": "allergy_1",
        "question": "How many students are affected by food related allergies?",
        "ground_truth": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "amends": [
            "Do add `Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy` as the FROM source instead of just querying `students` directly. Do change the WHERE filter to `T2.allergytype = \"food\"` instead of `allergy = 'food'` to properly reference the joined table's allergy type column. Do maintain the `COUNT(*)` aggregate function but now applied to the joined table structure instead of the original single table. The amended query now correctly joins the allergy tables to count students with food allergies based on the proper allergy type classification rather than relying on a direct column value match."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE allergy = 'food';",
            "SELECT COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = 'food'"
        ],
        "rule_sql": []
    },
    "1084": {
        "db_id": "match_season",
        "question": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "ground_truth": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
        "amends": [
            "Do join `match_season AS T1` and `team AS T2` with `ON T1.Team = T2.Team_id` instead of querying only the `players` table. Do filter on `T2.Name = \"Ryley Goldner\"` instead of `team_name = 'Ryley Goldner'`. Do select `T1.Position` instead of `position` from the joined tables. The amended query now correctly retrieves player positions by joining through the team relationship rather than assuming team_name exists directly in the players table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position FROM players WHERE team_name = 'Ryley Goldner'",
            "SELECT T1.Position \nFROM match_season AS T1 \nJOIN team AS T2 ON T1.Team = T2.Team_id \nWHERE T2.Name = 'Ryley Goldner'"
        ],
        "rule_sql": []
    },
    "762": {
        "db_id": "race_track",
        "question": "Count the number of races.",
        "ground_truth": "SELECT count(*) FROM race",
        "amends": [
            "Do query the `race` table instead of the `drivers` table. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency. The amended query now correctly counts records from the race table instead of drivers, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM drivers;",
            "SELECT count(*) FROM race;"
        ],
        "rule_sql": []
    },
    "6117": {
        "db_id": "customers_and_addresses",
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "ground_truth": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "amends": [
            "Do count `DISTINCT customer_id` instead of `COUNT(*)` to count unique customers rather than all rows. Do use table `customer_orders` instead of `customers` to access the correct data source containing order status information. Do maintain the filter `order_status = 'Cancelled'` to focus on cancelled orders. The amended query now correctly counts distinct customers with cancelled orders rather than counting all cancelled order rows, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE order_status = 'Cancelled';",
            "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_status = 'Cancelled'"
        ],
        "rule_sql": []
    },
    "5756": {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "ground_truth": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "amends": [
            "Do select `T1.fname` instead of `s.first_name` and use table alias `T1` instead of `s`. Do join `lives_in AS T2` instead of `dorms d` and use join condition `T1.stuid = T2.stuid` instead of `s.dorm_id = d.dorm_id`. Do change the WHERE filter to use `T2.dormid IN` with a subquery instead of direct equality comparison with `d.amenities_count = (SELECT MAX(amenities_count) FROM dorms)`. Do restructure the subquery to join `dorm AS T3`, `has_amenity AS T4`, and `dorm_amenity AS T5` with conditions `T3.dormid = T4.dormid` and `T4.amenid = T5.amenid` instead of a simple MAX aggregation. Do add `GROUP BY T3.dormid` and `ORDER BY count(*) DESC LIMIT 1` to find the dorm with the most amenities instead of comparing to the maximum amenities count. Do remove the outer `ORDER BY s.student_id LIMIT 1` since the subquery already limits to one result. The amended query now correctly identifies students living in dorms with the highest number of amenities and matches the RIGHT_SQL's behavior.",
            "Do use lowercase `fname` instead of uppercase `Fname` in the SELECT list. Do reference `T2.dormid` instead of `T3.dormid` in the subquery's SELECT clause. Do remove the alias `T2` from the subquery's FROM clause and use `T3` consistently instead. Do eliminate the unnecessary alias assignment in the subquery's FROM clause. The amended query now correctly identifies students living in dorms with the most amenities by properly referencing the dormid from the outer query's join result in the subquery selection.",
            "Do add `JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid` in the subquery instead of omitting it, which properly links the amenity relationship through the amenity table. Do reference `T2.dormid` in the subquery's SELECT list instead of `T3.dormid` to maintain consistency with the outer query's dormid reference. The amended query now correctly identifies dorms with amenities by including the necessary join to the dorm_amenity table, ensuring the count of amenities is accurately calculated for each dorm.",
            "Do reference `T2.dormid` in the subquery SELECT list instead of `T3.dormid` to ensure the correct dormid is returned from the subquery. Do maintain the same join structure with `JOIN Lives_in AS T2 ON T1.StuID = T2.stuid` and the subquery joins `JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid` and `JOIN Dorm_amenity AS T5 ON T4.amenid = T5.amenid`. Do keep the same GROUP BY `T3.dormid`, ORDER BY `COUNT(*) DESC`, and LIMIT 1 logic to find the dorm with the most amenities. The amended query now correctly returns student names from dorms with the highest amenity count by selecting the proper dormid reference from the subquery.",
            "Do reference `T2.dormid` in the subquery SELECT list instead of `T3.dormid` to ensure the correct dormid value is returned from the subquery. Do maintain the same join structure with `JOIN Lives_in AS T2 ON T1.StuID = T2.stuid` and the nested joins `JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid` and `JOIN Dorm_amenity AS T5 ON T4.amenid = T5.amenid` without changes. Do preserve the `GROUP BY T3.dormid`, `ORDER BY COUNT(*) DESC`, and `LIMIT 1` clauses to identify the dorm with the most amenities. The amended query now correctly returns student names from dorms with the highest amenity count by selecting the proper dormid reference from the joined tables."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name \nFROM students s\nJOIN dorms d ON s.dorm_id = d.dorm_id\nWHERE d.amenities_count = (SELECT MAX(amenities_count) FROM dorms)\nORDER BY s.student_id LIMIT 1;",
            "SELECT T1.Fname\nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM Dorm AS T3\n    JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid\n    JOIN Dorm_amenity AS T5 ON T4.amenid = T5.amenid\n    GROUP BY T3.dormid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
            "SELECT T1.fname\nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM Dorm AS T3\n    JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid\n    GROUP BY T3.dormid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
            "SELECT T1.fname\nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM Dorm AS T3\n    JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid\n    JOIN Dorm_amenity AS T5 ON T4.amenid = T5.amenid\n    GROUP BY T3.dormid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
            "SELECT T1.fname\nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM Dorm AS T3\n    JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid\n    JOIN Dorm_amenity AS T5 ON T4.amenid = T5.amenid\n    GROUP BY T3.dormid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
            "SELECT T1.fname\nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM Dorm AS T3\n    JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid\n    JOIN Dorm_amenity AS T5 ON T4.amenid = T5.amenid\n    GROUP BY T3.dormid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
        ],
        "rule_sql": []
    },
    "6658": {
        "db_id": "driving_school",
        "question": "List the first name and last name of all customers.",
        "ground_truth": "SELECT first_name ,  last_name FROM Customers;",
        "amends": [
            "Do add `last_name` to the SELECT list instead of omitting it, and do use the correct table name `Customers` instead of `customers` to match the schema. The amended query now correctly includes both name columns and references the proper table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers;",
            "SELECT first_name, last_name FROM Customers;"
        ],
        "rule_sql": []
    },
    "3629": {
        "db_id": "baseball_1",
        "question": "what is the full name and id of the college with the largest number of baseball players?",
        "ground_truth": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
        "amends": [
            "Do use `T1.name_full` instead of `college_name` in the SELECT list. Do join `college AS T1` with `player_college AS T2` on `T1.college_id = T2.college_id` instead of using a correlated subquery with `baseball_players`. Do add `GROUP BY T1.college_id` instead of omitting it. Do use `count(*)` in the ORDER BY clause instead of a subquery count. Do remove the correlated subquery entirely instead of keeping it as an ordering mechanism. The amended query now correctly aggregates player counts per college and returns the college with the most players, matching the RIGHT_SQL's behavior.",
            "Do include `T1.name_full` in the SELECT list instead of omitting it, and do maintain the same column order as `T1.college_id, T1.name_full` instead of `T1.name_full, T1.college_id`. Do keep the same FROM clause with `JOIN player_college AS T2` on `T1.college_id = T2.college_id`, maintain the same GROUP BY on `T1.college_id`, preserve the ORDER BY on `count(*) DESC`, and retain the LIMIT 1. The amended query now correctly includes all necessary columns in the SELECT list while maintaining the same logical behavior.",
            "Do include `T1.name_full` in the SELECT list instead of omitting it, and do maintain the same column order as the original query. Do keep the `JOIN` on `T1.college_id = T2.college_id` unchanged. Do preserve the `GROUP BY T1.college_id` and `ORDER BY count(*) DESC LIMIT 1` structure without modification. The amended query now correctly includes all necessary columns in the SELECT clause while maintaining identical logic and behavior to the RIGHT_SQL.",
            "Do reverse the column order in the SELECT list to `name_full, college_id` instead of `college_id, name_full` to match the output sequence. The amended query now correctly returns the college name first followed by the college ID, maintaining the same grouping, ordering, and limiting behavior as the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT college_name, college_id FROM colleges ORDER BY (SELECT COUNT(*) FROM baseball_players WHERE baseball_players.college_id = colleges.college_id) DESC LIMIT 1;",
            "SELECT T1.college_id, T1.name_full\nFROM college AS T1\nJOIN player_college AS T2 ON T1.college_id = T2.college_id\nGROUP BY T1.college_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT T1.college_id, T1.name_full\nFROM college AS T1\nJOIN player_college AS T2 ON T1.college_id = T2.college_id\nGROUP BY T1.college_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT T1.college_id, T1.name_full\nFROM college AS T1\nJOIN player_college AS T2 ON T1.college_id = T2.college_id\nGROUP BY T1.college_id\nORDER BY count(*) DESC\nLIMIT 1",
            "SELECT T1.name_full, T1.college_id\nFROM college AS T1\nJOIN player_college AS T2 ON T1.college_id = T2.college_id\nGROUP BY T1.college_id\nORDER BY count(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4698": {
        "db_id": "college_3",
        "question": "What are the last names of faculty who are part of the computer science department?",
        "ground_truth": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "amends": [
            "Do use `T2.Lname` instead of `last_name` in the SELECT list. Do add joins to `DEPARTMENT AS T1` and `MEMBER_OF AS T3` instead of querying only the `FACULTY` table. Do use `JOIN FACULTY AS T2 ON T1.DNO = T3.DNO` and `JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID` instead of no joins. Do change the WHERE condition to `T1.DName = \"Computer Science\"` instead of `department = 'computer science'` to properly filter by department name through the joined tables. The amended query now correctly retrieves faculty last names by joining through the department and member relationships, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name FROM faculty WHERE department = 'computer science';",
            "SELECT T2.Lname \nFROM Department AS T1\nJOIN Member_of AS T3 ON T1.DNO = T3.DNO\nJOIN Faculty AS T2 ON T3.FacID = T2.FacID\nWHERE T1.DName = \"Computer Science\""
        ],
        "rule_sql": []
    },
    "1337": {
        "db_id": "college_2",
        "question": "Count the number of students who have advisors.",
        "ground_truth": "SELECT count(DISTINCT s_id) FROM advisor",
        "amends": [
            "Do count `DISTINCT s_id` instead of `COUNT(*)` to count unique student identifiers rather than all rows. Do query from the `advisor` table instead of the `students` table to access the correct data source. Do remove the `WHERE advisor_id IS NULL` filter instead of keeping it since the count should include all advisor relationships rather than only null values. The amended query now correctly counts distinct student IDs from the advisor table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE advisor_id IS NULL;",
            "SELECT COUNT(DISTINCT s_ID) FROM advisor;"
        ],
        "rule_sql": []
    },
    "1988": {
        "db_id": "phone_market",
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "ground_truth": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
        "amends": [
            "Do select `T3.Name` and `T2.District` instead of `phone_name` and `district`. Do join three tables with `phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID` instead of selecting from a single `phones` table. Do order by `T2.Ranking` instead of `market_ranking ASC`. The amended query now correctly joins the necessary tables to retrieve phone names with their corresponding market districts and uses the proper ranking field for ordering, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_name, district FROM phones ORDER BY market_ranking ASC;",
            "SELECT T3.Name, T2.District \nFROM phone_market AS T1 \nJOIN market AS T2 ON T1.Market_ID = T2.Market_ID \nJOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID \nORDER BY T2.Ranking ASC;"
        ],
        "rule_sql": []
    },
    "3302": {
        "db_id": "college_1",
        "question": "What is the first name and GPA of every student that has a GPA lower than average?",
        "ground_truth": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "amends": [
            "Do use column names `stu_fname` and `stu_gpa` instead of `first_name` and `GPA`. Do reference table `student` instead of `students`. Do use comparison operator `<` instead of `>` in the WHERE clause filter. Do use aggregate function `avg(stu_gpa)` instead of `AVG(GPA)` in the subquery. The amended query now correctly selects student first names and GPAs where the GPA is below the average GPA instead of above it, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, GPA FROM students WHERE GPA > (SELECT AVG(GPA) FROM students);",
            "SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student);"
        ],
        "rule_sql": []
    },
    "1914": {
        "db_id": "protein_institute",
        "question": "Show the number of buildings with a height above the average or a number of floors above the average.",
        "ground_truth": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)",
        "amends": [
            "Do reference table `building` instead of `buildings` and use column `height_feet` instead of `height`. Do use subqueries `(SELECT avg(height_feet) FROM building)` and `(SELECT avg(floors) FROM building)` for aggregate comparisons instead of attempting to use AVG() directly in the WHERE clause. Do remove the incorrect aggregate function usage in the WHERE clause and instead properly calculate averages in separate subqueries for comparison. The amended query now correctly compares each building's height_feet and floors against their respective table averages using proper subquery syntax."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM buildings WHERE height > AVG(height) OR floors > AVG(floors);",
            "SELECT COUNT(*) \nFROM building \nWHERE height_feet > (SELECT AVG(height_feet) FROM building) \n   OR floors > (SELECT AVG(floors) FROM building)"
        ],
        "rule_sql": []
    },
    "1818": {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "ground_truth": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "amends": [
            "Do select `T2.balance` and `T3.balance` as separate columns instead of combining them into `checking_balance` and `savings_balance`. Do join `checking AS T2` on `T1.custid = T2.custid` instead of accessing balances directly from the accounts table. Do join `savings AS T3` on `T1.custid = T3.custid` instead of assuming savings data exists in the accounts table. Do order by `T2.balance + T3.balance DESC` instead of ordering by checking and savings balances separately in descending order. The amended query now correctly joins separate checking and savings tables and calculates total balance for ordering, matching the RIGHT_SQL's behavior.",
            "Do list columns as `T2.balance`, `T3.balance`, `T1.name` instead of `T1.name`, `T2.balance AS checking_balance`, `T3.balance AS savings_balance` to remove the aliases. The amended query now matches RIGHT_SQL's behavior.",
            "Do reorder the SELECT list to `T2.balance, T3.balance, T1.name` instead of `T1.name, T2.balance, T3.balance` while keeping the same column selection. The FROM clause with `JOIN` on `checking` and `savings` tables using `T1.custid = T2.custid` and `T1.custid = T3.custid` predicates remains unchanged, as does the ORDER BY with `T2.balance + T3.balance DESC`. The amended query now matches the RIGHT_SQL's behavior with identical column output order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, checking_balance, savings_balance FROM accounts ORDER BY checking_balance DESC, savings_balance DESC;",
            "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance\nFROM ACCOUNTS AS T1\nJOIN CHECKING AS T2 ON T1.custid = T2.custid\nJOIN SAVINGS AS T3 ON T1.custid = T3.custid\nORDER BY T2.balance + T3.balance DESC",
            "SELECT T1.name, T2.balance, T3.balance\nFROM ACCOUNTS AS T1\nJOIN CHECKING AS T2 ON T1.custid = T2.custid\nJOIN SAVINGS AS T3 ON T1.custid = T3.custid\nORDER BY T2.balance + T3.balance DESC",
            "SELECT T2.balance, T3.balance, T1.name\nFROM ACCOUNTS AS T1\nJOIN CHECKING AS T2 ON T1.custid = T2.custid\nJOIN SAVINGS AS T3 ON T1.custid = T3.custid\nORDER BY T2.balance + T3.balance DESC"
        ],
        "rule_sql": []
    },
    "1012": {
        "db_id": "university_basketball",
        "question": "What are the names of teams from universities that have a below average enrollment?",
        "ground_truth": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "amends": [
            "Do reference `t2.team_name` instead of `t.name` in the SELECT list. Do use `university AS t1` and `basketball_match AS t2` as table sources instead of `teams t` and `universities u`. Do perform an `INNER JOIN` on `t1.school_id = t2.school_id` instead of joining on `t.university_id = u.id`. Do filter with `enrollment < (SELECT avg(enrollment) FROM university)` instead of referencing a different subquery structure. Do remove the explicit alias from the subquery table reference, using just `university` instead of `universities`. The amended query now correctly retrieves team names from the basketball_match table joined with university data based on school enrollment below average."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.name \nFROM teams t \nJOIN universities u ON t.university_id = u.id \nWHERE u.enrollment < (SELECT AVG(enrollment) FROM universities);",
            "SELECT t2.Team_Name \nFROM university AS t1 \nINNER JOIN basketball_match AS t2 ON t1.School_ID = t2.School_ID \nWHERE t1.Enrollment < (SELECT AVG(Enrollment) FROM university)"
        ],
        "rule_sql": []
    },
    "1844": {
        "db_id": "wrestler",
        "question": "How many wrestlers are there?",
        "ground_truth": "SELECT count(*) FROM wrestler",
        "amends": [
            "Do reference the `wrestler` table instead of the `wrestlers` table to match the correct table name in the schema. Do maintain the same `COUNT(*)` aggregate function and `weight > 200` filter condition as both queries use identical logic for counting records where weight exceeds 200. The amended query now correctly references the intended table while preserving the original counting logic and filter criteria.",
            "Do use lowercase `count(*)` instead of uppercase `COUNT(*)` to maintain consistent function casing. The amended query now matches RIGHT_SQL's behavior with identical functionality.",
            "Do remove the `WHERE weight > 200` filter instead of keeping it, as the right query counts all wrestlers regardless of weight rather than only those over 200 pounds. The amended query now matches the right SQL's behavior of returning the total count of all wrestlers in the table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM wrestlers WHERE weight > 200;",
            "SELECT COUNT(*) FROM wrestler WHERE weight > 200;",
            "SELECT count(*) FROM wrestler WHERE weight > 200",
            "SELECT count(*) FROM wrestler;"
        ],
        "rule_sql": []
    },
    "3447": {
        "db_id": "hr_1",
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "ground_truth": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "amends": [
            "Do use `MAX(end_date)` aggregation instead of selecting raw `end_date` values. Do add `GROUP BY employee_id` instead of omitting grouping. Do remove the `WHERE end_date IS NOT NULL` filter instead of keeping it, as the MAX function naturally handles NULL values. Do remove the `ORDER BY employee_id` clause instead of keeping it, as the grouping already organizes results by employee_id. The amended query now correctly returns the most recent end_date for each employee from the job_history table instead of previous_jobs, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT employee_id, end_date FROM previous_jobs WHERE end_date IS NOT NULL ORDER BY employee_id;",
            "SELECT employee_id, MAX(end_date) FROM job_history GROUP BY employee_id"
        ],
        "rule_sql": []
    },
    "6260": {
        "db_id": "ship_1",
        "question": "what are the names and classes of the ships that do not have any captain yet?",
        "ground_truth": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "amends": [
            "Do reference table `ship` instead of `ships` in the FROM clause. Do change the WHERE condition to use a subquery with `ship_id NOT IN (SELECT ship_id FROM captain)` instead of checking `captain IS NULL`. Do remove the direct NULL check on a captain column that doesn't exist in the schema, instead using a proper relational approach to find ships without captains through the absence of corresponding records in the captain table. The amended query now correctly identifies ships without captains by checking for missing relationships rather than relying on nullable columns, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, class FROM ships WHERE captain IS NULL;",
            "SELECT s.Name, s.Class FROM Ship s WHERE s.Ship_ID NOT IN (SELECT Ship_ID FROM captain)"
        ],
        "rule_sql": []
    },
    "6266": {
        "db_id": "ship_1",
        "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "ground_truth": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'",
        "amends": [
            "Do use table aliases `t1` for `ship` and `t2` for `captain` instead of `s` for `ships` and `c1`/`c2` for `captains`. Do change the join condition to `t1.ship_id = t2.ship_id` instead of `s.captain_id = c1.id` and `s.captain_id = c2.id`. Do replace the single query with two separate queries using `INTERSECT` instead of joining the same table twice with different aliases. Do move the rank filters to separate `WHERE` clauses in each `SELECT` statement instead of combining them in a single `WHERE` with `AND`. Do remove the redundant second join on the same table and instead use set intersection to find ships that have both ranks. The amended query now correctly identifies ships that have both a Midshipman and a Lieutenant captain by using set intersection instead of the flawed double join approach."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name \nFROM ships s\nJOIN captains c1 ON s.captain_id = c1.id\nJOIN captains c2 ON s.captain_id = c2.id\nWHERE c1.rank = 'Midshipman' AND c2.rank = 'Lieutenant';",
            "SELECT t1.Name FROM Ship t1 JOIN captain t2 ON t1.Ship_ID = t2.Ship_ID WHERE t2.Rank = 'Midshipman'\nINTERSECT\nSELECT t1.Name FROM Ship t1 JOIN captain t2 ON t1.Ship_ID = t2.Ship_ID WHERE t2.Rank = 'Lieutenant'"
        ],
        "rule_sql": []
    },
    "4470": {
        "db_id": "network_2",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "ground_truth": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "amends": [
            "Do select `T1.age` instead of `MAX(age)` to retrieve the actual age value rather than an aggregate. Do add `FROM Person AS T1 JOIN PersonFriend AS T2` instead of `FROM friends` to properly join the two required tables. Do use `ON T1.name = T2.friend` instead of no join condition to establish the correct relationship between tables. Do add `WHERE T2.name = 'Zach'` instead of `WHERE name = 'Zach'` to filter on the correct table's name column. Do add `AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')` instead of no year condition to filter for the maximum friendship year. Do remove `ORDER BY relationship_years DESC LIMIT 1` instead of keeping it since the subquery now handles the maximum year logic. The amended query now correctly identifies Zach's friends and selects the age of the friend with the longest friendship duration, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(age) FROM friends WHERE name = 'Zach' ORDER BY relationship_years DESC LIMIT 1;",
            "SELECT T1.age \nFROM Person AS T1 \nJOIN PersonFriend AS T2 ON T1.name = T2.friend \nWHERE T2.name = 'Zach' \nAND T2.year = (SELECT MAX(year) FROM PersonFriend WHERE name = 'Zach')"
        ],
        "rule_sql": []
    },
    "1332": {
        "db_id": "college_2",
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "ground_truth": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "amends": [
            "Do reference table `student` instead of `students` in the FROM clause. Do use column `dept_name` instead of `department` in the WHERE filter condition. Do order by `tot_cred` instead of `credits` in the ORDER BY clause. The amended query now correctly references the proper table and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE department = 'History' ORDER BY credits DESC LIMIT 1;",
            "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1551": {
        "db_id": "customers_and_invoices",
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "ground_truth": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "amends": [
            "Do use `account_id` instead of `id` for the account identifier column. Do use `date_account_opened` instead of `date_opened` for the date column name. Do add `other_account_details` to the SELECT list instead of omitting it. Do reference the table as `Accounts` (with proper casing) instead of `accounts`. The amended query now correctly includes all required account details and uses the proper column names and table reference."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, date_opened, account_name FROM accounts;",
            "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts;"
        ],
        "rule_sql": []
    },
    "2141": {
        "db_id": "local_govt_in_alabama",
        "question": "What are all the the participant ids, type code and details?",
        "ground_truth": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants",
        "amends": [
            "Do add `Participant_Type_Code` and `Participant_Details` to the SELECT list instead of omitting them, and do use the correct column name `Participant_ID` instead of `participant_id`. The amended query now correctly retrieves all three required columns from the Participants table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT participant_id, type_code FROM participants;",
            "SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants;"
        ],
        "rule_sql": []
    },
    "4467": {
        "db_id": "network_2",
        "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?",
        "ground_truth": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "amends": [
            "Do use `DISTINCT` instead of omitting it, and select `T2.name`, `T2.friend`, and `T1.age` instead of `name`, `friends`, and `age`. Do join `Person AS T1` and `PersonFriend AS T2` with an `INNER JOIN` on `T1.name = T2.friend` instead of querying only the `people` table. Do filter with `T1.age > (SELECT avg(age) FROM person)` in the `WHERE` clause instead of `age > (SELECT AVG(age) FROM people)`, and reference the correct table name `person` in the subquery. The amended query now correctly retrieves distinct friend relationships where the person's age exceeds the average age, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, friends, age FROM people WHERE age > (SELECT AVG(age) FROM people);",
            "SELECT DISTINCT T2.name, T2.friend, T1.age\nFROM Person AS T1\nINNER JOIN PersonFriend AS T2 ON T1.name = T2.friend\nWHERE T1.age > (SELECT AVG(age) FROM Person)"
        ],
        "rule_sql": []
    },
    "5065": {
        "db_id": "device",
        "question": "What are the open dates and years for the shop named Apple?",
        "ground_truth": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
        "amends": [
            "Do use column aliases `Open_Date` and `Open_Year` instead of `open_date` and `year`. Do reference table `shop` instead of `shops`. Do use column `Shop_Name` with double quotes around the string literal instead of `name` with single quotes. The amended query now correctly references the intended table structure and column names to match the expected output behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT open_date, year FROM shops WHERE name = 'Apple';",
            "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = \"Apple\""
        ],
        "rule_sql": []
    },
    "965": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "ground_truth": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "amends": [
            "Do join `enzyme AS T1` with `medicine_enzyme_interaction AS T2` on `T2.enzyme_id = T1.id` instead of querying only the `enzymes` table. Do filter on `T2.interaction_type = 'inhibitor'` instead of `interaction = 'inhibitor'`. Do select `T1.product` instead of `products` while keeping `T1.name` and `T1.location` similar to the original `name` and `location`. The amended query now correctly joins the related tables and uses the proper column references to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT name, location, products FROM enzymes WHERE interaction = 'inhibitor';",
            "SELECT DISTINCT T1.name, T1.location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'"
        ],
        "rule_sql": []
    },
    "839": {
        "db_id": "chinook_1",
        "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "ground_truth": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "amends": [
            "Do join `ALBUM AS T1` with `TRACK AS T2` on `T1.AlbumId = T2.AlbumId` instead of querying only the `albums` table. Do select `T1.Title` and `T2.AlbumID` instead of `album_id` and `title`. Do filter on `T2.UnitPrice > 1` instead of `unit_price > 1`. Do add `GROUP BY T2.AlbumID` instead of omitting grouping. The amended query now correctly joins album and track data, filters by track pricing, and groups results by album ID to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT album_id, title FROM albums WHERE unit_price > 1",
            "SELECT T1.Title, T2.AlbumId \nFROM Album AS T1 \nJOIN Track AS T2 ON T1.AlbumId = T2.AlbumId \nWHERE T2.UnitPrice > 1 \nGROUP BY T2.AlbumId"
        ],
        "rule_sql": []
    },
    "5711": {
        "db_id": "dorm_1",
        "question": "What are the different dorm amenity names in alphabetical order?",
        "ground_truth": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "amends": [
            "Do reference table `dorm_amenity` instead of `dorm_amenities` in the FROM clause. Do use ascending ORDER BY `amenity_name` without DESC instead of descending order. The amended query now correctly references the proper table name and sorts the amenities in ascending alphabetical order, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT amenity_name FROM dorm_amenities ORDER BY amenity_name DESC;",
            "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name ASC;"
        ],
        "rule_sql": []
    },
    "1310": {
        "db_id": "performance_attendance",
        "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "ground_truth": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"",
        "amends": [
            "Do select `Attendance` instead of `*` and use table `performance` instead of `attendances`. Do use `OR` between location conditions instead of `AND` to find records matching either venue. Do use double quotes for string literals instead of single quotes. The amended query now correctly retrieves attendance data from either TD Garden or Bell Centre instead of incorrectly requiring both conditions simultaneously."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM attendances WHERE location = 'TD Garden' AND location = 'Bell Centre'",
            "SELECT Attendance FROM performance WHERE Location = \"TD Garden\" OR Location = \"Bell Centre\""
        ],
        "rule_sql": []
    },
    "3752": {
        "db_id": "program_share",
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "ground_truth": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "amends": [
            "Do select `name` from `program` instead of `program_name` from `programs`. Do use `EXCEPT` to filter out morning programs instead of a `NOT LIKE` filter on `broadcast_time`. Do add a join between `program` and `broadcast` tables on `program_id` instead of querying a single table. Do filter on `Time_of_day = \"Morning\"` in the `WHERE` clause instead of pattern matching with `NOT LIKE '%AM%'`. Do reference the table as `program` instead of `programs` and use proper column names throughout. The amended query now correctly identifies programs that are not broadcast in the morning by using set operations instead of unreliable string pattern matching."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT program_name FROM programs WHERE broadcast_time NOT LIKE '%AM%';",
            "SELECT Name FROM program WHERE Program_ID IN (SELECT Program_ID FROM program EXCEPT SELECT Program_ID FROM broadcast WHERE Time_of_day = 'Morning')"
        ],
        "rule_sql": []
    },
    "6713": {
        "db_id": "driving_school",
        "question": "What is the first name of all employees who do not give any lessons?",
        "ground_truth": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` with a subquery. Do change the main table reference from `employees` to `Staff` instead of keeping the original table name. Do add a second query with `JOIN` between `Lessons` and `Staff` on `staff_id = staff_id` instead of the subquery filtering on `employee_id`. Do reference `first_name` from the joined `Staff` table as `T2.first_name` instead of the single column subquery approach. Do use table aliases `T1` and `T2` for clarity instead of no aliases. The amended query now correctly handles potential NULL values and set differences using EXCEPT instead of the problematic NOT IN approach with subqueries."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM lessons);",
            "SELECT T1.first_name\nFROM Staff T1\nEXCEPT\nSELECT T2.first_name\nFROM Lessons\nJOIN Staff T2 ON Lessons.staff_id = T2.staff_id"
        ],
        "rule_sql": []
    },
    "3597": {
        "db_id": "music_1",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "ground_truth": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "amends": [
            "Do use `avg(rating)` and add `avg(resolution)` instead of `AVG(rating)` and `resolution` without aggregation. Do reference table `song` instead of `songs`. Do use filter `languages = \"bangla\"` instead of `language = 'Bangla'`. Do remove `GROUP BY resolution` instead of keeping it since both aggregates now apply to the entire result set. The amended query now correctly computes average rating and average resolution for all Bangla songs without grouping."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating), resolution FROM songs WHERE language = 'Bangla' GROUP BY resolution;",
            "SELECT AVG(rating) AS average_rating, AVG(resolution) AS average_resolution FROM song WHERE languages = 'bangla'"
        ],
        "rule_sql": []
    },
    "5585": {
        "db_id": "products_gen_characteristics",
        "question": "Give the unit of measure for the product with the name 'cumin'.",
        "ground_truth": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"",
        "amends": [
            "Do select `t2.unit_of_measure` instead of `unit` and add table alias `t1` for the products table. Do add `JOIN ref_product_categories AS t2` with join condition `ON t1.product_category_code = t2.product_category_code` instead of querying only the products table. Do use filter `t1.product_name = \"cumin\"` instead of `name = 'cumin'` to reference the correct column name with proper table qualification. The amended query now correctly joins to the reference table to obtain the unit of measure and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT unit FROM products WHERE name = 'cumin';",
            "SELECT t2.unit_of_measure \nFROM Products AS t1 \nJOIN Ref_Product_Categories AS t2 ON t1.product_category_code = t2.product_category_code \nWHERE t1.product_name = 'cumin'"
        ],
        "rule_sql": []
    },
    "5770": {
        "db_id": "customer_complaints",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "ground_truth": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "amends": [
            "Do select `email_address` instead of `email` in the SELECT list. Do order by `email_address` first instead of `phone_number` first in the ORDER BY clause. The amended query now correctly references the email_address column and prioritizes email sorting over phone number sorting, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email, phone_number FROM customers ORDER BY phone_number, email;",
            "SELECT email_address, phone_number FROM Customers ORDER BY email_address, phone_number;"
        ],
        "rule_sql": []
    },
    "5147": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the order dates of the orders with price above 1000.",
        "ground_truth": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000",
        "amends": [
            "Do select `T1.Order_Date` instead of `order_date` and add table aliases. Do join `Customer_Orders AS T1` instead of querying only `orders`, then add `ORDER_ITEMS AS T2` with `ON T1.Order_ID = T2.Order_ID` instead of missing this join, and add `Products AS T3` with `ON T2.Product_ID = T3.Product_ID` instead of omitting this table. Do filter on `T3.Product_price > 1000` instead of `price > 1000` to correctly reference the product price rather than an ambiguous column. The amended query now properly joins the three tables to filter products by price and returns order dates from the correct table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_date FROM orders WHERE price > 1000",
            "SELECT T1.Order_Date\nFROM Customer_Orders AS T1\nJOIN Order_Items AS T2 ON T1.Order_ID = T2.Order_ID\nJOIN Products AS T3 ON T2.Product_ID = T3.Product_ID\nWHERE T3.Product_Price > 1000"
        ],
        "rule_sql": []
    },
    "2247": {
        "db_id": "machine_repair",
        "question": "Please show the team that has the most number of technicians.",
        "ground_truth": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select `Team` from the `technician` table instead of `team_name` from `teams`. Do use `GROUP BY Team` to aggregate by team instead of attempting to order by a count without grouping. Do count all records with `COUNT(*)` instead of referencing a non-aggregated column `technicians`. The amended query now correctly identifies the team with the most technicians by grouping and counting records in the technician table, matching the intended behavior.",
            "Do select only `Team` instead of including `COUNT(*) as technician_count` in the SELECT list. Do move the aggregate function `COUNT(*)` to the ORDER BY clause instead of keeping it in the SELECT list. Do remove the alias `technician_count` from the ORDER BY clause instead of referencing it. The amended query now correctly returns only the team with the highest count of technicians while matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM teams ORDER BY COUNT(technicians) DESC LIMIT 1;",
            "SELECT Team, COUNT(*) as technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1;",
            "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "1353": {
        "db_id": "college_2",
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "ground_truth": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "amends": [
            "Do reference table `department` instead of `departments` and use column `dept_name` instead of `department_name` while keeping the same filter logic with `OR` conditions for 'Marketing' and 'Finance'. Do use lowercase `sum(budget)` instead of `SUM(budget)` while maintaining the same aggregation function. The amended query now correctly references the actual table and column names while preserving the intended filtering and aggregation behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(budget) FROM departments WHERE department_name = 'Marketing' OR department_name = 'Finance';",
            "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'"
        ],
        "rule_sql": []
    },
    "3286": {
        "db_id": "college_1",
        "question": "How many credits is the course that the student with the last name Smithson took, and what is its description?",
        "ground_truth": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'",
        "amends": [
            "Do use table aliases `T4.crs_description` and `T4.crs_credit` instead of `c.credits` and `c.description` in the SELECT list. Do join `CLASS AS T1` instead of directly joining `courses c` and use `T1.class_code = T2.class_code` instead of `e.course_id = c.course_id` for the enrollment-course relationship. Do join `student AS T3` instead of `students s` and use `T3.stu_num = T2.stu_num` instead of `s.student_id = e.student_id` for the student-enrollment relationship. Do join `course AS T4` through `T4.crs_code = T1.crs_code` instead of directly joining courses to enrollments. Do filter on `T3.stu_lname = 'Smithson'` instead of `s.last_name = 'Smithson'` for the last name condition. The amended query now correctly navigates the four-table relationship through proper join conditions and matches the RIGHT_SQL's behavior.",
            "Do reverse the column order in the SELECT list to `T4.crs_description, T4.crs_credit` instead of `T4.crs_credit, T4.crs_description`. Do use `T3.stu_num = T2.stu_num` instead of `T2.STU_NUM = T3.STU_NUM` in the STUDENT join condition. Do use `T4.crs_code = T1.crs_code` instead of `T1.CRS_CODE = T4.CRS_CODE` in the COURSE join condition. The amended query now correctly retrieves course descriptions and credits for students with the last name Smithson while maintaining proper join relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.credits, c.description \nFROM students s\nJOIN enrollments e ON s.student_id = e.student_id\nJOIN courses c ON e.course_id = c.course_id\nWHERE s.last_name = 'Smithson';",
            "SELECT T4.crs_credit, T4.crs_description\nFROM CLASS AS T1\nJOIN ENROLL AS T2 ON T1.CLASS_CODE = T2.CLASS_CODE\nJOIN STUDENT AS T3 ON T2.STU_NUM = T3.STU_NUM\nJOIN COURSE AS T4 ON T1.CRS_CODE = T4.CRS_CODE\nWHERE T3.STU_LNAME = 'Smithson';",
            "SELECT T4.crs_description, T4.crs_credit\nFROM CLASS AS T1\nJOIN ENROLL AS T2 ON T1.class_code = T2.class_code\nJOIN STUDENT AS T3 ON T3.stu_num = T2.stu_num\nJOIN COURSE AS T4 ON T4.crs_code = T1.crs_code\nWHERE T3.stu_lname = 'Smithson'"
        ],
        "rule_sql": []
    },
    "1032": {
        "db_id": "phone_1",
        "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "ground_truth": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";",
        "amends": [
            "Do select `T2.Hardware_Model_name` and `T2.Company_name` instead of `hardware.model_name` and `company.name`. Do use `FROM screen_mode AS T1 JOIN phone AS T2` instead of `FROM hardware JOIN company`. Do change the join condition to `ON T1.Graphics_mode = T2.screen_mode` instead of `ON hardware.company_id = company.id`. Do move the filter to `WHERE T1.Type = \"Graphics\"` instead of `WHERE screen.mode_type = 'Graphics'` and reference the correct table. The amended query now correctly joins screen_mode and phone tables to retrieve hardware model and company information for graphics mode devices."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT hardware.model_name, company.name \nFROM hardware \nJOIN company ON hardware.company_id = company.id \nWHERE screen.mode_type = 'Graphics';",
            "SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\""
        ],
        "rule_sql": []
    },
    "1975": {
        "db_id": "products_for_hire",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "ground_truth": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "amends": [
            "Do use `Discount_Coupons AS T1` instead of `coupons` as the main table. Do add explicit `JOIN` with `customers AS T2` on `T1.coupon_id = T2.coupon_id` instead of using subqueries with `customer_id` conditions. Do filter with `T2.good_or_bad_customer = 'good'` instead of `rating = 'good'` in a subquery. Do use `INTERSECT` to find coupon amounts that appear for both good and bad customers instead of using `AND` with two `IN` subqueries that would never return results since a customer cannot be both good and bad simultaneously. Do remove the redundant subquery structure and instead perform two separate joins with different filter conditions combined by set intersection. The amended query now correctly identifies coupon amounts that are associated with both good and bad customers through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coupon_amount FROM coupons WHERE customer_id IN (SELECT customer_id FROM customers WHERE rating = 'good') AND customer_id IN (SELECT customer_id FROM customers WHERE rating = 'bad')",
            "SELECT T1.coupon_amount\nFROM Discount_Coupons AS T1\nJOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id\nWHERE T2.good_or_bad_customer = 'good'\nINTERSECT\nSELECT T1.coupon_amount\nFROM Discount_Coupons AS T1\nJOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id\nWHERE T2.good_or_bad_customer = 'bad'"
        ],
        "rule_sql": []
    },
    "5486": {
        "db_id": "voter_2",
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "ground_truth": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "amends": [
            "Do add `JOIN VOTING_RECORD AS T2` instead of querying only the `students` table. Do use `ON T1.StuID = Class_Senator_Vote` instead of filtering on `class_senator_votes > 0`. Do reference `T2.Election_Cycle` instead of `election_cycle` from the wrong table. Do use double quotes around \"M\" and \"Fall\" instead of single quotes. Do remove the `class_senator_votes > 0` filter entirely instead of keeping it, as the join condition now properly handles the voting relationship. The amended query now correctly joins student and voting record tables to count male students who voted in the fall election cycle."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE sex = 'M' AND election_cycle = 'fall' AND class_senator_votes > 0;",
            "SELECT COUNT(*) \nFROM Student AS T1\nJOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote\nWHERE T1.Sex = \"M\" AND T2.Election_Cycle = \"Fall\""
        ],
        "rule_sql": []
    },
    "406": {
        "db_id": "flight_1",
        "question": "What are the destinations and number of flights to each one?",
        "ground_truth": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "amends": [
            "Do reference the table as `Flight` instead of `flights` to match the correct schema. The amended query now correctly counts flights by destination using the proper table name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT destination, COUNT(*) FROM flights GROUP BY destination;",
            "SELECT destination, COUNT(flno) AS number_of_flights FROM flight GROUP BY destination;"
        ],
        "rule_sql": []
    },
    "4306": {
        "db_id": "club_1",
        "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".",
        "ground_truth": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
        "amends": [
            "Do select `DISTINCT t1.clubname` instead of `name` from a single table. Do add joins to `member_of_club AS t2` and `student AS t3` instead of querying only the `clubs` table. Do use `JOIN` with `t1.clubid = t2.clubid` and `t2.stuid = t3.stuid` instead of no joins. Do move the filter to `t3.city_code = \"HOU\"` instead of applying it directly to the club table. The amended query now correctly finds distinct club names by joining through member relationships to filter students by city code, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM clubs WHERE city_code = 'HOU';",
            "SELECT DISTINCT t1.ClubName FROM Club AS t1 JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID JOIN Student AS t3 ON t2.StuID = t3.StuID WHERE t3.city_code = 'HOU'"
        ],
        "rule_sql": []
    },
    "2799": {
        "db_id": "election",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "ground_truth": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "amends": [
            "Do use `INTERSECT` with two separate queries instead of multiple `JOIN` operations. Do reference `election` and `party` tables instead of `parties`, `delegates`, and `committee_members` tables. Do filter with `WHERE T1.Committee = \"Appropriations\"` and `WHERE T1.Committee = \"Economic Matters\"` in separate queries instead of joining multiple committee tables with name conditions. Do select `T2.Party` instead of `p.party_name`. Do remove `DISTINCT` since `INTERSECT` inherently returns distinct results instead of keeping it. Do use proper table aliases `T1` and `T2` instead of single-letter aliases. The amended query now correctly finds parties that have members on both committees using set intersection instead of complex joining logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT p.party_name\nFROM parties p\nJOIN delegates d ON p.party_id = d.party_id\nJOIN committee_members cm1 ON d.delegate_id = cm1.delegate_id\nJOIN committees c1 ON cm1.committee_id = c1.committee_id AND c1.committee_name = 'Appropriations'\nJOIN committee_members cm2 ON d.delegate_id = cm2.delegate_id\nJOIN committees c2 ON cm2.committee_id = c2.committee_id AND c2.committee_name = 'Economic Matters';",
            "SELECT T2.Party FROM election T1 JOIN party T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election T1 JOIN party T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\""
        ],
        "rule_sql": []
    },
    "2193": {
        "db_id": "formula_1",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "ground_truth": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "amends": [
            "Do select `T1.name` instead of `race_name` and add table alias `T1` for the races table. Do add `JOIN circuits AS T2` instead of omitting the circuits table, and use `ON T1.circuitid = T2.circuitid` instead of no join condition. Do move the country filter to `T2.country = \"Spain\"` instead of applying it to the races table, and keep `T1.year > 2000` instead of `year > 2000`. The amended query now correctly joins races with circuits to filter by circuit country instead of incorrectly assuming races have a country column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT race_name FROM races WHERE year > 2000 AND country = 'Spain';",
            "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year > 2000 AND T2.country = 'Spain'"
        ],
        "rule_sql": []
    },
    "178": {
        "db_id": "bike_1",
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
        "ground_truth": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "amends": [
            "Do use `city` instead of `city_name` for the grouping column and `COUNT(*)` instead of `COUNT(station_id)` for the aggregate function. Do reference table `station` instead of `stations` in the FROM clause. Do maintain the HAVING clause with `COUNT(*) >= 15` instead of using the alias `station_count` in the condition. The amended query now correctly counts all rows per city group rather than only non-null station_id values, and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name, COUNT(station_id) AS station_count FROM stations GROUP BY city_name HAVING station_count >= 15;",
            "SELECT city, COUNT(*) AS station_count FROM station GROUP BY city HAVING COUNT(*) >= 15"
        ],
        "rule_sql": []
    },
    "1644": {
        "db_id": "wedding",
        "question": "Show the names for all females from Canada having a wedding in year 2016.",
        "ground_truth": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'",
        "amends": [
            "Do select `T2.name` from the `wedding` table instead of `name` from the `people` table. Do join `wedding AS T1` with `people AS T2` on `T1.female_id = T2.people_id` instead of querying only the `people` table. Do filter on `T1.year = 2016` instead of `wedding_year = 2015`. Do use `T2.is_male = 'F'` instead of `gender = 'male'` for gender filtering. Do keep `T2.country = 'Canada'` as the country filter but apply it to the joined table instead of the standalone table. The amended query now correctly retrieves female wedding participants from Canada for the year 2016 through proper table joining and condition application."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE gender = 'male' AND country = 'Canada' AND wedding_year = 2015;",
            "SELECT T2.Name \nFROM wedding AS T1 \nJOIN people AS T2 ON T1.Female_ID = T2.People_ID \nWHERE T1.Year = 2016 \nAND T2.Is_Male = 'F' \nAND T2.Country = 'Canada'"
        ],
        "rule_sql": []
    },
    "1606": {
        "db_id": "customers_and_invoices",
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "ground_truth": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "amends": [
            "Do specify table aliases `T1.invoice_date`, `T1.order_id`, and `T2.order_details` instead of bare column names. Do add `FROM Invoices AS T1 JOIN Orders AS T2` instead of just `FROM invoices` to include the necessary join. Do add join condition `ON T1.order_id = T2.order_id` instead of omitting it entirely to properly relate the tables. The amended query now correctly joins the Invoices and Orders tables to retrieve order details from the appropriate source table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT invoice_date, order_id, order_details FROM invoices",
            "SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id"
        ],
        "rule_sql": []
    },
    "4827": {
        "db_id": "aircraft",
        "question": "List names of all pilot in descending order of age.",
        "ground_truth": "SELECT Name FROM pilot ORDER BY Age DESC",
        "amends": [
            "Do use table name `pilot` instead of `pilots` and column names `Name` and `Age` with proper capitalization instead of lowercase `name` and `age`. Do order by `Age DESC` instead of `ASC` to sort in descending order rather than ascending. The amended query now correctly references the intended table and columns with proper case sensitivity and applies the desired descending sort order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM pilots ORDER BY age ASC;",
            "SELECT Name FROM pilot ORDER BY Age DESC;"
        ],
        "rule_sql": []
    },
    "5761": {
        "db_id": "dorm_1",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "ground_truth": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "amends": [
            "Do select `dorm_name` from `dorm` instead of `name` from `dorms`. Do use `EXCEPT` with a subquery instead of a simple `WHERE` filter. Do add joins between `dorm`, `has_amenity`, and `dorm_amenity` tables instead of querying a single table. Do filter for `amenity_name = 'TV Lounge'` in the subquery instead of checking `tv_lounge = 'yes'` directly. Do reference tables with aliases `T1`, `T2`, and `T3` instead of no aliases. The amended query now correctly identifies dorms without TV lounges by excluding those that have this amenity, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM dorms WHERE tv_lounge = 'yes';",
            "SELECT T1.dorm_name FROM Dorm T1 EXCEPT SELECT T1.dorm_name FROM Dorm T1 JOIN Has_amenity T2 ON T1.dormid = T2.dormid JOIN Dorm_amenity T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'"
        ],
        "rule_sql": []
    },
    "707": {
        "db_id": "customers_card_transactions",
        "question": "How many debit cards do we have?",
        "ground_truth": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "amends": [
            "Do reference table `Customers_cards` instead of `credit_cards`. Do use column `card_type_code` instead of `card_type` for the filter condition. Do use string literal `\"Debit\"` instead of `'debit'` for the comparison value. The amended query now correctly counts records from the appropriate table using the proper column name and case-sensitive value matching."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM credit_cards WHERE card_type = 'debit';",
            "SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = \"Debit\";"
        ],
        "rule_sql": []
    },
    "4127": {
        "db_id": "film_rank",
        "question": "What are the countries for each market, ordered alphabetically?",
        "ground_truth": "SELECT Country FROM market ORDER BY Country ASC",
        "amends": [
            "Do select only `Country` instead of both `market` and `country` columns. Do reference the table as `market` instead of `markets`. Do order by `Country ASC` instead of `market DESC`. The amended query now correctly selects only the country column from the market table in ascending order, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT market, country FROM markets ORDER BY market DESC;",
            "SELECT Country FROM market ORDER BY Country ASC;"
        ],
        "rule_sql": []
    },
    "4404": {
        "db_id": "network_2",
        "question": "How many different cities are they from?",
        "ground_truth": "SELECT count(DISTINCT city) FROM Person",
        "amends": [
            "Do use `count(DISTINCT city)` instead of `COUNT(*)` to count distinct cities rather than all rows. Do reference table `Person` instead of `users` as the correct data source. Do remove the `WHERE city IS NOT NULL` filter instead of keeping it since `count(DISTINCT)` inherently handles null values by excluding them from the count. The amended query now correctly counts distinct non-null city values from the Person table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE city IS NOT NULL",
            "SELECT COUNT(DISTINCT city) FROM Person"
        ],
        "rule_sql": []
    },
    "4812": {
        "db_id": "aircraft",
        "question": "What are the names of the pilots in alphabetical order?",
        "ground_truth": "SELECT Name FROM pilot ORDER BY Name ASC",
        "amends": [
            "Do reference the table as `pilot` instead of `pilots` and use column name `Name` instead of `name` in both the SELECT clause and ORDER BY clause. Do use `ASC` ordering instead of `DESC` ordering for the Name column. The amended query now correctly references the intended table and column names with proper case sensitivity and ascending sort order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM pilots ORDER BY name DESC;",
            "SELECT Name FROM pilot ORDER BY Name ASC;"
        ],
        "rule_sql": []
    },
    "2721": {
        "db_id": "storm_record",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "ground_truth": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "amends": [
            "Do use table alias `T1` for `storm` instead of `s` for `storms`, and join with `affected_region` as `T2` instead of `affected_cities` as `ac`. Do remove `s.name` from `GROUP BY` instead of including it, keeping only `T1.storm_id`. Do change the first condition to `count(*) >= 2` instead of `COUNT(DISTINCT ac.region_id) >= 2`. Do change the second condition to `sum(T2.number_city_affected) >= 10` instead of `COUNT(ac.city_id) >= 10`. Do split the query into two parts with `INTERSECT` instead of combining both conditions in a single `HAVING` clause. The amended query now correctly identifies storms that meet both criteria through set intersection rather than incorrect aggregation logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name \nFROM storms s\nJOIN affected_cities ac ON s.storm_id = ac.storm_id\nGROUP BY s.storm_id, s.name\nHAVING COUNT(DISTINCT ac.region_id) >= 2 AND COUNT(ac.city_id) >= 10;",
            "SELECT T1.Name\nFROM storm T1\nJOIN affected_region T2 ON T1.Storm_ID = T2.Storm_ID\nGROUP BY T1.Storm_ID\nHAVING COUNT(*) >= 2\nINTERSECT\nSELECT T1.Name\nFROM storm T1\nJOIN affected_region T2 ON T1.Storm_ID = T2.Storm_ID\nGROUP BY T1.Storm_ID\nHAVING SUM(T2.Number_city_affected) >= 10"
        ],
        "rule_sql": []
    },
    "6458": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the ids of documents that do not have expenses.",
        "ground_truth": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "amends": [
            "Do select `document_id` from `Documents` instead of `id` from `documents`. Do use `EXCEPT` to exclude documents present in `Documents_with_expenses` instead of filtering for `expenses IS NULL`. Do reference the correct table name `Documents` instead of lowercase `documents`. Do remove the `WHERE` clause entirely instead of using `expenses IS NULL` filtering. The amended query now correctly identifies documents without expenses by excluding those that exist in the expenses tracking table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM documents WHERE expenses IS NULL",
            "SELECT Document_ID FROM Documents\nEXCEPT\nSELECT Document_ID FROM Documents_with_Expenses"
        ],
        "rule_sql": []
    },
    "5418": {
        "db_id": "shop_membership",
        "question": "Show the membership level with most number of members.",
        "ground_truth": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `member` instead of `members` and use `LEVEL` instead of `membership_level` for the column name. Do use `count(*)` directly in the ORDER BY clause instead of aliasing it as `member_count`. Do order by `DESC` instead of `ASC` to find the most common level rather than the least common. Do remove the alias `member_count` from the SELECT list instead of including it. The amended query now correctly identifies the most frequent membership level by counting occurrences in descending order.",
            "Do select only `LEVEL` instead of both `Level` and `COUNT(*)`, as the requirement is to return the level with the highest count rather than displaying both values. Do maintain the same `GROUP BY LEVEL` and `ORDER BY count(*) DESC LIMIT 1` structure to correctly identify the most frequent level. The amended query now matches RIGHT_SQL's behavior by returning only the level value with the highest occurrence count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT membership_level, COUNT(*) as member_count FROM members GROUP BY membership_level ORDER BY member_count ASC LIMIT 1;",
            "SELECT Level, COUNT(*) FROM member GROUP BY Level ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT Level FROM member GROUP BY Level ORDER BY count(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "4025": {
        "db_id": "ship_mission",
        "question": "What are the names of the ships that are not involved in any missions?",
        "ground_truth": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
        "amends": [
            "Do reference table `ship` instead of `ships` and column `Name` instead of `name` in the SELECT clause. Do reference table `mission` instead of `missions` and column `Ship_ID` instead of `ship_id` in the subquery. The amended query now correctly matches the schema and produces the intended results by querying the proper table and column names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM ships WHERE ship_id NOT IN (SELECT ship_id FROM missions)",
            "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"
        ],
        "rule_sql": []
    },
    "1859": {
        "db_id": "wrestler",
        "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?",
        "ground_truth": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",
        "amends": [
            "Do select `T2.Name` and `T1.Team` instead of `wrestler_name` and `team_name`. Do join `wrestler AS T2` on `T1.Wrestler_ID = T2.Wrestler_ID` instead of querying only the `elimination` table. Do order by `T2.Days_held DESC` instead of `days_held ASC`. The amended query now correctly joins the wrestler table to access the wrestler's name and days held information, and sorts in descending order to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT wrestler_name, team_name FROM elimination ORDER BY days_held ASC;",
            "SELECT T2.Name, T1.Team FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC"
        ],
        "rule_sql": []
    },
    "6873": {
        "db_id": "flight_4",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "ground_truth": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "amends": [
            "Do join `airports` as `T1` with `routes` as `T2` on `T1.apid = T2.dst_apid` instead of querying only the `routes` table without any join. Do filter on `T1.name = 'John F Kennedy International Airport'` instead of filtering directly on `routes.destination`. Do use the correct airport ID relationship through the join condition instead of relying on the destination name field in the routes table. The amended query now correctly counts routes by joining to the airports table to properly identify John F Kennedy International Airport by its standardized name field rather than using the potentially inconsistent destination field, ensuring accurate results that match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM routes WHERE destination = 'John F Kennedy International Airport';",
            "SELECT COUNT(*) \nFROM routes T2\nJOIN airports T1 ON T1.apid = T2.dst_apid\nWHERE T1.name = 'John F Kennedy International Airport'"
        ],
        "rule_sql": []
    },
    "2068": {
        "db_id": "party_people",
        "question": "Which member names corresponding to members who are not in the Progress Party?",
        "ground_truth": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"",
        "amends": [
            "Do select `T1.member_name` instead of `name` and use table alias `T1` instead of direct column reference. Do add `JOIN party AS T2` instead of querying only the `members` table. Do use join condition `T1.party_id = T2.party_id` instead of filtering directly on party name. Do change filter to `T2.Party_name != \"Progress Party\"` instead of `party = 'Progress Party'` to exclude rather than include Progress Party members. The amended query now correctly joins tables and filters for non-Progress Party members, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM members WHERE party = 'Progress Party';",
            "SELECT T1.Member_Name \nFROM member AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nWHERE T2.Party_name != 'Progress Party'"
        ],
        "rule_sql": []
    },
    "5864": {
        "db_id": "tracking_share_transactions",
        "question": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "ground_truth": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50",
        "amends": [
            "Do select `T1.lot_details` instead of `*` to specify only needed columns. Do use explicit `JOIN` syntax with `TRANSACTIONS_LOTS` as `T2` instead of a subquery to properly connect the tables. Do join `LOTS AS T1` to `TRANSACTIONS_LOTS AS T2` on `T1.lot_id = T2.transaction_id` instead of directly filtering by `transaction_id`. Do then join `TRANSACTIONS AS T3` on `T2.transaction_id = T3.transaction_id` instead of using an `IN` subquery. Do filter with `T3.share_count < 50` instead of `> 50` to correct the comparison operator. The amended query now properly navigates the relationship through the junction table and applies the correct filter condition, matching the RIGHT_SQL's behavior.",
            "Do join `TRANSACTIONS_LOTS` on `T1.lot_id = T2.transaction_id` instead of `T1.lot_id = T2.lot_id`, which incorrectly assumes the foreign key relationship between Lots and Transactions_Lots tables. The amended query properly connects the tables through the transaction_id field instead of lot_id, ensuring the join condition correctly reflects the actual database schema relationships while maintaining the same WHERE filter on `T3.share_count < 50` and SELECT clause for `T1.lot_details`. The amended query now matches RIGHT_SQL's behavior with the correct join predicate.",
            "Do join `TRANSACTIONS_LOTS` on `T1.lot_id = T2.transaction_id` instead of `T1.lot_id = T2.lot_id`. The amended query now correctly matches the RIGHT_SQL's behavior by fixing the join condition between Lots and Transactions_Lots tables.",
            "Do join `TRANSACTIONS_LOTS` on `T1.lot_id = T2.transaction_id` instead of `T1.lot_id = T2.lot_id`. The amended query now correctly matches the intended join logic between Lots and Transactions_Lots tables.",
            "Do join `TRANSACTIONS_LOTS` on `T1.lot_id = T2.transaction_id` instead of `T1.lot_id = T2.lot_id`, which incorrectly matches the wrong column in the join condition. The amended query now correctly links the Lots table to Transactions_Lots using the transaction_id field instead of lot_id, ensuring proper relationship mapping between the tables while maintaining the same WHERE filter on `T3.share_count < 50`. The amended query now matches RIGHT_SQL's behavior with the corrected join logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM lots WHERE transaction_id IN (SELECT transaction_id FROM transactions WHERE share_count > 50);",
            "SELECT T1.lot_details \nFROM Lots AS T1\nJOIN Transactions_Lots AS T2 ON T1.lot_id = T2.lot_id\nJOIN Transactions AS T3 ON T2.transaction_id = T3.transaction_id\nWHERE T3.share_count < 50",
            "SELECT T1.lot_details \nFROM Lots AS T1\nJOIN Transactions_Lots AS T2 ON T1.lot_id = T2.lot_id\nJOIN Transactions AS T3 ON T2.transaction_id = T3.transaction_id\nWHERE T3.share_count < 50",
            "SELECT T1.lot_details \nFROM Lots AS T1\nJOIN Transactions_Lots AS T2 ON T1.lot_id = T2.lot_id\nJOIN Transactions AS T3 ON T2.transaction_id = T3.transaction_id\nWHERE T3.share_count < 50",
            "SELECT T1.lot_details \nFROM Lots AS T1\nJOIN Transactions_Lots AS T2 ON T1.lot_id = T2.lot_id\nJOIN Transactions AS T3 ON T2.transaction_id = T3.transaction_id\nWHERE T3.share_count < 50",
            "SELECT T1.lot_details \nFROM Lots AS T1\nJOIN Transactions_Lots AS T2 ON T1.lot_id = T2.transaction_id\nJOIN Transactions AS T3 ON T2.transaction_id = T3.transaction_id\nWHERE T3.share_count < 50"
        ],
        "rule_sql": []
    },
    "2556": {
        "db_id": "county_public_safety",
        "question": "Show the number of cities in counties that have a population more than 20000.",
        "ground_truth": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
        "amends": [
            "Do reference the `city` table instead of `cities` in the FROM clause. Do use a subquery with `county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)` instead of directly filtering `population > 20000` on the main table. Do remove the direct population filter from the WHERE clause and instead apply it within the subquery against the `county_public_safety` table. The amended query now correctly counts cities based on counties meeting the population threshold rather than individual cities, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE population > 20000;",
            "SELECT COUNT(*) FROM city WHERE County_ID IN (SELECT County_ID FROM county_public_safety WHERE Population > 20000)"
        ],
        "rule_sql": []
    },
    "5613": {
        "db_id": "swimming",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "ground_truth": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006",
        "amends": [
            "Do use `EXCEPT` set operation instead of a simple `WHERE` filter to properly exclude countries with stadiums opened after 2006. Do reference table `stadium` instead of `stadiums` to match the correct table name. Do use column `opening_year` instead of `opened_year` to reference the correct column name. Do add the second query `SELECT country FROM stadium WHERE opening_year > 2006` instead of omitting it, which creates the proper exclusion logic. The amended query now correctly returns countries that have stadiums but only those where all stadiums were opened in or before 2006, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM stadiums WHERE opened_year <= 2006;",
            "SELECT Country FROM stadium\nEXCEPT\nSELECT Country FROM stadium WHERE opening_year > 2006"
        ],
        "rule_sql": []
    },
    "1638": {
        "db_id": "wedding",
        "question": "Show the minimum, maximum, and average age for all people.",
        "ground_truth": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
        "amends": [
            "Do use `avg(age)` instead of `AVG(height)` to correctly calculate the average age metric. Do remove the column aliases `min_age`, `max_age`, and `avg_age` instead of keeping them, as the right query returns unnamed columns. The amended query now matches RIGHT_SQL's behavior by properly calculating age statistics without aliases."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(age) AS min_age, MAX(age) AS max_age, AVG(height) AS avg_age FROM people;",
            "SELECT MIN(Age), MAX(Age), AVG(Age) FROM people;"
        ],
        "rule_sql": []
    },
    "1894": {
        "db_id": "school_finance",
        "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "ground_truth": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "amends": [
            "Do use `sum(amount)` as the aggregate expression instead of `endowment_amount` as a direct column reference. Do change the source table to `endowment` instead of `donations`. Do add `GROUP BY donator_name` to aggregate donations by donor instead of omitting grouping. Do change the sort direction to `DESC` instead of `ASC` to order by total donation amount descending. Do remove the direct column reference `endowment_amount` and instead calculate the sum of the `amount` column. The amended query now correctly aggregates donation amounts by donor and sorts by total donation amount in descending order, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT donator_name, endowment_amount FROM donations ORDER BY endowment_amount ASC;",
            "SELECT donator_name, SUM(amount) AS total_endowment_amount FROM endowment GROUP BY donator_name ORDER BY total_endowment_amount DESC;"
        ],
        "rule_sql": []
    },
    "3648": {
        "db_id": "baseball_1",
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "ground_truth": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
        "amends": [
            "Do select `name_first`, `name_last`, and `player_id` instead of `first_name`, `last_name`, and `id`. Do join `player_award` table instead of querying only the `players` table. Do add a `GROUP BY T1.player_id` clause instead of omitting grouping. Do order by `count(*)` instead of `awards_count`. Do use table aliases `T1` and `T2` instead of no aliases. The amended query now correctly counts awards per player and returns the top 3 players by award count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, id FROM players ORDER BY awards_count DESC LIMIT 3;",
            "SELECT T2.name_first, T2.name_last, T1.player_id\nFROM player_award T1\nJOIN player T2 ON T1.player_id = T2.player_id\nGROUP BY T1.player_id\nORDER BY COUNT(*) DESC\nLIMIT 3"
        ],
        "rule_sql": []
    },
    "4023": {
        "db_id": "ship_mission",
        "question": "What are the different fates of the mission that involved ships from the United States?",
        "ground_truth": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"",
        "amends": [
            "Do join `mission AS T1` with `ship AS T2` on `T1.Ship_ID = T2.Ship_ID` instead of querying only the `missions` table. Do filter on `T2.Nationality = \"United States\"` instead of `country = 'United States'` to correctly identify American ships. Do reference `T1.Fate` from the joined mission table instead of just `fate` from a single table. The amended query now properly correlates mission fate with ship nationality through the required table join, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT fate FROM missions WHERE country = 'United States';",
            "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = 'United States'"
        ],
        "rule_sql": []
    },
    "3123": {
        "db_id": "behavior_monitoring",
        "question": "How many students are not involved in any behavior incident?",
        "ground_truth": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
        "amends": [
            "Do filter with `student_id NOT IN` subquery instead of checking `behavior_incident_id IS NULL`. Do reference the `Behavior_Incident` table in a subquery instead of omitting it. Do use a correlated subquery to check for absence of related records instead of relying on a potentially incorrect NULL check on a foreign key column. The amended query now correctly identifies students without any behavior incidents by checking against the actual incident records table rather than assuming NULL values in a foreign key column accurately represent the absence of related records."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE behavior_incident_id IS NULL;",
            "SELECT COUNT(*) AS students_without_incidents\nFROM Students s\nWHERE s.student_id NOT IN (\n    SELECT DISTINCT student_id \n    FROM Behavior_Incident\n);"
        ],
        "rule_sql": []
    },
    "6594": {
        "db_id": "wine_1",
        "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?",
        "ground_truth": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "amends": [
            "Do reference the `WINE` table instead of `wines` and use `Appelation` instead of `appelation` for proper column naming. Do use `EXCEPT` to exclude results from the `APPELLATIONS` table instead of a simple `WHERE region !=` filter. Do add a subquery `SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"` instead of directly filtering in the main query. Do maintain the `YEAR > 2008` condition but apply it to the correct table structure. The amended query now correctly excludes Central Coast appellations using proper table relationships instead of relying on a single table with potentially incorrect region data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT appelation FROM wines WHERE year > 2008 AND region != 'Central Coast';",
            "SELECT DISTINCT w.Appelation \nFROM wine w\nWHERE w.Year > 2008\nEXCEPT\nSELECT a.Appelation \nFROM appellations a \nWHERE a.Area = 'Central Coast'"
        ],
        "rule_sql": []
    },
    "3060": {
        "db_id": "loan_1",
        "question": "Find the total amount of loans offered by each bank branch.",
        "ground_truth": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "amends": [
            "Do select `sum(amount)` and `T1.bname` instead of `branch_name` and `COUNT(*)`. Do join `bank AS T1` with `loan AS T2` on `T1.branch_id = T2.branch_id` instead of querying only the `loans` table. Do group by `T1.bname` instead of `branch_name`. The amended query now correctly aggregates loan amounts by branch name using proper table joins and matches the RIGHT_SQL's behavior.",
            "Do place the aggregate function `sum(amount)` first in the SELECT list instead of starting with `T1.bname`. Do use lowercase `branch_id` in the join condition instead of uppercase `branch_ID`. Do remove the alias `total_loan_amount` from the aggregate expression instead of keeping it. The amended query now correctly calculates the total loan amount per bank name with proper column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT branch_name, COUNT(*) FROM loans GROUP BY branch_name;",
            "SELECT T1.bname, SUM(T2.amount) AS total_loan_amount FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
            "SELECT sum(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"
        ],
        "rule_sql": []
    },
    "1772": {
        "db_id": "gymnast",
        "question": "How many distinct hometowns did these people have?",
        "ground_truth": "SELECT count(DISTINCT Hometown) FROM people",
        "amends": [
            "Do `count(DISTINCT Hometown)` instead of `COUNT(*)` to count distinct hometown values rather than all rows. Do add the `Hometown` column reference instead of omitting it to enable distinct counting. The amended query now correctly counts unique hometowns instead of total rows, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people;",
            "SELECT COUNT(DISTINCT Hometown) FROM people;"
        ],
        "rule_sql": []
    },
    "3027": {
        "db_id": "loan_1",
        "question": "In how many different cities are banks located?",
        "ground_truth": "SELECT count(DISTINCT city) FROM bank",
        "amends": [
            "Do `count(DISTINCT city)` instead of `COUNT(*)` to count distinct cities rather than all rows. Do reference table `bank` instead of `banks` to use the correct table name. The amended query now correctly counts distinct cities from the bank table instead of counting all rows from the incorrect table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM banks;",
            "SELECT COUNT(DISTINCT city) FROM bank;"
        ],
        "rule_sql": []
    },
    "4011": {
        "db_id": "ship_mission",
        "question": "For each type, how many ships are there?",
        "ground_truth": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
        "amends": [
            "Do reference table `ship` instead of `ships` in the FROM clause, as the correct table name is singular rather than plural. Do maintain the same SELECT list with `type` and `COUNT(*)` and the same GROUP BY clause with `TYPE`, as these elements remain unchanged between the queries. The amended query now correctly queries from the proper table name while preserving all other structural elements, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT type, COUNT(*) FROM ships GROUP BY type",
            "SELECT type, COUNT(*) FROM ship GROUP BY type"
        ],
        "rule_sql": []
    },
    "5032": {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "ground_truth": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "amends": [
            "Do use table alias `tryout` instead of `players` and column alias `cName` instead of `school_name`. Do use `pPos = 'mid'` instead of `position = 'mid'` for the filter condition. Do use `EXCEPT` set operation instead of `NOT IN` with a subquery for the exclusion logic. Do remove `DISTINCT` since `EXCEPT` inherently returns distinct values instead of keeping it. Do use `pPos = 'goalie'` instead of `position = 'goalie'` in the second query. The amended query now correctly uses set-based exclusion with EXCEPT instead of a subquery with NOT IN, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT school_name \nFROM players \nWHERE position = 'mid' \nAND school_name NOT IN (SELECT school_name FROM players WHERE position = 'goalie')",
            "SELECT cName FROM Tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM Tryout WHERE pPos = 'goalie'"
        ],
        "rule_sql": []
    },
    "4375": {
        "db_id": "tracking_grants_for_research",
        "question": "How many patents outcomes were listed for all the projects?",
        "ground_truth": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "amends": [
            "Do reference table `Project_outcomes` instead of `projects` for the correct data source. Do filter on column `outcome_code` with value 'Patent' instead of filtering on `outcome_type` with value 'patent' to use the proper column name and case-sensitive value. The amended query now correctly counts patent outcomes from the appropriate table with accurate filtering criteria."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM projects WHERE outcome_type = 'patent';",
            "SELECT COUNT(*) AS patent_count FROM Project_Outcomes WHERE outcome_code = 'Patent';"
        ],
        "rule_sql": []
    },
    "3397": {
        "db_id": "manufacturer",
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "ground_truth": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",
        "amends": [
            "Do select `name` instead of `manufacturer_name` and do not include `manufacturer_name` in the SELECT list. Do reference table `manufacturer` instead of `manufacturers` as the FROM source. Do order by `open_year` instead of `manufacturer_name` in the ORDER BY clause. The amended query now correctly selects the name column from the manufacturer table and orders results by the open_year field.",
            "Do use lowercase column names `name` and `manufacturer_id` instead of uppercase `Manufacturer_ID` and `Name`. Do use lowercase table name `manufacturer` instead of uppercase `Manufacturer`. Do use lowercase ORDER BY clause `open_year` instead of uppercase `Open_Year`. The amended query now matches the right SQL's behavior with consistent lowercase naming conventions.",
            "Do maintain the column order `name, manufacturer_id` instead of `manufacturer_id, name` to preserve the original column sequence. The amended query now matches RIGHT_SQL's behavior with identical column selection and ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT manufacturer_name, manufacturer_id FROM manufacturers ORDER BY manufacturer_name;",
            "SELECT Manufacturer_ID, Name FROM manufacturer ORDER BY Open_Year;",
            "SELECT manufacturer_id, name FROM manufacturer ORDER BY open_year;",
            "SELECT name, manufacturer_id FROM manufacturer ORDER BY open_year;"
        ],
        "rule_sql": []
    },
    "764": {
        "db_id": "race_track",
        "question": "Return the different classes of races.",
        "ground_truth": "SELECT DISTINCT CLASS FROM race",
        "amends": [
            "Do reference the `CLASS` column instead of the `race` column in the SELECT list. Do reference the `race` table instead of the `classes` table in the FROM clause. The amended query now correctly selects distinct class values from the race table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT race FROM classes;",
            "SELECT DISTINCT Class FROM race;"
        ],
        "rule_sql": []
    },
    "6434": {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids and details for each project?",
        "ground_truth": "SELECT project_id ,  project_details FROM Projects",
        "amends": [
            "Do select specific columns `project_id` and `project_details` instead of using `*` to select all columns. Do reference the table as `Projects` (with proper case) instead of `projects`. Do remove the `WHERE id IS NULL` filter instead of keeping it, as the right query returns all records without filtering. The amended query now correctly retrieves only the project_id and project_details columns from the Projects table without any unnecessary filtering, matching the intended behavior of the right SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM projects WHERE id IS NULL",
            "SELECT Project_ID, Project_Details FROM Projects"
        ],
        "rule_sql": []
    },
    "263": {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "ground_truth": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference the `Nominee` column instead of `nominee` and use the `musical` table instead of `nominations`. Do remove the `WHERE category LIKE '%musical%'` filter and the explicit `nomination_count` alias instead of keeping them. Do use `ORDER BY COUNT(*) DESC` instead of `ORDER BY nomination_count DESC` while maintaining the same descending count ordering. The amended query now correctly selects from the musical-specific table and matches the RIGHT_SQL's behavior.",
            "Do remove `COUNT(*) AS nomination_count` from the SELECT list instead of including it, as the query only needs to return the Nominee with the highest count rather than displaying the count value itself. The amended query now correctly returns just the Nominee column while maintaining the same grouping, ordering, and limiting logic to identify the most frequently nominated individual, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nominee, COUNT(*) as nomination_count \nFROM nominations \nWHERE category LIKE '%musical%' \nGROUP BY nominee \nORDER BY nomination_count DESC \nLIMIT 1;",
            "SELECT Nominee, COUNT(*) AS nomination_count FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6970": {
        "db_id": "culture_company",
        "question": "Show all publishers and the number of books for each publisher.",
        "ground_truth": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
        "amends": [
            "Do reference table `book_club` instead of `books` in the FROM clause while keeping the same SELECT list structure with `publisher` and `count(*)` and maintaining the GROUP BY `publisher` clause. The amended query now correctly queries the book_club table instead of the books table while preserving the same aggregation logic to count records by publisher."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) FROM books GROUP BY publisher;",
            "SELECT Publisher, COUNT(*) AS number_of_books FROM book_club GROUP BY Publisher;"
        ],
        "rule_sql": []
    },
    "5841": {
        "db_id": "workshop_paper",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "ground_truth": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "amends": [
            "Do reference the `workshop` table instead of `workshops` to use the correct table name. Do include the `Venue` column in the SELECT list instead of `venue` to match the correct column name. Do order by `Venue` instead of `date ASC` to sort by venue rather than date. Do remove the `date` column from the SELECT list instead of including it. The amended query now correctly selects only the Venue column from the workshop table ordered by venue, matching the right SQL's behavior.",
            "Do add `Date` to the SELECT list instead of omitting it, while keeping `Venue` in both the SELECT clause and ORDER BY clause. The amended query now includes both Date and Venue columns in the result set while maintaining the same ordering by Venue, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date, venue FROM workshops ORDER BY date ASC;",
            "SELECT Venue FROM workshop ORDER BY Venue;",
            "SELECT Date, Venue FROM workshop ORDER BY Venue;"
        ],
        "rule_sql": []
    },
    "3609": {
        "db_id": "music_1",
        "question": "Find the names and number of works of the three artists who have produced the most songs.",
        "ground_truth": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "amends": [
            "Do join `artist AS T1` with `song AS T2` on `T1.artist_name = T2.artist_name` instead of querying only the `songs` table. Do group by `T2.artist_name` instead of `artist_name` to ensure proper aggregation from the joined table. Do reference the count as `count(*)` without an alias instead of using `COUNT(*) as work_count` to match the ORDER BY clause. Do order by `count(*) DESC` instead of `work_count DESC` to maintain consistency with the unaliased aggregate. The amended query now correctly joins artist and song tables to count works per artist and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name, COUNT(*) as work_count FROM songs GROUP BY artist_name ORDER BY work_count DESC LIMIT 3;",
            "SELECT T1.artist_name, COUNT(*) \nFROM artist AS T1 \nJOIN song AS T2 ON T1.artist_name = T2.artist_name \nGROUP BY T2.artist_name \nORDER BY COUNT(*) DESC \nLIMIT 3"
        ],
        "rule_sql": []
    },
    "4703": {
        "db_id": "college_3",
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "ground_truth": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "amends": [
            "Do use `CName` instead of `name` for the column selection. Do reference table `COURSE` instead of `courses` as the source. Do use `UNION` to combine two separate queries instead of a single query with mixed `OR` and `AND` conditions. Do structure the query as two distinct SELECT statements with separate WHERE clauses: one for `Credits = 3` and another for `Credits = 1 AND Hours = 4` instead of combining them with potentially ambiguous operator precedence. Do capitalize column names `Credits` and `Hours` instead of lowercase `credits` and `hours`. The amended query now correctly handles the logical separation of conditions and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM courses WHERE credits = 3 OR credits = 1 AND hours = 4;",
            "SELECT CName FROM Course WHERE Credits = 3\nUNION\nSELECT CName FROM Course WHERE Credits = 1 AND Hours = '4'"
        ],
        "rule_sql": []
    },
    "169": {
        "db_id": "bike_1",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "ground_truth": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "amends": [
            "Do select `id` from `station` instead of `station_id` from `stations`. Do use a single table `station` instead of `stations` and remove the `bike_availability` filter. Do add an `EXCEPT` clause with a subquery that selects `station_id` from `status` grouped by `station_id` with a `HAVING` condition of `min(bikes_available) < 7` instead of the simple `WHERE bike_availability >= 7` filter. This amended query now correctly identifies stations with latitude greater than 37.4 that never have fewer than 7 bikes available, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT station_id FROM stations WHERE latitude > 37.4 AND bike_availability >= 7;",
            "SELECT id FROM station WHERE lat > 37.4\nEXCEPT\nSELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7"
        ],
        "rule_sql": []
    },
    "2574": {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "ground_truth": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
        "amends": [
            "Do use column names `roomName` and `RoomId` instead of `room_name` and `room_id`. Do reference table `Rooms` instead of `rooms`. Do use filter condition `basePrice > 160` instead of `price > 160`. Do use filter condition `maxOccupancy > 2` instead of `capacity <= 2`, changing both the column reference and the logical operator from less-than-or-equal to greater-than. The amended query now correctly filters for rooms with base price exceeding 160 and maximum occupancy greater than 2, matching the intended behavior.",
            "Do swap the column order to `roomName, RoomId` instead of `RoomId, roomName` while maintaining the same WHERE clause with `basePrice > 160 AND maxOccupancy > 2` filters. The amended query now matches RIGHT_SQL's behavior with identical column selection and filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT room_name, room_id FROM rooms WHERE price > 160 AND capacity <= 2;",
            "SELECT RoomId, roomName FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;",
            "SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;"
        ],
        "rule_sql": []
    },
    "848": {
        "db_id": "chinook_1",
        "question": "Count the number of customers that have an email containing \"gmail.com\".",
        "ground_truth": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "amends": [
            "Do reference the `CUSTOMER` table instead of `customers` to match the correct table name. Do use the exact pattern `\"%gmail.com%\"` instead of `'%gmail%'` to specifically match email addresses ending with gmail.com domain instead of any email containing 'gmail' anywhere. The amended query now correctly counts customers with gmail.com email addresses as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE email LIKE '%gmail%';",
            "SELECT COUNT(*) FROM Customer WHERE Email LIKE '%gmail.com%'"
        ],
        "rule_sql": []
    },
    "5302": {
        "db_id": "manufactory_1",
        "question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "ground_truth": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "amends": [
            "Do query the `manufacturers` table instead of `companies`. Do use `headquarter = 'Austin'` instead of `city = 'Austin'` in the subquery filter. Do add the `min` aggregate function around `revenue` in the subquery instead of selecting a single revenue value that could cause comparison issues. The amended query now correctly compares against the minimum revenue of Austin-headquartered manufacturers rather than potentially comparing against an arbitrary single row."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM companies WHERE revenue < (SELECT revenue FROM companies WHERE city = 'Austin')",
            "SELECT Name FROM Manufacturers WHERE Revenue < (SELECT MIN(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin')"
        ],
        "rule_sql": []
    },
    "4344": {
        "db_id": "tracking_grants_for_research",
        "question": "How many kinds of roles are there for the staff?",
        "ground_truth": "SELECT count(DISTINCT role_code) FROM Project_Staff",
        "amends": [
            "Do select `count(DISTINCT role_code)` instead of `COUNT(*)` to count distinct role codes rather than all rows. Do query from `Project_Staff` table instead of `staff` table to access the correct data source. Do remove the `WHERE role IS NOT NULL` filter instead of keeping it since the distinct count inherently handles null values. The amended query now correctly counts distinct role codes from the Project_Staff table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM staff WHERE role IS NOT NULL",
            "SELECT COUNT(DISTINCT role_code) FROM Project_Staff;"
        ],
        "rule_sql": []
    },
    "6582": {
        "db_id": "wine_1",
        "question": "What are the countries for appelations with at most 3 wines?",
        "ground_truth": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "amends": [
            "Do select `T1.County` instead of `country` and remove the `wine_count` alias instead of keeping it. Do use `APPELLATIONS AS T1 JOIN WINE AS T2` instead of just `appelations` and add the join condition `ON T1.Appelation = T2.Appelation` instead of omitting it. Do change the GROUP BY to `T2.Appelation` instead of `country`. The amended query now correctly joins the two tables and groups by the appropriate column to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as wine_count \nFROM appelations \nGROUP BY country \nHAVING COUNT(*) <= 3;",
            "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING COUNT(*) <= 3"
        ],
        "rule_sql": []
    },
    "4667": {
        "db_id": "college_3",
        "question": "Find the last names of faculties in building Barton in alphabetic order.",
        "ground_truth": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname",
        "amends": [
            "Do reference column `Lname` instead of `last_name` and table `FACULTY` instead of `faculties` in the SELECT clause and FROM source. Do use filter condition `Building = \"Barton\"` instead of `building = 'Barton'` in the WHERE clause, changing both the column name and quote style. Do remove the `DESC` modifier instead of keeping it in the ORDER BY clause, making the sort order ascending by default. The amended query now correctly references the actual schema elements and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name FROM faculties WHERE building = 'Barton' ORDER BY last_name DESC;",
            "SELECT Lname FROM Faculty WHERE Building = \"Barton\" ORDER BY Lname;"
        ],
        "rule_sql": []
    },
    "5691": {
        "db_id": "dorm_1",
        "question": "How many dorms have amenities?",
        "ground_truth": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "amends": [
            "Do count `DISTINCT dormid` instead of counting all rows with `COUNT(*)`. Do query from `has_amenity` table instead of from `dorms` table. Do remove the `WHERE amenities IS NOT NULL` filter instead of keeping it, as the existence of records in `has_amenity` inherently indicates amenity presence. The amended query now correctly counts unique dormitory IDs that have amenities by leveraging the dedicated relationship table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM dorms WHERE amenities IS NOT NULL;",
            "SELECT COUNT(DISTINCT dormid) FROM Has_amenity"
        ],
        "rule_sql": []
    },
    "3791": {
        "db_id": "e_learning",
        "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".",
        "ground_truth": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"",
        "amends": [
            "Do use `date_of_latest_logon` column instead of `MAX(logon_date)` aggregation. Do change the WHERE condition to `OR` logic with `family_name = \"Jaskolski\" OR family_name = \"Langosh\"` instead of `AND` logic with `family_name = 'Jaskolski' AND family_name = 'Langosh'`. Do remove the unnecessary aggregation since the right query directly selects the latest logon date column instead of calculating a maximum. The amended query now correctly retrieves students with either family name instead of incorrectly requiring both names simultaneously, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(logon_date) FROM students WHERE family_name = 'Jaskolski' AND family_name = 'Langosh';",
            "SELECT date_of_latest_logon FROM Students WHERE family_name = 'Jaskolski' OR family_name = 'Langosh'"
        ],
        "rule_sql": []
    },
    "22": {
        "db_id": "farm",
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "ground_truth": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "amends": [
            "Do select only `Theme` instead of both `year` and `theme` columns. Do reference table `farm_competition` instead of `farm_competitions`. Do order by `YEAR ASC` instead of `year DESC`."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, theme FROM farm_competitions ORDER BY year DESC;",
            "SELECT Theme FROM farm_competition ORDER BY Year ASC;"
        ],
        "rule_sql": []
    },
    "1795": {
        "db_id": "small_bank_1",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "ground_truth": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "amends": [
            "Do use table alias `T2` for `balance` instead of `c` and change the source table from `checking_accounts` to `checking`. Do change the join from `savings_accounts` to `accounts AS T1` instead and modify the join condition to `T1.custid = T2.custid` instead of `c.person_id = s.person_id`. Do replace the WHERE filter with `T1.name IN` subquery instead of direct `s.balance` comparison and move the balance comparison into the subquery. Do add a correlated subquery that filters by names from accounts with savings balances above average instead of directly joining savings accounts. Do remove the direct reference to savings accounts table and instead use a subquery structure with proper table aliases and correlation. The amended query now correctly filters checking accounts based on customers who have savings accounts with above-average balances, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.balance \nFROM checking_accounts c\nJOIN savings_accounts s ON c.person_id = s.person_id\nWHERE s.balance > (SELECT AVG(balance) FROM savings_accounts);",
            "SELECT T2.balance \nFROM checking AS T2 \nJOIN accounts AS T1 ON T1.custid = T2.custid \nWHERE T1.name IN (\n    SELECT name \n    FROM accounts \n    WHERE custid IN (\n        SELECT custid \n        FROM savings \n        WHERE balance > (SELECT AVG(balance) FROM savings)\n    )\n)"
        ],
        "rule_sql": []
    },
    "1357": {
        "db_id": "college_2",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "ground_truth": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "amends": [
            "Do reference table `classroom` instead of `rooms` in the FROM clause. Do use comparison operator `<` for `capacity` instead of `>` in the WHERE filter. Do maintain the same aggregate function `count(*)` and building filter condition `building = 'Lamberton'` as in the original query. The amended query now correctly counts classrooms in Lamberton building with capacity less than 50 instead of more than 50, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rooms WHERE building = 'Lamberton' AND capacity > 50;",
            "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50;"
        ],
        "rule_sql": []
    },
    "2877": {
        "db_id": "icfp_1",
        "question": "Find the first names and last names of the authors whose institution affiliation is \"Google\".",
        "ground_truth": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "amends": [
            "Do select `t1.fname` and `t1.lname` instead of `first_name` and `last_name`. Do add `DISTINCT` instead of omitting it. Do change the FROM clause to join `authors AS t1` with `authorship AS t2` on `t1.authid = t2.authid` instead of querying only the authors table. Do add a second join to `inst AS t3` on `t2.instid = t3.instid` instead of the single table approach. Do change the WHERE filter to `t3.name = \"Google\"` instead of `institution = 'Google'` to properly reference the institution name from the joined table. The amended query now correctly identifies authors from Google by joining through the authorship relationship and institution table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM authors WHERE institution = 'Google';",
            "SELECT DISTINCT t1.fname, t1.lname\nFROM Authors AS t1\nJOIN Authorship AS t2 ON t1.authID = t2.authID\nJOIN Inst AS t3 ON t2.instID = t3.instID\nWHERE t3.name = 'Google'"
        ],
        "rule_sql": []
    },
    "308": {
        "db_id": "product_catalog",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "ground_truth": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "amends": [
            "Do use column names `catalog_level_name` and `catalog_level_number` instead of `name` and `level`. Do use the `BETWEEN` operator for the range condition on `catalog_level_number` instead of separate `>=` and `<=` comparisons. The amended query now correctly references the actual column names and uses the more concise `BETWEEN` syntax while maintaining the same filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, level FROM catalog_structure WHERE level_number >= 5 AND level_number <= 10",
            "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
        ],
        "rule_sql": []
    },
    "6661": {
        "db_id": "driving_school",
        "question": "What are the email addresses and date of births for all customers who have a first name of Carole?",
        "ground_truth": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
        "amends": [
            "Do use column name `email_address` instead of `email` in the SELECT list. Do reference table name `Customers` instead of `customers` in the FROM clause. Do use filter value `\"Carole\"` instead of `'Carol'` in the WHERE condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email, date_of_birth FROM customers WHERE first_name = 'Carol';",
            "SELECT email_address, date_of_birth FROM Customers WHERE first_name = 'Carole';"
        ],
        "rule_sql": []
    },
    "2126": {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "ground_truth": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",
        "amends": [
            "Do reference table `Draft_Copies` instead of `drafts` in the FROM clause. Do remove the alias `draft_count` from the COUNT(*) expression instead of keeping it. Do reference the aggregate function directly as `count(*) > 1` in the HAVING clause instead of using the alias `draft_count > 1`. The amended query now correctly counts copies from the Draft_Copies table and matches the behavior of filtering for documents with multiple copies."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT document_id, COUNT(*) as draft_count FROM drafts GROUP BY document_id HAVING draft_count > 1;",
            "SELECT document_id, COUNT(*) \nFROM Draft_Copies \nGROUP BY document_id \nHAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "3171": {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "ground_truth": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "amends": [
            "Do use `low_temperature` instead of `high_temperature` in the MIN function. Do use `wind_speed_mph` instead of `wind_speed_kmh` in the MAX function. Do remove the column aliases `lowest_low_temp` and `highest_wind_speed_mph` instead of keeping them. Do query from `weekly_weather` table instead of `weather_data` table. The amended query now correctly calculates the minimum low temperature and maximum wind speed in miles per hour from the appropriate weekly weather data table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(high_temperature) AS lowest_low_temp, MAX(wind_speed_kmh) AS highest_wind_speed_mph FROM weather_data;",
            "SELECT MIN(low_temperature), MAX(wind_speed_mph) FROM weekly_weather;"
        ],
        "rule_sql": []
    },
    "5752": {
        "db_id": "dorm_1",
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "ground_truth": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
        "amends": [
            "Do join `dorm AS T1` instead of querying `amenities` directly. Do add `has_amenity AS T2` with join condition `T1.dormid = T2.dormid` instead of omitting this relationship. Do add `dorm_amenity AS T3` with join condition `T2.amenid = T3.amenid` instead of accessing amenities without proper joins. Do select `T3.amenity_name` with table qualification instead of unqualified `amenity_name`. Do filter on `T1.dorm_name = 'Smith Hall'` with table qualification instead of filtering directly on amenities table. The amended query now correctly navigates the relational schema through proper joins to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT amenity_name FROM amenities WHERE dorm_name = 'Smith Hall' ORDER BY amenity_name;",
            "SELECT T3.amenity_name\nFROM dorm AS T1\nJOIN has_amenity AS T2 ON T1.dormid = T2.dormid\nJOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid\nWHERE T1.dorm_name = 'Smith Hall'\nORDER BY T3.amenity_name;"
        ],
        "rule_sql": []
    },
    "843": {
        "db_id": "chinook_1",
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "ground_truth": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "amends": [
            "Do join `GENRE` and `TRACK` tables on `GenreId` instead of querying `tracks` table directly with a `Genre` column. Do filter on `T1.Name = \"Jazz\"` instead of `Genre = 'Jazz'` since the genre name is stored in the GENRE table rather than the TRACK table. Do use proper table aliases `T1` and `T2` instead of referencing columns without table context. The amended query now correctly calculates the average unit price for Jazz tracks by properly joining the genre and track tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(UnitPrice) FROM tracks WHERE Genre = 'Jazz';",
            "SELECT AVG(T2.UnitPrice) AS AverageUnitPrice\nFROM Genre T1\nJOIN Track T2 ON T1.GenreId = T2.GenreId\nWHERE T1.Name = 'Jazz'"
        ],
        "rule_sql": []
    },
    "1341": {
        "db_id": "college_2",
        "question": "Count the number of courses in the Physics department.",
        "ground_truth": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "amends": [
            "Do count `DISTINCT course_id` instead of `COUNT(*)` to count unique courses rather than all rows. Do reference table `course` instead of `courses` to use the correct table name. Do filter on column `dept_name` instead of `department` to use the correct column name for department filtering. The amended query now correctly counts distinct physics courses instead of counting all rows in the physics department."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM courses WHERE department = 'Physics';",
            "SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics';"
        ],
        "rule_sql": []
    },
    "5249": {
        "db_id": "music_2",
        "question": "How many vocal types are used in the song \"Le Pop\"?",
        "ground_truth": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM songs WHERE title = 'Le Pop';"
        ],
        "rule_sql": []
    },
    "194": {
        "db_id": "bike_1",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "ground_truth": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "amends": [
            "Do reference table `trip` instead of `trips` in the FROM clause, maintaining the identical SELECT DISTINCT start_station_name and WHERE duration < 100 filter. The amended query now correctly references the intended table while preserving all other query elements and behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT start_station_name FROM trips WHERE duration < 100;",
            "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100;"
        ],
        "rule_sql": []
    },
    "3717": {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the photos for mountains?",
        "ground_truth": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "amends": [
            "Do use `T1.id` and `T1.name` with explicit table aliases instead of selecting from the wrong table. Do join `mountain AS T1` with `photos AS T2` on `T1.id = T2.mountain_id` instead of querying only the `photos` table. Do add the filter `T1.height > 4000` instead of the incorrect `category = 'mountains'` condition. The amended query now correctly retrieves mountain data joined with photos and filters by height instead of category, matching the intended behavior.",
            "Do select `T1.id` and `T1.name` instead of `T2.id` and `T2.name` to retrieve mountain data rather than photo data. The FROM clause with `JOIN photos AS T2` and ON predicate `T1.id = T2.mountain_id` remains correct, as does the WHERE filter `T1.height > 4000`. The amended query now correctly returns mountain identifiers and names instead of photo identifiers and names, matching the intended behavior of querying mountains over 4000 meters in height."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, name FROM photos WHERE category = 'mountains';",
            "SELECT T2.id, T2.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Height > 4000",
            "SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Height > 4000"
        ],
        "rule_sql": []
    },
    "5045": {
        "db_id": "soccer_2",
        "question": "What is the total number of students enrolled in schools without any goalies?",
        "ground_truth": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "amends": [
            "Do use `sum(enr)` instead of `COUNT(*)` to aggregate enrollment values rather than counting rows. Do reference table `college` instead of `students` as the main data source. Do filter using `cName NOT IN` instead of `school_id NOT IN` to exclude colleges by name rather than school IDs. Do use subquery `SELECT cName FROM tryout WHERE pPos = \"goalie\"` instead of `SELECT school_id FROM goalies` to identify colleges with goalie tryouts by position rather than a separate goalies table. The amended query now correctly calculates total enrollment for colleges without goalie tryouts, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE school_id NOT IN (SELECT school_id FROM goalies)",
            "SELECT SUM(enr) \nFROM College \nWHERE cName NOT IN (\n    SELECT DISTINCT cName \n    FROM Tryout \n    WHERE pPos = 'goalie'\n)"
        ],
        "rule_sql": []
    },
    "6794": {
        "db_id": "activity_1",
        "question": "Find the name of the activity that has the largest number of student participants.",
        "ground_truth": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `T1.activity_name` with table alias instead of just `activity_name` without qualification. Do add `FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID` instead of the simple `FROM activities` without proper joins. Do add `GROUP BY T1.actID` to aggregate by activity instead of omitting grouping. Do use `count(*) DESC` for ordering by participation count instead of the non-existent `student_count DESC`. The amended query now correctly joins the Activity and Participates_in tables to count actual student participations per activity rather than relying on a potentially incorrect student_count column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT activity_name FROM activities ORDER BY student_count DESC LIMIT 1;",
            "SELECT T1.activity_name\nFROM Activity AS T1\nJOIN Participates_in AS T2 ON T1.actid = T2.actid\nGROUP BY T1.actid\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4608": {
        "db_id": "entertainment_awards",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "ground_truth": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007",
        "amends": [
            "Do join `nomination AS T1` instead of omitting it, and do join `artwork AS T2` on `T1.Artwork_ID = T2.Artwork_ID` instead of querying `artworks` directly. Do add join to `festival_detail AS T3` on `T1.Festival_ID = T3.Festival_ID` instead of missing this relationship. Do filter on `T3.Year = 2007` instead of `festival_year = 2007` to correctly reference the festival year from the appropriate table. Do select `T2.Type` instead of just `type` to explicitly specify the table source. The amended query now correctly retrieves distinct artwork types from nominated artworks at festivals in 2007, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT type FROM artworks WHERE festival_year = 2007;",
            "SELECT DISTINCT T2.Type \nFROM nomination AS T1 \nJOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID \nJOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID \nWHERE T3.Year = 2007"
        ],
        "rule_sql": []
    },
    "4517": {
        "db_id": "document_management",
        "question": "What are all the section titles of the document named \"David CV\"?",
        "ground_truth": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"",
        "amends": [
            "Do select `t2.section_title` instead of `title` from the SELECT list. Do use a `JOIN` between `documents AS t1` and `document_sections AS t2` instead of querying only `sections`. Do specify the join condition `ON t1.document_code = t2.document_code` instead of missing the table relationship. Do filter on `t1.document_name = \"David CV\"` instead of filtering directly on the sections table without proper table reference. The amended query now correctly joins the documents and document_sections tables to retrieve section titles for the specified document name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM sections WHERE document_name = 'David CV';",
            "SELECT t2.section_title \nFROM documents AS t1 \nJOIN document_sections AS t2 ON t1.document_code = t2.document_code \nWHERE t1.document_name = 'David CV'"
        ],
        "rule_sql": []
    },
    "6382": {
        "db_id": "flight_company",
        "question": "how many airports are there in each country?",
        "ground_truth": "SELECT count(*) ,  country FROM airport GROUP BY country",
        "amends": [
            "Do place the `country` column after the aggregate function instead of before it in the SELECT list. Do reference the table as `airport` instead of `airports` in the FROM clause. Do maintain the same GROUP BY clause with `country` to preserve the grouping logic. The amended query now correctly counts records per country from the airport table, matching the intended behavior.",
            "Do use lowercase `country` instead of uppercase `Country` in both the SELECT list and GROUP BY clause. Do place the `country` column after the aggregate function instead of before it in the SELECT list. Do remove the alias `airport_count` instead of keeping it. The amended query now correctly groups by country and counts airports while maintaining consistent column naming and proper column ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) FROM airports GROUP BY country;",
            "SELECT Country, COUNT(*) AS airport_count FROM airport GROUP BY Country;",
            "SELECT COUNT(*), country FROM airport GROUP BY country"
        ],
        "rule_sql": []
    },
    "973": {
        "db_id": "medicine_enzyme_interaction",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "ground_truth": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "amends": [
            "Do reference table `enzyme` instead of `enzymes` while keeping the same `SELECT name` clause and `WHERE name LIKE \"%ALA%\"` filter unchanged. The amended query now correctly queries the intended table while maintaining identical result filtering behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM enzymes WHERE name LIKE '%ALA%';",
            "SELECT name FROM enzyme WHERE name LIKE '%ALA%'"
        ],
        "rule_sql": []
    },
    "1036": {
        "db_id": "phone_1",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "ground_truth": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
        "amends": [
            "Do select `T2.Hardware_Model_name` instead of `name` from the result set. Do join `chip_model AS T1` with `phone AS T2` instead of querying only the `phones` table. Do use the join condition `T1.Model_name = T2.chip_model` instead of no join condition. Do filter on `T1.Launch_year = 2002` instead of `year = 2002`. Do order by `T1.RAM_MiB DESC` instead of `ram DESC`. The amended query now correctly retrieves phone hardware model names based on chip model launch year and RAM specifications, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM phones WHERE year = 2002 ORDER BY ram DESC LIMIT 1;",
            "SELECT T2.Hardware_Model_name\nFROM chip_model AS T1\nJOIN phone AS T2 ON T1.Model_name = T2.chip_model\nWHERE T1.Launch_year = 2002\nORDER BY T1.RAM_MiB DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1381": {
        "db_id": "college_2",
        "question": "Give the name of the highest paid instructor.",
        "ground_truth": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "amends": [
            "Do use table name `instructor` instead of `instructors` to reference the correct database table. Do use `ORDER BY salary DESC` instead of `ORDER BY salary ASC` to sort by highest salary rather than lowest salary, ensuring the query returns the instructor with the maximum salary instead of the minimum salary. The amended query now correctly identifies the highest-paid instructor by using descending order on the salary column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM instructors ORDER BY salary ASC LIMIT 1;",
            "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5329": {
        "db_id": "manufactory_1",
        "question": "What is all the information of all the products that have a price between 60 and 120?",
        "ground_truth": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
        "amends": [
            "Do use `BETWEEN 60 AND 120` instead of separate conditions `price > 60 AND price < 120` to include the boundary values 60 and 120 in the result set. The amended query now correctly includes products priced exactly at 60 and 120, matching the RIGHT_SQL's inclusive range behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE price > 60 AND price < 120;",
            "SELECT * FROM Products WHERE Price BETWEEN 60 AND 120;"
        ],
        "rule_sql": []
    },
    "3807": {
        "db_id": "e_learning",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "ground_truth": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of full table names. Do reference `T1.personal_name` and `T1.family_name` instead of unqualified column names. Do select `T2.author_id` instead of `author_id` without table qualification. Do join `Course_Authors_and_Tutors AS T1` with `Courses AS T2` instead of `authors` with `courses`. Do use the join condition `T1.author_id = T2.author_id` instead of `authors.author_id = courses.author_id`. Do remove the `COUNT(*) as course_count` column from the SELECT list instead of including it. Do order by `COUNT(*) DESC` directly instead of ordering by the alias `course_count DESC`. The amended query now correctly uses proper table aliases, removes the unnecessary aggregate column from the SELECT list while maintaining the same ordering logic, and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT personal_name, family_name, author_id, COUNT(*) as course_count\nFROM authors\nJOIN courses ON authors.author_id = courses.author_id\nGROUP BY authors.author_id\nORDER BY course_count DESC\nLIMIT 1;",
            "SELECT T1.personal_name, T1.family_name, T2.author_id\nFROM Course_Authors_and_Tutors AS T1\nJOIN Courses AS T2 ON T1.author_id = T2.author_id\nGROUP BY T2.author_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "547": {
        "db_id": "store_1",
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "ground_truth": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of `c`, `o`, and `oi`. Do select from `customers AS T1` joined with `invoices AS T2` instead of joining `customers`, `orders`, and `order_items`. Do use join condition `T2.customer_id = T1.id` instead of `c.customer_id = o.customer_id` and `o.order_id = oi.order_id`. Do aggregate `SUM(T2.total)` instead of `SUM(price * quantity)`. Do group by `T1.id` instead of `c.customer_id`. Do order by `SUM(T2.total) DESC` instead of `total_sales DESC`. The amended query now correctly calculates total sales from invoices rather than reconstructing them from order items, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, SUM(price * quantity) as total_sales\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nGROUP BY c.customer_id\nORDER BY total_sales DESC\nLIMIT 10;",
            "SELECT T1.first_name, T1.last_name, SUM(T2.total) AS total_gross_sales\nFROM customers AS T1\nJOIN invoices AS T2 ON T2.customer_id = T1.id\nGROUP BY T1.id\nORDER BY SUM(T2.total) DESC\nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "4518": {
        "db_id": "document_management",
        "question": "Give the section titles of the document with the name \"David CV\".",
        "ground_truth": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"",
        "amends": [
            "Do use `t2.section_title` instead of `title` for the SELECT list. Do join `documents AS t1` and `document_sections AS t2` instead of querying only `sections`. Do use `ON t1.document_code = t2.document_code` for the join condition instead of no join. Do filter on `t1.document_name = \"David CV\"` instead of `document_name = 'David CV'` and move the filter to the documents table instead of sections. The amended query now correctly retrieves section titles by joining through document codes rather than relying on document names directly in the sections table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM sections WHERE document_name = 'David CV'",
            "SELECT t2.section_title \nFROM documents AS t1 \nJOIN document_sections AS t2 ON t1.document_code = t2.document_code \nWHERE t1.document_name = \"David CV\""
        ],
        "rule_sql": []
    },
    "5093": {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the order date of each booking?",
        "ground_truth": "SELECT Order_Date FROM BOOKINGS",
        "amends": [
            "Do reference the column as `Order_Date` instead of `booking_date` to match the correct column name in the schema. Do maintain the same table reference `BOOKINGS` instead of `bookings` while preserving the identical `WHERE order_id = 1` filter condition. The amended query now correctly retrieves the order date from the bookings table for the specified order ID, matching the RIGHT_SQL's behavior.",
            "Do reference the table as `BOOKINGS` instead of `Bookings` to match the correct case sensitivity. The amended query now matches RIGHT_SQL's behavior.",
            "Do select `Order_Date` from `BOOKINGS` without any `WHERE` filter instead of including `WHERE Booking_ID = 1`, which incorrectly restricted the results to only one specific booking. The amended query now returns all order dates from the BOOKINGS table instead of filtering to a single booking ID, matching the behavior of retrieving the complete set of order dates as intended."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT booking_date FROM bookings WHERE order_id = 1;",
            "SELECT Order_Date FROM Bookings WHERE Booking_ID = 1;",
            "SELECT Order_Date FROM BOOKINGS WHERE Booking_ID = 1;",
            "SELECT Order_Date FROM BOOKINGS;"
        ],
        "rule_sql": []
    },
    "1929": {
        "db_id": "protein_institute",
        "question": "How many institutions do not have an associated protein in our record?",
        "ground_truth": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
        "amends": [
            "Do use `count(*)` from `institution` table instead of `COUNT(*)` from `institutions` table. Do filter with `institution_id NOT IN` subquery instead of checking `protein_id IS NULL`. Do reference the correct table name `institution` instead of `institutions`. Do use a correlated subquery checking for missing entries in the `protein` table instead of checking for null values in a potentially incorrect column. The amended query now correctly identifies institutions without associated protein records by checking for non-existent relationships rather than null column values, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM institutions WHERE protein_id IS NULL;",
            "SELECT COUNT(*) FROM institution WHERE institution_id NOT IN (SELECT Institution_id FROM protein)"
        ],
        "rule_sql": []
    },
    "2708": {
        "db_id": "storm_record",
        "question": "How many regions are affected?",
        "ground_truth": "SELECT count(DISTINCT region_id) FROM affected_region",
        "amends": [
            "Do select `count(DISTINCT region_id)` instead of `COUNT(*)` to count unique regions rather than all rows. Do query from `affected_region` table instead of `regions` table to access the correct data source. Do remove the `WHERE affected = 'yes'` filter instead of keeping it since the filtering logic is now handled by the table selection. The amended query now correctly counts distinct region IDs from the affected_region table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM regions WHERE affected = 'yes';",
            "SELECT COUNT(DISTINCT Region_id) FROM affected_region"
        ],
        "rule_sql": []
    },
    "5700": {
        "db_id": "dorm_1",
        "question": "Find the numbers of different majors and cities.",
        "ground_truth": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "amends": [
            "Do `count(DISTINCT major)` and `count(DISTINCT city_code)` instead of `COUNT(*)` with `GROUP BY major, city`. Do remove the `GROUP BY` clause instead of grouping by `major, city`. Do change the table reference to `student` instead of `students`. Do add distinct counting of two different columns instead of counting all rows grouped by those columns. The amended query now correctly counts distinct majors and distinct city codes from the student table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students GROUP BY major, city;",
            "SELECT COUNT(DISTINCT Major) AS distinct_majors, COUNT(DISTINCT city_code) AS distinct_cities FROM Student;"
        ],
        "rule_sql": []
    },
    "4239": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "ground_truth": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "amends": [
            "Do reference `Destroyed_by_Employee_ID` instead of `employee_id` in both the SELECT list and GROUP BY clause. Do use the table name `Documents_to_be_destroyed` instead of `documents` as the FROM source. Do omit the alias `documents_destroyed` instead of including it for the count column. The amended query now correctly references the appropriate table and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT employee_id, COUNT(*) as documents_destroyed FROM documents GROUP BY employee_id;",
            "SELECT Destroyed_by_Employee_ID, COUNT(*) FROM Documents_to_be_Destroyed GROUP BY Destroyed_by_Employee_ID"
        ],
        "rule_sql": []
    },
    "97": {
        "db_id": "student_assessment",
        "question": "List the first names of people in alphabetical order?",
        "ground_truth": "SELECT first_name FROM people ORDER BY first_name",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM people ORDER BY last_name ASC;"
        ],
        "rule_sql": []
    },
    "6571": {
        "db_id": "wine_1",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "ground_truth": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"",
        "amends": [
            "Do reference table `WINE` instead of `wines` in the FROM clause. Do use uppercase column names `Price`, `Cases`, `YEAR`, and `Grape` instead of lowercase `price`, `cases`, `year`, and `grape` to match the correct schema. Do use double quotes `\"Zinfandel\"` instead of single quotes `'Zinfandel'` for the string literal. The amended query now correctly references the proper table and column names with appropriate casing and quotation style to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price), AVG(cases) FROM wines WHERE year = 2009 AND grape = 'Zinfandel';",
            "SELECT AVG(\"Price\") AS \"Average Price\", AVG(\"Cases\") AS \"Average Cases\" FROM \"wine\" WHERE \"YEAR\" = 2009 AND \"Grape\" = \"Zinfandel\""
        ],
        "rule_sql": []
    },
    "4830": {
        "db_id": "aircraft",
        "question": "What are the names of all aircrafts that have won a match at least twice?",
        "ground_truth": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
        "amends": [
            "Do select `T1.Aircraft` from the `aircraft` table instead of `aircraft_name` from `matches`. Do join `aircraft AS T1` with `MATCH AS T2` using `ON T1.Aircraft_ID = T2.Winning_Aircraft` instead of querying only the `matches` table without any joins. Do group by `T2.Winning_Aircraft` instead of `aircraft_name` to properly aggregate by the aircraft identifier from the match table. The amended query now correctly identifies aircraft that have won at least two matches by joining the aircraft table with match records and counting wins per aircraft, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT aircraft_name FROM matches GROUP BY aircraft_name HAVING COUNT(*) >= 2;",
            "SELECT T1.Aircraft \nFROM aircraft AS T1\nJOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft\nGROUP BY T2.Winning_Aircraft\nHAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "6833": {
        "db_id": "flight_4",
        "question": "Find the name and city of the airport which is the destination of the most number of routes.",
        "ground_truth": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add `T2.dst_apid` to the SELECT list instead of omitting it, and do add `routes AS T2` as a joined table instead of querying only `airports`. Do use `JOIN` with `T1.apid = T2.dst_apid` instead of no join condition. Do add `GROUP BY T2.dst_apid` instead of no grouping, and do change the ORDER BY to `count(*) DESC` instead of `airport_id DESC`. The amended query now correctly identifies the destination airport with the most routes by counting route occurrences per destination airport ID instead of simply returning the last airport by ID."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, city FROM airports ORDER BY airport_id DESC LIMIT 1;",
            "SELECT a.name, a.city, T2.dst_apid\nFROM airports a\nJOIN routes AS T2 ON a.apid = T2.dst_apid\nGROUP BY T2.dst_apid\nORDER BY count(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3456": {
        "db_id": "hr_1",
        "question": "Give the country id and corresponding count of cities in each country.",
        "ground_truth": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "amends": [
            "Do use table `locations` instead of `cities` in the FROM clause while keeping the same SELECT list with `country_id` and `COUNT(*)` and maintaining the GROUP BY on `country_id`. The amended query now correctly counts records from the locations table grouped by country_id instead of the cities table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_id, COUNT(*) FROM cities GROUP BY country_id;",
            "SELECT country_id, COUNT(*) FROM locations GROUP BY country_id"
        ],
        "rule_sql": []
    },
    "2608": {
        "db_id": "inn_1",
        "question": "Find the number of rooms with a king bed.",
        "ground_truth": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
        "amends": [
            "Do reference the table as `Rooms` instead of `rooms` to match the correct case sensitivity. Do filter for `bedType = \"King\"` instead of `bed_type = 'queen'` to use the correct column name with proper casing and the correct value with double quotes instead of single quotes. The amended query now correctly counts rooms with King beds instead of Queen beds."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rooms WHERE bed_type = 'queen';",
            "SELECT COUNT(*) FROM Rooms WHERE bedType = \"King\";"
        ],
        "rule_sql": []
    },
    "2692": {
        "db_id": "storm_record",
        "question": "Show all region code and region name sorted by the codes.",
        "ground_truth": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "amends": [
            "Do reference table `region` instead of `regions` in the FROM clause. Do order by `region_code` instead of `region_name` in the ORDER BY clause. The amended query now correctly references the intended table and sorts results by the region code identifier rather than the name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region_code, region_name FROM regions ORDER BY region_name;",
            "SELECT Region_code, Region_name FROM region ORDER BY Region_code;"
        ],
        "rule_sql": []
    },
    "1051": {
        "db_id": "phone_1",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "ground_truth": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "amends": [
            "Do select `pixels` from `screen_mode` instead of `screen_modes`, and use `INTERSECT` to find common pixels instead of `DISTINCT` with `OR` conditions. Do join `phone` on `Graphics_mode = screen_mode` instead of joining `phones` on `screen_mode_id = screen_mode_id` and then `accreditation` on `accreditation_id = accreditation_id`. Do filter for `Accreditation_type = 'Provisional'` in one branch and `'Full'` in another instead of using `WHERE` with `OR` conditions on `accreditation_type`. Do remove the unnecessary table `accreditation` and directly access `Accreditation_type` from the `phone` table instead. The amended query now correctly uses set intersection to find pixels that appear in both Provisional and Full accreditation types, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT sm.pixels\nFROM screen_modes sm\nJOIN phones p ON sm.screen_mode_id = p.screen_mode_id\nJOIN accreditation a ON p.accreditation_id = a.accreditation_id\nWHERE a.accreditation_type = 'Full' OR a.accreditation_type = 'Provisional';",
            "SELECT s.Pixels\nFROM screen_mode s\nJOIN phone p ON s.Graphics_mode = p.screen_mode\nWHERE p.Accreditation_type = 'Full'\nINTERSECT\nSELECT s.Pixels\nFROM screen_mode s\nJOIN phone p ON s.Graphics_mode = p.screen_mode\nWHERE p.Accreditation_type = 'Provisional'"
        ],
        "rule_sql": []
    },
    "3184": {
        "db_id": "college_1",
        "question": "What is the school code of the accounting department?",
        "ground_truth": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
        "amends": [
            "Do select `school_code` instead of `school_name` from the `department` table instead of `departments`. Do filter on `dept_name = \"Accounting\"` instead of `department_name = 'accounting'` with proper case sensitivity and quote usage. The amended query now correctly retrieves the school code from the department table for accounting departments."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_name FROM departments WHERE department_name = 'accounting';",
            "SELECT school_code FROM DEPARTMENT WHERE dept_name = 'Accounting';"
        ],
        "rule_sql": []
    },
    "1496": {
        "db_id": "debate",
        "question": "Show the names of people aged either 35 or 36.",
        "ground_truth": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
        "amends": [
            "Do use `OR` between the age conditions instead of `AND` to select people who are either 35 or 36 years old, as using `AND` would return no results since a person cannot be both ages simultaneously. Do capitalize column names as `Name` and `Age` instead of lowercase `name` and `age` to match the schema. The amended query now correctly returns people who are either 35 or 36 years old instead of an empty result set."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE age = 35 AND age = 36;",
            "SELECT Name FROM people WHERE Age = 35 OR Age = 36;"
        ],
        "rule_sql": []
    },
    "579": {
        "db_id": "store_1",
        "question": "How many customers in state of CA?",
        "ground_truth": "SELECT count(*) FROM customers WHERE state = \"CA\";",
        "amends": [
            "Do use the state abbreviation `\"CA\"` instead of the full state name `'California'` in the WHERE filter to match the correct state code format used in the database. The amended query now matches RIGHT_SQL's behavior by correctly counting customers from California using the proper state code representation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE state = 'California';",
            "SELECT COUNT(*) FROM customers WHERE state = 'CA';"
        ],
        "rule_sql": []
    },
    "3174": {
        "db_id": "college_1",
        "question": "How many professors are in the accounting dept?",
        "ground_truth": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
        "amends": [
            "Do add `JOIN department AS T2` instead of querying only the `professors` table. Do use `ON T1.dept_code = T2.dept_code` instead of directly filtering by department name. Do filter with `WHERE DEPT_NAME = \"Accounting\"` instead of `WHERE department = 'accounting'` to properly reference the joined table's column. Do use table alias `T1` for the professor table instead of the original table name. The amended query now correctly joins tables to filter by department name rather than assuming the department field exists in the professors table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM professors WHERE department = 'accounting';",
            "SELECT COUNT(*) \nFROM PROFESSOR AS T1\nJOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE\nWHERE T2.DEPT_NAME = 'Accounting'"
        ],
        "rule_sql": []
    },
    "2153": {
        "db_id": "formula_1",
        "question": "What is the name of the race held most recently?",
        "ground_truth": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM races ORDER BY date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3677": {
        "db_id": "baseball_1",
        "question": "What is the total salary paid by team Boston Red Stockings in 2010?",
        "ground_truth": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010",
        "amends": [
            "Do join `team AS T2` instead of omitting it, and do use `ON T1.team_id = T2.team_id_br` for the join condition instead of directly filtering on team name. Do reference `T2.name = 'Boston Red Stockings'` instead of `team = 'Boston Red Stockings'`, and do use `T1.year = 2010` instead of `year = 2010`. Do qualify the salary column as `T1.salary` instead of just `salary`, and do use lowercase `sum()` instead of uppercase `SUM()`. The amended query now correctly joins the team table to resolve team names through proper foreign key relationships instead of relying on direct string matching in the salaries table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(salary) FROM salaries WHERE team = 'Boston Red Stockings' AND year = 2010;",
            "SELECT sum(T1.salary) \nFROM salary AS T1 \nJOIN team AS T2 ON T1.team_id = T2.team_id_br \nWHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010"
        ],
        "rule_sql": []
    },
    "4818": {
        "db_id": "aircraft",
        "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "ground_truth": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
        "amends": [
            "Do use table aliases `T1`, `T2`, and `T3` instead of `a` and `ap`. Do reference columns `T1.Aircraft` and `T1.Description` instead of `a.name` and `a.description`. Do join through junction table `airport_aircraft AS T2` instead of directly joining `aircrafts` to `airports`. Do use join condition `T1.Aircraft_ID = T2.Aircraft_ID` instead of `a.airport_id = ap.id`. Do add second join condition `T2.Airport_ID = T3.Airport_ID` instead of omitting it. Do reference filter column `T3.Total_Passengers` instead of `ap.total_passengers`. The amended query now correctly handles the many-to-many relationship between aircraft and airports through the junction table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.name, a.description \nFROM aircrafts a\nJOIN airports ap ON a.airport_id = ap.id\nWHERE ap.total_passengers > 10000000;",
            "SELECT T1.Aircraft, T1.Description\nFROM aircraft AS T1\nJOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nJOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID\nWHERE T3.Total_Passengers > 10000000"
        ],
        "rule_sql": []
    },
    "1912": {
        "db_id": "protein_institute",
        "question": "What is the name of the tallest building?",
        "ground_truth": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "amends": [
            "Do reference table `building` instead of `buildings` in the FROM clause. Do order by `height_feet DESC` instead of `height ASC` to sort by the correct column name in descending order instead of ascending. The amended query now correctly retrieves the building name with the maximum height from the proper table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM buildings ORDER BY height ASC LIMIT 1;",
            "SELECT Name FROM building ORDER BY Height_feet DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1016": {
        "db_id": "university_basketball",
        "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
        "ground_truth": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "amends": [
            "Do select only `sum(Enrollment)` and `affiliation` instead of including `enrollment_type` and aliasing the aggregate. Do use table `university` instead of `schools`. Do filter on `founded > 1850` instead of `founded_year > 1850`. Do group by only `affiliation` instead of both `affiliation` and `enrollment_type`. The amended query now correctly aggregates total enrollment by affiliation for universities founded after 1850.",
            "Do place the `affiliation` column after the aggregate function in the SELECT list instead of before it, maintaining the same logical grouping. Do use lowercase `sum(Enrollment)` instead of uppercase `SUM(Enrollment)` for consistency with the column reference. Do use lowercase `founded` in the WHERE clause instead of uppercase `Founded` to match the actual column name. The amended query now correctly aggregates enrollment by affiliation for universities founded after 1850, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT affiliation, enrollment_type, SUM(enrollment) as total_enrollment \nFROM schools \nWHERE founded_year > 1850 \nGROUP BY affiliation, enrollment_type;",
            "SELECT affiliation, SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY affiliation;",
            "SELECT sum(Enrollment), Affiliation FROM university WHERE founded > 1850 GROUP BY Affiliation;"
        ],
        "rule_sql": []
    },
    "2167": {
        "db_id": "formula_1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "ground_truth": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "amends": [
            "Do select `T1.driverid` and `T1.surname` instead of `id` and `family_name`. Do add `JOIN laptimes AS T2` instead of querying only the `drivers` table. Do use join condition `T1.driverid = T2.driverid` instead of no join. Do order by `T2.milliseconds DESC` instead of `laptime DESC`. The amended query now correctly joins driver information with laptime data and sorts by actual laptime milliseconds rather than a non-existent laptime column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, family_name FROM drivers ORDER BY laptime DESC LIMIT 1;",
            "SELECT T1.driverId, T1.surname \nFROM drivers AS T1 \nJOIN laptimes AS T2 ON T1.driverId = T2.driverId \nORDER BY T2.milliseconds DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1240": {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "ground_truth": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
        "amends": [
            "Do select `sum(T2.room_count)` instead of `COUNT(*)` to sum room counts rather than counting apartment records. Do join `Apartment_Facilities AS T1` to `Apartments AS T2` on `T1.apt_id = T2.apt_id` instead of querying only the `apartments` table to properly associate facilities with apartments. Do filter on `T1.facility_code = \"Gym\"` instead of filtering directly on the apartments table to correctly identify which apartments have gym facilities. The amended query now matches RIGHT_SQL's behavior by accurately summing room counts for apartments with gym facilities rather than incorrectly counting apartment records."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM apartments WHERE facility_code = 'Gym';",
            "SELECT SUM(CAST(T2.room_count AS INTEGER)) AS total_rooms\nFROM Apartment_Facilities AS T1\nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id\nWHERE T1.facility_code = 'Gym'"
        ],
        "rule_sql": []
    },
    "6485": {
        "db_id": "scientist_1",
        "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "ground_truth": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'",
        "amends": [
            "Do select `T2.name` from the projects table instead of `project_name` from projects directly. Do join `assignedto AS T1` to `projects AS T2` on `T1.project = T2.code` instead of querying projects alone. Do add a second join to `scientists AS T3` on `T1.scientist = T3.SSN` instead of missing this relationship. Do filter on `T3.name LIKE '%Smith%'` from the scientists table instead of filtering on `scientist_name` from projects. The amended query now correctly identifies projects by joining through the assignment bridge table and filtering on scientist names from the proper source, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_name FROM projects WHERE scientist_name LIKE '%Smith%';",
            "SELECT T2.Name \nFROM AssignedTo AS T1\nJOIN Projects AS T2 ON T1.Project = T2.Code\nJOIN Scientists AS T3 ON T1.Scientist = T3.SSN\nWHERE T3.Name LIKE '%Smith%'"
        ],
        "rule_sql": []
    },
    "5083": {
        "db_id": "device",
        "question": "What are the names of shops that do not have any devices in stock?",
        "ground_truth": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "amends": [
            "Do select `Shop_Name` from the `shop` table instead of `name` from `shops`. Do use a `WHERE` filter with `Shop_ID NOT IN` subquery instead of filtering by `device_count > 0`. Do add a correlated subquery `(SELECT Shop_ID FROM stock)` to identify shops without stock instead of checking for positive device counts. The amended query now correctly identifies shops that have no stock entries rather than those with device counts, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM shops WHERE device_count > 0;",
            "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"
        ],
        "rule_sql": []
    },
    "4844": {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "ground_truth": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "amends": [
            "Do select `T1.service_type_code` from the `services` table instead of `service_type` from `organizations`. Do add a `JOIN` between `services AS T1` and `organizations AS T2` on `T1.organization_id = T2.organization_id` instead of querying only the `organizations` table. Do filter on `T2.organization_details = 'Denesik and Sons Party'` instead of `detail = 'Denesik and Sons Party'`. The amended query now correctly retrieves service type codes from the services table joined with organizations, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT service_type FROM organizations WHERE detail = 'Denesik and Sons Party';",
            "SELECT DISTINCT T1.service_type_code \nFROM Services AS T1\nJOIN Organizations AS T2 ON T1.organization_id = T2.organization_id\nWHERE T2.organization_details = 'Denesik and Sons Party'"
        ],
        "rule_sql": []
    },
    "2214": {
        "db_id": "formula_1",
        "question": "What are the names of all the circuits that are in the UK or Malaysia?",
        "ground_truth": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "amends": [
            "Do use `OR` operator instead of `AND` operator in the WHERE clause filter for country conditions, changing `country = 'UK' AND country = 'Malaysia'` to `country = 'UK' OR country = 'Malaysia'` to correctly select circuits from either country instead of incorrectly requiring both conditions to be true simultaneously. The amended query now matches RIGHT_SQL's behavior by properly filtering for circuits located in either the UK or Malaysia."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM circuits WHERE country = 'UK' AND country = 'Malaysia';",
            "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia';"
        ],
        "rule_sql": []
    },
    "6368": {
        "db_id": "flight_company",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "ground_truth": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "amends": [
            "Do reference table `airport` instead of `airports` in the FROM clause. Do order by `name` instead of `country` in the ORDER BY clause. The amended query now correctly references the intended table and sorts results by name rather than country."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, country, city, name FROM airports ORDER BY country;",
            "SELECT id, Country, City, name FROM airport ORDER BY name ASC;"
        ],
        "rule_sql": []
    },
    "3201": {
        "db_id": "college_1",
        "question": "What is the total credit does each department offer?",
        "ground_truth": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "amends": [
            "Do use `sum(crs_credit)` without an alias instead of `SUM(credits) AS total_credits` for the aggregate expression. Do select `dept_code` instead of `department` as the grouping column. Do reference table `course` instead of `courses` as the data source. Do group by `dept_code` instead of `department` to match the selected column. The amended query now correctly calculates the sum of course credits by department code.",
            "Do place the aggregate function `sum(crs_credit)` first in the SELECT list instead of placing `dept_code` first, while maintaining the same GROUP BY clause and table source. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, SUM(credits) AS total_credits FROM courses GROUP BY department",
            "SELECT dept_code, SUM(crs_credit) FROM course GROUP BY dept_code",
            "SELECT sum(crs_credit), dept_code FROM course GROUP BY dept_code"
        ],
        "rule_sql": []
    },
    "1656": {
        "db_id": "theme_gallery",
        "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
        "ground_truth": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
        "amends": [
            "Do reference column `year_join` instead of `year_joined` and use table `artist` instead of `artists`. Do change the WHERE condition to `country != 'United States'` instead of `country = 'United States'` to filter for artists not from the United States. The amended query now correctly selects non-US artists with the proper column and table references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, year_joined FROM artists WHERE country = 'United States';",
            "SELECT Name, Year_Join FROM artist WHERE Country != 'United States';"
        ],
        "rule_sql": []
    },
    "6288": {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "ground_truth": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "amends": [
            "Do specify `T1.city` with table alias instead of just `city`. Do join `city AS T1` with `temperature AS T2` on `T1.city_id = T2.city_id` instead of querying only the `temperatures` table. Do reference temperature columns as `T2.Mar`, `T2.Jul`, and `T2.Oct` with table aliases instead of `march_temp`, `july_temp`, and `oct_temp`. The amended query now correctly joins the city and temperature tables and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM temperatures WHERE (march_temp < july_temp) OR (march_temp > oct_temp);",
            "SELECT T1.City \nFROM city AS T1 \nJOIN temperature AS T2 ON T1.City_ID = T2.City_ID \nWHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct"
        ],
        "rule_sql": []
    },
    "5477": {
        "db_id": "voter_2",
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "ground_truth": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "amends": [
            "Do add table `STUDENT AS T1` and `VOTING_RECORD AS T2` instead of querying only `students`; do use `JOIN` on `T1.StuID = T2.Secretary_Vote` instead of no join condition; do reference `T1.Age` instead of just `age`; do filter on `T2.Election_Cycle = \"Fall\"` instead of `election_cycle = 'fall'`; do remove the `votes > 0` filter instead of keeping it; and do maintain `DISTINCT` selection. The amended query now correctly joins student and voting data to find distinct ages of students who voted for secretary in the Fall election cycle."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT age FROM students WHERE election_cycle = 'fall' AND votes > 0;",
            "SELECT DISTINCT T1.Age\nFROM Student AS T1\nJOIN Voting_record AS T2 ON T1.StuID = T2.Secretary_Vote\nWHERE T2.Election_Cycle = \"Fall\""
        ],
        "rule_sql": []
    },
    "303": {
        "db_id": "product_catalog",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "ground_truth": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "amends": [
            "Do reference `attribute_data_type` in both the SELECT list and GROUP BY clause instead of `data_type`. Do use the correct table name `Attribute_Definitions` instead of `attribute_definitions`. Do maintain the aggregate function `COUNT(*)` and HAVING condition `> 3` as they remain functionally equivalent. The amended query now correctly references the proper column and table names while preserving the original grouping and filtering logic, matching the RIGHT_SQL's behavior.",
            "Do remove the `COUNT(*)` column from the SELECT list instead of including it, as the query only needs to return the grouped `attribute_data_type` values rather than both the grouping column and the count. Do keep the `GROUP BY attribute_data_type` clause unchanged to maintain proper grouping. Do preserve the `HAVING count(*) > 3` filter without modification to correctly filter groups with more than three occurrences. The amended query now matches RIGHT_SQL's behavior by returning only the attribute_data_type values for groups that meet the count threshold."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT data_type, COUNT(*) as count FROM attribute_definitions GROUP BY data_type HAVING COUNT(*) > 3",
            "SELECT attribute_data_type, COUNT(*) \nFROM Attribute_Definitions \nGROUP BY attribute_data_type \nHAVING COUNT(*) > 3",
            "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3"
        ],
        "rule_sql": []
    },
    "1264": {
        "db_id": "apartment_rentals",
        "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "ground_truth": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
        "amends": [
            "Do use column name `apt_type_code` instead of `apartment_type_code` in both SELECT and GROUP BY clauses. Do use column name `room_count` instead of `rooms` for both MAX and MIN aggregate functions. Do use table name `Apartments` instead of `apartments` to match the correct schema. The amended query now correctly aggregates room counts by apartment type code as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT apartment_type_code, MAX(rooms), MIN(rooms) FROM apartments GROUP BY apartment_type_code;",
            "SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms FROM Apartments GROUP BY apt_type_code"
        ],
        "rule_sql": []
    },
    "6169": {
        "db_id": "music_4",
        "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "ground_truth": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
        "amends": [
            "Do select `T2.Issue_Date` instead of `issue_date` from the wrong table. Do join `artist AS T1` and `volume AS T2` instead of querying only the `volumes` table. Do use `ON T1.Artist_ID = T2.Artist_ID` instead of no join condition. Do filter on `T1.Artist = \"Gorgoroth\"` instead of `artist_name = 'Gorgoroth'` from the wrong table. The amended query now correctly retrieves issue dates by joining artist and volume tables through their relationship key instead of relying on a denormalized artist name field in the volumes table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT issue_date FROM volumes WHERE artist_name = 'Gorgoroth';",
            "SELECT T2.Issue_Date \nFROM artist AS T1 \nJOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID \nWHERE T1.Artist = \"Gorgoroth\""
        ],
        "rule_sql": []
    },
    "413": {
        "db_id": "flight_1",
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "ground_truth": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
        "amends": [
            "Do reference `T1.flno` with table alias instead of `flight_number` without qualification. Do join `Flight AS T1` with `Aircraft AS T2` instead of querying only the `flights` table. Do use the join condition `T1.aid = T2.aid` to connect the tables instead of directly filtering by aircraft name. Do filter on `T2.name = \"Airbus A340-300\"` in the WHERE clause instead of filtering `aircraft` column directly. The amended query now correctly joins the Flight and Aircraft tables to find flights operated by the specified aircraft model, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT flight_number FROM flights WHERE aircraft = 'Airbus A340-300';",
            "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = 'Airbus A340-300'"
        ],
        "rule_sql": []
    },
    "3922": {
        "db_id": "hospital_1",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "ground_truth": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "amends": [
            "Do select `T4.name` instead of `medication_name`. Do use explicit joins starting with `stay AS T1` instead of querying `medications` directly. Do join through `patient AS T2` on `T1.Patient = T2.SSN` instead of filtering by `patient_id`. Do add `Prescribes AS T3` join on `T3.Patient = T2.SSN` to establish the medication prescription relationship. Do add `Medication AS T4` join on `T3.Medication = T4.Code` instead of directly selecting from medications. Do filter by `room = 111` instead of using a subquery with `room_number = 111`. The amended query now correctly retrieves medication names for patients in room 111 through the proper table relationships and joins."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medication_name FROM medications WHERE patient_id IN (SELECT patient_id FROM rooms WHERE room_number = 111)",
            "SELECT T4.Name \nFROM Stay AS T1\nJOIN Patient AS T2 ON T1.Patient = T2.SSN\nJOIN Prescribes AS T3 ON T3.Patient = T2.SSN\nJOIN Medication AS T4 ON T3.Medication = T4.Code\nWHERE T1.Room = 111"
        ],
        "rule_sql": []
    },
    "617": {
        "db_id": "store_1",
        "question": "Who is the composer of track Fast As a Shark?",
        "ground_truth": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
        "amends": [
            "Do select `composer` instead of `artist` in the SELECT list. Do filter on `name` instead of `title` in the WHERE clause. The amended query now correctly retrieves the composer for tracks with the specified name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist FROM tracks WHERE title = 'Fast As a Shark';",
            "SELECT composer FROM tracks WHERE name = 'Fast As a Shark';"
        ],
        "rule_sql": []
    },
    "6132": {
        "db_id": "customers_and_addresses",
        "question": "What are the name and ID of the product bought the most.",
        "ground_truth": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "amends": [
            "Do select `t2.product_details` and `t2.product_id` instead of `product_name` and `product_id` from the base table. Do join `order_items AS t1` with `products AS t2` on `t1.product_id = t2.product_id` instead of querying only the `products` table. Do add `GROUP BY t1.product_id` to aggregate by product instead of omitting grouping. Do order by `sum(t1.order_quantity)` instead of `quantity_sold DESC` to use the actual aggregated order quantities rather than a static field. The amended query now correctly identifies the product with the highest total sales quantity by joining order items and aggregating quantities, matching the RIGHT_SQL's behavior.",
            "Do include `t2.product_id` in the SELECT list instead of omitting it. Do use `sum(t1.order_quantity)` without CAST to INTEGER instead of `SUM(CAST(t1.order_quantity AS INTEGER))`. Do use ascending ORDER BY with `sum(t1.order_quantity)` instead of descending ORDER BY. The amended query now correctly calculates the total order quantity without unnecessary type casting and returns the product with the smallest total quantity instead of the largest.",
            "Do include `t2.product_id` in the SELECT list instead of omitting it, and do maintain the same column order as the original query. Do remove the explicit `ASC` direction from the ORDER BY clause instead of keeping it, as ASC is the default sorting order. The amended query now correctly selects both product details and product ID while maintaining the same logical behavior for finding the product with the smallest total order quantity.",
            "Do remove the `DESC` ordering direction from the `ORDER BY sum(t1.order_quantity)` clause instead of keeping it, which changes the query to return the product with the lowest total order quantity instead of the highest. The amended query now matches RIGHT_SQL's behavior by ordering in ascending order by default.",
            "Do remove the `DESC` modifier from the `ORDER BY sum(t1.order_quantity)` clause instead of keeping it, which changes the sorting direction from descending to ascending and affects which record is selected by the `LIMIT 1` operation."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, product_id FROM products ORDER BY quantity_sold DESC LIMIT 1;",
            "SELECT t2.product_id, t2.product_details\nFROM Order_Items AS t1\nJOIN Products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY SUM(CAST(t1.order_quantity AS INTEGER)) DESC\nLIMIT 1;",
            "SELECT t2.product_id, t2.product_details\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY sum(t1.order_quantity) ASC\nLIMIT 1;",
            "SELECT t2.product_details, t2.product_id\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY sum(t1.order_quantity) DESC\nLIMIT 1;",
            "SELECT t2.product_details, t2.product_id\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY sum(t1.order_quantity) DESC\nLIMIT 1",
            "SELECT t2.product_details, t2.product_id\nFROM order_items AS t1\nJOIN products AS t2 ON t1.product_id = t2.product_id\nGROUP BY t1.product_id\nORDER BY sum(t1.order_quantity) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "3589": {
        "db_id": "music_1",
        "question": "What are the names of artists who are Male and are from UK?",
        "ground_truth": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "amends": [
            "Do reference the `artist_name` column instead of `name` and use the `artist` table instead of `artists`. Do use double quotes `\"UK\"` and `\"Male\"` for string literals instead of single quotes, and maintain the same filter conditions in the WHERE clause with the order of predicates being inconsequential. The amended query now correctly retrieves artist names from the appropriate table with the specified filter criteria."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM artists WHERE gender = 'Male' AND country = 'UK';",
            "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\""
        ],
        "rule_sql": []
    },
    "6605": {
        "db_id": "train_station",
        "question": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "ground_truth": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION",
        "amends": [
            "Do reference table `station` instead of `train_stations` and use column `number_of_platforms` instead of `platform_id` for counting. Do aggregate `sum(number_of_platforms)` instead of `COUNT(platform_id)` to properly sum platform counts rather than counting non-null values. Do aggregate `sum(total_passengers)` instead of `SUM(passengers)` to use the correct column name for passenger totals. Do remove the alias `as total_platforms` and `as total_passengers` instead of keeping them since the right query omits explicit aliases. The amended query now correctly sums platform counts and passenger totals from the appropriate table and columns."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location, COUNT(platform_id) as total_platforms, SUM(passengers) as total_passengers \nFROM train_stations \nGROUP BY location;",
            "SELECT Location, SUM(Number_of_Platforms), SUM(Total_Passengers) FROM station GROUP BY Location"
        ],
        "rule_sql": []
    },
    "5562": {
        "db_id": "products_gen_characteristics",
        "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "ground_truth": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "amends": [
            "Do select only `t3.characteristic_name` instead of all columns with `*`. Do add joins to `product_characteristics AS t2` and `CHARACTERISTICS AS t3` instead of querying only the `products` table. Do use `JOIN` with `t1.product_id = t2.product_id` and `t2.characteristic_id = t3.characteristic_id` instead of no joins. Do filter on `t1.product_name = \"sesame\"` instead of `name = 'sesame'`. Do add filter `t3.characteristic_type_code = \"Grade\"` instead of `type = 'Grade'`. The amended query now correctly retrieves characteristic names from related tables instead of incomplete product data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE name = 'sesame' AND type = 'Grade';",
            "SELECT t3.characteristic_name\nFROM products AS t1\nJOIN product_characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nWHERE t1.product_name = 'sesame' AND t3.characteristic_type_code = 'Grade'"
        ],
        "rule_sql": []
    },
    "600": {
        "db_id": "store_1",
        "question": "What si the youngest employee's first and last name?",
        "ground_truth": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "amends": [
            "Do `ORDER BY birth_date DESC` instead of `ORDER BY birth_date ASC` to sort employees by descending birth date rather than ascending, which changes the result from the oldest to the youngest employee. The amended query now matches RIGHT_SQL's behavior by correctly identifying the employee with the most recent birth date."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees ORDER BY birth_date ASC LIMIT 1;",
            "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "404": {
        "db_id": "flight_1",
        "question": "For each origin, how many flights came from there?",
        "ground_truth": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "amends": [
            "Do specify `origin` in the SELECT list instead of `origin` and `COUNT(*)`, and do group by `origin` instead of `destination` to correctly count flights by their origin rather than grouping by destination. Do reference table `Flight` instead of `flights` to match the correct table name. The amended query now correctly counts flights grouped by their origin location."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT origin, COUNT(*) FROM flights GROUP BY destination;",
            "SELECT origin, COUNT(*) FROM flight GROUP BY origin;"
        ],
        "rule_sql": []
    },
    "1072": {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "ground_truth": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of no aliases. Do reference `T2.Season` and `T2.Player` from the `match_season` table instead of `season` and `player` from the `players` table. Do reference `T1.Country_name` from the `country` table instead of `country_name` from the `countries` table. Do join `country AS T1` with `match_season AS T2` instead of joining `players` with `countries`. Do use join condition `T1.Country_id = T2.Country` instead of `players.country_id = countries.id`. The amended query now correctly retrieves season and player data from match_season with corresponding country information."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT season, player, country_name FROM players JOIN countries ON players.country_id = countries.id",
            "SELECT T2.Season, T2.Player, T1.Country_name FROM match_season AS T2 JOIN country AS T1 ON T1.Country_id = T2.Country"
        ],
        "rule_sql": []
    },
    "1167": {
        "db_id": "body_builder",
        "question": "Show all information about each body builder.",
        "ground_truth": "SELECT * FROM body_builder",
        "amends": [
            "Do reference the correct table name `body_builder` instead of the incorrect pluralized form `body_builders`. The amended query now correctly queries the intended table structure and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM body_builders WHERE weight > 300;",
            "SELECT * FROM body_builder;"
        ],
        "rule_sql": []
    },
    "1054": {
        "db_id": "match_season",
        "question": "Show the country name and capital of all countries.",
        "ground_truth": "SELECT Country_name ,  Capital FROM country",
        "amends": [
            "Do use `Country_name` and `Capital` column names instead of `country` and `city`. Do reference the `country` table instead of the `countries` table. The amended query now correctly selects the appropriate columns from the proper table to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, city FROM countries;",
            "SELECT Country_name, Capital FROM country;"
        ],
        "rule_sql": []
    },
    "462": {
        "db_id": "allergy_1",
        "question": "What are the full names of all students",
        "ground_truth": "SELECT Fname ,  Lname FROM Student",
        "amends": [
            "Do select `Fname` and `Lname` columns instead of `first_name` only. Do reference the `Student` table instead of `students`. The amended query now correctly retrieves both first and last name columns from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students;",
            "SELECT Fname, LName FROM Student;"
        ],
        "rule_sql": []
    },
    "358": {
        "db_id": "flight_1",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "ground_truth": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "amends": [
            "Do reference table `Aircraft` instead of `aircrafts` in the FROM clause. Do order by column `distance` instead of `length` in the ORDER BY clause. The amended query now correctly retrieves aircraft names ordered by distance rather than length from the proper table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM aircrafts ORDER BY length ASC LIMIT 3;",
            "SELECT name FROM Aircraft ORDER BY distance ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "2826": {
        "db_id": "restaurant_1",
        "question": "What is the age of student Linda Smith?",
        "ground_truth": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "amends": [
            "Do select `Age` instead of `name` in the SELECT list. Do reference table `Student` instead of `students` in the FROM clause. Do filter on `Fname = \"Linda\"` and `Lname = \"Smith\"` with AND conditions instead of incorrectly filtering `age = 'Linda Smith'`. Do use double quotes for string literals instead of single quotes. The amended query now correctly retrieves age information based on first and last name criteria instead of the erroneous age filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE age = 'Linda Smith';",
            "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
        ],
        "rule_sql": []
    },
    "3776": {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "ground_truth": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "amends": [
            "Do reference the correct table name `Course_Authors_and_Tutors` instead of the incorrect `course_author_tutors` to ensure proper data retrieval from the intended database table. The amended query now correctly accesses the specified table with the appropriate column selection."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT login_name, family_name FROM course_author_tutors;",
            "SELECT login_name, family_name FROM Course_Authors_and_Tutors;"
        ],
        "rule_sql": []
    },
    "197": {
        "db_id": "bike_1",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "ground_truth": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "amends": [
            "Do reference table `trip` instead of `trips` in both the main query and subquery. Do use the numeric value `94103` instead of the string `'94103'` in the WHERE clause of the subquery. Do use lowercase `avg` instead of uppercase `AVG` for the aggregate function in the subquery. The amended query now correctly references the proper table name, uses appropriate data type comparison for the zip_code filter, and maintains consistent function casing to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM trips WHERE duration >= (SELECT AVG(duration) FROM trips WHERE zip_code = '94103')",
            "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)"
        ],
        "rule_sql": []
    },
    "475": {
        "db_id": "allergy_1",
        "question": "Show all student ids who are older than 20.",
        "ground_truth": "SELECT StuID FROM Student WHERE age  >  20",
        "amends": [
            "Do reference the table as `Student` instead of `students` and use column `StuID` instead of `student_id` in the SELECT clause. Do change the WHERE filter to `age > 20` instead of `age < 20`, reversing the age comparison condition. The amended query now correctly selects student IDs from the Student table where age is greater than 20, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM students WHERE age < 20;",
            "SELECT StuID FROM Student WHERE Age > 20"
        ],
        "rule_sql": []
    },
    "3438": {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "ground_truth": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary ASC;"
        ],
        "rule_sql": []
    },
    "1457": {
        "db_id": "college_2",
        "question": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "ground_truth": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "amends": [
            "Do use table alias `T1` for `student` instead of `s` for `students`, and select `T1.name` instead of `s.name`. Do join `takes AS T2` instead of `enrollments e`, using `ON T1.id = T2.id` instead of `ON s.id = e.student_id`. Do remove the join to `courses` table and instead use a subquery in the `WHERE` clause with `T2.course_id IN` instead of direct table joins. Do add a subquery that joins `course AS T3` with `prereq AS T4` on `T3.course_id = T4.course_id` instead of the previous direct course enrollment approach. Do filter with `T3.title = 'International Finance'` instead of `c.name = 'International Finance'`, and reference `T4.prereq_id` in the subquery instead of direct course enrollment relationships. The amended query now correctly identifies students taking prerequisite courses for International Finance instead of those directly enrolled in the course."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name FROM students s JOIN enrollments e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id WHERE c.name = 'International Finance';",
            "SELECT T1.name\nFROM student AS T1\nJOIN takes AS T2 ON T1.ID = T2.ID\nWHERE T2.course_id IN (\n    SELECT T4.prereq_id\n    FROM course AS T3\n    JOIN prereq AS T4 ON T3.course_id = T4.course_id\n    WHERE T3.title = 'International Finance'\n);"
        ],
        "rule_sql": []
    },
    "3859": {
        "db_id": "insurance_policies",
        "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
        "ground_truth": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "amends": [
            "Do use column names `Amount_Settled` and `Amount_Claimed` instead of `settlement_amount` and `claim_amount` to match the actual schema. Do reference table `Claims` instead of `claims` to use the correct table name capitalization. The amended query now correctly selects and orders by the proper column names while maintaining the same LIMIT behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT settlement_amount, claim_amount FROM claims ORDER BY settlement_amount ASC LIMIT 1;",
            "SELECT Amount_Settled, Amount_Claimed \nFROM Claims \nORDER BY Amount_Settled ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2929": {
        "db_id": "sakila_1",
        "question": "Return the most common full name among all actors.",
        "ground_truth": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do use table name `actor` instead of `actors` in the FROM clause. Do remove the `COUNT(*) as count` column from the SELECT list instead of including it. Do add the aggregate function `count(*)` directly in the ORDER BY clause instead of referencing an alias. Do maintain the GROUP BY on `first_name, last_name` and ORDER BY DESC LIMIT 1 structure. The amended query now correctly counts occurrences per actor name combination and returns the most common one without displaying the count value in the results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, COUNT(*) as count FROM actors GROUP BY first_name, last_name ORDER BY count DESC LIMIT 1;",
            "SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2410": {
        "db_id": "candidate_poll",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "ground_truth": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "amends": [
            "Do use `OR` instead of `AND` in the WHERE clause to correctly find people whose height is either greater than 200 or less than 190, instead of incorrectly requiring both conditions to be true simultaneously. The amended query now matches RIGHT_SQL's behavior by properly implementing the logical OR condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE height > 200 AND height < 190;",
            "SELECT Name FROM people WHERE Height > 200 OR Height < 190"
        ],
        "rule_sql": []
    },
    "2370": {
        "db_id": "csu_1",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "ground_truth": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "amends": [
            "Do select `degrees` from the `degrees` table instead of `degree` from `universities`. Do join `campuses` as `T1` with `degrees` as `T2` on `t1.id = t2.campus` instead of querying only the `universities` table. Do filter on `t1.campus = \"San Francisco State University\"` instead of `university_name = 'San Francisco State University'`. Do filter on `t2.year = 2001` instead of `year = 2001`. The amended query now correctly joins the campuses and degrees tables to retrieve degree information for the specified campus and year, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT degree FROM universities WHERE university_name = 'San Francisco State University' AND year = 2001;",
            "SELECT T2.Degrees \nFROM Campuses AS T1 \nJOIN degrees AS T2 ON T1.Id = T2.Campus \nWHERE T1.Campus = 'San Francisco State University' \nAND T2.Year = 2001"
        ],
        "rule_sql": []
    },
    "6337": {
        "db_id": "e_government",
        "question": "What are the names of organizations that contain the word \"Party\"?",
        "ground_truth": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "amends": [
            "Do reference `organization_name` in the SELECT list instead of `name`. Do use double quotes for the string pattern instead of single quotes. The amended query now correctly selects the organization_name column with proper string quoting, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM organizations WHERE name LIKE '%Party%';",
            "SELECT organization_name FROM Organizations WHERE organization_name LIKE \"%Party%\""
        ],
        "rule_sql": []
    },
    "6140": {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who never made an order.",
        "ground_truth": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "amends": [
            "Do select `customer_name` instead of `name` from the customers table. Do use `EXCEPT` set operation instead of `NOT IN` with a subquery. Do add a join between `customers AS t1` and `customer_orders AS t2` on `t1.customer_id = t2.customer_id` instead of referencing a non-existent orders table. Do remove the WHERE clause with subquery entirely and replace it with the EXCEPT operation. The amended query now correctly identifies customers without orders by using proper table relationships and set operations instead of the problematic NOT IN approach."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);",
            "SELECT customer_name FROM Customers\nEXCEPT\nSELECT c.customer_name FROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id"
        ],
        "rule_sql": []
    },
    "912": {
        "db_id": "insurance_fnol",
        "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
        "ground_truth": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "amends": [
            "Do join `customers_policies` and `available_policies` tables instead of querying only the `customers` table. Do use `t1.customer_id = t2.customer_id` and `t2.policy_id = t3.policy_id` join conditions instead of missing these relationships entirely. Do select `t3.policy_type_code` instead of `policy_type` from the wrong table. Do add `DISTINCT` to eliminate duplicate policy types instead of omitting it. Do use table aliases `t1`, `t2`, and `t3` instead of no aliases. Do filter on `t1.customer_name = \"Dayana Robel\"` instead of the unqualified `customer_name`. The amended query now correctly retrieves distinct policy types by properly joining through the relationship tables to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT policy_type FROM customers WHERE customer_name = 'Dayana Robel';",
            "SELECT DISTINCT t3.policy_type_code\nFROM Customers t1\nJOIN Customers_Policies t2 ON t1.Customer_ID = t2.Customer_ID\nJOIN Available_Policies t3 ON t2.Policy_ID = t3.Policy_ID\nWHERE t1.Customer_name = 'Dayana Robel'"
        ],
        "rule_sql": []
    },
    "145": {
        "db_id": "bike_1",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "ground_truth": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "amends": [
            "Do reference table `weather` instead of `weather_data` in the FROM clause. Do remove the `COUNT(*) as frequency` column from the SELECT list instead of including it. Do use `ORDER BY COUNT(*) DESC` instead of `ORDER BY frequency DESC` to sort by the aggregate function directly rather than the column alias. Do maintain the same `GROUP BY cloud_cover`, `WHERE zip_code = 94107`, and `LIMIT 3` clauses. The amended query now correctly returns only the cloud_cover values ordered by their count frequency without including the count column in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cloud_cover, COUNT(*) as frequency FROM weather_data WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY frequency DESC LIMIT 3;",
            "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "6218": {
        "db_id": "roller_coaster",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "ground_truth": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "amends": [
            "Do reference table `country` instead of `countries` in the FROM clause. Do reference table `roller_coaster` instead of `roller_coasters` in the subquery. Do use function `LENGTH` instead of column `length` in the subquery predicate. The amended query now correctly counts countries without roller coasters exceeding 3000 units in length."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM countries WHERE country_id NOT IN (SELECT country_id FROM roller_coasters WHERE length > 3000);",
            "SELECT COUNT(*) \nFROM country \nWHERE Country_ID NOT IN (\n    SELECT DISTINCT Country_ID \n    FROM roller_coaster \n    WHERE LENGTH > 3000\n)"
        ],
        "rule_sql": []
    },
    "5995": {
        "db_id": "game_1",
        "question": "Show the average, minimum, and maximum age for different majors.",
        "ground_truth": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "amends": [
            "Do use table name `Student` instead of `students` in the FROM clause. Do remove the column aliases `average_age`, `min_age`, and `max_age` instead of keeping them. Do maintain the same aggregate functions `AVG(age)`, `MIN(age)`, and `MAX(age)` with the same GROUP BY `major` logic. The amended query now matches RIGHT_SQL's behavior while preserving the same analytical results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT major, AVG(age) as average_age, MIN(age) as min_age, MAX(age) as max_age FROM students GROUP BY major;",
            "SELECT Major, AVG(Age), MIN(Age), MAX(Age) FROM Student GROUP BY Major"
        ],
        "rule_sql": []
    },
    "1488": {
        "db_id": "college_2",
        "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.",
        "ground_truth": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "amends": [
            "Do use `min(salary)` in the subquery instead of `MAX(salary)` to find instructors whose salary exceeds the minimum salary in the Biology department rather than the maximum salary. This changes the comparison logic from finding salaries greater than the highest Biology salary to finding salaries greater than the lowest Biology salary, which produces a different result set. The amended query now correctly matches the intended behavior of comparing against the minimum salary value."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')",
            "SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology');"
        ],
        "rule_sql": []
    },
    "660": {
        "db_id": "journal_committee",
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "ground_truth": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
        "amends": [
            "Do use table aliases `T2` and `T3` instead of `e` and `j` for the editor and journal tables. Do reference columns `T2.Name` and `T3.Theme` instead of `e.name` and `j.theme` to match the correct column names. Do use table `journal_committee AS T1` instead of `committees c` as the joining table between editors and journals. Do join `editor AS T2` on `T1.Editor_ID = T2.Editor_ID` instead of `editors e` on `e.editor_id = c.editor_id` to correct the table and column references. Do join `journal AS T3` on `T1.Journal_ID = T3.Journal_ID` instead of `journals j` on `c.journal_id = j.journal_id` to fix the join condition and table structure. The amended query now correctly uses the proper table names, column references, and join relationships to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT e.name, e.age, j.theme\nFROM editors e\nJOIN committees c ON e.editor_id = c.editor_id\nJOIN journals j ON c.journal_id = j.journal_id\nORDER BY j.theme ASC;",
            "SELECT T2.Name, T2.Age, T3.Theme\nFROM journal_committee AS T1\nJOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID\nJOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID\nORDER BY T3.Theme ASC;"
        ],
        "rule_sql": []
    },
    "6220": {
        "db_id": "ship_1",
        "question": "How many different captain ranks are there?",
        "ground_truth": "SELECT count(DISTINCT rank) FROM captain",
        "amends": [
            "Do use `count(DISTINCT rank)` instead of `COUNT(*)` to count distinct rank values rather than all rows. Do reference table `captain` instead of `captains` to use the correct table name. The amended query now correctly counts distinct rank values from the captain table instead of counting all rows from the incorrect table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM captains;",
            "SELECT COUNT(DISTINCT Rank) FROM captain;"
        ],
        "rule_sql": []
    },
    "5175": {
        "db_id": "music_2",
        "question": "What are the different album labels listed?",
        "ground_truth": "SELECT DISTINCT label FROM Albums",
        "amends": [
            "Do reference the table as `Albums` instead of `albums` to match the correct case sensitivity. Do select the column `label` instead of `album_name` to retrieve the appropriate distinct values from the table. The amended query now correctly returns distinct label values from the Albums table as specified in the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT album_name FROM albums;",
            "SELECT DISTINCT Label FROM Albums;"
        ],
        "rule_sql": []
    },
    "875": {
        "db_id": "chinook_1",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "ground_truth": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "amends": [
            "Do select `T2.Name` and `T1.ArtistId` instead of `name` and `id`. Do join `ALBUM AS T1` with `ARTIST AS T2` on `T1.ArtistId = T2.ArtistID` instead of selecting from a single table. Do add `GROUP BY T1.ArtistId` and `HAVING COUNT(*) >= 3` instead of omitting aggregation and filtering. Do order by `T2.Name` instead of `name ASC`. The amended query now correctly identifies artists with at least three albums by joining the album and artist tables, grouping by artist ID, and filtering with a count condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, id FROM artists ORDER BY name ASC;",
            "SELECT T2.Name, T1.ArtistId \nFROM Album AS T1 \nJOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId \nGROUP BY T1.ArtistId \nHAVING COUNT(*) >= 3 \nORDER BY T2.Name"
        ],
        "rule_sql": []
    },
    "3531": {
        "db_id": "music_1",
        "question": "What is the id of the longest song?",
        "ground_truth": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "amends": [
            "Do select `f_id` instead of `id` to reference the correct column from the files table. Do order by `duration DESC` instead of `ASC` to get the file with the maximum duration rather than the minimum. Do query from `files` table instead of `songs` table to access the correct data source containing file metadata. The amended query now correctly retrieves the file ID with the longest duration from the files table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM songs ORDER BY duration ASC LIMIT 1;",
            "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3919": {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "ground_truth": "SELECT count(patient) FROM stay WHERE room  =  112",
        "amends": [
            "Do count `patient` instead of `*` to count actual patient records rather than all rows. Do query the `stay` table instead of `patients` to access the correct data source containing room assignments. Do use numeric comparison `room = 112` instead of string comparison `room_number = '112'` to match the actual data type of the room column. Do remove the single quotes around the room number value to properly compare numeric values instead of attempting string comparison."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE room_number = '112';",
            "SELECT COUNT(patient) FROM Stay WHERE room = 112"
        ],
        "rule_sql": []
    },
    "3349": {
        "db_id": "sports_competition",
        "question": "How many clubs have total medals less than 10?",
        "ground_truth": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "amends": [
            "Do reference table `club_rank` instead of `clubs`. Do use filter condition `Total < 10` instead of `total_medals > 10`. The amended query now correctly counts records from the club_rank table where the Total value is less than 10, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM clubs WHERE total_medals > 10;",
            "SELECT COUNT(DISTINCT Club_ID) FROM club_rank WHERE Total < 10"
        ],
        "rule_sql": []
    },
    "2280": {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "ground_truth": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "amends": [
            "Do join `entrepreneur` AS `T1` with `people` AS `T2` on `T1.People_ID = T2.People_ID` instead of querying only the `entrepreneurs` table. Do select `T2.Name` instead of just `name` to ensure the correct column source. Do order by `T2.Weight` instead of `weight` to reference the proper table's column. The amended query now correctly retrieves the entrepreneur's name from the people table based on the relationship through People_ID, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM entrepreneurs ORDER BY weight DESC LIMIT 1;",
            "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "1582": {
        "db_id": "customers_and_invoices",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "ground_truth": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "amends": [
            "Do add `JOIN Accounts AS T2 ON T1.account_id = T2.account_id` instead of querying only the `transactions` table. Do reference `T2.account_name` instead of `account_name` directly. Do use string literal `\"337\"` instead of numeric value `337` for the account name comparison. Do qualify the table reference as `Financial_transactions AS T1` instead of just `transactions`. The amended query now correctly joins the transactions and accounts tables to validate account existence before counting, ensuring accurate results by matching on the proper account_id relationship and treating account_name as a string value."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM transactions WHERE account_name = 337",
            "SELECT COUNT(*) \nFROM Financial_Transactions AS T1\nJOIN Accounts AS T2 ON T1.account_id = T2.account_id\nWHERE T2.account_name = \"337\""
        ],
        "rule_sql": []
    },
    "4934": {
        "db_id": "store_product",
        "question": "Find all the product whose name contains the word \"Scanner\".",
        "ground_truth": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
        "amends": [
            "Do select only the `product` column instead of all columns with `*`. Do reference the `product` table instead of `products`. Do use a `LIKE` pattern match with `%Scanner%` instead of exact equality with `= 'Scanner'` to find products containing the word Scanner anywhere in their name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE name = 'Scanner';",
            "SELECT product FROM product WHERE product LIKE '%Scanner%'"
        ],
        "rule_sql": []
    },
    "1127": {
        "db_id": "climbing",
        "question": "What are the different ranges of the 3 mountains with the highest prominence?",
        "ground_truth": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "amends": [
            "Do select `DISTINCT Range` instead of `name, prominence` to return unique mountain ranges rather than individual mountain details. Do reference table `mountain` instead of `mountains` to use the correct table name. Do order by `Prominence` instead of `prominence` to match the correct column name capitalization. The amended query now correctly returns the top 3 distinct mountain ranges ordered by prominence, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, prominence FROM mountains ORDER BY prominence DESC LIMIT 3;",
            "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "1204": {
        "db_id": "apartment_rentals",
        "question": "What are the building full names that contain the word \"court\"?",
        "ground_truth": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
        "amends": [
            "Do select `building_full_name` instead of `building_name` and use table `Apartment_Buildings` instead of `buildings`. Do use double quotes for the string pattern `\"%court%\"` instead of single quotes `'%court%'` while maintaining the same LIKE pattern logic. The amended query now correctly references the appropriate column and table names to match the intended schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building_name FROM buildings WHERE building_name LIKE '%court%';",
            "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
        ],
        "rule_sql": []
    },
    "5079": {
        "db_id": "device",
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "ground_truth": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "amends": [
            "Do reference the correct table name `device` instead of `devices`. Do use the correct column name `Software_Platform` instead of `platform` in both the SELECT list and GROUP BY clause. Do remove the alias `frequency` and instead use the aggregate function `COUNT(*)` directly in the ORDER BY clause. Do change the sort direction to `DESC` instead of `ASC` to order by descending count. The amended query now correctly counts software platforms from the device table ordered by frequency in descending order.",
            "Do remove the `COUNT(*)` column from the SELECT list instead of including it, as the query only needs to return distinct Software_Platform values grouped by that column. Do keep the GROUP BY clause on `Software_Platform` to ensure proper grouping of distinct platform values. Do maintain the ORDER BY clause using `COUNT(*) DESC` to sort the results by the count of devices per platform in descending order. The amended query now correctly returns only the distinct software platforms while preserving the grouping and ordering logic to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform, COUNT(*) as frequency FROM devices GROUP BY platform ORDER BY frequency ASC;",
            "SELECT Software_Platform, COUNT(*) FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC;",
            "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC;"
        ],
        "rule_sql": []
    },
    "3638": {
        "db_id": "baseball_1",
        "question": "Count the number of players who enter hall of fame for each year.",
        "ground_truth": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
        "amends": [
            "Do group by `yearid` instead of `player_id` to count records per year rather than per player. Do select `yearid` instead of `year` to use the correct column name from the schema. The amended query now correctly counts hall of fame entries grouped by year instead of by player, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) FROM hall_of_fame GROUP BY player_id;",
            "SELECT yearid, COUNT(*) AS num_players FROM hall_of_fame GROUP BY yearid ORDER BY yearid;"
        ],
        "rule_sql": []
    },
    "3257": {
        "db_id": "college_1",
        "question": "List the codes of all courses that take place in room KLR209.",
        "ground_truth": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "amends": [
            "Do select `class_code` instead of `course_name` and reference table `CLASS` instead of `courses`. Do use filter condition `class_room = 'KLR209'` instead of `room = 'KLR209'` to correctly query the classroom location. The amended query now matches the intended behavior of retrieving class codes from the CLASS table where the classroom is KLR209."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE room = 'KLR209';",
            "SELECT CLASS_CODE FROM CLASS WHERE CLASS_ROOM = 'KLR209';"
        ],
        "rule_sql": []
    },
    "2127": {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "ground_truth": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
        "amends": [
            "Do add `JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id` instead of querying only the `employees` table. Do change the WHERE filter to `Circulation_History.document_id = 1` instead of `document_id = 1` since the document_id column exists in the joined Circulation_History table rather than the employees table. Do qualify the column reference as `Employees.employee_name` instead of just `employee_name` for explicit table specification. The amended query now correctly joins the tables to find employees who have circulated document 1, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT employee_name FROM employees WHERE document_id = 1;",
            "SELECT Employees.employee_name\nFROM Employees\nJOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id\nWHERE Circulation_History.document_id = 1;"
        ],
        "rule_sql": []
    },
    "6349": {
        "db_id": "school_bus",
        "question": "Show the name, home city, and age for all drivers.",
        "ground_truth": "SELECT name ,  home_city ,  age FROM driver",
        "amends": [
            "Do select `home_city` instead of `city` from the column list. Do reference table `driver` instead of `drivers` in the FROM clause. The amended query now correctly selects the home_city column from the driver table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, city, age FROM drivers;",
            "SELECT Name, Home_city, Age FROM driver;"
        ],
        "rule_sql": []
    },
    "5636": {
        "db_id": "railway",
        "question": "What is the average age for all managers?",
        "ground_truth": "SELECT avg(Age) FROM manager",
        "amends": [
            "Do reference the `manager` table instead of the `employees` table. Do use the column name `Age` instead of `age`. Do remove the `WHERE job_title = 'Manager'` filter instead of keeping it, as the table already contains only manager records. Do use lowercase `avg` function instead of uppercase `AVG` for consistency. The amended query now correctly calculates the average age directly from the manager table without needing additional filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM employees WHERE job_title = 'Manager';",
            "SELECT avg(Age) FROM manager;"
        ],
        "rule_sql": []
    },
    "3465": {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "ground_truth": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "amends": [
            "Do use `job_history AS T1` and `employees AS T2` as explicit table sources instead of querying only `jobs` with a subquery. Do perform an `INNER JOIN` on `T1.employee_id = T2.employee_id` instead of using an `IN` subquery filter. Do apply the `salary >= 12000` filter directly in the `WHERE` clause on the joined `T2` table instead of within a subquery. Do select all columns from the joined result set instead of only from the original single table. The amended query now correctly joins the job history with employee data and filters based on salary criteria, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM jobs WHERE employee_id IN (SELECT employee_id FROM employees WHERE salary >= 12000);",
            "SELECT T1.*, T2.* FROM job_history AS T1 INNER JOIN employees AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T2.SALARY >= 12000"
        ],
        "rule_sql": []
    },
    "6381": {
        "db_id": "flight_company",
        "question": "How many companies operates airlines in each airport?",
        "ground_truth": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "amends": [
            "Do select `T3.id` and `count(*)` instead of `airport_name` and `COUNT(company_name)`. Do join three tables `operate_company AS T1`, `flight AS t2`, and `airport AS T3` instead of querying only `airlines`. Do use `INNER JOIN` with `T1.id = T2.company_id` and `T2.airport_id = T3.id` instead of no joins. Do group by `T3.id` instead of `airport_name`. The amended query now correctly counts flights per airport by establishing proper relationships between companies, flights, and airports through appropriate joins."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT airport_name, COUNT(company_name) FROM airlines GROUP BY airport_name;",
            "SELECT T3.id, COUNT(*) \nFROM operate_company AS T1 \nINNER JOIN flight AS T2 ON T1.id = T2.company_id \nINNER JOIN airport AS T3 ON T2.airport_id = T3.id \nGROUP BY T3.id"
        ],
        "rule_sql": []
    },
    "4448": {
        "db_id": "network_2",
        "question": "Find the name of the person who has no student friends.",
        "ground_truth": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "amends": [
            "Do use `EXCEPT` with a separate query instead of `NOT IN` with a correlated subquery. Do join `Person` as `T1` and `PersonFriend` as `T2` on `T1.name = T2.friend` instead of referencing a `friend` table that doesn't exist. Do add filter `T1.job = 'student'` instead of omitting any job condition. Do select from `PersonFriend` table instead of a non-existent `friend` table. Do reference `T2.name` in the second query instead of selecting only from the base `person` table. The amended query now correctly identifies students who are not listed as friends in the PersonFriend table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM person WHERE id NOT IN (SELECT friend_id FROM friend WHERE person_id = id)",
            "SELECT name FROM Person\nEXCEPT\nSELECT T2.name FROM Person T1\nJOIN PersonFriend T2 ON T1.name = T2.friend\nWHERE T1.job = 'student'"
        ],
        "rule_sql": []
    },
    "4180": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of locations.",
        "ground_truth": "SELECT count(*) FROM Ref_locations",
        "amends": [
            "Do select from `Ref_locations` instead of `employees` while keeping the `COUNT(*)` aggregate function unchanged. The amended query now correctly counts records from the Ref_locations table instead of the employees table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees;",
            "SELECT COUNT(*) FROM Ref_Locations;"
        ],
        "rule_sql": []
    },
    "6217": {
        "db_id": "roller_coaster",
        "question": "Show the names of countries and the average speed of roller coasters from each country.",
        "ground_truth": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of no aliases. Do select `T1.Name` instead of `country`. Do join `country AS T1` to `roller_coaster AS T2` instead of querying only `roller_coasters`. Do specify the join condition `ON T1.Country_ID = T2.Country_ID` instead of no join condition. Do aggregate `avg(T2.Speed)` instead of `AVG(speed)`. Do group by `T1.Name` instead of `country`. The amended query now correctly joins the country table to access country names and properly calculates average roller coaster speeds by country."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, AVG(speed) FROM roller_coasters GROUP BY country;",
            "SELECT T1.Name, AVG(T2.Speed) AS AverageSpeed FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name"
        ],
        "rule_sql": []
    },
    "644": {
        "db_id": "store_1",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "ground_truth": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "amends": [
            "Do use `EXCEPT` set operation instead of `NOT IN` subquery for set difference logic. Do reference `tracks` table as `T1` instead of `t`, and use `playlist_tracks` instead of `playlist_track` as the junction table name. Do join on `T1.id = T2.track_id` instead of `t.TrackId = pt.TrackId`, and use `T2.playlist_id = T3.id` instead of `pt.PlaylistId = p.PlaylistId` for the playlist join. Do select `T1.name` instead of `t.Name` in both main query and except clause. Do filter with `T3.name = 'Movies'` and `T3.name = 'Music'` instead of `p.Name = 'Movies'` and `p2.Name = 'Music'` respectively. Do remove the redundant subquery structure and instead use two separate SELECT statements combined with EXCEPT. The amended query now correctly uses set operations to find tracks in Movies playlists but not in Music playlists, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.Name \nFROM tracks t\nJOIN playlist_track pt ON t.TrackId = pt.TrackId\nJOIN playlists p ON pt.PlaylistId = p.PlaylistId\nWHERE p.Name = 'Movies'\nAND t.TrackId NOT IN (\n    SELECT t2.TrackId \n    FROM tracks t2\n    JOIN playlist_track pt2 ON t2.TrackId = pt2.TrackId\n    JOIN playlists p2 ON pt2.PlaylistId = p2.PlaylistId\n    WHERE p2.Name = 'Music'\n)",
            "SELECT T1.name\nFROM tracks T1\nJOIN playlist_tracks T2 ON T1.id = T2.track_id\nJOIN playlists T3 ON T2.playlist_id = T3.id\nWHERE T3.name = 'Movies'\nEXCEPT\nSELECT T1.name\nFROM tracks T1\nJOIN playlist_tracks T2 ON T1.id = T2.track_id\nJOIN playlists T3 ON T2.playlist_id = T3.id\nWHERE T3.name = 'Music'"
        ],
        "rule_sql": []
    },
    "2831": {
        "db_id": "restaurant_1",
        "question": "Which Advisor has most of students? List advisor and the number of students.",
        "ground_truth": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
        "amends": [
            "Do use `Advisor` instead of `advisor_name` for the grouping column and select list. Do use `count(*)` instead of `COUNT(student_id)` to count all rows rather than non-null student IDs. Do order by `count(Advisor) DESC` instead of `student_count ASC` to get the highest count rather than the lowest. Do remove the alias `student_count` instead of keeping it since it's not referenced in the ORDER BY. The amended query now correctly identifies the advisor with the most students by counting all records and ordering descending."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT advisor_name, COUNT(student_id) as student_count FROM students GROUP BY advisor_name ORDER BY student_count ASC LIMIT 1;",
            "SELECT Advisor, COUNT(*) FROM Student GROUP BY Advisor ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3898": {
        "db_id": "hospital_1",
        "question": "Which department has the largest number of employees?",
        "ground_truth": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
        "amends": [
            "Do select `name` from the `department` table instead of `department` and `COUNT(*)` from `employees`. Do group by `departmentID` instead of `department`. Do order by `count(departmentID)` in descending order instead of `COUNT(*)` in ascending order. The amended query now correctly retrieves department names ordered by department count.",
            "Do select only `name` instead of `d.Name, COUNT(*) as employee_count`. Do use `FROM department` without alias instead of `FROM Department d`. Do remove the `JOIN Affiliated_With aw ON d.DepartmentID = aw.Department` and `WHERE aw.PrimaryAffiliation = 1` clauses entirely instead of including them. Do group by `departmentID` without table prefix instead of `d.DepartmentID`. Do order by `count(departmentID)` instead of `COUNT(*)`. The amended query now correctly identifies the department with the most affiliations by counting department IDs directly rather than joining through an affiliation table with primary affiliation filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) FROM employees GROUP BY department ORDER BY COUNT(*) ASC LIMIT 1;",
            "SELECT d.Name, COUNT(*) as employee_count\nFROM Department d\nJOIN Affiliated_With aw ON d.DepartmentID = aw.Department\nWHERE aw.PrimaryAffiliation = 1\nGROUP BY d.DepartmentID\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT name FROM department GROUP BY departmentID ORDER BY COUNT(departmentID) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2792": {
        "db_id": "election",
        "question": "Show the people that have been governor the most times.",
        "ground_truth": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do select `Governor` instead of `name` and `COUNT(*)` as `times_governor`. Do use table `party` instead of `governors` as the FROM source. Do remove the explicit alias `times_governor` from the SELECT list instead of keeping it. Do move the aggregate function `COUNT(*)` to the ORDER BY clause instead of including it in the SELECT list. Do maintain the GROUP BY on `Governor` instead of `name` and keep the DESC ordering with LIMIT 1. The amended query now correctly retrieves the most frequent governor from the party table while matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, COUNT(*) as times_governor FROM governors GROUP BY name ORDER BY times_governor DESC LIMIT 1;",
            "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "118": {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude in San Jose?",
        "ground_truth": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "amends": [
            "Do reference columns `lat` and `long` instead of `latitude` and `longitude` in the SELECT list. Do query from table `station` instead of `cities` in the FROM clause. Do use double quotes `\"San Jose\"` instead of single quotes `'San Jose'` for the string literal in the WHERE filter. The amended query now correctly calculates average coordinates from the station table for San Jose."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(latitude), AVG(longitude) FROM cities WHERE city = 'San Jose';",
            "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = \"San Jose\""
        ],
        "rule_sql": []
    },
    "6492": {
        "db_id": "scientist_1",
        "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
        "ground_truth": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'",
        "amends": [
            "Do use `assignedto` as the joining table instead of directly joining `scientists` to `projects`, and do join on `T1.project = T2.code` and `T1.scientist = T3.SSN` instead of `s.project_id = p.id`. Do filter with separate queries for each project name using `WHERE T2.name = 'Matter of Time'` and `WHERE T2.name = 'A Puzzling Parallax'` instead of `WHERE p.name = 'Matter of Time' OR p.name = 'A Puzzling Pattern'`, and do use `INTERSECT` to find scientists assigned to both projects instead of using an `OR` condition. Do select from `T3.name` instead of `s.name` to match the correct table alias structure. The amended query now correctly identifies scientists assigned to both specified projects using proper table relationships and set operations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name FROM scientists s JOIN projects p ON s.project_id = p.id WHERE p.name = 'Matter of Time' OR p.name = 'A Puzzling Pattern'",
            "SELECT T3.Name\nFROM AssignedTo T1\nJOIN Projects T2 ON T1.Project = T2.Code\nJOIN Scientists T3 ON T1.Scientist = T3.SSN\nWHERE T2.Name = 'Matter of Time'\nINTERSECT\nSELECT T3.Name\nFROM AssignedTo T1\nJOIN Projects T2 ON T1.Project = T2.Code\nJOIN Scientists T3 ON T1.Scientist = T3.SSN\nWHERE T2.Name = 'A Puzzling Pattern'"
        ],
        "rule_sql": []
    },
    "1047": {
        "db_id": "phone_1",
        "question": "Count the number of chip model that do not have wifi.",
        "ground_truth": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "amends": [
            "Do reference table `chip_model` instead of `chip_models` in the FROM clause. Do filter for `wifi = 'No'` instead of `wifi = 'yes'` in the WHERE condition. The amended query now correctly counts records from the chip_model table where wifi equals 'No', matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM chip_models WHERE wifi = 'yes';",
            "SELECT COUNT(*) FROM chip_model WHERE WiFi = 'No';"
        ],
        "rule_sql": []
    },
    "955": {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "ground_truth": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "amends": [
            "Do join `medicine_enzyme_interaction AS T1` with `medicine AS T2` on `T1.medicine_id = T2.id` and `enzyme AS T3` on `T1.enzyme_id = T3.id` instead of querying `enzyme_medicine_interactions` directly. Do filter on `T3.name = 'ALA synthase'` and `T2.name = 'Aripiprazole'` instead of `enzyme_name` and `medicine_name` columns. Do select `T1.interaction_type` instead of just `interaction_type`. The amended query now correctly joins normalized tables and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT interaction_type FROM enzyme_medicine_interactions WHERE enzyme_name = 'ALA synthase' AND medicine_name = 'Aripiprazole';",
            "SELECT T1.interaction_type \nFROM medicine_enzyme_interaction AS T1\nJOIN medicine AS T2 ON T1.medicine_id = T2.id\nJOIN enzyme AS T3 ON T1.enzyme_id = T3.id\nWHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'"
        ],
        "rule_sql": []
    },
    "3430": {
        "db_id": "hr_1",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "ground_truth": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_id, hire_date FROM employees WHERE hire_date > '2007-11-05' AND hire_date < '2009-07-05';"
        ],
        "rule_sql": []
    },
    "5595": {
        "db_id": "products_gen_characteristics",
        "question": "Return the name of the characteristic that is most common across all products.",
        "ground_truth": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do join `products AS t1` and `CHARACTERISTICS AS t3` instead of querying only `product_characteristics` alone. Do use `t1.product_id = t2.product_id` and `t2.characteristic_id = t3.characteristic_id` join conditions instead of missing the necessary table relationships. Do select `t3.characteristic_name` from the joined `CHARACTERISTICS` table instead of directly from `product_characteristics`. Do maintain the `GROUP BY t3.characteristic_name` and `ORDER BY count(*) DESC LIMIT 1` structure to preserve the original logic of finding the most frequent characteristic. The amended query now correctly joins all required tables to access the characteristic names from the proper source table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT characteristic_name \nFROM product_characteristics \nGROUP BY characteristic_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
            "SELECT t3.characteristic_name\nFROM Products AS t1\nJOIN Product_Characteristics AS t2 ON t1.product_id = t2.product_id\nJOIN Characteristics AS t3 ON t2.characteristic_id = t3.characteristic_id\nGROUP BY t3.characteristic_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2189": {
        "db_id": "formula_1",
        "question": "What are the numbers of races for each constructor id?",
        "ground_truth": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "amends": [
            "Do select `count(*)` and `constructorid` instead of `constructor_id` and `COUNT(*)`. Do use table `constructorStandings` instead of `races`. Do group by `constructorid` instead of `constructor_id`. The amended query now correctly counts constructor standings from the appropriate table with the proper column names.",
            "Do place the `count(*)` column first in the SELECT list instead of second, and do use lowercase `constructorid` instead of mixed-case `constructorId` in both the SELECT list and GROUP BY clause, while maintaining the same aggregation logic and table source without any changes to joins, filters, or other clauses."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT constructor_id, COUNT(*) FROM races GROUP BY constructor_id;",
            "SELECT constructorId, COUNT(*) FROM constructorStandings GROUP BY constructorId;",
            "SELECT count(*), constructorid FROM constructorStandings GROUP BY constructorid"
        ],
        "rule_sql": []
    },
    "5074": {
        "db_id": "device",
        "question": "Show the name of the shop that have the largest quantity of devices in stock.",
        "ground_truth": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "amends": [
            "Do select `T2.Shop_Name` instead of `name` and use aggregation with `SUM(T1.quantity)` instead of raw `stock_quantity`. Do join `stock AS T1` with `shop AS T2` on `T1.Shop_ID = T2.Shop_ID` instead of querying only the `shops` table. Do add `GROUP BY T1.Shop_ID` to aggregate stock quantities per shop instead of ordering by individual stock quantities. Do order by the aggregated `SUM(T1.quantity)` instead of the raw `stock_quantity` column. The amended query now correctly calculates total stock per shop and returns the shop with the highest total inventory, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM shops ORDER BY stock_quantity DESC LIMIT 1;",
            "SELECT T2.Shop_Name\nFROM stock AS T1\nJOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID\nGROUP BY T1.Shop_ID\nORDER BY SUM(T1.Quantity) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2515": {
        "db_id": "movie_1",
        "question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?",
        "ground_truth": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID",
        "amends": [
            "Do select `mID` and `avg(stars)` instead of `m.title` and `AVG(r.rating) as average_rating`. Do use `Rating` table instead of `movies` and `reviews` tables. Do add a WHERE clause with `mID NOT IN` subquery instead of filtering for `reviewer_name = 'Brittany Harris'`. Do remove the JOIN operation and instead use a correlated subquery that joins `Rating AS T1` with `Reviewer AS T2` on `T1.rID = T2.rID` where `T2.name = \"Brittany Harris\"`. Do group by `mID` instead of `m.title`. The amended query now correctly excludes movies rated by Brittany Harris and calculates average ratings for all other movies, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, AVG(r.rating) as average_rating\nFROM movies m\nJOIN reviews r ON m.movie_id = r.movie_id\nWHERE r.reviewer_name = 'Brittany Harris'\nGROUP BY m.title;",
            "SELECT mID, AVG(stars) \nFROM Rating \nWHERE mID NOT IN (\n    SELECT T1.mID \n    FROM Rating AS T1 \n    JOIN Reviewer AS T2 ON T1.rID = T2.rID \n    WHERE T2.name = 'Brittany Harris'\n)\nGROUP BY mID"
        ],
        "rule_sql": []
    },
    "4130": {
        "db_id": "film_rank",
        "question": "Please show the titles of films and the types of market estimations.",
        "ground_truth": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID",
        "amends": [
            "Do specify columns `T1.Title` and `T2.Type` instead of `title` and `market_estimation`. Do add table `film` as `T1` and `film_market_estimation` as `T2` instead of only `films`. Do use `JOIN` with `ON T1.Film_ID = T2.Film_ID` instead of no join condition. The amended query now correctly joins the two tables to retrieve the appropriate columns with proper table aliases and join predicate."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, market_estimation FROM films;",
            "SELECT T1.Title, T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID"
        ],
        "rule_sql": []
    },
    "282": {
        "db_id": "twitter_1",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "ground_truth": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "amends": [
            "Do query the `user_profiles` table instead of the `users` table. Do use `OR` logic between the email filters instead of `AND` logic. Do remove the unnecessary semicolon at the end of the query instead of keeping it. The amended query now correctly searches for users whose email contains either 'superstar' or 'edu' in the appropriate user_profiles table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM users WHERE email LIKE '%superstar%' AND email LIKE '%edu%';",
            "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"
        ],
        "rule_sql": []
    },
    "4408": {
        "db_id": "network_2",
        "question": "Who is the oldest person?",
        "ground_truth": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
        "amends": [
            "Do select only `name` instead of all columns with `*`. Do query from `Person` instead of `people`. Do add a `WHERE` filter comparing `age` to a subquery result instead of omitting filtering. Do use a correlated subquery to find `max(age)` from the same table instead of simple ordering. Do remove `ORDER BY` and `LIMIT` clauses instead of keeping them, as the maximum age is now found through aggregation. The amended query now correctly identifies the person with the maximum age by using a subquery comparison instead of relying on ordering and limiting which could miss duplicate maximum values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM people ORDER BY age ASC LIMIT 1;",
            "SELECT name FROM Person WHERE age = (SELECT MAX(age) FROM Person)"
        ],
        "rule_sql": []
    },
    "5709": {
        "db_id": "dorm_1",
        "question": "What are the names of the dorm with the largest capacity?",
        "ground_truth": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "amends": [
            "Do select `dorm_name` instead of `name` and use table `dorm` instead of `dorms`. Do order by `student_capacity DESC` instead of `capacity ASC` while maintaining the `LIMIT 1` clause. The amended query now correctly retrieves the dorm with the highest student capacity from the appropriate table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM dorms ORDER BY capacity ASC LIMIT 1;",
            "SELECT dorm_name FROM Dorm ORDER BY student_capacity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1216": {
        "db_id": "apartment_rentals",
        "question": "Return the first names and last names of all guests",
        "ground_truth": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "amends": [
            "Do select `guest_first_name` and `guest_last_name` instead of `first_name` and `last_name` to use the correct column names from the schema. Do reference the table as `Guests` instead of `guests` to match the proper table name casing. The amended query now correctly retrieves the specified guest information from the appropriate columns in the Guests table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM guests WHERE guest_id = 1;",
            "SELECT guest_first_name, guest_last_name FROM Guests;"
        ],
        "rule_sql": []
    },
    "5811": {
        "db_id": "customer_complaints",
        "question": "Return the first names of the 5 staff members who have handled the most complaints.",
        "ground_truth": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "amends": [
            "Do select `t1.first_name` with table alias instead of `first_name` without qualification. Do add `FROM staff AS t1 JOIN complaints AS t2` with explicit table aliases and join instead of single table `FROM staff`. Do add join condition `ON t1.staff_id = t2.staff_id` instead of omitting any join. Do add `GROUP BY t2.staff_id` for aggregation instead of no grouping. Do change ordering to `ORDER BY count(*)` for complaint count aggregation instead of `ORDER BY complaint_count DESC` using a direct column. Do keep `LIMIT 5` unchanged. The amended query now correctly aggregates complaint counts per staff member and returns the top 5 staff by actual complaint volume.",
            "Do use `ORDER BY count(*)` without `DESC` instead of `ORDER BY count(*) DESC` to sort in ascending order rather than descending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM staff ORDER BY complaint_count DESC LIMIT 5;",
            "SELECT t1.first_name\nFROM staff AS t1\nJOIN complaints AS t2 ON t1.staff_id = t2.staff_id\nGROUP BY t2.staff_id\nORDER BY count(*) DESC\nLIMIT 5",
            "SELECT t1.first_name \nFROM Staff AS t1 \nJOIN Complaints AS t2 ON t1.staff_id = t2.staff_id \nGROUP BY t2.staff_id \nORDER BY count(*) \nLIMIT 5"
        ],
        "rule_sql": []
    },
    "4443": {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "ground_truth": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "amends": [
            "Do use `DISTINCT` instead of omitting it, and select from `Person AS T1` instead of `friends`. Do add `JOIN PersonFriend AS T2` instead of omitting it, with join condition `ON T1.name = T2.name` instead of no join. Do change WHERE filter to `T2.friend = 'Dan' OR T2.friend = 'Alice'` instead of `name = 'Dan' OR name = 'alice'`, fixing the case sensitivity and filtering on friend relationships rather than direct names. The amended query now correctly identifies friends of Dan or Alice by joining through the PersonFriend relationship table instead of directly querying names, matching the RIGHT_SQL's behavior.",
            "Do join on `T1.name = T2.name` instead of `T1.name = T2.friend`. Do filter on `T2.friend = 'Dan' OR T2.friend = 'Alice'` instead of `T2.name = 'Dan' OR T2.name = 'Alice'`. The amended query now correctly identifies friends of Dan or Alice by joining on the person's name and filtering for those who have Dan or Alice as friends, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, age FROM friends WHERE name = 'Dan' OR name = 'alice';",
            "SELECT DISTINCT T1.name, T1.age\nFROM Person AS T1\nJOIN PersonFriend AS T2 ON T1.name = T2.friend\nWHERE T2.name = 'Dan' OR T2.name = 'Alice'",
            "SELECT DISTINCT T1.name, T1.age\nFROM Person AS T1\nJOIN PersonFriend AS T2 ON T1.name = T2.name\nWHERE T2.friend = 'Dan' OR T2.friend = 'Alice'"
        ],
        "rule_sql": []
    },
    "6040": {
        "db_id": "game_1",
        "question": "What are ids and total number of hours played for each game?",
        "ground_truth": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
        "amends": [
            "Do use `gameid` instead of `game_id` for the column name in both the SELECT list and GROUP BY clause. Do remove the alias `as total_hours` instead of keeping it. Do reference table `Plays_games` instead of `game_playtime` as the data source. The amended query now correctly aggregates playtime hours by game identifier using the appropriate table and column names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_id, SUM(hours_played) as total_hours FROM game_playtime GROUP BY game_id",
            "SELECT GameID, SUM(Hours_Played) FROM Plays_Games GROUP BY GameID;"
        ],
        "rule_sql": []
    },
    "3864": {
        "db_id": "insurance_policies",
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "ground_truth": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT claim_id, COUNT(*) FROM settlements GROUP BY claim_id;"
        ],
        "rule_sql": []
    },
    "3": {
        "db_id": "department_management",
        "question": "What are the maximum and minimum budget of the departments?",
        "ground_truth": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
        "amends": [
            "Do reference column `budget_in_billions` instead of `budget` in both aggregate functions. Do query table `department` instead of `employees` as the data source. The amended query now correctly calculates the maximum and minimum budget values from the appropriate department table with the correct column name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(budget), MIN(budget) FROM employees;",
            "SELECT MAX(Budget_in_Billions) AS max_budget, MIN(Budget_in_Billions) AS min_budget FROM department;"
        ],
        "rule_sql": []
    },
    "1107": {
        "db_id": "match_season",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "ground_truth": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "amends": [
            "Do use `INTERSECT` to find countries with both positions instead of `OR` which finds countries with either position. Do reference table `country` with alias `T1` instead of `countries` with alias `c`. Do reference table `match_season` with alias `T2` instead of `players` with alias `p`. Do join on `T1.Country_id = T2.Country` instead of `c.id = p.country_id`. Do filter for `T2.Position = \"Forward\"` in the first branch and `T2.Position = \"Defender\"` in the second branch instead of `p.position = 'Forward' OR p.position = 'Defender'`. Do select `T1.Country_name` instead of `c.name`. Do remove `DISTINCT` since `INTERSECT` inherently returns unique results. The amended query now correctly identifies countries that have both Forward and Defender positions rather than countries that have either position."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT c.name \nFROM countries c \nJOIN players p ON c.id = p.country_id \nWHERE p.position = 'Forward' OR p.position = 'Defender';",
            "SELECT T1.Country_name\nFROM country T1\nJOIN match_season T2 ON T1.Country_id = T2.Country\nWHERE T2.Position = \"Forward\"\nINTERSECT\nSELECT T1.Country_name\nFROM country T1\nJOIN match_season T2 ON T1.Country_id = T2.Country\nWHERE T2.Position = \"Defender\""
        ],
        "rule_sql": []
    },
    "4213": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the name and description of the role played by the employee named Ebba.",
        "ground_truth": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"",
        "amends": [
            "Do select `T2.role_name` and `T2.role_description` instead of `name` and `description`. Do join `Employees AS T1` and `ROLES AS T2` with `ON T1.role_code = T2.role_code` instead of querying only the `roles` table. Do filter on `T1.employee_name = \"Ebba\"` instead of filtering directly on the roles table. Do use double quotes around `\"Ebba\"` instead of single quotes. The amended query now correctly joins employee and role data to retrieve role information for the specified employee."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, description FROM roles WHERE employee_name = 'Ebba';",
            "SELECT T2.Role_Name, T2.Role_Description \nFROM Employees AS T1 \nJOIN Roles AS T2 ON T1.Role_Code = T2.Role_Code \nWHERE T1.Employee_Name = \"Ebba\""
        ],
        "rule_sql": []
    },
    "2343": {
        "db_id": "csu_1",
        "question": "How many universities have a campus fee greater than the average?",
        "ground_truth": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "amends": [
            "Do reference table `csu_fees` instead of `universities` in both the main query and subquery. Do use column `campusfee` instead of `campus_fee` for both the comparison and aggregate calculation. Do maintain the same aggregate function `avg()` and comparison logic but with the correct table and column names. The amended query now correctly counts records where campus fee exceeds the average campus fee from the same table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE campus_fee > (SELECT AVG(campus_fee) FROM universities);",
            "SELECT COUNT(*) FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees)"
        ],
        "rule_sql": []
    },
    "2841": {
        "db_id": "restaurant_1",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "ground_truth": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;",
        "amends": [
            "Do select `Student.Fname` and `Student.Lname` instead of `s.first_name` and `s.last_name`. Do use table alias `Student` instead of `s` and `Visits_Restaurant` instead of `v`. Do join on `Student.StuID = Visits_Restaurant.StuID` instead of `s.student_id = v.student_id`. Do omit the `COUNT(*) as visit_count` from the SELECT list instead of including it. Do order by `count(*) DESC` instead of `visit_count DESC` while keeping the same descending order logic. The amended query now correctly retrieves student names based on visit count ordering without including the count in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.last_name, COUNT(*) as visit_count\nFROM students s\nJOIN visits v ON s.student_id = v.student_id\nGROUP BY s.student_id\nORDER BY visit_count DESC\nLIMIT 1;",
            "SELECT Student.Fname, Student.Lname\nFROM Student\nJOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID\nGROUP BY Student.StuID\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1435": {
        "db_id": "college_2",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "ground_truth": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "amends": [
            "Do use the `advisor` table as a bridge table instead of directly joining `instructor` to `student`. Do join `advisor` to `instructor` on `T1.i_id = T2.id` instead of joining directly on `i.id = s.advisor_id`. Do join `advisor` to `student` on `T1.s_id = T3.id` instead of the direct join approach. Do select only `T2.name` instead of both `i.name` and `SUM(s.tot_cred)`. Do remove the aggregation and `GROUP BY` clause instead of keeping them. Do reference `T3.tot_cred` in the `ORDER BY` instead of the aggregated `total_credits`. Do use proper table aliases `T1`, `T2`, `T3` instead of single-letter aliases. Do capitalize 'Math' in the filter instead of lowercase 'math'. The amended query now correctly follows the advisor relationship through the bridge table and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT i.name, SUM(s.tot_cred) as total_credits\nFROM instructor i\nJOIN student s ON i.id = s.advisor_id\nWHERE s.dept_name = 'math'\nGROUP BY i.name\nORDER BY total_credits DESC;",
            "SELECT T2.name\nFROM advisor T1\nJOIN instructor T2 ON T1.i_ID = T2.ID\nJOIN student T3 ON T1.s_ID = T3.ID\nJOIN department T4 ON T3.dept_name = T4.dept_name\nWHERE T4.dept_name = 'Math'\nORDER BY T3.tot_cred;"
        ],
        "rule_sql": []
    },
    "787": {
        "db_id": "race_track",
        "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
        "ground_truth": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
        "amends": [
            "Do use `INTERSECT` between two separate queries instead of a single `WHERE` clause with contradictory conditions. Do reference table `track` instead of `tracks` and column `seating` instead of `seats`. Do structure the query as two separate `SELECT` statements with `INTERSECT` instead of attempting to use `AND` with mutually exclusive filters `seats > 90000` and `seats < 70000`. The amended query now correctly returns locations where seating is both greater than 90000 and less than 70000 using set intersection logic instead of the impossible condition in the original query."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM tracks WHERE seats > 90000 AND seats < 70000;",
            "SELECT Location FROM track WHERE seating > 90000\nINTERSECT\nSELECT Location FROM track WHERE seating < 70000"
        ],
        "rule_sql": []
    },
    "4095": {
        "db_id": "student_1",
        "question": "How many students does one classroom have?",
        "ground_truth": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "amends": [
            "Do select `count(*)` and `classroom` instead of only `COUNT(*)`. Do add `GROUP BY classroom` instead of omitting grouping. Do change the source table to `list` instead of `students`. Do remove the `WHERE classroom_id = 1` filter instead of keeping it, as the query now aggregates across all classrooms rather than filtering for a specific one. The amended query now correctly counts records grouped by classroom rather than counting only classroom 1, matching the right SQL's behavior.",
            "Do place the `classroom` column after the aggregate function instead of before it in the SELECT list, maintaining the same GROUP BY logic. Do keep the `COUNT(*)` aggregate function and `GROUP BY classroom` clause unchanged as they correctly calculate counts per classroom. The amended query now matches RIGHT_SQL's behavior by preserving the same result set with only column ordering differences."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE classroom_id = 1;",
            "SELECT classroom, COUNT(*) FROM list GROUP BY classroom;",
            "SELECT COUNT(*), Classroom FROM list GROUP BY Classroom"
        ],
        "rule_sql": []
    },
    "6185": {
        "db_id": "music_4",
        "question": "Please show the categories of the music festivals with count more than 1.",
        "ground_truth": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1",
        "amends": [
            "Do reference the table as `music_festival` instead of `music_festivals` and use `Category` instead of `category` for the column name. Do remove the alias `count` from the aggregate function instead of keeping it, and ensure the HAVING clause uses `COUNT(*) > 1` directly without referencing an alias. The amended query now correctly identifies duplicate categories in the music_festival table by counting occurrences per category and filtering for those with more than one entry.",
            "Do remove `COUNT(*)` from the SELECT list instead of including it, as the HAVING clause already filters groups by count and the column selection should focus on the grouping category rather than displaying the count values. The amended query now matches RIGHT_SQL's behavior by returning only the category names for groups with more than one record."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, COUNT(*) as count FROM music_festivals GROUP BY category HAVING count > 1",
            "SELECT Category, COUNT(*) FROM music_festival GROUP BY Category HAVING COUNT(*) > 1",
            "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "448": {
        "db_id": "allergy_1",
        "question": "What are all the different food allergies?",
        "ground_truth": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "amends": [
            "Do select `DISTINCT allergy` instead of `*` to return unique allergy values rather than all columns. Do query from `Allergy_type` table instead of `allergies` to access the correct data source. Do filter on `allergytype = \"food\"` instead of `type = 'food'` to use the proper column name and string literal format. Do remove the incorrect table reference and use the appropriate column names and table structure that match the intended schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM allergies WHERE type = 'food';",
            "SELECT DISTINCT Allergy FROM Allergy_Type WHERE AllergyType = 'food'"
        ],
        "rule_sql": []
    },
    "5694": {
        "db_id": "dorm_1",
        "question": "Find the number of distinct gender for dorms.",
        "ground_truth": "SELECT count(DISTINCT gender) FROM dorm",
        "amends": [
            "Do use `count(DISTINCT gender)` instead of `COUNT(*)` to count distinct gender values rather than counting all rows. Do remove `GROUP BY gender` instead of keeping it since the aggregate function now handles the distinct counting without needing grouping. Do reference table `dorm` instead of `dorms` to use the correct table name. The amended query now correctly counts distinct gender values from the dorm table and matches the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM dorms GROUP BY gender;",
            "SELECT COUNT(DISTINCT gender) FROM Dorm;"
        ],
        "rule_sql": []
    },
    "5527": {
        "db_id": "products_gen_characteristics",
        "question": "What are the different names of the product characteristics?",
        "ground_truth": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
        "amends": [
            "Do reference the `characteristic_name` column from the `CHARACTERISTICS` table instead of the `name` column from the `product_characteristics` table. Do use the correct table name `CHARACTERISTICS` instead of the incorrect `product_characteristics` table. The amended query now correctly retrieves distinct characteristic names from the appropriate table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT name FROM product_characteristics;",
            "SELECT DISTINCT characteristic_name FROM Characteristics;"
        ],
        "rule_sql": []
    },
    "6282": {
        "db_id": "city_record",
        "question": "Which three cities have the largest regional population?",
        "ground_truth": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "amends": [
            "Do reference the `city` column instead of `city_name` and use the `regional_population` column for ordering instead of `population`. Do query from the `city` table instead of the `cities` table. The amended query now correctly retrieves the top 3 cities by regional population from the city table.",
            "Do select `city` instead of `City, Regional_Population` to return only the city names instead of both city names and population values. Do maintain the same `ORDER BY regional_population DESC` clause instead of changing the ordering logic. Do preserve the `LIMIT 3` constraint instead of altering the result set size. The amended query now correctly returns only the top 3 cities by regional population rather than returning both city names and population data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM cities ORDER BY population DESC LIMIT 3;",
            "SELECT City, Regional_Population FROM city ORDER BY Regional_Population DESC LIMIT 3;",
            "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "4529": {
        "db_id": "document_management",
        "question": "List all the document names which contains \"CV\".",
        "ground_truth": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
        "amends": [
            "Do specify `document_name` in the SELECT list instead of using `*` to select all columns. Do use `document_name` in the WHERE filter instead of `name` to correctly reference the column containing document names. The amended query now matches RIGHT_SQL's behavior by precisely selecting and filtering on the appropriate document name column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM documents WHERE name LIKE '%CV%'",
            "SELECT document_name FROM Documents WHERE document_name LIKE '%CV%'"
        ],
        "rule_sql": []
    },
    "2431": {
        "db_id": "candidate_poll",
        "question": "What are the names of people who are shorter than average?",
        "ground_truth": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "amends": [
            "Do use the comparison operator `<` instead of `>` in the WHERE clause filter on `height`, changing the condition to select people with height below average instead of above average. The amended query now correctly matches the RIGHT_SQL's behavior of filtering for individuals shorter than the average height."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE height > (SELECT AVG(height) FROM people)",
            "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people)"
        ],
        "rule_sql": []
    },
    "1328": {
        "db_id": "college_2",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "ground_truth": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "amends": [
            "Do reference table `classroom` instead of `rooms` in the FROM clause. Do specify column order as `building, room_number` instead of `room_number, building` in the SELECT list. Do use the correct range `BETWEEN 50 AND 100` instead of the inverted `BETWEEN 100 AND 50` in the WHERE filter to properly capture capacities from 50 to 100. The amended query now correctly selects from the classroom table with the proper capacity range and column ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT room_number, building FROM rooms WHERE capacity BETWEEN 100 AND 50;",
            "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100;"
        ],
        "rule_sql": []
    },
    "3755": {
        "db_id": "program_share",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "ground_truth": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "amends": [
            "Do use `INTERSECT` to find owners with both morning and night broadcasts instead of using `AND` with contradictory conditions on the same column. Do join `program` and `broadcast` tables on `program_id` instead of querying only the `programs` table. Do reference `Time_of_day` column from the `broadcast` table instead of `broadcast_time` from `programs`. Do use proper case-sensitive values \"Morning\" and \"Night\" instead of lowercase 'morning' and 'night'. Do remove the incorrect `DISTINCT` modifier since `INTERSECT` inherently returns distinct results. The amended query now correctly identifies program owners who have broadcasts in both morning and night time slots."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT p.owner \nFROM programs p \nWHERE p.broadcast_time = 'morning' \nAND p.broadcast_time = 'night'",
            "SELECT p.Owner\nFROM program p\nJOIN broadcast b ON p.Program_ID = b.Program_ID\nWHERE b.Time_of_day = 'Morning'\nINTERSECT\nSELECT p.Owner\nFROM program p\nJOIN broadcast b ON p.Program_ID = b.Program_ID\nWHERE b.Time_of_day = 'Night'"
        ],
        "rule_sql": []
    },
    "4790": {
        "db_id": "department_store",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "ground_truth": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "amends": [
            "Do join `staff AS T1` with `Staff_Department_Assignments AS T2` on `T1.staff_id = T2.staff_id` instead of querying `staff` alone. Do filter on `T2.job_title_code = \"Sales Person\"` instead of `title = 'Sales Person'`. Do use `EXCEPT` to exclude staff with `job_title_code = \"Clerical Staff\"` instead of using `AND title != 'Clerical Staff'` which would never match the same row. Do select `T1.staff_name` and `T1.staff_gender` with explicit table aliases instead of `name` and `gender` without qualification. The amended query now correctly identifies sales persons while excluding those who also hold clerical staff positions, matching the RIGHT_SQL's set operation behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, gender FROM staff WHERE title = 'Sales Person' AND title != 'Clerical Staff';",
            "SELECT T1.staff_name, T1.staff_gender\nFROM Staff AS T1\nJOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id\nWHERE T2.job_title_code = 'Sales Person'\nEXCEPT\nSELECT T1.staff_name, T1.staff_gender\nFROM Staff AS T1\nJOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id\nWHERE T2.job_title_code = 'Clerical Staff'"
        ],
        "rule_sql": []
    },
    "2966": {
        "db_id": "sakila_1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "ground_truth": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do add the `film` table as `T1` and join it with `inventory` as `T2` on `T1.film_id = T2.film_id` instead of querying only the `inventory` table. Do select `T1.title` and `T1.film_id` instead of `title` and `film_id` without table qualification. Do use `count(*)` in the `ORDER BY` clause instead of referencing the alias `copy_count`. Do remove the explicit alias `copy_count` from the `COUNT(*)` aggregation instead of keeping it. The amended query now correctly retrieves film titles from the film table while counting inventory copies and matches the RIGHT_SQL's behavior.",
            "Do include only `T1.title` and `T1.film_id` in the SELECT list instead of adding `COUNT(*)` which should only be used in ORDER BY. Do keep the same `JOIN` between `film` and `inventory` on `T1.film_id = T2.film_id` without change. Do maintain the `GROUP BY T1.film_id` grouping. Do use `count(*)` in the `ORDER BY` clause for descending sorting instead of the redundant COUNT(*) in SELECT. Do preserve the `LIMIT 1` to return only the top result. The amended query now correctly returns the film details with the highest inventory count while avoiding the unnecessary aggregation column in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, film_id, COUNT(*) as copy_count \nFROM inventory \nGROUP BY film_id \nORDER BY copy_count DESC \nLIMIT 1;",
            "SELECT T1.title, T1.film_id, COUNT(*) \nFROM film T1 \nJOIN inventory T2 ON T1.film_id = T2.film_id \nGROUP BY T1.film_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
            "SELECT T1.title, T1.film_id\nFROM film AS T1\nJOIN inventory AS T2 ON T1.film_id = T2.film_id\nGROUP BY T1.film_id\nORDER BY COUNT(*) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "3773": {
        "db_id": "e_learning",
        "question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
        "ground_truth": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "amends": [
            "Do select `address_line_1` instead of `address` and use table `Course_Authors_and_Tutors` instead of `authors`. Do use double quotes `\"Cathrine\"` instead of single quotes `'Cathrine'` for the string literal. The amended query now correctly retrieves the address information from the appropriate table with proper string formatting."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM authors WHERE personal_name = 'Cathrine'",
            "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = \"Cathrine\""
        ],
        "rule_sql": []
    },
    "3216": {
        "db_id": "college_1",
        "question": "How many professors have a Ph.D. in each department?",
        "ground_truth": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
        "amends": [
            "Do use `count(*)` without a column alias instead of `COUNT(*)` with the same function but different formatting. Do reference table `professor` instead of `proforssors` and column `prof_high_degree` instead of `degree` for the filter condition. Do group by `dept_code` instead of `department` to match the correct grouping column. Do remove the space after `SELECT` and use consistent lowercase formatting instead of mixed case. The amended query now correctly counts professors with Ph.D. degrees grouped by department code.",
            "Do place `count(*)` before `dept_code` in the SELECT list instead of having `dept_code` first. The amended query now matches RIGHT_SQL's behavior with identical column ordering while maintaining the same logical result."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) FROM professors WHERE degree = 'Ph.D.' GROUP BY department;",
            "SELECT dept_code, count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code",
            "SELECT count(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code"
        ],
        "rule_sql": []
    },
    "6008": {
        "db_id": "game_1",
        "question": "What is the total number of games played?",
        "ground_truth": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "amends": [
            "Do select `sum(gamesplayed)` instead of `COUNT(*)`. Do query from `Sportsinfo` table instead of `games` table. Do remove the `WHERE played = 'yes'` filter instead of keeping it. The amended query now correctly calculates the total games played from the appropriate table and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE played = 'yes';",
            "SELECT SUM(GamesPlayed) FROM SportsInfo;"
        ],
        "rule_sql": []
    },
    "5895": {
        "db_id": "cre_Theme_park",
        "question": "Show the price ranges of hotels with 5 star ratings.",
        "ground_truth": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "amends": [
            "Do select the single column `price_range` instead of the aggregate functions `MIN(price)` and `MAX(price)`. Do reference the table `HOTELS` in uppercase instead of lowercase `hotels`. Do filter on column `star_rating_code` instead of `stars`. Do use double quotes around the literal value `\"5\"` instead of an unquoted numeric value `5`. The amended query now correctly retrieves the pre-calculated price range for 5-star hotels instead of computing min/max aggregates."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(price), MAX(price) FROM hotels WHERE stars = 5;",
            "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\";"
        ],
        "rule_sql": []
    },
    "2484": {
        "db_id": "movie_1",
        "question": "Find the titles of all movies not reviewed by Chris Jackson.",
        "ground_truth": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
        "amends": [
            "Do use `DISTINCT title` instead of just `title` to eliminate duplicates. Do change the data source to `Movie` instead of `movies` and add an `EXCEPT` operation instead of a simple `WHERE` filter. Do add joins between `Rating`, `Movie`, and `Reviewer` tables instead of querying only one table. Do filter by `T3.name = 'Chris Jackson'` in the `EXCEPT` clause instead of using `reviewer != 'Chris Jackson'` which incorrectly assumes the reviewer name is stored in the movies table. Do properly correlate ratings with movies and reviewers through `T1.mID = T2.mID` and `T1.rID = T3.rID` joins instead of attempting to filter on a non-existent column. The amended query now correctly identifies movies that have never been reviewed by Chris Jackson by excluding those he has rated, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE reviewer != 'Chris Jackson';",
            "SELECT DISTINCT title FROM Movie\nEXCEPT\nSELECT DISTINCT T2.title\nFROM Rating T1\nJOIN Movie T2 ON T1.mID = T2.mID\nJOIN Reviewer T3 ON T1.rID = T3.rID\nWHERE T3.name = 'Chris Jackson'"
        ],
        "rule_sql": []
    },
    "2305": {
        "db_id": "perpetrator",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "ground_truth": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "amends": [
            "Do select the `Injured` column directly instead of using `COUNT(injured)` aggregation. Do reference the `perpetrator` table instead of the `perpetrators` table. Do maintain the `ORDER BY Injured ASC` clause instead of changing it. The amended query now correctly returns individual injured values sorted in ascending order rather than counting them."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(injured) FROM perpetrators ORDER BY injured ASC;",
            "SELECT Injured FROM perpetrator ORDER BY Injured ASC;"
        ],
        "rule_sql": []
    },
    "6789": {
        "db_id": "activity_1",
        "question": "Show the ids for all the students who participate in an activity and are under 20.",
        "ground_truth": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "amends": [
            "Do select `StuID` from `Participates_in` and intersect with `StuID` from `Student` instead of selecting `student_id` from `students` only. Do use `INTERSECT` to find students who participate in activities and are under 20 instead of filtering for `activity_id IS NOT NULL` and age. Do query from `Student` table instead of `students` and use `StuID` column name instead of `student_id`. Do remove the `activity_id IS NOT NULL` filter entirely since the intersection with `Participates_in` inherently ensures participation. The amended query now correctly identifies students under 20 who participate in activities by using set intersection rather than nullable column checking."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM students WHERE age < 20 AND activity_id IS NOT NULL;",
            "SELECT StuID FROM Participates_in\nINTERSECT\nSELECT StuID FROM Student WHERE Age < 20"
        ],
        "rule_sql": []
    },
    "5084": {
        "db_id": "device",
        "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "ground_truth": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "amends": [
            "Do use `INTERSECT` to find locations that satisfy both conditions instead of using `AND` which creates an impossible condition. Do query the `shop` table instead of `shops` and use correct column name `Open_Year` instead of `open_year`. Do split into two separate queries with `INTERSECT` to find locations where `Open_Year > 2012` and `Open_Year < 2008` instead of trying to combine them with `AND` which would never return results. The amended query now correctly identifies locations that opened both after 2012 and before 2008 using set intersection logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM shops WHERE open_year > 2012 AND open_year < 2008;",
            "SELECT Location FROM shop WHERE Open_Year > 2012\nINTERSECT\nSELECT Location FROM shop WHERE Open_Year < 2008"
        ],
        "rule_sql": []
    },
    "6774": {
        "db_id": "activity_1",
        "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
        "ground_truth": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "amends": [
            "Do use `INTERSECT` between two separate queries instead of joining multiple tables with `DISTINCT`. Do select `FacID` from `Faculty_participates_in` instead of selecting `faculty_id` from `faculty` joined with `activity_participation`. Do select `advisor` from `Student` instead of selecting from `faculty` joined with `student_advising`. Do remove the `WHERE` clause checking for non-null IDs instead of keeping those filters, as the INTERSECT operation inherently handles the intersection logic. Do eliminate the table aliases and explicit join conditions instead of maintaining them, since the INTERSECT approach uses simpler table references. The amended query now correctly identifies faculty who appear in both participation and advising contexts through set intersection rather than complex joins."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT f.faculty_id\nFROM faculty f\nJOIN activity_participation ap ON f.faculty_id = ap.faculty_id\nJOIN student_advising sa ON f.faculty_id = sa.faculty_id\nWHERE ap.activity_id IS NOT NULL AND sa.student_id IS NOT NULL;",
            "SELECT FacID FROM Faculty_Participates_in\nINTERSECT\nSELECT Advisor FROM Student"
        ],
        "rule_sql": []
    },
    "6981": {
        "db_id": "culture_company",
        "question": "Which publishers did not publish a book in 1989?",
        "ground_truth": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989",
        "amends": [
            "Do select `publisher` from `book_club` instead of `name` from `publishers`. Do use an `EXCEPT` set operation to exclude publishers from 1989 instead of filtering for `year_published = 1989`. Do reference the `YEAR` column instead of `year_published`. Do query the `book_club` table instead of the `publishers` table. The amended query now correctly identifies publishers who have never published in 1989 using set difference logic instead of simple filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM publishers WHERE year_published = 1989;",
            "SELECT Publisher FROM book_club EXCEPT SELECT Publisher FROM book_club WHERE Year = 1989"
        ],
        "rule_sql": []
    },
    "2619": {
        "db_id": "inn_1",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "ground_truth": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
        "amends": [
            "Do use column name `decor` instead of `decor_type` in both SELECT list and GROUP BY clause. Do use table name `Rooms` instead of `rooms` as the FROM source. Do use filter condition `bedType = \"King\"` instead of `bed_type = 'king'` in the WHERE clause. The amended query now correctly references the schema elements and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT decor_type, COUNT(*) FROM rooms WHERE bed_type = 'king' GROUP BY decor_type;",
            "SELECT decor, COUNT(*) AS room_count FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
        ],
        "rule_sql": []
    },
    "349": {
        "db_id": "flight_1",
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "ground_truth": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "amends": [
            "Do use `BETWEEN 1000 AND 5000` instead of `distance >= 5000 AND distance <= 1000` to correctly filter for distances between 1000 and 5000, fixing the inverted range logic. Do reference table `Aircraft` instead of `aircrafts` to match the correct table name. The amended query now correctly counts aircraft with distances between 1000 and 5000, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM aircrafts WHERE distance >= 5000 AND distance <= 1000;",
            "SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000;"
        ],
        "rule_sql": []
    },
    "5690": {
        "db_id": "dorm_1",
        "question": "Find the number of dorms that have some amenity.",
        "ground_truth": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "amends": [
            "Do count `DISTINCT dormid` instead of counting all rows with `COUNT(*)`. Do query from `has_amenity` table instead of from `dorms` table. Do remove the `WHERE amenity IS NULL` filter instead of keeping it. The amended query now correctly counts distinct dorm IDs from the has_amenity table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM dorms WHERE amenity IS NULL;",
            "SELECT COUNT(DISTINCT dormid) FROM has_amenity"
        ],
        "rule_sql": []
    },
    "2600": {
        "db_id": "inn_1",
        "question": "What kind of decor has the least number of reservations?",
        "ground_truth": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
        "amends": [
            "Do join `Rooms` as `T2` on `T1.Room = T2.RoomId` instead of querying only the `reservations` table. Do select `T2.decor` instead of both `decor` and `COUNT(*)`. Do group by `T2.decor` instead of just `decor`. Do order by `count(T2.decor)` in ascending order instead of `reservation_count` in descending order. The amended query now correctly joins the reservations with room details to find the decor with the fewest reservations, matching the RIGHT_SQL's behavior.",
            "Do remove `COUNT(*) AS reservation_count` from the SELECT list instead of including it. Do change the ORDER BY clause to use `count(T2.decor)` instead of `COUNT(*)`. Do keep the same FROM clause with `JOIN Rooms T2 ON T1.Room = T2.RoomId` and maintain the same GROUP BY on `T2.decor` and LIMIT 1. The amended query now correctly orders by the count of decorations rather than all rows, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT decor, COUNT(*) as reservation_count FROM reservations GROUP BY decor ORDER BY reservation_count DESC LIMIT 1;",
            "SELECT T2.decor, COUNT(*) AS reservation_count\nFROM Reservations T1\nJOIN Rooms T2 ON T1.Room = T2.RoomId\nGROUP BY T2.decor\nORDER BY COUNT(*) ASC\nLIMIT 1;",
            "SELECT T2.decor FROM Reservations T1 JOIN Rooms T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY COUNT(T2.decor) ASC LIMIT 1"
        ],
        "rule_sql": []
    },
    "672": {
        "db_id": "customers_card_transactions",
        "question": "What are the other account details for the account with the name 338?",
        "ground_truth": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "amends": [
            "Do select `other_account_details` instead of `*` for all columns. Do reference table `Accounts` instead of `accounts` with proper case. Do filter on `account_name = \"338\"` instead of `account_id = 338` to match the correct identifier column and string value format. The amended query now correctly retrieves specific account details by name rather than using a numeric ID filter on the wrong column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM accounts WHERE account_id = 338;",
            "SELECT other_account_details FROM Accounts WHERE account_name = '338';"
        ],
        "rule_sql": []
    },
    "4755": {
        "db_id": "department_store",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "ground_truth": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "amends": [
            "Do select `staff_id` instead of `s.id` from the main table. Do use table name `Staff_Department_Assignments` instead of `staff_department_assignment` with alias. Do use column `date_assigned_to` instead of `assignment_date` for the date comparison. Do change the subquery to use `max(date_assigned_to)` instead of `MIN(assignment_date)` and filter on `job_title_code = 'Clerical Staff'` instead of `department = 'Clerical'`. Do remove the `JOIN` operation and `ORDER BY` with `LIMIT 1` instead of keeping them, as the right query returns all matching staff_ids rather than just the earliest one. The amended query now correctly finds staff assigned before the most recent clerical staff assignment rather than before the earliest clerical assignment."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.id \nFROM staff s\nJOIN staff_department_assignment sda ON s.id = sda.staff_id\nWHERE sda.assignment_date < (SELECT MIN(assignment_date) FROM staff_department_assignment WHERE department = 'Clerical')\nORDER BY sda.assignment_date ASC\nLIMIT 1;",
            "SELECT staff_id \nFROM Staff_Department_Assignments \nWHERE date_assigned_to < (\n    SELECT MAX(date_assigned_to) \n    FROM Staff_Department_Assignments \n    WHERE job_title_code = 'Clerical Staff'\n)"
        ],
        "rule_sql": []
    },
    "4736": {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "ground_truth": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "amends": [
            "Do use `customer_name` and `customer_address` instead of `name` and `address`. Do join `customer_orders` instead of `orders`. Do use `customer_id` for the join condition instead of `id`. Do filter on `order_status_code` instead of `status`. Do use INTERSECT with separate queries for `\"New\"` and `\"Pending\"` statuses instead of AND conditions that would never match. Do use double quotes around string literals instead of single quotes. Do add table aliases `T1` and `T2` instead of simple aliases. The amended query now correctly finds customers with both New and Pending orders using INTERSECT instead of the impossible AND condition."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name, c.address FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.status = 'New' AND o.status = 'Pending';",
            "SELECT T1.customer_name, T1.customer_address\nFROM Customers T1\nJOIN Customer_Orders T2 ON T1.customer_id = T2.customer_id\nWHERE T2.order_status_code = \"New\"\nINTERSECT\nSELECT T1.customer_name, T1.customer_address\nFROM Customers T1\nJOIN Customer_Orders T2 ON T1.customer_id = T2.customer_id\nWHERE T2.order_status_code = \"Pending\""
        ],
        "rule_sql": []
    },
    "5254": {
        "db_id": "music_2",
        "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?",
        "ground_truth": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `TYPE` instead of `v.vocal_type` and omit the `COUNT(*) as count` column. Do join `vocals AS T1` with `band AS T2` on `T1.bandmate = T2.id` instead of joining `band_mates bm` with `vocals v` on `bm.vocal_id = v.id`. Do filter on `firstname = \"Solveig\"` instead of `bm.first_name = 'Solveig'`. Do group by `TYPE` instead of `v.vocal_type`. Do order by `count(*) DESC` instead of `count DESC`. The amended query now correctly retrieves vocal types from the band relationship rather than the band_mates table and properly aggregates counts for ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT v.vocal_type, COUNT(*) as count\nFROM band_mates bm\nJOIN vocals v ON bm.vocal_id = v.id\nWHERE bm.first_name = 'Solveig'\nGROUP BY v.vocal_type\nORDER BY count DESC\nLIMIT 1;",
            "SELECT v.Type\nFROM Vocals v\nJOIN Band b ON v.Bandmate = b.Id\nWHERE b.Firstname = 'Solveig'\nGROUP BY v.Type\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3740": {
        "db_id": "program_share",
        "question": "find the name of the program that was launched most recently.",
        "ground_truth": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "amends": [
            "Do reference table `program` instead of `programs` in the FROM clause. Do order by column `launch` instead of `launch_date` in the ORDER BY clause. Do use descending order with `DESC` instead of ascending order with `ASC` for the sort direction. The amended query now correctly retrieves the program name sorted by launch date in descending order from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM programs ORDER BY launch_date ASC LIMIT 1;",
            "SELECT Name FROM program ORDER BY Launch DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1734": {
        "db_id": "riding_club",
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "ground_truth": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
        "amends": [
            "Do specify table aliases `T1` and `T2` instead of omitting them. Do reference `T1.club_id` and `T1.club_name` instead of just `club_id` and `name`. Do use `JOIN coach AS T2 ON T1.club_id = T2.club_id` instead of querying only the `coaches` table without proper joins. Do remove the `name` column from GROUP BY instead of including it, as the count should be grouped by club only. Do use `club AS T1` and `coach AS T2` instead of the ambiguous table references. The amended query now correctly joins club and coach tables to count coaches per club while maintaining referential integrity."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT club_id, name, COUNT(*) as coach_count FROM coaches GROUP BY club_id, name",
            "SELECT T1.Club_ID, T1.Club_name, COUNT(T2.Coach_ID) AS Number_of_Coaches\nFROM club AS T1\nJOIN coach AS T2 ON T1.Club_ID = T2.Club_ID\nGROUP BY T1.Club_ID, T1.Club_name"
        ],
        "rule_sql": []
    },
    "4115": {
        "db_id": "film_rank",
        "question": "What are the different film Directors?",
        "ground_truth": "SELECT DISTINCT Director FROM film",
        "amends": [
            "Do specify `Director` column instead of selecting all columns with `*`. Do use `DISTINCT` to return unique directors instead of returning duplicate rows. Do reference the correct table name `film` instead of the incorrect `films`. The amended query now correctly returns only unique director names from the film table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM films;",
            "SELECT DISTINCT Director FROM film;"
        ],
        "rule_sql": []
    },
    "4913": {
        "db_id": "store_product",
        "question": "What is the total number of residents for the districts with the 3 largest areas?",
        "ground_truth": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
        "amends": [
            "Do use the table name `district` instead of `districts` and reference the column `city_population` instead of `residents` in the SELECT clause. Do reference `city_area` instead of `area` in the ORDER BY clause. Do use lowercase `sum` instead of uppercase `SUM` for the aggregate function. The amended query now correctly calculates the sum of city population from the district table ordered by city area in descending order with a limit of 3 results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(residents) FROM districts ORDER BY area DESC LIMIT 3;",
            "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"
        ],
        "rule_sql": []
    },
    "5412": {
        "db_id": "shop_membership",
        "question": "Show the city and the number of branches opened before 2010 for each city.",
        "ground_truth": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city",
        "amends": [
            "Do reference table `branch` instead of `branches` in the FROM clause. Do use filter condition `open_year < 2010` instead of `opened_year > 2010` to capture branches opened before 2010 rather than after 2010. Do remove the alias `branch_count` from the count aggregation instead of keeping it. The amended query now correctly counts branches by city for those opened before 2010, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as branch_count FROM branches WHERE opened_year > 2010 GROUP BY city;",
            "SELECT City, COUNT(*) FROM branch WHERE Open_year < '2010' GROUP BY City;"
        ],
        "rule_sql": []
    },
    "1521": {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "ground_truth": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "amends": [
            "Do select `t3.customer_details` instead of `customer_name` from a different table. Do use a three-table join structure with `claim_headers AS t1`, `policies AS t2`, and `customers AS t3` instead of querying only the `customers` table. Do add join conditions `ON t1.policy_id = t2.policy_id` and `ON t2.customer_id = t3.customer_id` instead of no joins. Do add a WHERE filter comparing `t1.amount_piad` to a subquery `(SELECT min(amount_piad) FROM claim_headers)` instead of ordering by `payment_amount ASC`. Do remove the ORDER BY and LIMIT clauses instead of keeping them, as the subquery approach finds the exact minimum value. The amended query now correctly retrieves customer details for claims with the minimum payment amount instead of just the first customer by payment order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers ORDER BY payment_amount ASC LIMIT 1;",
            "SELECT t3.Customer_Details \nFROM claim_headers AS t1\nJOIN policies AS t2 ON t1.Policy_ID = t2.Policy_ID\nJOIN customers AS t3 ON t2.Customer_ID = t3.Customer_ID\nWHERE t1.Amount_Piad = (SELECT MIN(Amount_Piad) FROM claim_headers)"
        ],
        "rule_sql": []
    },
    "355": {
        "db_id": "flight_1",
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "ground_truth": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "amends": [
            "Do select `aid` instead of `id` as the column identifier. Do order by `distance DESC` instead of `distance ASC` to sort in descending order rather than ascending. The amended query now correctly retrieves the aircraft with the maximum distance rather than the minimum distance, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, name FROM aircraft ORDER BY distance ASC LIMIT 1;",
            "SELECT aid, name FROM aircraft ORDER BY distance DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4111": {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "ground_truth": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "amends": [
            "Do select `name` instead of `company_name`, `COUNT(*) as sales_count`, and `SUM(profit) as total_profit`. Do use `FROM company` instead of `FROM sales`. Do remove the `WHERE sales_count > 200` filter instead of keeping it, as the column doesn't exist in the selection. Do add `WHERE Sales_in_Billion > 200` instead of omitting it. Do change the ORDER BY to `Sales_in_Billion, Profits_in_Billion DESC` instead of `sales_count DESC, total_profit DESC`, using actual column names rather than aliases. Do remove the aggregation functions and grouping requirements instead of including them, as the query now operates on individual company records. The amended query now correctly filters companies based on sales exceeding 200 billion and orders them appropriately, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, COUNT(*) as sales_count, SUM(profit) as total_profit\nFROM sales\nWHERE sales_count > 200\nORDER BY sales_count DESC, total_profit DESC;",
            "SELECT Name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion DESC, Profits_in_Billion DESC"
        ],
        "rule_sql": []
    },
    "202": {
        "db_id": "bike_1",
        "question": "What are the days that had the smallest temperature range, and what was that range?",
        "ground_truth": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "amends": [
            "Do select `max_temperature_f - min_temperature_f` instead of calculating `MAX(temperature) - MIN(temperature)` and aliasing it as `range`. Do remove the `GROUP BY date` clause instead of grouping by date. Do order by `max_temperature_f - min_temperature_f` instead of ordering by the aliased `range`. Do change the limit to `1` instead of `5`. The amended query now correctly calculates the temperature range using the proper column names and returns only the single record with the smallest temperature range."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date, MAX(temperature) - MIN(temperature) AS range FROM weather GROUP BY date ORDER BY range ASC LIMIT 5;",
            "SELECT date, (max_temperature_f - min_temperature_f) AS temperature_range FROM weather ORDER BY temperature_range ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "742": {
        "db_id": "customers_card_transactions",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "ground_truth": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "amends": [
            "Do reference the `Financial_transactions` table instead of the `transactions` table. Do remove the `transaction_count` alias from the count aggregation instead of keeping it. The amended query now correctly references the appropriate financial data source and uses standard aggregation syntax without unnecessary aliasing."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT transaction_type, COUNT(*) as transaction_count FROM transactions GROUP BY transaction_type",
            "SELECT transaction_type, COUNT(*) FROM Financial_Transactions GROUP BY transaction_type;"
        ],
        "rule_sql": []
    },
    "3213": {
        "db_id": "college_1",
        "question": "Which school has the smallest amount of professors?",
        "ground_truth": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "amends": [
            "Do select `school_code` instead of `school` and remove the `professor_count` alias instead of keeping it. Do join `department` and `professor` tables on `dept_code` instead of querying only the `professors` table. Do group by `school_code` instead of `school`. Do order by `count(*)` without descending instead of ordering by `professor_count DESC`. The amended query now correctly identifies schools by their code and counts professors through proper table relationships, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school, COUNT(*) as professor_count FROM professors GROUP BY school ORDER BY professor_count DESC LIMIT 1;",
            "SELECT d.SCHOOL_CODE\nFROM DEPARTMENT d\nJOIN PROFESSOR p ON d.DEPT_CODE = p.DEPT_CODE\nGROUP BY d.SCHOOL_CODE\nORDER BY COUNT(*) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2623": {
        "db_id": "inn_1",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "ground_truth": "SELECT roomName FROM Rooms ORDER BY basePrice;",
        "amends": [
            "Do reference the column as `roomName` instead of `room_name` to match the correct column name. Do order by `basePrice` instead of `price` to use the appropriate sorting column. Do reference the table as `Rooms` instead of `rooms` to match the correct table name capitalization. The amended query now correctly selects and orders room data using the proper schema elements."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT room_name FROM rooms ORDER BY price DESC;",
            "SELECT roomName FROM Rooms ORDER BY basePrice;"
        ],
        "rule_sql": []
    },
    "3992": {
        "db_id": "hospital_1",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "ground_truth": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "amends": [
            "Do use `patient` as the table name instead of `patients`. Do add a subquery with `Prescribes` and `Medication` tables joined on `T1.Medication = T2.Code` instead of directly filtering on a medication column. Do filter with `T2.name = 'Procrastin-X'` in the subquery instead of `medication = 'Procrastin-X'` in the main WHERE clause. Do use `SSN NOT IN` to exclude patients who have been prescribed the medication instead of counting all patients with that medication. The amended query now correctly counts patients who have never been prescribed Procrastin-X, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE medication = 'Procrastin-X';",
            "SELECT COUNT(*) \nFROM Patient \nWHERE SSN NOT IN (\n    SELECT DISTINCT Patient \n    FROM Prescribes \n    JOIN Medication ON Prescribes.Medication = Medication.Code \n    WHERE Medication.Name = 'Procrastin-X'\n)"
        ],
        "rule_sql": []
    },
    "3550": {
        "db_id": "music_1",
        "question": "How many songs, on average, are sung by a female artist?",
        "ground_truth": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of `s` and `a`. Do reference `song` and `artist` tables instead of `songs` and `artists`. Do join on `T1.artist_name = T2.artist_name` instead of `s.artist_id = a.artist_id`. Do filter on `T1.gender = \"Female\"` instead of `a.gender = 'Male'`. Do calculate `avg(T2.rating)` instead of `AVG(song_count)` from a subquery. Do remove the subquery and GROUP BY clause instead of keeping them. Do use double quotes for string literals instead of single quotes. The amended query now correctly calculates the average rating of songs by female artists using a direct join approach.",
            "Do use `artist AS T1` as the primary table instead of `song T1`, and join with `song AS T2` instead of `artist T2` to properly establish the table relationships. Do apply the gender filter on `T1.gender` instead of `T2.gender` since the artist table is now correctly positioned as T1. Do maintain the same aggregate function `avg(T2.rating)` instead of `AVG(T2.rating)` with only case differences being cosmetic. The amended query now correctly calculates average ratings for female artists by properly joining artist to song tables and applying the filter on the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(song_count) FROM (SELECT COUNT(*) as song_count FROM songs s JOIN artists a ON s.artist_id = a.artist_id WHERE a.gender = 'Male' GROUP BY a.artist_id);",
            "SELECT AVG(T2.rating) FROM song T1 JOIN artist T2 ON T1.artist_name = T2.artist_name WHERE T2.gender = \"Female\"",
            "SELECT AVG(T2.rating) \nFROM artist AS T1 \nJOIN song AS T2 ON T1.artist_name = T2.artist_name \nWHERE T1.gender = \"Female\""
        ],
        "rule_sql": []
    },
    "2733": {
        "db_id": "storm_record",
        "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
        "ground_truth": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "amends": [
            "Do use `INTERSECT` to find storms affecting both regions instead of joining the same table multiple times which incorrectly returns storms that affect either region. Do reference `affected_region` and `region` tables instead of `storm_regions` and `regions`. Do join on `region_id` and `storm_id` columns instead of `id`. Do filter with separate `WHERE` clauses for each region name in the intersected queries instead of a single `WHERE` with both conditions. Do select from `storm` table with proper join conditions instead of directly from `storms`. Do use correct column names `Region_name` and `Name` instead of `name`. The amended query now correctly identifies storms that affected both Afghanistan and Albania using set intersection logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name \nFROM storms s\nJOIN storm_regions sr1 ON s.id = sr1.storm_id\nJOIN regions r1 ON sr1.region_id = r1.id\nJOIN storm_regions sr2 ON s.id = sr2.storm_id\nJOIN regions r2 ON sr2.region_id = r2.id\nWHERE r1.name = 'Afghanistan' AND r2.name = 'Albania';",
            "SELECT s.Name\nFROM storm s\nWHERE s.Storm_ID IN (\n    SELECT ar.Storm_ID\n    FROM affected_region ar\n    JOIN region r ON ar.Region_id = r.Region_id\n    WHERE r.Region_name = 'Afghanistan'\n    INTERSECT\n    SELECT ar.Storm_ID\n    FROM affected_region ar\n    JOIN region r ON ar.Region_id = r.Region_id\n    WHERE r.Region_name = 'Albania'\n)"
        ],
        "rule_sql": []
    },
    "4715": {
        "db_id": "department_store",
        "question": "Return the address of customer 10.",
        "ground_truth": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "amends": [
            "Do select `T1.address_details` instead of `name` from the SELECT list. Do add `addresses AS T1` and `customer_addresses AS T2` as FROM sources instead of just `customers`. Do add `JOIN` with `ON T1.address_id = T2.address_id` instead of having no join condition. Do change the WHERE filter to `T2.customer_id = 10` instead of `customer_id = 10` to reference the correct table and column. The amended query now correctly retrieves address details from the addresses table through a proper join with customer_addresses, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE customer_id = 10;",
            "SELECT T1.address_details \nFROM addresses AS T1 \nJOIN customer_addresses AS T2 ON T1.address_id = T2.address_id \nWHERE T2.customer_id = 10"
        ],
        "rule_sql": []
    },
    "1076": {
        "db_id": "match_season",
        "question": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "ground_truth": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "amends": [
            "Do join `country AS T1` and `match_season AS T2` with `ON T1.Country_id = T2.Country` instead of querying only `players` table. Do filter on `T1.Capital = \"Dublin\"` instead of `country = 'Dublin'`. Do select `T2.Position` from the joined tables instead of `position` from a single table. The amended query now correctly retrieves positions from match_season data filtered by capital city rather than incorrectly assuming country names match capital names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT position FROM players WHERE country = 'Dublin';",
            "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = 'Dublin'"
        ],
        "rule_sql": []
    },
    "1344": {
        "db_id": "college_2",
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "ground_truth": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "amends": [
            "Do specify table aliases `T1.title`, `T1.credits`, and `T1.dept_name` instead of unqualified column names. Do join `prereq AS T2` on `T1.course_id = T2.course_id` instead of querying only the `courses` table. Do use `GROUP BY T2.course_id` with `HAVING count(*) > 1` instead of filtering `prerequisites > 1` in the WHERE clause. Do reference the correct column name `credits` instead of `credit`. The amended query now correctly identifies courses with multiple prerequisites by counting related records in the prereq table instead of relying on a direct numeric comparison."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, credit, department_name \nFROM courses \nWHERE prerequisites > 1",
            "SELECT T1.title, T1.credits, T1.dept_name\nFROM course AS T1\nJOIN prereq AS T2 ON T1.course_id = T2.course_id\nGROUP BY T2.course_id\nHAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "3900": {
        "db_id": "hospital_1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "ground_truth": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "amends": [
            "Do select `head` instead of `employee_id` and use `departmentID` for grouping instead of `department_id`. Do query from `department` table instead of `employees` table and remove the WHERE clause with subquery and `is_head` filter. Do use `GROUP BY departmentID` with `count(departmentID)` for ordering instead of the subquery that grouped by `department_id` and ordered by `COUNT(*)`. Do remove the subquery correlation and the `is_head = 1` condition entirely instead of keeping them. The amended query now correctly identifies the department head by grouping departments and counting employees directly, matching the RIGHT_SQL's behavior.",
            "Do select `head` instead of `d.Head` and remove the table alias. Do remove the `JOIN` with `Affiliated_With` table and its `WHERE` filter on `PrimaryAffiliation` instead of keeping them. Do change the aggregate function to `count(departmentID)` instead of `COUNT(aw.Physician)` while maintaining the `GROUP BY departmentID`. Do keep the `ORDER BY` with ascending sort and `LIMIT 1` unchanged. The amended query now correctly retrieves the department head by counting department occurrences directly instead of through physician affiliations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT employee_id FROM employees WHERE department_id = (SELECT department_id FROM employees GROUP BY department_id ORDER BY COUNT(*) ASC LIMIT 1) AND is_head = 1;",
            "SELECT d.Head \nFROM Department d\nJOIN Affiliated_With aw ON d.DepartmentID = aw.Department\nWHERE aw.PrimaryAffiliation = 1\nGROUP BY d.DepartmentID\nORDER BY COUNT(aw.Physician) ASC\nLIMIT 1;",
            "SELECT head FROM Department GROUP BY DepartmentID ORDER BY count(DepartmentID) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2124": {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many draft copies does the document with id 2 have?",
        "ground_truth": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM draft_copies WHERE document_id = 2;"
        ],
        "rule_sql": []
    },
    "996": {
        "db_id": "university_basketball",
        "question": "Return the average enrollment of universities founded before 1850.",
        "ground_truth": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
        "amends": [
            "Do `avg(enrollment)` instead of `AVG(enrollment)` for lowercase function consistency. Do `university` instead of `universities` for correct table name. Do `founded < 1850` instead of `founded_year > 1850` to filter for universities founded before 1850 rather than after 1850. The amended query now correctly calculates average enrollment for universities established prior to 1850, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(enrollment) FROM universities WHERE founded_year > 1850;",
            "SELECT avg(Enrollment) FROM university WHERE Founded < 1850"
        ],
        "rule_sql": []
    },
    "4218": {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the different location codes for documents?",
        "ground_truth": "SELECT DISTINCT location_code FROM Document_locations",
        "amends": [
            "Do select `location_code` instead of `location` and use `DISTINCT` instead of omitting it. Do query from `Document_locations` table instead of `documents` table. The amended query now correctly retrieves unique location codes from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM documents;",
            "SELECT DISTINCT Location_Code FROM Document_Locations;"
        ],
        "rule_sql": []
    },
    "5757": {
        "db_id": "dorm_1",
        "question": "What are the first names of all students who live in the dorm with the most amenities?",
        "ground_truth": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "amends": [
            "Do select `fname` from `student` instead of `first_name` from `students`. Do join `lives_in` on `stuid` instead of querying `dorm_id` directly. Do use `WHERE dormid IN` with a subquery instead of `WHERE dorm_id =` with a scalar subquery. Do add proper joins between `dorm`, `has_amenity`, and `dorm_amenity` tables instead of incorrectly ordering by `COUNT(amenities)` without proper grouping. Do group by `dormid` and order by `count(*)` instead of ordering by `COUNT(amenities)` without grouping. The amended query now correctly identifies students living in the dorm with the most amenities by properly joining the relevant tables and using appropriate aggregation.",
            "Do use `T1.fname` instead of `s.Fname` for the column alias. Do add table aliases `T1` for `student` and `T2` for `lives_in` instead of `s` and `li`. Do change the subquery to join `dorm AS T3`, `has_amenity AS T4`, and `dorm_amenity AS T5` instead of only querying `Has_amenity`. Do add join conditions `T3.dormid = T4.dormid` and `T4.amenid = T5.amenid` instead of omitting them. Do use `ORDER BY count(*) DESC LIMIT 1` instead of the nested subquery with `MAX(amenity_count)` and `HAVING COUNT(*) =`. The amended query now correctly finds students living in dorms with the highest number of amenities by joining the necessary tables and using a simpler limit approach instead of complex nested aggregation.",
            "Do use lowercase `fname` instead of uppercase `Fname` in the SELECT list. Do remove the alias `T2` from the subquery's SELECT list and use `T3.dormid` instead of `T2.dormid` to correctly reference the grouped column. Do fix the join condition in the main query to use `T1.stuid = T2.stuid` with proper spacing instead of `T1.StuID = T2.stuid` with inconsistent case. The amended query now correctly identifies students living in dorms with the most amenities by properly correlating the subquery results with the main query through consistent column references and case sensitivity.",
            "Do use `T1.stuid` instead of `T1.StuID` in the join condition to match the correct column name. Do reference `T2.dormid` instead of `T3.dormid` in the subquery's SELECT list to return the correct dorm identifier. Do use lowercase `count(*)` instead of uppercase `COUNT(*)` for consistency with the right SQL. Do remove the alias `AS T2` from the subquery's FROM clause since T2 is already defined in the outer query scope. The amended query now correctly identifies students living in dorms with the most amenities by properly correlating the subquery results with the outer query through consistent column references and case-sensitive identifiers.",
            "Do add `JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid` in the subquery instead of omitting it, which properly links the amenity relationship through the amenity table rather than just counting raw has_amenity records. The amended query now correctly identifies the dorm with the most distinct amenities by joining through the amenity table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM students WHERE dorm_id = (SELECT dorm_id FROM dorms ORDER BY COUNT(amenities) DESC LIMIT 1);",
            "SELECT s.Fname \nFROM Student s\nJOIN Lives_in li ON s.StuID = li.stuid\nWHERE li.dormid IN (\n    SELECT dormid\n    FROM Has_amenity\n    GROUP BY dormid\n    HAVING COUNT(*) = (\n        SELECT MAX(amenity_count)\n        FROM (\n            SELECT dormid, COUNT(*) as amenity_count\n            FROM Has_amenity\n            GROUP BY dormid\n        )\n    )\n)",
            "SELECT T1.Fname\nFROM Student AS T1\nJOIN Lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM Dorm AS T3\n    JOIN Has_amenity AS T4 ON T3.dormid = T4.dormid\n    JOIN Dorm_amenity AS T5 ON T4.amenid = T5.amenid\n    GROUP BY T3.dormid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
            "SELECT T1.fname\nFROM student AS T1\nJOIN lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM dorm AS T3\n    JOIN has_amenity AS T4 ON T3.dormid = T4.dormid\n    JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid\n    GROUP BY T3.dormid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
            "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
            "SELECT T1.fname\nFROM student AS T1\nJOIN lives_in AS T2 ON T1.StuID = T2.stuid\nWHERE T2.dormid IN (\n    SELECT T3.dormid\n    FROM dorm AS T3\n    JOIN has_amenity AS T4 ON T3.dormid = T4.dormid\n    JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid\n    GROUP BY T3.dormid\n    ORDER BY count(*) DESC\n    LIMIT 1\n)"
        ],
        "rule_sql": []
    },
    "1322": {
        "db_id": "college_2",
        "question": "Find the buildings which have rooms with capacity more than 50.",
        "ground_truth": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "amends": [
            "Do select `building` instead of `building_name` and use `DISTINCT` instead of omitting it. Do query from `classroom` table instead of `buildings` table. Do keep the filter `capacity > 50` unchanged. The amended query now correctly returns unique building names from the classroom table where capacity exceeds 50, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT building_name FROM buildings WHERE capacity > 50;",
            "SELECT DISTINCT building FROM classroom WHERE capacity > 50;"
        ],
        "rule_sql": []
    },
    "3742": {
        "db_id": "program_share",
        "question": "find the total percentage share of all channels owned by CCTV.",
        "ground_truth": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
        "amends": [
            "Do use the correct table name `channel` instead of `channels` and the correct column name `Share_in_percent` instead of `share_percentage` in the SELECT clause. Do use the correct column name `OWNER` instead of `owner` in the WHERE filter while maintaining the same filter condition `= 'CCTV'`. The amended query now correctly references the proper table and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(share_percentage) FROM channels WHERE owner = 'CCTV';",
            "SELECT SUM(Share_in_percent) FROM channel WHERE Owner = 'CCTV';"
        ],
        "rule_sql": []
    },
    "4009": {
        "db_id": "ship_mission",
        "question": "What is the ship with the largest amount of tonnage called?",
        "ground_truth": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
        "amends": [
            "Do reference the `Name` column instead of `name` and use the `ship` table instead of `ships`. Do order by `Tonnage DESC` instead of `tonnage ASC` to get the highest tonnage ship rather than the lowest. The amended query now correctly retrieves the ship with the maximum tonnage from the ship table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM ships ORDER BY tonnage ASC LIMIT 1;",
            "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "585": {
        "db_id": "store_1",
        "question": "How many customers does Steve Johnson support?",
        "ground_truth": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
        "amends": [
            "Do use an explicit `JOIN` between `employees` and `customers` on `support_rep_id = id` instead of a subquery with `employee_id`. Do reference the joined table `T1` in the `WHERE` clause for `first_name` and `last_name` filters instead of using a correlated subquery. Do use table aliases `T1` and `T2` for clarity instead of no aliases. The amended query now correctly joins the tables and matches the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE support_rep_id = (SELECT employee_id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson');",
            "SELECT COUNT(*) \nFROM customers T2\nJOIN employees T1 ON T2.support_rep_id = T1.id\nWHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson'"
        ],
        "rule_sql": []
    },
    "6917": {
        "db_id": "tracking_orders",
        "question": "List the count and id of each product in all the orders.",
        "ground_truth": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "amends": [
            "Do add `T3.product_id` to the SELECT list instead of omitting it. Do change the FROM clause to include `orders AS T1 JOIN order_items AS T2 JOIN products AS T3` instead of just `orders`. Do add join conditions `ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id` instead of having no joins. Do change the GROUP BY to use `T3.product_id` instead of `product_id` from the orders table. The amended query now correctly joins the necessary tables and groups by the product identifier from the products table, matching the RIGHT_SQL's behavior.",
            "Do place `T3.product_id` after `count(*)` in the SELECT list instead of before it. Do use implicit JOIN syntax with ON conditions combined instead of separate JOIN clauses. Do specify both join conditions `T1.order_id = T2.order_id AND T2.product_id = T3.product_id` in a single ON clause instead of separate ON clauses for each join. The amended query now correctly combines all join conditions and maintains the same grouping logic to match the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders GROUP BY product_id;",
            "SELECT T3.product_id, COUNT(*) AS count\nFROM Orders AS T1\nJOIN Order_Items AS T2 ON T1.order_id = T2.order_id\nJOIN Products AS T3 ON T2.product_id = T3.product_id\nGROUP BY T3.product_id",
            "SELECT count(*), T3.product_id \nFROM orders AS T1 \nJOIN order_items AS T2 ON T1.order_id = T2.order_id \nJOIN products AS T3 ON T2.product_id = T3.product_id \nGROUP BY T3.product_id"
        ],
        "rule_sql": []
    },
    "1699": {
        "db_id": "epinions_1",
        "question": "Find the names of goods that receive a rating of 10.",
        "ground_truth": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10",
        "amends": [
            "Do select `T1.title` instead of `name` and change the source table from `goods` to `item AS T1`. Do add a `JOIN` with `review AS T2` on `T1.i_id = T2.i_id` instead of querying a single table. Do filter on `T2.rating = 10` instead of `rating = 10` to reference the joined table's column. The amended query now correctly retrieves item titles based on review ratings rather than attempting to find ratings directly in a goods table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM goods WHERE rating = 10;",
            "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10"
        ],
        "rule_sql": []
    },
    "1410": {
        "db_id": "college_2",
        "question": "Find the total number of students in each department.",
        "ground_truth": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "amends": [
            "Do use `dept_name` instead of `department` in both the SELECT list and GROUP BY clause. Do place the aggregate function `count(*)` before the column reference instead of after it. Do reference the table as `student` instead of `students`. The amended query now correctly counts records grouped by department name in the student table.",
            "Do place `dept_name` in the SELECT list after the aggregate instead of before it, and do use the alias `total_students` for the count instead of omitting it. Do maintain the same `COUNT(*)` aggregate function and `GROUP BY dept_name` clause without changes. The amended query now matches RIGHT_SQL's behavior by correctly ordering the output columns while preserving the same grouping logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) FROM students GROUP BY department;",
            "SELECT dept_name, COUNT(*) AS total_students FROM student GROUP BY dept_name",
            "SELECT COUNT(*) AS total_students, dept_name FROM student GROUP BY dept_name"
        ],
        "rule_sql": []
    },
    "4042": {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "ground_truth": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "amends": [
            "Do select from `list` table instead of `students` table. Do add `DISTINCT` to return unique classrooms instead of potentially duplicate values. Do keep the filter `grade = 4` unchanged. The amended query now correctly returns distinct classroom values from the appropriate table while maintaining the same grade filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT classroom FROM students WHERE grade = 4;",
            "SELECT DISTINCT Classroom FROM list WHERE Grade = 4"
        ],
        "rule_sql": []
    },
    "4452": {
        "db_id": "network_2",
        "question": "Who are the friends of Bob?",
        "ground_truth": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
        "amends": [
            "Do select `T2.friend` instead of `*` from all columns. Do add `Person AS T1` and `PersonFriend AS T2` tables instead of just `users`. Do use `JOIN` with `ON T1.name = T2.name` instead of no join condition. Do keep the `WHERE T1.name = 'Bob'` filter but apply it to the joined table structure instead of a single table. The amended query now correctly retrieves friends from the relationship table instead of attempting to find user records directly."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM users WHERE name = 'Bob';",
            "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'"
        ],
        "rule_sql": []
    },
    "5626": {
        "db_id": "swimming",
        "question": "Find the names of the swimmers who have no record.",
        "ground_truth": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "amends": [
            "Do reference table `swimmer` instead of `swimmers` in the FROM clause. Do use a subquery with `NOT IN` condition on `swimmer_id` from the `record` table instead of filtering directly on `record IS NULL`. Do remove the incorrect `record` column reference from the WHERE clause instead of attempting to check for NULL values on a non-existent column. The amended query now correctly identifies swimmers without any records by checking their absence from the record table rather than relying on a NULL check that wouldn't work with the actual schema structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM swimmers WHERE record IS NULL;",
            "SELECT name FROM swimmer WHERE ID NOT IN (SELECT DISTINCT Swimmer_ID FROM record)"
        ],
        "rule_sql": []
    },
    "6216": {
        "db_id": "roller_coaster",
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "ground_truth": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
        "amends": [
            "Do select `T1.Name` and `T1.population` with table aliases instead of `name` and `population` without table references. Do join `country AS T1` with `roller_coaster AS T2` on `T1.Country_ID = T2.Country_ID` instead of selecting from only `countries` without any join. Do order by `T2.Height DESC` instead of `roller_coasters DESC` which doesn't reference a valid column. The amended query now correctly joins the country and roller_coaster tables and orders by roller coaster height to find the country with the tallest roller coaster, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, population FROM countries ORDER BY roller_coasters DESC LIMIT 1;",
            "SELECT T1.Name, T1.Population\nFROM country AS T1\nJOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID\nORDER BY T2.Height DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "5738": {
        "db_id": "dorm_1",
        "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "ground_truth": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "amends": [
            "Do use `count(*)` instead of `COUNT(amenity_id)` for counting all matching rows. Do reference `T1.dormid` in both SELECT and GROUP BY instead of `dorm_name`. Do use table aliases `T1` and `T2` instead of bare table names. Do specify `FROM dorm AS T1 JOIN has_amenity AS T2` instead of just `FROM dorms` to properly join the two tables. Do use `ON T1.dormid = T2.dormid` instead of no join condition to correctly relate the tables. Do filter on `T1.student_capacity > 100` instead of `capacity > 100` using the correct column name with table alias. Do group by `T1.dormid` instead of `dorm_name` to match the selected column. The amended query now correctly counts amenities per dorm with capacity filtering through proper table joining.",
            "Do place `T1.dormid` after the aggregate in the SELECT list instead of before it, and do use `count(*)` without an alias instead of `COUNT(*) AS amenity_count`. The amended query now correctly matches the RIGHT_SQL's behavior with identical logic and output structure.",
            "Do place `count(*)` before `T1.dormid` in the SELECT list instead of after it. Do add a comma separator between `count(*)` and `T1.dormid` instead of omitting it. The amended query now matches RIGHT_SQL's behavior with identical logic and output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dorm_name, COUNT(amenity_id) AS amenity_count \nFROM dorms \nWHERE capacity > 100 \nGROUP BY dorm_name;",
            "SELECT T1.dormid, COUNT(*) AS amenity_count\nFROM Dorm AS T1\nJOIN Has_amenity AS T2 ON T1.dormid = T2.dormid\nWHERE T1.student_capacity > 100\nGROUP BY T1.dormid",
            "SELECT T1.dormid, COUNT(*) \nFROM Dorm AS T1 \nJOIN Has_amenity AS T2 ON T1.dormid = T2.dormid \nWHERE T1.student_capacity > 100 \nGROUP BY T1.dormid",
            "SELECT count(*), T1.dormid\nFROM Dorm AS T1\nJOIN Has_amenity AS T2 ON T1.dormid = T2.dormid\nWHERE T1.student_capacity > 100\nGROUP BY T1.dormid"
        ],
        "rule_sql": []
    },
    "4569": {
        "db_id": "company_office",
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "ground_truth": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "amends": [
            "Do reference the `Industry` column instead of `industry` for both selection and grouping, and do group by `Industry` instead of `company_name` to correctly count records per industry rather than per company name. Do use proper table name casing `Companies` instead of `companies` for consistency. The amended query now correctly aggregates companies by their industry classification rather than attempting to count while grouping by individual company names, which would produce incorrect results."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT industry, COUNT(*) FROM companies GROUP BY company_name;",
            "SELECT Industry, COUNT(*) AS number_of_companies FROM Companies GROUP BY Industry;"
        ],
        "rule_sql": []
    },
    "3278": {
        "db_id": "college_1",
        "question": "What are the last name and office of all history professors?",
        "ground_truth": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
        "amends": [
            "Do select `emp_lname` and `prof_office` instead of `last_name` and `office`. Do join `employee` as `T1` with `professor` as `T2` on `emp_num` instead of querying only `professors`. Do add a second join to `department` as `T3` on `dept_code` instead of omitting this table. Do filter on `dept_name = 'History'` instead of `department = 'History'` to properly reference the department table. The amended query now correctly joins across multiple tables to retrieve professor office information filtered by department name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, office FROM professors WHERE department = 'History';",
            "SELECT T1.EMP_LNAME, T2.PROF_OFFICE \nFROM EMPLOYEE T1 \nJOIN PROFESSOR T2 ON T1.EMP_NUM = T2.EMP_NUM \nJOIN DEPARTMENT T3 ON T2.DEPT_CODE = T3.DEPT_CODE \nWHERE T3.DEPT_NAME = 'History'"
        ],
        "rule_sql": []
    },
    "5938": {
        "db_id": "cre_Theme_park",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "ground_truth": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "amends": [
            "Do select `pets_allowed_yn` instead of `pet_policy` and `avg(price_range)` instead of `AVG(price) as average_price`. Do group by `pets_allowed_yn` instead of `price` to calculate average prices by pet policy category rather than grouping by price values themselves. The amended query now correctly aggregates price data by pet allowance status to match the intended analytical behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT pet_policy, AVG(price) as average_price FROM hotels GROUP BY price;",
            "SELECT pets_allowed_yn, AVG(price_range) as average_price FROM Hotels GROUP BY pets_allowed_yn;"
        ],
        "rule_sql": []
    },
    "4253": {
        "db_id": "club_1",
        "question": "Give me the name of each club.",
        "ground_truth": "SELECT clubname FROM club",
        "amends": [
            "Do reference the `clubname` column instead of `club_name` and use the `club` table instead of `clubs`. Do specify the filter condition `club_id = 1` in the WHERE clause instead of omitting it, as the right SQL includes this predicate to correctly filter for a specific club record. The amended query now matches the right SQL's behavior by selecting the proper column name from the correct table with the appropriate filtering condition.",
            "Do use lowercase `clubname` instead of mixed-case `ClubName` and lowercase `club` instead of mixed-case `Club` to match the actual table and column naming conventions. Do remove the `WHERE ClubID = 1` filter instead of keeping it to return all club names from the table rather than just the one with ID 1. The amended query now correctly returns all club names without any filtering restrictions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT club_name FROM clubs WHERE club_id = 1;",
            "SELECT ClubName FROM Club WHERE ClubID = 1",
            "SELECT clubname FROM club;"
        ],
        "rule_sql": []
    },
    "1944": {
        "db_id": "cinema",
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "ground_truth": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
        "amends": [
            "Do reference the table as `cinema` instead of `cinemas` to match the correct table name. Do remove the alias `cinema_count` from the SELECT list instead of keeping it, as the RIGHT_SQL only selects the location column. Do use `count(*)` directly in the HAVING clause instead of referencing the alias `cinema_count`, since column aliases cannot be used in HAVING clauses in standard SQL. The amended query now correctly filters cinema locations with capacity over 300 that have at least 2 such cinemas, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location, COUNT(*) as cinema_count FROM cinemas WHERE capacity > 300 GROUP BY location HAVING cinema_count >= 2;",
            "SELECT location FROM cinema WHERE capacity > 300 GROUP BY location HAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "4494": {
        "db_id": "decoration_competition",
        "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "ground_truth": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"",
        "amends": [
            "Do join `member AS T2` on `T1.College_ID = T2.College_ID` instead of querying only the `colleges` table. Do filter on `T2.Country = \"Canada\"` instead of filtering on the college table's country. Do reference `T1.Leader_Name` with table alias qualification instead of just `leader_name`. Do use double quotes around string literals instead of single quotes. The amended query now correctly identifies Canadian college leaders by joining with member data and filtering on the member's country instead of the college's country, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT leader_name FROM colleges WHERE country = 'Canada';",
            "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = \"Canada\""
        ],
        "rule_sql": []
    },
    "473": {
        "db_id": "allergy_1",
        "question": "How many students are age 18?",
        "ground_truth": "SELECT count(*) FROM Student WHERE age  =  18",
        "amends": [
            "Do use table name `Student` instead of `students` in the FROM clause. Do use equality filter `age = 18` instead of inequality `age != 18` in the WHERE clause. The amended query now correctly counts students who are exactly 18 years old instead of counting those who are not 18, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE age != 18;",
            "SELECT COUNT(*) FROM Student WHERE Age = 18"
        ],
        "rule_sql": []
    },
    "3500": {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
        "ground_truth": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, hire_date FROM employees WHERE department_id IN (SELECT department_id FROM employees WHERE first_name = 'Clara')"
        ],
        "rule_sql": []
    },
    "1349": {
        "db_id": "college_2",
        "question": "What are the titles of courses without prerequisites?",
        "ground_truth": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "amends": [
            "Do reference the `course` table instead of `courses` in the FROM clause. Do use a subquery with `NOT IN` to filter courses without prerequisites instead of checking `IS NULL` on a prerequisites column. Do filter by `course_id` not existing in the `prereq` table instead of relying on a NULL prerequisites field. The amended query now correctly identifies courses without prerequisites by checking for missing entries in the prereq table rather than assuming NULL values, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM courses WHERE prerequisites IS NULL;",
            "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        ],
        "rule_sql": []
    },
    "4729": {
        "db_id": "department_store",
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "ground_truth": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "amends": [
            "Do select `staff_name` and `job_title_code` instead of `name` and `job_title`. Do join `staff_department_assignments` instead of querying only the `staff` table. Do use `ON T1.staff_id = T2.staff_id` instead of missing the join condition. Do order by `date_assigned_to DESC` instead of `assignment_date ASC`. Do reference tables with aliases `T1` and `T2` instead of direct table names. The amended query now correctly retrieves the most recent staff assignment with proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, job_title FROM staff ORDER BY assignment_date ASC LIMIT 1;",
            "SELECT T1.staff_name, T2.job_title_code \nFROM Staff T1\nJOIN Staff_Department_Assignments T2 ON T1.staff_id = T2.staff_id\nORDER BY T2.date_assigned_to DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "1305": {
        "db_id": "soccer_1",
        "question": "Who are the top 3 players in terms of overall rating?",
        "ground_truth": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "amends": [
            "Do select `T1.player_name` instead of `name, overall_rating` and add `DISTINCT` instead of omitting it. Do use `FROM Player AS T1 JOIN Player_Attributes AS T2` instead of `FROM players` and specify the join condition `ON T1.player_api_id = T2.player_api_id` instead of no join. Do order by `overall_rating DESC` instead of `overall_rating ASC` while keeping `LIMIT 3`. The amended query now correctly retrieves distinct player names from joined tables ordered by rating in descending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, overall_rating FROM players ORDER BY overall_rating ASC LIMIT 3;",
            "SELECT DISTINCT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id\nORDER BY T2.overall_rating DESC\nLIMIT 3"
        ],
        "rule_sql": []
    },
    "5592": {
        "db_id": "products_gen_characteristics",
        "question": "What is the description of the color used by least products?",
        "ground_truth": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "amends": [
            "Do select `t2.color_description` from the joined table instead of selecting `color, description` directly from a single table. Do join `products AS t1` with `ref_colors AS t2` on `t1.color_code = t2.color_code` instead of querying only the `colors` table without any join. Do add `GROUP BY t2.color_description` to aggregate by color description instead of attempting to order by a count without grouping. Do order by `count(*) ASC` for ascending count instead of `COUNT(product_id) DESC` for descending count. The amended query now correctly aggregates product counts by color description and returns the result with the lowest count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT color, description FROM colors ORDER BY COUNT(product_id) DESC LIMIT 1;",
            "SELECT t2.color_description \nFROM Products AS t1 \nJOIN Ref_Colors AS t2 ON t1.color_code = t2.color_code \nGROUP BY t2.color_description \nORDER BY COUNT(*) ASC \nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4374": {
        "db_id": "tracking_grants_for_research",
        "question": "How many Patent outcomes are generated from all the projects?",
        "ground_truth": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "amends": [
            "Do reference the `Project_outcomes` table instead of the `projects` table. Do filter on the `outcome_code` column with value 'Patent' instead of the `outcome_type` column with value 'Patent'. Do maintain the `COUNT(*)` aggregate function without changes. The amended query now correctly counts patent outcomes from the appropriate table with the correct column filter, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM projects WHERE outcome_type = 'Patent';",
            "SELECT COUNT(*) FROM Project_Outcomes WHERE outcome_code = 'Patent'"
        ],
        "rule_sql": []
    },
    "4113": {
        "db_id": "film_rank",
        "question": "Count the number of films.",
        "ground_truth": "SELECT count(*) FROM film",
        "amends": [
            "Do select from `film` table instead of `actors` table. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actors;",
            "SELECT COUNT(*) FROM film;"
        ],
        "rule_sql": []
    },
    "2318": {
        "db_id": "perpetrator",
        "question": "List the names of perpetrators in descending order of the year.",
        "ground_truth": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
        "amends": [
            "Do select `T1.Name` from the `people` table instead of `name` from the `perpetrators` table. Do join `perpetrator AS T2` on `T1.People_ID = T2.People_ID` instead of querying only the `perpetrators` table. Do order by `T2.Year DESC` instead of `year ASC` to sort in descending order. The amended query now correctly joins the people and perpetrator tables to retrieve names and sorts by year in descending order, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM perpetrators ORDER BY year ASC;",
            "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC"
        ],
        "rule_sql": []
    },
    "6128": {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made an order most recently.",
        "ground_truth": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "amends": [
            "Do add `JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id` instead of querying only the `customers` table. Do reference `t1.customer_name` with table alias instead of bare `customer_name`. Do change sort direction to `DESC` on `t2.order_date` instead of `ASC` on `order_date`. Do qualify the date column as `t2.order_date` instead of the ambiguous `order_date`. The amended query now correctly joins customer data with order information and retrieves the most recent order instead of the oldest."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers ORDER BY order_date ASC LIMIT 1;",
            "SELECT t1.customer_name\nFROM Customers AS t1\nJOIN Customer_Orders AS t2 ON t1.customer_id = t2.customer_id\nORDER BY t2.order_date DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2072": {
        "db_id": "party_people",
        "question": "How many events are there for each party?",
        "ground_truth": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "amends": [
            "Do select `T2.party_name` instead of `party` and change the grouping column to `T1.party_id` instead of `event_id`. Do add `FROM party_events AS T1 JOIN party AS T2` with join condition `ON T1.party_id = T2.party_id` instead of the single table `events`. The amended query now correctly joins the party_events and party tables to retrieve party names and count events per party, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party, COUNT(*) FROM events GROUP BY event_id;",
            "SELECT T2.Party_name, COUNT(*) AS event_count FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID"
        ],
        "rule_sql": []
    },
    "6983": {
        "db_id": "culture_company",
        "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
        "ground_truth": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million",
        "amends": [
            "Do reference table `movie` instead of `movies` and column `budget_million` instead of `budget` in the ORDER BY clause, while keeping the same SELECT list structure with columns `title`, `year`, and `director`."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, year, director FROM movies ORDER BY budget;",
            "SELECT Title, Year, Director FROM movie ORDER BY Budget_million;"
        ],
        "rule_sql": []
    },
    "1728": {
        "db_id": "riding_club",
        "question": "Show the names of players and names of their coaches.",
        "ground_truth": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
        "amends": [
            "Do reference tables `player_coach`, `coach`, and `player` with aliases `T1`, `T2`, and `T3` instead of directly joining `players` and `coaches`. Do use a three-way join through the `player_coach` bridge table instead of directly joining players to coaches. Do join `player_coach` to `coach` on `T1.Coach_ID = T2.Coach_ID` instead of joining players to coaches on `players.team_id = coaches.player_id`. Do join `player_coach` to `player` on `T1.Player_ID = T3.Player_ID` instead of the incorrect direct relationship. Do select `T3.Player_name` and `T2.coach_name` instead of `player_name` and `coach_name` without table qualification. The amended query now correctly establishes the many-to-many relationship between players and coaches through the bridge table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, coach_name FROM players JOIN coaches ON players.team_id = coaches.player_id;",
            "SELECT T3.Player_name, T2.Coach_name\nFROM player_coach T1\nJOIN coach T2 ON T1.Coach_ID = T2.Coach_ID\nJOIN player T3 ON T1.Player_ID = T3.Player_ID;"
        ],
        "rule_sql": []
    },
    "1397": {
        "db_id": "college_2",
        "question": "What are the titles of courses that are offered in more than one department?",
        "ground_truth": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "amends": [
            "Do reference the table as `course` instead of `courses` in the FROM clause, correcting the table name to match the actual schema. Do maintain the identical SELECT list with `title`, GROUP BY clause with `title`, and HAVING condition with `count(*) > 1` without any changes to the aggregation logic or filtering. The amended query now correctly references the intended table while preserving all other structural elements and matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM courses GROUP BY title HAVING COUNT(*) > 1;",
            "SELECT title FROM course GROUP BY title HAVING COUNT(*) > 1"
        ],
        "rule_sql": []
    },
    "3770": {
        "db_id": "e_learning",
        "question": "What are the descriptions of the courses with name \"database\"?",
        "ground_truth": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"",
        "amends": [
            "Do select `course_description` instead of `description` to reference the correct column name. Do use uppercase `COURSES` instead of lowercase `courses` for the table name, though this may be a cosmetic difference depending on case sensitivity. Do use double quotes `\"database\"` instead of single quotes `'database'` for the string literal, though this may also be a formatting difference. The amended query now correctly retrieves the course description column for database courses."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM courses WHERE course_name = 'database';",
            "SELECT course_description FROM COURSES WHERE course_name = \"database\";"
        ],
        "rule_sql": []
    },
    "3205": {
        "db_id": "college_1",
        "question": "Find the number of classes in each department.",
        "ground_truth": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
        "amends": [
            "Do use `count(*)` and `dept_code` in the SELECT list instead of `department` and `COUNT(*)`. Do add `CLASS AS T1 JOIN course AS T2` as the FROM source instead of just `classes`. Do specify the join condition `ON T1.crs_code = T2.crs_code` instead of omitting any join. Do group by `dept_code` instead of `department`. The amended query now correctly joins the CLASS and course tables to count courses by department code, matching the RIGHT_SQL's behavior.",
            "Do place `count(*)` before `dept_code` in the SELECT list instead of having `dept_code` first. Do use lowercase `dept_code` instead of uppercase `T2.DEPT_CODE` for both the column reference and GROUP BY clause. Do remove the table alias `T2.` prefix from `dept_code` in both SELECT and GROUP BY instead of keeping it. The amended query now correctly counts records grouped by department code with proper column ordering and consistent casing."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) FROM classes GROUP BY department;",
            "SELECT T2.DEPT_CODE, COUNT(*) \nFROM CLASS AS T1 \nJOIN COURSE AS T2 ON T1.CRS_CODE = T2.CRS_CODE \nGROUP BY T2.DEPT_CODE",
            "SELECT count(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code"
        ],
        "rule_sql": []
    },
    "3691": {
        "db_id": "baseball_1",
        "question": "How many games were played in city Atlanta in 2000?",
        "ground_truth": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
        "amends": [
            "Do join `home_game` and `park` tables with an `INNER JOIN` on `park_id` instead of querying only the `games` table. Do filter on `T1.year = 2000` and `T2.city = 'Atlanta'` instead of filtering on `city = 'Atlanta'` and `year = 2000` from a single table. Do use proper table aliases `T1` and `T2` instead of omitting them. The amended query now correctly counts home games played in Atlanta parks during the year 2000 by properly joining the relevant tables and filtering on the appropriate columns.",
            "Do use `count(*)` instead of `SUM(T1.games)` for counting records. Do remove the `AS total_games` alias instead of keeping it. Do use `JOIN` instead of `INNER JOIN` as they are functionally equivalent. Do maintain the same join condition `T1.park_id = T2.park_id` and WHERE filters `T1.year = 2000 AND T2.city = 'Atlanta'` without changes. The amended query now correctly counts all matching records instead of summing game values, matching RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE city = 'Atlanta' AND year = 2000;",
            "SELECT SUM(T1.games) AS total_games\nFROM home_game T1\nINNER JOIN park T2 ON T1.park_id = T2.park_id\nWHERE T1.year = 2000 AND T2.city = 'Atlanta';",
            "SELECT COUNT(*) FROM home_game T1 JOIN park T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta'"
        ],
        "rule_sql": []
    },
    "6805": {
        "db_id": "flight_4",
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "ground_truth": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "amends": [
            "Do use column name `elevation` instead of `altitude` in the SELECT list while keeping the same table source `airports` and identical WHERE filter `city = 'New York'`. The amended query now correctly references the actual column name in the schema while maintaining the same filtering logic and output structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, city, country, altitude FROM airports WHERE city = 'New York';",
            "SELECT name, city, country, elevation FROM airports WHERE city = 'New York';"
        ],
        "rule_sql": []
    },
    "2944": {
        "db_id": "sakila_1",
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "ground_truth": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "amends": [
            "Do use `UNION` to combine results from two separate queries instead of using `IN` with a subquery. Do add a second query with `JOIN` between `payment AS T1` and `staff AS T2` on `T1.staff_id = T2.staff_id` instead of the subquery approach. Do move the `first_name = 'Elsa'` filter to the `WHERE` clause of the joined query instead of keeping it in the subquery. Do maintain the `amount > 10` filter in the first query instead of removing it. The amended query now correctly retrieves payment dates either where amount exceeds 10 or where staff first name is Elsa, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT payment_date FROM payment WHERE amount > 10 AND staff_id IN (SELECT staff_id FROM staff WHERE first_name = 'Elsa');",
            "SELECT payment_date FROM payment WHERE amount > 10\nUNION\nSELECT T1.payment_date FROM payment AS T1\nJOIN staff AS T2 ON T1.staff_id = T2.staff_id\nWHERE T2.first_name = 'Elsa'"
        ],
        "rule_sql": []
    },
    "933": {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many kinds of enzymes are there?",
        "ground_truth": "SELECT count(*) FROM enzyme",
        "amends": [
            "Do reference table `enzyme` instead of `enzymes` to correctly target the intended database table. This amendment ensures the query now counts records from the proper table structure as specified in the right SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM enzymes;",
            "SELECT COUNT(*) FROM enzyme;"
        ],
        "rule_sql": []
    },
    "3401": {
        "db_id": "manufacturer",
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "ground_truth": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "amends": [
            "Do select `count(*)` and `t1.name` instead of `manufacturer_name` and `COUNT(*)`. Do join `manufacturer AS t1` with `furniture_manufacte AS t2` on `t1.manufacturer_id = t2.manufacturer_id` instead of querying only the `furniture` table. Do group by `t1.manufacturer_id` instead of `manufacturer_name`. The amended query now correctly counts furniture items per manufacturer by joining the manufacturer table through the furniture_manufacte relationship table instead of incorrectly assuming manufacturer_name exists directly in the furniture table.",
            "Do include `t1.name` in the SELECT list instead of omitting it, and do place `count(*)` before `t1.name` instead of after it. Do use lowercase `manufacturer_id` in the GROUP BY clause instead of uppercase `Manufacturer_ID`. The amended query now correctly includes the manufacturer name in the results while maintaining the count aggregation grouped by manufacturer_id."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT manufacturer_name, COUNT(*) FROM furniture GROUP BY manufacturer_name;",
            "SELECT t1.Name, COUNT(*) \nFROM manufacturer AS t1 \nJOIN furniture_manufacte AS t2 ON t1.Manufacturer_ID = t2.Manufacturer_ID \nGROUP BY t1.Manufacturer_ID",
            "SELECT count(*), t1.Name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.Manufacturer_ID = t2.Manufacturer_ID GROUP BY t1.Manufacturer_ID"
        ],
        "rule_sql": []
    },
    "2465": {
        "db_id": "movie_1",
        "question": "What is the title of the newest movie?",
        "ground_truth": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "amends": [
            "Do use a `WHERE` filter with a subquery to find the maximum year instead of ordering by `release_date` and limiting. Do add a subquery `(SELECT max(YEAR) FROM Movie)` to dynamically determine the latest year instead of relying on static ordering. Do remove the `ORDER BY release_date ASC LIMIT 1` clause instead of keeping it, as the right approach uses a correlated condition rather than sorting and limiting. The amended query now correctly identifies movies from the most recent year by using a subquery to calculate the maximum year value, ensuring it returns all titles from that year rather than just the earliest-released movie from the entire dataset."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies ORDER BY release_date ASC LIMIT 1;",
            "SELECT title FROM Movie WHERE year = (SELECT MAX(year) FROM Movie)"
        ],
        "rule_sql": []
    },
    "294": {
        "db_id": "twitter_1",
        "question": "List the text of all tweets in the order of date.",
        "ground_truth": "SELECT text FROM tweets ORDER BY createdate",
        "amends": [
            "Do order by `createdate` instead of `date` to use the correct column name that matches the table schema, ensuring proper chronological ordering of tweet records. The amended query now matches RIGHT_SQL's behavior by referencing the appropriate timestamp column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT text FROM tweets ORDER BY date DESC;",
            "SELECT text FROM tweets ORDER BY createdate;"
        ],
        "rule_sql": []
    },
    "3915": {
        "db_id": "hospital_1",
        "question": "What are the name and primarily affiliated department name of each physician?",
        "ground_truth": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "amends": [
            "Do select `T1.name` and `T3.name` instead of `p.name` and `d.department_name`. Do use `physician AS T1` joined with `affiliated_with AS T2` instead of `physicians p` left joined with `departments d`. Do join on `T1.EmployeeID = T2.physician` instead of `p.department_id = d.department_id`. Do add a second join to `department AS T3` on `T2.department = T3.DepartmentID` instead of omitting the affiliation bridge table. Do filter on `T2.PrimaryAffiliation = 1` instead of `p.primary_affiliation = 'Yes'` to use the correct boolean representation. The amended query now correctly uses the affiliation bridge table structure and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, d.department_name \nFROM physicians p \nLEFT JOIN departments d ON p.department_id = d.department_id \nWHERE p.primary_affiliation = 'Yes';",
            "SELECT T1.Name AS PhysicianName, T3.Name AS DepartmentName\nFROM Physician AS T1\nJOIN Affiliated_With AS T2 ON T1.EmployeeID = T2.Physician\nJOIN Department AS T3 ON T2.Department = T3.DepartmentID\nWHERE T2.PrimaryAffiliation = 1;"
        ],
        "rule_sql": []
    },
    "1998": {
        "db_id": "gas_company",
        "question": "What are the companies and main industries of all companies that are not headquartered in the United States?",
        "ground_truth": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "amends": [
            "Do select `company` instead of `company_name` and use table `company` instead of `companies`. Do filter on `headquarters != 'USA'` instead of `headquarters_country = 'United States'` to exclude USA-based companies rather than including only US-based ones. The amended query now correctly excludes companies with USA headquarters and uses the proper table and column names."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, main_industry FROM companies WHERE headquarters_country = 'United States';",
            "SELECT Company, Main_Industry FROM company WHERE Headquarters != 'USA';"
        ],
        "rule_sql": []
    },
    "5220": {
        "db_id": "music_2",
        "question": "Which vocal type is the most frequently appearring type?",
        "ground_truth": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do select `TYPE` instead of `vocal_type` and do not include `COUNT(*) as count` in the SELECT list instead of including it. Do use `FROM vocals` instead of `FROM songs` as the data source. Do remove the explicit `GROUP BY vocal_type` clause instead of keeping it, as grouping is implied by the aggregate function. Do order by `count(*) DESC` instead of `count DESC` to reference the aggregate function directly rather than its alias. The amended query now correctly retrieves the most common vocal type from the vocals table rather than attempting to count vocal types from the songs table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vocal_type, COUNT(*) as count FROM songs GROUP BY vocal_type ORDER BY count DESC LIMIT 1;",
            "SELECT Type, COUNT(*) as count FROM Vocals GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5739": {
        "db_id": "dorm_1",
        "question": "For each dorm, how many amenities does it have?",
        "ground_truth": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "amends": [
            "Do select `count(*)` and `T1.dormid` instead of `dorm_name` and `COUNT(*)` without proper grouping. Do join `dorm AS T1` and `has_amenity AS T2` with `ON T1.dormid = T2.dormid` instead of querying only the `amenities` table. Do add `WHERE T1.student_capacity > 100` filter instead of omitting any capacity condition. Do group by `T1.dormid` instead of `dorm_name`. The amended query now correctly counts amenities for dorms with capacity over 100 by joining the appropriate tables and filtering on student capacity.",
            "Do place `count(*)` before `T1.dormid` in the SELECT list instead of after it. Do add a space after the comma in the SELECT list instead of omitting it. Do use lowercase `dorm` instead of uppercase `Dorm` in the FROM clause. Do add spaces around the equals sign in the ON predicate instead of omitting them. The amended query now correctly returns the same results with proper column ordering and spacing."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dorm_name, COUNT(*) FROM amenities GROUP BY dorm_name;",
            "SELECT T1.dormid, COUNT(*) \nFROM Dorm AS T1 \nJOIN Has_amenity AS T2 ON T1.dormid = T2.dormid \nWHERE T1.student_capacity > 100 \nGROUP BY T1.dormid",
            "SELECT count(*), T1.dormid \nFROM dorm AS T1 \nJOIN has_amenity AS T2 ON T1.dormid = T2.dormid \nWHERE T1.student_capacity > 100 \nGROUP BY T1.dormid"
        ],
        "rule_sql": []
    },
    "3043": {
        "db_id": "loan_1",
        "question": "What are the names of customers who have taken both Mortgage and Auto loans?",
        "ground_truth": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "amends": [
            "Do use `cust_name` instead of `name` in the SELECT list. Do reference tables as `customer` and `loan` instead of `customers` and `loans`. Do use `cust_id` instead of `customer_id` for join conditions. Do change the WHERE clause to use exact string matches `'Mortgages'` and `'Auto'` in separate queries instead of an OR condition with `'Mortgage'`. Do replace the GROUP BY/HAVING approach with INTERSECT between two separate queries instead of counting distinct loan types. Do remove the GROUP BY and HAVING clauses entirely instead of keeping them. The amended query now correctly identifies customers who have both mortgage and auto loans using set intersection logic instead of counting distinct loan types, which ensures accurate results when customers might have multiple loans of the same type.",
            "Do use explicit `JOIN` syntax with table aliases `T1` and `T2` instead of subqueries with `IN`. Do reference `loan_type` directly in the `WHERE` clause instead of using subqueries to filter by loan type. Do use the correct spelling 'Mortgages' instead of 'Mortgage' in the first query's filter. Do maintain the `INTERSECT` operation to find customers who have both types of loans. The amended query now correctly identifies customers with both mortgage and auto loans using proper join syntax and accurate loan type values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM customers c\nJOIN loans l ON c.customer_id = l.customer_id\nWHERE l.loan_type = 'Mortgage' OR l.loan_type = 'Auto'\nGROUP BY c.customer_id, c.name\nHAVING COUNT(DISTINCT l.loan_type) = 2;",
            "SELECT cust_name FROM customer WHERE cust_ID IN (SELECT cust_ID FROM loan WHERE loan_type = 'Mortgage') INTERSECT SELECT cust_name FROM customer WHERE cust_ID IN (SELECT cust_ID FROM loan WHERE loan_type = 'Auto');",
            "SELECT cust_name FROM customer WHERE cust_ID IN (\n    SELECT cust_ID FROM loan WHERE loan_type = 'Mortgages'\n    INTERSECT\n    SELECT cust_ID FROM loan WHERE loan_type = 'Auto'\n)"
        ],
        "rule_sql": []
    },
    "2073": {
        "db_id": "party_people",
        "question": "Show all member names who are not in charge of any event.",
        "ground_truth": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
        "amends": [
            "Do select `member_name` instead of `name` and use `EXCEPT` instead of `NOT IN` with a subquery. Do reference table `member` instead of `members` and remove the `WHERE` clause entirely. Do add a join between `member AS T1` and `party_events AS T2` on `T1.member_id = T2.member_in_charge_id` instead of checking for membership absence in an events table. The amended query now correctly identifies members not in charge of party events by using set operations instead of subquery negation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM members WHERE member_id NOT IN (SELECT member_id FROM events)",
            "SELECT Member_Name FROM member EXCEPT SELECT T1.Member_Name FROM member AS T1 JOIN party_events AS T2 ON T1.Member_ID = T2.Member_in_charge_ID"
        ],
        "rule_sql": []
    },
    "2383": {
        "db_id": "csu_1",
        "question": "How many faculty members are at the university that gave the least number of degrees in 2001?",
        "ground_truth": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "amends": [
            "Do select `T2.faculty` instead of `COUNT(*)`. Do join `campuses AS T1` instead of omitting it. Do use `JOIN faculty AS T2 ON T1.id = t2.campus` instead of querying `faculty` directly. Do add `JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year` instead of using a subquery. Do filter with `WHERE t2.year = 2001` instead of `WHERE university_id = (subquery)`. Do order by `t3.degrees` instead of `COUNT(*) ASC`. Do keep `LIMIT 1` but apply it to the main query instead of the subquery. The amended query now correctly retrieves faculty information with proper joins and filtering instead of counting records with incorrect subquery logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM faculty WHERE university_id = (SELECT university_id FROM degrees WHERE year = 2001 GROUP BY university_id ORDER BY COUNT(*) ASC LIMIT 1);",
            "SELECT T2.Faculty\nFROM Campuses AS T1\nJOIN faculty AS T2 ON T1.Id = T2.Campus\nJOIN degrees AS T3 ON T1.Id = T3.Campus AND T2.Year = T3.Year\nWHERE T2.Year = 2001\nORDER BY T3.Degrees ASC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2430": {
        "db_id": "candidate_poll",
        "question": "find the name of people whose height is lower than the average.",
        "ground_truth": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "amends": [
            "Do use the comparison operator `<` instead of `>` in the WHERE clause filter on `height`, changing the logic to select people with height below average instead of above average. The amended query now correctly matches the RIGHT_SQL's behavior of selecting individuals shorter than the average height."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE height > (SELECT AVG(height) FROM people)",
            "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people)"
        ],
        "rule_sql": []
    },
    "1493": {
        "db_id": "debate",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "ground_truth": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "amends": [
            "Do reference the `Venue` column instead of `venue` and use the correct table name `debate` instead of `debates`. Do order by `Num_of_Audience` instead of `audience` and use `ASC` ordering instead of `DESC`. The amended query now correctly selects from the debate table with proper column names and ascending audience ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT venue FROM debates ORDER BY audience DESC;",
            "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC;"
        ],
        "rule_sql": []
    },
    "3715": {
        "db_id": "mountain_photos",
        "question": "What are the average prominence of the mountains in country 'Morocco'?",
        "ground_truth": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'",
        "amends": [
            "Do calculate the average of `prominence` instead of `height` in the SELECT list. Do reference the table `mountain` instead of `mountains` in the FROM clause while keeping the same WHERE filter condition `country = 'Morocco'`. The amended query now correctly calculates average prominence from the mountain table for Moroccan entries."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM mountains WHERE country = 'Morocco';",
            "SELECT AVG(Prominence) FROM mountain WHERE Country = 'Morocco';"
        ],
        "rule_sql": []
    },
    "484": {
        "db_id": "allergy_1",
        "question": "What is the minimum, mean, and maximum age across all students?",
        "ground_truth": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "amends": [
            "Do reference the table as `Student` instead of `students` and remove the `WHERE age IS NOT NULL` filter instead of keeping it, as aggregate functions inherently handle NULL values by excluding them from calculations. The amended query now matches RIGHT_SQL's behavior with identical aggregation logic on the correct table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(age), AVG(age), MAX(age) FROM students WHERE age IS NOT NULL",
            "SELECT MIN(Age) AS min_age, AVG(Age) AS mean_age, MAX(Age) AS max_age FROM Student;"
        ],
        "rule_sql": []
    },
    "4029": {
        "db_id": "student_1",
        "question": "How many students are there?",
        "ground_truth": "SELECT count(*) FROM list",
        "amends": [
            "Do select from `list` instead of `teachers` as the data source table. The amended query now correctly counts records from the intended table and matches the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teachers;",
            "SELECT COUNT(*) FROM list;"
        ],
        "rule_sql": []
    },
    "4135": {
        "db_id": "film_rank",
        "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
        "ground_truth": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of the original table names. Do join `film_market_estimation AS T1` with `market AS T2` on `T1.Market_ID = T2.Market_ID` instead of using a subquery with `IN` clause. Do filter with `T1.Low_Estimate > 10000` in the `WHERE` clause instead of filtering in a subquery. Do select `avg(T2.Number_cities)` directly instead of calculating `AVG(city_count)` from a subquery that counts cities. Do remove the subquery and `GROUP BY` clause entirely instead of using nested aggregation. The amended query now correctly calculates the average number of cities per market where the low estimate exceeds 10000, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(city_count) \nFROM (\n    SELECT COUNT(city_id) as city_count \n    FROM cities \n    WHERE market_id IN (\n        SELECT market_id \n        FROM markets \n        WHERE low_market_estimation > 10000\n    ) \n    GROUP BY market_id\n)",
            "SELECT AVG(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000"
        ],
        "rule_sql": []
    },
    "4639": {
        "db_id": "college_3",
        "question": "List all names of courses with 1 credit?",
        "ground_truth": "SELECT CName FROM COURSE WHERE Credits  =  1",
        "amends": [
            "Do reference the column as `CName` instead of `course_name` and the table as `COURSE` instead of `courses`. Do maintain the filter condition `Credits = 1` instead of `credits = 1` with consistent logic. The amended query now correctly retrieves course names from the COURSE table where credits equal 1, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE credits = 1;",
            "SELECT CName FROM Course WHERE Credits = 1;"
        ],
        "rule_sql": []
    },
    "5717": {
        "db_id": "dorm_1",
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "ground_truth": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "amends": [
            "Do use column names `fname` and `lname` instead of `first_name` and `last_name`. Do reference table `student` instead of `students`. Do use inequality filter `city_code != 'HKG'` instead of equality filter `city = 'HKG'`. The amended query now correctly filters for records where city code is not HKG and uses the appropriate table and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM students WHERE city = 'HKG' ORDER BY age;",
            "SELECT fname, lname FROM Student WHERE city_code != 'HKG' ORDER BY age"
        ],
        "rule_sql": []
    },
    "4421": {
        "db_id": "network_2",
        "question": "How old is each gender, on average?",
        "ground_truth": "SELECT avg(age) ,  gender FROM Person GROUP BY gender",
        "amends": [
            "Do use table name `Person` instead of `users` in the FROM clause. Do place the `gender` column after the aggregate function `avg(age)` in the SELECT list instead of before it. Do maintain the same GROUP BY clause with `gender` and the same aggregate function `avg(age)` calculation. The amended query now correctly references the Person table and presents the results with the aggregate function first followed by the grouping column, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, AVG(age) FROM users GROUP BY gender;",
            "SELECT avg(age), gender FROM Person GROUP BY gender"
        ],
        "rule_sql": []
    },
    "3396": {
        "db_id": "manufacturer",
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "ground_truth": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20",
        "amends": [
            "Do reference the correct table name `manufacturer` instead of `manufacturers` and use the proper column names `Num_of_Factories` and `num_of_shops` instead of `factories` and `shops`. Do apply the lowercase `avg` function instead of uppercase `AVG` while maintaining the same aggregation logic. Do preserve the filter condition `> 20` on the shop count column but with the correct column reference. The amended query now correctly calculates the average number of factories for manufacturers with more than 20 shops, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(factories) FROM manufacturers WHERE shops > 20;",
            "SELECT avg(Num_of_Factories) FROM manufacturer WHERE Num_of_Shops > 20"
        ],
        "rule_sql": []
    },
    "432": {
        "db_id": "flight_1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "ground_truth": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "amends": [
            "Do use `Certificate` and `Aircraft` table aliases instead of `certified` and `aircraft`. Do join on `T2.aid = T1.aid` instead of `a.aid = c.aid`. Do group by `T1.aid` instead of `a.aid, a.name`. Do order by `count(*) DESC` instead of `COUNT(c.eid) ASC`. Do select `T2.name` instead of `a.name`. The amended query now correctly identifies the aircraft with the most certifications by counting all certificates per aircraft ID in descending order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.name \nFROM aircraft a \nJOIN certified c ON a.aid = c.aid \nGROUP BY a.aid, a.name \nORDER BY COUNT(c.eid) ASC \nLIMIT 1;",
            "SELECT T2.name \nFROM certificate T1 \nJOIN aircraft T2 ON T2.aid = T1.aid \nGROUP BY T1.aid \nORDER BY count(*) DESC \nLIMIT 1"
        ],
        "rule_sql": []
    },
    "1924": {
        "db_id": "protein_institute",
        "question": "Show all the distinct institution types.",
        "ground_truth": "SELECT DISTINCT TYPE FROM institution",
        "amends": [
            "Do select `TYPE` from the `institution` table instead of selecting `institution` from the `types` table. Do use `DISTINCT` to return unique values instead of using `GROUP BY` for deduplication. Do query the correct table `institution` instead of the incorrect table `types`. The amended query now correctly returns distinct types from the institution table as specified."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT institution FROM types GROUP BY institution;",
            "SELECT DISTINCT Type FROM Institution;"
        ],
        "rule_sql": []
    },
    "2384": {
        "db_id": "csu_1",
        "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "ground_truth": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "amends": [
            "Do use `sum(t1.undergraduate)` instead of `COUNT(*)` to sum undergraduate enrollment numbers rather than counting rows. Do join `discipline_enrollments AS t1` with `campuses AS t2` on `t1.campus = t2.id` instead of querying a single `students` table. Do filter on `t1.year = 2004` and `t2.campus = \"San Jose State University\"` instead of filtering directly on `university` and `student_type` columns. Do remove the `student_type = 'undergraduate'` filter since the undergraduate count is now directly selected from the discipline_enrollments table. The amended query now correctly aggregates undergraduate enrollment data by joining the appropriate tables and matches the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university = 'San Jose State University' AND year = 2004 AND student_type = 'undergraduate';",
            "SELECT SUM(t1.Undergraduate) \nFROM discipline_enrollments AS t1\nJOIN Campuses AS t2 ON t1.Campus = t2.Id\nWHERE t1.Year = 2004 AND t2.Campus = 'San Jose State University'"
        ],
        "rule_sql": []
    },
    "1872": {
        "db_id": "wrestler",
        "question": "Please show the most common reigns of wrestlers.",
        "ground_truth": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do reference the table as `wrestler` instead of `wrestlers` and use the column name `Reign` instead of `reign` in the SELECT clause. Do remove the alias `count` from the aggregate function instead of keeping it. Do move the aggregate function `COUNT(*)` to the ORDER BY clause instead of including it in the SELECT list. The amended query now correctly identifies the most frequent reign value by counting occurrences within each group and ordering by the count in descending order, matching the intended behavior.",
            "Do remove `COUNT(*)` from the SELECT list instead of including it, and do add `LIMIT 1` to return only the top result instead of omitting it. The amended query now correctly returns only the Reign with the highest count rather than all Reigns with their counts."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reign, COUNT(*) as count FROM wrestlers GROUP BY reign ORDER BY count DESC LIMIT 1;",
            "SELECT Reign, COUNT(*) FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC;",
            "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3667": {
        "db_id": "baseball_1",
        "question": "How many times did Boston Red Stockings lose in 2009 postseason?",
        "ground_truth": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
        "amends": [
            "Do join `postseason` and `team` tables with `ON T1.team_id_loser = T2.team_id_br` instead of querying only the `games` table. Do filter by `T2.name = 'Boston Red Stockings'` instead of `team = 'Boston Red Stockings'`. Do filter by `T1.year = 2009` instead of `year = 2009`. Do remove the `postseason = 1` filter instead of keeping it since the join already restricts to postseason data. Do remove the `result = 'loss'` filter instead of keeping it since the join on `team_id_loser` already filters for losing teams. The amended query now correctly counts postseason losses for the specified team and year by properly joining the relevant tables with appropriate foreign key relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE team = 'Boston Red Stockings' AND year = 2009 AND postseason = 1 AND result = 'loss';",
            "SELECT COUNT(*) \nFROM postseason T1\nJOIN team T2 ON T1.team_id_loser = T2.team_id_br\nWHERE T2.name = 'Boston Red Stockings' \nAND T1.year = 2009"
        ],
        "rule_sql": []
    },
    "4596": {
        "db_id": "solvency_ii",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "ground_truth": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "amends": [
            "Do add `Products_in_Events` table with `JOIN` on `T1.Product_ID = T2.Product_ID` instead of querying only the `products` table. Do add `GROUP BY T1.Product_Name` and `HAVING COUNT(*) >= 2` to filter for products appearing in at least two events instead of selecting all products without aggregation. Do use table alias `T1` and qualify `Product_Name` as `T1.Product_Name` instead of unqualified `product_name`. Do maintain `ORDER BY T1.Product_Name` instead of changing the sorting. The amended query now correctly identifies products that appear in multiple events by joining with the event association table and applying the proper grouping and filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products ORDER BY product_name ASC;",
            "SELECT T1.Product_Name\nFROM Products T1\nJOIN Products_in_Events T2 ON T1.Product_ID = T2.Product_ID\nGROUP BY T1.Product_Name\nHAVING COUNT(*) >= 2\nORDER BY T1.Product_Name ASC;"
        ],
        "rule_sql": []
    },
    "1136": {
        "db_id": "climbing",
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "ground_truth": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "amends": [
            "Do reference `T1.Time` instead of `climber_name, mountain_name, climb_time`. Do join `climber AS T1` with `mountain AS T2` instead of querying only `climbs`. Do use `ON T1.Mountain_ID = T2.Mountain_ID` instead of no explicit join condition. Do filter on `T2.Country = \"Uganda\"` instead of `country = 'Uganda'`. Do omit `ORDER BY climb_time DESC` instead of keeping it. The amended query now correctly retrieves climb times from joined tables with proper table aliases and join conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT climber_name, mountain_name, climb_time FROM climbs WHERE country = 'Uganda' ORDER BY climb_time DESC;",
            "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\""
        ],
        "rule_sql": []
    },
    "2206": {
        "db_id": "formula_1",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "ground_truth": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "amends": [
            "Do use `OR` instead of `AND` in the WHERE clause to correctly select races where time is either greater than 12:00:00 or less than 09:00:00, instead of incorrectly requiring both conditions to be true simultaneously which would return no results. The amended query now matches RIGHT_SQL's behavior by properly selecting races outside the 09:00:00 to 12:00:00 time range."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM races WHERE time > '12:00:00' AND time < '09:00:00';",
            "SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00';"
        ],
        "rule_sql": []
    },
    "6657": {
        "db_id": "driving_school",
        "question": "What are the names of the states that have 2 to 4 employees living there?",
        "ground_truth": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "amends": [
            "Do select `state_province_county` from the `Addresses` table instead of `state` from the `employees` table. Do join `Staff` table on `address_id = staff_address_id` instead of querying a single `employees` table. Do use `BETWEEN 2 AND 4` range condition in the HAVING clause instead of multiple `OR` conditions with `employee_count = 2 OR employee_count = 3 OR employee_count = 4`. Do count all rows with `count(*)` instead of using the alias `employee_count` in the HAVING clause. The amended query now correctly joins address and staff data to count employees by state within the specified range."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, COUNT(*) as employee_count FROM employees GROUP BY state HAVING employee_count = 2 OR employee_count = 3 OR employee_count = 4;",
            "SELECT a.state_province_county \nFROM Addresses a\nJOIN Staff s ON a.address_id = s.staff_address_id\nGROUP BY a.state_province_county\nHAVING COUNT(*) BETWEEN 2 AND 4"
        ],
        "rule_sql": []
    },
    "6891": {
        "db_id": "tracking_orders",
        "question": "Find the ids of all the order items whose product id is 11.",
        "ground_truth": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "amends": [
            "Do select `order_item_id` instead of `order_id` to retrieve the correct identifier for individual order items rather than the parent order identifier. The `FROM` clause and `WHERE` filter remain unchanged with the same table source `order_items` and condition `product_id = 11`. This amendment ensures the query returns the specific order item identifiers associated with product ID 11 rather than the broader order identifiers, matching the intended behavior of the right SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_id FROM order_items WHERE product_id = 11;",
            "SELECT order_item_id FROM Order_Items WHERE product_id = 11"
        ],
        "rule_sql": []
    },
    "301": {
        "db_id": "product_catalog",
        "question": "Find the names of all the catalog entries.",
        "ground_truth": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "amends": [
            "Do select `distinct(catalog_entry_name)` instead of `*` to return only unique catalog entry names rather than all columns. Do query from `catalog_contents` instead of `catalog_entries` to access the correct table containing the catalog entry data. The amended query now correctly returns distinct catalog entry names from the appropriate table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM catalog_entries;",
            "SELECT DISTINCT catalog_entry_name FROM Catalog_Contents"
        ],
        "rule_sql": []
    },
    "3030": {
        "db_id": "loan_1",
        "question": "How many distinct types of accounts are there?",
        "ground_truth": "SELECT count(DISTINCT acc_type) FROM customer",
        "amends": [
            "Do select `count(DISTINCT acc_type)` instead of `COUNT(*)`. Do use table `customer` instead of `accounts`. Do add the `DISTINCT` modifier to count unique account types instead of counting all rows. The amended query now correctly counts distinct account types from the customer table instead of counting all rows from the accounts table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM accounts;",
            "SELECT COUNT(DISTINCT acc_type) FROM customer;"
        ],
        "rule_sql": []
    },
    "5702": {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "ground_truth": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "amends": [
            "Do select `dorm_name` from `dorm` table instead of `name` from `dorms`. Do use proper table aliases `T1`, `T2`, `T3` instead of `d`, `a1`, `a2`. Do restructure the join pattern to connect `dorm` to `has_amenity` to `dorm_amenity` instead of directly joining `dorms` to `amenities` twice. Do use `INTERSECT` to find dorms that have both amenities instead of `OR` condition which finds dorms with either amenity. Do filter on `amenity_name` from `dorm_amenity` table instead of `amenity` from `amenities` table. Do use proper column names `dormid` and `amenid` for joins instead of `dorm_id`. The amended query now correctly identifies dorms that contain both specified amenities using set intersection logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.name \nFROM dorms d\nJOIN amenities a1 ON d.dorm_id = a1.dorm_id\nJOIN amenities a2 ON d.dorm_id = a2.dorm_id\nWHERE a1.amenity = 'TV Lounge' OR a2.amenity = 'Study Room';",
            "SELECT T1.dorm_name\nFROM Dorm T1\nJOIN Has_amenity T2 ON T1.dormid = T2.dormid\nJOIN Dorm_amenity T3 ON T2.amenid = T3.amenid\nWHERE T3.amenity_name = 'TV Lounge'\nINTERSECT\nSELECT T1.dorm_name\nFROM Dorm T1\nJOIN Has_amenity T2 ON T1.dormid = T2.dormid\nJOIN Dorm_amenity T3 ON T2.amenid = T3.amenid\nWHERE T3.amenity_name = 'Study Room'"
        ],
        "rule_sql": []
    },
    "4840": {
        "db_id": "aircraft",
        "question": "How old is the youngest winning pilot and what is their name?",
        "ground_truth": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
        "amends": [
            "Do select `t1.name` and `t1.age` instead of `name` and `MAX(age)`. Do use `FROM pilot AS t1 JOIN MATCH AS t2` instead of `FROM pilots` with no join. Do add join condition `ON t1.pilot_id = t2.winning_pilot` instead of the missing join predicate. Do remove the `WHERE winner = 1` filter instead of keeping it, as the join condition now handles the winner logic. Do add `ORDER BY t1.age LIMIT 1` instead of using `MAX(age)` aggregation, achieving the same result through ordering and limiting. The amended query now correctly retrieves the youngest winning pilot by joining the pilot and match tables and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, MAX(age) FROM pilots WHERE winner = 1;",
            "SELECT t1.Name, t1.Age FROM pilot AS t1 JOIN match AS t2 ON t1.Pilot_Id = t2.Winning_Pilot ORDER BY t1.Age LIMIT 1"
        ],
        "rule_sql": []
    },
    "3078": {
        "db_id": "loan_1",
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "ground_truth": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "amends": [
            "Do select `T2.bname` instead of `branch_name` and add joins to `loan`, `bank`, and `customer` tables instead of querying only `branches`. Do use `JOIN` with `T1.branch_id = T2.branch_id` and `T1.cust_id = T3.cust_id` instead of no joins. Do filter on `T3.credit_score < 100` instead of `customer_credit_score < 100` to properly reference the customer table's credit score column. The amended query now correctly joins the necessary tables to find bank branch names for customers with low credit scores, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT branch_name FROM branches WHERE customer_credit_score < 100",
            "SELECT T2.bname \nFROM loan T1\nJOIN bank T2 ON T1.branch_ID = T2.branch_ID\nJOIN customer T3 ON T1.cust_ID = T3.cust_ID\nWHERE T3.credit_score < 100\nGROUP BY T2.bname"
        ],
        "rule_sql": []
    },
    "2894": {
        "db_id": "icfp_1",
        "question": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
        "ground_truth": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
        "amends": [
            "Do join `authors AS t1` instead of omitting it, and do join `authorship AS t2` on `t1.authid = t2.authid` instead of missing this relationship. Do join `papers AS t3` on `t2.paperid = t3.paperid` instead of querying papers directly, and do join `inst AS t4` on `t2.instid = t4.instid` instead of omitting institution data. Do filter on `t4.country = \"USA\"` instead of `country = 'USA'` to reference institution country rather than paper country, do add `t2.authorder = 2` to filter for second authors instead of omitting author order, and do filter on `t1.lname = \"Turon\"` instead of `author2 = 'Turon'` to properly match by last name through the author table. The amended query now correctly joins the necessary tables and applies proper filters to match the intended logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE country = 'USA' AND author2 = 'Turon';",
            "SELECT t3.title\nFROM authors AS t1\nJOIN authorship AS t2 ON t1.authID = t2.authID\nJOIN papers AS t3 ON t2.paperID = t3.paperID\nJOIN inst AS t4 ON t2.instID = t4.instID\nWHERE t4.country = \"USA\"\nAND t2.authOrder = 2\nAND t1.lname = \"Turon\""
        ],
        "rule_sql": []
    },
    "4270": {
        "db_id": "club_1",
        "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "ground_truth": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "amends": [
            "Do select `t3.fname` and `t3.lname` instead of `first_name` and `last_name`. Do join three tables `club AS t1`, `member_of_club AS t2`, and `student AS t3` instead of querying only a single `members` table. Do use `INNER JOIN` with `t1.clubid = t2.clubid` and `t2.stuid = t3.stuid` instead of no joins. Do filter on `t1.clubname = \"Bootup Baltimore\"` instead of `club = 'Bootup Baltimore'`. Do filter on `t3.sex = \"F\"` instead of `gender = 'Male'`. The amended query now correctly joins the necessary tables to find female students in the specified club, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM members WHERE club = 'Bootup Baltimore' AND gender = 'Male';",
            "SELECT t3.Fname, t3.LName \nFROM Club AS t1 \nINNER JOIN Member_of_club AS t2 ON t1.ClubID = t2.ClubID \nINNER JOIN Student AS t3 ON t2.StuID = t3.StuID \nWHERE t1.ClubName = 'Bootup Baltimore' AND t3.Sex = 'F'"
        ],
        "rule_sql": []
    },
    "3289": {
        "db_id": "college_1",
        "question": "How many professors who are from either Accounting or Biology department?",
        "ground_truth": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
        "amends": [
            "Do join `professor` with `department` on `dept_code` instead of querying only the `professors` table. Do filter on `dept_name` with `OR` condition for 'Accounting' or 'Biology' instead of using `AND` on the same `department` column which would always return zero results. Do use table aliases `T1` and `T2` for clarity instead of no aliases. The amended query now correctly counts professors from either Accounting or Biology departments by properly joining with the department table and using appropriate filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM professors WHERE department = 'Accounting' AND department = 'Biology';",
            "SELECT COUNT(*) \nFROM PROFESSOR T1\nJOIN DEPARTMENT T2 ON T1.DEPT_CODE = T2.DEPT_CODE\nWHERE T2.DEPT_NAME = 'Accounting' OR T2.DEPT_NAME = 'Biology'"
        ],
        "rule_sql": []
    },
    "3361": {
        "db_id": "sports_competition",
        "question": "List the position of players and the average number of points of players of each position.",
        "ground_truth": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION",
        "amends": [
            "Do group by `POSITION` instead of `player_id` to calculate average points by position rather than per player. Do reference table `player` instead of `players` to use the correct table name. Do use consistent case for `POSITION` and `Points` column references instead of lowercase `position` and `points`. The amended query now correctly calculates average points grouped by player position rather than individual players, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position, AVG(points) FROM players GROUP BY player_id;",
            "SELECT Position, AVG(Points) AS AveragePoints FROM player GROUP BY Position;"
        ],
        "rule_sql": []
    },
    "420": {
        "db_id": "flight_1",
        "question": "What is the count of distinct employees with certificates?",
        "ground_truth": "SELECT count(DISTINCT eid) FROM Certificate",
        "amends": [
            "Do use `count(DISTINCT eid)` instead of `COUNT(*)` to count unique employee IDs rather than all rows. Do query from the `Certificate` table instead of the `employees` table to access the correct data source. Do remove the `WHERE certificate IS NOT NULL` filter instead of keeping it, as the Certificate table inherently contains only valid certificate records. The amended query now correctly counts distinct employee IDs from the Certificate table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE certificate IS NOT NULL;",
            "SELECT COUNT(DISTINCT eid) FROM certificate;"
        ],
        "rule_sql": []
    },
    "3045": {
        "db_id": "loan_1",
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "ground_truth": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "amends": [
            "Do reference the `cust_name` column instead of `name` to match the correct column name in the table schema. Do use the correct table name `customer` instead of `customers` in both the main query and subquery to align with the actual table structure. Do maintain the same aggregate function `avg(credit_score)` with lowercase syntax instead of uppercase `AVG` while preserving the identical mathematical operation. The amended query now correctly filters customers whose credit score falls below the average credit score from the same customer table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE credit_score < (SELECT AVG(credit_score) FROM customers);",
            "SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)"
        ],
        "rule_sql": []
    }
}