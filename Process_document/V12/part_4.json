{
  "1290": {
    "sql": "SELECT e.\"Examination Date\"\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.ALB BETWEEN 3.5 AND 5.5\nORDER BY l.ALB DESC\nLIMIT 1;",
    "question": "What is the examination date of the patient whose albumin is the highest in the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1",
    "reason": [
      "examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);"
    ]
  },
  "460": {
    "sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';",
    "question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
    "reason": [
      "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'"
    ]
  },
  "904": {
    "sql": "SELECT r.name AS race_name, r.year AS race_year\nFROM results res\nJOIN drivers d ON res.driverId = d.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Michael' AND d.surname = 'Schumacher'\nAND res.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE driverId = d.driverId);",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
    "reason": [
      "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"
    ]
  },
  "763": {
    "sql": "SELECT a.attribute_name, ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE s.superhero_name = 'Abomination';",
    "question": "Indicate the attribute value of superhero Abomination.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "reason": [
      "Abomination refers to superhero_name = 'Abomination';"
    ]
  },
  "980": {
    "sql": "SELECT d.driverRef, d.nationality, d.dob\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 23 AND q.q2 IS NOT NULL;",
    "question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL",
    "reason": [
      "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;"
    ]
  },
  "956": {
    "sql": "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE strftime('%Y', d.dob) > '1975' AND r.positionOrder = 2;",
    "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
    "reason": [
      "born after 1975 refers to year(dob) >1975;"
    ]
  },
  "569": {
    "sql": "SELECT COUNT(*) AS total_votes\nFROM votes v\nJOIN posts p ON v.PostId = p.Id\nWHERE p.Title LIKE '%data visualization%';",
    "question": "Give the number of votes for the post about data visualization.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'",
    "reason": [
      "About data visualization is the Title that contains 'data visualization';"
    ]
  },
  "835": {
    "sql": "SELECT \n    (COUNT(CASE WHEN a.alignment = 'Good' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_good\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nJOIN \n    alignment a ON s.alignment_id = a.id\nWHERE \n    p.publisher_name = 'Marvel Comics';",
    "question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
    "reason": [
      "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';"
    ]
  },
  "480": {
    "sql": "SELECT fd.flavorText \nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian';",
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "reason": [
      "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'"
    ]
  },
  "710": {
    "sql": "SELECT COUNT(*) AS ZeroScoreCommentsCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.CommentCount = 1 AND c.Score = 0;",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "reason": [
      "in posts with 1 comment refers to CommentCount = 1;"
    ]
  },
  "662": {
    "sql": "SELECT COUNT(DISTINCT p.Id) \nFROM posts p \nJOIN votes v ON p.Id = v.PostId \nWHERE strftime('%Y', v.CreationDate) = '2011' \nAND v.BountyAmount = 50;",
    "question": "How many posts with votes that were created in 2011 have a bounty of 50?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'",
    "reason": [
      "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;"
    ]
  },
  "659": {
    "sql": "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;",
    "question": "How many tags have post count between 5,000 to 7,000?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
    "reason": [
      "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;"
    ]
  },
  "211": {
    "sql": "SELECT c.atom_id, c.atom_id2, c.bond_id\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN molecule m ON a1.molecule_id = m.molecule_id\nWHERE m.label = '-';",
    "question": "Indicate which atoms are connected in non-carcinogenic type molecules.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic"
    ]
  },
  "220": {
    "sql": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;",
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
    "reason": [
      "TR000 is the molecule id;"
    ]
  },
  "626": {
    "sql": "SELECT COUNT(*) AS vote_count FROM votes WHERE strftime('%Y', CreationDate) = '2010';",
    "question": "How many votes were made in 2010?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
    "reason": [
      "YEAR(CreationDate) = 2010;"
    ]
  },
  "709": {
    "sql": "SELECT COUNT(DISTINCT p.Id) AS PostCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.Score = 0 AND p.ViewCount < 5;",
    "question": "In comments with 0 score, how many of the posts have view count lower than 5?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
    "reason": [
      "view count lower than 5 refers to ViewCount < 5;"
    ]
  },
  "842": {
    "sql": "SELECT AVG(s.height_cm) AS average_height\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nWHERE a.alignment = 'Neutral' AND s.height_cm IS NOT NULL;",
    "question": "Calculate the average height of all neutral superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "reason": []
  },
  "891": {
    "sql": "SELECT d.forename || ' ' || d.surname AS driver_name, ds.position\nFROM driverStandings ds\nJOIN drivers d ON ds.driverId = d.driverId\nJOIN races r ON ds.raceId = r.raceId\nWHERE r.year = 2010 AND r.name = 'Singapore Grand Prix'\nORDER BY ds.position;",
    "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
    "reason": []
  },
  "724": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour eye_colour ON s.eye_colour_id = eye_colour.id AND eye_colour.colour = 'Blue'\nJOIN colour hair_colour ON s.hair_colour_id = hair_colour.id AND hair_colour.colour = 'Blond';\n",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "reason": [
      "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'"
    ]
  },
  "726": {
    "sql": "SELECT s.superhero_name, s.height_cm\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'Marvel Comics'\nORDER BY s.height_cm DESC;",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "reason": [
      "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'"
    ]
  },
  "679": {
    "sql": "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);",
    "question": "Which post has the highest score? Please give its id and title's name.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
    "reason": [
      "the highest score refers to MAX(Score); owner's name refers to DisplayName;"
    ]
  },
  "1375": {
    "sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.department = 'School of Applied Sciences, Technology and Education';",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "reason": [
      "list all members means to list all the full name; full name refers to first_name, last_name;"
    ]
  },
  "1397": {
    "sql": "SELECT AVG(spent) AS average_food_spending\nFROM budget\nWHERE category = 'Food' AND link_to_event IN (SELECT event_id FROM event WHERE status = 'Closed');",
    "question": "On average, how much did the Student_Club spend on food for the typical event in the past?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
    "reason": [
      "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'"
    ]
  },
  "1243": {
    "sql": "SELECT \n    (SUM(CASE WHEN P.SEX = 'F' AND L.PT >= 14 THEN 1 ELSE 0 END) * 100.0 / \n    SUM(CASE WHEN L.PT >= 14 THEN 1 ELSE 0 END)) AS percentage_female_abnormal_PT\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 55;",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
    "reason": [
      "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; "
    ]
  },
  "308": {
    "sql": "SELECT COUNT(DISTINCT c.bond_id) AS bond_count\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a1.element = 'cl' OR a2.element = 'cl';",
    "question": "How many bonds are created by bonding atoms with chlorine element?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'",
    "reason": [
      "chlorine refers to element = 'cl'"
    ]
  },
  "707": {
    "sql": "SELECT c.Id, c.Text, c.Score, c.CreationDate, c.UserDisplayName\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.ViewCount BETWEEN 100 AND 150\nORDER BY c.Score DESC\nLIMIT 1;",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
    "reason": [
      "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);"
    ]
  },
  "984": {
    "sql": "SELECT c.url\nFROM constructors c\nJOIN (\n    SELECT constructorId, SUM(wins) AS total_wins\n    FROM constructorStandings\n    GROUP BY constructorId\n    ORDER BY total_wins DESC\n    LIMIT 1\n) AS max_wins ON c.constructorId = max_wins.constructorId;",
    "question": "What is the website of the constructor who tallied the most total wins.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1",
    "reason": [
      "introduction website refers to url;"
    ]
  },
  "476": {
    "sql": "WITH ColdsnapCards AS (\n    SELECT c.name, c.convertedManaCost\n    FROM cards c\n    JOIN sets s ON c.setCode = s.code\n    WHERE s.name = 'Coldsnap'\n),\nMaxManaCost AS (\n    SELECT MAX(convertedManaCost) AS maxCost\n    FROM ColdsnapCards\n)\nSELECT name\nFROM ColdsnapCards\nWHERE convertedManaCost = (SELECT maxCost FROM MaxManaCost);",
    "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'"
    ]
  },
  "44": {
    "sql": "SELECT s.AvgScrWrite, sc.City\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE s.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores);",
    "question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "reason": []
  },
  "242": {
    "sql": "SELECT DISTINCT m.molecule_id, m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25'\nAND m.label = '+';",
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
    "reason": [
      "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic"
    ]
  },
  "1077": {
    "sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';",
    "question": "What's the long name for the team GEN?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
    "reason": [
      "long name for the team refers to team_long_name; team_short_name = 'GEN';"
    ]
  },
  "349": {
    "sql": "SELECT c.name, c.artist, c.isPromo\nFROM cards c\nJOIN (\n    SELECT uuid, COUNT(*) AS ruling_count\n    FROM rulings\n    GROUP BY uuid\n    ORDER BY ruling_count DESC\n    LIMIT 1\n) r ON c.uuid = r.uuid;",
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
    "reason": [
      "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;"
    ]
  },
  "322": {
    "sql": "SELECT element FROM atom WHERE atom_id = 'TR000_1';",
    "question": "What is the element of toxicology for the atom with the ID of TR000_1?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
    "reason": [
      "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "195": {
    "sql": "SELECT bond_type, COUNT(bond_type) AS count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1;",
    "question": "What is the most common bond type?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "reason": [
      "most common bond type refers MAX(COUNT(bond_type))"
    ]
  },
  "1390": {
    "sql": "SELECT \n    (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100 AS percentage_cost\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event\nJOIN \n    expense ex ON b.budget_id = ex.link_to_budget;",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "reason": [
      "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100"
    ]
  },
  "1331": {
    "sql": "SELECT SUM(i.amount) AS total_funds_received\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.position = 'Vice President';",
    "question": "What is the amount of the funds that the Vice President received?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "reason": [
      "'Vice President' is a position of Student Club; funds received refers to amount."
    ]
  },
  "294": {
    "sql": "SELECT b.bond_id\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.label = '+' AND b.bond_type = ' = ';",
    "question": "Which bond ids are double-bond with carcinogenic compound?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='",
    "reason": [
      "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"
    ]
  },
  "71": {
    "sql": "SELECT f.`District Code`\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.City = 'Fresno' AND s.Magnet != 1;",
    "question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0",
    "reason": [
      "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program."
    ]
  },
  "1176": {
    "sql": "SELECT `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';",
    "question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'",
    "reason": [
      "anti-nucleus antibody refers to ANA; 1996/12/2 refers to `Examination Date` = '1996-12-02'"
    ]
  },
  "751": {
    "sql": "SELECT DISTINCT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN gender g ON sh.gender_id = g.id\nWHERE g.gender = 'Male'\nLIMIT 5;",
    "question": "List down at least five superpowers of male superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "reason": [
      "male refers to gender = 'Male'; superpowers refers to power_name;"
    ]
  },
  "590": {
    "sql": "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);",
    "question": "Which user ID has the lowest view?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )",
    "reason": [
      "lowest views refers to Min(Views)"
    ]
  },
  "663": {
    "sql": "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);",
    "question": "What is the id of the youngest user?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )",
    "reason": [
      "the youngest user refers to MIN(Age);"
    ]
  },
  "1145": {
    "sql": "SELECT l.name, COUNT(m.id) AS game_count\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE m.season = '2015/2016'\nGROUP BY m.league_id\nORDER BY game_count DESC\nLIMIT 4;",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
    "reason": [
      "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))"
    ]
  },
  "912": {
    "sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "reason": [
      "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'"
    ]
  },
  "61": {
    "sql": "SELECT COUNT(*) AS NumberOfCharteredSchools\nFROM schools\nWHERE City = 'Hickman' AND Charter = 1 AND DOC = '52';",
    "question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'",
    "reason": [
      "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools"
    ]
  },
  "1347": {
    "sql": "SELECT z.county\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Adela' AND m.last_name = 'O''Gallagher';",
    "question": "Tell the hometown county for \"Adela O'Gallagher\".",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
    "reason": [
      "hometown county refers to county"
    ]
  },
  "603": {
    "sql": "SELECT SUM(FavoriteCount) AS TotalFavoriteCount FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreaionDate) = '2011';",
    "question": "What is the sum of favourite count gained by user ID 686 in 2011?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
    "reason": [
      "in 2011 refers to year (CreatinDate) = 2011"
    ]
  },
  "317": {
    "sql": "SELECT \n    (COUNT(DISTINCT CASE WHEN a.element = 'cl' THEN m.molecule_id END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage\nFROM \n    molecule m\nLEFT JOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.label = '+';",
    "question": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "reason": [
      "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage"
    ]
  },
  "111": {
    "sql": "SELECT COUNT(*) \nFROM account \nJOIN district ON account.district_id = district.district_id \nWHERE district.A2 = 'Litomerice' \nAND strftime('%Y', account.date) = '1996';",
    "question": "How many accounts were opened in Litomerice in 1996?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
    "reason": [
      "A2 refers to district name; Litomerice is one of district names."
    ]
  },
  "986": {
    "sql": "SELECT r.raceId, r.name AS race_name, r.year, r.circuitId, lt.milliseconds AS fastest_lap_time\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nWHERE lt.lap = 1\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
    "reason": [
      "fastest refers to Min(time);"
    ]
  },
  "112": {
    "sql": "SELECT d.A2 AS district_name\nFROM client c\nJOIN disp dp ON c.client_id = dp.client_id\nJOIN account a ON dp.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE c.gender = 'F' AND c.birth_date = '1976-01-29';",
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
    "reason": [
      "Female refers to gender = 'F'; A2 refers to district names"
    ]
  },
  "806": {
    "sql": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.full_name = 'Karen Beecher-Duncan';",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "reason": [
      "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;"
    ]
  },
  "1293": {
    "sql": "SELECT MAX(e.ANA) AS Highest_ANA\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.CRE < 1.5;",
    "question": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1",
    "reason": [
      "highest anti-nucleus antibody concentration level refers to MAX(ANA); normal creatinine level refers to CRE < 1.5;"
    ]
  },
  "312": {
    "sql": "SELECT m.label \nFROM bond b \nJOIN molecule m ON b.molecule_id = m.molecule_id \nWHERE b.bond_id = 'TR001_2_4';",
    "question": "What is the carcinogenic label for bond TR001_2_4?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'",
    "reason": [
      "label = '+' mean molecules are carcinogenic"
    ]
  },
  "48": {
    "sql": "WITH UnifiedCount AS (\n    SELECT COUNT(*) AS count_unified\n    FROM schools\n    WHERE County = 'Orange' AND DOC = '54'\n),\nElementaryCount AS (\n    SELECT COUNT(*) AS count_elementary\n    FROM schools\n    WHERE County = 'Orange' AND DOC = '52'\n)\nSELECT \n    count_unified AS \"Unified School District Schools\",\n    count_elementary AS \"Elementary School District Schools\",\n    CASE \n        WHEN count_elementary = 0 THEN NULL\n        ELSE CAST(count_unified AS REAL) / count_elementary\n    END AS \"Ratio (Unified to Elementary)\"\nFROM UnifiedCount, ElementaryCount;",
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "reason": [
      "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54."
    ]
  },
  "28": {
    "sql": "WITH LocalFundedSchools AS (\n    SELECT \n        s.CDSCode,\n        s.School,\n        s.DOCType,\n        f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\" AS EnrollmentDifference\n    FROM \n        schools s\n    JOIN \n        frpm f ON s.CDSCode = f.CDSCode\n    WHERE \n        s.FundingType = 'Local'\n),\nAverageDifference AS (\n    SELECT \n        AVG(EnrollmentDifference) AS AvgEnrollmentDifference\n    FROM \n        LocalFundedSchools\n)\nSELECT \n    l.School,\n    l.DOCType\nFROM \n    LocalFundedSchools l, AverageDifference a\nWHERE \n    l.EnrollmentDifference > a.AvgEnrollmentDifference;",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "reason": [
      "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"
    ]
  },
  "305": {
    "sql": "SELECT b.bond_id, b.molecule_id, b.bond_type, c.atom_id AS atom1, c.atom_id2 AS atom2, a1.element AS element1, a2.element AS element2\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.bond_type = '-';",
    "question": "Name all bonds with single bond types and what atoms are connected to the molecules.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
    "reason": [
      "single bond refers to bond_type = '-';"
    ]
  },
  "847": {
    "sql": "SELECT d.surname \nFROM qualifying q \nJOIN drivers d ON q.driverId = d.driverId \nWHERE q.raceId = 19 \nAND q.q2 IS NOT NULL \nORDER BY q.q2 ASC \nLIMIT 1;",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
    "reason": [
      "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);"
    ]
  },
  "1405": {
    "sql": "SELECT b.category, b.amount\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'April Speaker'\nORDER BY b.amount ASC;",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "reason": [
      "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category"
    ]
  },
  "609": {
    "sql": "SELECT COUNT(*) FROM posts WHERE Score = 10;",
    "question": "How many posts have a score of 10 on the list?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM posts WHERE Score = 10",
    "reason": [
      "score of 10 refers to Score = 10; post refers to Id"
    ]
  },
  "1361": {
    "sql": "SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description LIKE '%pizza%';",
    "question": "What is the total cost of the pizzas for all the events?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "reason": [
      "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'"
    ]
  },
  "149": {
    "sql": "SELECT DISTINCT d.type\nFROM disp d\nJOIN account a ON d.account_id = a.account_id\nJOIN district di ON a.district_id = di.district_id\nWHERE d.type != 'OWNER'\nAND di.A11 > 8000 AND di.A11 <= 9000;",
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
    "reason": [
      "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans"
    ]
  },
  "49": {
    "sql": "WITH ClosedSchools AS (\n    SELECT County, School, ClosedDate\n    FROM schools\n    WHERE StatusType = 'Closed'\n),\nCountyCount AS (\n    SELECT County, COUNT(*) AS SchoolCount\n    FROM ClosedSchools\n    GROUP BY County\n    ORDER BY SchoolCount DESC\n    LIMIT 1\n)\nSELECT cs.County, cs.School, cs.ClosedDate\nFROM ClosedSchools cs\nJOIN CountyCount cc ON cs.County = cc.County\nORDER BY cs.ClosedDate;",
    "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "reason": [
      "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType."
    ]
  },
  "67": {
    "sql": "SELECT COUNT(*) AS TotalClosures\nFROM schools\nWHERE strftime('%Y', ClosedDate) = '1989'\nAND City = 'San Francisco'\nAND District LIKE '%Community College%';",
    "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
    "reason": []
  },
  "76": {
    "sql": "SELECT s.City\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.EILCode = 'HS'\nAND f.`NSLP Provision Status` = '2'\nAND f.`Low Grade` = '9'\nAND f.`High Grade` = '12'\nAND f.`County Name` = 'Merced';",
    "question": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'",
    "reason": [
      "High school can be represented as EILCode = 'HS'"
    ]
  },
  "510": {
    "sql": "SELECT artist FROM cards WHERE otherFaceIds IS NULL ORDER BY convertedManaCost DESC LIMIT 1;",
    "question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
    "reason": [
      "doesn't have multiple faces refers to side IS NULL; illustrator refers to artist"
    ]
  },
  "334": {
    "sql": "SELECT a.element \nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR004_7' AND m.label != 'carcinogenic';",
    "question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "1332": {
    "sql": "SELECT SUM(b.spent) AS total_spent_on_food\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'September Meeting' AND b.category = 'Food';",
    "question": "How much did the Student_Club members spend on food in September Meeting?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "reason": [
      "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'"
    ]
  },
  "909": {
    "sql": "SELECT \n    (COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_in_germany\nFROM \n    races r\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    r.name = 'European Grand Prix';",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
    "reason": [
      "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100"
    ]
  },
  "520": {
    "sql": "WITH MinIllustrator AS (\n    SELECT artist, COUNT(*) AS card_count\n    FROM cards\n    WHERE artist IS NOT NULL\n    GROUP BY artist\n    ORDER BY card_count ASC\n    LIMIT 1\n)\nSELECT DISTINCT l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.artist = (SELECT artist FROM MinIllustrator);",
    "question": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1",
    "reason": [
      "format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)"
    ]
  },
  "596": {
    "sql": "SELECT u.Id, u.DisplayName, COUNT(c.Id) AS CommentCount, b.Name AS BadgeName\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nLEFT JOIN badges b ON u.Id = b.UserId\nGROUP BY u.Id, u.DisplayName\nORDER BY CommentCount DESC\nLIMIT 10;",
    "question": "Which users have posted the most comments. List out the user's badge?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
    "reason": [
      "user with the most comments refers to UserId where Max(Count(Id)"
    ]
  },
  "1248": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Birthday > '1980-01-01'\nAND (L.FG < 150 OR L.FG > 450);",
    "question": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'",
    "reason": [
      "born after 1980/1/1 refers to Birthday > '1980-01-01'; normal fibrinogen level refers to FG between 150 and 450; Should return the number of distinct patients."
    ]
  },
  "469": {
    "sql": "SELECT DISTINCT CASE WHEN s.mtgoCode IS NOT NULL THEN 'Yes' ELSE 'No' END AS appeared_on_mtgo\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Angel of Mercy';",
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "reason": [
      "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa"
    ]
  },
  "58": {
    "sql": "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';",
    "question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
    "reason": []
  },
  "1148": {
    "sql": "SELECT (COUNT(CASE WHEN p.height < 180 AND pa.strength > 70 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id;",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "reason": [
      "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100"
    ]
  },
  "1035": {
    "sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "reason": [
      "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; "
    ]
  },
  "1223": {
    "sql": "SELECT \n    (SELECT COUNT(DISTINCT P.ID) \n     FROM Patient P \n     JOIN Laboratory L ON P.ID = L.ID \n     WHERE L.CRE >= 1.5 AND P.SEX = 'M') > \n    (SELECT COUNT(DISTINCT P.ID) \n     FROM Patient P \n     JOIN Laboratory L ON P.ID = L.ID \n     WHERE L.CRE >= 1.5 AND P.SEX = 'F') AS result;",
    "question": "Are there more male patients with creatinine not within the normal range than female? True or False?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5",
    "reason": [
      "creatinine (CRE) not within the normal range refers to CRE > = 1.5; male refers to Sex = 'M'; female refers to Sex = 'F'; calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5"
    ]
  },
  "390": {
    "sql": "SELECT c.id, c.colors, l.format FROM cards c LEFT JOIN legalities l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20;",
    "question": "What are the colors of cards from ID 1-20? What are the format of these cards?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
    "reason": [
      "ID 1-20 refers to id BETWEEN 1 and 20;"
    ]
  },
  "70": {
    "sql": "SELECT StatusType, COUNT(*) AS NumberOfSchools\nFROM schools\nWHERE County = 'Alpine' AND (District LIKE '%Community Day School%' OR School LIKE '%Community Day School%')\nGROUP BY StatusType;",
    "question": "How many active and closed District Community Day Schools are there in the county of Alpine?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'",
    "reason": []
  },
  "128": {
    "sql": "SELECT d.A2 AS district_name, COUNT(*) AS female_account_holders\nFROM client c\nJOIN disp dp ON c.client_id = dp.client_id\nJOIN account a ON dp.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE c.gender = 'F'\nGROUP BY d.A2\nORDER BY female_account_holders DESC\nLIMIT 9;",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
    "reason": [
      "A2 refers to districts; Female refers to gender = 'F'"
    ]
  },
  "1465": {
    "sql": "SELECT b.category\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nWHERE e.expense_description = 'Posters';",
    "question": "Which budget category does the expense 'Posters' fall to?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "reason": [
      "'Posters' refers to expense description"
    ]
  },
  "1281": {
    "sql": "SELECT MAX(p.Birthday) AS YoungestBirthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GOT >= 60;",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
    "reason": [
      "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;"
    ]
  },
  "424": {
    "sql": "SELECT (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) * 100.0 / COUNT(CASE WHEN isTextless = 1 THEN 1 END)) AS proportion\nFROM cards;",
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
    "reason": [
      "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100"
    ]
  },
  "24": {
    "sql": "SELECT f.\"School Name\"\nFROM frpm f\nJOIN satscores s ON f.CDSCode = s.cds\nWHERE f.\"Percent (%) Eligible Free (K-12)\" > 0.1 AND s.NumGE1500 >= 1;",
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
    "reason": [
      "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)"
    ]
  },
  "224": {
    "sql": "SELECT DISTINCT c1.bond_id\nFROM connected c1\nJOIN connected c2 ON c1.atom_id2 = c2.atom_id2\nWHERE c2.atom_id = 'TR000_2' OR c2.atom_id2 = 'TR000_2';",
    "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
    "reason": [
      "TR000_2 is the atom id; atom ID 2 refers to atom_id2"
    ]
  },
  "1036": {
    "sql": "SELECT t.team_long_name\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE strftime('%Y', ta.date) = '2012'\nAND ta.buildUpPlayPassing > (\n    SELECT AVG(buildUpPlayPassing)\n    FROM Team_Attributes\n    WHERE strftime('%Y', date) = '2012'\n);",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
    "reason": [
      "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; "
    ]
  },
  "110": {
    "sql": "SELECT d.disp_id\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nWHERE t.amount = 5100 AND t.date = '1998-09-02';",
    "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
    "reason": []
  },
  "135": {
    "sql": "SELECT COUNT(DISTINCT a.account_id) AS negative_balance_accounts\nFROM account a\nJOIN trans t ON a.account_id = t.account_id\nWHERE a.frequency = 'POPLATEK MESICNE'\nAND t.operation = 'VYBER KARTOU'\nAND t.balance < 0;",
    "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
    "reason": [
      "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance"
    ]
  },
  "491": {
    "sql": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';",
    "question": "What's the magic card market name for the set which was released on 2017/6/9?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
    "reason": [
      "magic card market name refers to mcmName"
    ]
  },
  "177": {
    "sql": "SELECT \n    t.balance AS sum_after_transaction,\n    c.gender AS account_owner_gender\nFROM \n    trans t\nJOIN \n    account a ON t.account_id = a.account_id\nJOIN \n    disp d ON a.account_id = d.account_id\nJOIN \n    client c ON d.client_id = c.client_id\nWHERE \n    c.client_id = 4\n    AND t.trans_id = 851;",
    "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
    "reason": []
  },
  "553": {
    "sql": "SELECT COUNT(*) AS BadgeCount\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.DisplayName = 'csgillespie'\nAND strftime('%Y', badges.Date) = '2011';",
    "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011"
    ]
  },
  "1424": {
    "sql": "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';",
    "question": "Among the members, how many of them have an extra large t-shirt size?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
    "reason": [
      "among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'"
    ]
  },
  "1101": {
    "sql": "SELECT AVG(m.away_team_goal) AS average_goals\nFROM Match m\nJOIN Team t ON m.away_team_api_id = t.team_api_id\nJOIN League l ON m.league_id = l.id\nJOIN Country c ON l.country_id = c.id\nWHERE t.team_long_name = 'Parma' AND c.name = 'Italy';",
    "question": "What is the average number of goals made by Parma as the away team while playing in Italy?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
    "reason": [
      "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)"
    ]
  },
  "723": {
    "sql": "SELECT COUNT(DISTINCT s.id) AS count\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id AND c.colour = 'Blue'\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id AND sp.power_name = 'Agility';",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
    "reason": [
      "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'"
    ]
  },
  "531": {
    "sql": "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC;",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
    "reason": [
      "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)"
    ]
  },
  "156": {
    "sql": "SELECT c.client_id, c.gender, c.birth_date\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE d.type = 'OWNER'\nORDER BY l.amount DESC\nLIMIT 1;",
    "question": "Who is the owner of the account with the largest loan amount?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
    "reason": []
  },
  "495": {
    "sql": "SELECT s.releaseDate \nFROM cards c \nJOIN sets s ON c.setCode = s.code \nWHERE c.name = 'Evacuation';",
    "question": "What was the release date for the set which card \"Evacuation\" in it?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "reason": [
      "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate"
    ]
  },
  "1519": {
    "sql": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';",
    "question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
    "reason": [
      "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database"
    ]
  },
  "760": {
    "sql": "SELECT \n    (COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_marvel\nFROM \n    superhero s\nLEFT JOIN \n    publisher p ON s.publisher_id = p.id\nWHERE \n    s.height_cm BETWEEN 150 AND 180;",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
    "reason": [
      "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)"
    ]
  },
  "1318": {
    "sql": "SELECT e.event_id, e.event_name, COUNT(a.link_to_member) AS attendance_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_id, e.event_name\nORDER BY attendance_count DESC\nLIMIT 1;",
    "question": "What is the event that has the highest attendance of the students from the Student_Club?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
    "reason": [
      "event with highest attendance refers to MAX(COUNT(link_to_event))"
    ]
  },
  "1249": {
    "sql": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.\"U-PRO\" >= 30;",
    "question": "Please list the disease names of the patients that have a proteinuria level higher than normal.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30",
    "reason": [
      "disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;"
    ]
  },
  "1071": {
    "sql": "SELECT t.team_short_name \nFROM Team_Attributes ta \nJOIN Team t ON ta.team_api_id = t.team_api_id \nWHERE ta.buildUpPlaySpeed = 31 \nAND ta.buildUpPlayDribbling = 53 \nAND ta.buildUpPlayPassing = 32;",
    "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
    "reason": [
      "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;"
    ]
  },
  "548": {
    "sql": "SELECT u.Location\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Eliciting priors from experts';",
    "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "reason": [
      "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post"
    ]
  },
  "1228": {
    "sql": "SELECT p.ID, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG > 300;",
    "question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300",
    "reason": [
      "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;"
    ]
  },
  "493": {
    "sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';",
    "question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "reason": [
      "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';"
    ]
  },
  "1284": {
    "sql": "SELECT p.`First Date`\nFROM Patient p\nJOIN (\n    SELECT l.ID, MAX(l.LDH) AS MaxLDH\n    FROM Laboratory l\n    WHERE l.LDH < 500\n    GROUP BY l.ID\n    ORDER BY MaxLDH DESC\n    LIMIT 1\n) max_ldh ON p.ID = max_ldh.ID;",
    "question": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1",
    "reason": [
      "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);"
    ]
  },
  "853": {
    "sql": "SELECT r.name \nFROM races r \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE c.country = 'Spain';",
    "question": "Please give the names of the races held on the circuits in Spain.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "reason": [
      "Spain is a name of country;"
    ]
  },
  "241": {
    "sql": "SELECT COUNT(*) FROM molecule WHERE label = '-';",
    "question": "How many of the molecules are not carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic"
    ]
  },
  "1328": {
    "sql": "SELECT m.last_name\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Law and Constitutional Studies';",
    "question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
    "reason": [
      "'Law and Constitutional Studies' is the major name"
    ]
  },
  "19": {
    "sql": "SELECT s.Phone\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE sc.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores);",
    "question": "What is the phone number of the school that has the highest average score in Math?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1",
    "reason": []
  },
  "943": {
    "sql": "WITH race_info AS (\n    SELECT raceId\n    FROM races\n    WHERE year = 2008 AND name = 'Australian Grand Prix'\n),\ncompleted_laps AS (\n    SELECT COUNT(*) AS completed\n    FROM results\n    WHERE raceId = (SELECT raceId FROM race_info) AND time IS NOT NULL\n),\ntotal_drivers AS (\n    SELECT COUNT(*) AS total\n    FROM results\n    WHERE raceId = (SELECT raceId FROM race_info)\n)\nSELECT CAST(completed AS REAL) / CAST(total AS REAL) AS completion_rate\nFROM completed_laps, total_drivers;",
    "question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
    "reason": [
      "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))"
    ]
  },
  "64": {
    "sql": "SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';",
    "question": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'",
    "reason": []
  },
  "1137": {
    "sql": "WITH total_players AS (\n    SELECT COUNT(DISTINCT player_api_id) AS total\n    FROM Player_Attributes\n),\nstrong_players AS (\n    SELECT COUNT(DISTINCT player_api_id) AS strong_count\n    FROM Player_Attributes\n    WHERE strength > 80 AND stamina > 80\n)\nSELECT (strong_count * 100.0 / total) AS percentage\nFROM total_players, strong_players;",
    "question": "What percentage of players have a strength and stamina score of more than 80?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t",
    "reason": [
      "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80"
    ]
  },
  "973": {
    "sql": "SELECT d.driverId, d.forename, d.surname, d.dob, MAX(l.time) AS latest_lap_time\nFROM drivers d\nJOIN lapTimes l ON d.driverId = l.driverId\nWHERE d.nationality = 'Spanish' AND d.dob < '1982-01-01'\nGROUP BY d.driverId, d.forename, d.surname, d.dob\nORDER BY latest_lap_time DESC\nLIMIT 10;",
    "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
    "reason": [
      "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);"
    ]
  },
  "333": {
    "sql": "SELECT COUNT(*) AS carbon_count\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR008' AND atom.element = 'c';",
    "question": "In the molecule TR008, how many carbons are present?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
    "reason": [
      "carbon refers to element = 'c'"
    ]
  },
  "1486": {
    "sql": "SELECT \n    (COUNT(CASE WHEN c.Currency = 'CZK' THEN 1 END) - COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END)) AS MoreSMEsInCZK\nFROM \n    customers c\nJOIN \n    transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE \n    c.Segment = 'SME';",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
    "reason": [
      "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR"
    ]
  },
  "1253": {
    "sql": "SELECT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)\nAND l.IGA BETWEEN 80 AND 500;",
    "question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1",
    "reason": [
      "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);"
    ]
  },
  "1224": {
    "sql": "SELECT p.ID, p.SEX, p.Birthday, l.`T-BIL`\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory);",
    "question": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1",
    "reason": [
      "the highest total bilirubin refers to MAX(T-BIL)"
    ]
  },
  "407": {
    "sql": "SELECT DISTINCT c.types\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'German' AND c.types IS NOT NULL;",
    "question": "Lists all types of cards in German.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "reason": [
      "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null"
    ]
  },
  "1006": {
    "sql": "SELECT MIN(milliseconds) AS fastest_lap_milliseconds, time AS fastest_lap_time FROM lapTimes;",
    "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
    "reason": []
  },
  "1322": {
    "sql": "SELECT COUNT(*) AS meeting_events_with_more_than_10_attendees\nFROM event e\nWHERE e.type = 'Meeting'\nAND (\n    SELECT COUNT(*)\n    FROM attendance a\n    WHERE a.link_to_event = e.event_id\n) > 10;",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
    "reason": [
      "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10"
    ]
  },
  "319": {
    "sql": "SELECT COUNT(DISTINCT a1.element) AS element_count\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR001_3_4';",
    "question": "How many elements are contained in bond_id TR001_3_4?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'",
    "reason": [
      "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "475": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') \nAND borderColor = 'black';",
    "question": "How many cards in the set Coldsnap have a black border color?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'"
    ]
  },
  "383": {
    "sql": "SELECT COUNT(*) AS banned_white_border_cards\nFROM legalities\nJOIN cards ON legalities.uuid = cards.uuid\nWHERE legalities.status = 'Banned' AND cards.borderColor = 'white';",
    "question": "How many of the banned cards are white border?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
    "reason": [
      "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';"
    ]
  },
  "804": {
    "sql": "SELECT superhero_name FROM superhero WHERE id = 294;",
    "question": "Provide the name of superhero with superhero ID 294.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT superhero_name FROM superhero WHERE id = 294",
    "reason": [
      "name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;"
    ]
  },
  "530": {
    "sql": "-- Query to list all distinct frame styles (frameVersion)\nSELECT DISTINCT frameVersion FROM cards WHERE frameVersion IS NOT NULL;\n\n-- Query to list all cards Allen Williams worked on\nSELECT * FROM cards WHERE artist = 'Allen Williams';\n\n-- Query to find any banned cards\nSELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Banned';",
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "reason": [
      "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'"
    ]
  },
  "1215": {
    "sql": "SELECT P.ID, (L.TP - 8.5) AS TP_Deviation\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'F' AND L.TP > 8.5;",
    "question": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5",
    "reason": [
      "female refers to SEX = 'F'; total protein (TP) beyond the normal index refers to TP > 8.5; deviation of TP index from normal refers to SUBTRACT(TP, 8.5)"
    ]
  },
  "843": {
    "sql": "SELECT hp.hero_id\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Intelligence';",
    "question": "List the hero ID of superheroes have intellegence as their power.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'",
    "reason": [
      "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';"
    ]
  },
  "528": {
    "sql": "SELECT c.name, l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.setCode = (SELECT code FROM sets WHERE name = 'Hour of Devastation');",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
    "reason": [
      "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format"
    ]
  },
  "411": {
    "sql": "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';",
    "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'",
    "reason": []
  },
  "1229": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE L.TG >= 200 \nAND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 50;",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
    "reason": [
      "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;"
    ]
  },
  "977": {
    "sql": "SELECT COUNT(*) AS disqualified_finishers\nFROM results\nWHERE raceId > 50 AND raceId < 100\n  AND time IS NOT NULL\n  AND statusId = 2;",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
    "reason": [
      "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;"
    ]
  },
  "1018": {
    "sql": "SELECT AVG(p.milliseconds) AS average_pitstop_time_ms\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "reason": [
      "average time in milliseconds spent at pit stop refers to AVG(milliseconds)"
    ]
  },
  "1161": {
    "sql": "SELECT AVG(e.\"aCL IgG\") AS \"Average aCL IgG Concentration\"\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) >= 50;",
    "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'",
    "reason": [
      "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)"
    ]
  },
  "865": {
    "sql": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 592 AND r.time IS NOT NULL\nORDER BY d.dob ASC\nLIMIT 1;",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "reason": [
      "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;"
    ]
  },
  "672": {
    "sql": "SELECT COUNT(DISTINCT u.Id) AS UserCount\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "reason": [
      "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';"
    ]
  },
  "432": {
    "sql": "SELECT s.name, s.baseSetSize\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Russian'\nORDER BY s.baseSetSize DESC\nLIMIT 1;",
    "question": "Which Russian set of cards contains the most cards overall?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
    "reason": [
      "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)"
    ]
  },
  "1031": {
    "sql": "SELECT \n    p.player_name,\n    (strftime('%Y', 'now') - strftime('%Y', p.birthday)) - (strftime('%m-%d', 'now') < strftime('%m-%d', p.birthday)) AS current_age\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    pa.sprint_speed >= 97\n    AND strftime('%Y', pa.date) BETWEEN '2013' AND '2015'\nGROUP BY \n    p.player_api_id, p.player_name;",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
    "reason": [
      "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; "
    ]
  },
  "731": {
    "sql": "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');",
    "question": "How many superheroes did DC Comics publish?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
    "reason": [
      "superheroes that DC Comics published refers to publisher_name = 'DC Comics'"
    ]
  },
  "22": {
    "sql": "SELECT s.School, s.County, sc.NumTstTakr\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE s.County = 'Contra Costa'\nORDER BY sc.NumTstTakr DESC\nLIMIT 1;",
    "question": "Which school in Contra Costa has the highest number of test takers?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "reason": []
  },
  "104": {
    "sql": "SELECT a.date AS account_opening_date\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nWHERE t.amount = 840 AND t.date = '1998-10-14';",
    "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
    "reason": []
  },
  "1335": {
    "sql": "SELECT SUM(b.spent) AS total_spent_on_advertisement\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'September Meeting' AND b.category = 'Advertisement';",
    "question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "reason": [
      "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'"
    ]
  },
  "1446": {
    "sql": "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage_po_boxes FROM zip_code;",
    "question": "Calculate the percentage of zip codes that are PO boxes.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
    "reason": [
      "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100"
    ]
  },
  "545": {
    "sql": "SELECT COUNT(*) \nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie' AND p.ParentId IS NULL;",
    "question": "Among the posts owned by csgillespie, how many of them are root posts?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
    "reason": [
      "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null"
    ]
  },
  "703": {
    "sql": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;",
    "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
    "reason": [
      "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;"
    ]
  },
  "737": {
    "sql": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.superhero_name = 'Copycat';",
    "question": "What is Copycat's race?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "reason": [
      "Copycat is the superhero_name;"
    ]
  },
  "1078": {
    "sql": "SELECT \n    p1.player_name AS player1_name, \n    p1.birthday AS player1_birthday, \n    p2.player_name AS player2_name, \n    p2.birthday AS player2_birthday,\n    CASE \n        WHEN p1.birthday < p2.birthday THEN p1.player_name || ' is older.'\n        WHEN p1.birthday > p2.birthday THEN p2.player_name || ' is older.'\n        ELSE 'Both players have the same age.'\n    END AS result\nFROM \n    Player p1, \n    Player p2\nWHERE \n    p1.player_name = 'Aaron Lennon' \n    AND p2.player_name = 'Abdelaziz Barrada';",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "reason": [
      "The larger the birthday value, the younger the person is, and vice versa;"
    ]
  },
  "1514": {
    "sql": "SELECT c.Currency\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
    "reason": [
      "'2012/8/24' can be represented by '2012-08-24'; "
    ]
  },
  "301": {
    "sql": "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';",
    "question": "What is the bond type of TR007_4_19?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
    "reason": [
      "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
    ]
  },
  "1412": {
    "sql": "SELECT DISTINCT e.expense_description\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE m.t_shirt_size = 'X-Large';",
    "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "reason": [
      "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'"
    ]
  },
  "1429": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nWHERE m.position = 'Vice President'\nAND e.type = 'Social'\nAND e.location = '900 E. Washington St.';",
    "question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "reason": [
      "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location"
    ]
  },
  "223": {
    "sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5';",
    "question": "What are the atom IDs of the bond TR000_2_5?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
    "reason": [
      "TR000_2_5 is the bond id"
    ]
  },
  "1271": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.SSA IN ('-', '+-') \nAND YEAR(P.`First Date`) < 2000;",
    "question": "How many patients with a normal anti-SSA came to the hospital before 2000?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'",
    "reason": [
      "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones"
    ]
  },
  "1004": {
    "sql": "WITH oldest_driver AS (\n    SELECT driverId, forename, surname, dob\n    FROM drivers\n    ORDER BY dob ASC\n    LIMIT 1\n)\nSELECT d.forename || ' ' || d.surname AS full_name, SUM(ds.wins) AS total_wins\nFROM oldest_driver od\nJOIN driverStandings ds ON od.driverId = ds.driverId\nJOIN drivers d ON od.driverId = d.driverId\nGROUP BY od.driverId;",
    "question": "How many wins was achieved by the oldest racer? Indicate his/her full name.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1",
    "reason": [
      "oldest racer refers to MIN(dob); full name refers to forename, surname."
    ]
  },
  "245": {
    "sql": "SELECT COUNT(bond_id) * 1.0 / COUNT(DISTINCT a.atom_id) AS average_bonds_per_iodine_atom\nFROM atom a\nLEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nWHERE a.element = 'i';",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
    "reason": [
      "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'"
    ]
  },
  "1305": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0;",
    "question": "How many patients accepted to the hospital have a normal level of white blood cells?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'",
    "reason": [
      "accepted to the hospital refers to Admission = '+'; normal level of white blood cells refers to WBC between 3.5 and 9.0;"
    ]
  },
  "821": {
    "sql": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Ajax';",
    "question": "List down Ajax's superpowers.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "reason": [
      "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;"
    ]
  },
  "94": {
    "sql": "WITH OldestFemaleClients AS (\n    SELECT c.client_id, c.birth_date, d.account_id, dt.A11 AS avg_salary\n    FROM client c\n    JOIN disp d ON c.client_id = d.client_id\n    JOIN account a ON d.account_id = a.account_id\n    JOIN district dt ON c.district_id = dt.district_id\n    WHERE c.gender = 'F'\n    ORDER BY c.birth_date ASC\n    LIMIT 1\n),\nSalaryGap AS (\n    SELECT MAX(A11) AS max_salary, MIN(A11) AS min_salary, MAX(A11) - MIN(A11) AS gap\n    FROM district\n)\nSELECT o.account_id, s.gap\nFROM OldestFemaleClients o, SalaryGap s\nWHERE o.avg_salary = s.min_salary;",
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
    "reason": [
      "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A."
    ]
  },
  "410": {
    "sql": "SELECT c.id\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.artist = 'Erica Yang'\nAND c.availability = 'paper'\nAND l.format = 'pauper'\nAND l.status = 'legal';",
    "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "reason": [
      "available in paper refers to availability = 'paper'"
    ]
  },
  "441": {
    "sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';",
    "question": "State the set code of the set with release date of 07/13/2007?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
    "reason": []
  },
  "387": {
    "sql": "SELECT name, colors FROM cards WHERE setCode = 'OGW';",
    "question": "What are the cards for set OGW? State the colour for these cards.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
    "reason": [
      "set OGW refers to setCode = 'OGW';"
    ]
  },
  "673": {
    "sql": "WITH OldestUsers AS (\n    SELECT Id\n    FROM users\n    WHERE Age = (SELECT MAX(Age) FROM users)\n)\nSELECT AVG(PostCount) AS AveragePostsVoted\nFROM (\n    SELECT COUNT(v.PostId) AS PostCount\n    FROM OldestUsers ou\n    LEFT JOIN votes v ON ou.Id = v.UserId\n    GROUP BY ou.Id\n);",
    "question": "What is the average number of posts voted by the oldest users?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
    "reason": [
      "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);"
    ]
  },
  "719": {
    "sql": "SELECT COUNT(*) \nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "reason": [
      "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200"
    ]
  },
  "450": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'Aaron Miller' \nAND cardKingdomFoilId IS NOT NULL \nAND cardKingdomId IS NOT NULL;",
    "question": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards",
    "reason": [
      "designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null"
    ]
  },
  "14": {
    "sql": "SELECT s.NCESchool, f.\"School Name\", f.\"Enrollment (Ages 5-17)\"\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nORDER BY f.\"Enrollment (Ages 5-17)\" DESC\nLIMIT 5;",
    "question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5",
    "reason": []
  },
  "1388": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, i.source\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE i.amount = (SELECT MAX(amount) FROM income);",
    "question": "Which students manage to generate the highest income. State his/her full name along with the income source.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1",
    "reason": [
      "name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);"
    ]
  },
  "12": {
    "sql": "SELECT MAX(f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) AS highest_eligible_free_rate\nFROM satscores s\nJOIN frpm f ON s.cds = f.CDSCode\nWHERE (s.NumGE1500 * 1.0 / s.NumTstTakr) > 0.3;",
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
    "reason": [
      "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"
    ]
  },
  "1050": {
    "sql": "SELECT pa.preferred_foot\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nORDER BY p.birthday DESC\nLIMIT 1;",
    "question": "What is the preferred foot when attacking of the youngest football player?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
    "reason": [
      "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;"
    ]
  },
  "704": {
    "sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';",
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "reason": [
      "tag named sample refers to TagName = 'sample';"
    ]
  },
  "739": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Death Touch';",
    "question": "What are the names of the superheroes with the power of death touch?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "reason": [
      "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'"
    ]
  },
  "1163": {
    "sql": "SELECT MIN(strftime('%Y', `First Date`) - strftime('%Y', Birthday) - (strftime('%m-%d', `First Date`) < strftime('%m-%d', Birthday))) AS youngest_age FROM Patient;",
    "question": "What was the age of the youngest patient when they initially arrived at the hospital?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient",
    "reason": [
      "age refers to SUBTRACT(YEAR(`First Date`),YEAR(Birthday))"
    ]
  },
  "32": {
    "sql": "SELECT \n    f.`School Name`,\n    f.`FRPM Count (K-12)`,\n    f.`Enrollment (K-12)`,\n    (f.`FRPM Count (K-12)` / f.`Enrollment (K-12)`) AS `Eligible Rate`\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.DOC = '66'\nORDER BY \n    f.`FRPM Count (K-12)` DESC\nLIMIT 5;",
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
    "reason": [
      "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`"
    ]
  },
  "287": {
    "sql": "SELECT (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percent_double_bonds\nFROM bond\nWHERE molecule_id = 'TR047';",
    "question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'",
    "reason": [
      "TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'"
    ]
  },
  "526": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'Matthew D. Wilson' \nAND availability = 'paper';",
    "question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
    "reason": [
      "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'"
    ]
  },
  "1125": {
    "sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.finishing = 1\nORDER BY p.birthday ASC\nLIMIT 1;",
    "question": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1",
    "reason": [
      "eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday))); finishing rate of 1 refers to finishing = 1"
    ]
  },
  "199": {
    "sql": "SELECT COUNT(DISTINCT m.molecule_id) \nFROM molecule m \nJOIN atom a ON m.molecule_id = a.molecule_id \nWHERE a.element = 'na' AND m.label = '-';",
    "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
    "reason": [
      "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'"
    ]
  },
  "253": {
    "sql": "SELECT a1.element AS element1, a2.element AS element2\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.bond_type = '#';",
    "question": "List the elements of all the triple bonds.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
    "reason": [
      "triple bond refers to bond_type = '#';"
    ]
  },
  "121": {
    "sql": "SELECT a.account_id, a.date\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = 'Prachatice';",
    "question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "reason": [
      "A2 refers to the names of districts."
    ]
  },
  "159": {
    "sql": "SELECT t.*\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nWHERE d.client_id = 3356 AND t.operation = 'VYBER';",
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
    "reason": [
      "operation = 'VYBER' refers to withdrawal in cash"
    ]
  },
  "1394": {
    "sql": "SELECT COUNT(*) \nFROM member \nJOIN major ON member.link_to_major = major.major_id \nWHERE major.major_name = 'Physics Teaching';",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "reason": [
      "'Physics Teaching' is the major_name;"
    ]
  },
  "913": {
    "sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1;",
    "question": "In which country can I find the circuit with the highest altitude?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "reason": [
      "highest altitude refers to max(alt)"
    ]
  },
  "1184": {
    "sql": "SELECT e.Symptoms\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Birthday = '1959-03-01'\nAND e.`Examination Date` = '1993-09-27';",
    "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'",
    "reason": []
  },
  "442": {
    "sql": "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');",
    "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
    "reason": []
  },
  "544": {
    "sql": "SELECT u.DisplayName \nFROM posts p \nJOIN users u ON p.LastEditorUserId = u.Id \nWHERE p.Title = 'Examples for teaching: Correlation does not mean causation';",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "reason": [
      "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId"
    ]
  },
  "180": {
    "sql": "SELECT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN district di ON a.district_id = di.district_id\nWHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31'\nAND di.A2 = 'East Bohemia';",
    "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
    "reason": []
  },
  "940": {
    "sql": "WITH chinese_gp_2008 AS (\n    SELECT raceId\n    FROM races\n    WHERE year = 2008 AND name = 'Chinese Grand Prix'\n),\nfinished_drivers AS (\n    SELECT driverId\n    FROM results\n    WHERE raceId = (SELECT raceId FROM chinese_gp_2008) AND time IS NOT NULL\n),\nparticipated_drivers AS (\n    SELECT r.driverId\n    FROM results r\n    JOIN finished_drivers fd ON r.driverId = fd.driverId\n    WHERE r.raceId != (SELECT raceId FROM chinese_gp_2008)\n    GROUP BY r.driverId\n    HAVING COUNT(r.raceId) > 0\n)\nSELECT COUNT(*) AS num_drivers\nFROM participated_drivers;",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
    "reason": [
      "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value."
    ]
  },
  "228": {
    "sql": "SELECT \n    ROUND((SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id), 4) AS percentage\nFROM \n    atom\nWHERE \n    molecule_id = 'TR206';",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "reason": [
      "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'"
    ]
  },
  "100": {
    "sql": "SELECT COUNT(DISTINCT a.account_id) AS female_customers_before_1950_Sokolov\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district di ON c.district_id = di.district_id\nWHERE c.gender = 'F'\nAND c.birth_date < '1950-01-01'\nAND di.A2 = 'Sokolov';",
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
    "reason": [
      "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2"
    ]
  },
  "214": {
    "sql": "SELECT DISTINCT m.label\nFROM molecule m\nWHERE m.molecule_id NOT IN (\n  SELECT a.molecule_id\n  FROM atom a\n  WHERE a.element = 'tin'\n);",
    "question": "What type of label is not on molecules with atoms with tin?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
    "reason": [
      "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "46": {
    "sql": "SELECT s.CDSCode, s.School, s.District, s.County, f.\"Enrollment (K-12)\"\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.DOC = '31'\nORDER BY f.\"Enrollment (K-12)\" DESC\nLIMIT 10;",
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "reason": [
      "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12"
    ]
  },
  "1111": {
    "sql": "SELECT ta.chanceCreationPassingClass \nFROM Team_Attributes ta \nJOIN Team t ON ta.team_api_id = t.team_api_id \nWHERE t.team_long_name = 'PEC Zwolle' \nAND ta.date = '2013-09-20 00:00:00';",
    "question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "reason": [
      "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'"
    ]
  },
  "959": {
    "sql": "SELECT r.fastestLap\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nJOIN driverStandings ds ON r.driverId = ds.driverId AND r.raceId = ds.raceId\nWHERE rc.year = 2009 AND ds.position = 1\nORDER BY r.fastestLap ASC\nLIMIT 1;",
    "question": "What is the fastest lap number of the champion in 2009?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "reason": [
      "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\""
    ]
  },
  "933": {
    "sql": "SELECT r.positionOrder \nFROM results r \nJOIN drivers d ON r.driverId = d.driverId \nJOIN races ra ON r.raceId = ra.raceId \nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' \nAND ra.year = 2008 AND ra.name = 'Chinese Grand Prix';",
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
    "reason": [
      "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';"
    ]
  },
  "559": {
    "sql": "SELECT CreationDate\nFROM votes\nGROUP BY CreationDate\nORDER BY COUNT(Id) DESC\nLIMIT 1;",
    "question": "Indicate the creation date of the maximum number of votes.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
    "reason": [
      "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))"
    ]
  },
  "716": {
    "sql": "SELECT \n    (COUNT(DISTINCT CASE WHEN u.UpVotes = 0 THEN c.UserId END) * 100.0 / COUNT(DISTINCT c.UserId)) AS percentage\nFROM \n    comments c\nJOIN \n    users u ON c.UserId = u.Id\nWHERE \n    c.Score BETWEEN 5 AND 10;",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
    "reason": [
      "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));"
    ]
  },
  "4": {
    "sql": "SELECT s.Phone\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.`Charter Funding Type` = 'Directly funded'\n  AND f.`Charter School (Y/N)` = 1\n  AND s.OpenDate > '2000-01-01';",
    "question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
    "reason": [
      "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm",
      "### 1. **Incorrect Filter Condition for Charter Funding Type**\n\n* **Text Question:** Asks for \"direct charter-funded schools.\"\n* **Correct SQL:** Uses `T1.`Charter Funding Type` = 'Directly funded'`.\n* **Wrong SQL:** Uses `f.`Charter Funding Type` = 'Direct'`.\n* **Error:** The filter condition in the Wrong SQL does not match the exact value (`'Directly funded'`) required by the schema, leading to incorrect results.",
      "### 2. **Table Alias Mismatch**\n\n* **Correct SQL:** Uses `T1` and `T2` as aliases for `frpm` and `schools` respectively.\n* **Wrong SQL:** Uses `s` and `f` as aliases for `schools` and `frpm`.\n* **Error:** While the aliases themselves do not affect the query logic, consistency with the correct SQL or schema conventions is important for clarity and maintainability.",
      "### 3. **No Semantic Error in Join or Column Selection**\n\n* **Join Condition:** Both queries correctly join `schools` and `frpm` on `CDSCode`.\n* **Column Selection:** Both queries correctly select the `Phone` column from the `schools` table.\n* **Error:** No issues here; the join and column selection are accurate in both queries.",
      "### 4. **Correct Interpretation of Charter School Status**\n\n* **Text Question:** Refers to \"direct charter-funded schools.\"\n* **Correct SQL:** Uses `T1.`Charter School (Y/N)` = 1`.\n* **Wrong SQL:** Also uses `f.`Charter School (Y/N)` = 1`.\n* **Error:** Both queries correctly interpret the charter school status, so no error here."
    ]
  },
  "289": {
    "sql": "SELECT label FROM molecule WHERE molecule_id = 'TR151';",
    "question": "Is molecule TR151 carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'",
    "reason": [
      "label = '+' mean molecules are carcinogenic;"
    ]
  },
  "797": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour eye_colour ON s.eye_colour_id = eye_colour.id\nJOIN colour hair_colour ON s.hair_colour_id = hair_colour.id\nWHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Brown';",
    "question": "Which superheroes have blue eyes with brown hair?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "reason": [
      "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;"
    ]
  },
  "951": {
    "sql": "SELECT c.constructorId, c.name, COUNT(cr.raceId) AS races_with_zero_points\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nWHERE c.nationality = 'Japanese' AND cr.points = 0\nGROUP BY c.constructorId, c.name\nHAVING COUNT(cr.raceId) = 2;",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
    "reason": [
      "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';"
    ]
  },
  "89": {
    "sql": "SELECT COUNT(*) AS account_count\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.frequency = 'POPLATEK PO OBRATU'\nAND d.A3 = 'East Bohemia';",
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
    "reason": [
      "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'."
    ]
  },
  "1015": {
    "sql": "SELECT r.raceId, r.year, r.name, MIN(r.time) AS fastest_lap_time\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nJOIN results res ON r.raceId = res.raceId\nWHERE c.name = 'Austrian Grand Prix Circuit' AND res.time IS NOT NULL\nGROUP BY r.raceId, r.year, r.name\nORDER BY fastest_lap_time ASC\nLIMIT 1;",
    "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
    "reason": [
      "lap record means the fastest time recorded which refers to time"
    ]
  },
  "734": {
    "sql": "SELECT p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'Blue Beetle II';",
    "question": "What is the publisher's name of Blue Beetle II?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "reason": [
      "Blue Beetle II refers to superhero_name = 'Blue Beetle II'"
    ]
  },
  "682": {
    "sql": "SELECT p.Id, u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE strftime('%Y', p.CreationDate) = '2010'\nORDER BY p.FavoriteCount DESC\nLIMIT 1;",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "reason": [
      "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;"
    ]
  },
  "201": {
    "sql": "SELECT (SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS percentage_carbon\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = '=';",
    "question": "What is the percentage of carbon in double-bond molecules?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
    "reason": [
      "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))"
    ]
  },
  "571": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS post_count,\n    (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS vote_count,\n    CASE \n        WHEN (SELECT COUNT(*) FROM votes WHERE UserId = 24) = 0 THEN NULL\n        ELSE CAST((SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS FLOAT) / (SELECT COUNT(*) FROM votes WHERE UserId = 24)\n    END AS post_to_vote_ratio;",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
    "reason": [
      "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))"
    ]
  },
  "582": {
    "sql": "SELECT DISTINCT p.Title\nFROM posts p\nJOIN postHistory ph ON p.Id = ph.PostId\nJOIN users u ON ph.UserId = u.Id\nWHERE u.DisplayName = 'Vebjorn Ljosa' AND ph.PostHistoryTypeId IS NOT NULL;",
    "question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "reason": [
      "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId"
    ]
  },
  "966": {
    "sql": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;",
    "question": "How many driver participated in race ID number 18?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
    "reason": []
  },
  "1274": {
    "sql": "SELECT COUNT(DISTINCT p.ID) \nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE (l.SSB IN ('negative', '0')) AND e.Symptoms IS NOT NULL;",
    "question": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL",
    "reason": [
      "anti-SSB are normal refers to SSB IN ('negative', '0'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones"
    ]
  },
  "376": {
    "sql": "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%';",
    "question": "What are the card layout of cards with keyword of flying?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "reason": []
  },
  "890": {
    "sql": "SELECT COUNT(DISTINCT r.year) AS seasons_hosted\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Silverstone Circuit' AND r.name = 'British Grand Prix';",
    "question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
    "reason": [
      "British Grand Prix is the name of race; British refers to the United Kindom"
    ]
  },
  "875": {
    "sql": "SELECT s.url\nFROM seasons s\nJOIN races r ON s.year = r.year\nWHERE r.raceId = 901;",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "reason": [
      "the season page refers to url; race number refers to raceId;"
    ]
  },
  "828": {
    "sql": "SELECT COUNT(DISTINCT hero_id) AS fastest_superheroes_count\nFROM hero_attribute\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;",
    "question": "Count the fastest superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100",
    "reason": [
      "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';"
    ]
  },
  "1240": {
    "sql": "SELECT AVG(HCT) AS average_hematocrit_below_normal \nFROM Laboratory \nWHERE Date LIKE '1991%' AND HCT < 29;",
    "question": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'",
    "reason": [
      "laboratory examinations in 1991 refers to Date like '1991%'; average hematoclit level = AVG(HCT); hematoclit level that is lower than the normal range refers to HCT < 29;"
    ]
  },
  "852": {
    "sql": "SELECT COUNT(*) AS race_count\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.year = 2010\nAND circuits.country NOT IN ('Asia', 'Europe');",
    "question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010",
    "reason": []
  },
  "926": {
    "sql": "SELECT MIN(r.fastestLapTime) AS fastest_lap_time\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "question": "What's the fastest lap time ever in a race for Lewis Hamilton?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "reason": [
      "fastest lap time ever refers to min(fastestLapTime)"
    ]
  },
  "656": {
    "sql": "SELECT p2.OwnerDisplayName\nFROM posts p1\nJOIN posts p2 ON p1.ParentId = p2.Id\nWHERE p1.ParentId IS NOT NULL\nORDER BY p1.Score DESC\nLIMIT 1;",
    "question": "Describe the display name of the parent ID for child post with the highest score.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )",
    "reason": [
      "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);"
    ]
  },
  "1239": {
    "sql": "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age\nFROM Patient P\nWHERE P.ID IN (\n    SELECT L.ID\n    FROM Laboratory L\n    WHERE L.HCT >= 52\n    GROUP BY L.ID\n    HAVING COUNT(L.ID) >= 2\n);",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
    "reason": [
      "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;"
    ]
  },
  "1346": {
    "sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "reason": [
      "Carlo Jacobs is the full name; full name refers to first_name, last_name;"
    ]
  },
  "1278": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE L.IGG > 900 AND L.IGG < 2000 AND P.Admission = '+';",
    "question": "Of the patients with an normal level of IGG, how many of them admitted to the hospital?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG <2000 AND  T1.Admission = '+'",
    "reason": [
      "normal level of IGG refers to 900 < IGG < 2000; admitted to the hospital refers to Admission = '+';"
    ]
  },
  "945": {
    "sql": "SELECT COUNT(*) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia';",
    "question": "How many circuits are there in Adelaide, Australia?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
    "reason": [
      "Australia is the country; Melbourne is the location of circuit;"
    ]
  },
  "1117": {
    "sql": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;",
    "question": "What are the player api id of 10 heaviest players?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
    "reason": [
      "heaviest refers to MAX(weight)"
    ]
  },
  "271": {
    "sql": "SELECT \n    CASE \n        WHEN COUNT(DISTINCT a1.element) = 2 AND 'cl' IN (a1.element, a2.element) AND 'c' IN (a1.element, a2.element) THEN 'Yes'\n        ELSE 'No'\n    END AS has_both_elements\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR001_1_8';",
    "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')",
    "reason": [
      "chlorine refers to element = 'cl'; carbon refers to element = 'c'"
    ]
  },
  "243": {
    "sql": "SELECT DISTINCT b.bond_id, b.molecule_id, b.bond_type\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');",
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
    "reason": [
      "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'"
    ]
  },
  "439": {
    "sql": "SELECT name FROM sets WHERE code = 'ALL';",
    "question": "List out the set name of the set code \"ALL\".",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT name FROM sets WHERE code = 'ALL'",
    "reason": []
  },
  "696": {
    "sql": "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%';",
    "question": "Count the number of posts with a tag specified as 'careers'.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
    "reason": [
      "tag specified as 'careers' refers to TagName = 'careers';"
    ]
  },
  "1526": {
    "sql": "WITH customer_payment AS (\n    SELECT CustomerID\n    FROM transactions_1k\n    WHERE Date = '2012-08-25' AND Price = 634.8\n    LIMIT 1\n),\nconsumption_2012 AS (\n    SELECT Consumption\n    FROM yearmonth\n    WHERE CustomerID = (SELECT CustomerID FROM customer_payment) AND Date LIKE '2012%'\n),\nconsumption_2013 AS (\n    SELECT Consumption\n    FROM yearmonth\n    WHERE CustomerID = (SELECT CustomerID FROM customer_payment) AND Date LIKE '2013%'\n)\nSELECT \n    ((SELECT Consumption FROM consumption_2012) - (SELECT Consumption FROM consumption_2013)) / \n    (SELECT Consumption FROM consumption_2012) AS ConsumptionDecreaseRate;",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
    "reason": [
      "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012"
    ]
  },
  "823": {
    "sql": "SELECT COUNT(*) \nFROM superhero \nWHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') \nAND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",
    "question": "How many female superheroes are in Marvel Comics?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
    "reason": [
      "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"
    ]
  },
  "1364": {
    "sql": "SELECT z.city, z.county, z.state\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Amy' AND m.last_name = 'Firth';",
    "question": "Where is Amy Firth's hometown?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
    "reason": [
      "hometown refers to city, county, state"
    ]
  },
  "254": {
    "sql": "WITH element_pairs AS (\n  SELECT a1.element AS element1, a2.element AS element2, COUNT(*) AS pair_count\n  FROM connected c\n  JOIN atom a1 ON c.atom_id = a1.atom_id\n  JOIN atom a2 ON c.atom_id2 = a2.atom_id\n  GROUP BY a1.element, a2.element\n),\nmax_pair AS (\n  SELECT MAX(pair_count) AS max_count\n  FROM element_pairs\n),\ntotal_bonds AS (\n  SELECT COUNT(*) AS total\n  FROM bond\n)\nSELECT (max_pair.max_count * 100.0 / total_bonds.total) AS percentage\nFROM max_pair, total_bonds;",
    "question": "What percentage of bonds have the most common combination of atoms' elements?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )",
    "reason": [
      "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))"
    ]
  },
  "1512": {
    "sql": "SELECT CustomerID, SUM(Amount * Price) AS TotalPaid\nFROM transactions_1k\nWHERE Date = '2012-08-25'\nGROUP BY CustomerID\nORDER BY TotalPaid DESC\nLIMIT 1;",
    "question": "Which customer paid the most in 2012/8/25?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
    "reason": [
      "'2012/8/25' can be represented by '2012-08-25'"
    ]
  },
  "1211": {
    "sql": "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.LDH BETWEEN 600 AND 800;",
    "question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800",
    "reason": [
      "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;"
    ]
  },
  "449": {
    "sql": "SELECT fd.language, c.type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.watermark = 'azorius';",
    "question": "What is the language of the card that has azorius watermark? List out the type of this card.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
    "reason": []
  },
  "1053": {
    "sql": "SELECT t.team_short_name\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE ta.chanceCreationPassingClass = 'Risky';",
    "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
    "reason": [
      "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;"
    ]
  },
  "686": {
    "sql": "SELECT COUNT(*) AS TotalPostsAboveAverageViews\nFROM posts\nWHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);",
    "question": "Identify the total number of posts with views above average.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
    "reason": [
      "views above average refer to ViewCount > AVG(ViewCount);"
    ]
  },
  "1042": {
    "sql": "SELECT l.name AS league_name\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE m.season = '2009/2010'\nGROUP BY l.name\nHAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
    "reason": [
      "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'"
    ]
  },
  "647": {
    "sql": "SELECT b.Name \nFROM badges b \nJOIN users u ON b.UserId = u.Id \nWHERE u.Location = 'North Pole' \nAND strftime('%Y', b.Date) = '2011';",
    "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "reason": [
      "received in 2011 refers to year(Date) = 2011;"
    ]
  },
  "154": {
    "sql": "SELECT COUNT(*) \nFROM client \nWHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha');",
    "question": "How many male clients in 'Hl.m. Praha' district?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
    "reason": [
      "District data appears in the A2; Male means that gender = 'M'"
    ]
  },
  "196": {
    "sql": "SELECT COUNT(DISTINCT m.molecule_id) \nFROM molecule m \nJOIN atom a ON m.molecule_id = a.molecule_id \nWHERE m.label = '-' AND a.element = 'cl';",
    "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'",
    "reason": [
      "non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'"
    ]
  },
  "9": {
    "sql": "SELECT COUNT(*) AS DirectlyFundedCharterSchools\nFROM satscores\nJOIN frpm ON satscores.cds = frpm.CDSCode\nWHERE satscores.AvgScrMath > 560\n  AND frpm.`Charter Funding Type` = 'Directly Funded';",
    "question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'",
    "reason": []
  },
  "494": {
    "sql": "SELECT c.name AS card_name, r.text AS ruling_text, \n       CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.artist = 'Jim Pavelec';",
    "question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'",
    "reason": [
      "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;"
    ]
  },
  "664": {
    "sql": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%';",
    "question": "What is the sum of score of the post on 2010-07-19?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
    "reason": [
      "on 2010-07-19 refers to LasActivityDate LIKE '2010-07-19%';"
    ]
  },
  "1513": {
    "sql": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-25'\nORDER BY t.Time ASC\nLIMIT 1;",
    "question": "Which country's gas station had the first paid cusomer in 2012/8/25?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1",
    "reason": [
      "'2012/8/25' can be represented by '2012-08-25'"
    ]
  },
  "453": {
    "sql": "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';",
    "question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
    "reason": [
      "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'"
    ]
  },
  "207": {
    "sql": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '=';",
    "question": "What elements are in a double type bond?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
    "reason": [
      "double type bond refers to bond_type = '=';"
    ]
  },
  "479": {
    "sql": "SELECT COUNT(*) \nFROM cards \nJOIN sets ON cards.setCode = sets.code \nWHERE sets.name = 'Coldsnap' \nAND cards.convertedManaCost > 5 \nAND (cards.power = '*' OR cards.power IS NULL);",
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null"
    ]
  },
  "628": {
    "sql": "SELECT DisplayName, Views FROM users ORDER BY Views DESC LIMIT 1;",
    "question": "Which users have the highest number of views?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "reason": [
      "users have the highest number of views refer to DisplayName where MAX(Views);"
    ]
  },
  "482": {
    "sql": "SELECT fd.type \nFROM foreign_data fd \nJOIN cards c ON fd.uuid = c.uuid \nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';",
    "question": "What's the German type of the card \"Ancestor's Chosen\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'",
    "reason": [
      "German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'"
    ]
  },
  "144": {
    "sql": "SELECT \n    strftime('%m', t.date) AS month,\n    AVG(t.amount) AS average_amount\nFROM \n    trans t\nJOIN \n    account a ON t.account_id = a.account_id\nWHERE \n    t.operation = 'VYBER KARTOU'\n    AND strftime('%Y', t.date) = '2021'\nGROUP BY \n    month\nORDER BY \n    month;",
    "question": "How much is the average amount in credit card made by account holders in a month, in year 2021?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'",
    "reason": [
      "Operation = 'VYBER KARTOU' refers to credit card withdrawn"
    ]
  },
  "261": {
    "sql": "SELECT b.bond_id\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.label = '+';",
    "question": "Write down bond id for molecules that are carcinogenic.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic"
    ]
  },
  "1107": {
    "sql": "WITH KevinConstant AS (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Kevin Constant'\n),\nMaxCrossing AS (\n    SELECT MAX(crossing) AS max_crossing\n    FROM Player_Attributes\n    WHERE player_api_id IN (SELECT player_api_id FROM KevinConstant)\n)\nSELECT MIN(date) AS first_date\nFROM Player_Attributes\nWHERE player_api_id IN (SELECT player_api_id FROM KevinConstant)\nAND crossing = (SELECT max_crossing FROM MaxCrossing);",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "reason": [
      "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)"
    ]
  },
  "62": {
    "sql": "SELECT COUNT(*) AS TotalNonCharteredSchools\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.Charter = 0\nAND s.County = 'Los Angeles'\nAND (f.[Free Meal Count (K-12)] * 100.0 / f.[Enrollment (K-12)]) < 0.18;",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
    "reason": [
      "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`"
    ]
  },
  "1334": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE z.state = 'Illinois';",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
    "reason": [
      "full name of member refers to first_name, last_name"
    ]
  },
  "391": {
    "sql": "SELECT DISTINCT c.*\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.originalType = 'Artifact'\n  AND c.colors = 'B'\n  AND fd.language IS NOT NULL;",
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "reason": [
      "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data"
    ]
  },
  "1485": {
    "sql": "SELECT \n    (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - \n    (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference;",
    "question": "How much more was customer 7 consuming in April 2013 than customer 5?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'",
    "reason": [
      "April 2013 refers to 201304 in the yearmonth.date"
    ]
  },
  "867": {
    "sql": "SELECT d.nationality\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.raceId = 933\nORDER BY r.fastestLapSpeed DESC\nLIMIT 1;",
    "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "reason": [
      "fastest lap speed refers to MAX(fastestLapSpeed);"
    ]
  },
  "518": {
    "sql": "WITH banned_counts AS (\n    SELECT format, COUNT(*) AS banned_count\n    FROM legalities\n    WHERE status = 'Banned'\n    GROUP BY format\n),\nmax_banned AS (\n    SELECT format, banned_count\n    FROM banned_counts\n    WHERE banned_count = (SELECT MAX(banned_count) FROM banned_counts)\n)\nSELECT c.name AS card_name, mb.format\nFROM max_banned mb\nJOIN legalities l ON mb.format = l.format AND l.status = 'Banned'\nJOIN cards c ON l.uuid = c.uuid\nORDER BY c.name;",
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "reason": [
      "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))"
    ]
  },
  "677": {
    "sql": "SELECT COUNT(*) AS post_count\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Jay Stevens'\nAND strftime('%Y', posts.CreaionDate) = '2010';",
    "question": "How many posts did Jay Stevens have in 2010?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
    "reason": [
      "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;"
    ]
  },
  "919": {
    "sql": "SELECT c.name AS circuit_name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';",
    "question": "Which circuit did the 2009 Spanish Grand Prix use?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "reason": []
  },
  "1226": {
    "sql": "SELECT p.ID, l.\"T-CHO\"\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.\"T-CHO\" = (SELECT MAX(\"T-CHO\") FROM Laboratory)\nORDER BY (julianday('now') - julianday(p.Birthday)) DESC\nLIMIT 1;",
    "question": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1",
    "reason": [
      "oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);"
    ]
  },
  "273": {
    "sql": "SELECT (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS percentage\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+';",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "reason": [
      "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'"
    ]
  },
  "1263": {
    "sql": "SELECT E.ID\nFROM Examination E\nJOIN Laboratory L ON E.ID = L.ID\nWHERE L.HCT <= 29 OR L.HCT >= 52\nORDER BY E.`aCL IgA` DESC\nLIMIT 1;",
    "question": "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29) ORDER BY T2.`aCL IgA` DESC LIMIT 1",
    "reason": [
      "Hematoclit is normal refers to 29 < N < 52; highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`);"
    ]
  },
  "636": {
    "sql": "SELECT COUNT(*) AS NegativeCommentCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60;",
    "question": "How many negative comments did Neil McGuigan get in his posts?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60",
    "reason": [
      "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';"
    ]
  },
  "1097": {
    "sql": "SELECT SUM(pa.crossing) AS total_crossing_score\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Aaron Lennox';",
    "question": "What is Aaron Lennox's total crossing score?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'",
    "reason": [
      "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)"
    ]
  },
  "1379": {
    "sql": "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND event_date LIKE '%2020%';",
    "question": "How many meeting events were held in 2020?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
    "reason": [
      "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020"
    ]
  },
  "217": {
    "sql": "SELECT DISTINCT a2.*\nFROM atom a1\nJOIN connected c ON a1.atom_id = c.atom_id OR a1.atom_id = c.atom_id2\nJOIN atom a2 ON (a2.atom_id = c.atom_id OR a2.atom_id = c.atom_id2) AND a2.atom_id != a1.atom_id\nWHERE a1.molecule_id = 'TR181';",
    "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
    "reason": [
      "TR181 molecule refers to molecule_id = 'TR181'"
    ]
  },
  "392": {
    "sql": "SELECT c.name\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.rarity = 'uncommon'\nORDER BY r.date ASC\nLIMIT 3;",
    "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "reason": [
      "uncommon refers to rarity = 'uncommon';"
    ]
  },
  "1234": {
    "sql": "SELECT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.WBC <= 3.5 OR l.WBC >= 9.0\nGROUP BY p.SEX\nORDER BY (julianday('now') - julianday(p.Birthday)) / 365.25 ASC;",
    "question": "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC",
    "reason": [
      "abnormal white blood cell count refers to WBC < = 3.5 or WBC > = 9.0;"
    ]
  },
  "259": {
    "sql": "SELECT COUNT(DISTINCT a.element) AS element_count\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id\nWHERE b.bond_type = '-';",
    "question": "How many elements are there for single bond molecules?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "reason": [
      "single bond refers to bond_type = '-';"
    ]
  },
  "114": {
    "sql": "SELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district di ON c.district_id = di.district_id\nWHERE di.A3 = 'Prague'\nORDER BY a.date ASC\nLIMIT 1;",
    "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
    "reason": [
      "A3 stands for region names"
    ]
  },
  "949": {
    "sql": "SELECT c.name, SUM(cs.points) AS total_points\nFROM constructorStandings cs\nJOIN constructors c ON cs.constructorId = c.constructorId\nGROUP BY cs.constructorId\nORDER BY total_points DESC\nLIMIT 1;",
    "question": "Which constructor has the highest point?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
    "reason": []
  },
  "880": {
    "sql": "WITH paul_driver AS (\n    SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta'\n),\nspeed_853 AS (\n    SELECT fastestLapSpeed FROM results \n    WHERE raceId = 853 AND driverId = (SELECT driverId FROM paul_driver)\n),\nspeed_854 AS (\n    SELECT fastestLapSpeed FROM results \n    WHERE raceId = 854 AND driverId = (SELECT driverId FROM paul_driver)\n)\nSELECT \n    CASE \n        WHEN (SELECT fastestLapSpeed FROM speed_853) IS NOT NULL AND (SELECT fastestLapSpeed FROM speed_854) IS NOT NULL THEN\n            ((CAST((SELECT fastestLapSpeed FROM speed_853) AS REAL) - CAST((SELECT fastestLapSpeed FROM speed_854) AS REAL)) / \n            CAST((SELECT fastestLapSpeed FROM speed_853) AS REAL)) * 100\n        ELSE NULL\n    END AS percentage_faster;",
    "error": "something went wrong, tool did not call.",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
    "reason": [
      "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))"
    ]
  },
  "652": {
    "sql": "SELECT p.Id AS PostId, b.Name AS BadgeName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN badges b ON u.Id = b.UserId\nWHERE u.DisplayName = 'Samuel'\nAND (strftime('%Y', p.CreaionDate) = '2013' OR strftime('%Y', b.Date) = '2013');",
    "question": "List the post IDs and badge names of the user Samuel in 2013.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
    "reason": [
      "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;"
    ]
  },
  "103": {
    "sql": "SELECT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN card ca ON d.disp_id = ca.disp_id\nWHERE ca.issued = '1994-03-03';",
    "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
    "reason": []
  },
  "946": {
    "sql": "SELECT name, lat, lng FROM circuits WHERE country = 'USA';",
    "question": "Please list the location coordinates of the US circuits.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
    "reason": [
      "location coordinates refers to (lat, lng); the US refers to country = 'USA';"
    ]
  },
  "522": {
    "sql": "SELECT c.name AS card_name, l.format AS banned_format\nFROM cards c\nLEFT JOIN legalities l ON c.uuid = l.uuid\nWHERE c.edhrecRank = 1 AND l.status = 'Banned';\n",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "reason": [
      "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name"
    ]
  },
  "1387": {
    "sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'Yearly Kickoff';",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "reason": [
      "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;"
    ]
  },
  "1": {
    "sql": "SELECT \n    (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS eligible_free_rate\nFROM \n    frpm\nWHERE \n    `Educational Option Type` = 'Continuation School'\n    AND (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) IS NOT NULL\nORDER BY \n    eligible_free_rate ASC\nLIMIT 3;",
    "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
    "reason": [
      "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
      "### 1. **Incorrect Column Selection**\n\n* **Text Question:** Asks for the lowest three eligible free rates, not the school names.\n* **Correct SQL:** Only selects the calculated rate (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`).\n* **Wrong SQL:** Includes `School Name` in the output, which is unnecessary for the question.\n\n---\n\n### 2. **Incorrect Filter Condition**\n\n* **Text Question:** Focuses on continuation schools.\n* **Correct SQL:** Uses `Educational Option Type = 'Continuation School'` to filter.\n* **Wrong SQL:** Uses `School Type = 'Continuation'`, which may not accurately identify continuation schools.\n\n---\n\n### 3. **Missing NULL Handling**\n\n* **Text Question:** Implicitly requires valid rates (non-NULL).\n* **Correct SQL:** Explicitly filters out NULL rates (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL).\n* **Wrong SQL:** Does not handle NULL rates, potentially including invalid or undefined results.\n\n---\n\n### 4. **Incorrect Filter Logic for Enrollment**\n\n* **Text Question:** Does not explicitly require `Enrollment (Ages 5-17)` > 0.\n* **Correct SQL:** Relies on the division result being non-NULL, which implicitly ensures non-zero enrollment.\n* **Wrong SQL:** Adds an unnecessary filter (`Enrollment (Ages 5-17)` > 0), which may not align with the question's intent."
    ]
  },
  "1175": {
    "sql": "WITH MaxHGBPatient AS (\n    SELECT \n        L.ID,\n        L.HGB,\n        L.Date\n    FROM \n        Laboratory L\n    WHERE \n        L.HGB = (SELECT MAX(HGB) FROM Laboratory)\n)\nSELECT \n    P.ID,\n    (strftime('%Y', E.`Examination Date`) - strftime('%Y', P.Birthday)) AS Age,\n    E.Diagnosis\nFROM \n    MaxHGBPatient M\nJOIN \n    Patient P ON M.ID = P.ID\nJOIN \n    Examination E ON M.ID = E.ID AND M.Date = E.`Examination Date`;",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
    "reason": [
      "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)"
    ]
  },
  "57": {
    "sql": "SELECT s.Phone, s.Ext\nFROM satscores sc\nJOIN schools s ON sc.cds = s.CDSCode\nORDER BY sc.AvgScrWrite DESC\nLIMIT 1 OFFSET 332;",
    "question": "What is the phone number and extension number for the school that had the 333rd highest average writing score?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1",
    "reason": []
  },
  "941": {
    "sql": "SELECT SUM(points) AS total_points\nFROM results\nWHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');",
    "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
    "reason": []
  },
  "854": {
    "sql": "SELECT c.lat, c.lng\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.name = 'Australian Grand Prix';",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "reason": [
      "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'"
    ]
  },
  "1084": {
    "sql": "SELECT COUNT(DISTINCT p.player_api_id) \nFROM Player p \nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id \nWHERE strftime('%Y', p.birthday) < '1986' \nAND pa.defensive_work_rate = 'high';",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
    "reason": [
      "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;"
    ]
  },
  "422": {
    "sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934;",
    "question": "What is the language of the card with the multiverse number 149934?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
    "reason": [
      "multiverse number 149934 refers to multiverseid = 149934;"
    ]
  },
  "1056": {
    "sql": "SELECT l.name \nFROM League l \nJOIN Country c ON l.country_id = c.id \nWHERE c.name = 'Netherlands';",
    "question": "What is the name of the football league in the country of Netherlands?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "reason": [
      "name of the football league refers to League.name;"
    ]
  },
  "320": {
    "sql": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2') OR (c.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_1');",
    "question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
    "reason": [
      "type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
    ]
  },
  "1038": {
    "sql": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM Match m\nJOIN League l ON m.league_id = l.id\nGROUP BY m.league_id\nORDER BY total_goals ASC\nLIMIT 5;",
    "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
    "reason": [
      "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal);"
    ]
  },
  "1376": {
    "sql": "SELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status, b.budget_id, b.category, b.spent, b.remaining, b.amount, (b.spent / b.amount) AS spend_to_budget_ratio\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed'\nORDER BY spend_to_budget_ratio DESC\nLIMIT 1;",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "reason": [
      "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))"
    ]
  },
  "738": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "reason": [
      "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50"
    ]
  },
  "1203": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE P.SEX = 'F' AND L.WBC < 3.5;",
    "question": "How many patients who were female got white blood cells that were below 3.5?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'",
    "reason": [
      "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5"
    ]
  },
  "365": {
    "sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';",
    "question": "What is the type of card \"Benalish Knight\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "reason": [
      "Benalish Knight' is the name of card;"
    ]
  },
  "416": {
    "sql": "SELECT (COUNT(CASE WHEN fd.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM cards c\nLEFT JOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.power IS NULL OR c.power = '*';",
    "question": "What percentage of cards without power are in French?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
    "reason": [
      "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100"
    ]
  },
  "298": {
    "sql": "SELECT (COUNT(DISTINCT CASE WHEN m.label = '+' AND a.element = 'h' THEN m.molecule_id END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage\nFROM molecule m\nLEFT JOIN atom a ON m.molecule_id = a.molecule_id;",
    "question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "reason": [
      "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0"
    ]
  },
  "189": {
    "sql": "WITH oldest_female_clients AS (\n    SELECT c.client_id, c.birth_date, d.A11 AS average_salary\n    FROM client c\n    JOIN district d ON c.district_id = d.district_id\n    WHERE c.gender = 'F'\n    ORDER BY c.birth_date ASC, d.A11 ASC\n    LIMIT 1\n)\nSELECT a.account_id\nFROM oldest_female_clients ofc\nJOIN disp dp ON ofc.client_id = dp.client_id\nJOIN account a ON dp.account_id = a.account_id;",
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
    "reason": [
      "Female refers to 'F' in the gender; A11 contains information about average salary"
    ]
  },
  "1100": {
    "sql": "SELECT MAX(pa.overall_rating) AS highest_overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Dorlan Pabon';",
    "question": "What is the highest overall rating received by Dorlan Pabon?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'",
    "reason": [
      "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)"
    ]
  },
  "869": {
    "sql": "SELECT c.url\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nWHERE cr.raceId = 9\nORDER BY cr.points DESC\nLIMIT 1;",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
    "reason": [
      "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;"
    ]
  },
  "592": {
    "sql": "SELECT COUNT(*) AS UserCount\nFROM (\n    SELECT UserId\n    FROM badges\n    GROUP BY UserId\n    HAVING COUNT(*) > 5\n) AS UsersWithMoreThan5Badges;",
    "question": "How many users are awarded with more than 5 badges?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
    "reason": [
      "more than 5 badges refers to Count (Name) > 5; user refers to UserId"
    ]
  },
  "238": {
    "sql": "SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';",
    "question": "How many molecules have a triple bond type?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
    "reason": [
      "triple bond refers to bond_type = '#';"
    ]
  },
  "394": {
    "sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
    "question": "How many white bordered cards are powerful?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "reason": [
      "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)"
    ]
  },
  "695": {
    "sql": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol';",
    "question": "How many users were awarded with 'Citizen Patrol' badge?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
    "reason": [
      "Citizen Patrol' is the name of the badge;"
    ]
  },
  "914": {
    "sql": "SELECT COUNT(*) FROM drivers WHERE code IS NULL OR code = '';",
    "question": "How many drivers don't have a code?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers",
    "reason": [
      "don't have a code refers to code is null"
    ]
  },
  "706": {
    "sql": "SELECT c.Text \nFROM comments c \nJOIN posts p ON c.PostId = p.Id \nWHERE p.Title LIKE '%linear regression%' OR p.Tags LIKE '%linear regression%';",
    "question": "Give the texts commented on the post about linear regression.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'",
    "reason": [
      "about linear regression refers to Title contains 'linear regression'"
    ]
  },
  "748": {
    "sql": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.id = 75;",
    "question": "What is the eye colour of superhero with superhero ID 75?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
    "reason": [
      "eye colour refers to colour where eye_colour_id = colour.id;"
    ]
  },
  "1008": {
    "sql": "SELECT p.lap\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId\nJOIN races r ON p.raceId = r.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND r.year = 2011 AND r.name = 'Australian Grand Prix';",
    "question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
    "reason": []
  },
  "119": {
    "sql": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE strftime('%Y', a.date) = '1993' AND a.frequency = 'POPLATEK PO OBRATU';",
    "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
    "reason": [
      "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction"
    ]
  },
  "1086": {
    "sql": "SELECT p_a.heading_accuracy \nFROM Player_Attributes p_a\nJOIN Player p ON p_a.player_api_id = p.player_api_id\nWHERE p.player_name = 'Ariel Borysiuk'\nORDER BY p_a.date DESC\nLIMIT 1;",
    "question": "What's the heading accuracy of Ariel Borysiuk?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "reason": []
  },
  "436": {
    "sql": "SELECT COUNT(*) AS count, GROUP_CONCAT(id) AS card_ids FROM cards WHERE frameEffects = 'extendedart';",
    "question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "reason": [
      "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n"
    ]
  },
  "270": {
    "sql": "SELECT m.label, COUNT(*) AS count\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'ca'\nGROUP BY m.label\nORDER BY count DESC\nLIMIT 1;",
    "question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
    "reason": [
      "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)"
    ]
  },
  "421": {
    "sql": "SELECT name, power, promoTypes\nFROM cards\nWHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague'\nORDER BY name ASC\nLIMIT 3;",
    "question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
    "reason": [
      "unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'"
    ]
  },
  "247": {
    "sql": "SELECT DISTINCT a.element FROM atom a WHERE a.atom_id NOT IN (SELECT atom_id FROM connected) AND a.atom_id NOT IN (SELECT atom_id2 FROM connected);",
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
    "reason": [
      " atoms cannot bond with other atoms means atom_id NOT in connected table;"
    ]
  },
  "1074": {
    "sql": "SELECT t.team_short_name \nFROM Match m \nJOIN Team t ON m.home_team_api_id = t.team_api_id \nWHERE m.home_team_goal = 10;",
    "question": "List all the short name of the football team that had a home team goal of 10?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10",
    "reason": [
      "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;"
    ]
  },
  "251": {
    "sql": "SELECT a.element, COUNT(a.element) AS element_count\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+'\nGROUP BY a.element\nORDER BY element_count ASC\nLIMIT 1;",
    "question": "What is the least common element of all carcinogenic molecules?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t",
    "reason": [
      "label = '+' mean molecules are carcinogenic"
    ]
  },
  "227": {
    "sql": "SELECT ROUND((SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(molecule_id)), 3) AS percentage\nFROM molecule;",
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
    "reason": [
      "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent"
    ]
  },
  "1070": {
    "sql": "SELECT c.name AS country_name\nFROM League l\nJOIN Country c ON l.country_id = c.id\nWHERE l.name = 'Italy Serie A';",
    "question": "Which country is the league Italy Serie A from?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
    "reason": [
      "Italy Serie A from refers to League.name = 'Italy Serie A';"
    ]
  },
  "566": {
    "sql": "SELECT u.Reputation\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Id = 65041;",
    "question": "For the owner user of post No. 65041, what is his/her reputation points?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
    "reason": [
      "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation"
    ]
  },
  "855": {
    "sql": "SELECT r.url \nFROM races r \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE c.name = 'Sepang International Circuit';",
    "question": "Where can I find the information about the races held on Sepang International Circuit?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "reason": [
      "information about races refers to url;"
    ]
  },
  "187": {
    "sql": "SELECT COUNT(DISTINCT c.client_id) AS client_count\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'Owner';",
    "question": "How many clients who choose statement of weekly issuance are Owner?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
    "reason": [
      "Frequency = 'POPLATEK TYDNE' refers to weekly issuance"
    ]
  },
  "1073": {
    "sql": "SELECT COUNT(*) AS match_count\nFROM Match\nWHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga')\nAND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';",
    "question": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'",
    "reason": [
      "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';"
    ]
  },
  "403": {
    "sql": "SELECT \n    c.name AS card_name,\n    (COUNT(fd.id) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage_spanish\nFROM \n    cards c\nLEFT JOIN \n    foreign_data fd ON c.uuid = fd.uuid AND fd.language = 'Spanish'\nGROUP BY \n    c.name\nHAVING \n    COUNT(fd.id) > 0\nORDER BY \n    c.name;",
    "question": "Calculate the percentage of cards in Spanish. List them by name.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "reason": [
      "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100"
    ]
  },
  "814": {
    "sql": "SELECT c.colour\nFROM hero_attribute ha\nJOIN superhero s ON ha.hero_id = s.id\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE ha.attribute_value = 100;",
    "question": "List the skin colour of the superheroes with 100 attribute value.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
    "reason": [
      "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;"
    ]
  },
  "1477": {
    "sql": "SELECT strftime('%Y', t.Date) AS Year, SUM(t.Amount) AS TotalGasUse\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR'\nGROUP BY Year\nORDER BY TotalGasUse DESC\nLIMIT 1;",
    "question": "Which year recorded the most gas use paid in EUR?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "reason": []
  },
  "822": {
    "sql": "SELECT COUNT(*) AS green_skinned_villains\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nJOIN colour ON superhero.skin_colour_id = colour.id\nWHERE alignment.alignment = 'Bad' AND colour.colour = 'Green';",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
    "reason": [
      "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';"
    ]
  },
  "492": {
    "sql": "SELECT type FROM sets WHERE name = 'From the Vault: Lore';",
    "question": "For the set \"From the Vault: Lore\", what is its expansion type?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'",
    "reason": [
      "set \"From the Vault refers to name which contains 'From the Vault: Lore'; expansion type refers to type"
    ]
  },
  "1316": {
    "sql": "SELECT m.phone\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = \"Women's Soccer\";",
    "question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
    "reason": [
      "Women's Soccer is an event name; phone numbers refers to phone"
    ]
  },
  "595": {
    "sql": "SELECT u.Id, u.DisplayName\nFROM users u\nJOIN postHistory ph ON u.Id = ph.UserId\nWHERE u.Views >= 1000\nGROUP BY u.Id, ph.PostId\nHAVING COUNT(ph.Id) = 1;",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "reason": [
      "having at least 1000 view refers to Views > = 1000; user refers to UserId"
    ]
  },
  "306": {
    "sql": "SELECT DISTINCT m.molecule_id, m.label, GROUP_CONCAT(DISTINCT a.element) AS elements\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE b.bond_type = '#'\nGROUP BY m.molecule_id, m.label;",
    "question": "Which molecules have triple bonds and list all the elements they contain.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "reason": [
      "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "1259": {
    "sql": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday >= '1985-01-01'\nAND l.RA IN('-', '+-');",
    "question": "Please list the diseases of the patients born after 1985-1-1 and have a normal Rhuematoid Factor.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'",
    "reason": [
      "diseases refers to Diagnosis; born after 1985/1/1 refers to YEAR(Birthday) > = 1985; normal Rhuematoid Factor refers to RA IN('-', '+-');"
    ]
  },
  "309": {
    "sql": "SELECT a.atom_id, COUNT(DISTINCT b.bond_type) AS bond_type_count\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nLEFT JOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = 'TR346'\nGROUP BY a.atom_id;",
    "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type",
    "reason": []
  },
  "157": {
    "sql": "SELECT A15 AS number_of_crimes_1995 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532);",
    "question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
    "reason": [
      "A15 contains information about number of committed crimes in 1995"
    ]
  },
  "147": {
    "sql": "SELECT COUNT(DISTINCT a.account_id) AS female_clients_in_south_bohemia\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN district di ON a.district_id = di.district_id\nWHERE c.gender = 'F' AND di.A3 = 'south Bohemia';",
    "question": "How many female clients' accounts are in the region of South Bohemia?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
    "reason": [
      "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'"
    ]
  },
  "600": {
    "sql": "SELECT pl.PostId, pl.RelatedPostId, p.ViewCount AS Popularity\nFROM postLinks pl\nJOIN posts p ON pl.RelatedPostId = p.Id\nWHERE pl.RelatedPostId = 61217;\n\n-- To get the popularity of post ID 61217\nSELECT ViewCount AS Popularity\nFROM posts\nWHERE Id = 61217;",
    "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
    "reason": [
      "post related refers to RelatedPostId; popularity refers to ViewCount"
    ]
  },
  "1473": {
    "sql": "SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' AND SUBSTR(ym.Date, 1, 4) = '2013';",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
    "reason": [
      "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year."
    ]
  },
  "1490": {
    "sql": "SELECT \n    (COUNT(CASE WHEN y.Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*) AS Percentage\nFROM \n    customers c\nJOIN \n    yearmonth y ON c.CustomerID = y.CustomerID\nWHERE \n    c.Segment = 'LAM';",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
    "reason": [
      "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100."
    ]
  },
  "994": {
    "sql": "SELECT c.name, c.nationality, SUM(cr.points) AS total_points\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nJOIN races r ON cr.raceId = r.raceId\nWHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010\nGROUP BY c.constructorId, c.name, c.nationality\nORDER BY total_points DESC\nLIMIT 1;",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
    "reason": [
      "Monaco Grand Priz refers to the race; race in year between 1980 and 2010"
    ]
  },
  "625": {
    "sql": "SELECT COUNT(*) FROM users WHERE Location LIKE '%New York%';",
    "question": "How many users were from New York?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
    "reason": [
      "New York refers to Location;"
    ]
  },
  "1468": {
    "sql": "SELECT z.city AS hometown\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';",
    "question": "Where is the hometown of Garrett Gerke?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "reason": [
      "hometown refers to city"
    ]
  },
  "1467": {
    "sql": "SELECT e.event_name, SUM(b.spent) AS total_spent_on_speaker_gifts\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE b.category = 'Speaker Gifts'\nGROUP BY e.event_name;",
    "question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "reason": [
      "total amount spent = SUM(spent) where category = 'Speaker Gifts'"
    ]
  },
  "782": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour eye_colour ON s.eye_colour_id = eye_colour.id\nJOIN colour hair_colour ON s.hair_colour_id = hair_colour.id\nWHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black';",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
    "reason": [
      "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';"
    ]
  },
  "1041": {
    "sql": "WITH AvgChanceCreation AS (\n    SELECT AVG(chanceCreationPassing) AS avg_chance_creation\n    FROM Team_Attributes\n),\nTeamsIn2014 AS (\n    SELECT team_api_id, chanceCreationPassing\n    FROM Team_Attributes\n    WHERE buildUpPlayDribblingClass = 'Normal'\n    AND date >= '2014-01-01 00:00:00' AND date <= '2014-12-31 23:59:59'\n)\nSELECT t.team_long_name, ti.chanceCreationPassing\nFROM TeamsIn2014 ti\nJOIN Team t ON ti.team_api_id = t.team_api_id\nJOIN AvgChanceCreation ac ON ti.chanceCreationPassing < ac.avg_chance_creation\nORDER BY ti.chanceCreationPassing DESC;",
    "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "reason": [
      "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;"
    ]
  },
  "1124": {
    "sql": "SELECT DISTINCT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.attacking_work_rate = 'high';",
    "error": "something went wrong, tool did not call.",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "reason": [
      "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';"
    ]
  },
  "562": {
    "sql": "SELECT COUNT(*) AS comment_count\nFROM comments\nWHERE PostId IN (SELECT Id FROM posts WHERE ViewCount = 1910);",
    "question": "For the post which got 1910 view counts, how many comments does it get?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
    "reason": []
  },
  "1158": {
    "sql": "SELECT DISTINCT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE strftime('%Y', P.Birthday) = '1937'\nAND L.`T-CHO` >= 250;",
    "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
    "reason": [
      "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'"
    ]
  },
  "462": {
    "sql": "SELECT st.translation AS italian_set_name\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';",
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
    "reason": [
      "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'"
    ]
  },
  "512": {
    "sql": "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';",
    "question": "How many cards with unknown power that can't be found in foil is in duel deck A?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'",
    "reason": [
      "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'"
    ]
  },
  "137": {
    "sql": "SELECT COUNT(DISTINCT a.account_id) AS number_of_accounts\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE a.district_id = 1 AND (l.status = 'C' OR l.status = 'D');",
    "question": "How many accounts have running contracts in Branch location 1?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "reason": [
      "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"
    ]
  },
  "1366": {
    "sql": "SELECT m.member_id, m.first_name, m.last_name, m.email, m.position, m.t_shirt_size, m.phone, m.zip, m.link_to_major\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'October Meeting';",
    "question": "List all the members who attended the event \"October Meeting\".",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "reason": [
      "'October Meeting' is an event name;"
    ]
  },
  "10": {
    "sql": "SELECT f.\"FRPM Count (Ages 5-17)\"\nFROM frpm f\nJOIN satscores s ON f.CDSCode = s.cds\nWHERE s.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores);",
    "question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1",
    "reason": []
  },
  "125": {
    "sql": "SELECT \n    d.A2 AS district_name,\n    d.A3 AS state,\n    ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment_percentage\nFROM \n    loan l\nJOIN \n    disp dp ON l.account_id = dp.account_id\nJOIN \n    client c ON dp.client_id = c.client_id\nJOIN \n    district d ON c.district_id = d.district_id\nWHERE \n    l.status = 'D'\nGROUP BY \n    d.A2, d.A3, d.A12, d.A13;",
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
    "reason": [
      "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'"
    ]
  },
  "1401": {
    "sql": "SELECT e.cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'September Speaker' AND (b.category = 'posters' OR e.expense_description LIKE '%posters%');",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "reason": [
      "'Posters' is the expense description; 'September Speaker' is an event name"
    ]
  },
  "27": {
    "sql": "SELECT s.School AS \"School Name\", sc.AvgScrWrite AS \"Average Writing Score\", s.Phone AS \"Communication Number\"\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE (s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01')\nAND sc.AvgScrWrite IS NOT NULL\nORDER BY s.School;",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
    "reason": [
      "Communication number refers to phone number."
    ]
  },
  "607": {
    "sql": "SELECT COUNT(*) AS positive_comments_count FROM comments WHERE Score > 60;",
    "question": "How many positive comments are there on the list?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM comments WHERE score > 60",
    "reason": [
      "Positive comment refers to score > 60"
    ]
  },
  "1321": {
    "sql": "SELECT COUNT(*) AS event_count\nFROM attendance a\nJOIN member m ON a.link_to_member = m.member_id\nJOIN event e ON a.link_to_event = e.event_id\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'\nAND strftime('%Y', e.event_date) = '2019';",
    "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "reason": [
      "events attended in 2019 refers to YEAR(event_date) = 2019"
    ]
  },
  "1131": {
    "sql": "SELECT AVG(P.height) AS average_height\nFROM Player P\nJOIN Match M ON P.player_api_id IN (\n    M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5,\n    M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11,\n    M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5,\n    M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11\n)\nJOIN Country C ON M.country_id = C.id\nWHERE C.name = 'Italy';",
    "question": "What is the average heights of Italy players?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
    "reason": [
      "average heights refers to Avg(height); Italy is name of country"
    ]
  },
  "430": {
    "sql": "SELECT s.code AS set_code, c.id AS card_id\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE fd.language = 'Italian' AND s.block = 'Shadowmoor'\nORDER BY s.code ASC\nLIMIT 2;",
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "reason": []
  },
  "502": {
    "sql": "SELECT s.releaseDate \nFROM sets s \nJOIN set_translations st ON s.code = st.setCode \nWHERE st.translation = 'Ola de frío';",
    "question": "What is the release date for the set \"Ola de frío\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de frío'",
    "reason": [
      "release date is the date of card set being released; set \"Ola de frío\" refers to translation = 'Ola de frío'"
    ]
  },
  "1282": {
    "sql": "SELECT p.Birthday\nFROM Patient p\nJOIN (\n    SELECT ID, MAX(GPT) AS MaxGPT\n    FROM Laboratory\n    WHERE GPT < 60\n    GROUP BY ID\n) l ON p.ID = l.ID\nORDER BY l.MaxGPT DESC\nLIMIT 3;",
    "question": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
    "reason": [
      "highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60);"
    ]
  },
  "1028": {
    "sql": "SELECT t.team_long_name\nFROM Match m\nJOIN League l ON m.league_id = l.id\nJOIN Team t ON m.away_team_api_id = t.team_api_id\nWHERE l.name = 'Scotland Premier League'\n  AND m.season = '2009/2010'\n  AND m.away_team_goal > m.home_team_goal\nGROUP BY m.away_team_api_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
    "reason": [
      "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));"
    ]
  },
  "184": {
    "sql": "SELECT COUNT(DISTINCT c.client_id) AS female_junior_card_holders\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN card ca ON d.disp_id = ca.disp_id\nWHERE c.gender = 'F' AND ca.type = 'junior';",
    "question": "How many female customers have a junior credit card?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
    "reason": [
      "Female refers to gender = 'F'"
    ]
  },
  "68": {
    "sql": "SELECT County, COUNT(*) AS NumberOfClosures\nFROM schools\nWHERE SOC = '11' AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31'\nGROUP BY County\nORDER BY NumberOfClosures DESC\nLIMIT 1;",
    "question": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1",
    "reason": [
      "Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989"
    ]
  },
  "496": {
    "sql": "SELECT s.baseSetSize\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.translation = 'Rinascita di Alara';",
    "question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
    "reason": [
      "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'"
    ]
  },
  "5": {
    "sql": "SELECT COUNT(*) \nFROM satscores \nJOIN schools ON satscores.cds = schools.CDSCode \nWHERE schools.Virtual = 'F' AND satscores.AvgScrMath > 400;",
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
    "reason": [
      "Exclusively virtual refers to Virtual = 'F'"
    ]
  },
  "1067": {
    "sql": "SELECT t.team_short_name\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE ta.buildUpPlayPassing > 70;",
    "question": "Which teams have build up play passing more than 70? Please list their short names.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70",
    "reason": [
      "build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;"
    ]
  },
  "87": {
    "sql": "SELECT AdmEmail1, AdmEmail2, AdmEmail3\nFROM schools\nWHERE County = 'San Bernardino'\n  AND City = 'San Bernardino'\n  AND District = 'San Bernardino City Unified'\n  AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'\n  AND SOC = '62'\n  AND DOC = '54';",
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
    "reason": [
      "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'"
    ]
  },
  "1032": {
    "sql": "SELECT l.name AS league_name, COUNT(m.league_id) AS match_count\nFROM Match m\nJOIN League l ON m.league_id = l.id\nGROUP BY m.league_id\nORDER BY match_count DESC\nLIMIT 1;",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
    "reason": [
      " league with highest matches of all time refers to MAX(COUNT(league_id));"
    ]
  },
  "1489": {
    "sql": "SELECT SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'KAM' AND y.Date = '201305';",
    "question": "How much did the KAM customers consume in total in May 2013?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'",
    "reason": [
      "May 2013 refers to yearmonth.date = 201305"
    ]
  },
  "281": {
    "sql": "SELECT a.element, COUNT(*) AS tally\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+' AND substr(a.atom_id, 7, 1) = '4'\nGROUP BY a.element;",
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
    "reason": [
      "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; "
    ]
  },
  "848": {
    "sql": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.location = 'Shanghai';",
    "question": "Please list the year during which the race is held on circuits in Shanghai.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "reason": [
      "Shanghai is a name of location;"
    ]
  },
  "138": {
    "sql": "WITH SecondHighestCrimeDistrict AS (\n    SELECT district_id\n    FROM district\n    ORDER BY A15 DESC\n    LIMIT 1 OFFSET 1\n)\nSELECT COUNT(*) AS male_clients_count\nFROM client\nWHERE gender = 'M' AND district_id = (SELECT district_id FROM SecondHighestCrimeDistrict);",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "reason": [
      "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995"
    ]
  },
  "418": {
    "sql": "SELECT availability FROM cards WHERE artist = 'Daren Bader';",
    "question": "What kind of printing is on the card that Daren Bader created?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "reason": [
      "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'"
    ]
  },
  "509": {
    "sql": "SELECT s.id\nFROM sets s\nJOIN (\n    SELECT setCode, COUNT(*) AS card_count\n    FROM cards\n    GROUP BY setCode\n) c ON s.code = c.setCode\nORDER BY c.card_count DESC\nLIMIT 1;",
    "question": "What is the unique id of the set that has the highest number of cards?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1",
    "reason": [
      "the highest number of cards refers to MAX(baseSetSize); unique id refers to id"
    ]
  },
  "1362": {
    "sql": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';",
    "question": "How many cities are there in Orange County, Virginia?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "reason": [
      "Orange County is the county name, Virginia is the state name"
    ]
  },
  "264": {
    "sql": "SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');",
    "question": "What are the labels for TR000, TR001 and TR002?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
    "reason": [
      "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "1272": {
    "sql": "SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.SSA NOT IN ('negative', '0')\nORDER BY p.`First Date` ASC\nLIMIT 1;",
    "question": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1",
    "reason": [
      "first patient refers to ID with MIN(`First Date`); abnormal anti-SSA refers to SSA NOT IN('negative', '0');"
    ]
  },
  "694": {
    "sql": "SELECT c.Text, u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.PostId = (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R')\nORDER BY c.CreationDate DESC\nLIMIT 10;",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "reason": [
      "the latest comment refers to MAX(CreationDate);"
    ]
  },
  "817": {
    "sql": "SELECT r.race\nFROM superhero s\nJOIN colour c_hair ON s.hair_colour_id = c_hair.id\nJOIN gender g ON s.gender_id = g.id\nJOIN race r ON s.race_id = r.id\nWHERE c_hair.colour = 'blue' AND g.gender = 'male';",
    "question": "Give the race of the blue-haired male superhero.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "reason": [
      "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';"
    ]
  },
  "505": {
    "sql": "SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Chinese Simplified' AND s.name = 'Mirrodin';",
    "question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'",
    "reason": [
      "Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin'"
    ]
  },
  "69": {
    "sql": "SELECT NCESDist FROM schools WHERE SOC IS NOT NULL AND SOCType = 'State Special Schools';",
    "question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT NCESDist FROM schools WHERE SOC = 31",
    "reason": [
      "State Special Schools means that SOC = 31."
    ]
  },
  "257": {
    "sql": "SELECT c.atom_id2\nFROM connected c\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE a.element = 's';",
    "question": "List down atom id2 for atoms with element sulfur.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
    "reason": [
      "element sulfur refers to element = 's'"
    ]
  },
  "210": {
    "sql": "SELECT a1.atom_id AS atom1_id, a1.element AS atom1_element, a2.atom_id AS atom2_id, a2.element AS atom2_element\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.bond_type = '-';",
    "question": "What atoms are connected in single type bonds?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
    "reason": [
      "single type bond refers to bond_type = '-';"
    ]
  },
  "850": {
    "sql": "SELECT r.name AS race_name\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Germany';",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "reason": [
      "Germany is a name of country;"
    ]
  },
  "736": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Intelligence'\nORDER BY ha.attribute_value ASC\nLIMIT 1;",
    "question": "Who is the dumbest superhero?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
    "reason": [
      "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'"
    ]
  },
  "1136": {
    "sql": "SELECT COUNT(*) AS number_of_players\nFROM Player_Attributes\nWHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes)\nAND preferred_foot = 'left'\nAND attacking_work_rate IS NOT NULL;",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "reason": [
      "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'"
    ]
  },
  "2": {
    "sql": "SELECT s.Zip\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`District Name` = 'Fresno County Office of Education' AND f.`Charter School (Y/N)` = 1;",
    "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
    "reason": [
      "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
      "### 1. **Incorrect Filtering Condition**\n\n* **Text Question:** Asks for charter schools in \"Fresno County Office of Education.\"\n* **Correct SQL:** Filters on `T1.`District Name` = 'Fresno County Office of Education'`.\n* **Wrong SQL:** Filters on `f.\"County Name\" = 'Fresno County Office of Education'`.\n* **Error:** The question refers to the district name, not the county name. The wrong SQL uses the incorrect column for filtering, leading to mismatched results.",
      "### 2. **Schema-Specific Misinterpretation**\n\n* **Schema Context:** The `frpm` table contains both `County Name` and `District Name` columns.\n* **Correct SQL:** Correctly identifies the `District Name` as the relevant column for filtering.\n* **Wrong SQL:** Misinterprets the question by assuming the `County Name` column is the correct filter, which is not aligned with the question's intent.",
      "### 3. **No Semantic Error in Join or Column Selection**\n\n* **Join Condition:** Both queries correctly join `frpm` and `schools` on `CDSCode`.\n* **Column Selection:** Both queries correctly select the `Zip` column from the `schools` table.\n* **Error:** The issue lies solely in the filtering condition, not in the join or column selection."
    ]
  },
  "127": {
    "sql": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';",
    "question": "List the account IDs with monthly issuance of statements.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
    "reason": [
      "'POPLATEK MESICNE' stands for monthly issuance"
    ]
  }
}