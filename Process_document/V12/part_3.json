{
  "794": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed'\nGROUP BY s.superhero_name\nORDER BY MAX(ha.attribute_value) DESC\nLIMIT 1;",
    "question": "Which hero was the fastest?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "reason": [
      "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';"
    ]
  },
  "610": {
    "sql": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Reputation = (SELECT MAX(Reputation) FROM users);",
    "question": "What are the name of badge that users who have the highest reputation obtained?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1",
    "reason": [
      "highest reputation refers to Max(Reputation); user refers to UserId"
    ]
  },
  "1434": {
    "sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';",
    "question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
    "reason": [
      "zip codes that have post office boxes refers to type = 'PO Box'"
    ]
  },
  "340": {
    "sql": "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
    "error": "something went wrong, tool did not call.",
    "question": "Which are the cards that have incredibly powerful foils.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
    "reason": [
      "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null"
    ]
  },
  "563": {
    "sql": "SELECT p.FavoriteCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE c.UserId = 3025 AND c.CreationDate = '2014/4/23 20:29:39.0';",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "reason": [
      "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'"
    ]
  },
  "1011": {
    "sql": "SELECT d.forename || ' ' || d.surname AS full_name, lt.time\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nORDER BY lt.time ASC\nLIMIT 20;",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
    "reason": [
      "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname"
    ]
  },
  "554": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN (\n    SELECT UserId, COUNT(*) AS badge_count\n    FROM badges\n    GROUP BY UserId\n) b ON u.Id = b.UserId\nORDER BY b.badge_count DESC\nLIMIT 1;",
    "question": "What is the display name of the user who has obtained the most number of badges?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "reason": [
      "who obtained the most number of badges refers to UserID with Max(Count(Id))"
    ]
  },
  "796": {
    "sql": "SELECT a.attribute_name, ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE s.superhero_name = '3-D Man';",
    "question": "State all of 3-D Man's attributes along with their values.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "reason": [
      "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;"
    ]
  },
  "733": {
    "sql": "SELECT COUNT(*) \nFROM superhero \nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') \nAND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
    "reason": [
      "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'"
    ]
  },
  "1076": {
    "sql": "WITH diallo_avg AS (\n    SELECT AVG(pa.ball_control) AS avg_ball_control\n    FROM Player_Attributes pa\n    JOIN Player p ON pa.player_api_id = p.player_api_id\n    WHERE p.player_name = 'Abdou Diallo'\n),\nappindangoye_avg AS (\n    SELECT AVG(pa.ball_control) AS avg_ball_control\n    FROM Player_Attributes pa\n    JOIN Player p ON pa.player_api_id = p.player_api_id\n    WHERE p.player_name = 'Aaron Appindangoye'\n)\nSELECT diallo_avg.avg_ball_control - appindangoye_avg.avg_ball_control AS difference_in_avg_ball_control\nFROM diallo_avg, appindangoye_avg;",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "reason": [
      "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)"
    ]
  },
  "1308": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE L.PLT > 100 AND L.PLT < 400 \nAND P.Diagnosis IS NOT NULL;",
    "question": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
    "reason": [
      "normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;"
    ]
  },
  "1024": {
    "sql": "SELECT p.player_api_id, p.player_name, pa.crossing\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nORDER BY pa.crossing DESC\nLIMIT 5;",
    "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
    "reason": [
      "perform better in crossing actions refers to MAX(crossing)"
    ]
  },
  "805": {
    "sql": "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;",
    "question": "List the full names of superheroes with missing weight.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
    "reason": [
      "missing weight refers to weight_kg = 0 OR weight_kg = NULL;"
    ]
  },
  "1413": {
    "sql": "SELECT DISTINCT m.zip\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.cost < 50;",
    "question": "Mention the zip code of member who incurred less than 50USD.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50",
    "reason": [
      "incurred less than 50USD refers to cost < 50"
    ]
  },
  "1088": {
    "sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.volleys > 70 AND pa.dribbling > 70;",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "reason": [
      "volley score are over 70 refers to volleys > 70; dribbling score refers to dribbling are over 70 refers to dribbling > 70;"
    ]
  },
  "884": {
    "sql": "SELECT name FROM races\nWHERE year = (SELECT MIN(year) FROM races)\nAND strftime('%m', date) = (SELECT strftime('%m', date) FROM races WHERE year = (SELECT MIN(year) FROM races) ORDER BY date LIMIT 1);",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "reason": [
      "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));"
    ]
  },
  "358": {
    "sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';",
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "reason": [
      "name of card  = 'Ancestor''s Chosen' ;"
    ]
  },
  "380": {
    "sql": "SELECT edhrecRank FROM cards WHERE frameVersion = '2015';",
    "question": "List the edhrecRank for cards with frame version 2015.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015",
    "reason": []
  },
  "1027": {
    "sql": "SELECT p.player_name, pa.penalties\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nORDER BY pa.penalties DESC\nLIMIT 10;",
    "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
    "reason": [
      "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);"
    ]
  },
  "139": {
    "sql": "SELECT COUNT(*) AS high_level_owner_cards\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE card.type = 'gold' AND disp.type = 'OWNER';",
    "question": "How many high-level credit cards have \"OWNER\" type of disposition?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
    "reason": [
      "High-level credit cards refers to the cards with the gold type."
    ]
  },
  "895": {
    "sql": "SELECT AVG(l.milliseconds) AS average_lap_time\nFROM lapTimes l\nJOIN races r ON l.raceId = r.raceId\nJOIN drivers d ON l.driverId = d.driverId\nWHERE r.year = 2009 AND r.name = 'Malaysian Grand Prix' AND d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "reason": [
      "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'"
    ]
  },
  "124": {
    "sql": "SELECT l.loan_id, d.A2 AS district, d.A11 AS average_salary\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.duration = 60;",
    "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
    "reason": [
      "A3 refers to regions; A11 refers to average salary"
    ]
  },
  "783": {
    "sql": "SELECT DISTINCT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold');",
    "question": "Provide the eye colours of the heroes whose skin colours are gold.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
    "reason": [
      "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;"
    ]
  },
  "6": {
    "sql": "SELECT s.School FROM schools s INNER JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.Magnet = 1 AND sc.NumTstTakr > 500;",
    "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500",
    "reason": [
      "Magnet schools or offer a magnet program means that Magnet = 1",
      "### 1. **Incorrect Column Selection**\n\n* **Text Question:** Asks only for the **school names** of the magnet schools with SAT test takers over 500.\n* **Correct SQL:** Returns only `T2.School`.\n* **Wrong SQL:** Returns multiple columns (`s.CDSCode`, `s.School`, `s.District`, `s.County`, `sc.NumTstTakr`, `sc.AvgScrRead`, `sc.AvgScrMath`, `sc.AvgScrWrite`).\n* **Error:** The inclusion of extra columns is unnecessary and not requested in the question.\n\n---\n\n### 2. **Misinterpretation of Required Output**\n\n* **Text Question:** Explicitly asks for a list of schools, not additional details like district, county, or SAT scores.\n* **Correct SQL:** Focuses only on the school names.\n* **Wrong SQL:** Includes irrelevant data, violating the requirement.\n\n---\n\n### 3. **Table Aliasing and Clarity**\n\n* **Correct SQL:** Uses clear aliases (`T1` and `T2`) for tables, improving readability.\n* **Wrong SQL:** Uses less descriptive aliases (`s` and `sc`), which could lead to confusion in more complex queries.\n\n---\n\n### 4. **No Semantic Error in Join or Filtering**\n\n* **Table-Level Check:** Both queries correctly join `schools` and `satscores` on `CDSCode`/`cds`.\n* **Filtering Integrity:** Both queries correctly filter for `Magnet = 1` and `NumTstTakr > 500`, so no error here."
    ]
  },
  "448": {
    "sql": "SELECT fd.name AS foreign_name, c.type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.watermark = 'abzan';",
    "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
    "reason": []
  },
  "1119": {
    "sql": "SELECT SUM(M.home_team_goal) AS total_home_goals\nFROM Match M\nJOIN Player P ON (M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id)\nWHERE P.player_name = 'Aaron Lennon';",
    "question": "How many home team goal have been scored by Aaron Lennon?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
    "reason": [
      "Aaron Lennon refers to player_name = 'Aaron Lennon'"
    ]
  },
  "54": {
    "sql": "SELECT School, MailZip FROM schools WHERE (AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian') OR (AdmFName2 = 'Avetik' AND AdmLName2 = 'Atoian') OR (AdmFName3 = 'Avetik' AND AdmLName3 = 'Atoian');",
    "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
    "reason": []
  },
  "399": {
    "sql": "SELECT DISTINCT types FROM cards WHERE availability = 'arena';",
    "question": "Lists all types of cards available in arena.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "reason": [
      "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'"
    ]
  },
  "1310": {
    "sql": "SELECT AVG(L.PT) AS AverageProthrombinTime\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M' AND L.PT < 14;",
    "question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'",
    "reason": [
      "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);"
    ]
  },
  "1166": {
    "sql": "SELECT e.Symptoms, e.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Birthday = (SELECT MAX(Birthday) FROM Patient)\nAND e.Symptoms IS NOT NULL;",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
    "reason": [
      "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL"
    ]
  },
  "412": {
    "sql": "SELECT fd.name AS foreign_name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.type = 'Creature'\n  AND c.layout = 'normal'\n  AND c.borderColor = 'black'\n  AND c.artist = 'Matthew D. Wilson'\n  AND fd.language = 'French';",
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
    "reason": [
      "in French refers to language = 'French'; black border color refers to borderColor = 'black'"
    ]
  },
  "1289": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;",
    "question": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
    "reason": [
      "diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;"
    ]
  },
  "1301": {
    "sql": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE e.Thrombosis = 0 AND l.CPK < 250;",
    "question": "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250",
    "reason": [
      "no thrombosis refers to Thrombosis = 0 ; abnormal level of creatinine phosphokinase refers to CPK < 250;"
    ]
  },
  "1406": {
    "sql": "SELECT * FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');",
    "question": "Among the budgets for Food, which one has the highest budgeted amount?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )",
    "reason": [
      "MAX(amount) where category = 'Food'"
    ]
  },
  "1452": {
    "sql": "SELECT SUM(e.cost) / COUNT(DISTINCT a.link_to_event) AS average_amount_paid\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nJOIN attendance a ON m.member_id = a.link_to_member\nWHERE m.position != 'Member';",
    "question": "What is the average amount paid by students in a position other than a member?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
    "reason": [
      "position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))"
    ]
  },
  "370": {
    "sql": "SELECT COUNT(DISTINCT c.id) \nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.borderColor = 'borderless' AND fd.language = 'Russian';",
    "question": "How many borderless cards are illustrated in Russian?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
    "reason": [
      "borderless card refers to borderColor = 'borderless'; 'Russian' is the language;"
    ]
  },
  "1288": {
    "sql": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TP < 6.0;",
    "question": "Please list the diagnosis of the patients whose total protein is lower than normal.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
    "reason": [
      "total protein is lower than normal refers to TP < 6.0;"
    ]
  },
  "584": {
    "sql": "WITH target_post AS (\n    SELECT Id \n    FROM posts \n    WHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\n),\neditors AS (\n    SELECT DISTINCT UserId \n    FROM postHistory \n    WHERE PostId IN (SELECT Id FROM target_post)\n)\nSELECT c.* \nFROM comments c\nWHERE c.UserId IN (SELECT UserId FROM editors);",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "reason": [
      "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;"
    ]
  },
  "606": {
    "sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0';",
    "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
    "reason": [
      "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"
    ]
  },
  "1350": {
    "sql": "SELECT e.status\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-8-20';",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
    "reason": [
      "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status"
    ]
  },
  "90": {
    "sql": "SELECT COUNT(DISTINCT a.account_id) AS eligible_accounts\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE d.A3 = 'Prague';",
    "question": "How many accounts who have region in Prague are eligible for loans?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
    "reason": [
      "A3 contains the data of region"
    ]
  },
  "540": {
    "sql": "SELECT p.Title\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie'\nORDER BY p.ViewCount DESC\nLIMIT 1;",
    "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "reason": [
      "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)"
    ]
  },
  "631": {
    "sql": "SELECT COUNT(*) AS NumberOfPosts\nFROM posts\nWHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo');",
    "question": "How many posts were created by Daniel Vassallo?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'",
    "reason": [
      "DisplayName = 'Daniel Vassallo';"
    ]
  },
  "197": {
    "sql": "SELECT AVG(oxygen_count) AS average_oxygen_count\nFROM (\n    SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count\n    FROM molecule m\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    JOIN atom a ON m.molecule_id = a.molecule_id\n    WHERE b.bond_type = '-'\n    AND a.element = 'o'\n    GROUP BY m.molecule_id\n) AS oxygen_counts;",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "reason": [
      "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')"
    ]
  },
  "1103": {
    "sql": "SELECT pa.overall_rating \nFROM Player_Attributes pa \nJOIN Player p ON pa.player_api_id = p.player_api_id \nWHERE p.player_name = 'Aaron Mooy' \nAND pa.date LIKE '2016-02-04%';",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "reason": [
      "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';"
    ]
  },
  "1132": {
    "sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;",
    "question": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
    "reason": [
      "over 180 cm tall refers to height > 180; name of football player refers to player_name"
    ]
  },
  "831": {
    "sql": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.superhero_name = 'Abomination';",
    "question": "What is Abomination's eye colour?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "reason": [
      "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;"
    ]
  },
  "795": {
    "sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;",
    "question": "How many superheroes have a neutral alignment?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "reason": [
      "neutral alignment refers to alignment_id = 3;"
    ]
  },
  "1374": {
    "sql": "SELECT COUNT(*) \nFROM attendance \nWHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240');",
    "question": "How many events did the member with the phone number \"954-555-6240\" attend?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'",
    "reason": []
  },
  "535": {
    "sql": "SELECT COUNT(*) AS UserCount\nFROM users\nWHERE UpVotes > 100 AND DownVotes > 1;",
    "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1",
    "reason": [
      "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1"
    ]
  },
  "1080": {
    "sql": "SELECT COUNT(*) AS count_left_foot_players_stay_back\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low';",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "reason": [
      "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';"
    ]
  },
  "1494": {
    "sql": "SELECT \n    (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS PercentagePremium\nFROM \n    gasstations\nWHERE \n    Country = 'Slovakia';",
    "question": "What percentage of Slovakian gas stations are premium?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
    "reason": [
      "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%."
    ]
  },
  "859": {
    "sql": "SELECT q.q1\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "reason": [
      "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"
    ]
  },
  "384": {
    "sql": "SELECT DISTINCT l.uuid, fd.language\nFROM legalities l\nJOIN foreign_data fd ON l.uuid = fd.uuid\nWHERE l.format = 'legacy' AND l.status = 'legal';",
    "question": "List down the uuid for legacy cards and the foreign language of these cards.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
    "reason": [
      "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data"
    ]
  },
  "1068": {
    "sql": "SELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 170\nAND strftime('%Y', pa.date) BETWEEN '2010' AND '2015';",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
    "reason": [
      "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;"
    ]
  },
  "1225": {
    "sql": "SELECT \n    p.SEX,\n    GROUP_CONCAT(DISTINCT p.ID) AS Patient_List\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.`T-BIL` >= 2.0\nGROUP BY \n    p.SEX;",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
    "reason": [
      "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0"
    ]
  },
  "728": {
    "sql": "SELECT c.colour AS eye_colour, COUNT(s.id) AS superhero_count\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'Marvel Comics'\nGROUP BY c.colour\nORDER BY superhero_count DESC;",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "reason": [
      "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;"
    ]
  },
  "429": {
    "sql": "SELECT s.type AS expansion_type, st.language FROM sets s LEFT JOIN set_translations st ON s.code = st.setCode WHERE s.id = 206;",
    "question": "What is the language and expansion type of set number 206?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
    "reason": [
      "set number 206 refers to id = 206"
    ]
  },
  "1104": {
    "sql": "SELECT pa.potential \nFROM Player_Attributes pa \nJOIN Player p ON pa.player_api_id = p.player_api_id \nWHERE p.player_name = 'Francesco Parravicini' \nAND pa.date = '2010-08-30 00:00:00';",
    "question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "reason": [
      "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'"
    ]
  },
  "1451": {
    "sql": "WITH member_event_count AS (\n    SELECT \n        e.link_to_member,\n        COUNT(DISTINCT b.link_to_event) AS event_count\n    FROM \n        expense e\n    JOIN \n        budget b ON e.link_to_budget = b.budget_id\n    GROUP BY \n        e.link_to_member\n    HAVING \n        COUNT(DISTINCT b.link_to_event) > 1\n),\nmember_total_expense AS (\n    SELECT \n        e.link_to_member,\n        SUM(e.cost) AS total_spent\n    FROM \n        expense e\n    JOIN \n        member_event_count mec ON e.link_to_member = mec.link_to_member\n    GROUP BY \n        e.link_to_member\n)\nSELECT \n    m.first_name,\n    m.last_name,\n    mte.total_spent\nFROM \n    member_total_expense mte\nJOIN \n    member m ON mte.link_to_member = m.member_id\nORDER BY \n    mte.total_spent DESC\nLIMIT 1;",
    "error": "something went wrong, tool did not call.",
    "question": "Among the members who incurred expenses in more than one event, who paid the most amount?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1",
    "reason": [
      "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)"
    ]
  },
  "619": {
    "sql": "SELECT COUNT(DISTINCT u.Id) AS AdultSupporters\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Age BETWEEN 19 AND 65\nAND b.Name = 'Supporter';",
    "question": "How many adults who obtained the badge Supporter?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
    "reason": [
      "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65"
    ]
  },
  "1510": {
    "sql": "SELECT AVG(Amount * Price) AS average_total_price\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'CZE';",
    "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
    "reason": [
      "Gas station in the Czech Republic implies that Country = 'CZE'"
    ]
  },
  "809": {
    "sql": "SELECT p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.id = 38;",
    "question": "What is the publisher name of the superhero ID 38?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
    "reason": [
      "superhero ID 38 refers to superhero.id = 38;"
    ]
  },
  "191": {
    "sql": "SELECT COUNT(*) AS loan_account_count\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE loan.duration = 24\nAND account.frequency = 'POPLATEK TYDNE';",
    "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
    "reason": [
      "Frequency = 'POPLATEK TYDNE' referes to weekly statement"
    ]
  },
  "428": {
    "sql": "SELECT s.name AS set_name, st.translation FROM sets s LEFT JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5;",
    "question": "What is the name of set number 5 and its translation?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
    "reason": [
      "set number 5 refers to id = 5"
    ]
  },
  "1190": {
    "sql": "WITH normal_proteinuria AS (\n    SELECT COUNT(DISTINCT ID) AS total_patients\n    FROM Laboratory\n    WHERE `U-PRO` > 0 AND `U-PRO` < 30\n),\nlow_uric_acid AS (\n    SELECT COUNT(DISTINCT ID) AS patients_with_low_ua\n    FROM Laboratory\n    WHERE `U-PRO` > 0 AND `U-PRO` < 30 AND UA <= 6.5\n)\nSELECT \n    CASE \n        WHEN total_patients = 0 THEN 0\n        ELSE (patients_with_low_ua * 100.0 / total_patients)\n    END AS percentage\nFROM normal_proteinuria, low_uric_acid;",
    "error": "something went wrong, tool did not call.",
    "question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30",
    "reason": [
      "proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30; uric acid level below the normal range refers to UA < = 6.5; calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)，100)"
    ]
  },
  "360": {
    "sql": "SELECT DISTINCT st.language\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN set_translations st ON s.code = st.setCode\nWHERE c.name = 'Angel of Mercy';",
    "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
    "reason": [
      "Angel of Mercy' is the name of card;"
    ]
  },
  "657": {
    "sql": "SELECT u.DisplayName, u.WebsiteUrl\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.VoteTypeId = 8\nAND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);",
    "question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )",
    "reason": [
      "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);"
    ]
  },
  "470": {
    "sql": "SELECT s.releaseDate \nFROM cards c \nJOIN sets s ON c.setCode = s.code \nWHERE c.name = 'Ancestor\\'s Chosen';",
    "question": "When was the set of cards with \"Ancestor's Chosen\" released?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "reason": [
      "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate"
    ]
  },
  "328": {
    "sql": "SELECT DISTINCT a.element\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE m.molecule_id = 'TR024' AND b.bond_type = '=';",
    "question": "List all the elements with double bond, consisted in molecule TR024.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='",
    "reason": [
      "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "283": {
    "sql": "SELECT DISTINCT m.molecule_id, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'ca';",
    "question": "Identify whether the chemical compound that contains Calcium is carcinogenic.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
    "reason": [
      "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;"
    ]
  },
  "302": {
    "sql": "SELECT DISTINCT a1.element, a2.element\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR001_2_4';",
    "question": "Name the elements that comprise the atoms of bond TR001_2_4.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
    "reason": [
      "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "1273": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Examination E ON P.ID = E.ID \nWHERE E.Diagnosis = 'SLE' \nAND (E.SSB IN('-', '+-'));",
    "question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
    "reason": [
      "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones"
    ]
  },
  "499": {
    "sql": "SELECT COUNT(*) AS translation_count\nFROM set_translations\nWHERE setCode = (SELECT code FROM sets WHERE name = 'Tenth Edition');",
    "question": "How many translations of the name of the set \"Tenth Edition\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL",
    "reason": [
      "translations of the name refers to translation; translation is not NULL; set \"Salvat 2011\" refers to name = 'Tenth Edition'"
    ]
  },
  "15": {
    "sql": "SELECT s.District, AVG(sc.AvgScrRead) AS AvgReadingScore\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE s.StatusType = 'Active' AND sc.rtype = 'D'\nGROUP BY s.District\nORDER BY AvgReadingScore DESC\nLIMIT 1;",
    "question": "Which active district has the highest average score in Reading?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "reason": []
  },
  "684": {
    "sql": "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(Id)) AS percentage FROM users;",
    "question": "Identify the percentage of teenage users.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
    "reason": [
      "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;"
    ]
  },
  "777": {
    "sql": "SELECT g.gender\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE s.superhero_name = 'Agent 13';",
    "question": "What is the gender of Agent 13 hero?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "reason": [
      "Agent 13 hero refers to superhero_name = 'Agent 13';"
    ]
  },
  "1030": {
    "sql": "SELECT l.name AS league_name\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE m.season = '2015/2016' AND m.home_team_goal = m.away_team_goal\nGROUP BY m.league_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
    "reason": [
      "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';"
    ]
  },
  "1202": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE P.SEX = 'M'\nAND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'\nAND E.Diagnosis = 'Behcet'\nAND P.Admission = '-';",
    "question": "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'",
    "reason": [
      "male refers to SEX = 'M'; underwent testing between 1995 and 1997 refers to `Examination Date` between '1995' and '1997'; Behcet refers to diagnosis; did not stay in the hospital refers to Admission = '-'"
    ]
  },
  "910": {
    "sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "reason": [
      "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'"
    ]
  },
  "1195": {
    "sql": "SELECT AVG(l.ALB) AS average_albumin_level\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'F'\nAND (p.Diagnosis = 'SLE' OR EXISTS (SELECT 1 FROM Examination e WHERE e.ID = p.ID AND e.Diagnosis = 'SLE'))\nAND l.PLT > 400;",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "reason": [
      "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'"
    ]
  },
  "833": {
    "sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';",
    "question": "Name the superhero, otherwise known as Charles Chandler.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "reason": [
      "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;"
    ]
  },
  "1371": {
    "sql": "SELECT COUNT(DISTINCT link_to_member) AS member_count\nFROM attendance\nWHERE link_to_event = (SELECT event_id FROM event WHERE event_name = \"Women's Soccer\");",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "reason": [
      "'Women's Soccer' is the event name;"
    ]
  },
  "34": {
    "sql": "SELECT \n    s.School,\n    f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)` AS FreeRate\nFROM \n    schools s\nJOIN \n    frpm f ON s.CDSCode = f.CDSCode\nWHERE \n    (s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson') OR\n    (s.AdmFName2 = 'Kacey' AND s.AdmLName2 = 'Gibson') OR\n    (s.AdmFName3 = 'Kacey' AND s.AdmLName3 = 'Gibson');",
    "question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'",
    "reason": [
      "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"
    ]
  },
  "150": {
    "sql": "SELECT COUNT(DISTINCT t.account_id) AS account_count\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';",
    "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
    "reason": [
      "A3 contains the region names; North Bohemia is a region."
    ]
  },
  "93": {
    "sql": "SELECT COUNT(*) AS male_customers_north_bohemia_high_salary\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;",
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
    "reason": [
      "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary."
    ]
  },
  "1045": {
    "sql": "SELECT pa.attacking_work_rate\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Franco Zennaro';",
    "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "reason": []
  },
  "193": {
    "sql": "SELECT DISTINCT c.client_id, c.district_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nWHERE d.type = 'OWNER'\nAND NOT EXISTS (\n    SELECT 1\n    FROM disp d2\n    WHERE d2.client_id = c.client_id\n    AND d2.type != 'OWNER'\n);",
    "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
    "reason": [
      "Only the owner accounts have the right to issue permanent orders or apply for loans"
    ]
  },
  "599": {
    "sql": "-- Query to find post history type IDs for post ID 3720\nSELECT DISTINCT PostHistoryTypeId\nFROM postHistory\nWHERE PostId = 3720;\n\n-- Query to count unique users who commented on post ID 3720\nSELECT COUNT(DISTINCT UserId) AS UniqueCommentingUsers\nFROM comments\nWHERE PostId = 3720;",
    "question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
    "reason": []
  },
  "483": {
    "sql": "SELECT c.name AS card_name, fd.text AS italian_ruling_text\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE s.name = 'Coldsnap' AND fd.language = 'Italian';",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'"
    ]
  },
  "849": {
    "sql": "SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';",
    "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "reason": [
      "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;"
    ]
  },
  "646": {
    "sql": "SELECT p.Title AS PostTitle, c.Text AS CommentText, u.DisplayName AS UserDisplayName\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score > 60;",
    "question": "Describe the post title which got positive comments and display names of the users who posted those comments.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60",
    "reason": [
      "positive comments refer to Score > 60;"
    ]
  },
  "1129": {
    "sql": "SELECT t.team_long_name \nFROM Team t \nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id \nWHERE ta.buildUpPlaySpeedClass = 'Slow';",
    "question": "List down the long name for slow speed class team.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
    "reason": [
      "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name"
    ]
  },
  "829": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) - \n    (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference;",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "reason": [
      "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));"
    ]
  },
  "1255": {
    "sql": "WITH AbnormalIgMPatients AS (\n    SELECT DISTINCT ID\n    FROM Laboratory\n    WHERE IGM <= 40 OR IGM >= 400\n),\nDiagnosisCount AS (\n    SELECT Diagnosis, COUNT(*) AS Count\n    FROM Examination\n    WHERE ID IN (SELECT ID FROM AbnormalIgMPatients) AND Diagnosis IS NOT NULL\n    GROUP BY Diagnosis\n)\nSELECT Diagnosis\nFROM DiagnosisCount\nORDER BY Count DESC\nLIMIT 1;",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
    "reason": [
      "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));"
    ]
  },
  "296": {
    "sql": "SELECT b.molecule_id\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE c.bond_id = 'TR000_1_2' AND c.atom_id = 'TR000_1';",
    "question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'",
    "reason": []
  },
  "1527": {
    "sql": "SELECT g.GasStationID, g.Country, g.Segment, SUM(t.Amount * t.Price) AS TotalRevenue\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nGROUP BY g.GasStationID, g.Country, g.Segment\nORDER BY TotalRevenue DESC\nLIMIT 1;",
    "question": "Which gas station has the highest amount of revenue?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
    "reason": []
  },
  "1065": {
    "sql": "SELECT t.team_long_name \nFROM Team t \nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id \nWHERE ta.buildUpPlaySpeedClass = 'Fast';",
    "question": "Please list all team names which the speed class is fast.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
    "reason": [
      "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"
    ]
  },
  "908": {
    "sql": "SELECT r.name AS race_name, r.year, c.location AS circuit_location, MAX(re.laps) AS max_laps\nFROM results re\nJOIN races r ON re.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nGROUP BY re.raceId\nORDER BY max_laps DESC\nLIMIT 1;",
    "question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1",
    "reason": []
  },
  "1314": {
    "sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.department = 'Art and Design';",
    "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "reason": [
      "full name refers to first_name, last_name;"
    ]
  },
  "920": {
    "sql": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Silverstone Circuit';",
    "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "reason": []
  },
  "1530": {
    "sql": "SELECT p.Description, SUM(t.Amount) AS TotalAmount\nFROM transactions_1k t\nJOIN products p ON t.ProductID = p.ProductID\nGROUP BY t.ProductID, p.Description\nORDER BY TotalAmount DESC\nLIMIT 5;",
    "question": "Which are the top five best selling products? Please state the full name of them.",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5",
    "reason": [
      "Description of products contains full name"
    ]
  },
  "1126": {
    "sql": "SELECT DISTINCT p.player_name\nFROM Player p\nJOIN Match m ON p.player_api_id IN (\n    m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5,\n    m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11,\n    m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5,\n    m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11\n)\nJOIN League l ON m.league_id = l.id\nJOIN Country c ON l.country_id = c.id\nWHERE c.name = 'Belgium';",
    "question": "State the name of players who came from Belgium.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
    "reason": [
      "name of players refers to player_name; Belgium is name of country"
    ]
  },
  "1147": {
    "sql": "SELECT p.player_name, pa.overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nORDER BY pa.overall_rating DESC\nLIMIT 1;",
    "question": "Please name one player whose overall strength is the greatest.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
    "reason": [
      "overall strength is the greatest refers to MAX(overall_rating)"
    ]
  },
  "417": {
    "sql": "WITH japanese_translated_sets AS (\n    SELECT COUNT(*) AS total_japanese_sets\n    FROM set_translations\n    WHERE language = 'Japanese'\n),\n\nexpansion_japanese_sets AS (\n    SELECT COUNT(*) AS expansion_japanese_sets\n    FROM set_translations st\n    JOIN sets s ON st.setCode = s.code\n    WHERE st.language = 'Japanese' AND s.type = 'expansion'\n)\n\nSELECT (expansion_japanese_sets.expansion_japanese_sets * 100.0 / japanese_translated_sets.total_japanese_sets) AS percentage\nFROM japanese_translated_sets, expansion_japanese_sets;",
    "question": "What percentage of Japanese translated sets are expansion sets?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'",
    "reason": [
      "Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100"
    ]
  },
  "1372": {
    "sql": "SELECT i.date_received\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.first_name = 'Casey' AND m.last_name = 'Mason';",
    "question": "When did the member, Casey Mason, received the income?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'",
    "reason": [
      "when the income was received refers to date_received"
    ]
  },
  "753": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.height_cm BETWEEN 170 AND 190\nAND c.colour = 'No Colour';",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
    "reason": [
      "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'"
    ]
  },
  "260": {
    "sql": "SELECT COUNT(a.atom_id) AS total_atoms\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br');",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
    "reason": [
      "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'"
    ]
  },
  "1188": {
    "sql": "SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+';",
    "question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'",
    "reason": [
      "female refers to SEX = 'F'; born in 1964 refers to YEAR(Birthday) = 1964; admitted to the hospital refers to Admission = '+'"
    ]
  },
  "131": {
    "sql": "SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loan_count\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.status IN ('C', 'D')\nGROUP BY d.A3\nORDER BY active_loan_count DESC\nLIMIT 1;",
    "question": "Which district has highest active loan?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
    "reason": [
      "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"
    ]
  },
  "1159": {
    "sql": "SELECT p.ID, p.SEX, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.ALB < 3.5;",
    "question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
    "reason": [
      "albumin level lower than 3.5 refers to ALB < 3.5;"
    ]
  },
  "440": {
    "sql": "SELECT DISTINCT fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'A Pedra Fellwar';",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "reason": [
      "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'"
    ]
  },
  "268": {
    "sql": "SELECT a1.element AS element1, a2.element AS element2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR001_10_11';",
    "question": "What are the elements for bond id TR001_10_11?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
    "reason": [
      "TR001_10_11 is the bond id;"
    ]
  },
  "1134": {
    "sql": "SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS jumping_difference;",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "reason": [
      "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)"
    ]
  },
  "1532": {
    "sql": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.ProductID = 2\nORDER BY t.Price DESC\nLIMIT 1;",
    "question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1",
    "reason": []
  },
  "232": {
    "sql": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '-' AND b.bond_type = '-'\nORDER BY m.molecule_id\nLIMIT 3;",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
    "reason": [
      "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;"
    ]
  },
  "246": {
    "sql": "SELECT b.bond_type, b.bond_id\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE SUBSTR(a.atom_id, 7, 2) + 0 = 45;",
    "question": "List the bond type and the bond ID of the atom 45.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'",
    "reason": [
      "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
    ]
  },
  "561": {
    "sql": "SELECT p.Title\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nORDER BY c.Score DESC\nLIMIT 1;",
    "question": "What is the title for the post which got the highest score comment?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )",
    "reason": [
      "highest score comment refers to Max(comments.Score)"
    ]
  },
  "1162": {
    "sql": "SELECT COUNT(*) \nFROM Patient \nWHERE SEX = 'F' \nAND strftime('%Y', Description) = '1997' \nAND Admission = '-';",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
    "reason": [
      "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; immediately followed at the outpatient clinic refers to Admission = '-'"
    ]
  },
  "356": {
    "sql": "SELECT COUNT(*) FROM cards WHERE power = '*';",
    "question": "How many cards have infinite power?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM cards WHERE power = '*'",
    "reason": [
      "infinite power refers to power = '*';"
    ]
  },
  "591": {
    "sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers\nFROM badges\nWHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011';",
    "question": "How many users are awarded with supporter badge during year 2011?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
    "reason": [
      "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011"
    ]
  },
  "1408": {
    "sql": "SELECT SUM(cost) AS total_parking_cost FROM expense WHERE expense_description LIKE '%Parking%';",
    "question": "Calculate the total cost spent for Parking in the list.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
    "reason": [
      "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'"
    ]
  },
  "1025": {
    "sql": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE m.season = '2015/2016'\nGROUP BY m.league_id\nORDER BY total_goals DESC\nLIMIT 1;",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
    "reason": [
      "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';"
    ]
  },
  "642": {
    "sql": "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';",
    "question": "How many posts were created on 21st July, 2010?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
    "reason": [
      "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';"
    ]
  },
  "1096": {
    "sql": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Pietro Marino');",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "reason": [
      "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)"
    ]
  },
  "39": {
    "sql": "SELECT AVG(s.NumTstTakr) AS average_test_takers\nFROM schools sc\nJOIN satscores s ON sc.CDSCode = s.cds\nWHERE sc.County = 'Fresno'\nAND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
    "reason": [
      "between 1/1/1980 and 12/31/1980 means the year = 1980"
    ]
  },
  "1450": {
    "sql": "SELECT e.event_name, z.city, z.county\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nJOIN income i ON m.member_id = i.link_to_member\nJOIN zip_code z ON m.zip = z.zip_code\nGROUP BY e.event_id\nHAVING COUNT(i.income_id) > 40;",
    "question": "In the events with more than forty incomes, list the city and country in which the event is happening.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
    "reason": [
      "more than fifty incomes refers to income > 40"
    ]
  },
  "1466": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, ma.college\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE m.position = 'Secretary';",
    "question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "reason": [
      "full name refers to first_name, last name"
    ]
  },
  "323": {
    "sql": "-- The schema does not provide any information about carcinogenicity, so the query cannot determine if molecule TR000 is carcinogenic.\n-- The following query retrieves the label of molecule TR000, but it does not confirm carcinogenicity.\nSELECT label FROM molecule WHERE molecule_id = 'TR000';",
    "question": "Is molecule TR000 is carcinogenic or not?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "47": {
    "sql": "SELECT COUNT(*) / 12.0 AS monthly_average\nFROM schools\nWHERE County = 'Alameda'\n  AND DOC = '52'\n  AND strftime('%Y', OpenDate) = '1980';",
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
    "reason": [
      "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12"
    ]
  },
  "248": {
    "sql": "SELECT a1.atom_id AS atom1_id, a1.element AS atom1_element, a2.atom_id AS atom2_id, a2.element AS atom2_element\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.molecule_id = 'TR041' AND b.bond_type = '#';",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "reason": [
      "TR041 is the molecule id; triple bond refers to bond_type = '#';"
    ]
  },
  "629": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010') * 1.0 / \n    (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2011') AS ratio_2010_to_2011;",
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
    "reason": [
      "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;"
    ]
  },
  "1165": {
    "sql": "SELECT MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday)) AS age_gap\nFROM Patient\nWHERE ID IN (SELECT DISTINCT ID FROM Laboratory WHERE TG >= 200);",
    "question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200",
    "reason": [
      "age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))); normal triglyceride refers to tg > = 200"
    ]
  },
  "1218": {
    "sql": "WITH FemalePatients AS (\n    SELECT COUNT(*) AS total_female\n    FROM Patient\n    WHERE SEX = 'F'\n),\nHighUAFemalePatients AS (\n    SELECT COUNT(DISTINCT P.ID) AS high_ua_female\n    FROM Patient P\n    JOIN Laboratory L ON P.ID = L.ID\n    WHERE P.SEX = 'F' AND L.UA > 6.5\n)\nSELECT (high_ua_female * 100.0 / total_female) AS percentage\nFROM FemalePatients, HighUAFemalePatients;",
    "question": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "reason": [
      "uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'; female refers to Sex = 'F'"
    ]
  },
  "836": {
    "sql": "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';",
    "question": "What is the total number of superheroes that have John as their first name?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'",
    "reason": [
      "have John as their first name refers to full_name LIKE 'John%';"
    ]
  },
  "1435": {
    "sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "reason": [
      "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; "
    ]
  },
  "944": {
    "sql": "WITH race_info AS (\n    SELECT raceId FROM races \n    WHERE year = 2008 AND name = 'Australian Grand Prix'\n),\nchampion_time AS (\n    SELECT time FROM results \n    WHERE raceId = (SELECT raceId FROM race_info) AND position = 1\n),\nlast_driver_time AS (\n    SELECT time FROM results \n    WHERE raceId = (SELECT raceId FROM race_info) AND time IS NOT NULL\n    ORDER BY time DESC LIMIT 1\n)\nSELECT \n    ((julianday((SELECT time FROM last_driver_time)) - julianday((SELECT time FROM champion_time))) / \n    julianday((SELECT time FROM last_driver_time)) * 100 AS percentage_faster\nFROM champion_time, last_driver_time;",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
    "reason": [
      "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null"
    ]
  },
  "158": {
    "sql": "SELECT a.district_id\nFROM account a\nJOIN `order` o ON a.account_id = o.account_id\nWHERE o.order_id = 33333;",
    "question": "What is the district Id of the account that placed the order with the id 33333?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
    "reason": []
  },
  "1060": {
    "sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';",
    "question": "How many players were born after 1990?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'",
    "reason": [
      "born after 1990 refers to strftime('%Y', birthday) = '1990';"
    ]
  },
  "1407": {
    "sql": "SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;",
    "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
    "reason": [
      "MAX(amount) where category = 'Advertisement'"
    ]
  },
  "1093": {
    "sql": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE strftime('%Y', Player.birthday) < '1986';",
    "question": "What is the average overall rating of the players born before the year 1986?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'",
    "reason": [
      "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';"
    ]
  },
  "1356": {
    "sql": "SELECT m.department\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.position = 'President';",
    "question": "Which department was the President of the club in?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "reason": [
      "'President' is a position of Student Club"
    ]
  },
  "371": {
    "sql": "SELECT \n    (COUNT(CASE WHEN fd.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    cards c\nLEFT JOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.isStorySpotlight = 1;",
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
    "reason": [
      "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100"
    ]
  },
  "484": {
    "sql": "WITH ColdsnapCards AS (\n    SELECT c.id, c.name, c.convertedManaCost, c.uuid\n    FROM cards c\n    JOIN sets s ON c.setCode = s.code\n    WHERE s.name = 'Coldsnap'\n),\nMaxCMC AS (\n    SELECT MAX(convertedManaCost) AS max_cmc\n    FROM ColdsnapCards\n)\nSELECT fd.name AS italian_name\nFROM foreign_data fd\nJOIN ColdsnapCards cc ON fd.uuid = cc.uuid\nJOIN MaxCMC m ON cc.convertedManaCost = m.max_cmc\nWHERE fd.language = 'Italian';",
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)"
    ]
  },
  "648": {
    "sql": "SELECT u.DisplayName, u.WebsiteUrl \nFROM posts p \nJOIN users u ON p.OwnerUserId = u.Id \nWHERE p.FavoriteCount > 150;",
    "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150",
    "reason": [
      "favorite count of more than 150 refers to FavoriteCount > 150;"
    ]
  },
  "669": {
    "sql": "SELECT MIN(v.CreationDate) AS FirstVoteDate\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE u.DisplayName = 'chl';",
    "question": "When did 'chl' cast its first vote in a post?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "reason": [
      "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);"
    ]
  },
  "161": {
    "sql": "SELECT c.type \nFROM card c \nJOIN disp d ON c.disp_id = d.disp_id \nWHERE d.client_id = 13539;",
    "question": "What type of credit card does the client with the id 13539 own?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539",
    "reason": []
  },
  "1431": {
    "sql": "SELECT m.last_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer' AND m.position = 'Member';",
    "question": "List the last name of the members of the club that attended the women's soccer event.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'",
    "reason": [
      "members of the club refers to position = 'Member'; 'Women's Soccer' is event name;"
    ]
  },
  "23": {
    "sql": "SELECT f.`School Name`, s.Street, s.City, s.State, s.Zip\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;",
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
    "reason": [
      "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"
    ]
  },
  "487": {
    "sql": "SELECT \n    (COUNT(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 END) * 100.0 / \n    COUNT(*)) AS percentage_incredibly_powerful\nFROM \n    cards\nWHERE \n    setCode = 'Coldsnap';",
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100"
    ]
  },
  "297": {
    "sql": "SELECT a.atom_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'c' AND m.label = '-';",
    "question": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'"
    ]
  },
  "21": {
    "sql": "SELECT COUNT(*) \nFROM frpm \nJOIN schools ON frpm.CDSCode = schools.CDSCode \nWHERE schools.County = 'Los Angeles' \nAND frpm.\"Free Meal Count (K-12)\" > 500 \nAND frpm.\"FRPM Count (K-12)\" < 700;",
    "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700",
    "reason": []
  },
  "837": {
    "sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);",
    "question": "Give the hero ID of superhero with the lowest attribute value.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
    "reason": [
      "lowest attribute value refers to MIN(attribute_value);"
    ]
  },
  "792": {
    "sql": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Abomination';",
    "question": "What is Abomination's superpower?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "reason": [
      "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;"
    ]
  },
  "216": {
    "sql": "SELECT c.atom_id, c.atom_id2, c.bond_id\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '#';",
    "question": "Identify all connected atoms with a triple bond.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
    "reason": [
      "triple bond refers to bond_type = '#';"
    ]
  },
  "675": {
    "sql": "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;",
    "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000",
    "reason": [
      "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;"
    ]
  },
  "1174": {
    "sql": "SELECT AVG(1999 - strftime('%Y', p.Birthday)) AS average_age\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.Date BETWEEN '1991-10-01' AND '1991-10-31';",
    "question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'",
    "reason": [
      "average age of patients as of year 1999 refers to AVG(SUBTRACT('1999', year(Birthday))); October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'"
    ]
  },
  "1528": {
    "sql": "SELECT \n    (COUNT(CASE WHEN Segment = 'premium' THEN 1 END) * 100.0 / COUNT(*)) AS premium_percentage\nFROM \n    gasstations\nWHERE \n    Country = 'SVK';",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
    "reason": []
  },
  "560": {
    "sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Revival';",
    "question": "Give the number of \"Revival\" badges.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
    "reason": [
      "number refers to Id; 'Revival' is the Name of badge"
    ]
  },
  "16": {
    "sql": "SELECT COUNT(*) \nFROM satscores \nJOIN schools ON satscores.cds = schools.CDSCode \nWHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100;",
    "question": "How many schools in merged Alameda have number of test takers less than 100?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'",
    "reason": []
  },
  "1317": {
    "sql": "SELECT COUNT(*) AS medium_shirt_attendees\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women\\'s Soccer' AND member.t_shirt_size = 'Medium';",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "reason": [
      "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'"
    ]
  },
  "1464": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE i.date_received = '9/9/2019';",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "reason": [
      "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received"
    ]
  },
  "1005": {
    "sql": "SELECT d.forename, d.surname, MAX(p.duration) AS longest_pitstop_duration\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId;",
    "question": "What was the longest time a driver had ever spent at a pit stop?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1",
    "reason": [
      "longest time spent at pitstop refers to MAX(duration)"
    ]
  },
  "1508": {
    "sql": "SELECT COUNT(*) \nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'CZE' AND t.Price > 1000;",
    "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
    "reason": [
      "Gas station in the Czech Republic implies that Country = 'CZE'"
    ]
  },
  "573": {
    "sql": "SELECT Text FROM comments WHERE Score = 17;",
    "question": "Write the contents of comments with a score of 17.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Text FROM comments WHERE Score = 17",
    "reason": [
      "score of 17 refers to Score = 17; contents of comments refers to Text"
    ]
  },
  "1418": {
    "sql": "SELECT DISTINCT type FROM event WHERE location = 'MU 215';",
    "question": "Mention the category of events which were held at MU 215.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "reason": [
      "held at MU 215 refers to location = 'MU 215'"
    ]
  },
  "101": {
    "sql": "SELECT a.account_id, a.district_id, a.frequency, a.date\nFROM account a\nJOIN trans t ON a.account_id = t.account_id\nWHERE t.date = (SELECT MIN(date) FROM trans WHERE strftime('%Y', date) = '1995')\nAND strftime('%Y', t.date) = '1995';",
    "question": "List out the accounts who have the earliest trading date in 1995 ?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
    "reason": []
  },
  "11": {
    "sql": "SELECT CDSCode FROM frpm WHERE (\"Enrollment (K-12)\" + \"Enrollment (Ages 5-17)\") > 500;",
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
    "reason": [
      "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`"
    ]
  },
  "1020": {
    "sql": "SELECT p.player_api_id, p.player_name, pa.overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
    "question": "Which player has the highest overall rating? Indicate the player's api id.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
    "reason": [
      "highest overall rating refers to MAX(overall_rating);"
    ]
  },
  "85": {
    "sql": "SELECT \n    f.`District Code`,\n    (f.`Free Meal Count (K-12)` / f.`Enrollment (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)`\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.AdmFName1 = 'Alusine' OR s.AdmFName2 = 'Alusine' OR s.AdmFName3 = 'Alusine';",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "reason": [
      "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%"
    ]
  },
  "1385": {
    "sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE i.amount > 40;",
    "question": "Which student was able to generate income more than $40?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
    "reason": [
      "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40"
    ]
  },
  "1462": {
    "sql": "SELECT b.category, b.amount\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'January Speaker';",
    "question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "reason": [
      "amount budgeted refers to amount, 'January Speaker' is the event name;"
    ]
  },
  "311": {
    "sql": "SELECT COUNT(DISTINCT m.molecule_id) \nFROM molecule m\nWHERE m.molecule_id NOT IN (\n    SELECT DISTINCT a.molecule_id \n    FROM atom a \n    WHERE a.element = 's'\n)\nAND m.molecule_id NOT IN (\n    SELECT DISTINCT b.molecule_id \n    FROM bond b \n    WHERE b.bond_type = ' = '\n);",
    "question": "How many molecules without sulphur element is not having double bond?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='",
    "reason": [
      "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'"
    ]
  },
  "65": {
    "sql": "SELECT \n    (COUNT(CASE WHEN FundingType = 'Local' THEN 1 END) * 100.0 / COUNT(*)) AS ratio_percentage\nFROM \n    schools\nWHERE \n    County = 'Santa Clara';",
    "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
    "reason": [
      "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%"
    ]
  },
  "1488": {
    "sql": "SELECT c.CustomerID, SUM(ym.Consumption) AS TotalConsumption\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Segment = 'KAM'\nGROUP BY c.CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;",
    "question": "Who among KAM's customers consumed the most? How much did it consume?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "reason": []
  },
  "250": {
    "sql": "SELECT m.molecule_id, COUNT(b.bond_id) AS double_bond_count\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '+' AND b.bond_type = ' = '\nGROUP BY m.molecule_id\nORDER BY double_bond_count DESC\nLIMIT 1;",
    "question": "Of all the carcinogenic molecules, which one has the most double bonds?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T",
    "reason": [
      "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"
    ]
  },
  "136": {
    "sql": "SELECT COUNT(*) AS loan_count\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE a.frequency = 'POPLATEK MESICNE'\nAND l.date BETWEEN '1995-01-01' AND '1997-12-31'\nAND l.amount >= 250000\nAND l.status = 'approved';",
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
    "reason": [
      "Frequency = 'POPLATEK MESICNE' stands for monthly issurance"
    ]
  },
  "702": {
    "sql": "SELECT COUNT(*) FROM posts WHERE Score < 20;",
    "question": "How many posts have a score less than 20?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM posts WHERE Score < 20",
    "reason": [
      "score less than 20 refers to Score < 20;"
    ]
  },
  "1443": {
    "sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';",
    "question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'",
    "reason": [
      "event_date BETWEEN '2019-11-01' and '2020-03-31'"
    ]
  },
  "153": {
    "sql": "SELECT COUNT(*) AS classic_cards_eligible_for_loan\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nJOIN account ON disp.account_id = account.account_id\nWHERE card.type = 'classic' AND disp.type = 'OWNER';",
    "question": "How many 'classic' cards are eligible for loan?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
    "reason": [
      "when the account type = 'OWNER', it's eligible for loan"
    ]
  },
  "711": {
    "sql": "SELECT COUNT(DISTINCT u.Id) AS TotalUsers\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score = 0 AND u.Age = 40;",
    "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
    "reason": []
  },
  "1210": {
    "sql": "SELECT AVG(LDH) AS average_LDH FROM Laboratory WHERE LDH < 500;",
    "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
    "reason": [
      "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500"
    ]
  },
  "633": {
    "sql": "SELECT p.Id\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'slashnick'\nORDER BY p.AnswerCount DESC\nLIMIT 1;",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "reason": [
      "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';"
    ]
  },
  "75": {
    "sql": "SELECT `School Name`, `Educational Option Type` FROM frpm WHERE `County Code` = '37' AND `NSLP Provision Status` = '2';",
    "question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37",
    "reason": []
  },
  "1432": {
    "sql": "SELECT (COUNT(CASE WHEN i.amount = 50 AND i.source = 'Student_Club' THEN 1 END) * 100.0 / COUNT(m.member_id)) AS percentage\nFROM member m\nLEFT JOIN income i ON m.member_id = i.link_to_member\nWHERE m.t_shirt_size = 'Medium';",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "reason": [
      "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100"
    ]
  },
  "1283": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS MalePatientsWithNormalGPT\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M' AND L.GPT < 60;",
    "question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
    "reason": [
      "normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';"
    ]
  },
  "327": {
    "sql": "SELECT m.molecule_id, m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '-'\nGROUP BY m.molecule_id, m.label\nHAVING COUNT(a.atom_id) > 5;",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
    "reason": [
      "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5"
    ]
  },
  "676": {
    "sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;",
    "question": "Please list all display names of users who are adults.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
    "reason": [
      "adults refer to users where Age BETWEEN 19 and 65;"
    ]
  },
  "420": {
    "sql": "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;",
    "question": "How many cards are oversized, reprinted, and printed for promotions?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
    "reason": [
      "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1"
    ]
  },
  "1393": {
    "sql": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';",
    "question": "Provide the full name and email address of the Student_Club's Secretary.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "reason": [
      "full name refers to first_name, last_name; 'Secretary' is a position of Student Club"
    ]
  },
  "519": {
    "sql": "SELECT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Battlebond';",
    "question": "What is the language of the \"Battlebond\" set?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )",
    "reason": [
      "\"Battlebond\" set refers to name = 'Battlebond'"
    ]
  },
  "434": {
    "sql": "SELECT COUNT(DISTINCT s.code) \nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Japanese'\nAND s.mtgoCode IS NULL;",
    "question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
    "reason": [
      "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''"
    ]
  },
  "140": {
    "sql": "SELECT COUNT(*) AS account_count\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE district.A2 = 'Pisek';",
    "question": "How many accounts are there in the district of \"Pisek\"?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
    "reason": [
      "A2 refers to district name"
    ]
  },
  "1062": {
    "sql": "SELECT DISTINCT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.overall_rating > 80\nAND pa.date BETWEEN '2008-01-01' AND '2010-12-31';\n",
    "question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010'",
    "reason": [
      "overall_rating > 80; from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010';"
    ]
  },
  "827": {
    "sql": "SELECT AVG(s.height_cm) AS average_height\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN race r ON s.race_id = r.id\nWHERE p.publisher_name = 'Dark Horse Comics'\nAND r.race != 'Human';",
    "question": "What is the average height of a non-human superhero in Dark Horse Comics?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'",
    "reason": [
      "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
    ]
  },
  "1149": {
    "sql": "WITH male_in_patients AS (\n    SELECT COUNT(*) AS count_in_patient\n    FROM Patient\n    WHERE SEX = 'M' AND Admission = '+'\n),\nmale_out_patients AS (\n    SELECT COUNT(*) AS count_out_patient\n    FROM Patient\n    WHERE SEX = 'M' AND Admission = '-'\n)\nSELECT \n    CASE \n        WHEN count_in_patient > count_out_patient THEN 'More in-patient males'\n        WHEN count_in_patient < count_out_patient THEN 'More outpatient males'\n        ELSE 'Equal number of in-patient and outpatient males'\n    END AS comparison,\n    ABS(count_in_patient - count_out_patient) * 100.0 / count_out_patient AS percentage_deviation\nFROM male_in_patients, male_out_patients;",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
    "reason": [
      "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX  = 'M' and Admission = '-')"
    ]
  },
  "882": {
    "sql": "SELECT MIN(year) AS first_year FROM races WHERE name LIKE '%Singapore Grand Prix%';",
    "question": "Which year was the first Singapore Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
    "reason": [
      "the first race refers to race happened in min(year);"
    ]
  },
  "1238": {
    "sql": "SELECT p.ID, p.SEX\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SLE'\n  AND l.HGB BETWEEN 12 AND 17.5\nORDER BY p.Birthday ASC\nLIMIT 1;",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
    "reason": [
      "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;"
    ]
  },
  "1363": {
    "sql": "SELECT DISTINCT department FROM major WHERE college = 'Humanities and Social Sciences';",
    "question": "List all of the College of Humanities and Social Sciences' departments.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "reason": []
  },
  "597": {
    "sql": "SELECT COUNT(DISTINCT u.Id) \nFROM users u \nJOIN badges b ON u.Id = b.UserId \nWHERE u.Location = 'India' AND b.Name = 'Teacher';",
    "question": "How many users from India have the teacher badges?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
    "reason": [
      "\"India\" is the Location; \"Teacher\" is the Name of badge"
    ]
  },
  "812": {
    "sql": "SELECT s.full_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE c.colour = 'Blue'\nLIMIT 5;",
    "question": "List down at least five full names of superheroes with blue eyes.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "reason": [
      "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;"
    ]
  },
  "343": {
    "sql": "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;",
    "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
    "reason": [
      "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;"
    ]
  },
  "446": {
    "sql": "WITH abyssal_horror_set AS (\n    SELECT code FROM sets WHERE name = 'Abyssal Horror'\n),\ntotal_cards AS (\n    SELECT COUNT(*) AS total FROM cards WHERE setCode = (SELECT code FROM abyssal_horror_set)\n),\ncmc_10_cards AS (\n    SELECT COUNT(*) AS cmc_10 FROM cards WHERE setCode = (SELECT code FROM abyssal_horror_set) AND convertedManaCost = 10\n)\nSELECT (cmc_10 * 100.0 / NULLIF(total, 0)) AS percentage\nFROM total_cards, cmc_10_cards;",
    "question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'",
    "reason": [
      "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100"
    ]
  },
  "118": {
    "sql": "SELECT \n    (COUNT(CASE WHEN l.status = 'C' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nWHERE \n    l.amount < 100000;",
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
    "reason": [
      "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100."
    ]
  },
  "819": {
    "sql": "SELECT \n    (SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN s.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference\nFROM \n    superhero s\nWHERE \n    s.weight_kg = 0 OR s.weight_kg IS NULL;",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
    "reason": [
      "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;"
    ]
  },
  "708": {
    "sql": "SELECT u.CreationDate, u.Age\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nWHERE c.Text LIKE '%http://%';",
    "question": "List the creation date and age of the user that commented with webiste.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'",
    "reason": [
      "commented with webiste refers to the value contains 'http://'"
    ]
  },
  "18": {
    "sql": "SELECT COUNT(*) \nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE s.County = 'Fresno' \nAND s.FundingType = 'Directly Funded' \nAND sc.NumTstTakr <= 250;",
    "question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250",
    "reason": []
  },
  "645": {
    "sql": "SELECT COUNT(*) AS negative_comments_count FROM comments WHERE UserId = 13 AND Score < 60;",
    "question": "How many negative comments were given by user ID 13?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
    "reason": [
      "negative comments refer to Score < 60;"
    ]
  },
  "355": {
    "sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';",
    "question": "What is the keyword found on card 'Angel of Mercy'?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "reason": [
      "Angel of Mercy' is the name of card;"
    ]
  },
  "1299": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS PatientCount\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nJOIN Examination E ON P.ID = E.ID\nWHERE L.TG < 200 AND E.Symptoms IS NOT NULL;",
    "question": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL",
    "reason": [
      "normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;"
    ]
  },
  "793": {
    "sql": "SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;",
    "question": "Among the superheroes with the race of god/eternal, how many of them are male",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1",
    "reason": [
      "race \"god/eternal\" refers to race_id = 21; male refers to gender.id = 1"
    ]
  },
  "1352": {
    "sql": "SELECT COUNT(*) \nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Business' AND m.t_shirt_size = 'Medium';",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
    "reason": [
      "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'"
    ]
  },
  "419": {
    "sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;",
    "question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'",
    "reason": [
      "color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000"
    ]
  },
  "447": {
    "sql": "SELECT code FROM sets WHERE type = 'expansion' OR type = 'commander';",
    "question": "Give the code of sets have expansion commander type?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "reason": [
      "code of sets refers to setCode"
    ]
  },
  "549": {
    "sql": "SELECT p.Body \nFROM tags t \nJOIN posts p ON t.ExcerptPostId = p.Id \nWHERE t.TagName = 'bayesian';",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "reason": [
      "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId"
    ]
  },
  "1237": {
    "sql": "SELECT DISTINCT p.ID, p.SEX\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-' AND l.HGB < 10;",
    "question": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'",
    "reason": [
      "outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;"
    ]
  },
  "1085": {
    "sql": "SELECT p.player_name, pa.crossing\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')\nORDER BY pa.crossing DESC\nLIMIT 1;",
    "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
    "reason": [
      "player who perform best in crossing actions refers to MAX(crossing);"
    ]
  },
  "1000": {
    "sql": "SELECT c.name AS racetrack, c.location || ', ' || c.country AS full_location\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.date = (SELECT MAX(date) FROM races);",
    "question": "Which racetrack hosted the most recent race? Indicate the full location.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1",
    "reason": [
      "full location refers to location+country; most recent race = MAX(date)\n\n"
    ]
  },
  "714": {
    "sql": "SELECT c.Id, c.Text, c.CreationDate\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky';",
    "question": "List the comments commented by the user with a username of Harvey Motulsky.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
    "reason": [
      "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';"
    ]
  },
  "905": {
    "sql": "SELECT AVG(r.points) AS average_points\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2000 AND d.forename = 'Eddie' AND d.surname = 'Irvine';",
    "question": "What is Eddie Irvine's average points scored in year 2000?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
    "reason": [
      "average points = AVG(points where year = 2000)"
    ]
  },
  "1164": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Examination E ON P.ID = E.ID \nWHERE E.Thrombosis = 1 \nAND strftime('%Y', E.`Examination Date`) = '1997' \nAND P.SEX = 'F';",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
    "reason": [
      "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'"
    ]
  },
  "1475": {
    "sql": "SELECT COUNT(DISTINCT c.CustomerID) AS NumberOfCustomers\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Segment = 'KAM'\nAND ym.Date BETWEEN '201201' AND '201212'\nGROUP BY c.CustomerID\nHAVING SUM(ym.Consumption) < 30000;",
    "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
    "reason": [
      "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012"
    ]
  },
  "886": {
    "sql": "SELECT year, COUNT(*) AS race_count FROM races GROUP BY year ORDER BY race_count DESC LIMIT 1;",
    "question": "Which year has the most number of races?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
    "reason": [
      "the most number of races refers to max(round);"
    ]
  },
  "1505": {
    "sql": "SELECT COUNT(DISTINCT c.CustomerID) \nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Currency = 'EUR' AND ym.Consumption > 1000;",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
    "reason": [
      "Pays in euro = Currency = 'EUR'."
    ]
  },
  "1338": {
    "sql": "SELECT e.expense_id, e.expense_description, e.approved\nFROM event ev\nJOIN budget b ON ev.event_id = b.link_to_event\nJOIN expense e ON b.budget_id = e.link_to_budget\nWHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "reason": [
      "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved"
    ]
  },
  "192": {
    "sql": "SELECT AVG(l.amount) AS average_loan_amount\nFROM loan l\nJOIN trans t ON l.account_id = t.account_id\nWHERE l.status IN ('C', 'D') AND t.k_symbol = 'POPLATEK PO OBRATU';",
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
    "reason": [
      "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction"
    ]
  },
  "583": {
    "sql": "SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE u.DisplayName = 'Yevgeny';\n",
    "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "reason": [
      "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId"
    ]
  },
  "1416": {
    "sql": "SELECT COUNT(*) \nFROM member \nJOIN major ON member.link_to_major = major.major_id \nWHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
    "question": "How many members of Business have the Medium size of tee shirt?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'",
    "reason": [
      "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'"
    ]
  },
  "620": {
    "sql": "SELECT u.Views\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Date = '2010-07-19 19:39:08.0';",
    "question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "reason": [
      "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"
    ]
  },
  "866": {
    "sql": "SELECT d.url \nFROM drivers d \nJOIN lapTimes l ON d.driverId = l.driverId \nWHERE l.raceId = 161 AND l.time = '0:01:27';",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "reason": [
      "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;"
    ]
  },
  "653": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts);",
    "question": "What is the owner's display name of the most popular post?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
    "reason": [
      "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);"
    ]
  },
  "762": {
    "sql": "SELECT sp.power_name, COUNT(hp.power_id) AS power_count\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nGROUP BY sp.power_name\nORDER BY power_count DESC\nLIMIT 1;",
    "question": "Which power do superheroes have the most of?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
    "reason": [
      "power that superheroes have the most refers to MAX(COUNT(power_name))"
    ]
  },
  "1187": {
    "sql": "SELECT DISTINCT ID\nFROM Laboratory\nWHERE Date BETWEEN '1987-07-06' AND '1996-01-31'\n  AND GPT > 30\n  AND ALB < 4;",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "reason": [
      "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4"
    ]
  },
  "580": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Necromancer'\nLIMIT 10;",
    "question": "Name 10 users with the badge name 'Necromancer.'",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "reason": [
      "\"Necromancer\" is the Name of badge; users refers to DisplayName"
    ]
  },
  "1327": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Laugh Out Loud';",
    "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "reason": [
      "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;"
    ]
  },
  "1439": {
    "sql": "SELECT m.phone\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Business' AND maj.college = 'College of Agriculture and Applied Sciences';",
    "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "reason": [
      "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone"
    ]
  },
  "1522": {
    "sql": "SELECT c.Currency\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE ym.Date = '201306' AND ym.Consumption = 214582.17;",
    "question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17",
    "reason": [
      "June of 2013 means Date contains '201306' in the yearmonth.date of the database"
    ]
  },
  "1022": {
    "sql": "SELECT preferred_foot \nFROM Player_Attributes \nWHERE potential = (SELECT MIN(potential) FROM Player_Attributes);",
    "question": "What is the preferred foot when attacking of the player with the lowest potential?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1",
    "reason": [
      "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);"
    ]
  },
  "533": {
    "sql": "SELECT COUNT(*) AS user_count FROM users WHERE LastAccessDate > '2014-09-01';",
    "question": "How many users last accessed the website after 2014/9/1?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
    "reason": [
      "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'"
    ]
  },
  "346": {
    "sql": "SELECT c.id, c.artist\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE (c.power = '*' OR c.power IS NULL)\nAND l.format = 'commander'\nAND l.status = 'Legal';",
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
    "reason": [
      "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'"
    ]
  },
  "1448": {
    "sql": "SELECT e.event_name, e.event_date\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.expense_description LIKE '%pizza%'\nAND ex.cost > 50\nAND ex.cost < 100;",
    "question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
    "reason": [
      "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100"
    ]
  },
  "74": {
    "sql": "SELECT frpm.\"Low Grade\"\nFROM schools\nJOIN frpm ON schools.CDSCode = frpm.CDSCode\nWHERE schools.NCESDist = '0613360' AND schools.EdOpsCode = 'SPECON';",
    "question": "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'",
    "reason": [
      "District Special Education Consortia School refers to EdOpsCode = 'SPECON'."
    ]
  },
  "56": {
    "sql": "SELECT COUNT(*) \nFROM schools \nWHERE MailState = 'CA' \nAND MailCity = 'San Joaquin' \nAND StatusType = 'Active';",
    "question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin city?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'",
    "reason": []
  },
  "488": {
    "sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';",
    "question": "What's the code for the set which was released on 2017/7/14?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code",
    "reason": [
      "released on 2017/7/14 refers to releaseDate = '2017-07-14'"
    ]
  },
  "879": {
    "sql": "SELECT d.nationality \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nWHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "reason": [
      "the fastest lap speed refers to (MAX) fastestLapSpeed;"
    ]
  },
  "1040": {
    "sql": "SELECT p.player_name, AVG(pa.heading_accuracy) AS avg_heading_accuracy\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 180\nGROUP BY p.player_name\nORDER BY avg_heading_accuracy DESC\nLIMIT 10;",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
    "reason": [
      "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));"
    ]
  },
  "249": {
    "sql": "SELECT a1.element AS element1, a2.element AS element2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR144_8_19';",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
    "reason": [
      "TR144_8_19 is the bond id; "
    ]
  },
  "730": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE p.publisher_name = 'Marvel Comics'\nAND sp.power_name = 'Super Strength';",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "reason": [
      "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';"
    ]
  },
  "978": {
    "sql": "SELECT c.name, c.location, c.lat, c.lng, COUNT(r.raceId) AS race_count\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nWHERE c.country = 'Austria'\nGROUP BY c.circuitId, c.name, c.location, c.lat, c.lng;",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "reason": [
      "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';"
    ]
  },
  "1217": {
    "sql": "SELECT \n    P.ID,\n    CASE \n        WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'\n        ELSE 'Outside Normal Range'\n    END AS AlbuminStatus\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    strftime('%Y', P.Birthday) = '1982';\n",
    "question": "For all patient born in 1982, state if their albumin is within normal range.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'",
    "reason": [
      "Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5"
    ]
  },
  "778": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Adaptation';",
    "question": "Provide superheroes' names who have the adaptation power.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "reason": [
      "adaptation power refers to power_name = 'Adaptation';"
    ]
  },
  "1423": {
    "sql": "SELECT COUNT(*) FROM income WHERE amount = 50;",
    "question": "How many income are received with an amount of 50?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(income_id) FROM income WHERE amount = 50",
    "reason": [
      "amount of 50 refers to amount = 50"
    ]
  },
  "123": {
    "sql": "SELECT a.account_id, d.A2 AS district, d.A3 AS region\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.amount > 300000;",
    "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
    "reason": [
      "A2 contains district names and A3 contains region names."
    ]
  },
  "752": {
    "sql": "SELECT superhero.superhero_name\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE race.race = 'Alien';",
    "question": "Give the name of the alien superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "reason": [
      "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;"
    ]
  },
  "1153": {
    "sql": "SELECT p.Diagnosis AS Disease, l.Date AS LaboratoryTestDate\nFROM Patient p\nLEFT JOIN Laboratory l ON p.ID = l.ID\nWHERE p.ID = 30609\nUNION\nSELECT e.Diagnosis AS Disease, l.Date AS LaboratoryTestDate\nFROM Examination e\nLEFT JOIN Laboratory l ON e.ID = l.ID\nWHERE e.ID = 30609;",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "reason": [
      "'30609' is the Patient ID; disease means Diagnosis"
    ]
  },
  "1459": {
    "sql": "SELECT m.major_name, m.department\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Garrett' AND mb.last_name = 'Gerke';",
    "question": "What is the major of Garrett Gerke and which department does it belong to?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "reason": [
      "major refers to major name;"
    ]
  },
  "963": {
    "sql": "SELECT COUNT(DISTINCT d.driverId) AS french_drivers_with_fast_lap\nFROM drivers d\nJOIN lapTimes l ON d.driverId = l.driverId\nWHERE d.nationality = 'French' AND l.milliseconds < 120000;",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
    "reason": [
      "lap time less than 02:00.00 refers to seconds < 120;"
    ]
  },
  "550": {
    "sql": "SELECT p.Body \nFROM posts p \nJOIN tags t ON p.Id = t.ExcerptPostId \nWHERE t.Count = (SELECT MAX(Count) FROM tags);",
    "question": "From which post is the most popular tag excerpted from? Please give the body of the post.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )",
    "reason": [
      "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId"
    ]
  },
  "406": {
    "sql": "SELECT c.id\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.types LIKE '%Creature%'\nAND l.status = 'legal';",
    "question": "Lists by ID all Creature-type cards with legal status.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "reason": [
      "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';"
    ]
  },
  "1339": {
    "sql": "SELECT AVG(e.cost) AS average_cost\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event ev ON a.link_to_event = ev.event_id\nWHERE m.first_name = 'Elijah' AND m.last_name = 'Allen'\nAND (SUBSTR(ev.event_date, 6, 2) = '09' OR SUBSTR(ev.event_date, 6, 2) = '10');",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "reason": [
      "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10"
    ]
  },
  "1009": {
    "sql": "SELECT d.forename, d.surname, p.duration\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId\nJOIN races r ON p.raceId = r.raceId\nWHERE r.name = 'Australian Grand Prix' AND r.year = 2011;",
    "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
    "reason": [
      "time spent at pit stop refers to duration"
    ]
  },
  "1115": {
    "sql": "WITH \n    donovan_rating AS (\n        SELECT overall_rating\n        FROM Player_Attributes pa\n        JOIN Player p ON pa.player_api_id = p.player_api_id\n        WHERE p.player_name = 'Landon Donovan' AND pa.date = '2013-07-12'\n    ),\n    bowery_rating AS (\n        SELECT overall_rating\n        FROM Player_Attributes pa\n        JOIN Player p ON pa.player_api_id = p.player_api_id\n        WHERE p.player_name = 'Jordan Bowery' AND pa.date = '2013-07-12'\n    )\nSELECT \n    CASE \n        WHEN (SELECT overall_rating FROM donovan_rating) IS NOT NULL AND (SELECT overall_rating FROM bowery_rating) IS NOT NULL\n        THEN ((SELECT overall_rating FROM donovan_rating) - (SELECT overall_rating FROM bowery_rating)) * 100.0 / (SELECT overall_rating FROM donovan_rating)\n        ELSE NULL\n    END AS percentage_higher;",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
    "reason": [
      "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100"
    ]
  },
  "233": {
    "sql": "SELECT bond_id, bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_type ASC LIMIT 2;",
    "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
    "reason": [
      "TR006 is the molecule id"
    ]
  },
  "1140": {
    "sql": "SELECT p.player_name, pa.sprint_speed, pa.agility, pa.acceleration\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Alexis Blin';",
    "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
    "reason": [
      "Alexis Blin's refers to player_name = 'Alexis Blin'"
    ]
  },
  "198": {
    "sql": "SELECT AVG(single_bond_count) AS average_single_bonded\nFROM (\n    SELECT m.molecule_id, COUNT(b.bond_id) AS single_bond_count\n    FROM molecule m\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    WHERE m.label = '+' AND b.bond_type = '-'\n    GROUP BY m.molecule_id\n);",
    "question": "On average how many carcinogenic molecules are single bonded?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
    "reason": [
      "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))"
    ]
  },
  "1265": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE (L.RNP = '-' OR L.RNP = '+-') AND P.Admission = '+';",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "reason": [
      "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;"
    ]
  },
  "750": {
    "sql": "SELECT AVG(s.weight_kg) AS average_weight\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE g.gender = 'Female';",
    "question": "What is the average weight of all female superheroes?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
    "reason": [
      "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)"
    ]
  },
  "947": {
    "sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) > '1980';",
    "question": "How many British drivers were born after 1980?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
    "reason": [
      "born after 1980 refers to year (dob) >1980;"
    ]
  },
  "1133": {
    "sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31';",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "reason": [
      "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'"
    ]
  },
  "1023": {
    "sql": "SELECT COUNT(*) AS number_of_players\nFROM Player_Attributes\nWHERE overall_rating BETWEEN 60 AND 65\nAND defensive_work_rate = 'low';",
    "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
    "reason": [
      "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';"
    ]
  },
  "1105": {
    "sql": "SELECT p.player_name, pa.attacking_work_rate\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francesco Migliore' AND pa.date LIKE '2015-05-01%';",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "reason": [
      "Francesco Migliore refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date LIKE '2015-05-01%';"
    ]
  },
  "489": {
    "sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';",
    "question": "List the keyrune code for the set whose code is 'PKHC'.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
    "reason": [
      "keyrune code refers to keyruneCode"
    ]
  },
  "1167": {
    "sql": "SELECT COUNT(DISTINCT L.ID) / 12.0 AS average_male_patients_per_month\nFROM Laboratory L\nJOIN Patient P ON L.ID = P.ID\nWHERE P.SEX = 'M'\nAND L.Date BETWEEN '1998-01-01' AND '1998-12-31';",
    "question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'",
    "reason": [
      "the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'; male refers to SEX = 'M'; calculation = DIVIDE(COUNT(ID), 12)"
    ]
  },
  "404": {
    "sql": "SELECT DISTINCT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.totalSetSize = 309;",
    "question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309",
    "reason": [
      "set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309\n\n"
    ]
  },
  "1303": {
    "sql": "SELECT MIN(P.Birthday) AS OldestPatientBirthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.GLU > 180;",
    "question": "When is the birthday of the oldest patient whose blood glucose is abnormal?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1",
    "reason": [
      "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;"
    ]
  },
  "170": {
    "sql": "SELECT COUNT(*) AS credit_card_withdrawals_after_1995\nFROM trans\nWHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';",
    "question": "How many credit card withdrawals were recorded after 1995?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
    "reason": [
      "Operation = 'VYBER KARTOU' means credit card withdrawals"
    ]
  },
  "1049": {
    "sql": "SELECT COUNT(*) \nFROM \"Match\" \nWHERE league_id = (SELECT id FROM \"League\" WHERE name = 'Scotland Premier League') \nAND season = '2015/2016';",
    "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'",
    "reason": [
      "Scotland Premier League refers to League.name = 'Scotland Premier League';"
    ]
  },
  "786": {
    "sql": "WITH strength_attribute AS (\n    SELECT id FROM attribute WHERE attribute_name = 'Strength'\n),\nmax_strength AS (\n    SELECT MAX(attribute_value) AS max_value\n    FROM hero_attribute\n    WHERE attribute_id = (SELECT id FROM strength_attribute)\n)\nSELECT COUNT(DISTINCT hero_id) AS hero_count\nFROM hero_attribute\nWHERE attribute_id = (SELECT id FROM strength_attribute)\nAND attribute_value = (SELECT max_value FROM max_strength);",
    "question": "How many heroes have the highest attribute value in strength?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "reason": [
      "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';"
    ]
  },
  "1007": {
    "sql": "SELECT MAX(p.duration) AS longest_pit_stop_time\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "question": "What was the longest time that Lewis Hamilton had spent at a pit stop?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1",
    "reason": [
      "longest time refes to MAX(duration);"
    ]
  },
  "500": {
    "sql": "SELECT st.translation AS japanese_set_name\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN set_translations st ON s.code = st.setCode\nWHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';",
    "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "reason": [
      "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'"
    ]
  },
  "1460": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.expense_description = 'Water, Veggie tray, supplies';",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "reason": [
      "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'"
    ]
  },
  "1122": {
    "sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
    "question": "State the name of the most strongest player.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "reason": [
      "strongest players refers to player has MAX(overall_rating)"
    ]
  },
  "691": {
    "sql": "SELECT COUNT(*) AS NumberOfAdultUsersWithHighUpvotes\nFROM users\nWHERE Age >= 18 AND UpVotes > 5000;",
    "question": "Identify the number of adult users who have cast over 5000 upvotes.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
    "reason": [
      "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;"
    ]
  },
  "490": {
    "sql": "SELECT mcmId FROM sets WHERE code = 'SS2';",
    "question": "For the set which had 'SS2' as the code, what is its magic card market id?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT mcmId FROM sets WHERE code = 'SS2'",
    "reason": [
      "magic card market id refers to mcmId"
    ]
  },
  "1177": {
    "sql": "SELECT \n    CASE \n        WHEN `T-CHO` BETWEEN 125 AND 200 THEN 'Normal'\n        ELSE 'Abnormal'\n    END AS Cholesterol_Status\nFROM Laboratory\nWHERE ID = 2927464 AND Date = '1995-09-04';",
    "question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
    "reason": [
      "total cholesterol normal level refers to N < 250"
    ]
  },
  "1373": {
    "sql": "SELECT COUNT(DISTINCT m.member_id) \nFROM member m \nJOIN zip_code z ON m.zip = z.zip_code \nWHERE z.state = 'Maryland';",
    "question": "How many of the members' hometowns are from Maryland state?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
    "reason": []
  },
  "1399": {
    "sql": "SELECT CASE WHEN EXISTS (\n    SELECT 1\n    FROM attendance a\n    JOIN member m ON a.link_to_member = m.member_id\n    JOIN event e ON a.link_to_event = e.event_id\n    WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean'\n    AND e.event_name = 'Women''s Soccer'\n) THEN 'Yes' ELSE 'No' END AS did_attend;",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "reason": [
      "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name"
    ]
  },
  "96": {
    "sql": "SELECT COUNT(DISTINCT c.client_id) AS customer_count\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER';",
    "question": "How many customers who choose statement of weekly issuance are Owner?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
    "reason": [
      "'POPLATEK TYDNE' stands for weekly issuance"
    ]
  },
  "155": {
    "sql": "SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percent_gold_pre_1998\nFROM card;",
    "question": "How many percent of 'Gold' cards were issued prior to 1998?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
    "reason": [
      "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%"
    ]
  },
  "901": {
    "sql": "SELECT races.name AS race_name, circuits.name AS circuit_name, circuits.location\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.date BETWEEN '2005-09-01' AND '2005-09-30'",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
    "reason": [
      "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005"
    ]
  },
  "925": {
    "sql": "SELECT c.url \nFROM races r \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE r.name = 'Spanish Grand Prix' AND r.year = 2009;",
    "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "reason": [
      "link of the website refers to url"
    ]
  },
  "623": {
    "sql": "SELECT COUNT(DISTINCT u.Id) AS ElderSupporters\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Age > 65 AND b.Name = 'Supporter';",
    "question": "How many elders obtained the \"Supporter\" badge?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
    "reason": [
      "\"Supporter\" is the Name of badge;  elders refers to Age > 65"
    ]
  },
  "143": {
    "sql": "SELECT DISTINCT d.account_id\nFROM card c\nJOIN disp d ON c.disp_id = d.disp_id\nWHERE c.type = 'gold';",
    "question": "What are the accounts that have gold credit cards?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
    "reason": []
  },
  "1403": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed' AND b.remaining < 0\nORDER BY b.remaining ASC\nLIMIT 1;",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
    "reason": [
      "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0"
    ]
  },
  "643": {
    "sql": "SELECT DisplayName, Age FROM users ORDER BY Views DESC LIMIT 1;",
    "question": "What are the display names and ages of user who got the highest in views?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "reason": [
      "the highest in views refers to MAX(Views);"
    ]
  },
  "165": {
    "sql": "SELECT t.* FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 5;",
    "question": "Please list all the transactions made by accounts from district 5.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5",
    "reason": []
  },
  "342": {
    "sql": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);",
    "question": "List the card names with value that cost more converted mana for the face.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
    "reason": [
      "more converted mana for the face refers to Max(faceConvertedManaCost);"
    ]
  },
  "975": {
    "sql": "SELECT r.year\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nGROUP BY r.year\nORDER BY MAX(lt.time) DESC\nLIMIT 1;",
    "question": "Which year has the lowest speed of lap time?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1",
    "reason": [
      "lowest speed of lap time refers to Max(time);"
    ]
  },
  "203": {
    "sql": "SELECT COUNT(*) FROM atom WHERE element != 'br';",
    "question": "In how many atoms is there no bromine?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
    "reason": [
      "atoms with no bromine refers to element ! = 'br'"
    ]
  },
  "856": {
    "sql": "SELECT r.time \nFROM races r \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE c.name = 'Sepang International Circuit';",
    "question": "Please list the time of the races held on Sepang International Circuit.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "reason": []
  },
  "1180": {
    "sql": "SELECT p.SEX\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GPT = 9 AND l.Date = '1992-06-12';",
    "question": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12'",
    "reason": [
      "man refers to SEX = 'M'; women refers to SEX = 'F'; ALT glutamic pylvic transaminase status got 9 GPT = '9'; 1992/6/12 refers to Date = '1992-06-12'"
    ]
  },
  "735": {
    "sql": "SELECT COUNT(*) \nFROM superhero \nWHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');",
    "question": "How many superheroes with blonde hair are there?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
    "reason": [
      "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id"
    ]
  },
  "577": {
    "sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';",
    "question": "Write all comments made by user 'A Lion.'",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "reason": [
      "\"A Lion\" is the DisplayName of user; comment refers to Text"
    ]
  },
  "291": {
    "sql": "SELECT COUNT(*) FROM molecule WHERE label = '+';",
    "question": "How many chemical compounds in the database are identified as carcinogenic.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic;"
    ]
  },
  "747": {
    "sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;",
    "question": "What is the total number of superheroes without full name?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
    "reason": [
      "superheroes without full name refers to full_name IS NULL"
    ]
  },
  "916": {
    "sql": "SELECT surname FROM drivers WHERE nationality = 'Italian';",
    "question": "Please list the surnames of all the Italian drivers.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "reason": [
      "Italian refers to nationality = 'italian'"
    ]
  },
  "1082": {
    "sql": "SELECT l.name \nFROM League l \nJOIN Country c ON l.country_id = c.id \nWHERE c.name = 'Germany';",
    "question": "Please list the leagues from Germany.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
    "reason": [
      "Germany refers to Country.name = 'Germany';"
    ]
  },
  "83": {
    "sql": "-- Part 1: Count of schools with magnet program serving K-8 and offering Multiple Provision Types\nSELECT COUNT(*) AS MagnetSchoolsWithMultipleProvision\nFROM frpm\nWHERE `Magnet` = 1 AND `Low Grade` = 'K' AND `High Grade` = '8' AND `NSLP Provision Status` = 'Multiple Provision Types';\n\n-- Part 2: Number of cities and schools serving K-8 grade span per city\nSELECT City, COUNT(*) AS NumberOfSchools\nFROM schools\nWHERE `Low Grade` = 'K' AND `High Grade` = '8'\nGROUP BY City;",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
    "reason": [
      "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'"
    ]
  },
  "1533": {
    "sql": "SELECT t.CustomerID, y.Consumption\nFROM transactions_1k t\nJOIN yearmonth y ON t.CustomerID = y.CustomerID\nWHERE t.ProductID = 5 AND (t.Price / t.Amount) > 29.00 AND y.Date = '201208'",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "reason": [
      "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;"
    ]
  },
  "888": {
    "sql": "SELECT c.country, c.name AS circuit_name, c.location\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.name = 'European Grand Prix'\nORDER BY r.year ASC\nLIMIT 1;",
    "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
    "reason": [
      "the first refers to min(year);"
    ]
  },
  "398": {
    "sql": "SELECT SUM(manaCost) AS total_unconverted_mana_cost FROM cards WHERE artist = 'Rob Alexander';",
    "question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "reason": [
      "unconverted mana refer to manaCost; Rob Alexander refer to artist"
    ]
  },
  "678": {
    "sql": "SELECT p.Id, p.Title\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky'\nORDER BY p.ViewCount DESC\nLIMIT 1;",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "reason": [
      "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);"
    ]
  },
  "841": {
    "sql": "SELECT s.weight_kg, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.id = 40;",
    "question": "Provide the weight and race of the superhero with superhero ID 40.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
    "reason": [
      "weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;"
    ]
  },
  "504": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE setCode = (SELECT code FROM sets WHERE name = 'World Championship Decks 2004') \nAND convertedManaCost = 3;",
    "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
    "reason": [
      "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'"
    ]
  },
  "1419": {
    "sql": "SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00';",
    "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
    "reason": [
      "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'"
    ]
  },
  "133": {
    "sql": "SELECT A2 AS district_name, A13 AS unemployment_rate FROM district ORDER BY A13 DESC;",
    "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
    "reason": [
      "A2 refers to district names; A13 refers to unemploymant rate in 1996"
    ]
  },
  "55": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Colusa') * 1.0 /\n    (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Humboldt') AS ratio_colusa_to_humboldt;",
    "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
    "reason": [
      "Ratio = count(schools in Colusa) / count(schools in Humboldt)"
    ]
  },
  "1168": {
    "sql": "SELECT \n    L.Date AS \"Laboratory Work Date\",\n    (strftime('%Y', P.\"First Date\") - strftime('%Y', P.Birthday) AS \"Age at Initial Arrival\"\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.Diagnosis = 'SJS'\n    AND P.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE Diagnosis = 'SJS')\nORDER BY \n    L.Date DESC\nLIMIT 1;",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "reason": [
      "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)"
    ]
  },
  "992": {
    "sql": "SELECT \n    forename || ' ' || surname AS full_name,\n    url AS wikipedia_link,\n    dob AS date_of_birth\nFROM \n    drivers\nWHERE \n    nationality = 'German' \n    AND strftime('%Y', dob) BETWEEN '1971' AND '1985'\nORDER BY \n    dob DESC;",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "reason": [
      "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'"
    ]
  },
  "1441": {
    "sql": "SELECT COUNT(*) AS education_major_members\nFROM member\nWHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'education' AND college = 'College of Education & Human Services');",
    "question": "How many members have education major in the College of Education & Human Services?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
    "reason": [
      "'education' is the major name; 'Member' is a position of club;"
    ]
  },
  "605": {
    "sql": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';",
    "question": "How many users obtained the \"Announcer\" badge?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
    "reason": [
      "\"Announcer\" is the Name of badge; user refers to UserId"
    ]
  },
  "478": {
    "sql": "SELECT * FROM cards WHERE setCode = 'Coldsnap' AND number = '4';",
    "question": "What is card number 4 in the set Coldsnap?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4"
    ]
  },
  "280": {
    "sql": "SELECT b.bond_id, m.label AS carcinogenic_status\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '#';",
    "question": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "reason": [
      "triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "304": {
    "sql": "SELECT m.molecule_id, m.label, a.element\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+'\nGROUP BY m.molecule_id, a.element;",
    "question": "List all carcinogenic molecules and their elements.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "1380": {
    "sql": "SELECT SUM(spent) AS total_spent_food FROM budget WHERE category = 'Food';",
    "question": "What is the total amount of money spent for food?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "reason": [
      "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'"
    ]
  },
  "666": {
    "sql": "SELECT p.Id \nFROM posts p \nJOIN votes v ON p.Id = v.PostId \nWHERE v.UserId = 1465 \nORDER BY p.Score DESC \nLIMIT 1;",
    "question": "Among the posts that were voted by user 1465, what is the id of the most valuable post?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "reason": [
      "user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);"
    ]
  },
  "923": {
    "sql": "SELECT COUNT(*) AS race_count\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Italy';",
    "question": "How many Formula_1 races took place on the circuits in Italy?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'",
    "reason": []
  },
  "1365": {
    "sql": "SELECT e.expense_description\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nWHERE b.remaining = (SELECT MIN(remaining) FROM budget);",
    "question": "What are the expenses of the budget with the lowest remaining?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1",
    "reason": [
      "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)"
    ]
  },
  "907": {
    "sql": "SELECT r.name AS race_name, c.country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;",
    "question": "List all races in 2017 and the hosting country order by date of the event.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
    "reason": []
  },
  "789": {
    "sql": "SELECT AVG(s.weight_kg) AS average_weight\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'Alien';",
    "question": "Find the average weight of the heroes who are aliens.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "reason": [
      "average = AVG(weight_kg); aliens refers to race = 'Alien';"
    ]
  },
  "1342": {
    "sql": "SELECT SUM(e.cost) AS total_cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'Posters' AND ev.event_date = '2019-09-04';",
    "question": "What was the cost for the \"Posters\" on 2019/9/4?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
    "reason": [
      "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'"
    ]
  },
  "1351": {
    "sql": "SELECT m.major_name \nFROM member mb \nJOIN major m ON mb.link_to_major = m.major_id \nWHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';",
    "question": "What was Brent Thomason's major?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "reason": [
      "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name"
    ]
  },
  "987": {
    "sql": "SELECT AVG(fastestLapTime) AS average_fastest_lap_time\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE year = 2006 AND name = 'United States Grand Prix')\nAND position <= 10\nAND fastestLapTime IS NOT NULL;",
    "question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'",
    "reason": [
      "top 10 refers to rank <11; AVG(fastestLapTime);"
    ]
  },
  "31": {
    "sql": "SELECT \n    `School Name`,\n    `Free Meal Count (K-12)` / `Enrollment (K-12)` AS `Eligible Free Rate`\nFROM \n    frpm\nORDER BY \n    `Enrollment (K-12)` DESC\nLIMIT 10, 2;",
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
    "reason": [
      "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"
    ]
  },
  "205": {
    "sql": "SELECT DISTINCT a.molecule_id FROM atom a WHERE a.element = 'c';",
    "question": "Identify by their ID the molecules in which there is carbon.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
    "reason": [
      "carbon refers to element = 'c';"
    ]
  },
  "226": {
    "sql": "SELECT \n    ROUND((SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id), 5) AS percentage\nFROM \n    bond\nWHERE \n    molecule_id = 'TR008';",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "reason": [
      "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'"
    ]
  },
  "1010": {
    "sql": "SELECT d.forename, d.surname, r.fastestLapTime, ra.name AS race_name, ra.date\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND r.fastestLapTime IS NOT NULL\nORDER BY r.fastestLapTime ASC\nLIMIT 1;",
    "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "reason": [
      "lap recod means the fastest time recorded which refers to time"
    ]
  },
  "665": {
    "sql": "WITH monthly_links AS (\n    SELECT \n        strftime('%m', pl.CreationDate) AS month,\n        COUNT(pl.Id) AS link_count\n    FROM \n        postLinks pl\n    JOIN \n        posts p ON pl.PostId = p.Id\n    WHERE \n        strftime('%Y', pl.CreationDate) = '2010'\n        AND p.AnswerCount <= 2\n    GROUP BY \n        month\n)\nSELECT \n    AVG(link_count) AS average_monthly_links\nFROM \n    monthly_links;",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
    "reason": [
      "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)"
    ]
  },
  "634": {
    "sql": "WITH user_view_counts AS (\n    SELECT \n        u.DisplayName,\n        SUM(p.ViewCount) AS total_views\n    FROM \n        users u\n    JOIN \n        posts p ON u.Id = p.OwnerUserId\n    WHERE \n        u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')\n    GROUP BY \n        u.DisplayName\n)\nSELECT \n    DisplayName,\n    total_views\nFROM \n    user_view_counts\nORDER BY \n    total_views DESC\nLIMIT 1;",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "reason": [
      "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';"
    ]
  },
  "1447": {
    "sql": "SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.spent < b.amount;",
    "question": "List the name and location of events that underspend its budget.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
    "reason": [
      "name of event refers to event_name; underspend its budget refers to remaining > 0"
    ]
  },
  "715": {
    "sql": "SELECT DISTINCT u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score BETWEEN 1 AND 5\nAND u.DownVotes = 0;",
    "question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
    "reason": [
      "DownVotes = 0; Score BETWEEN 1 and 5"
    ]
  },
  "1319": {
    "sql": "SELECT m.college\nFROM member AS mem\nJOIN major AS m ON mem.link_to_major = m.major_id\nWHERE mem.position = 'Vice President';",
    "question": "Which college is the vice president of the Student_Club from?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "reason": [
      "Vice President is a position of the Student Club"
    ]
  },
  "618": {
    "sql": "SELECT u.Age\nFROM users u\nINNER JOIN badges b ON u.Id = b.UserId\nWHERE u.Location = 'Vienna, Austria';",
    "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "reason": [
      "\"Vienna, Austria\" is the Location"
    ]
  },
  "979": {
    "sql": "SELECT raceId, COUNT(*) AS finisher_count\nFROM results\nWHERE time IS NOT NULL\nGROUP BY raceId\nORDER BY finisher_count DESC\nLIMIT 1;",
    "question": "What race number has the most finishers?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
    "reason": [
      "finisher refers to time is not null;"
    ]
  },
  "755": {
    "sql": "SELECT s.full_name\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'Demi-God'\nLIMIT 5;",
    "question": "List down at least five full name of Demi-God superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "reason": [
      "Demi-God superheroes refers to race = 'Demi-God'"
    ]
  },
  "1449": {
    "sql": "SELECT m.first_name, m.last_name, ma.major_name\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE e.cost > 100;",
    "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "reason": [
      "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100"
    ]
  },
  "457": {
    "sql": "SELECT purchaseUrls FROM cards WHERE promoTypes LIKE '%bundle%';",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "reason": [
      "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls"
    ]
  },
  "1427": {
    "sql": "SELECT b.category\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.location = 'MU 215'\n  AND e.type = 'Guest Speaker'\n  AND b.spent = 0;",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "reason": [
      "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; "
    ]
  },
  "705": {
    "sql": "SELECT u.Reputation, u.UpVotes\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nWHERE c.Text = 'fine, you win :)';",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "reason": [
      "Text = 'fine, you win :)';"
    ]
  },
  "33": {
    "sql": "SELECT s.School, s.Website\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000;",
    "question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL",
    "reason": []
  },
  "1320": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';",
    "question": "Please list the event names of all the events attended by Maya Mclean.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "reason": []
  },
  "335": {
    "sql": "SELECT COUNT(DISTINCT b.molecule_id) AS total_molecules\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.bond_type = ' = '\nAND (a1.element = 'o' OR a2.element = 'o');",
    "question": "What is the total number of molecules with double bonded oxygen?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'",
    "reason": [
      "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';"
    ]
  },
  "341": {
    "sql": "SELECT * FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);",
    "question": "What are the borderless cards available without powerful foils?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
    "reason": [
      "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null"
    ]
  },
  "1264": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nJOIN Laboratory L ON P.ID = L.ID\nWHERE E.Thrombosis = 1 AND L.C4 > 10;",
    "question": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'",
    "reason": [
      "APS will result in Blood Clots in veins; normal level of complement 4 refers to C4 > 10; Should compute the number of different ones"
    ]
  },
  "395": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'UDON' \nAND availability LIKE '%mtgo%' \nAND hand = '-1';",
    "question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo' ",
    "reason": [
      "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1"
    ]
  },
  "637": {
    "sql": "WITH MarkMeckesPosts AS (\n    SELECT Id, Tags\n    FROM posts\n    WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes')\n    AND CommentCount = 0\n)\nSELECT DISTINCT REPLACE(REPLACE(REPLACE(t.value, '<', ''), '>', ''), ' ', '') AS Tag\nFROM MarkMeckesPosts,\n     json_each('[\"' || REPLACE(REPLACE(Tags, '<', '\",\"'), '>', '\",\"') || '\"]') AS t\nWHERE t.value <> '';",
    "error": "something went wrong, tool did not call.",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "reason": [
      "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;"
    ]
  },
  "830": {
    "sql": "SELECT a.attribute_name \nFROM hero_attribute ha \nJOIN attribute a ON ha.attribute_id = a.id \nJOIN superhero s ON ha.hero_id = s.id \nWHERE s.superhero_name = 'Black Panther' \nORDER BY ha.attribute_value ASC \nLIMIT 1;",
    "question": "Identify the weakest attribute of the Black Panther.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "reason": [
      "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';"
    ]
  },
  "1179": {
    "sql": "SELECT e.\"aCL IgM\"\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE p.Diagnosis = 'SLE' AND p.Description = '1994-02-19' AND e.\"Examination Date\" = '1993-11-12';",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
    "reason": [
      "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'"
    ]
  },
  "650": {
    "sql": "SELECT u.DisplayName, u.LastAccessDate, u.Location\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Outliers'\nORDER BY u.LastAccessDate DESC;",
    "question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "reason": [
      "Outliers is the name of the badge;"
    ]
  },
  "1386": {
    "sql": "SELECT SUM(e.cost) AS total_expense\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'Yearly Kickoff';",
    "question": "What is the total expense for the Yearly Kickoff?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
    "reason": [
      "'Yearly Kickoff' is an event name; total expense refers to SUM(cost)"
    ]
  },
  "234": {
    "sql": "SELECT COUNT(*) AS bond_count\nFROM connected\nWHERE (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12')\nAND bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = 'TR009');",
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
    "reason": [
      "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'"
    ]
  },
  "1315": {
    "sql": "SELECT COUNT(link_to_member) AS student_count\nFROM attendance\nWHERE link_to_event = (SELECT event_id FROM event WHERE event_name = \"Women's Soccer\");",
    "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "reason": [
      "Women's Soccer is an event name"
    ]
  },
  "1144": {
    "sql": "SELECT p.player_name, pa.finishing AS finishing_rate, pa.curve AS curve_score\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.weight = (SELECT MAX(weight) FROM Player);",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
    "reason": [
      "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)"
    ]
  },
  "1509": {
    "sql": "SELECT COUNT(*) AS NumberOfTransactions\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'CZE' AND t.Date > '2012-01-01';",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "reason": [
      "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'"
    ]
  },
  "1503": {
    "sql": "SELECT p.Description\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE c.Currency = 'Euro';",
    "question": "Please list the product description of the products bought in transactions in euro.",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'",
    "reason": []
  },
  "1493": {
    "sql": "SELECT \n    ROUND(\n        (COUNT(CASE WHEN Consumption > 528.3 THEN 1 END) * 100.0 / COUNT(DISTINCT CustomerID)),\n        2\n    ) AS Percentage\nFROM \n    yearmonth\nWHERE \n    Date = '201202';",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
    "reason": [
      "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."
    ]
  },
  "1109": {
    "sql": "SELECT t.team_short_name, ta.buildUpPlayDribblingClass \nFROM Team t \nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id \nWHERE t.team_short_name = 'LEI' AND ta.date = '2015-09-10 00:00:00';",
    "question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
    "reason": [
      "\"LEI\" refers to team_short_name = 'LEI'; on 2015/9/10 refers to  date = '2015-09-10 00:00:00'"
    ]
  },
  "617": {
    "sql": "SELECT c.Text \nFROM comments c \nJOIN posts p ON c.PostId = p.Id \nWHERE p.CreaionDate = '2010-07-19 19:37:33.0';",
    "question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'",
    "reason": [
      "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'"
    ]
  },
  "700": {
    "sql": "SELECT COUNT(*) AS NumberOfPostsWithBountyOver30 FROM votes WHERE BountyAmount >= 30;",
    "question": "Identify the number of posts that offer a bounty amount over 30.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30",
    "reason": [
      "bounty amount over 30 refers to BountyAmount > = 30;"
    ]
  },
  "872": {
    "sql": "SELECT d.code \nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 45 AND q.q3 = '0:01:33';",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "reason": [
      "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'"
    ]
  },
  "477": {
    "sql": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Coldsnap'\nAND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');",
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "reason": [
      "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"
    ]
  },
  "344": {
    "sql": "SELECT c.* FROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic'\nAND l.format = 'gladiator'\nAND l.status = 'Banned';",
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "reason": [
      "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';"
    ]
  },
  "732": {
    "sql": "SELECT p.publisher_name\nFROM publisher p\nJOIN superhero s ON p.id = s.publisher_id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed'\nORDER BY ha.attribute_value ASC\nLIMIT 1;",
    "question": "Which publisher published the slowest superhero?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
    "reason": [
      "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name"
    ]
  },
  "409": {
    "sql": "SELECT COUNT(DISTINCT c.id) \nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN rulings r ON c.uuid = r.uuid\nWHERE l.format = 'premodern' \nAND r.text = 'This is a triggered mana ability.' \nAND c.side IS NULL;",
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
    "reason": [
      "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL"
    ]
  },
  "79": {
    "sql": "SELECT County, COUNT(*) AS NumberOfVirtualSchools\nFROM schools\nWHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara')\nGROUP BY County\nORDER BY NumberOfVirtualSchools DESC\nLIMIT 1;",
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
    "reason": [
      "'Does not offer physical building' means Virtual = F in the database."
    ]
  },
  "310": {
    "sql": "WITH double_bond_molecules AS (\n  SELECT DISTINCT molecule_id\n  FROM bond\n  WHERE bond_type = ' = '\n)\nSELECT \n  COUNT(*) AS total_molecules_with_double_bond,\n  SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_molecules_with_double_bond\nFROM double_bond_molecules dbm\nJOIN molecule m ON dbm.molecule_id = m.molecule_id;",
    "question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='",
    "reason": [
      "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;"
    ]
  },
  "588": {
    "sql": "SELECT COUNT(*) AS TotalComments FROM comments WHERE UserId = 13;",
    "question": "Give the total number of comments posted by user ID 13.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
    "reason": []
  },
  "654": {
    "sql": "SELECT u.DisplayName, u.Location\nFROM tags t\nJOIN posts p ON t.ExcerptPostId = p.Id\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE t.TagName = 'hypothesis-testing';",
    "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "reason": [
      "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';"
    ]
  },
  "889": {
    "sql": "SELECT MAX(r.year) AS last_season\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Brands Hatch' AND r.name LIKE '%British Grand Prix%';",
    "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "reason": [
      "the last refers to max(year);"
    ]
  },
  "807": {
    "sql": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.full_name = 'Helen Parr';",
    "question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "reason": [
      "superpowers refers to power_name; Helen Parr is the full name of superhero;"
    ]
  },
  "200": {
    "sql": "SELECT DISTINCT m.molecule_id, m.label\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = '#' AND m.label = '+';",
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
    "reason": [
      "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'"
    ]
  },
  "991": {
    "sql": "SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991';",
    "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
    "reason": [
      "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality"
    ]
  },
  "235": {
    "sql": "SELECT COUNT(DISTINCT m.molecule_id) \nFROM molecule m \nJOIN atom a ON m.molecule_id = a.molecule_id \nWHERE m.label = '+' AND a.element = 'br';",
    "question": "How many molecules are carcinogenic and have the bromine element?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'"
    ]
  }
}