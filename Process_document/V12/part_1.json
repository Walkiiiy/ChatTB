{
  "757": {
    "sql": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.weight_kg = 169;",
    "question": "Identify the race of the superhero who weighed 169 kg.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
    "reason": [
      "weighed 169 kg refers to weight_kg = 169"
    ]
  },
  "472": {
    "sql": "SELECT COUNT(DISTINCT s.code) AS italian_translated_sets_count\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Ice Age' AND st.language = 'Italian' AND st.translation IS NOT NULL;",
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
    "reason": [
      "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null"
    ]
  },
  "1377": {
    "sql": "SELECT COUNT(*) FROM member WHERE position = 'President';",
    "question": "How many student have the position of president?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
    "reason": [
      "'President' is a position of Student Club"
    ]
  },
  "1479": {
    "sql": "SELECT SUBSTR(ym.Date, 1, 4) AS Year, SUM(ym.Consumption) AS TotalConsumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'CZK'\nGROUP BY Year\nORDER BY TotalConsumption DESC\nLIMIT 1;",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "reason": [
      "The first 4 strings of the Date values in the yearmonth table can represent year."
    ]
  },
  "1511": {
    "sql": "SELECT AVG(Amount * Price) AS AverageTotalPrice\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR';",
    "question": "For the customers who paid in the euro, what is their average total price of the transactions?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
    "reason": []
  },
  "772": {
    "sql": "SELECT \n    eye_colour.colour AS eyes, \n    hair_colour.colour AS hair, \n    skin_colour.colour AS skin\nFROM \n    superhero\nJOIN \n    gender ON superhero.gender_id = gender.id\nJOIN \n    publisher ON superhero.publisher_id = publisher.id\nJOIN \n    colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id\nJOIN \n    colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id\nJOIN \n    colour AS skin_colour ON superhero.skin_colour_id = skin_colour.id\nWHERE \n    gender.gender = 'Female'\n    AND publisher.publisher_name = 'Dark Horse Comics';",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "reason": [
      "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
    ]
  },
  "524": {
    "sql": "SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena%' AND availability NOT LIKE '%paper%' AND availability NOT LIKE '%mtgo%';",
    "question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "reason": [
      "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'"
    ]
  },
  "722": {
    "sql": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE s.superhero_name = 'Apocalypse';",
    "question": "What is the colour of Apocalypse's skin?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "reason": [
      "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id"
    ]
  },
  "1518": {
    "sql": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';",
    "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
    "reason": [
      "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database"
    ]
  },
  "871": {
    "sql": "SELECT d.nationality\nFROM drivers d\nJOIN qualifying q ON d.driverId = q.driverId\nWHERE q.raceId = 347 AND q.q2 = '0:01:15';",
    "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'",
    "reason": [
      "race number refers to raceId;"
    ]
  },
  "651": {
    "sql": "SELECT p2.Title AS RelatedPostTitle\nFROM posts p1\nJOIN postLinks pl ON p1.Id = pl.PostId\nJOIN posts p2 ON pl.RelatedPostId = p2.Id\nWHERE p1.Title = 'How to tell if something happened in a data set which monitors a value over time';",
    "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
    "reason": []
  },
  "1127": {
    "sql": "SELECT DISTINCT p.player_name, c.name AS country_name\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nJOIN Match m ON (p.player_api_id = m.home_player_1 OR p.player_api_id = m.home_player_2 OR p.player_api_id = m.home_player_3 OR p.player_api_id = m.home_player_4 OR p.player_api_id = m.home_player_5 OR p.player_api_id = m.home_player_6 OR p.player_api_id = m.home_player_7 OR p.player_api_id = m.home_player_8 OR p.player_api_id = m.home_player_9 OR p.player_api_id = m.home_player_10 OR p.player_api_id = m.home_player_11 OR p.player_api_id = m.away_player_1 OR p.player_api_id = m.away_player_2 OR p.player_api_id = m.away_player_3 OR p.player_api_id = m.away_player_4 OR p.player_api_id = m.away_player_5 OR p.player_api_id = m.away_player_6 OR p.player_api_id = m.away_player_7 OR p.player_api_id = m.away_player_8 OR p.player_api_id = m.away_player_9 OR p.player_api_id = m.away_player_10 OR p.player_api_id = m.away_player_11)\nJOIN Country c ON m.country_id = c.id\nWHERE pa.vision >= 90;",
    "question": "Locate players with vision scores of 90 and above, state the country of these players.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
    "reason": [
      "vision scores of 90 and above refers to vision > 89"
    ]
  },
  "41": {
    "sql": "WITH RankedSchools AS (\n    SELECT \n        s.School,\n        s.County,\n        sc.AvgScrRead,\n        RANK() OVER (PARTITION BY s.County ORDER BY sc.AvgScrRead DESC) AS rank_in_county\n    FROM \n        schools s\n    JOIN \n        satscores sc ON s.CDSCode = sc.cds\n    WHERE \n        s.Virtual = 'F'\n)\nSELECT \n    School,\n    County,\n    AvgScrRead\nFROM \n    RankedSchools\nWHERE \n    rank_in_county <= 5\nORDER BY \n    County, rank_in_county;",
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
    "reason": [
      "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County"
    ]
  },
  "698": {
    "sql": "WITH target_post AS (\n    SELECT Id FROM posts WHERE Title = 'Clustering 1D data'\n)\nSELECT \n    (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM target_post)) AS comment_count,\n    (SELECT COUNT(*) FROM posts WHERE ParentId = (SELECT Id FROM target_post)) AS answer_count;",
    "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "reason": []
  },
  "938": {
    "sql": "SELECT d.forename, d.surname, d.url\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE rc.year = 2008 AND rc.name = 'Australian Grand Prix' AND r.positionOrder = 1;",
    "question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008",
    "reason": [
      "only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url"
    ]
  },
  "1142": {
    "sql": "SELECT COUNT(*) AS total_games\nFROM \"Match\"\nWHERE league_id = (SELECT id FROM \"League\" WHERE name = 'Italy Serie A')\nAND season = '2015/2016';",
    "question": "In the 2015–2016 season, how many games were played in the Italian Serie A league?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
    "reason": [
      "In the 2015–2016 season refers to season = '2015/2016'"
    ]
  },
  "1266": {
    "sql": "SELECT p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RNP IS NOT NULL AND l.RNP != ''\nORDER BY p.Birthday DESC\nLIMIT 1;",
    "question": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1",
    "reason": [
      "youngest patient refers to MAX(Birthday); abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-'); date of birth refers to Birthday;"
    ]
  },
  "81": {
    "sql": "SELECT s.City, s.School, f.\"Low Grade\"\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.State = 'CA'\nORDER BY s.Latitude ASC\nLIMIT 1;",
    "question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1",
    "reason": [
      "State of California refers to state = 'CA'"
    ]
  },
  "552": {
    "sql": "SELECT b.Name \nFROM badges b \nJOIN users u ON b.UserId = u.Id \nWHERE u.DisplayName = 'csgillespie';",
    "question": "Please list the names of the badges obtained by csgillespie.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user"
    ]
  },
  "1323": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.type != 'fundraiser'\nGROUP BY e.event_id\nHAVING COUNT(a.link_to_member) > 20;",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
    "reason": [
      "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20."
    ]
  },
  "1267": {
    "sql": "SELECT COUNT(DISTINCT E.ID) \nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE (E.SM IN('-', '+-')) AND E.Thrombosis = 0;",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
    "reason": [
      "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;"
    ]
  },
  "1276": {
    "sql": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.DNA >= 8;",
    "question": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8",
    "reason": [
      "abnormal level of anti-DNA refers to DNA > = 8; diseases refers to Diagnosis;"
    ]
  },
  "1204": {
    "sql": "SELECT DATEDIFF(`Examination Date`, `First Date`) AS days_to_evaluation\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE e.ID = 821298;",
    "question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298",
    "reason": [
      "DATEDIFF(`Examination Date`, `First Date`)"
    ]
  },
  "1057": {
    "sql": "SELECT AVG(home_team_goal) AS average_home_team_goal\nFROM \"Match\"\nWHERE season = '2010/2011'\nAND country_id = (SELECT id FROM \"Country\" WHERE name = 'Poland');",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
    "reason": [
      "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';"
    ]
  },
  "1312": {
    "sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Angela' AND mb.last_name = 'Sanders';",
    "question": "What's Angela Sanders's major?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "reason": [
      "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name."
    ]
  },
  "300": {
    "sql": "SELECT atom_id, element FROM atom WHERE molecule_id = 'TR186';",
    "question": "What atoms comprise TR186?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
    "reason": [
      "TR186 is a molecule id"
    ]
  },
  "1411": {
    "sql": "SELECT e.expense_description\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "reason": [
      "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;"
    ]
  },
  "1355": {
    "sql": "SELECT z.state\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';",
    "question": "Where is the hometown state for \"Sacha Harrison\"?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "reason": [
      "hometown state refers to state;"
    ]
  },
  "181": {
    "sql": "SELECT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE c.gender = 'F'\nORDER BY l.amount DESC\nLIMIT 3;",
    "question": "Please provide the IDs of the 3 female clients with the largest loans.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
    "reason": [
      "Female refers to gender = 'F'"
    ]
  },
  "1181": {
    "sql": "SELECT \n    strftime('%Y', '1991-10-21') - strftime('%Y', p.Birthday) - \n    (CASE \n        WHEN strftime('%m-%d', '1991-10-21') < strftime('%m-%d', p.Birthday) THEN 1 \n        ELSE 0 \n    END) AS Age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.UA = 8.4 AND l.Date = '1991-10-21';",
    "question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'",
    "reason": [
      "how old at that time refers to SUBTRACT(year(test date), year(Birthday)); uric acid level as 8.4 refers to UA = '8.4'; 1991/10/21 refers to Date = '1991-10-21'"
    ]
  },
  "982": {
    "sql": "SELECT COUNT(DISTINCT d.driverId) AS american_drivers_with_puncture\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN status s ON r.statusId = s.statusId\nWHERE d.nationality = 'American' AND s.status = 'Puncture';",
    "question": "How many American drivers have puncture status.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'",
    "reason": [
      "puncture status refers to status = Puncture;"
    ]
  },
  "174": {
    "sql": "SELECT strftime('%Y', birth_date) AS birth_year FROM client WHERE client_id = 130;",
    "question": "What year was account owner number 130 born?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
    "reason": []
  },
  "572": {
    "sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "reason": [
      "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount"
    ]
  },
  "1345": {
    "sql": "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';",
    "question": "How many majors are there in \"College of Humanities and Social Sciences\"?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "reason": []
  },
  "17": {
    "sql": "SELECT s.sname, s.AvgScrWrite, sc.CharterNum\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE s.AvgScrWrite > 499\nORDER BY s.AvgScrWrite DESC;",
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
    "reason": [
      "Valid charter number means the number is not null"
    ]
  },
  "164": {
    "sql": "SELECT c.client_id, c.gender, c.birth_date, c.district_id\nFROM `order` o\nJOIN disp d ON o.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE o.order_id = 32423;",
    "question": "Who placed the order with the id 32423?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423",
    "reason": []
  },
  "1033": {
    "sql": "SELECT AVG(height) AS average_height\nFROM Player\nWHERE strftime('%Y', birthday) BETWEEN '1990' AND '1995';",
    "question": "What is the average height of players born between 1990 and 1995?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
    "reason": [
      "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"
    ]
  },
  "729": {
    "sql": "SELECT AVG(height_cm) AS average_height\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Marvel Comics';",
    "question": "What is the average height of the superheroes from Marvel Comics?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "reason": [
      "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)"
    ]
  },
  "256": {
    "sql": "SELECT COUNT(*) AS total_atoms FROM atom WHERE element IN ('C', 'H');",
    "question": "Calculate the total atoms consisting of the element carbon and hydrogen.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'",
    "reason": [
      "consisting of element carbon and hydrogen refers to element in('c', 'h')"
    ]
  },
  "721": {
    "sql": "SELECT COUNT(*) AS blue_eyed_superheroes\nFROM superhero\nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');",
    "question": "How many superheroes have blue eyes?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
    "reason": [
      "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;"
    ]
  },
  "1484": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'discount') - \n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'discount') AS MoreDiscountGasStations;",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
    "reason": [
      "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia"
    ]
  },
  "1398": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'Advertisement'\nORDER BY b.spent DESC\nLIMIT 1;",
    "question": "Name the event with the highest amount spent on advertisement.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "reason": [
      "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'"
    ]
  },
  "627": {
    "sql": "SELECT COUNT(*) AS adult_users_count FROM users WHERE Age BETWEEN 19 AND 65;",
    "question": "How many users were adult?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
    "reason": [
      "adult refers to user where Age BETWEEN 19 and 65;"
    ]
  },
  "438": {
    "sql": "SELECT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.id = 174;",
    "question": "Point out the language of set id \"174\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT language FROM set_translations WHERE id = 174",
    "reason": []
  },
  "465": {
    "sql": "SELECT COUNT(*) > 0 AS has_korean_version\nFROM foreign_data\nWHERE uuid = (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen')\nAND language = 'Korean';",
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "reason": [
      "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'"
    ]
  },
  "765": {
    "sql": "SELECT COUNT(DISTINCT hero_id) AS hero_count\nFROM hero_power\nWHERE power_id = (SELECT id FROM superpower WHERE power_name = 'stealth');",
    "question": "How many heroes have stealth power?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
    "reason": [
      "stealth power refers to power_name = 'stealth';"
    ]
  },
  "825": {
    "sql": "SELECT g.gender\nFROM gender g\nJOIN superhero s ON g.id = s.gender_id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Phoenix Force';",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "reason": [
      "ability of Phoenix Force refers to power_name = 'Phoenix Force';"
    ]
  },
  "1058": {
    "sql": "WITH HeightExtremes AS (\n    SELECT \n        MIN(height) AS min_height,\n        MAX(height) AS max_height\n    FROM Player\n),\nFilteredPlayers AS (\n    SELECT \n        p.player_api_id,\n        p.player_name,\n        p.height\n    FROM Player p, HeightExtremes h\n    WHERE p.height = h.min_height OR p.height = h.max_height\n),\nPlayerFinishing AS (\n    SELECT \n        fp.player_api_id,\n        fp.player_name,\n        fp.height,\n        AVG(pa.finishing) AS avg_finishing\n    FROM FilteredPlayers fp\n    JOIN Player_Attributes pa ON fp.player_api_id = pa.player_api_id\n    GROUP BY fp.player_api_id, fp.player_name, fp.height\n)\nSELECT \n    player_api_id,\n    player_name,\n    height,\n    avg_finishing\nFROM PlayerFinishing\nORDER BY avg_finishing DESC\nLIMIT 1;",
    "error": "something went wrong, tool did not call.",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
    "reason": [
      "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);"
    ]
  },
  "43": {
    "sql": "SELECT s.AvgScrMath, sc.County\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE (s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) = (\n    SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite)\n    FROM satscores\n);",
    "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1",
    "reason": [
      "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite"
    ]
  },
  "1213": {
    "sql": "SELECT p.ID, l.ALP, \n       CASE WHEN l.ALP < 300 THEN 'Within normal range' ELSE 'Above normal range' END AS ALP_Status\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday = '1982-04-01';",
    "question": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
    "reason": [
      "alkaliphophatase (ALP) within normal range refers to ALP < 300"
    ]
  },
  "1343": {
    "sql": "SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;",
    "question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "reason": [
      "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'"
    ]
  },
  "860": {
    "sql": "SELECT d.nationality\nFROM drivers d\nJOIN qualifying q ON d.driverId = q.driverId\nWHERE q.raceId = 355 AND q.q2 = '0:01:40';",
    "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
    "reason": [
      "race number refers to raceId;"
    ]
  },
  "929": {
    "sql": "SELECT r.name AS race_name, r.year, c.name AS circuit_name\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nJOIN drivers d ON res.driverId = d.driverId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';\n",
    "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "reason": []
  },
  "445": {
    "sql": "SELECT fd.language, fd.flavorText, c.type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.watermark = 'colorpie';",
    "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "reason": []
  },
  "780": {
    "sql": "SELECT sp.power_name \nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.full_name = 'Hunter Zolomon';",
    "question": "List the powers of Hunter Zolomon.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "reason": [
      "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;"
    ]
  },
  "1463": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'Food';",
    "question": "List the event names which were budgeted for the food.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "reason": [
      "budgeted for food refers to category = 'Food'"
    ]
  },
  "551": {
    "sql": "SELECT COUNT(*) AS badge_count\nFROM badges\nWHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
    "question": "How many badges has the user csgillespie obtained?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user"
    ]
  },
  "614": {
    "sql": "SELECT \n    (COUNT(DISTINCT b.UserId) * 100.0 / NULLIF(COUNT(DISTINCT u.Id), 0)) AS percentage_teacher_badge_users\nFROM \n    users u\nLEFT JOIN \n    badges b ON u.Id = b.UserId AND b.Name = 'Teacher';",
    "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
    "reason": [
      "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100"
    ]
  },
  "896": {
    "sql": "WITH hamilton_races AS (\n    SELECT COUNT(*) AS total_races\n    FROM results r\n    JOIN drivers d ON r.driverId = d.driverId\n    JOIN races rc ON r.raceId = rc.raceId\n    WHERE d.surname = 'Hamilton' AND rc.year >= 2010\n),\nhamilton_not_first AS (\n    SELECT COUNT(*) AS not_first_races\n    FROM results r\n    JOIN drivers d ON r.driverId = d.driverId\n    JOIN races rc ON r.raceId = rc.raceId\n    WHERE d.surname = 'Hamilton' AND rc.year >= 2010 AND r.position > 1\n)\nSELECT (not_first_races * 100.0 / total_races) AS percentage\nFROM hamilton_races, hamilton_not_first;",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
    "reason": [
      "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010"
    ]
  },
  "351": {
    "sql": "SELECT DISTINCT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese';",
    "question": "Name all the cards which have alternative language in Japanese.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "reason": [
      "Japanese' is the language;"
    ]
  },
  "352": {
    "sql": "SELECT (COUNT(DISTINCT CASE WHEN language = 'Chinese Simplified' THEN uuid END) * 100.0 / COUNT(DISTINCT uuid)) AS percentage\nFROM foreign_data;",
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
    "reason": [
      "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100"
    ]
  },
  "594": {
    "sql": "SELECT u.DisplayName, u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Id = 1;",
    "question": "Which user created post ID 1 and what is the reputation of this user?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
    "reason": []
  },
  "1156": {
    "sql": "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.RVVT = '+';",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "reason": [
      "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';"
    ]
  },
  "1294": {
    "sql": "SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.CRE < 1.5\nAND e.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination WHERE `aCL IgA` IS NOT NULL);",
    "question": "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
    "reason": [
      "creatinine level is normal refers to CRE < 1.5; anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA);"
    ]
  },
  "1212": {
    "sql": "SELECT \n    p.Admission,\n    COUNT(*) AS PatientCount\nFROM \n    Laboratory l\nJOIN \n    Patient p ON l.ID = p.ID\nWHERE \n    l.ALP < 300\nGROUP BY \n    p.Admission;",
    "question": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300",
    "reason": [
      "alkaliphophatase (ALP) within normal range refers to ALP < 300; inpatient refers to admission = '+'; outpatient refers to admission = '-'"
    ]
  },
  "160": {
    "sql": "SELECT COUNT(DISTINCT a.account_id) AS weekly_accounts_with_loan_under_200000\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;",
    "question": "Among the weekly issuance accounts, how many have a loan of under 200000?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000",
    "reason": [
      "frequency = 'POPLATEK TYDNE' stands for weekly issuance"
    ]
  },
  "194": {
    "sql": "SELECT c.client_id, (strftime('%Y', 'now') - strftime('%Y', c.birth_date)) - (strftime('%m-%d', 'now') < strftime('%m-%d', c.birth_date)) AS age\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN card cd ON d.disp_id = cd.disp_id\nWHERE cd.type = 'gold' AND d.type = 'OWNER';",
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
    "reason": [
      "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'"
    ]
  },
  "824": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Wind Control'\nORDER BY s.superhero_name ASC;",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
    "reason": [
      "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';"
    ]
  },
  "958": {
    "sql": "SELECT d.forename, d.surname\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.milliseconds IS NOT NULL\nORDER BY r.milliseconds ASC\nLIMIT 1;",
    "question": "Which driver has the fastest lap time? Please give their forenames and surnames.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
    "reason": []
  },
  "375": {
    "sql": "SELECT id FROM cards WHERE convertedManaCost = 0;",
    "question": "List down all the card IDs with converted mana cost of 0.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT id FROM cards WHERE convertedManaCost = 0",
    "reason": [
      "converted mana cost of 0 refers to covertedManaCost = 0;"
    ]
  },
  "1455": {
    "sql": "SELECT b.budget_id, b.category, b.amount, b.spent, b.remaining, b.event_status\nFROM budget b\nJOIN expense e ON b.budget_id = e.link_to_budget\nWHERE e.expense_description = 'Water, chips, cookies'\nORDER BY e.cost DESC\nLIMIT 1;",
    "question": "Which budget allowed the most money for water, chips, and cookies?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
    "reason": [
      "budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)"
    ]
  },
  "454": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE borderColor = 'white' \nAND (power = '*' OR power IS NULL);",
    "question": "Among the cards with a white border color, how many of them have unknown power?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'",
    "reason": [
      "unknown power refers to power = '*' or power is null"
    ]
  },
  "1275": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS MalePatientsWithNormalLevels\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M'\nAND L.CENTROMEA IN ('-', '+-')\nAND L.SSB IN ('-', '+-');",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "reason": [
      "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;"
    ]
  },
  "644": {
    "sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';",
    "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "reason": [
      "Title = 'Detecting a given face in a database of facial images';"
    ]
  },
  "258": {
    "sql": "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'sn';",
    "question": "What are the bond type for atoms with element Tin?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'",
    "reason": [
      "element Tin refers to element = 'sn'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'"
    ]
  },
  "1487": {
    "sql": "SELECT c.CustomerID, c.Segment, c.Currency, y.Consumption\nFROM customers c\nJOIN yearmonth y ON c.CustomerID = y.CustomerID\nWHERE c.Segment = 'LAM' AND c.Currency = 'Euro' AND y.Date = '201310'\nORDER BY y.Consumption DESC\nLIMIT 1;",
    "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "reason": [
      "October 2013 refers to 201310 in the yearmonth.date"
    ]
  },
  "97": {
    "sql": "SELECT DISTINCT d.client_id\nFROM disp d\nJOIN account a ON d.account_id = a.account_id\nJOIN trans t ON a.account_id = t.account_id\nWHERE d.type = 'Disponent'\nAND t.k_symbol = 'POPLATEK PO OBRATU';",
    "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
    "reason": [
      "'POPLATEK PO OBRATU' stands for issuance after transaction"
    ]
  },
  "769": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE p.publisher_name = 'Dark Horse Comics'\nAND a.attribute_name = 'durability'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "reason": [
      "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
    ]
  },
  "458": {
    "sql": "SELECT COUNT(DISTINCT artist) AS artist_count\nFROM cards\nWHERE borderColor = 'black'\nAND availability LIKE '%arena%'\nAND availability LIKE '%mtgo%';",
    "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
    "reason": [
      "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'"
    ]
  },
  "976": {
    "sql": "SELECT l.driverId\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.lap = 1\nORDER BY l.time ASC\nLIMIT 5;",
    "question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
    "reason": [
      "fastest time refers to Min(time);"
    ]
  },
  "37": {
    "sql": "SELECT s.Street, s.City, s.State, s.Zip\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE sc.NumTstTakr > 0\nORDER BY (sc.NumGE1500 * 1.0 / sc.NumTstTakr) ASC\nLIMIT 1;",
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
    "reason": [
      "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code"
    ]
  },
  "374": {
    "sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';",
    "question": "How many black border cards are only available on mtgo?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'",
    "reason": [
      "black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\n\nadd quotes for string = 'black' and = 'mtgo'"
    ]
  },
  "274": {
    "sql": "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001';",
    "question": "List the toxicology elements associated with molecule TR001.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'",
    "reason": [
      "TR001 is the molecule id"
    ]
  },
  "981": {
    "sql": "WITH youngest_driver AS (\n    SELECT driverId, forename, surname, dob\n    FROM drivers\n    ORDER BY dob DESC\n    LIMIT 1\n),\nfirst_qualifying_race AS (\n    SELECT q.raceId, MIN(r.date) AS first_race_date\n    FROM qualifying q\n    JOIN races r ON q.raceId = r.raceId\n    JOIN youngest_driver yd ON q.driverId = yd.driverId\n    GROUP BY q.driverId\n)\nSELECT r.year, r.name, r.date, r.time, yd.forename, yd.surname\nFROM races r\nJOIN first_qualifying_race fqr ON r.raceId = fqr.raceId\nJOIN youngest_driver yd ON 1=1\nWHERE r.date = fqr.first_race_date;",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
    "reason": [
      "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);"
    ]
  },
  "903": {
    "sql": "SELECT COUNT(*) AS win_count\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nJOIN circuits c ON ra.circuitId = c.circuitId\nWHERE d.forename = 'Michael' AND d.surname = 'Schumacher'\nAND c.name = 'Sepang International Circuit'\nAND r.position = 1;",
    "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
    "reason": [
      "win from races refers to max(points)"
    ]
  },
  "367": {
    "sql": "SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Phyrexian';",
    "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "reason": [
      "Phyrexian' is the language; name of artists refers to artist;"
    ]
  },
  "523": {
    "sql": "WITH yearly_set_counts AS (\n    SELECT \n        strftime('%Y', releaseDate) AS year,\n        COUNT(*) AS set_count\n    FROM \n        sets\n    WHERE \n        releaseDate BETWEEN '2012-01-01' AND '2015-12-31'\n    GROUP BY \n        year\n),\ncommon_language AS (\n    SELECT \n        language,\n        COUNT(*) AS language_count\n    FROM \n        foreign_data\n    GROUP BY \n        language\n    ORDER BY \n        language_count DESC\n    LIMIT 1\n)\nSELECT \n    AVG(set_count) AS annual_average_sets,\n    (SELECT language FROM common_language) AS common_language\nFROM \n    yearly_set_counts;",
    "error": "something went wrong, tool did not call.",
    "question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1",
    "reason": [
      "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))"
    ]
  },
  "667": {
    "sql": "SELECT p.Title \nFROM posts p \nJOIN postLinks pl ON p.Id = pl.PostId \nWHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);",
    "question": "What is the title of the post with the oldest post link?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
    "reason": [
      "the oldest post link refers to MIN(CreaionDate);"
    ]
  },
  "616": {
    "sql": "SELECT c.Score\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.CreaionDate = '2010-07-19 19:19:56.0';",
    "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'",
    "reason": [
      "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'"
    ]
  },
  "784": {
    "sql": "SELECT s.full_name\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'Vampire';",
    "question": "Provide the full names of vampire heroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "reason": [
      "vampire heroes refers to race = 'Vampire';"
    ]
  },
  "42": {
    "sql": "SELECT s.EdOpsName\nFROM satscores sc\nJOIN schools s ON sc.cds = s.CDSCode\nWHERE sc.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores);",
    "question": "What is the type of education offered in the school who scored the highest average in Math?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
    "reason": []
  },
  "366": {
    "sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Benalish Knight';",
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "reason": [
      "Benalish Knight' is the name of card; rule of playing card refers to format;"
    ]
  },
  "1445": {
    "sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';",
    "question": "Find the full name of members whose t-shirt size is extra large.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
    "reason": [
      "full name refers to first_name, last_name; t_shirt_size = 'X-Large'"
    ]
  },
  "604": {
    "sql": "SELECT AVG(u.UpVotes) AS average_up_votes, AVG(u.Age) AS average_user_age\nFROM users u\nJOIN (\n    SELECT OwnerUserId, COUNT(*) AS post_count\n    FROM posts\n    GROUP BY OwnerUserId\n    HAVING COUNT(*) > 10\n) p ON u.Id = p.OwnerUserId;",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
    "reason": [
      "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))"
    ]
  },
  "1231": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M' \nAND strftime('%Y', P.Birthday) BETWEEN '1936' AND '1956'\nAND L.CPK >= 250;",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
    "reason": [
      "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;"
    ]
  },
  "1048": {
    "sql": "SELECT pa.overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011';",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "reason": [
      "in year 2011 refers to strftime('%Y', date) = '2011';"
    ]
  },
  "382": {
    "sql": "SELECT DISTINCT c.* FROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.availability = 'paper' AND fd.language = 'Japanese';",
    "question": "What are the cards that only available in paper and Japanese language?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "reason": [
      "available in paper refers to availability = 'paper'; 'Japanese is the language;"
    ]
  },
  "1268": {
    "sql": "SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.SM NOT IN ('negative', '0')\nORDER BY p.Birthday DESC\nLIMIT 3;",
    "question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3",
    "reason": [
      "abnormal anti-SM refers to SM NOT IN ('negative', '0'); youngest refers to MAX(Birthday);"
    ]
  },
  "838": {
    "sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien';",
    "question": "Provide the full name of the superhero named Alien.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "reason": []
  },
  "1517": {
    "sql": "SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);",
    "question": "For the earliest customer, what segment did he/she have?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1",
    "reason": []
  },
  "215": {
    "sql": "SELECT COUNT(DISTINCT a.atom_id) AS total_atoms\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE a.element IN ('i', 's') AND b.bond_type = '-';",
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "reason": [
      "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;"
    ]
  },
  "435": {
    "sql": "SELECT id FROM cards WHERE borderColor = 'black';",
    "question": "How many card border with black color ? List out the card id.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
    "reason": [
      "border with black color refers to borderColor = 'black'"
    ]
  },
  "1157": {
    "sql": "SELECT P.ID, P.SEX, COALESCE(E.Diagnosis, P.Diagnosis) AS Disease\nFROM Patient P\nLEFT JOIN Examination E ON P.ID = E.ID\nWHERE E.Thrombosis = 2;",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "reason": [
      "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;"
    ]
  },
  "1001": {
    "sql": "SELECT d.forename || ' ' || d.surname AS full_name\nFROM drivers d\nJOIN qualifying q ON d.driverId = q.driverId\nJOIN races r ON q.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Marina Bay Street Circuit'\n  AND r.year = 2008\n  AND q.position = 1\n  AND q.q3 IS NOT NULL\nORDER BY q.q3 ASC\nLIMIT 1;",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
    "reason": [
      "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname"
    ]
  },
  "899": {
    "sql": "SELECT c.circuitId, c.name, c.location, c.country, COUNT(r.raceId) AS race_count\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nWHERE r.year BETWEEN 1990 AND 2000\nGROUP BY c.circuitId, c.name, c.location, c.country\nHAVING COUNT(r.raceId) = 4;",
    "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
    "reason": [
      "from year 1990 to 2000 refers to year(date) between 1990 and 2000;"
    ]
  },
  "1270": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nJOIN Examination E ON P.ID = E.ID\nWHERE L.SC170 IN('negative', '0') \nAND P.SEX = 'F' \nAND E.Symptoms IS NULL;",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "reason": [
      "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;"
    ]
  },
  "683": {
    "sql": "SELECT \n    (COUNT(CASE WHEN u.Reputation > 1000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nWHERE \n    strftime('%Y', p.CreationDate) = '2011';",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "reason": [
      "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;"
    ]
  },
  "1154": {
    "sql": "SELECT p.SEX, p.Birthday, e.\"Examination Date\", e.Symptoms\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.ID = 163109;",
    "question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109",
    "reason": [
      "When was the examination taken refers to `Examination Date`"
    ]
  },
  "45": {
    "sql": "SELECT s.School, sc.AvgScrWrite\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE (s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich') \n   OR (s.AdmFName2 = 'Ricci' AND s.AdmLName2 = 'Ulrich') \n   OR (s.AdmFName3 = 'Ricci' AND s.AdmLName3 = 'Ulrich')\nGROUP BY s.School;",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
    "reason": [
      "Usually, administrators manage the school stuff."
    ]
  },
  "1141": {
    "sql": "SELECT t.team_long_name, ta.buildUpPlaySpeedClass \nFROM Team t \nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id \nWHERE t.team_long_name = 'KSV Cercle Brugge';",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "reason": [
      "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass"
    ]
  },
  "1404": {
    "sql": "SELECT e.expense_description AS type, SUM(e.cost) AS total_value\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'October Meeting' AND e.approved = 'approved'\nGROUP BY e.expense_description;",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
    "reason": [
      "total value refers to SUM(cost); 'October Meeting' is an event name;"
    ]
  },
  "1002": {
    "sql": "WITH youngest_driver AS (\n    SELECT driverId, forename || ' ' || surname AS full_name, nationality, dob\n    FROM drivers\n    ORDER BY dob DESC\n    LIMIT 1\n),\nfirst_race AS (\n    SELECT r.raceId, r.name AS race_name, ra.date\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    JOIN youngest_driver yd ON r.driverId = yd.driverId\n    ORDER BY ra.date ASC\n    LIMIT 1\n)\nSELECT yd.full_name, yd.nationality, fr.race_name\nFROM youngest_driver yd, first_race fr;",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
    "reason": [
      "full name refers to forename+surname; Youngest racer = MAX(dob)"
    ]
  },
  "1426": {
    "sql": "SELECT m.last_name, ma.department, ma.college\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Environmental Engineering';",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "reason": [
      "'Environmental Engineering' is the major_name;"
    ]
  },
  "1106": {
    "sql": "SELECT pa.defensive_work_rate \nFROM Player_Attributes pa \nJOIN Player p ON pa.player_api_id = p.player_api_id \nWHERE p.player_name = 'Kevin Berigaud' \nAND pa.date = '2013-02-22 00:00:00';",
    "question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "reason": [
      "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'"
    ]
  },
  "230": {
    "sql": "SELECT a.element, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060';",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "reason": [
      "TR060 is the molecule id; "
    ]
  },
  "547": {
    "sql": "SELECT COUNT(*) AS NumberOfPosts\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Age > 65 AND p.Score >= 20;",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "reason": [
      "elder users refers to Age > 65; Score of over 19 refers to Score > = 20"
    ]
  },
  "113": {
    "sql": "SELECT c.birth_date\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.amount = 98832 AND l.date = '1996-01-03';",
    "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
    "reason": []
  },
  "1340": {
    "sql": "SELECT \n    (SELECT COALESCE(SUM(b.spent), 0) \n     FROM budget b \n     JOIN event e ON b.link_to_event = e.event_id \n     WHERE SUBSTR(e.event_date, 1, 4) = '2019') -\n    (SELECT COALESCE(SUM(b.spent), 0) \n     FROM budget b \n     JOIN event e ON b.link_to_event = e.event_id \n     WHERE SUBSTR(e.event_date, 1, 4) = '2020') AS difference_in_spending;",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
    "reason": [
      "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)"
    ]
  },
  "985": {
    "sql": "SELECT d.driverId, d.forename, d.surname, lt.time\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE r.name LIKE '%French Grand Prix%' AND lt.lap = 3\nORDER BY lt.time DESC\nLIMIT 1;",
    "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
    "reason": [
      "slowest time refers to Max(time);"
    ]
  },
  "1430": {
    "sql": "SELECT m.last_name, m.position\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';",
    "question": "What is the last name and position of the student that bought pizza on 09/10/2019?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
    "reason": [
      "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'"
    ]
  },
  "1081": {
    "sql": "SELECT c.name AS country_name\nFROM League l\nJOIN Country c ON l.country_id = c.id\nWHERE l.name = 'Belgium Jupiler League';",
    "question": "Which country is the Belgium Jupiler League from?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
    "reason": [
      "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';"
    ]
  },
  "1207": {
    "sql": "SELECT DISTINCT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE strftime('%Y', l.Date) = '1994' AND l.GOT < 60;",
    "question": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'",
    "reason": [
      "AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60; examination in 1994 refers to year(Date) = 1994"
    ]
  },
  "331": {
    "sql": "SELECT COUNT(*) FROM molecule WHERE label = '+';",
    "question": "How many of the molecules are carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic;"
    ]
  },
  "990": {
    "sql": "SELECT c.constructorRef, c.url\nFROM constructors c\nJOIN results r ON c.constructorId = r.constructorId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2009 AND ra.name = 'Singapore Grand Prix' AND r.positionOrder = 1;",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "reason": [
      "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url"
    ]
  },
  "1254": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE L.IGA > 80 AND L.IGA < 500 \nAND YEAR(P.`First Date`) >= 1990;",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
    "reason": [
      "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;"
    ]
  },
  "791": {
    "sql": "SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name;",
    "question": "Calculate the average height for each superhero.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
    "reason": [
      "average = DIVIDE(SUM(height_cm), COUNT(all heros));"
    ]
  },
  "1392": {
    "sql": "SELECT source, SUM(amount) AS total_amount\nFROM income\nWHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY source\nORDER BY total_amount DESC\nLIMIT 1;",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
    "reason": [
      "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'"
    ]
  },
  "1261": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nJOIN Examination E ON P.ID = E.ID\nWHERE L.RF < 20 AND E.Thrombosis = 0;",
    "question": "How many patients with a normal RF don't have thrombosis?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0",
    "reason": [
      "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';"
    ]
  },
  "1440": {
    "sql": "SELECT m.email\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.cost > 20\nAND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19';",
    "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
    "reason": [
      "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20"
    ]
  },
  "1257": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE L.CRE >= 1.5 \nAND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 70;",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
    "reason": [
      "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; "
    ]
  },
  "892": {
    "sql": "SELECT d.forename || ' ' || d.surname AS full_name, MAX(ds.points) AS max_points\nFROM driverStandings ds\nJOIN drivers d ON ds.driverId = d.driverId\nGROUP BY ds.driverId\nORDER BY max_points DESC\nLIMIT 1;",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
    "reason": [
      "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;"
    ]
  },
  "543": {
    "sql": "SELECT MAX(AnswerCount) AS MaxAnswerCount\nFROM posts\nWHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
    "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)"
    ]
  },
  "953": {
    "sql": "SELECT COUNT(DISTINCT c.constructorId) \nFROM constructors c\nJOIN results r ON c.constructorId = r.constructorId\nWHERE c.nationality = 'French' AND r.laps > 50;",
    "question": "How many French constructors have a lap number of over 50?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
    "reason": [
      "lap numbers of over 50 refers to laps > 50;"
    ]
  },
  "378": {
    "sql": "SELECT id FROM cards WHERE hasFoil = 1 AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
    "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "reason": [
      "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;"
    ]
  },
  "515": {
    "sql": "SELECT c.originalReleaseDate, l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic' AND l.status = 'legal'\nORDER BY c.originalReleaseDate ASC\nLIMIT 1;",
    "question": "When was the oldest mythic card released and what are its legal play formats?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "reason": [
      "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format"
    ]
  },
  "820": {
    "sql": "SELECT ha.attribute_value\nFROM hero_attribute ha\nJOIN superhero sh ON ha.hero_id = sh.id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE sh.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';",
    "question": "How strong is the Hulk?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
    "reason": [
      "how strong refers to attribute_value WHERE attribute_name = 'Strength'; the Hulk refers to superhero_name = 'Hulk';"
    ]
  },
  "1300": {
    "sql": "SELECT e.Diagnosis\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.TG < 200\nORDER BY l.TG DESC\nLIMIT 1;",
    "question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1",
    "reason": [
      "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);"
    ]
  },
  "932": {
    "sql": "SELECT DISTINCT r.year\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';\n",
    "question": "In which years did Lewis Hamilton participate in a Formula_1 race?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "reason": []
  },
  "426": {
    "sql": "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3;",
    "question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
    "reason": [
      "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''"
    ]
  },
  "1341": {
    "sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';",
    "question": "Give the location for \"Spring Budget Review\".",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "reason": [
      "'Spring Budget Review' is an event name;"
    ]
  },
  "185": {
    "sql": "WITH prague_accounts AS (\n    SELECT account_id\n    FROM account\n    WHERE district_id IN (SELECT district_id FROM district WHERE A3 LIKE '%Prague%')\n),\nprague_clients AS (\n    SELECT c.client_id, c.gender\n    FROM client c\n    JOIN disp d ON c.client_id = d.client_id\n    JOIN prague_accounts pa ON d.account_id = pa.account_id\n)\nSELECT \n    (COUNT(CASE WHEN gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage\nFROM prague_clients;",
    "question": "What proportion of customers who have accounts at the Prague branch are female?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
    "reason": [
      "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague"
    ]
  },
  "244": {
    "sql": "WITH double_bond_counts AS (\n  SELECT molecule_id, COUNT(*) AS double_bond_count\n  FROM bond\n  WHERE bond_type = ' = '\n  GROUP BY molecule_id\n),\nmax_double_bonds AS (\n  SELECT molecule_id\n  FROM double_bond_counts\n  ORDER BY double_bond_count DESC\n  LIMIT 1\n)\nSELECT m.label = '+' AS is_carcinogenic\nFROM molecule m\nJOIN max_double_bonds mdb ON m.molecule_id = mdb.molecule_id;",
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
    "reason": [
      "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic"
    ]
  },
  "878": {
    "sql": "SELECT d.forename || ' ' || d.surname AS full_name\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE lt.raceId = 348\nORDER BY lt.time ASC\nLIMIT 1;",
    "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
    "reason": [
      "race number refers to raceId; the best lap time refers to MIN(time)"
    ]
  },
  "1118": {
    "sql": "SELECT player_name FROM Player WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) - (strftime('%m-%d', 'now') < strftime('%m-%d', birthday)) > 34;",
    "question": "List down the name of players who are 35 years old and above.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
    "reason": [
      "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34"
    ]
  },
  "126": {
    "sql": "WITH decin_accounts AS (\n    SELECT COUNT(*) AS decin_count\n    FROM account\n    JOIN district ON account.district_id = district.district_id\n    WHERE district.A2 = 'Decin'\n    AND strftime('%Y', account.date) = '1993'\n),\ntotal_1993_accounts AS (\n    SELECT COUNT(*) AS total_count\n    FROM account\n    WHERE strftime('%Y', account.date) = '1993'\n)\nSELECT (decin_count * 100.0 / total_count) AS percentage\nFROM decin_accounts, total_1993_accounts;",
    "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
    "reason": [
      "A2 contains the information about district."
    ]
  },
  "864": {
    "sql": "SELECT COUNT(DISTINCT driverId) AS drivers_finished\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL;",
    "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
    "reason": [
      "game and race are synonyms; drivers who finished the race should have record in time;"
    ]
  },
  "1083": {
    "sql": "SELECT p.player_name, pa.overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nORDER BY pa.overall_rating DESC\nLIMIT 1;",
    "question": "Which player has the strongest overall strength?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "reason": [
      "overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);"
    ]
  },
  "537": {
    "sql": "SELECT COUNT(*) AS post_count\nFROM posts\nWHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
    "question": "How many posts does the user csgillespie own?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user"
    ]
  },
  "88": {
    "sql": "SELECT s.AdmEmail1, sc.sname\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE sc.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores);",
    "question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "reason": []
  },
  "452": {
    "sql": "SELECT name FROM cards WHERE isTextless = 0;",
    "question": "Please list the names of the cards that have a text box.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT name FROM cards WHERE isTextless = 0",
    "reason": [
      "have a text box refers to isTextless = 0"
    ]
  },
  "60": {
    "sql": "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';",
    "question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1",
    "reason": [
      "Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools"
    ]
  },
  "456": {
    "sql": "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';",
    "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "reason": [
      "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes"
    ]
  },
  "1414": {
    "sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Phillip' AND mb.last_name = 'Cullen';",
    "question": "State the name of major that Phillip Cullen has joined.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
    "reason": [
      "name of major refers to major_name"
    ]
  },
  "236": {
    "sql": "SELECT b.bond_type, c.atom_id, c.atom_id2\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_id = 'TR001_6_9';",
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
    "reason": [
      "atoms refer to atom_id or atom_id2"
    ]
  },
  "1354": {
    "sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.position = 'Vice President';",
    "question": "State the major name for the Vice President of the club.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "reason": [
      "'Vice President' is a position of Student Club"
    ]
  },
  "129": {
    "sql": "SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawal\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%'\nGROUP BY d.A2\nORDER BY total_withdrawal DESC\nLIMIT 10;",
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
    "reason": [
      "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names"
    ]
  },
  "883": {
    "sql": "SELECT COUNT(*) AS race_count FROM races WHERE year = 2005;\nSELECT name FROM races WHERE year = 2005 ORDER BY name DESC;",
    "question": "How many races were there in 2005? Name all the races in descending order.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
    "reason": []
  },
  "917": {
    "sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';",
    "question": "Which website should I go to if I want to know more about Anthony Davidson?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
    "reason": [
      "website refers to url"
    ]
  },
  "1138": {
    "sql": "SELECT c.name \nFROM League l \nJOIN Country c ON l.country_id = c.id \nWHERE l.name = 'Poland Ekstraklasa';",
    "question": "In what country did the Poland Ekstraklasa take place?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )",
    "reason": []
  },
  "1196": {
    "sql": "SELECT Symptoms, COUNT(*) AS Frequency\nFROM Examination\nWHERE Diagnosis = 'SLE'\nGROUP BY Symptoms\nORDER BY Frequency DESC\nLIMIT 1;",
    "question": "What is the most common sign of patients with SLE disease?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "reason": [
      "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis"
    ]
  },
  "1108": {
    "sql": "SELECT ta.buildUpPlaySpeedClass \nFROM Team_Attributes ta \nJOIN Team t ON ta.team_api_id = t.team_api_id \nWHERE t.team_long_name = 'Willem II' \nAND ta.date = '2011-02-22';",
    "question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "reason": [
      "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'"
    ]
  },
  "725": {
    "sql": "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",
    "question": "How many superheroes are published by Marvel Comics?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "reason": [
      "published by Marvel Comics refers to publisher_name = 'Marvel Comics'"
    ]
  },
  "887": {
    "sql": "SELECT r2017.name\nFROM races r2017\nWHERE r2017.year = 2017\nAND r2017.circuitId NOT IN (\n    SELECT r2000.circuitId\n    FROM races r2000\n    WHERE r2000.year = 2000\n);",
    "question": "Name the races in year 2017 that are not hosted in year 2000.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
    "reason": [
      "not hosted means not in;"
    ]
  },
  "0": {
    "sql": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate\nFROM frpm\nWHERE `County Name` = 'Alameda';",
    "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "reason": [
      "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"
    ]
  },
  "408": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE (power IS NULL OR power = '*') \nAND text LIKE '%triggered ability%';",
    "question": "How many unknown power cards contain info about the triggered ability",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
    "reason": [
      "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'"
    ]
  },
  "169": {
    "sql": "WITH male_accounts AS (\n    SELECT a.account_id\n    FROM account a\n    JOIN disp d ON a.account_id = d.account_id\n    JOIN client c ON d.client_id = c.client_id\n    WHERE c.gender = 'M'\n),\nloans_1996 AS (\n    SELECT SUM(amount) AS total_amount\n    FROM loan\n    WHERE account_id IN (SELECT account_id FROM male_accounts)\n    AND strftime('%Y', date) = '1996'\n),\nloans_1997 AS (\n    SELECT SUM(amount) AS total_amount\n    FROM loan\n    WHERE account_id IN (SELECT account_id FROM male_accounts)\n    AND strftime('%Y', date) = '1997'\n)\nSELECT \n    ((loans_1997.total_amount - loans_1996.total_amount) / loans_1996.total_amount) * 100 AS growth_rate\nFROM loans_1996, loans_1997;",
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
    "reason": [
      "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'"
    ]
  },
  "1359": {
    "sql": "WITH yearly_kickoff AS (\n    SELECT SUM(amount) AS total_amount\n    FROM budget\n    WHERE category = 'Advertisement'\n    AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')\n),\noctober_meeting AS (\n    SELECT SUM(amount) AS total_amount\n    FROM budget\n    WHERE category = 'Advertisement'\n    AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'October Meeting')\n)\nSELECT COUNT(*) AS count_more\nFROM yearly_kickoff, october_meeting\nWHERE yearly_kickoff.total_amount > october_meeting.total_amount;",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "reason": [
      "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))"
    ]
  },
  "1349": {
    "sql": "SELECT SUM(amount) AS total_budget_amount\nFROM budget\nWHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Speaker');",
    "question": "Provide the total number of the budget amount for \"September Speaker\" event.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
    "reason": [
      "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)"
    ]
  },
  "1209": {
    "sql": "SELECT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GPT > 60\nORDER BY p.Birthday ASC;",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "reason": [
      "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; "
    ]
  },
  "613": {
    "sql": "SELECT b.Date\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Location = 'Rochester, NY';\n",
    "question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "reason": [
      "\"Rochester, NY\" is the Location of user; user refers to UserId"
    ]
  },
  "689": {
    "sql": "SELECT u.DisplayName, u.Location\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Id = 183;",
    "question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1",
    "reason": [
      "last to edit refers to MAX(LastEditDate);"
    ]
  },
  "900": {
    "sql": "SELECT circuits.name AS circuit_name, circuits.location, races.name AS race_name\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.year = 2006 AND circuits.country = 'USA';",
    "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
    "reason": []
  },
  "1456": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_spending\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nGROUP BY m.member_id\nORDER BY total_spending DESC\nLIMIT 5;",
    "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
    "reason": [
      "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)"
    ]
  },
  "1128": {
    "sql": "SELECT c.name AS country_name, AVG(p.weight) AS average_weight\nFROM Player p\nJOIN Match m ON p.player_api_id IN (\n    m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5,\n    m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11,\n    m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5,\n    m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11\n)\nJOIN Country c ON m.country_id = c.id\nGROUP BY c.name\nORDER BY average_weight DESC\nLIMIT 1;",
    "question": "Which country's players have the heaviest average weights?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
    "reason": [
      "heaviest average weights refers to MAX(AVG(weight))"
    ]
  },
  "948": {
    "sql": "SELECT MAX(cs.points) AS max_points\nFROM constructors c\nJOIN constructorStandings cs ON c.constructorId = cs.constructorId\nWHERE c.nationality = 'British';",
    "question": "What are the maximum points of British constructors?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "reason": [
      "maximum points = MAX(points); British is a nationality"
    ]
  },
  "255": {
    "sql": "SELECT \n    ROUND((SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(b.bond_id), 5) AS proportion\nFROM \n    bond b\nJOIN \n    molecule m ON b.molecule_id = m.molecule_id\nWHERE \n    b.bond_type = '-';",
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
    "reason": [
      "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'"
    ]
  },
  "788": {
    "sql": "SELECT \n    (COUNT(CASE WHEN g.gender = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_heroes\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nJOIN \n    gender g ON s.gender_id = g.id\nWHERE \n    p.publisher_name = 'Marvel Comics';",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
    "reason": [
      "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"
    ]
  },
  "321": {
    "sql": "SELECT m.molecule_id, m.label\nFROM atom a1\nJOIN atom a2 ON a1.molecule_id = a2.molecule_id\nJOIN molecule m ON a1.molecule_id = m.molecule_id\nWHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';",
    "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
    "reason": []
  },
  "658": {
    "sql": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;",
    "question": "What are the titles of the top 5 posts with the highest popularity?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
    "reason": [
      "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);"
    ]
  },
  "1199": {
    "sql": "SELECT COUNT(DISTINCT ID) \nFROM Laboratory \nWHERE strftime('%Y', Date) = '1997' \nAND (TP < 6 OR TP > 8.5);",
    "question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'",
    "reason": [
      "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5"
    ]
  },
  "811": {
    "sql": "SELECT a.alignment, GROUP_CONCAT(sp.power_name, ', ') AS superpowers\nFROM superhero sh\nJOIN alignment a ON sh.alignment_id = a.id\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Atom IV'\nGROUP BY a.alignment;",
    "question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "reason": [
      "superpowers refers to power_name;"
    ]
  },
  "922": {
    "sql": "SELECT r.time \nFROM races r \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE r.year = 2010 AND c.name = 'Abu Dhabi';",
    "question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'",
    "reason": []
  },
  "542": {
    "sql": "SELECT SUM(p.CommentCount) AS TotalComments\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
    "question": "What is the total number of comments of all the posts owned by csgillespie?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)"
    ]
  },
  "1333": {
    "sql": "SELECT z.city, z.state\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.position = 'President';",
    "question": "What city and state did the President of the Student_Club grow up?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "reason": [
      "'President' is a position of Student Club;"
    ]
  },
  "579": {
    "sql": "SELECT c.Text \nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.Title = 'How does gentle boosting differ from AdaBoost?';",
    "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'",
    "reason": [
      "\"How does gentle boosting differ from AdaBoost?\" is the Title of post; comments refers to Text"
    ]
  },
  "413": {
    "sql": "SELECT COUNT(DISTINCT c.id) \nFROM cards c \nJOIN rulings r ON c.uuid = r.uuid \nWHERE c.rarity = 'rare' AND r.date = '2007-02-01';",
    "question": "How many cards with print rarity have ruling text printed on 01/02/2007?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
    "reason": [
      "with print rarity refers to rarity = 'rare'; on 01/02/2007 refers to date = '2007-02-01'"
    ]
  },
  "30": {
    "sql": "SELECT s.City, SUM(f.\"Enrollment (K-12)\") AS TotalEnrollment\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nGROUP BY s.City\nORDER BY TotalEnrollment ASC\nLIMIT 5;",
    "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5",
    "reason": [
      "K-12 refers to students in grades 1 through 12."
    ]
  },
  "863": {
    "sql": "SELECT s.url \nFROM seasons s \nJOIN races r ON s.year = r.year \nWHERE r.raceId = 901;",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "reason": [
      "race number refers to raceId;"
    ]
  },
  "1244": {
    "sql": "SELECT DISTINCT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE strftime('%Y', P.`First Date`) > '1992'\nAND L.PT < 14;",
    "question": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14",
    "reason": [
      "first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;"
    ]
  },
  "685": {
    "sql": "SELECT p.ViewCount AS TotalViews, u.DisplayName AS UserName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Computer Game Datasets';",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "reason": [
      "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';"
    ]
  },
  "145": {
    "sql": "WITH credit_card_transactions AS (\n    SELECT account_id, amount\n    FROM trans\n    WHERE operation = 'VYBER KARTOU'\n    AND strftime('%Y', date) = '1998'\n),\naverage_amount AS (\n    SELECT AVG(amount) AS avg_amount\n    FROM credit_card_transactions\n)\nSELECT DISTINCT c.client_id\nFROM credit_card_transactions cct\nJOIN disp d ON cct.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE cct.amount < (SELECT avg_amount FROM average_amount);",
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
    "reason": [
      "Operation = 'VYBER KARTOU' refers to credit card withdrawal"
    ]
  },
  "915": {
    "sql": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);",
    "question": "Which country is the oldest driver from?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
    "reason": [
      "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;"
    ]
  },
  "443": {
    "sql": "SELECT code FROM sets WHERE type = 'expansion';",
    "question": "Give the code of sets have expansion type of 'expansion'?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
    "reason": [
      "code of sets refers to setCode"
    ]
  },
  "66": {
    "sql": "SELECT COUNT(*) AS NumberOfDirectlyFundedSchools\nFROM schools\nWHERE County = 'Stanislaus'\nAND FundingType = 'Directly Funded'\nAND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';",
    "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
    "reason": [
      "Directly funded schools refers to FundingType = 'Directly Funded'"
    ]
  },
  "586": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nJOIN posts p ON v.PostId = p.Id\nWHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
    "reason": [
      "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'"
    ]
  },
  "717": {
    "sql": "SELECT sp.power_name \nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = '3-D Man';",
    "question": "Please list all the superpowers of 3-D Man.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "reason": [
      "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name"
    ]
  },
  "1193": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE P.SEX = 'F' \nAND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31'\nAND (E.`ANA Pattern` IS NULL OR E.`ANA Pattern` != 'P');",
    "question": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'",
    "reason": [
      "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY"
    ]
  },
  "589": {
    "sql": "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;",
    "question": "Which user ID has the highest reputation?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "reason": [
      "highest reputation refers to Max(Reputation)"
    ]
  },
  "212": {
    "sql": "SELECT a.element, COUNT(a.element) AS element_count\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '-'\nGROUP BY a.element\nORDER BY element_count ASC\nLIMIT 1;",
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
    "reason": [
      "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));"
    ]
  },
  "567": {
    "sql": "SELECT COUNT(*) AS post_count\nFROM posts\nWHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "reason": [
      "\"Tiago Pasqualini\" is the DisplayName;"
    ]
  },
  "970": {
    "sql": "SELECT d.driverId, d.forename, d.surname, MIN(l.time) AS earliest_lap_time\nFROM drivers d\nJOIN lapTimes l ON d.driverId = l.driverId\nWHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990'\nGROUP BY d.driverId, d.forename, d.surname\nORDER BY earliest_lap_time ASC\nLIMIT 3;",
    "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
    "reason": [
      "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);"
    ]
  },
  "578": {
    "sql": "SELECT u.DisplayName, u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "reason": [
      "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;"
    ]
  },
  "818": {
    "sql": "SELECT (COUNT(CASE WHEN s.gender_id = 2 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_bad_superheroes\nFROM superhero s\nWHERE s.alignment_id = 2;",
    "question": "Among the bad superheroes, what is the percentage of female superheroes?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'",
    "reason": [
      "bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;"
    ]
  },
  "423": {
    "sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3;",
    "question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
    "reason": [
      "poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null"
    ]
  },
  "385": {
    "sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality';",
    "question": "Write down the ruling of Beacon of Immortality.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "reason": [
      "Beacon of Immortality' is the name of card;"
    ]
  },
  "558": {
    "sql": "SELECT COUNT(*) AS vote_count FROM votes WHERE UserId = 58 AND DATE(CreationDate) = '2010-07-19';",
    "question": "How many votes did the user No.58 take on 2010/7/19?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
    "reason": [
      "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'"
    ]
  },
  "1059": {
    "sql": "SELECT player_name FROM Player WHERE height > 180;",
    "question": "Please list player names which are higher than 180.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT player_name FROM Player WHERE height > 180",
    "reason": [
      "height>180;"
    ]
  },
  "967": {
    "sql": "WITH youngest_drivers AS (\n    SELECT code, nationality\n    FROM drivers\n    ORDER BY dob DESC\n    LIMIT 3\n)\nSELECT \n    COUNT(*) AS netherlandic_drivers_count\nFROM youngest_drivers\nWHERE nationality IN ('Dutch', 'Netherlandic');",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
    "reason": [
      "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country"
    ]
  },
  "1369": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.amount = (SELECT MAX(amount) FROM budget);",
    "question": "Which event has the highest budget amount?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1",
    "reason": [
      "event refers to event_name; highest budget amount refers to MAX(amount)"
    ]
  },
  "1075": {
    "sql": "SELECT p.player_name, pa.balance, pa.potential\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.balance = (SELECT MAX(balance) FROM Player_Attributes)\nAND pa.potential = 61;",
    "question": "List all the football player with the highest balance score and potential score of 61.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1",
    "reason": [
      "balance score refers to balance; highest balance score refers to MAX(balance); potential score refers to potential; potential = 61;"
    ]
  },
  "402": {
    "sql": "WITH total_cards AS (\n    SELECT COUNT(*) AS total FROM cards\n),\nstory_spotlight_cards AS (\n    SELECT COUNT(*) AS spotlight_count, GROUP_CONCAT(id) AS spotlight_ids \n    FROM cards \n    WHERE isStorySpotlight = 1 AND isTextless = 0\n)\nSELECT \n    (spotlight_count * 100.0 / total) AS percentage,\n    spotlight_ids AS story_spotlight_card_ids\nFROM total_cards, story_spotlight_cards;",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
    "reason": [
      "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100"
    ]
  },
  "773": {
    "sql": "SELECT s.superhero_name, p.publisher_name\nFROM superhero s\nJOIN colour eye ON s.eye_colour_id = eye.id\nJOIN colour hair ON s.hair_colour_id = hair.id\nJOIN colour skin ON s.skin_colour_id = skin.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE eye.id = hair.id AND hair.id = skin.id\nGROUP BY s.superhero_name, p.publisher_name;",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
    "reason": [
      "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;"
    ]
  },
  "186": {
    "sql": "SELECT \n    (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_male_clients\nFROM \n    account a\nJOIN \n    disp d ON a.account_id = d.account_id\nJOIN \n    client c ON d.client_id = c.client_id\nWHERE \n    a.frequency = 'POPLATEK TYDNE';",
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
    "reason": [
      "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance"
    ]
  },
  "222": {
    "sql": "SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule;",
    "question": "What is the difference between the number of molecules that are carcinogenic and those that are not?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
    "reason": [
      "label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))"
    ]
  },
  "1112": {
    "sql": "SELECT ta.chanceCreationCrossingClass \nFROM Team_Attributes ta \nJOIN Team t ON ta.team_api_id = t.team_api_id \nWHERE t.team_long_name = 'Hull City' \nAND ta.date = '2010-02-22 00:00:00';",
    "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "reason": [
      "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'"
    ]
  },
  "455": {
    "sql": "SELECT name FROM cards WHERE isPromo = 1 AND otherFaceIds IS NOT NULL AND otherFaceIds != '';",
    "question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
    "reason": [
      "are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null"
    ]
  },
  "176": {
    "sql": "SELECT l.amount AS debt_amount, l.status AS payment_status\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE c.client_id = 992;",
    "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
    "reason": []
  },
  "51": {
    "sql": "SELECT s.MailStreet, s.School\nFROM satscores sc\nJOIN schools s ON sc.cds = s.CDSCode\nORDER BY sc.AvgScrRead ASC\nLIMIT 1;",
    "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "reason": []
  },
  "272": {
    "sql": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '-'\nAND b.bond_type = '#'\nAND a.element = 'c'\nLIMIT 2;",
    "question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'",
    "reason": [
      "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "313": {
    "sql": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001';",
    "question": "How many atoms belong to molecule id TR001?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'",
    "reason": []
  },
  "1182": {
    "sql": "SELECT COUNT(*) AS TotalLabTestsIn1995\nFROM Laboratory\nWHERE ID = (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS')\nAND strftime('%Y', Date) = '1995';",
    "question": "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'",
    "reason": [
      "1991/6/13 refers to `First Date` = '1991-06-13'; 'SJS' refers to Diagnosis; total number of his/her Laboratory tests refers to COUNT(ID); 1995 refers to Date"
    ]
  },
  "414": {
    "sql": "SELECT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Ravnica' AND s.baseSetSize = 180;",
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
    "reason": [
      "set of 180 cards refers to baseSetSize = 180"
    ]
  },
  "861": {
    "sql": "SELECT d.number\nFROM drivers d\nJOIN qualifying q ON d.driverId = q.driverId\nWHERE q.raceId = 903 AND q.q3 = '0:01:54';",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "reason": [
      "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'"
    ]
  },
  "1247": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE P.SEX = 'M' \nAND L.WBC > 3.5 AND L.WBC < 9.0 \nAND (L.FG <= 150 OR L.FG >= 450);",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "reason": [
      "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones."
    ]
  },
  "972": {
    "sql": "SELECT d.driverId, d.code\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE strftime('%Y', d.dob) = '1971'\nAND r.fastestLapTime IS NOT NULL;",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
    "reason": [
      "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values"
    ]
  },
  "78": {
    "sql": "SELECT GSserved, COUNT(*) as count\nFROM schools\nWHERE City = 'Adelanto'\nGROUP BY GSserved\nORDER BY count DESC\nLIMIT 1;",
    "question": "What is the most common type of grade span served in the city of Adelanto?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "reason": []
  },
  "800": {
    "sql": "SELECT (COUNT(CASE WHEN eye_colour_id = 7 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_blue_eyes\nFROM superhero;",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
    "reason": [
      "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;"
    ]
  },
  "359": {
    "sql": "SELECT originalType FROM cards WHERE name = \"Ancestor's Chosen\";",
    "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
    "reason": [
      "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;"
    ]
  },
  "292": {
    "sql": "SELECT a.atom_id, a.molecule_id, a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE substr(m.molecule_id, 3, 3) >= 10 AND substr(m.molecule_id, 3, 3) <= 50\nAND a.element = 'c';",
    "question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'",
    "reason": [
      "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>=10 AND substr(molecule_id, 3, 3) <= 50"
    ]
  },
  "1307": {
    "sql": "SELECT DISTINCT P.ID\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-';",
    "question": "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'",
    "reason": [
      "RBC < = 3.5 or RBC > = 6.0 means the patient has an abnormal level of red blood cell; 3.5 < RBC < 6.0 means the patient has a normal level of red blood cell; followed at the outpatient clinic refers to Admission = '-';"
    ]
  },
  "988": {
    "sql": "SELECT d.forename, d.surname, AVG(p.duration) AS avg_pitstop_duration\nFROM drivers d\nJOIN pitStops p ON d.driverId = p.driverId\nWHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY d.driverId, d.forename, d.surname\nORDER BY avg_pitstop_duration ASC\nLIMIT 3;",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
    "reason": [
      "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));"
    ]
  },
  "1461": {
    "sql": "SELECT m.last_name, m.phone\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Elementary Education';",
    "question": "List the last names of students under the Elementary Education major and include their phone numbers.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
    "reason": [
      "'Elementary Education' is the major name; phone numbers refers to phone"
    ]
  },
  "815": {
    "sql": "SELECT COUNT(*) AS good_female_superheroes_count\nFROM superhero\nWHERE alignment_id = 1 AND gender_id = 2;",
    "question": "Count the good female superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'",
    "reason": [
      "good refers to alignment.id = 1; female refers to gender.id = 2;"
    ]
  },
  "507": {
    "sql": "SELECT \n    (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_online_only\nFROM \n    set_translations st\nJOIN \n    cards c ON st.setCode = c.setCode\nWHERE \n    st.language = 'Portuguese (Brazil)';",
    "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )",
    "reason": [
      "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100"
    ]
  },
  "639": {
    "sql": "SELECT \n    (COUNT(CASE WHEN t.TagName = 'r' THEN 1 END) * 100.0 / COUNT(p.Id)) AS percentage\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nLEFT JOIN \n    tags t ON p.Tags LIKE '%r%'\nWHERE \n    u.DisplayName = 'Community';",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "reason": [
      "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'"
    ]
  },
  "1054": {
    "sql": "SELECT pa.defensive_work_rate \nFROM Player_Attributes pa \nJOIN Player p ON pa.player_api_id = p.player_api_id \nWHERE p.player_name = 'David Wilson';",
    "question": "What is the defensive work rate of the football player David Wilson\n?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "reason": []
  },
  "1098": {
    "sql": "SELECT MAX(ta.chanceCreationPassing) AS highest_chance_creation_passing, ta.chanceCreationPassingClass\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE t.team_long_name = 'Ajax';",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "reason": [
      "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass"
    ]
  },
  "754": {
    "sql": "SELECT sp.power_name \nFROM superhero sh \nJOIN hero_power hp ON sh.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE sh.id = 56;",
    "question": "What is the superpower of hero ID 56?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
    "reason": [
      "superpower refers to hero_power"
    ]
  },
  "581": {
    "sql": "SELECT u.DisplayName AS EditorName\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Title = 'Open source tools for visualizing multi-dimensional data';",
    "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
    "reason": [
      "'Open source tools for visualizing multi-dimensional data' is the Title of Post; editor refers to DisplayName;"
    ]
  },
  "299": {
    "sql": "SELECT label FROM molecule WHERE molecule_id = 'TR124';",
    "question": "Is molecule TR124 carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'",
    "reason": [
      "label = '+' mean molecules are carcinogenic;"
    ]
  },
  "1116": {
    "sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);",
    "question": "List down most tallest players' name.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
    "reason": [
      "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 "
    ]
  },
  "532": {
    "sql": "SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2011';",
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
    "reason": [
      "account created in the year 2011 refers to year(CreationDate) = 2011"
    ]
  },
  "1021": {
    "sql": "SELECT player_name, MAX(height) AS tallest_height FROM Player;",
    "question": "What is the height of the tallest player? Indicate his name.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "reason": [
      "tallest player refers to MAX(height);"
    ]
  },
  "1160": {
    "sql": "SELECT \n    (COUNT(CASE WHEN (P.SEX = 'F' AND (L.TP < 6.0 OR L.TP > 8.5)) THEN 1 END) * 100.0 / \n    COUNT(CASE WHEN P.SEX = 'F' THEN 1 END)) AS percentage\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.SEX = 'F' AND L.TP IS NOT NULL;",
    "question": "What is the percentage of female patient had total protein not within the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "reason": [
      "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100"
    ]
  },
  "130": {
    "sql": "SELECT COUNT(DISTINCT c.client_id) AS account_holders_without_credit_cards\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nJOIN disp dp ON a.account_id = dp.account_id\nJOIN client c ON dp.client_id = c.client_id\nLEFT JOIN card cd ON dp.disp_id = cd.disp_id\nWHERE d.A3 = 'South Bohemia' AND dp.type = 'OWNER' AND cd.card_id IS NULL;",
    "question": "How many of the account holders in South Bohemia still do not own credit cards?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
    "reason": [
      "A3 contains the region names; South Bohemia is one of region names."
    ]
  },
  "995": {
    "sql": "SELECT AVG(r.points) AS average_score\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.name LIKE '%Turkish Grand Prix%'\nAND d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
    "reason": [
      "Average score = AVG(points)"
    ]
  },
  "874": {
    "sql": "SELECT d.forename, d.surname\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE rc.name = 'San Marino Grand Prix' AND rc.year = 2006 AND r.position = 2;",
    "question": "Who finished second in the San Marino Grand Prix in 2006?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
    "reason": [
      "finished second refers to position = 2;"
    ]
  },
  "168": {
    "sql": "WITH high_salary_districts AS (\n    SELECT district_id\n    FROM district\n    WHERE A11 > 10000\n),\naccounts_in_high_salary_districts AS (\n    SELECT account_id\n    FROM account\n    WHERE district_id IN (SELECT district_id FROM high_salary_districts)\n),\nclients_in_high_salary_districts AS (\n    SELECT c.client_id, c.gender\n    FROM client c\n    JOIN disp d ON c.client_id = d.client_id\n    JOIN accounts_in_high_salary_districts a ON d.account_id = a.account_id\n),\ntotal_clients AS (\n    SELECT COUNT(*) AS total\n    FROM clients_in_high_salary_districts\n),\nfemale_clients AS (\n    SELECT COUNT(*) AS female_count\n    FROM clients_in_high_salary_districts\n    WHERE gender = 'F'\n)\nSELECT (female_count * 100.0 / total) AS percentage_female\nFROM female_clients, total_clients;",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "reason": [
      "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11"
    ]
  },
  "713": {
    "sql": "SELECT u.UpVotes\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nWHERE c.Text = 'R is also lazy evaluated.';",
    "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'",
    "reason": [
      "commented \"R is also lazy evaluated.\" refers to Text of the comment;"
    ]
  },
  "570": {
    "sql": "SELECT b.Name \nFROM badges b \nJOIN users u ON b.UserId = u.Id \nWHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
    "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "reason": [
      "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;"
    ]
  },
  "1389": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.cost = (SELECT MIN(cost) FROM expense);",
    "question": "Which event has the lowest cost?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
    "reason": [
      "event refers to event_name; lowest cost means MIN(cost)"
    ]
  },
  "1382": {
    "sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE maj.major_name = 'Interior Design' AND e.event_name = 'Community Theater';",
    "question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "reason": [
      "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;"
    ]
  },
  "670": {
    "sql": "SELECT MIN(p.CreaionDate) AS FirstPostDate\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL);",
    "question": "What is the date when the youngest user made his or her first post?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1",
    "reason": [
      "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);"
    ]
  },
  "660": {
    "sql": "SELECT OwnerUserId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);",
    "question": "What is the owner user id of the most valuable post?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
    "reason": [
      "the most valuable post refers to MAX(FavoriteCount);"
    ]
  },
  "36": {
    "sql": "WITH top_school AS (\n    SELECT cds\n    FROM satscores\n    ORDER BY NumGE1500 DESC\n    LIMIT 1\n)\nSELECT \n    CASE \n        WHEN AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL THEN AdmFName1 || ' ' || AdmLName1\n        ELSE NULL\n    END AS admin1,\n    CASE \n        WHEN AdmFName2 IS NOT NULL AND AdmLName2 IS NOT NULL THEN AdmFName2 || ' ' || AdmLName2\n        ELSE NULL\n    END AS admin2,\n    CASE \n        WHEN AdmFName3 IS NOT NULL AND AdmLName3 IS NOT NULL THEN AdmFName3 || ' ' || AdmLName3\n        ELSE NULL\n    END AS admin3\nFROM schools\nWHERE CDSCode = (SELECT cds FROM top_school);",
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "reason": [
      "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500"
    ]
  },
  "427": {
    "sql": "SELECT DISTINCT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.code = 'ARC';",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
    "reason": [
      "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'"
    ]
  },
  "681": {
    "sql": "SELECT DISTINCT u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.ViewCount > 20000\nAND strftime('%Y', p.CreaionDate) = '2011';",
    "question": "Please list the users' display names whose posts had over 20000 views in 2011.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000",
    "reason": [
      "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;"
    ]
  },
  "632": {
    "sql": "SELECT COUNT(*) AS vote_count\nFROM votes\nWHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');",
    "question": "How many votes were made by Harlan?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
    "reason": [
      "DisplayName = 'Harlan';"
    ]
  },
  "881": {
    "sql": "WITH race_on_date AS (\n    SELECT raceId FROM races WHERE date = '1983-07-16'\n),\ndriver_participation AS (\n    SELECT r.driverId, s.status\n    FROM results r\n    JOIN race_on_date rod ON r.raceId = rod.raceId\n    JOIN status s ON r.statusId = s.statusId\n),\ncompletion_stats AS (\n    SELECT \n        COUNT(*) AS total_drivers,\n        SUM(CASE WHEN status = 'Finished' THEN 1 ELSE 0 END) AS completed_drivers\n    FROM driver_participation\n)\nSELECT \n    (completed_drivers * 100.0 / total_drivers) AS completion_rate_percentage\nFROM completion_stats;",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
    "reason": [
      "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'"
    ]
  },
  "934": {
    "sql": "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races rc ON r.raceId = rc.raceId\nWHERE rc.year = 1989 AND rc.name = 'Australian Grand Prix' AND r.grid = 4;",
    "question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989",
    "reason": [
      "the no. 4 grid formation refers to grid = 4"
    ]
  },
  "269": {
    "sql": "SELECT COUNT(DISTINCT c.bond_id) \nFROM connected c \nJOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id \nWHERE a.element = 'i';",
    "question": "How many bond id have element iodine?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'",
    "reason": [
      "iodine refers to element = 'i'"
    ]
  },
  "918": {
    "sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';",
    "question": "What's Lewis Hamilton's reference name?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
    "reason": [
      "reference name refers to driverRef"
    ]
  },
  "1230": {
    "sql": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-' AND l.CPK < 250;",
    "question": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'",
    "reason": [
      "outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;"
    ]
  },
  "1095": {
    "sql": "SELECT AVG(buildUpPlaySpeed) AS average_build_up_play_speed\nFROM Team_Attributes\nJOIN Team ON Team_Attributes.team_api_id = Team.team_api_id\nWHERE Team.team_long_name = 'Heart of Midlothian';",
    "question": "How much is the average build up play speed of the Heart of Midlothian team?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'",
    "reason": [
      "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to  AVG(buildUpPlaySpeed)"
    ]
  },
  "877": {
    "sql": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 872 AND r.time IS NOT NULL\nORDER BY d.dob DESC\nLIMIT 1;",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
    "reason": [
      "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);"
    ]
  },
  "59": {
    "sql": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName2 = 'Mike' AND AdmLName2 = 'Larson') OR (AdmFName3 = 'Mike' AND AdmLName3 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez') OR (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez') OR (AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez');",
    "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
    "reason": []
  },
  "541": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Score = (SELECT MAX(Score) FROM posts);",
    "question": "What is the display name of the user who is the owner of the most valuable post?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1",
    "reason": [
      "most valuable post refers to Max(FavoriteCount)"
    ]
  },
  "989": {
    "sql": "SELECT d.forename, d.surname, r.time\nFROM races ra\nJOIN results r ON ra.raceId = r.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2008 AND r.positionOrder = 1;",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "reason": [
      "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";"
    ]
  },
  "1381": {
    "sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nGROUP BY m.member_id, m.first_name, m.last_name\nHAVING COUNT(a.link_to_event) > 7;",
    "question": "List the name of students that have attended more than 7 events.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
    "reason": [
      "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7"
    ]
  },
  "1529": {
    "sql": "-- Total amount spent by customer 38508 at gas stations\nSELECT SUM(Amount * Price) AS TotalAmountSpent\nFROM transactions_1k\nWHERE CustomerID = 38508;\n\n-- Amount spent by customer 38508 in January 2012\nSELECT SUM(Amount * Price) AS January2012AmountSpent\nFROM transactions_1k\nWHERE CustomerID = 38508 AND Date LIKE '201201%';",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
    "reason": [
      "January 2012 refers to the Date value = '201201'"
    ]
  },
  "141": {
    "sql": "SELECT d.A2 AS district_name\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE strftime('%Y', t.date) = '1997'\nAND t.amount > 10000\nGROUP BY d.A2;",
    "question": "Which districts have transactions greater than USS$10,000 in 1997?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
    "reason": []
  },
  "1306": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;",
    "question": "How many patients diagnosed with SLE have a normal white blood cell level?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9",
    "reason": [
      "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;"
    ]
  },
  "939": {
    "sql": "SELECT COUNT(DISTINCT d.driverId) AS numberOfBritishDrivers\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND d.nationality = 'British';",
    "question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008",
    "reason": [
      "from the UN refers to nationality = 'British'"
    ]
  },
  "1506": {
    "sql": "SELECT p.Description\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'CZE';",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
    "reason": [
      "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; "
    ]
  },
  "501": {
    "sql": "SELECT c.name\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Journey into Nyx Hero''s Path'\nORDER BY c.convertedManaCost DESC\nLIMIT 1;",
    "question": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "reason": [
      "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'"
    ]
  },
  "1502": {
    "sql": "SELECT DISTINCT g.ChainID\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE c.Currency = 'EUR';",
    "question": "Please list the chains of the gas stations with transactions in euro.",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'",
    "reason": []
  },
  "774": {
    "sql": "SELECT r.race \nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.superhero_name = 'A-Bomb';",
    "question": "Which group does superhero A-Bomb belong to?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "reason": [
      "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';"
    ]
  },
  "743": {
    "sql": "WITH total_superheroes AS (\n    SELECT COUNT(*) AS total_count FROM superhero\n),\nbad_superheroes AS (\n    SELECT COUNT(*) AS bad_count FROM superhero\n    JOIN alignment ON superhero.alignment_id = alignment.id\n    WHERE alignment.alignment = 'Bad'\n),\nmarvel_bad_superheroes AS (\n    SELECT COUNT(*) AS marvel_bad_count FROM superhero\n    JOIN alignment ON superhero.alignment_id = alignment.id\n    JOIN publisher ON superhero.publisher_id = publisher.id\n    WHERE alignment.alignment = 'Bad' AND publisher.publisher_name = 'Marvel Comics'\n)\nSELECT \n    (bad_superheroes.bad_count * 100.0 / total_superheroes.total_count) AS percentage_bad,\n    marvel_bad_superheroes.marvel_bad_count AS marvel_bad_count\nFROM \n    total_superheroes, \n    bad_superheroes, \n    marvel_bad_superheroes;",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
    "reason": [
      "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)"
    ]
  },
  "3": {
    "sql": "SELECT s.MailStreet\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.\"FRPM Count (K-12)\" = (SELECT MAX(\"FRPM Count (K-12)\") FROM frpm);",
    "question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
    "reason": []
  },
  "810": {
    "sql": "SELECT r.race\nFROM race r\nJOIN superhero s ON r.id = s.race_id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)\nLIMIT 1;",
    "question": "What is the race of the superhero with maximum attribute value?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1",
    "reason": [
      "maximum attribute value refers to MAX(attribute_value);"
    ]
  },
  "1110": {
    "sql": "SELECT ta.buildUpPlayPassingClass \nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE t.team_long_name = 'FC Lorient' AND ta.date LIKE '2010-02-22%';",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
    "reason": [
      "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22 refers to date LIKE '2010-02-22%';"
    ]
  },
  "1454": {
    "sql": "SELECT (SUM(e.cost) / COUNT(DISTINCT ev.event_id)) * 100 AS percentage_cost\nFROM event ev\nJOIN budget b ON ev.event_id = b.link_to_event\nJOIN expense e ON b.budget_id = e.link_to_budget\nWHERE ev.type = 'Meeting';",
    "question": "What is the percentage of the cost for the meeting events?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "reason": [
      "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100"
    ]
  },
  "1241": {
    "sql": "SELECT \n    SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS lower_than_normal,\n    SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS higher_than_normal,\n    SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS comparison\nFROM \n    (SELECT DISTINCT ID, PLT FROM Laboratory WHERE PLT <= 100 OR PLT >= 400);",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "reason": [
      "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;"
    ]
  },
  "498": {
    "sql": "SELECT st.translation AS french_set_name\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN set_translations st ON s.code = st.setCode\nWHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French';",
    "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "reason": [
      "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation"
    ]
  },
  "870": {
    "sql": "SELECT q.q1\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 345 AND d.forename = 'Lucas' AND d.surname = 'di Grassi';",
    "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
    "reason": [
      "race number refers to raceId;"
    ]
  },
  "1121": {
    "sql": "SELECT SUM(m.home_team_goal) AS total_home_goals\nFROM Match m\nJOIN Player p ON m.home_player_1 = p.player_api_id OR m.home_player_2 = p.player_api_id OR m.home_player_3 = p.player_api_id OR m.home_player_4 = p.player_api_id OR m.home_player_5 = p.player_api_id OR m.home_player_6 = p.player_api_id OR m.home_player_7 = p.player_api_id OR m.home_player_8 = p.player_api_id OR m.home_player_9 = p.player_api_id OR m.home_player_10 = p.player_api_id OR m.home_player_11 = p.player_api_id\nWHERE (julianday('now') - julianday(p.birthday)) / 365.25 <= 30;",
    "question": "Calculate the total home team goal scored by players whose age are 30 years old and below.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31",
    "reason": [
      "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)"
    ]
  },
  "1235": {
    "sql": "SELECT P.ID, P.Diagnosis, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.RBC < 3.5;",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "reason": [
      "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); "
    ]
  },
  "379": {
    "sql": "SELECT id FROM cards WHERE duelDeck = 'a';",
    "question": "What are the cards belong to duel deck a? List the ID.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT id FROM cards WHERE duelDeck = 'a'",
    "reason": [
      "duel deck a refers to duelDeck = a;"
    ]
  },
  "1367": {
    "sql": "SELECT m.college\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nGROUP BY m.college\nORDER BY COUNT(mb.member_id) DESC\nLIMIT 1;",
    "question": "Which college do most of the members go to?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1",
    "reason": [
      "college most members go refers to MAX(COUNT(major.college))"
    ]
  },
  "1069": {
    "sql": "SELECT player_name, MIN(height) AS shortest_height FROM Player;",
    "question": "Which football player has the shortest height?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
    "reason": [
      "shortest height refers to MIN(height);"
    ]
  },
  "1262": {
    "sql": "SELECT COUNT(DISTINCT p.ID) AS PatientCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE e.\"ANA Pattern\" = 'P' AND l.C3 IS NOT NULL;",
    "question": "How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'",
    "reason": [
      "normal level of complement 3 refers to C3 > 35; have a P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'; Should compute the number of distinct ones"
    ]
  },
  "84": {
    "sql": "WITH combined_names AS (\n  SELECT AdmFName1 AS first_name, District FROM schools WHERE AdmFName1 IS NOT NULL\n  UNION ALL\n  SELECT AdmFName2 AS first_name, District FROM schools WHERE AdmFName2 IS NOT NULL\n  UNION ALL\n  SELECT AdmFName3 AS first_name, District FROM schools WHERE AdmFName3 IS NOT NULL\n)\nSELECT first_name, District, COUNT(*) AS name_count\nFROM combined_names\nGROUP BY first_name, District\nORDER BY name_count DESC\nLIMIT 2;",
    "question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1",
    "reason": []
  },
  "332": {
    "sql": "SELECT COUNT(DISTINCT molecule_id) \nFROM bond \nWHERE bond_type = '-' \nAND molecule_id BETWEEN 'TR004' AND 'TR010';",
    "question": "Among the molecules between TR004 to TR010, how many of them has single bonds?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'",
    "reason": [
      "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';"
    ]
  },
  "1295": {
    "sql": "SELECT COUNT(DISTINCT p.ID) AS PatientCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.`T-BIL` >= 2.0 AND e.`ANA Pattern` LIKE '%P%';",
    "question": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%'",
    "reason": [
      "total bilirubin is over the normal range refers to `T-BIL` > = 2.0; peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P';"
    ]
  },
  "661": {
    "sql": "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);",
    "question": "How old is the most influential user?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "reason": [
      "How old describes age; the most influential refers to user where MAX(Reputation);"
    ]
  },
  "471": {
    "sql": "SELECT s.type \nFROM sets s \nJOIN set_translations st ON s.code = st.setCode \nWHERE st.translation = 'Hauptset Zehnte Edition';",
    "question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "reason": [
      "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type"
    ]
  },
  "598": {
    "sql": "WITH \nbadges_2010 AS (\n    SELECT COUNT(*) AS count_2010\n    FROM badges\n    WHERE Name = 'Student' AND strftime('%Y', Date) = '2010'\n),\nbadges_2011 AS (\n    SELECT COUNT(*) AS count_2011\n    FROM badges\n    WHERE Name = 'Student' AND strftime('%Y', Date) = '2011'\n),\ntotal_badges_2010 AS (\n    SELECT COUNT(*) AS total_2010\n    FROM badges\n    WHERE strftime('%Y', Date) = '2010'\n),\ntotal_badges_2011 AS (\n    SELECT COUNT(*) AS total_2011\n    FROM badges\n    WHERE strftime('%Y', Date) = '2011'\n)\nSELECT \n    ((b2010.count_2010 * 100.0 / t2010.total_2010) - (b2011.count_2011 * 100.0 / t2011.total_2011)) AS percentage_difference\nFROM \n    badges_2010 b2010, \n    badges_2011 b2011, \n    total_badges_2010 t2010, \n    total_badges_2011 t2011;",
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
    "reason": [
      "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)"
    ]
  },
  "601": {
    "sql": "SELECT p.Score, pl.LinkTypeId FROM posts p LEFT JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395;",
    "question": "What is the score and the link type ID for post ID 395?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395",
    "reason": []
  },
  "1120": {
    "sql": "WITH player_ids AS (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name IN ('Daan Smith', 'Filipe Ferreira')\n),\naway_matches AS (\n    SELECT m.away_team_goal\n    FROM Match m\n    JOIN player_ids p ON \n        m.away_player_1 = p.player_api_id OR\n        m.away_player_2 = p.player_api_id OR\n        m.away_player_3 = p.player_api_id OR\n        m.away_player_4 = p.player_api_id OR\n        m.away_player_5 = p.player_api_id OR\n        m.away_player_6 = p.player_api_id OR\n        m.away_player_7 = p.player_api_id OR\n        m.away_player_8 = p.player_api_id OR\n        m.away_player_9 = p.player_api_id OR\n        m.away_player_10 = p.player_api_id OR\n        m.away_player_11 = p.player_api_id\n)\nSELECT SUM(away_team_goal) AS total_away_goals\nFROM away_matches;",
    "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
    "reason": [
      "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'"
    ]
  },
  "1186": {
    "sql": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Diagnosis LIKE '%Behcet%'\nAND e.`Examination Date` >= '1997-01-01'\nAND e.`Examination Date` <= '1997-12-31';",
    "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "reason": [
      "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'"
    ]
  },
  "1260": {
    "sql": "SELECT DISTINCT P.ID\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE CAST(L.RF AS REAL) < 20\nAND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 60;",
    "question": "Please list the ID of the patient whose RF is normal and who is older than 60.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60",
    "reason": [
      "RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;"
    ]
  },
  "1478": {
    "sql": "SELECT c.Segment, SUM(ym.Consumption) AS TotalConsumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;",
    "question": "Which segment had the least consumption?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "reason": []
  },
  "688": {
    "sql": "SELECT COUNT(*) \nFROM posts \nWHERE ViewCount > 35000 AND (CommentCount = 0 OR CommentCount IS NULL);",
    "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
    "reason": [
      "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;"
    ]
  },
  "768": {
    "sql": "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');",
    "question": "How many superheroes were published by Dark Horse Comics?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
    "reason": [
      "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
    ]
  },
  "372": {
    "sql": "SELECT COUNT(*) FROM cards WHERE toughness = '99';",
    "question": "How many cards are there with toughness of 99?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE toughness = 99",
    "reason": []
  },
  "82": {
    "sql": "SELECT f.\"Low Grade\", f.\"High Grade\"\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.Longitude = (SELECT MAX(Longitude) FROM schools);",
    "question": "What is the grade span offered in the school with the highest longitude?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1",
    "reason": [
      "the highest longitude refers to the school with the maximum absolute longitude value."
    ]
  },
  "1309": {
    "sql": "SELECT P.ID, L.PLT\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Diagnosis = 'MCTD'\nAND L.PLT > 100 AND L.PLT < 400;",
    "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
    "reason": [
      "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';"
    ]
  },
  "611": {
    "sql": "SELECT u.Reputation, u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Date = '2010-07-19 19:39:08.0';",
    "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "reason": [
      "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"
    ]
  },
  "1135": {
    "sql": "SELECT player_api_id\nFROM Player_Attributes\nWHERE preferred_foot = 'right'\nORDER BY potential ASC\nLIMIT 5;",
    "question": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5",
    "reason": [
      "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'"
    ]
  },
  "1178": {
    "sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` ASC LIMIT 1;",
    "question": "What was the gender of the first AORTITIS diagnosed patient?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "reason": [
      "gender means SEX; 'AORTITIS' refers to Diagnosis;"
    ]
  },
  "1205": {
    "sql": "SELECT \n    P.SEX,\n    L.UA,\n    CASE \n        WHEN P.SEX = 'M' AND L.UA > 8.0 THEN 'Normal'\n        WHEN P.SEX = 'F' AND L.UA > 6.5 THEN 'Normal'\n        ELSE 'Not Normal'\n    END AS UricAcidStatus\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.ID = 57266;",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "reason": [
      "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'"
    ]
  },
  "1169": {
    "sql": "WITH male_abnormal AS (\n    SELECT COUNT(DISTINCT L.ID) AS male_count\n    FROM Laboratory L\n    JOIN Patient P ON L.ID = P.ID\n    WHERE P.SEX = 'M' AND L.UA <= 8.0\n),\nfemale_abnormal AS (\n    SELECT COUNT(DISTINCT L.ID) AS female_count\n    FROM Laboratory L\n    JOIN Patient P ON L.ID = P.ID\n    WHERE P.SEX = 'F' AND L.UA <= 6.5\n)\nSELECT \n    male_count AS male_patients,\n    female_count AS female_patients,\n    CASE \n        WHEN female_count = 0 THEN NULL\n        ELSE ROUND(CAST(male_count AS REAL) / female_count, 2)\n    END AS male_to_female_ratio\nFROM male_abnormal, female_abnormal;",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "reason": [
      "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))"
    ]
  },
  "425": {
    "sql": "SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';",
    "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
    "reason": [
      "don't have multiple faces on a single card side is null"
    ]
  },
  "368": {
    "sql": "SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_borderless_cards FROM cards;",
    "question": "What is the percentage of borderless cards?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "reason": [
      "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100"
    ]
  },
  "1099": {
    "sql": "SELECT pa.preferred_foot \nFROM Player_Attributes pa \nJOIN Player p ON pa.player_api_id = p.player_api_id \nWHERE p.player_name = 'Abdou Diallo';",
    "question": "Which foot is preferred by Abdou Diallo?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "reason": [
      "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot"
    ]
  },
  "521": {
    "sql": "SELECT l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.frameVersion = '1997'\nAND c.artist = 'D. Alexander Gregory'\nAND (c.hasContentWarning = 1 OR c.flavorText LIKE '%Wizards of the Coast%')\nAND l.format = 'legacy';",
    "question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'",
    "reason": [
      "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status"
    ]
  },
  "386": {
    "sql": "SELECT COUNT(c.id) AS total_future_frame_cards, l.status AS legality_status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.frameVersion = 'future'\nGROUP BY l.status;",
    "question": "How many cards are having future frame version and what are the legality status of these cards?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
    "reason": [
      "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';"
    ]
  },
  "741": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nGROUP BY s.superhero_name\nORDER BY COUNT(hp.power_id) DESC\nLIMIT 1;",
    "question": "What is the name of the superhero that has the most powers?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
    "reason": [
      "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))"
    ]
  },
  "525": {
    "sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted');",
    "question": "Find the uuid of cards in which the old school format is restricted or banned.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
    "reason": [
      "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'"
    ]
  },
  "1291": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M' \nAND L.ALB > 3.5 AND L.ALB < 5.5 \nAND L.TP BETWEEN 6.0 AND 8.5;",
    "question": "How many male patients have a normal level of both albumin and total protein?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5",
    "reason": [
      "male refers to Sex = 'M'; normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5;"
    ]
  },
  "473": {
    "sql": "SELECT s.isForeignOnly \nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Adarkar Valkyrie';",
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
    "reason": [
      "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;"
    ]
  },
  "396": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE frameVersion = '1993' \nAND (hasNonFoil = 1 OR hasFoil = 1) \nAND hasContentWarning = 1;",
    "question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1",
    "reason": [
      "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion"
    ]
  },
  "1171": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS UnderagePatientsExamined\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'\nAND (strftime('%Y', E.`Examination Date`) - strftime('%Y', P.Birthday) - \n    (strftime('%m-%d', E.`Examination Date`) < strftime('%m-%d', P.Birthday))) < 18;",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
    "reason": [
      "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'"
    ]
  },
  "1201": {
    "sql": "SELECT (SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_women\nFROM Patient\nWHERE YEAR(Birthday) = '1980' AND Diagnosis = 'RA';",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
    "reason": [
      "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100"
    ]
  },
  "1034": {
    "sql": "WITH AvgRating2010 AS (\n    SELECT AVG(overall_rating) AS avg_rating\n    FROM Player_Attributes\n    WHERE strftime('%Y', date) = '2010'\n),\nAboveAveragePlayers AS (\n    SELECT player_api_id, overall_rating\n    FROM Player_Attributes\n    WHERE strftime('%Y', date) = '2010'\n    AND overall_rating > (SELECT avg_rating FROM AvgRating2010)\n),\nMaxAboveAverage AS (\n    SELECT MAX(overall_rating) AS max_rating\n    FROM AboveAveragePlayers\n)\nSELECT player_api_id\nFROM AboveAveragePlayers\nWHERE overall_rating = (SELECT max_rating FROM MaxAboveAverage);",
    "question": "List the players' api id who had the highest above average overall ratings in 2010.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
    "reason": [
      "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';"
    ]
  },
  "1302": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS PatientCount\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nJOIN Examination E ON P.ID = E.ID\nWHERE L.CPK < 250\nAND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
    "reason": [
      "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;"
    ]
  },
  "568": {
    "sql": "SELECT u.DisplayName\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.Id = 6347;",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "reason": [
      "vote no. 6347 refers to Id = '6347'"
    ]
  },
  "99": {
    "sql": "SELECT a.account_id, a.date AS account_opening_date, l.amount AS approved_loan_amount\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.duration > 12\nAND strftime('%Y', a.date) = '1993'\nORDER BY l.amount DESC\nLIMIT 1;",
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
    "reason": [
      "Loan validity more than 12 months refers to duration > 12"
    ]
  },
  "237": {
    "sql": "SELECT m.molecule_id, m.label,\n       CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS carcinogenic_status\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_10';",
    "question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
    "reason": [
      "TR001_10 is the atom id; label = '+' mean molecules are carcinogenic"
    ]
  },
  "284": {
    "sql": "SELECT b.bond_type, COUNT(*) AS count\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a1.element = 'c' OR a2.element = 'c'\nGROUP BY b.bond_type;",
    "question": "Determine the bond type that is formed in the chemical compound containing element Carbon.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'",
    "reason": [
      "Carbon refers to element = 'c'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
    ]
  },
  "1055": {
    "sql": "SELECT p.birthday\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
    "question": "When is the birthday of the football player who has the highest overall rating?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "reason": [
      "football player who has the highest overall rating refers to MAX(overall_rating);"
    ]
  },
  "152": {
    "sql": "SELECT AVG(d.A15) AS average_crimes_1995\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE d.A15 > 4000\nAND a.date >= '1997-01-01';",
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
    "reason": [
      "A3 refers to region names; A15 stands for the average number of crimes commited in 1995."
    ]
  },
  "175": {
    "sql": "SELECT COUNT(DISTINCT a.account_id) AS account_count\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nWHERE d.type = 'OWNER' AND a.frequency = 'POPLATEK PO OBRATU';",
    "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
    "reason": [
      "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction"
    ]
  },
  "179": {
    "sql": "SELECT SUM(t.amount) AS total_payment\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN trans t ON d.account_id = t.account_id\nWHERE c.client_id = 617\nAND strftime('%Y', t.date) = '1998';",
    "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
    "reason": []
  },
  "1336": {
    "sql": "SELECT DISTINCT m.department\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.last_name IN ('Pierce', 'Guidi');",
    "question": "What department offers the major that Pierce and Guidi took?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
    "reason": []
  },
  "546": {
    "sql": "SELECT DISTINCT u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.ClosedDate IS NOT NULL;",
    "question": "Please list the display names of all the users who owns a post that is well-finished.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL",
    "reason": [
      "the post that is well-finished refers to ClosedDate IS NOT Null"
    ]
  },
  "960": {
    "sql": "SELECT AVG(CAST(fastestLapSpeed AS REAL)) AS average_fastest_lap_speed\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "reason": [
      "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);"
    ]
  },
  "1531": {
    "sql": "WITH customer_spending AS (\n    SELECT \n        CustomerID,\n        SUM(Price * Amount) AS total_spending\n    FROM \n        transactions_1k\n    GROUP BY \n        CustomerID\n    ORDER BY \n        total_spending DESC\n    LIMIT 1\n),\naverage_price AS (\n    SELECT \n        t.CustomerID,\n        SUM(t.Price) / SUM(t.Amount) AS avg_price_per_item\n    FROM \n        transactions_1k t\n    JOIN \n        customer_spending cs ON t.CustomerID = cs.CustomerID\n    GROUP BY \n        t.CustomerID\n)\nSELECT \n    c.CustomerID,\n    cs.total_spending,\n    ap.avg_price_per_item,\n    c.Currency\nFROM \n    customer_spending cs\nJOIN \n    average_price ap ON cs.CustomerID = ap.CustomerID\nJOIN \n    customers c ON cs.CustomerID = c.CustomerID;",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
    "reason": [
      "average price per single item = Total(price) / Total(amount)"
    ]
  },
  "538": {
    "sql": "SELECT p.Title \nFROM posts p \nJOIN users u ON p.OwnerUserId = u.Id \nWHERE u.DisplayName = 'csgillespie';",
    "question": "Please list the titles of the posts owned by the user csgillespie?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user"
    ]
  },
  "279": {
    "sql": "SELECT m.label\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_id = 'TR001_10_11';",
    "question": "What is the label for bond ID TR001_10_11?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "1087": {
    "sql": "SELECT COUNT(DISTINCT p.player_api_id) \nFROM Player p \nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id \nWHERE p.height > 180 AND pa.volleys > 70;",
    "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
    "reason": [
      "height > 180; volley score refers to volleys; volleys > 70;"
    ]
  },
  "1476": {
    "sql": "SELECT \n    (SELECT SUM(ym.Consumption) \n     FROM yearmonth ym \n     JOIN customers c ON ym.CustomerID = c.CustomerID \n     WHERE c.Currency = 'CZK' AND ym.Date LIKE '2012%') -\n    (SELECT SUM(ym.Consumption) \n     FROM yearmonth ym \n     JOIN customers c ON ym.CustomerID = c.CustomerID \n     WHERE c.Currency = 'EUR' AND ym.Date LIKE '2012%') AS ConsumptionDifference;",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
    "reason": [
      "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012"
    ]
  },
  "142": {
    "sql": "SELECT DISTINCT o.account_id\nFROM `order` o\nJOIN account a ON o.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE o.k_symbol = 'SIPO' AND d.A2 = 'Pisek';",
    "question": "Which accounts placed orders for household payment in Pisek?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
    "reason": [
      "k_symbol = 'SIPO' refers to household payment"
    ]
  },
  "182": {
    "sql": "SELECT COUNT(DISTINCT c.client_id) AS male_customers_count\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN trans t ON a.account_id = t.account_id\nWHERE c.gender = 'M'\n  AND strftime('%Y', c.birth_date) BETWEEN '1974' AND '1976'\n  AND t.k_symbol = 'SIPO'\n  AND t.amount > 4000;",
    "question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
    "reason": [
      "Man and male refers to gender = 'M'; 'SIPO' stands for household payment"
    ]
  },
  "826": {
    "sql": "SELECT s.superhero_name, s.weight_kg\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'DC Comics'\nAND s.weight_kg = (SELECT MAX(weight_kg) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics'));",
    "question": "Identify the heaviest superhero in DC Comics.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "reason": [
      "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;"
    ]
  },
  "1091": {
    "sql": "SELECT COUNT(*) AS number_of_matches\nFROM \"Match\"\nWHERE league_id = (SELECT id FROM \"League\" WHERE name = 'Belgium Jupiler League')\nAND date LIKE '2009-04-%';",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
    "reason": [
      "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);"
    ]
  },
  "362": {
    "sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Condemn';",
    "question": "What is the description about the ruling of card \"Condemn\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "reason": [
      "Ancestor's Chosen' is the name of card; description about the ruling refers to text;"
    ]
  },
  "844": {
    "sql": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.superhero_name = 'Blackwulf';",
    "question": "Give the eye colour of Blackwulf.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "reason": [
      "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';"
    ]
  },
  "756": {
    "sql": "SELECT COUNT(*) AS bad_superheroes_count\nFROM superhero\nWHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');",
    "question": "How many bad superheroes are there?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
    "reason": [
      "bad superheroes refers to alignment_id = Bad"
    ]
  },
  "897": {
    "sql": "SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, MAX(ds.points) AS max_points\nFROM drivers d\nJOIN driverStandings ds ON d.driverId = ds.driverId\nWHERE ds.wins = (SELECT MAX(wins) FROM driverStandings)\nGROUP BY d.driverId, d.forename, d.surname, d.nationality\nLIMIT 1;",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "reason": [
      "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);"
    ]
  },
  "1326": {
    "sql": "SELECT COUNT(*) \nFROM member \nJOIN major ON member.link_to_major = major.major_id \nWHERE major.major_name = 'Environmental Engineering';",
    "question": "How many members of the Student_Club have majored Environmental Engineering?\n",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
    "reason": [
      "'Environmental Engineering' is the major name"
    ]
  },
  "183": {
    "sql": "SELECT COUNT(*) AS account_count\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE district.A2 = 'Beroun' AND strftime('%Y', account.date) > '1996';",
    "question": "How many accounts in Beroun were opened after 1996?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
    "reason": []
  },
  "92": {
    "sql": "SELECT COUNT(DISTINCT d.district_id) AS number_of_districts\nFROM district d\nJOIN client c ON d.district_id = c.district_id\nWHERE c.gender = 'F' AND d.A11 > 6000 AND d.A11 < 10000;",
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
    "reason": [
      "A11 refers to average salary; Female mapps to gender = 'F'"
    ]
  },
  "1172": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE P.SEX = 'M' AND L.`T-BIL` >= 2.0;",
    "question": "How many male patients have elevated total bilirubin count?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'",
    "reason": [
      "male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` >= '2.0'"
    ]
  },
  "1469": {
    "sql": "SELECT m.first_name, m.last_name, m.position\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND m.zip = 28092;",
    "question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
    "reason": [
      "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'"
    ]
  },
  "998": {
    "sql": "SELECT wins FROM driverStandings WHERE driverId = (SELECT driverId FROM driverStandings ORDER BY points DESC LIMIT 1 OFFSET 90);",
    "question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
    "reason": [
      "victories refer to wins; 91st refers to points\n\n"
    ]
  },
  "1287": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS NumberOfPatients\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Admission = '-' AND L.ALP < 300;",
    "question": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'",
    "reason": [
      "followed at the outpatient clinic refers to Admission = '-'; normal level of alkaliphophatase refers to ALP < 300;"
    ]
  },
  "1524": {
    "sql": "SELECT g.Country AS Nationality\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24' AND t.Price = 548.4;",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
    "reason": [
      "'2012/8/24' can be represented by '2012-08-24'"
    ]
  },
  "1421": {
    "sql": "SELECT (COUNT(CASE WHEN m.major_name = 'Business' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_business_majors\nFROM member\nLEFT JOIN major m ON member.link_to_major = m.major_id;",
    "question": "Calculate the percentage of members who are major Business in the list?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
    "reason": [
      "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100"
    ]
  },
  "802": {
    "sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
    "question": "Who is the tallest superhero?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "reason": [
      "who refers to superhero_name; tallest superhero refers to MAX(height_cm);"
    ]
  },
  "1130": {
    "sql": "SELECT t.team_short_name\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE ta.chanceCreationPassingClass = 'Safe';",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "reason": [
      "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name"
    ]
  },
  "655": {
    "sql": "SELECT p.Title, pl.LinkTypeId\nFROM postLinks pl\nJOIN posts p ON pl.RelatedPostId = p.Id\nWHERE pl.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?');",
    "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'",
    "reason": [
      "Title = 'What are principal component scores?';"
    ]
  },
  "151": {
    "sql": "SELECT DISTINCT d.A2 AS district_name\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.type = 'VYDAJ';",
    "question": "Please list the name of the districts with accounts that made withdrawal transactions.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
    "reason": [
      "A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions"
    ]
  },
  "1256": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.CRP = '+' AND P.Description IS NULL;",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
    "reason": [
      "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;"
    ]
  },
  "350": {
    "sql": "SELECT DISTINCT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Annul' AND c.number = '29';",
    "question": "State the alternative languages available for card named Annul numbered 29.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
    "reason": [
      "annul refers to name = 'annul'; numbered 29 refers to number = '29';"
    ]
  },
  "120": {
    "sql": "SELECT a.account_id, a.frequency\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A3 = 'east Bohemia'\nAND a.date BETWEEN '1995-01-01' AND '2000-12-31';",
    "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "reason": [
      "Accounts holder refers to the person who own this account."
    ]
  },
  "315": {
    "sql": "SELECT DISTINCT m.molecule_id, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE LOWER(a.element) = 'cl' AND m.label = '+';",
    "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic;"
    ]
  },
  "466": {
    "sql": "SELECT COUNT(*) \nFROM cards \nWHERE setCode = (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition') \nAND artist = 'Adam Rex';",
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
    "reason": [
      "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'"
    ]
  },
  "1523": {
    "sql": "SELECT g.Country \nFROM transactions_1k t \nJOIN gasstations g ON t.GasStationID = g.GasStationID \nWHERE t.CardID = 667467;",
    "question": "Which country was the card owner of No.667467 in?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
    "reason": []
  },
  "393": {
    "sql": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL;",
    "question": "On how many cards designed by John Avon is its foil non-powerful?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'",
    "reason": [
      "John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL \n"
    ]
  },
  "1425": {
    "sql": "SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education';",
    "question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'",
    "reason": []
  },
  "1236": {
    "sql": "SELECT P.ID, P.SEX, P.Birthday, \n       (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age,\n       L.RBC, P.Admission\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'F'\n  AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50\n  AND (L.RBC <= 3.5 OR L.RBC >= 6.0);",
    "question": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50",
    "reason": [
      "female patient refers to Sex = 'F'; age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50; abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0; Admission = '+' means the patient was admitted to the hospital; Admission = '-' means the patient was not admitted to the hospital;"
    ]
  },
  "109": {
    "sql": "SELECT COUNT(DISTINCT c.client_id) AS female_clients_in_jesenik\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN district di ON a.district_id = di.district_id\nWHERE di.A2 = 'Jesenik' AND c.gender = 'F';",
    "question": "How many clients opened their accounts in Jesenik branch were women?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
    "reason": [
      "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'"
    ]
  },
  "1298": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS PatientCount\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nJOIN Examination E ON P.ID = E.ID\nWHERE L.`T-CHO` < 250 AND E.`ANA Pattern` = 'P';",
    "question": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250",
    "reason": [
      "total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';"
    ]
  },
  "38": {
    "sql": "SELECT s.Website\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE s.County = 'Los Angeles'\nAND sc.NumTstTakr BETWEEN 2000 AND 3000;",
    "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'",
    "reason": []
  },
  "1453": {
    "sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'Parking'\nAND b.spent < (SELECT AVG(spent) FROM budget WHERE category = 'Parking');",
    "question": "List the name of events with less than average parking cost.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "reason": [
      "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'"
    ]
  },
  "1064": {
    "sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.preferred_foot = 'left';",
    "question": "List out of players whose preferred foot is left.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
    "reason": [
      "preferred_foot = 'left';"
    ]
  },
  "641": {
    "sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers\nFROM badges\nWHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014';",
    "question": "How many users received commentator badges in 2014?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
    "reason": [
      "Commentator is the name of the badge; year(Date) = 2014;"
    ]
  },
  "451": {
    "sql": "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3';",
    "question": "How many cards available in paper have a positive starting maximum hand size?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards",
    "reason": [
      "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '3'"
    ]
  },
  "293": {
    "sql": "SELECT COUNT(*) AS atom_count\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+';",
    "question": "How many atoms belong to the molecule labeled with carcinogenic compounds?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic;"
    ]
  },
  "954": {
    "sql": "SELECT \n    (COUNT(CASE WHEN r.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS race_completion_percentage\nFROM \n    results r\nJOIN \n    drivers d ON r.driverId = d.driverId\nJOIN \n    races rc ON r.raceId = rc.raceId\nWHERE \n    d.nationality = 'Japanese'\n    AND rc.year BETWEEN 2007 AND 2009;",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "reason": [
      "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; "
    ]
  },
  "961": {
    "sql": "SELECT r.name AS race_name, r.year\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.milliseconds IS NOT NULL\nORDER BY res.milliseconds ASC\nLIMIT 1;",
    "question": "Which race has the shortest actual finishing time? Please give the name and year.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1",
    "reason": [
      "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;"
    ]
  },
  "1515": {
    "sql": "SELECT c.Segment\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "reason": [
      "'2012/8/23' can be represented by '2012-08-23'"
    ]
  },
  "415": {
    "sql": "SELECT (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'commander' AND l.status = 'legal';",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "reason": [
      "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';"
    ]
  }
}