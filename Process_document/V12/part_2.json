{
  "630": {
    "sql": "SELECT DISTINCT p.Tags\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'John Salvatier';",
    "question": "What is the name of tags used by John Salvatier's?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "reason": [
      "DisplayName = 'John Salvatier';"
    ]
  },
  "1046": {
    "sql": "SELECT ta.buildUpPlayPositioningClass \nFROM Team_Attributes ta \nJOIN Team t ON ta.team_api_id = t.team_api_id \nWHERE t.team_long_name = 'ADO Den Haag';",
    "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "reason": [
      "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;"
    ]
  },
  "1325": {
    "sql": "SELECT expense_description, MAX(cost) AS most_expensive_cost FROM expense WHERE expense_description LIKE '%club event%' OR expense_description LIKE '%support of club%';",
    "question": "What is the most expensive item that was spent in support of club events?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
    "reason": [
      "item in support of club events refers to expense_description; most expensive refers to MAX(cost)"
    ]
  },
  "1353": {
    "sql": "SELECT z.type \nFROM member m \nJOIN zip_code z ON m.zip = z.zip_code \nWHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';",
    "question": "What's Christof Nielson's zip code type?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
    "reason": []
  },
  "893": {
    "sql": "SELECT d.forename || ' ' || d.surname AS driver_name, ds.points\nFROM driverStandings ds\nJOIN drivers d ON ds.driverId = d.driverId\nJOIN races r ON ds.raceId = r.raceId\nWHERE r.year = 2017 AND r.name = 'Chinese Grand Prix'\nORDER BY ds.points DESC\nLIMIT 3;",
    "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
    "reason": []
  },
  "481": {
    "sql": "SELECT DISTINCT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.flavorText IS NOT NULL;",
    "question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL",
    "reason": [
      "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null"
    ]
  },
  "1422": {
    "sql": "SELECT DISTINCT type FROM event WHERE location = 'MU 215';",
    "question": "State the category of events were held at MU 215.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "reason": [
      "'MU 215' is the location of event; "
    ]
  },
  "401": {
    "sql": "SELECT \n    (COUNT(CASE WHEN isOnlineOnly = 1 AND frameEffects = 'legendary' THEN 1 END) * 100.0 / \n    COUNT(CASE WHEN frameEffects = 'legendary' THEN 1 END)) AS percentage\nFROM \n    cards\nWHERE \n    frameEffects = 'legendary';",
    "question": "What percentage of legendary frame effect cards that are only available in online game variations?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
    "reason": [
      "only available in online game variationsrefer to isOnlineOnly =1 ; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(isOnlineOnly=1), COUNT(id)) from cards where frameEffects = 'legendary'"
    ]
  },
  "357": {
    "sql": "SELECT promoTypes FROM cards WHERE name = 'Duress';",
    "question": "What type of promotion is of card 'Duress'?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "reason": [
      "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;"
    ]
  },
  "468": {
    "sql": "SELECT st.translation\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.name = 'Eighth Edition' AND st.language = 'Chinese Simplified';",
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
    "reason": [
      "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation"
    ]
  },
  "1491": {
    "sql": "SELECT g.Country, COUNT(DISTINCT g.GasStationID) AS ValueForMoneyGasStations\nFROM gasstations g\nJOIN transactions_1k t ON g.GasStationID = t.GasStationID\nGROUP BY g.Country\nHAVING AVG(t.Price / t.Amount) < (SELECT AVG(Price / Amount) FROM transactions_1k)\nORDER BY ValueForMoneyGasStations DESC;",
    "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
    "reason": []
  },
  "1360": {
    "sql": "SELECT \n    (b1.amount * 100.0 / SUM(b2.amount)) AS percentage\nFROM \n    event e\nJOIN \n    budget b1 ON e.event_id = b1.link_to_event\nJOIN \n    budget b2 ON e.event_id = b2.link_to_event\nWHERE \n    e.event_name = 'November Speaker' AND b1.category = 'Parking'\nGROUP BY \n    b1.amount;",
    "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
    "reason": [
      "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100"
    ]
  },
  "957": {
    "sql": "SELECT COUNT(DISTINCT d.driverId) AS italian_drivers_not_finished\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE d.nationality = 'Italian' AND r.time IS NULL;",
    "question": "How many Italian drivers haven't finished the race?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
    "reason": [
      "haven't finished the race refers to time is null;"
    ]
  },
  "952": {
    "sql": "SELECT DISTINCT c.name \nFROM constructors c \nJOIN constructorStandings cs ON c.constructorId = cs.constructorId \nWHERE cs.position = 1;",
    "question": "Which constructors have been ranked 1?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
    "reason": []
  },
  "459": {
    "sql": "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC;",
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
    "reason": [
      "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater"
    ]
  },
  "1471": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') * 1.0 / \n    (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS ratio_EUR_to_CZK;",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
    "reason": [
      "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK')."
    ]
  },
  "640": {
    "sql": "SELECT \n    (SELECT COALESCE(SUM(p.ViewCount), 0) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mornington') -\n    (SELECT COALESCE(SUM(p.ViewCount), 0) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Amos') AS ViewCountDifference;",
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
    "reason": [
      "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));"
    ]
  },
  "935": {
    "sql": "SELECT COUNT(DISTINCT driverId) \nFROM results \nWHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') \nAND time IS NOT NULL;",
    "question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
    "reason": [
      "managed to finish the race refers to time is not null"
    ]
  },
  "25": {
    "sql": "SELECT s.School, s.FundingType\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE s.County = 'Riverside' AND sat.AvgScrMath > 400;",
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
    "reason": [
      "Average of average math = sum(average math scores) / count(schools)."
    ]
  },
  "107": {
    "sql": "WITH highest_salary_district AS (\n    SELECT district_id\n    FROM district\n    ORDER BY A11 DESC\n    LIMIT 1\n),\naccounts_in_district AS (\n    SELECT account_id\n    FROM account\n    WHERE district_id = (SELECT district_id FROM highest_salary_district)\n),\nclient_accounts AS (\n    SELECT client_id\n    FROM disp\n    WHERE account_id IN (SELECT account_id FROM accounts_in_district) AND type = 'OWNER'\n),\noldest_client AS (\n    SELECT client_id, gender\n    FROM client\n    WHERE client_id IN (SELECT client_id FROM client_accounts)\n    ORDER BY birth_date ASC\n    LIMIT 1\n)\nSELECT gender\nFROM oldest_client;",
    "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1",
    "reason": [
      "Earlier birthdate refers to older age; A11 refers to average salary"
    ]
  },
  "163": {
    "sql": "SELECT d.A2 AS district_name, COUNT(a.account_id) AS account_count\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.status = 'A'\nGROUP BY d.A2\nORDER BY account_count DESC\nLIMIT 1;",
    "question": "Which district has the most accounts with loan contracts finished with no problems?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
    "reason": [
      "status = 'A' refers to loan contracts finished with no problems"
    ]
  },
  "964": {
    "sql": "SELECT code FROM drivers WHERE nationality = 'America';",
    "question": "List out the code for drivers who have nationality in America.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "reason": [
      "nationality = 'America'"
    ]
  },
  "517": {
    "sql": "SELECT COUNT(DISTINCT c.uuid)\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.name = 'Abundance'\n  AND c.rarity = 'rare'\n  AND c.types LIKE '%Enchantment%'\nGROUP BY c.uuid\nHAVING SUM(CASE WHEN l.status != 'Legal' THEN 1 ELSE 0 END) = 0;",
    "question": "How many rare enchantment Abundance cards are there whose play format status are all legal?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
    "reason": [
      "rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'"
    ]
  },
  "1227": {
    "sql": "SELECT AVG(strftime('%Y', 'now') - strftime('%Y', Birthday)) AS average_age\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M' AND Laboratory.\"T-CHO\" >= 250;",
    "question": "What is the average age of the male patient with high cholesterol?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
    "reason": [
      "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;"
    ]
  },
  "72": {
    "sql": "SELECT f.\"Enrollment (Ages 5-17)\" \nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.EdOpsCode = 'SSS' \nAND s.City = 'Fremont' \nAND f.\"Academic Year\" = '2014-2015';",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "reason": [
      "State Special School means EdOpsCode = 'SSS'"
    ]
  },
  "277": {
    "sql": "SELECT a1.element AS element1, a2.element AS element2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR000_1_2';",
    "question": "What are the toxicology elements associated with bond ID TR000_1_2?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'",
    "reason": [
      "TR000_1_2 is the bond id;"
    ]
  },
  "1245": {
    "sql": "SELECT COUNT(*) \nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.`Examination Date` > '1997-01-01'\nAND l.APTT >= 45;",
    "question": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45",
    "reason": [
      "examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'; normal activated partial prothrom bin time refesr to APTT < 45;"
    ]
  },
  "345": {
    "sql": "SELECT c.name, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.types LIKE '%Artifact%'\nAND c.side IS NULL\nAND l.format = 'vintage';",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "reason": [
      "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';"
    ]
  },
  "388": {
    "sql": "SELECT c.name, st.language\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.setCode = '10E' AND c.convertedManaCost = 5;",
    "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
    "reason": [
      "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;"
    ]
  },
  "950": {
    "sql": "SELECT c.name \nFROM constructors c \nJOIN constructorResults cr ON c.constructorId = cr.constructorId \nWHERE cr.raceId = 291 AND cr.points = 0;",
    "question": "Please list the constructor names with 0 points at race 291.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
    "reason": [
      "race at 291 refers to raceID = 291;"
    ]
  },
  "1220": {
    "sql": "SELECT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.UN = 29;",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
    "reason": [
      "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; "
    ]
  },
  "1017": {
    "sql": "SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN results res ON r.raceId = res.raceId WHERE res.fastestLapTime = '1:29.488';",
    "error": "something went wrong, tool did not call.",
    "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
    "reason": [
      "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)"
    ]
  },
  "1090": {
    "sql": "SELECT pa.long_passing\nFROM Player_Attributes pa\nJOIN (\n    SELECT player_api_id\n    FROM Player\n    ORDER BY birthday ASC\n    LIMIT 1\n) p ON pa.player_api_id = p.player_api_id\nORDER BY pa.date DESC\nLIMIT 1;",
    "question": "What is the long passing score of the oldest player?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1",
    "reason": [
      "long passing score refers to long_passing; oldest player refers to oldest birthday;"
    ]
  },
  "608": {
    "sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';",
    "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
    "reason": [
      "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'"
    ]
  },
  "209": {
    "sql": "SELECT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'cl'\nGROUP BY b.bond_type;",
    "question": "Chlorine is in what type of bond?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'",
    "reason": [
      "type of bond refers to bond_type; chlorine refers to element = 'cl'"
    ]
  },
  "1200": {
    "sql": "SELECT \n    (COUNT(DISTINCT CASE WHEN p.Diagnosis LIKE '%SLE%' THEN e.ID END) * 100.0 / \n    COUNT(DISTINCT CASE WHEN e.Symptoms LIKE '%thrombocytopenia%' THEN e.ID END)) AS proportion\nFROM \n    Examination e\nJOIN \n    Patient p ON e.ID = p.ID\nWHERE \n    e.Symptoms LIKE '%thrombocytopenia%';",
    "question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'",
    "reason": [
      "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100"
    ]
  },
  "1269": {
    "sql": "SELECT DISTINCT e.ID\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE e.`Examination Date` > '1997-01-01'\nAND e.SC170 IN ('negative', '0');",
    "question": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01",
    "reason": [
      "examination done after 1997/1/1 refers to `Examination Date` >  1997-01-01; normal anti-scl70 refers to SC170 IN('negative','0');"
    ]
  },
  "766": {
    "sql": "SELECT s.full_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'strength'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "reason": [
      "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';"
    ]
  },
  "898": {
    "sql": "SELECT forename, surname, (strftime('%Y', 'now') - strftime('%Y', dob)) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "reason": [
      "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);"
    ]
  },
  "1043": {
    "sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';",
    "question": "What is the short name of the football team Queens Park Rangers?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "reason": [
      "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';"
    ]
  },
  "325": {
    "sql": "SELECT COUNT(DISTINCT m.molecule_id) \nFROM molecule m \nJOIN atom a ON m.molecule_id = a.molecule_id \nWHERE m.label = '+' AND a.element = 'n';",
    "question": "How many carcinogenic molecules that consisted of Nitrogen?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'",
    "reason": [
      "nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;"
    ]
  },
  "668": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN (\n    SELECT UserId, COUNT(*) AS badge_count\n    FROM badges\n    GROUP BY UserId\n) b ON u.Id = b.UserId\nORDER BY b.badge_count DESC\nLIMIT 1;",
    "question": "What is the display name of the user who acquired the highest amount of badges?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "reason": [
      "highest amount of badges refers to MAX(COUNT(Name));"
    ]
  },
  "275": {
    "sql": "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = ' = ';",
    "question": "Give me the molecule ID of the double bond type.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
    "reason": [
      "double bond refers to bond_type = ' = ';"
    ]
  },
  "1330": {
    "sql": "SELECT m.college\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Tyler' AND mb.last_name = 'Hewitt';",
    "question": "What college offers the major that Tyler Hewitt took?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
    "reason": []
  },
  "303": {
    "sql": "SELECT \n    COUNT(b.bond_id) AS double_bond_count,\n    m.label AS is_carcinogenic\nFROM \n    bond b\nJOIN \n    molecule m ON b.molecule_id = m.molecule_id\nWHERE \n    b.molecule_id = 'TR006' AND b.bond_type = ' = ';\nGROUP BY \n    m.label;",
    "question": "How many double bonds does TR006 have and is it carcinogenic?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label",
    "reason": [
      "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';"
    ]
  },
  "1051": {
    "sql": "SELECT p.player_name, pa.potential\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);",
    "question": "List all the football player with the highest potential score.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes) ",
    "reason": [
      "potential score refers to potential; highest potential score refers to MAX(potential);"
    ]
  },
  "326": {
    "sql": "SELECT DISTINCT m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 's' AND b.bond_type = ' = ';",
    "question": "Which molecule consisted of Sulphur atom with double bond?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
    "reason": [
      "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';"
    ]
  },
  "971": {
    "sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;",
    "question": "Please state the reference name of the oldest German driver.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "reason": [
      "oldest refers to MIN(year(dob)); reference names appear in drverRef."
    ]
  },
  "314": {
    "sql": "SELECT COUNT(*) AS single_bond_count FROM bond WHERE bond_type = '-';",
    "question": "How many single bonds are there in the list?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'",
    "reason": [
      "single bond refers to bond_type = '-';"
    ]
  },
  "1458": {
    "sql": "WITH total_members AS (\n    SELECT COUNT(*) AS total FROM member\n),\nnew_jersey_members AS (\n    SELECT COUNT(*) AS nj_count\n    FROM member\n    JOIN zip_code ON member.zip = zip_code.zip_code\n    WHERE zip_code.short_state = 'NJ'\n),\nvermont_members AS (\n    SELECT COUNT(*) AS vt_count\n    FROM member\n    JOIN zip_code ON member.zip = zip_code.zip_code\n    WHERE zip_code.short_state = 'VT'\n)\nSELECT \n    ((nj_count * 100.0 / total) - (vt_count * 100.0 / total)) AS percentage_difference\nFROM total_members, new_jersey_members, vermont_members;",
    "question": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
    "reason": [
      "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )"
    ]
  },
  "699": {
    "sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';",
    "question": "When did the user known as 'IrishStat' create his or her account?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "reason": [
      "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;"
    ]
  },
  "799": {
    "sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;",
    "question": "How many superheroes didn't have any publisher?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1",
    "reason": [
      "didn't have any publisher refers to publisher.id = 1;"
    ]
  },
  "285": {
    "sql": "SELECT a1.element AS element1, a2.element AS element2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR001_10_11';",
    "question": "Name chemical elements that form a bond TR001_10_11.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
    "reason": [
      "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)"
    ]
  },
  "307": {
    "sql": "SELECT a1.element AS element1, a2.element AS element2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR000_2_3';",
    "question": "Name the atoms' elements that form bond TR000_2_3.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'",
    "reason": [
      "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "937": {
    "sql": "SELECT r.time AS finish_time\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nWHERE rc.year = 2008 AND rc.name = 'Chinese Grand Prix' AND r.positionOrder = 2;",
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
    "reason": [
      "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';"
    ]
  },
  "1417": {
    "sql": "SELECT DISTINCT e.type\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.remaining > 30;",
    "question": "List out the type of events which have remaining budget more than 30 USD.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30",
    "reason": [
      "remaining budget more than 30 USD refers to remaining > 30"
    ]
  },
  "1063": {
    "sql": "SELECT p.player_name, pa.potential\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Aaron Doran';",
    "question": "What is Aaron Doran's potential score?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "reason": [
      "potential score refers to potential;"
    ]
  },
  "330": {
    "sql": "SELECT (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage\nFROM molecule m\nJOIN atom a1 ON m.molecule_id = a1.molecule_id\nJOIN connected c ON a1.atom_id = c.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a1.element = 'h' AND b.bond_type = '#';",
    "question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'",
    "reason": [
      "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';"
    ]
  },
  "969": {
    "sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) = '1980';",
    "question": "How many British drivers who were born in 1980?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
    "reason": [
      "born in 1980 refers to year(dob) = 1980;"
    ]
  },
  "1436": {
    "sql": "SELECT DISTINCT a.link_to_event\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nJOIN attendance a ON m.member_id = a.link_to_member\nWHERE e.cost > 50;",
    "question": "Please provide links to events for members who have paid more than 50 dollar.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
    "reason": [
      "have paid more than 50 dollar refers to cost > 50"
    ]
  },
  "252": {
    "sql": "SELECT a2.atom_id, a2.element\nFROM atom a1\nJOIN connected c ON a1.atom_id = c.atom_id OR a1.atom_id = c.atom_id2\nJOIN atom a2 ON (a2.atom_id = c.atom_id OR a2.atom_id = c.atom_id2) AND a2.atom_id != a1.atom_id\nWHERE a1.element = 'pb';",
    "question": "What are the atoms that can bond with the atom that has the element lead?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
    "reason": [
      "atom that has the element lead refers to atom_id where element = 'pb'"
    ]
  },
  "290": {
    "sql": "SELECT DISTINCT a.element \nFROM atom a \nJOIN molecule m ON a.molecule_id = m.molecule_id \nWHERE m.label = 'TR151' \nAND a.element IN ('cl', 'br', 'f', 'i', 'pb', 'sn', 'te', 'hg');",
    "question": "Which toxic element can be found in the molecule TR151?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
    "reason": [
      "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
    ]
  },
  "962": {
    "sql": "WITH drivers_2000_2005 AS (\n    SELECT DISTINCT d.driverId, d.dob\n    FROM drivers d\n    JOIN results r ON d.driverId = r.driverId\n    JOIN races rc ON r.raceId = rc.raceId\n    WHERE rc.year BETWEEN 2000 AND 2005\n),\ndrivers_before_1985_over_50_laps AS (\n    SELECT DISTINCT d.driverId\n    FROM drivers d\n    JOIN results r ON d.driverId = r.driverId\n    JOIN races rc ON r.raceId = rc.raceId\n    WHERE strftime('%Y', d.dob) < '1985'\n    AND r.laps > 50\n    AND rc.year BETWEEN 2000 AND 2005\n)\nSELECT \n    (COUNT(d.driverId) * 100.0 / (SELECT COUNT(*) FROM drivers_2000_2005)) AS percentage\nFROM drivers_before_1985_over_50_laps d;",
    "error": "something went wrong, tool did not call.",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
    "reason": [
      "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;"
    ]
  },
  "1185": {
    "sql": "WITH November_TCHO AS (\n    SELECT SUM(`T-CHO`) AS sum_nov\n    FROM Laboratory\n    WHERE ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-02-18')\n    AND Date LIKE '1981-11-%'\n),\nDecember_TCHO AS (\n    SELECT SUM(`T-CHO`) AS sum_dec\n    FROM Laboratory\n    WHERE ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-02-18')\n    AND Date LIKE '1981-12-%'\n)\nSELECT \n    CASE \n        WHEN November_TCHO.sum_nov IS NULL OR December_TCHO.sum_dec IS NULL THEN 'Insufficient data'\n        ELSE ((November_TCHO.sum_nov - December_TCHO.sum_dec) / November_TCHO.sum_nov * 100) || '%'\n    END AS decrease_rate\nFROM November_TCHO, December_TCHO;",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "reason": [
      "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))"
    ]
  },
  "787": {
    "sql": "SELECT r.race, a.alignment\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE s.superhero_name = 'Cameron Hicks';",
    "question": "What are the race and alignment of Cameron Hicks?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "reason": [
      "Cameron Hicks refers to superhero_name = 'Cameron Hicks';"
    ]
  },
  "50": {
    "sql": "SELECT s.School, s.Street\nFROM satscores sc\nJOIN schools s ON sc.cds = s.CDSCode\nWHERE sc.AvgScrMath IS NOT NULL\nORDER BY sc.AvgScrMath DESC\nLIMIT 1 OFFSET 6;",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "reason": [
      "Postal street and mailing street are synonyms."
    ]
  },
  "965": {
    "sql": "SELECT raceId FROM races WHERE year = 2009;",
    "question": "List out the Id number of races which were hold in 2009.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT raceId FROM races WHERE year = 2009",
    "reason": []
  },
  "555": {
    "sql": "SELECT AVG(p.Score) AS AverageScore\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "reason": [
      "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)"
    ]
  },
  "7": {
    "sql": "SELECT s.Phone\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE sat.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores);",
    "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "reason": []
  },
  "1170": {
    "sql": "SELECT COUNT(DISTINCT p.ID) \nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE (strftime('%Y', e.`Examination Date`) - strftime('%Y', p.`First Date`)) >= 1;",
    "question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1",
    "reason": [
      "hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1"
    ]
  },
  "1474": {
    "sql": "SELECT c.CustomerID, SUM(t.Amount) AS TotalConsumption\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE c.Currency = 'CZK' AND t.Date BETWEEN '201101' AND '201112'\nGROUP BY c.CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;",
    "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "reason": [
      "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011"
    ]
  },
  "172": {
    "sql": "SELECT type, COUNT(*) AS count FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type;",
    "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
    "reason": []
  },
  "1438": {
    "sql": "SELECT m.college\nFROM member AS mem\nJOIN major AS m ON mem.link_to_major = m.major_id\nWHERE mem.first_name = 'Katy' AND mem.link_to_major = 'rec1N0upiVLy5esTO';",
    "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
    "reason": []
  },
  "906": {
    "sql": "WITH hamilton_first_race AS (\n    SELECT r.raceId, r.year, r.round, r.name AS race_name, r.date\n    FROM results res\n    JOIN drivers d ON res.driverId = d.driverId\n    JOIN races r ON res.raceId = r.raceId\n    WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\n    ORDER BY r.year, r.round\n    LIMIT 1\n)\nSELECT hfr.race_name AS first_race, hfr.date, res.points\nFROM hamilton_first_race hfr\nJOIN results res ON hfr.raceId = res.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
    "reason": [
      "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"
    ]
  },
  "1114": {
    "sql": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnautovic')\nAND date BETWEEN '2007-02-22' AND '2016-04-21';",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "reason": [
      "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'"
    ]
  },
  "839": {
    "sql": "SELECT s.full_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.weight_kg < 100 AND c.colour = 'brown';",
    "question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "reason": [
      "weight less than 100 refers to weight_kg < 100"
    ]
  },
  "1482": {
    "sql": "",
    "error": "something went wrong, tool did not call.",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "reason": [
      "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year"
    ]
  },
  "576": {
    "sql": "SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!';",
    "question": "Name the user that commented 'thank you user93!'",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "reason": [
      "\"thank you user93\" is the Text of comment; user refers to DisplayName"
    ]
  },
  "353": {
    "sql": "SELECT s.code, s.name, s.totalSetSize\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Italian';",
    "question": "List all the sets available in Italian translation. State the total number of cards per set.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
    "reason": [
      "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;"
    ]
  },
  "851": {
    "sql": "SELECT c.name AS circuit_name, c.lat AS latitude, c.lng AS longitude\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN results res ON r.raceId = res.raceId\nJOIN constructors con ON res.constructorId = con.constructorId\nWHERE con.name = 'Renault'\nGROUP BY c.circuitId;",
    "question": "Please list the positions of the circuits built by the constructor Renault.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "reason": [
      "Renault is a name of constructor;"
    ]
  },
  "808": {
    "sql": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.weight_kg = 108 AND s.height_cm = 188;",
    "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
    "reason": [
      "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;"
    ]
  },
  "474": {
    "sql": "SELECT COUNT(DISTINCT s.code)\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Italian' AND s.baseSetSize < 100;",
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
    "reason": [
      "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10"
    ]
  },
  "178": {
    "sql": "SELECT c.type \nFROM card c \nJOIN disp d ON c.disp_id = d.disp_id \nWHERE d.client_id = 9;",
    "question": "Which kind of credit card does client number 9 possess?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9",
    "reason": []
  },
  "190": {
    "sql": "SELECT COUNT(*) \nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE strftime('%Y', c.birth_date) = '1920' \nAND d.A3 = 'east Bohemia';",
    "question": "How many clients who were born in 1920 stay in east Bohemia?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
    "reason": [
      "East Bohemia appears in the column A3, which refers to the region."
    ]
  },
  "564": {
    "sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829 LIMIT 1;",
    "question": "Give the only one comment text of the post with parent id 107829.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1",
    "reason": [
      "one comment refers to CommentCount = '1'"
    ]
  },
  "911": {
    "sql": "SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;",
    "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
    "reason": [
      "higher latitude refers to max(lat)"
    ]
  },
  "1296": {
    "sql": "SELECT e.ANA\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)\nLIMIT 1;",
    "question": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1",
    "reason": [
      "anti-nucleus antibody concentration refers to ANA; total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0);"
    ]
  },
  "1252": {
    "sql": "SELECT COUNT(DISTINCT p.ID) \nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.IGG > 900 AND l.IGG < 2000 AND e.Symptoms IS NOT NULL;",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
    "reason": [
      "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;"
    ]
  },
  "781": {
    "sql": "SELECT superhero.height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "reason": [
      "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;"
    ]
  },
  "324": {
    "sql": "SELECT (SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percentage_single_bonds FROM bond;",
    "question": "Find the percentage of atoms with single bond.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
    "reason": [
      "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage"
    ]
  },
  "354": {
    "sql": "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';",
    "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
    "reason": [
      "Aaron Boyd' is artist;"
    ]
  },
  "229": {
    "sql": "SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR000';",
    "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
    "reason": [
      "type of bond refers to bond_type; TR000 is the molecule id"
    ]
  },
  "539": {
    "sql": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Eliciting priors from experts';",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "reason": [
      "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName"
    ]
  },
  "1214": {
    "sql": "SELECT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TP < 6.0;",
    "question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
    "reason": [
      "total protein (TP) below the lower range of the normal index refers to TP < 6.0"
    ]
  },
  "1039": {
    "sql": "SELECT AVG(long_shots) AS average_long_shots\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "reason": [
      "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));"
    ]
  },
  "1242": {
    "sql": "SELECT DISTINCT P.ID, P.SEX, P.Birthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE YEAR(L.Date) = 1984\nAND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50\nAND L.PLT BETWEEN 100 AND 400;",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
    "reason": [
      "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; "
    ]
  },
  "208": {
    "sql": "SELECT m.label, COUNT(*) AS count\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'h'\nGROUP BY m.label\nORDER BY count DESC\nLIMIT 1;",
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
    "reason": [
      "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); "
    ]
  },
  "86": {
    "sql": "SELECT s.District, s.County, s.School, s.AdmLName1, s.AdmLName2, s.AdmLName3\nFROM schools s\nWHERE s.CharterNum = '40';",
    "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
    "reason": []
  },
  "52": {
    "sql": "SELECT COUNT(DISTINCT s.CDSCode) \nFROM schools s \nJOIN satscores sat ON s.CDSCode = sat.cds \nWHERE sat.NumGE1500 > 0 AND s.MailCity = 'Lakeport';",
    "question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500",
    "reason": [
      "Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite"
    ]
  },
  "931": {
    "sql": "SELECT MAX(r.fastestLapSpeed) AS fastest_lap_speed\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nWHERE rc.year = 2009 AND rc.name = 'Spanish Grand Prix';",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "reason": [
      "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';"
    ]
  },
  "167": {
    "sql": "SELECT DISTINCT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN card ca ON d.disp_id = ca.disp_id\nWHERE ca.type = 'junior' AND strftime('%Y', ca.issued) > '1996';",
    "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
    "reason": [
      "After 1996 means date > = '1997-01-01"
    ]
  },
  "1292": {
    "sql": "SELECT e.\"aCL IgG\", e.\"aCL IgM\", e.\"aCL IgA\"\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE p.SEX = 'F'\n  AND l.UA = (SELECT MAX(UA) FROM Laboratory WHERE UA > 6.50 AND ID IN (SELECT ID FROM Patient WHERE SEX = 'F'))\nLIMIT 1;",
    "question": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1",
    "reason": [
      "anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`; female patient refers to Sex = F'; highest uric acid level in the normal range refers to MAX(UA > 6.50);"
    ]
  },
  "758": {
    "sql": "SELECT c.colour\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nJOIN colour c ON s.hair_colour_id = c.id\nWHERE r.race = 'Human' AND s.height_cm = 185;",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "reason": [
      "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;"
    ]
  },
  "286": {
    "sql": "WITH total_molecules AS (\n  SELECT COUNT(DISTINCT molecule_id) AS total\n  FROM molecule\n),\nmolecules_with_triple_bond AS (\n  SELECT COUNT(DISTINCT m.molecule_id) AS triple_bond_count\n  FROM molecule m\n  JOIN bond b ON m.molecule_id = b.molecule_id\n  WHERE b.bond_type = '#'\n)\nSELECT (triple_bond_count * 100.0 / total) AS percent_triple_bond\nFROM total_molecules, molecules_with_triple_bond;",
    "question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
    "reason": [
      "triple bond refers to bond_type = '#';"
    ]
  },
  "813": {
    "sql": "SELECT AVG(ha.attribute_value) AS average_attribute_value\nFROM superhero sh\nJOIN hero_attribute ha ON sh.id = ha.hero_id\nWHERE sh.alignment_id = 3;",
    "question": "Calculate the average attribute value of all neutral superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'",
    "reason": [
      "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;"
    ]
  },
  "278": {
    "sql": "SELECT COUNT(DISTINCT b.molecule_id) \nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '-' AND m.label = '-';",
    "question": "How many of the single bond type molecules are non-carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"
    ]
  },
  "231": {
    "sql": "WITH bond_counts AS (\n  SELECT bond_type, COUNT(*) AS count\n  FROM bond\n  WHERE molecule_id = 'TR010'\n  GROUP BY bond_type\n)\nSELECT \n  (SELECT bond_type FROM bond_counts ORDER BY count DESC LIMIT 1) AS majority_bond_type,\n  (SELECT label FROM molecule WHERE molecule_id = 'TR010') AS molecule_label;",
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
    "reason": [
      "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); "
    ]
  },
  "942": {
    "sql": "WITH hamilton_races AS (\n    SELECT d.driverId, r.raceId, res.fastestLapTime\n    FROM drivers d\n    JOIN results res ON d.driverId = res.driverId\n    JOIN races r ON res.raceId = r.raceId\n    WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\n    AND res.fastestLapTime IS NOT NULL\n)\nSELECT AVG(\n    CAST(SUBSTR(fastestLapTime, 1, 2) AS INTEGER) * 60 + -- minutes to seconds\n    CAST(SUBSTR(fastestLapTime, 4, 2) AS INTEGER) + -- seconds\n    CAST(SUBSTR(fastestLapTime, 7, 3) AS REAL) / 1000 -- milliseconds to seconds\n) AS average_fastest_lap_seconds\nFROM hamilton_races;",
    "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
    "reason": [
      "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'"
    ]
  },
  "122": {
    "sql": "SELECT d.A2 AS district, d.A3 AS region\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.loan_id = 4990;",
    "question": "State the district and region for loan ID '4990'.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
    "reason": [
      "A2, A3 contains the information about district and region respectively."
    ]
  },
  "1492": {
    "sql": "SELECT \n    (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage_KAM_EUR\nFROM \n    customers c\nWHERE \n    c.Segment = 'KAM';",
    "question": "What percentage of KAM customers pay in euros?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
    "reason": [
      "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%."
    ]
  },
  "1329": {
    "sql": "SELECT z.county\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';",
    "question": "What county did Sherri Ramsey grew up?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
    "reason": []
  },
  "1183": {
    "sql": "SELECT p.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.Diagnosis = 'SLE' AND e.`Examination Date` = '1997-01-27' AND p.`First Date` IS NOT NULL;",
    "question": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = ( SELECT ID FROM Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis = 'SLE' ) AND T2.`Examination Date` = T1.`First Date`",
    "reason": [
      "'SLE' AND original diagnose refers to diagnosis; 1997/1/27 refer to `Examination Date` = '1997-01-27'; first came to the hospital refers to patient.`First Date`"
    ]
  },
  "339": {
    "sql": "SELECT a.atom_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+' AND a.element = 'o';",
    "question": "List the atom ID of the carcinogenic molecule that contains oxygen?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'"
    ]
  },
  "622": {
    "sql": "SELECT b.Name \nFROM badges b \nJOIN users u ON b.UserId = u.Id \nWHERE u.DisplayName = 'Sharpie';",
    "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "reason": [
      "\"Sharpie\" is the DisplayName of user; user refers to UserId"
    ]
  },
  "1495": {
    "sql": "SELECT CustomerID, SUM(Consumption) AS TotalConsumption\nFROM yearmonth\nWHERE Date = '201309'\nGROUP BY CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;",
    "question": "Which client ID consumed the most in September 2013?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "reason": [
      "September 2013 refers to yearmonth.date = '201309'"
    ]
  },
  "840": {
    "sql": "SELECT a.attribute_name, ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE s.superhero_name = 'Aquababy';",
    "question": "List the attribute value of the superhero named Aquababy.",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "reason": []
  },
  "461": {
    "sql": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;",
    "question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3",
    "reason": [
      "name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'"
    ]
  },
  "803": {
    "sql": "SELECT id FROM superpower WHERE power_name = 'cryokinesis';",
    "question": "What is the power ID of cryokinesis?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "reason": [
      "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';"
    ]
  },
  "785": {
    "sql": "SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');",
    "question": "Describe the names of neutral alignment superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "reason": [
      "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';"
    ]
  },
  "1348": {
    "sql": "SELECT COUNT(*) \nFROM budget \nWHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'November Meeting') \nAND spent > amount;",
    "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
    "reason": [
      "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget"
    ]
  },
  "486": {
    "sql": "SELECT \n    (COUNT(CASE WHEN c.convertedManaCost = 7 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    cards c\nJOIN \n    sets s ON c.setCode = s.code\nWHERE \n    s.code = 'CSP';",
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "reason": [
      "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100"
    ]
  },
  "373": {
    "sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';",
    "question": "Name the cards that were illustrated by Aaron Boyd.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "reason": [
      "Aaron Boyd' is artist;"
    ]
  },
  "95": {
    "sql": "WITH youngest_clients AS (\n    SELECT client_id, birth_date\n    FROM client\n    WHERE birth_date = (SELECT MAX(birth_date) FROM client)\n),\nhighest_salary_districts AS (\n    SELECT district_id\n    FROM district\n    WHERE A11 = (SELECT MAX(A11) FROM district)\n)\nSELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN youngest_clients yc ON d.client_id = yc.client_id\nJOIN client c ON d.client_id = c.client_id\nJOIN highest_salary_districts hsd ON c.district_id = hsd.district_id;",
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
    "reason": [
      "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary"
    ]
  },
  "740": {
    "sql": "SELECT COUNT(DISTINCT s.id) AS female_heroes_with_strength_100\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE g.gender = 'Female'\nAND a.attribute_name = 'Strength'\nAND ha.attribute_value = 100;",
    "question": "How many female superheroes have a strength value of 100?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
    "reason": [
      "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100"
    ]
  },
  "1498": {
    "sql": "SELECT MAX(monthly_consumption) AS highest_monthly_consumption\nFROM (\n    SELECT SUM(Consumption) AS monthly_consumption\n    FROM yearmonth\n    WHERE substr(Date, 1, 4) = '2012'\n    GROUP BY substr(Date, 5, 2)\n);",
    "question": "What is the highest monthly consumption in the year 2012?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
    "reason": [
      "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."
    ]
  },
  "188": {
    "sql": "SELECT l.account_id, l.amount, a.date AS account_opening_date\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.duration > 24\nAND a.date < '1997-01-01'\nAND l.amount = (SELECT MIN(amount) FROM loan WHERE duration > 24);",
    "question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
    "reason": []
  },
  "1013": {
    "sql": "SELECT MIN(r.fastestLapTime) AS lapRecord\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nJOIN circuits c ON rc.circuitId = c.circuitId\nWHERE c.name = 'Austrian Grand Prix Circuit';",
    "question": "What is the lap record for the Austrian Grand Prix Circuit?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
    "reason": [
      "lap record means the fastest time recorded which refers to time"
    ]
  },
  "1311": {
    "sql": "SELECT COUNT(DISTINCT p.ID) \nFROM Patient p \nJOIN Examination e ON p.ID = e.ID \nJOIN Laboratory l ON p.ID = l.ID \nWHERE e.Thrombosis = 1 \nAND l.PT BETWEEN 10 AND 14;",
    "question": "How many patients with severe thrombosis have a normal prothrombin time?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0",
    "reason": [
      "severe thrombosis refers to Thrombosis = 2 or 1; normal prothrombin time refers to PT < 14;"
    ]
  },
  "431": {
    "sql": "SELECT s.id, s.code, s.name\nFROM sets s\nJOIN cards c ON s.code = c.setCode\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE s.isForeignOnly = 0\nAND s.isFoilOnly = 1\nAND fd.language = 'Japanese'\nGROUP BY s.id, s.code, s.name;",
    "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
    "reason": [
      "available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'"
    ]
  },
  "348": {
    "sql": "SELECT r.date, r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.name = 'Sublime Epiphany' AND c.number = '74s';",
    "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
    "reason": [
      "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;"
    ]
  },
  "102": {
    "sql": "SELECT DISTINCT a.account_id\nFROM account a\nJOIN trans t ON a.account_id = t.account_id\nWHERE strftime('%Y', a.date) < '1997'\nAND t.balance > 3000;",
    "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
    "reason": []
  },
  "1258": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nJOIN Laboratory L ON P.ID = L.ID\nWHERE E.KCT = '+' AND L.RA IN ('-', '+-');",
    "question": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'",
    "reason": [
      "normal Rhuematoid Factor refers TO RA IN('-', '+-'); positive measure of degree of coagulation refers to KCT = '+'; Should compute the number of distinct ones"
    ]
  },
  "266": {
    "sql": "SELECT COUNT(*) AS total_carcinogenic_molecules\nFROM molecule\nWHERE molecule_id BETWEEN 'TR000' AND 'TR030'\nAND label = '+';",
    "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic"
    ]
  },
  "173": {
    "sql": "-- Query to find how often account number 3 requests an account statement to be released\nSELECT COUNT(*) AS statement_request_count\nFROM trans\nWHERE account_id = 3 AND k_symbol LIKE '%statement%';\n\n-- Query to find the aim of debiting 3539 in total\nSELECT k_symbol, SUM(amount) AS total_debit\nFROM trans\nGROUP BY k_symbol\nHAVING SUM(amount) = 3539;",
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
    "reason": [
      "k_symbol refers to the purpose of payments"
    ]
  },
  "621": {
    "sql": "SELECT DISTINCT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Reputation = (SELECT MIN(Reputation) FROM users);",
    "question": "What are the name of badges that users who have the lowest reputation obtained?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
    "reason": [
      "lowest reputation refers to Min(Reputation); user refers to UserId"
    ]
  },
  "816": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_value BETWEEN 75 AND 80;",
    "question": "Provide the names of superheroes with attribute value between 75 to 80.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
    "reason": [
      "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;"
    ]
  },
  "405": {
    "sql": "SELECT COUNT(DISTINCT s.code) AS brazilian_portuguese_translated_sets\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)'",
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
    "reason": [
      "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'"
    ]
  },
  "1442": {
    "sql": "SELECT \n    (COUNT(CASE WHEN b.spent > b.amount THEN 1 END) * 100.0 / COUNT(*)) AS percentage_over_budget\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event;",
    "question": "What is the percentage of the events that went over budget?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget",
    "reason": [
      "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100"
    ]
  },
  "746": {
    "sql": "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;",
    "question": "Calculate the average attribute value of all superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT AVG(attribute_value) FROM hero_attribute",
    "reason": [
      "average attribute value of all superheroes refers to AVG(attribute_value)"
    ]
  },
  "556": {
    "sql": "SELECT AVG(badge_count) AS average_badges\nFROM (\n    SELECT u.Id, COUNT(b.Id) AS badge_count\n    FROM users u\n    LEFT JOIN badges b ON u.Id = b.UserId\n    WHERE u.Views > 200\n    GROUP BY u.Id\n) AS user_badges;",
    "question": "What is the average number of badges obtained by a user with over 200 views?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
    "reason": [
      "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))"
    ]
  },
  "693": {
    "sql": "WITH LatestUser AS (\n    SELECT Id\n    FROM users\n    ORDER BY CreationDate DESC\n    LIMIT 1\n)\nSELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM LatestUser)) AS post_count,\n    (SELECT COUNT(*) FROM comments WHERE UserId = (SELECT Id FROM LatestUser)) AS comment_count;",
    "question": "Identify the number of posts and comments left by the user, who has the latest created user account.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
    "reason": [
      "the latest created user account refers to MAX(CreationDate);"
    ]
  },
  "1277": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE L.DNA < 8 AND P.Description IS NULL;",
    "question": "How many patients have a normal anti-DNA level, yet their data are not recorded.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL",
    "reason": [
      "normal anti-DNA level refers to DNA < 8; data are not recorded refers to Description IS NULL; Should compute the number of unique ones"
    ]
  },
  "377": {
    "sql": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';",
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
    "reason": [
      "subtype other than Angel refers to subtypes is not 'Angel';"
    ]
  },
  "680": {
    "sql": "SELECT AVG(Score) AS AverageScore\nFROM posts\nWHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner');",
    "question": "What is the average score of Stephen Turner's posts?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
    "reason": [
      "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);"
    ]
  },
  "506": {
    "sql": "SELECT \n    (SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_non_foil_only\nFROM \n    sets s\nJOIN \n    set_translations st ON s.code = st.setCode\nJOIN \n    cards c ON s.code = c.setCode\nWHERE \n    st.language = 'Japanese';",
    "question": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )",
    "reason": [
      "Japanese translation refers to language = 'Japanese'; in non-foil refers to isNonFoilOnly = 1; percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100"
    ]
  },
  "336": {
    "sql": "SELECT COUNT(DISTINCT b.molecule_id) \nFROM bond b \nJOIN molecule m ON b.molecule_id = m.molecule_id \nWHERE b.bond_type = '#' AND m.label = '-';",
    "question": "in molecules with triple bonds, how many of them are not carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'",
    "reason": [
      "triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "115": {
    "sql": "WITH max_inhabitants_district AS (\n    SELECT district_id\n    FROM district\n    WHERE A3 = 'south Bohemia'\n    ORDER BY A4 DESC\n    LIMIT 1\n),\nclient_counts AS (\n    SELECT \n        COUNT(*) AS total_clients,\n        SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS male_clients\n    FROM client\n    WHERE district_id = (SELECT district_id FROM max_inhabitants_district)\n)\nSELECT \n    (male_clients * 100.0 / total_clients) AS male_percentage\nFROM client_counts;",
    "error": "something went wrong, tool did not call.",
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "reason": [
      "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants."
    ]
  },
  "1146": {
    "sql": "SELECT t.team_long_name\nFROM Match m\nJOIN Team t ON m.away_team_api_id = t.team_api_id\nGROUP BY m.away_team_api_id\nORDER BY SUM(m.away_team_goal) DESC\nLIMIT 1;",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
    "reason": [
      "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)"
    ]
  },
  "363": {
    "sql": "SELECT COUNT(*) \nFROM cards \nJOIN legalities ON cards.uuid = legalities.uuid \nWHERE legalities.status = 'restricted' AND cards.isStarter = 1;",
    "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
    "reason": [
      "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;"
    ]
  },
  "1094": {
    "sql": "SELECT ((A.overall_rating - P.overall_rating) * 100.0 / P.overall_rating) AS percentage_higher\nFROM Player_Attributes A\nJOIN Player PA ON A.player_api_id = PA.player_api_id\nJOIN Player_Attributes P\nJOIN Player PP ON P.player_api_id = PP.player_api_id\nWHERE PA.player_name = 'Ariel Borysiuk' AND PP.player_name = 'Paulin Puel';\n",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "reason": [
      "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);"
    ]
  },
  "148": {
    "sql": "SELECT a.account_id\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nJOIN disp dp ON a.account_id = dp.account_id\nWHERE d.A2 = 'Tabor' AND dp.type = 'OWNER';",
    "question": "Please list the accounts whose district is Tabor that are eligible for loans.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
    "reason": [
      "District refers to column A2; when the account type = 'OWNER', it's eligible for loans"
    ]
  },
  "834": {
    "sql": "SELECT \n    (COUNT(CASE WHEN g.gender = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nJOIN \n    gender g ON s.gender_id = g.id\nWHERE \n    p.publisher_name = 'George Lucas';",
    "question": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
    "reason": [
      "created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';"
    ]
  },
  "239": {
    "sql": "SELECT COUNT(DISTINCT bond_id) AS connection_count FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';",
    "question": "How many connections does the atom 19 have?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
    "reason": [
      "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';"
    ]
  },
  "1313": {
    "sql": "SELECT COUNT(DISTINCT m.member_id) \nFROM member m \nJOIN major maj ON m.link_to_major = maj.major_id \nWHERE maj.college = 'College of Engineering';",
    "question": "How many students in the Student_Club are from the College of Engineering?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
    "reason": []
  },
  "1383": {
    "sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE z.city = 'Georgetown' AND z.state = 'South Carolina';",
    "question": "State the name of students from Georgetown, South Carolina.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
    "reason": [
      "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state"
    ]
  },
  "1194": {
    "sql": "SELECT p.SEX\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE e.Diagnosis = 'PSS'\nAND l.CRP = '2+'\nAND l.CRE = 1\nAND l.LDH = 123;",
    "question": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123",
    "reason": [
      "PSS' refers to diagnosis; blood level of C-reactive protein de 2+refers to CRP > 2; createnine 1 refers to CRE = 1; LDH 123 refers to LDH = 123"
    ]
  },
  "288": {
    "sql": "SELECT m.label \nFROM molecule m \nJOIN atom a ON m.molecule_id = a.molecule_id \nWHERE a.atom_id = 'TR001_1';",
    "question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
    "reason": [
      "label = '+' mean molecules are carcinogenic;"
    ]
  },
  "1037": {
    "sql": "SELECT \n    (SUM(CASE WHEN pa.preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT p.player_api_id) AS percentage_left_footed\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    strftime('%Y', p.birthday) BETWEEN '1987' AND '1992';",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "reason": [
      "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';"
    ]
  },
  "514": {
    "sql": "SELECT c.name, c.convertedManaCost\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'duel'\nORDER BY c.convertedManaCost DESC\nLIMIT 10;",
    "question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10",
    "reason": [
      "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)"
    ]
  },
  "1232": {
    "sql": "SELECT P.ID, P.SEX, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.GLU >= 180 AND L.`T-CHO` < 250;",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
    "reason": [
      "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; "
    ]
  },
  "1396": {
    "sql": "WITH luisa_info AS (\n    SELECT member_id, link_to_major\n    FROM member\n    WHERE first_name = 'Luisa' AND last_name = 'Guidi'\n)\nSELECT \n    COUNT(a.link_to_event) AS number_of_events_attended,\n    m.major_name\nFROM \n    luisa_info li\nLEFT JOIN \n    attendance a ON li.member_id = a.link_to_member\nLEFT JOIN \n    major m ON li.link_to_major = m.major_id\nGROUP BY \n    m.major_name;",
    "question": "Provide the number of events attended by Luisa Guidi. What is her major?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
    "reason": [
      "major refers to major_name;"
    ]
  },
  "221": {
    "sql": "SELECT a1.atom_id AS atom1, a2.atom_id AS atom2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR001_2_6' AND a1.molecule_id = 'TR001' AND a2.molecule_id = 'TR001';",
    "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
    "reason": [
      "TR001 is the molecule id; TR001_2_6 is the bond id"
    ]
  },
  "742": {
    "sql": "SELECT COUNT(*) \nFROM superhero \nWHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');",
    "question": "How many vampire superheroes are there?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "reason": [
      "vampire superheroes refers to race = 'Vampire'"
    ]
  },
  "697": {
    "sql": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "reason": []
  },
  "649": {
    "sql": "SELECT \n    COUNT(ph.Id) AS post_history_count,\n    MAX(ph.CreationDate) AS last_edit_date\nFROM \n    posts p\nJOIN \n    postHistory ph ON p.Id = ph.PostId\nWHERE \n    p.Title = 'What is the best introductory Bayesian statistics textbook?'\nGROUP BY \n    p.Id;",
    "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
    "reason": []
  },
  "1173": {
    "sql": "SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount\nFROM Examination\nWHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY Diagnosis\nORDER BY DiagnosisCount DESC\nLIMIT 1;",
    "question": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1",
    "reason": [
      "the most common illness refers to MAX(COUNT(Diagnosis)); lab work between 1/1/1985 and 12/31/1995 refers to `Examination Date` between '1985-01-01' and '1995-12-31 '"
    ]
  },
  "171": {
    "sql": "SELECT \n    (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') - \n    (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS crime_difference;",
    "question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
    "reason": [
      "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16"
    ]
  },
  "8": {
    "sql": "SELECT s.NumTstTakr\nFROM satscores s\nJOIN frpm f ON s.cds = f.CDSCode\nWHERE f.\"FRPM Count (K-12)\" = (SELECT MAX(\"FRPM Count (K-12)\") FROM frpm);",
    "question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )",
    "reason": []
  },
  "924": {
    "sql": "SELECT r.date\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Barcelona-Catalunya';\n",
    "question": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "reason": []
  },
  "857": {
    "sql": "SELECT c.lat, c.lng \nFROM circuits c \nJOIN races r ON c.circuitId = r.circuitId \nWHERE r.name = 'Abu Dhabi Grand Prix';",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
    "reason": [
      "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'"
    ]
  },
  "508": {
    "sql": "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;",
    "question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
    "reason": [
      "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability"
    ]
  },
  "106": {
    "sql": "SELECT MAX(t.amount) AS biggest_transaction_amount\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN card cd ON d.disp_id = cd.disp_id\nWHERE cd.issued = '1996-10-21';",
    "question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
    "reason": []
  },
  "218": {
    "sql": "WITH carcinogenic_molecules AS (\n  SELECT DISTINCT m.molecule_id\n  FROM molecule m\n  WHERE m.label = '+'\n),\nfluorine_molecules AS (\n  SELECT DISTINCT a.molecule_id\n  FROM atom a\n  WHERE a.element = 'f'\n)\nSELECT \n  (COUNT(DISTINCT cm.molecule_id) - COUNT(DISTINCT fm.molecule_id)) * 100.0 / COUNT(DISTINCT cm.molecule_id) AS percentage\nFROM carcinogenic_molecules cm\nLEFT JOIN fluorine_molecules fm ON cm.molecule_id = fm.molecule_id;",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;"
    ]
  },
  "1472": {
    "sql": "SELECT c.CustomerID, SUM(ym.Consumption) AS TotalConsumption\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Segment = 'LAM' AND ym.Date LIKE '2012%'\nGROUP BY c.CustomerID\nORDER BY TotalConsumption ASC\nLIMIT 1;",
    "question": "In 2012, who had the least consumption in LAM?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "reason": [
      "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year."
    ]
  },
  "437": {
    "sql": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;",
    "question": "Among black card borders, which card has full artwork?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
    "reason": [
      "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1"
    ]
  },
  "602": {
    "sql": "SELECT Id AS PostId, OwnerUserId AS UserId FROM posts WHERE Score > 60;",
    "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )",
    "reason": [
      "score more than 60 refers to Score > 60"
    ]
  },
  "338": {
    "sql": "SELECT DISTINCT a.atom_id\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR012' AND a.element = 'c' AND b.bond_type = ' = ';",
    "question": "What is the atom ID of double bonded carbon in TR012 molecule?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'",
    "reason": [
      "carbon refers to element = 'c'; double bond refers to bond_type = ' = ';"
    ]
  },
  "1143": {
    "sql": "SELECT MAX(home_team_goal) AS highest_home_score\nFROM \"Match\"\nWHERE league_id = (SELECT id FROM \"League\" WHERE name = 'Netherlands Eredivisie');",
    "question": "What was the highest score of the home team in the Netherlands Eredivisie league?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'",
    "reason": [
      "highest score of the home team refers to MAX(home_team_goal)"
    ]
  },
  "1279": {
    "sql": "SELECT (COUNT(DISTINCT CASE WHEN l.GOT >= 60 AND p.Diagnosis = 'SLE' THEN l.ID END) * 100.0 / COUNT(DISTINCT CASE WHEN l.GOT >= 60 THEN l.ID END)) AS percentage\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID;",
    "question": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60",
    "reason": [
      "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);"
    ]
  },
  "1208": {
    "sql": "SELECT DISTINCT P.ID\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M' AND L.GPT >= 60;",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "reason": [
      "male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60"
    ]
  },
  "687": {
    "sql": "WITH highest_score_post AS (\n    SELECT Id\n    FROM posts\n    WHERE Score = (SELECT MAX(Score) FROM posts)\n)\nSELECT COUNT(*) AS comment_count\nFROM comments\nWHERE PostId = (SELECT Id FROM highest_score_post);",
    "question": "How many comments were added to the post with the highest score?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
    "reason": [
      "the highest score refers to MAX(Score);"
    ]
  },
  "1444": {
    "sql": "SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget FROM expense WHERE cost > (SELECT AVG(cost) FROM expense) AND (SELECT AVG(cost) FROM expense) > 50;",
    "question": "List the expenses that spend more than fifty dollars on average.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
    "reason": [
      "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50"
    ]
  },
  "593": {
    "sql": "SELECT COUNT(DISTINCT u.Id) AS UserCount\nFROM users u\nJOIN badges b1 ON u.Id = b1.UserId AND b1.Name = 'Teacher'\nJOIN badges b2 ON u.Id = b2.UserId AND b2.Name = 'Supporter'\nWHERE u.Location = 'New York';",
    "question": "How many users from New York have a teacher and supporter badge?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
    "reason": [
      "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId"
    ]
  },
  "265": {
    "sql": "SELECT molecule_id FROM molecule WHERE label = '-';",
    "question": "List down the molecule id for non carcinogenic molecules.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic"
    ]
  },
  "1415": {
    "sql": "SELECT m.position\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Business';",
    "question": "List out the position of members who joined major of Business.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "reason": [
      "'Business' is the major name"
    ]
  },
  "983": {
    "sql": "SELECT c.name, c.url AS introduction_website, SUM(cs.points) AS total_points\nFROM constructors c\nJOIN constructorStandings cs ON c.constructorId = cs.constructorId\nWHERE c.nationality = 'Italian'\nGROUP BY c.constructorId\nORDER BY total_points DESC\nLIMIT 1;",
    "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
    "reason": [
      "introduction website refers to url; Italian is a nationality"
    ]
  },
  "1029": {
    "sql": "SELECT t.team_long_name, ta.buildUpPlaySpeed\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nORDER BY ta.buildUpPlaySpeed DESC\nLIMIT 4;",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
    "reason": [
      "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)"
    ]
  },
  "485": {
    "sql": "SELECT r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Reminisce';",
    "question": "When was the ruling for the card 'Reminisce' created?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "reason": [
      "Reminisce refers to name = 'Reminisce'; when created is the date"
    ]
  },
  "701": {
    "sql": "WITH most_influential_user AS (\n    SELECT Id\n    FROM users\n    ORDER BY Reputation DESC\n    LIMIT 1\n),\nuser_posts AS (\n    SELECT Id, Score\n    FROM posts\n    WHERE OwnerUserId = (SELECT Id FROM most_influential_user)\n),\ntotal_posts AS (\n    SELECT COUNT(*) AS total\n    FROM user_posts\n),\nhigh_score_posts AS (\n    SELECT COUNT(*) AS high_score\n    FROM user_posts\n    WHERE Score > 50\n)\nSELECT (high_score * 100.0 / total) AS percentage\nFROM high_score_posts, total_posts;",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
    "reason": [
      "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));"
    ]
  },
  "635": {
    "sql": "SELECT COUNT(DISTINCT p.Id) AS PostCount\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN votes v ON p.Id = v.PostId\nWHERE u.DisplayName = 'Matt Parker'\nGROUP BY p.Id\nHAVING COUNT(v.Id) > 4;",
    "question": "How many posts by Matt Parker have more than 4 votes?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "reason": [
      "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';"
    ]
  },
  "1507": {
    "sql": "SELECT DISTINCT Time\nFROM transactions_1k\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.ChainID = 11\nORDER BY Time;",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
    "reason": []
  },
  "1368": {
    "sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.phone = '809-555-3360';",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "reason": [
      "major in refers to major_name"
    ]
  },
  "1370": {
    "sql": "SELECT e.expense_id, e.expense_description, e.expense_date, e.cost, e.approved\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE m.position = 'Vice President';",
    "question": "List all the expenses incurred by the vice president.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "reason": [
      "expense refers to expense_description; 'Vice President' is a position of the Student Club"
    ]
  },
  "389": {
    "sql": "SELECT c.name, r.date\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.originalType = 'Creature - Elf';",
    "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "reason": [
      "Creature - Elf is the originalType;"
    ]
  },
  "1384": {
    "sql": "SELECT SUM(amount) AS total_income FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Grant' AND last_name = 'Gilmour');",
    "question": "How many income generated by Grant Gilmour?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'",
    "reason": [
      "income generated refers to income.amount"
    ]
  },
  "1499": {
    "sql": "SELECT MAX(ym.Consumption) AS BiggestMonthlyConsumption\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Currency = 'euro';",
    "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
    "reason": [
      "Monthly consumption = SUM(consumption) / 12"
    ]
  },
  "1428": {
    "sql": "SELECT z.city, z.state\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE maj.department = 'Electrical and Computer Engineering Department'\nAND m.position = 'Member';",
    "question": "List the city and state of members enrolled under electrical and computer engineering department.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
    "reason": [
      "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'"
    ]
  },
  "529": {
    "sql": "SELECT DISTINCT s.name\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.code NOT IN (\n    SELECT setCode\n    FROM set_translations\n    WHERE language LIKE '%Japanese%'\n)\nAND s.code IN (\n    SELECT setCode\n    FROM set_translations\n    WHERE language = 'Korean'\n);",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
    "reason": [
      "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'"
    ]
  },
  "574": {
    "sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';",
    "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
    "reason": [
      "\"http://stackoverflow.com\" is the WebsiteUrl; user refers to DisplayName"
    ]
  },
  "35": {
    "sql": "SELECT s.AdmEmail1\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Charter School (Y/N)` = 1\nORDER BY f.`Enrollment (K-12)` ASC\nLIMIT 1;",
    "question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1",
    "reason": [
      "Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`"
    ]
  },
  "1297": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS PatientCount\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nJOIN Examination E ON P.ID = E.ID\nWHERE L.`T-CHO` >= 250 AND E.KCT = '-';",
    "question": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'",
    "reason": [
      "total cholesterol is higher than normal refers to `T-CHO` > = 250; negative measure of degree of coagulation refers to KCT = '-' ;"
    ]
  },
  "936": {
    "sql": "SELECT r.fastestLapTime\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND ra.year = 2008 AND ra.name = 'Australian Grand Prix';",
    "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "reason": []
  },
  "527": {
    "sql": "SELECT r.date, r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.artist = 'Kev Walker'\nORDER BY r.date DESC;",
    "question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "reason": [
      "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);"
    ]
  },
  "1052": {
    "sql": "SELECT COUNT(*) AS left_footed_players_under_130_weight\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.weight < 130 AND pa.preferred_foot = 'left';",
    "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
    "reason": [
      "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';"
    ]
  },
  "1400": {
    "sql": "SELECT \n    (COUNT(CASE WHEN type = 'Community Service' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_share\nFROM \n    event\nWHERE \n    strftime('%Y', event_date) = '2019';",
    "question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
    "reason": [
      "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'"
    ]
  },
  "692": {
    "sql": "SELECT \n    b.Name AS BadgeName, \n    b.Date AS BadgeDate, \n    u.CreationDate AS AccountCreationDate, \n    julianday(b.Date) - julianday(u.CreationDate) AS DaysToGetBadge\nFROM \n    badges b\nJOIN \n    users u ON b.UserId = u.Id\nWHERE \n    u.DisplayName = 'Zolomon'\nORDER BY \n    b.Date;",
    "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "reason": [
      "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';"
    ]
  },
  "1102": {
    "sql": "SELECT p.player_name\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating = 77 AND pa.date LIKE '2016-06-23%'\nORDER BY p.birthday ASC\nLIMIT 1;",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
    "reason": [
      "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;"
    ]
  },
  "202": {
    "sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';",
    "question": "How many triple type bonds are there?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
    "reason": [
      "triple type bonds refers to bond_type = '#'"
    ]
  },
  "267": {
    "sql": "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';",
    "question": "List down the bond type for molecules from molecule id TR000 to TR050.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'",
    "reason": [
      "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
    ]
  },
  "1280": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE P.SEX = 'M' AND L.GOT < 60;",
    "question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
    "reason": [
      "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;"
    ]
  },
  "798": {
    "sql": "SELECT s.superhero_name, p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "db_id": "superhero",
    "res": 0,
    "ground_truth": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "reason": [
      "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';"
    ]
  },
  "29": {
    "sql": "SELECT s.OpenDate\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nORDER BY f.[Enrollment (K-12)] DESC\nLIMIT 1;",
    "question": "When did the first-through-twelfth-grade school with the largest enrollment open?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "reason": [
      "K-12 means First-through-twelfth-grade"
    ]
  },
  "467": {
    "sql": "SELECT s.baseSetSize \nFROM sets s \nJOIN set_translations st ON s.code = st.setCode \nWHERE st.translation = 'Hauptset Zehnte Edition';",
    "question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "reason": [
      "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize"
    ]
  },
  "1437": {
    "sql": "SELECT m.member_id, m.first_name, m.last_name, e.event_id, e.event_name, e.event_date\nFROM expense ex\nJOIN member m ON ex.link_to_member = m.member_id\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE ex.approved = 'true'\nAND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
    "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
    "reason": [
      "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'"
    ]
  },
  "585": {
    "sql": "SELECT SUM(v.BountyAmount) AS TotalBountyAmount\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE p.Title LIKE '%data%';",
    "question": "How much is the total bounty amount of the post titled about 'data'",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
    "reason": [
      "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)"
    ]
  },
  "1285": {
    "sql": "SELECT l.Date\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.ID = (SELECT ID FROM Patient WHERE `First Date` = (SELECT MAX(`First Date`) FROM Patient))\nAND l.LDH >= 500;",
    "question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
    "reason": [
      "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;"
    ]
  },
  "206": {
    "sql": "SELECT a.element \nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_id = 'TR004_8_9';\n",
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "reason": [
      "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';"
    ]
  },
  "1246": {
    "sql": "SELECT COUNT(DISTINCT L.ID) \nFROM Laboratory L\nJOIN Examination E ON L.ID = E.ID\nWHERE (L.APTT < 25 OR L.APTT > 35) AND E.Thrombosis = 0;",
    "question": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
    "reason": [
      "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive."
    ]
  },
  "1219": {
    "sql": "WITH LatestLabResults AS (\n    SELECT \n        L.ID,\n        L.UA,\n        P.SEX,\n        ROW_NUMBER() OVER (PARTITION BY L.ID ORDER BY L.Date DESC) AS rn\n    FROM \n        Laboratory L\n    JOIN \n        Patient P ON L.ID = P.ID\n    WHERE \n        (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5)\n)\nSELECT AVG(UA) AS AverageUAIndex\nFROM LatestLabResults\nWHERE rn = 1;",
    "question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )",
    "reason": [
      "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)"
    ]
  },
  "240": {
    "sql": "SELECT element FROM atom WHERE molecule_id = 'TR004';",
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
    "reason": [
      "TR004 is the molecule id;"
    ]
  },
  "337": {
    "sql": "SELECT a.element, b.bond_type\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE a.molecule_id = 'TR002';\n",
    "question": "List the element and bond type included in the molecule with molecule ID of TR002.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
    "reason": [
      "TR002 is the molecule id"
    ]
  },
  "108": {
    "sql": "WITH biggest_loan AS (\n    SELECT account_id, amount\n    FROM loan\n    ORDER BY amount DESC\n    LIMIT 1\n),\nclient_info AS (\n    SELECT c.client_id, c.gender, c.birth_date, d.account_id\n    FROM client c\n    JOIN disp d ON c.client_id = d.client_id\n    JOIN biggest_loan bl ON d.account_id = bl.account_id\n    WHERE d.type = 'OWNER'\n),\naccount_opening_date AS (\n    SELECT a.account_id, a.date AS account_date\n    FROM account a\n    JOIN biggest_loan bl ON a.account_id = bl.account_id\n),\nfirst_transaction AS (\n    SELECT t.account_id, t.amount, t.date\n    FROM trans t\n    JOIN account_opening_date aod ON t.account_id = aod.account_id\n    WHERE t.date > aod.account_date\n    ORDER BY t.date ASC\n    LIMIT 1\n)\nSELECT ci.client_id, ci.gender, ci.birth_date, ft.amount AS first_transaction_amount\nFROM client_info ci\nJOIN first_transaction ft ON ci.account_id = ft.account_id;",
    "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
    "reason": []
  },
  "276": {
    "sql": "SELECT c.atom_id, c.atom_id2\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '#';",
    "question": "Write down the atom IDs of the first and second atoms of triple bond type molecules.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
    "reason": [
      "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';"
    ]
  },
  "1079": {
    "sql": "SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);",
    "question": "Which player is the tallest?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "reason": [
      "tallest player refers to MAX(height);"
    ]
  },
  "1525": {
    "sql": "WITH total_customers AS (\n    SELECT COUNT(DISTINCT CustomerID) AS total\n    FROM transactions_1k\n    WHERE Date = '2012-08-25'\n),\neur_customers AS (\n    SELECT COUNT(DISTINCT t.CustomerID) AS eur_count\n    FROM transactions_1k t\n    JOIN customers c ON t.CustomerID = c.CustomerID\n    WHERE t.Date = '2012-08-25' AND c.Currency = 'EUR'\n)\nSELECT \n    CASE \n        WHEN total > 0 THEN (eur_count * 100.0 / total)\n        ELSE 0\n    END AS percentage\nFROM total_customers, eur_customers;",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
    "reason": [
      "'2012/8/25' can be represented by '2012-08-25'"
    ]
  },
  "463": {
    "sql": "SELECT COUNT(*) AS translation_count\nFROM set_translations\nWHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Angel of Mercy');",
    "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL",
    "reason": [
      "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'"
    ]
  },
  "295": {
    "sql": "SELECT COUNT(*) \nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'h' AND m.label = '+';",
    "question": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'"
    ]
  },
  "1410": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost\nFROM member m\nLEFT JOIN expense e ON m.member_id = e.link_to_member\nWHERE m.member_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY m.member_id;",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
    "reason": [
      "full name refers to first_name, last name"
    ]
  },
  "612": {
    "sql": "SELECT b.Name \nFROM badges b \nJOIN users u ON b.UserId = u.Id \nWHERE u.DisplayName = 'Pierre';",
    "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "reason": []
  },
  "873": {
    "sql": "SELECT r.time\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 743 AND d.forename = 'Bruce' AND d.surname = 'McLaren';",
    "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
    "reason": [
      "race number refers to raceId;"
    ]
  },
  "615": {
    "sql": "SELECT \n    (COUNT(CASE WHEN u.Age BETWEEN 13 AND 19 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_teenagers\nFROM \n    badges b\nJOIN \n    users u ON b.UserId = u.Id\nWHERE \n    b.Name = 'Organizer';",
    "question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
    "reason": [
      "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100"
    ]
  },
  "770": {
    "sql": "SELECT c.colour \nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.full_name = 'Abraham Sapien';",
    "question": "What is the eyes colour of Abraham Sapien?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "reason": [
      "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;"
    ]
  },
  "1044": {
    "sql": "SELECT player_name, birthday FROM Player WHERE substr(birthday, 1, 7) = '1970-10';",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "reason": [
      "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10';"
    ]
  },
  "1206": {
    "sql": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60;",
    "question": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60",
    "reason": [
      "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60; when refers to DATE"
    ]
  },
  "1504": {
    "sql": "SELECT AVG(Amount * Price) AS average_total_price\nFROM transactions_1k\nWHERE strftime('%Y-%m', Date) = '2012-01';",
    "question": "What is the average total price of the transactions taken place in January, 2012?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'",
    "reason": [
      "In January, 2012 means Date contains '2012-01'"
    ]
  },
  "1251": {
    "sql": "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;",
    "question": "How many patients with an Ig G higher than normal?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
    "reason": [
      "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;"
    ]
  },
  "1344": {
    "sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "reason": [
      "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'"
    ]
  },
  "13": {
    "sql": "SELECT s.Phone\nFROM satscores sc\nJOIN schools s ON sc.cds = s.CDSCode\nORDER BY (sc.NumGE1500 * 1.0 / sc.NumTstTakr) DESC\nLIMIT 3;",
    "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
    "reason": [
      "Excellence rate = NumGE1500 / NumTstTakr"
    ]
  },
  "1198": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS Female_APS_Patients\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE P.SEX = 'F' AND E.Diagnosis = 'APS';",
    "question": "How many female patients were given an APS diagnosis?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
    "reason": [
      "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'"
    ]
  },
  "1003": {
    "sql": "WITH canadian_gp AS (\n    SELECT raceId\n    FROM races\n    WHERE name = 'Canadian Grand Prix'\n),\naccident_counts AS (\n    SELECT r.driverId, d.forename, d.surname, COUNT(*) AS accident_count\n    FROM results r\n    JOIN canadian_gp c ON r.raceId = c.raceId\n    JOIN drivers d ON r.driverId = d.driverId\n    WHERE r.statusId = 3\n    GROUP BY r.driverId, d.forename, d.surname\n)\nSELECT forename, surname, accident_count\nFROM accident_counts\nORDER BY accident_count DESC\nLIMIT 1;",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
    "reason": [
      "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n"
    ]
  },
  "1150": {
    "sql": "SELECT \n    (COUNT(CASE WHEN year(Birthday) > 1930 AND SEX = 'F' THEN 1 END) * 100.0 / \n    COUNT(CASE WHEN SEX = 'F' THEN 1 END)) AS percentage\nFROM \n    Patient;",
    "question": "What is the percentage of female patient were born after 1930?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "reason": [
      "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')"
    ]
  },
  "1061": {
    "sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;",
    "question": "How many players whose first names are Adam and weigh more than 170?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'",
    "reason": [
      "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"
    ]
  },
  "1113": {
    "sql": "SELECT ta.defenceAggressionClass \nFROM Team_Attributes ta \nJOIN Team t ON ta.team_api_id = t.team_api_id \nWHERE t.team_long_name = 'Hannover 96' \nAND ta.date LIKE '2015-09-10%';",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
    "reason": [
      "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';"
    ]
  },
  "718": {
    "sql": "SELECT COUNT(DISTINCT hero_id) \nFROM hero_power \nWHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength');",
    "question": "How many superheroes have the super power of \"Super Strength\"?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
    "reason": [
      "super power of \"Super Strength\" refers to power_name = 'Super Strength'"
    ]
  },
  "400": {
    "sql": "SELECT DISTINCT setCode \nFROM set_translations \nWHERE language = 'Spanish';",
    "question": "Lists the set code of all cards translated into Spanish.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "reason": [
      "Spanish refer to language; set code refers to setCode"
    ]
  },
  "1358": {
    "sql": "SELECT m.first_name, m.last_name\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nORDER BY i.date_received ASC\nLIMIT 1;",
    "question": "Who was the first one paid his/her dues? Tell the full name.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
    "reason": [
      "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'"
    ]
  },
  "1378": {
    "sql": "SELECT MAX(spent) AS highest_budget_spend FROM budget;",
    "question": "What is the highest amount of budget spend for an event?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT MAX(spent) FROM budget",
    "reason": [
      "highest amount of budget spend refers to MAX(spent)"
    ]
  },
  "316": {
    "sql": "SELECT DISTINCT a.molecule_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'c' AND m.label = '-';",
    "question": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic"
    ]
  },
  "347": {
    "sql": "SELECT c.id, r.text AS ruling_text, c.hasContentWarning\nFROM cards c\nLEFT JOIN rulings r ON c.uuid = r.uuid\nWHERE c.artist = 'Stephen Daniele';\n",
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
    "reason": [
      "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id"
    ]
  },
  "1152": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') AS outpatient_count,\n    (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS inpatient_count,\n    (1.0 * (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') / \n    (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+')) AS outpatient_to_inpatient_ratio\nFROM Patient\nWHERE Diagnosis = 'SLE'\nLIMIT 1;",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "reason": [
      "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')"
    ]
  },
  "846": {
    "sql": "SELECT d.driverRef\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 20 AND q.q1 IS NOT NULL\nORDER BY q.q1 DESC\nLIMIT 5;",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
    "reason": [
      "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;"
    ]
  },
  "1516": {
    "sql": "SELECT COUNT(*) AS NumberOfTransactions\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-26'\n  AND t.Time < '13:00:00'\n  AND c.Currency = 'CZK';",
    "question": "How many transactions were paid in CZK in the morning of 2012/8/26?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
    "reason": [
      "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'"
    ]
  },
  "968": {
    "sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';",
    "question": "What is reference name of Robert Kubica?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
    "reason": [
      "reference name refers to driverRef;"
    ]
  },
  "1014": {
    "sql": "SELECT c.name AS circuit_name, r.name AS race_name, res.time AS lap_record\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN results res ON r.raceId = res.raceId\nWHERE c.country = 'Italy'\nAND res.time IS NOT NULL\nORDER BY res.time ASC;",
    "question": "Please list the lap records for the circuits in Italy.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "reason": [
      "lap record means the fastest time recorded which refers to time"
    ]
  },
  "1521": {
    "sql": "SELECT COUNT(*) \nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-26' \nAND t.Time BETWEEN '08:00:00' AND '09:00:00'\nAND g.Country = 'CZE';",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
    "reason": [
      "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'"
    ]
  },
  "1250": {
    "sql": "SELECT DISTINCT P.ID\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.\"U-PRO\" > 0 AND L.\"U-PRO\" < 30 AND P.Diagnosis = 'SLE';",
    "question": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
    "reason": [
      "normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';"
    ]
  },
  "282": {
    "sql": "SELECT \n    (SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(a.element)) AS ratio,\n    m.label\nFROM \n    atom a\nJOIN \n    molecule m ON a.molecule_id = m.molecule_id\nWHERE \n    a.molecule_id = 'TR006'\nGROUP BY \n    m.label;",
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
    "reason": [
      "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
    ]
  },
  "1483": {
    "sql": "SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
    "reason": [
      "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."
    ]
  },
  "63": {
    "sql": "SELECT \n    School AS \"School Name\",\n    City AS \"City\",\n    AdmFName1 || ' ' || AdmLName1 AS \"Administrator 1\",\n    AdmFName2 || ' ' || AdmLName2 AS \"Administrator 2\",\n    AdmFName3 || ' ' || AdmLName3 AS \"Administrator 3\"\nFROM \n    schools\nWHERE \n    Charter = 1 \n    AND CharterNum = '00D2';",
    "question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
    "reason": [
      "Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name"
    ]
  },
  "876": {
    "sql": "SELECT COUNT(*) AS drivers_not_finished\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nJOIN status s ON r.statusId = s.statusId\nWHERE rc.date = '2015-11-29' AND s.status != 'Finished';",
    "question": "For the race happened in 2015/11/29, how many drivers did not finish the game?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL",
    "reason": [
      "game and race are synonyms; drivers who didn't finish the race should have record in time;"
    ]
  },
  "1047": {
    "sql": "SELECT p.player_name, pa.heading_accuracy\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francois Affolter'\nAND pa.date = '2014-09-18 00:00:00';",
    "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "reason": [
      "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';"
    ]
  },
  "1191": {
    "sql": "SELECT \n    (SUM(CASE WHEN p.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    Patient p\nWHERE \n    p.SEX = 'M' AND \n    strftime('%Y', p.`First Date`) = '1981';",
    "question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'",
    "reason": [
      "male refers to SEX = 'M'; first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'; BEHCET refers to diagnosis; calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)"
    ]
  },
  "513": {
    "sql": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;",
    "question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "reason": [
      "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)"
    ]
  },
  "1189": {
    "sql": "WITH AvgACLIgM AS (\n    SELECT AVG(`aCL IgM`) AS avg_value FROM Examination\n)\nSELECT COUNT(DISTINCT E.ID) AS patient_count\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE E.Thrombosis = 2\nAND E.ANA = 'S'\nAND E.`aCL IgM` > (SELECT avg_value * 1.2 FROM AvgACLIgM);",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
    "reason": [
      "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)"
    ]
  },
  "98": {
    "sql": "WITH approved_loans_1997 AS (\n    SELECT account_id, amount\n    FROM loan\n    WHERE strftime('%Y', date) = '1997' AND status = 'approved'\n),\nmin_loan_amount AS (\n    SELECT MIN(amount) AS min_amount\n    FROM approved_loans_1997\n)\nSELECT a.account_id, a.district_id, a.frequency, a.date\nFROM account a\nJOIN approved_loans_1997 al ON a.account_id = al.account_id\nJOIN min_loan_amount m ON al.amount = m.min_amount\nWHERE a.frequency = 'POPLATEK TYDNE';",
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
    "reason": [
      "'POPLATEK TYDNE' stands for weekly issuance"
    ]
  },
  "204": {
    "sql": "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';",
    "question": "Of the first 100 molecules in number order, how many are carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
    "reason": [
      "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic"
    ]
  },
  "516": {
    "sql": "SELECT COUNT(DISTINCT c.id) \nFROM cards c \nJOIN foreign_data fd ON c.uuid = fd.uuid \nWHERE c.artist = 'Volkan Baǵa' AND fd.language = 'French';",
    "question": "How many cards did Volkan BaÇµa illustrated whose foreign language is in French?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French' GROUP BY T1.id ) AS T3",
    "reason": [
      "Volkan BaÇµa refers to artist = 'Volkan Baǵa'; foreign language is in French refers to language = 'French'"
    ]
  },
  "162": {
    "sql": "SELECT d.A3 AS region\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE c.client_id = 3541;",
    "question": "What is the region of the client with the id 3541 from?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
    "reason": [
      "A3 refers to region"
    ]
  },
  "26": {
    "sql": "SELECT s.School AS \"School Name\", s.Street, s.City, s.State, s.Zip\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.County = 'Monterey'\n  AND f.\"High Grade\" LIKE '%12%'\n  AND f.\"FRPM Count (Ages 5-17)\" > 800;",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
    "reason": [
      "Full communication address should include Street, City, State and zip code if any."
    ]
  },
  "536": {
    "sql": "SELECT COUNT(*) \nFROM users \nWHERE Views > 10 \nAND strftime('%Y', CreationDate) > '2013';",
    "question": "How many users with more than 10 views created their account after the year 2013?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
    "reason": [
      "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013"
    ]
  },
  "776": {
    "sql": "SELECT s.superhero_name, r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.full_name = 'Charles Chandler';",
    "question": "Provide the hero name and race of Charles Chandler.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "reason": [
      "hero name refers to superhero_name; Charles Chandler is the full name of superhero;"
    ]
  },
  "361": {
    "sql": "SELECT COUNT(*) \nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.status = 'restricted' AND c.isTextless = 0;",
    "question": "How many cards of legalities whose status is restricted have text boxes?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0",
    "reason": [
      "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;"
    ]
  },
  "497": {
    "sql": "SELECT s.type \nFROM sets s \nJOIN set_translations st ON s.code = st.setCode \nWHERE st.translation = 'Huitième édition';",
    "question": "List the expansion type of the set \"Huitième édition\".",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huitième édition' )",
    "reason": [
      "the set \"Huitième édition\" refers to translation = 'Huitième édition'; expansion type refers to type"
    ]
  },
  "999": {
    "sql": "SELECT r.name AS race_name\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.fastestLapTime IS NOT NULL\nORDER BY res.fastestLapTime ASC\nLIMIT 1;",
    "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "reason": [
      "Fastest lap speed refers to MIN(fastestLapTime)\n\n"
    ]
  },
  "464": {
    "sql": "SELECT c.name\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE st.translation = 'Hauptset Zehnte Edition';",
    "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "reason": [
      "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'"
    ]
  },
  "1139": {
    "sql": "SELECT home_team_goal, away_team_goal \nFROM Match \nWHERE date LIKE '2008-09-24%' \nAND league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League');",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
    "reason": [
      "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal"
    ]
  },
  "329": {
    "sql": "SELECT a.molecule_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+'\nGROUP BY a.molecule_id\nORDER BY COUNT(a.atom_id) DESC\nLIMIT 1;",
    "question": "Which carcinogenic molecule have the highest number of atoms consisted in it?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t",
    "reason": [
      "label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))"
    ]
  },
  "727": {
    "sql": "SELECT p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'Sauron';",
    "question": "Who is the publisher of Sauron?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "reason": [
      "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'"
    ]
  },
  "771": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Flight';",
    "question": "List the name of superheroes with flight power.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "reason": [
      "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';"
    ]
  },
  "885": {
    "sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;",
    "question": "State the name and date of the last round of race in year 1999.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
    "reason": [
      "the last round refers to max(round);"
    ]
  },
  "993": {
    "sql": "SELECT name, location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';",
    "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "reason": [
      "coordinates expressed in latitude and longitude refers to (lat, lng)"
    ]
  },
  "80": {
    "sql": "SELECT s.School, s.Latitude, f.`School Type`\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nORDER BY s.Latitude DESC\nLIMIT 1;",
    "question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1",
    "reason": []
  },
  "1457": {
    "sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.cost > (SELECT AVG(cost) FROM expense);",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "reason": [
      "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)"
    ]
  },
  "557": {
    "sql": "SELECT \n    (COUNT(CASE WHEN u.Age > 65 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nWHERE \n    p.Score > 5;",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "reason": [
      "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100"
    ]
  },
  "1197": {
    "sql": "SELECT p.`First Date`, e.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID = 48473 ORDER BY p.`First Date` LIMIT 1;",
    "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
    "reason": [
      "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id"
    ]
  },
  "1233": {
    "sql": "SELECT p.ID, l.GLU\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE strftime('%Y', p.Description) = '1991'\nAND l.GLU < 180;",
    "question": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180",
    "reason": [
      "blood glucose (GLU) index that were within normal range refers to GLU < 180; data that was first recorded in 1991 refers to year(Description) = 1991;"
    ]
  },
  "444": {
    "sql": "SELECT fd.name AS foreign_name, c.type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.watermark = 'boros';",
    "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
    "reason": []
  },
  "1520": {
    "sql": "WITH target_customer AS (\n    SELECT CustomerID\n    FROM transactions_1k\n    WHERE Price = 124.05 AND Date = '2012-08-24'\n)\nSELECT Date, Consumption\nFROM yearmonth\nWHERE CustomerID IN (SELECT CustomerID FROM target_customer) AND Date LIKE '2012-01%';",
    "question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'",
    "reason": [
      "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning."
    ]
  },
  "1072": {
    "sql": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');",
    "question": "What is the average overall rating of the football player Aaron Doran?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "reason": [
      "average overall rating = AVG(overall_rating);"
    ]
  },
  "381": {
    "sql": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Chinese Simplified';",
    "question": "List down the name of artists for cards in Chinese Simplified.",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "reason": [
      "Chinese Simplified' is the language;"
    ]
  },
  "801": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Male')) * 1.0 /\n    (SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')) AS male_to_female_ratio;",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "reason": [
      "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';"
    ]
  },
  "638": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Organizer';",
    "question": "List all the name of users that obtained the Organizer Badges.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "reason": [
      "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';"
    ]
  },
  "433": {
    "sql": "WITH chinese_cards AS (\n    SELECT DISTINCT c.uuid\n    FROM cards c\n    JOIN foreign_data fd ON c.uuid = fd.uuid\n    WHERE fd.language = 'Chinese Simplified'\n),\nonline_chinese_cards AS (\n    SELECT uuid\n    FROM cards\n    WHERE uuid IN (SELECT uuid FROM chinese_cards) AND isOnlineOnly = 1\n)\nSELECT \n    (COUNT(DISTINCT online_chinese_cards.uuid) * 100.0 / \n    NULLIF(COUNT(DISTINCT chinese_cards.uuid), 0) AS percentage\nFROM chinese_cards\nLEFT JOIN online_chinese_cards ON chinese_cards.uuid = online_chinese_cards.uuid;",
    "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
    "reason": [
      "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100"
    ]
  },
  "745": {
    "sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
    "question": "Give the publisher ID of Star Trek.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "reason": [
      "Star Trek is the publisher_name;"
    ]
  },
  "690": {
    "sql": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'Emmett'\nORDER BY b.Date DESC\nLIMIT 1;",
    "question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "reason": [
      "the latest badge refers to Name FROM badges where MAX(Date);"
    ]
  },
  "974": {
    "sql": "SELECT r.year FROM results res JOIN races r ON res.raceId = r.raceId WHERE res.fastestLapTime IS NOT NULL ORDER BY res.fastestLapTime ASC LIMIT 1;",
    "question": "State the racing year which has the fastest lap time?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL",
    "reason": [
      "'has the fastest lap time?' refers to fastestLapTime has values"
    ]
  },
  "1395": {
    "sql": "SELECT COUNT(DISTINCT a.link_to_member) AS member_count\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Community Theater' AND strftime('%Y', e.event_date) = '2019';",
    "question": "How many members did attend the event 'Community Theater' in 2019?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "reason": [
      "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019"
    ]
  },
  "832": {
    "sql": "SELECT superhero_name\nFROM superhero\nWHERE height_cm = (SELECT MAX(height_cm) FROM superhero)\nLIMIT 1;",
    "question": "Name the tallest superhero.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "reason": [
      "tallest superhero refers to MAX(height_cm);"
    ]
  },
  "587": {
    "sql": "SELECT p.Title, c.Text AS Comment, AVG(p.ViewCount) AS AverageViewCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.Tags LIKE '%<humor>%'\nGROUP BY p.Id, p.Title, c.Text;",
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
    "reason": [
      "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)"
    ]
  },
  "1066": {
    "sql": "SELECT t.team_short_name, ta.buildUpPlayPassingClass \nFROM Team t \nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id \nWHERE t.team_short_name = 'CLB';",
    "question": "What is the passing class of CLB team?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
    "reason": [
      "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';"
    ]
  },
  "117": {
    "sql": "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_paid_no_issue\nFROM loan;",
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
    "reason": [
      "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%"
    ]
  },
  "166": {
    "sql": "SELECT COUNT(*) \nFROM account \nWHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');",
    "question": "How many of the accounts are from Jesenik district?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
    "reason": []
  },
  "318": {
    "sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';",
    "question": "What is the molecule id of bond id TR001_1_7?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
    "reason": []
  },
  "1019": {
    "sql": "SELECT AVG(l.milliseconds) AS average_lap_time_ms\nFROM lapTimes l\nJOIN races r ON l.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Italy';",
    "question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
    "reason": [
      "average = AVG(milliseconds)"
    ]
  },
  "575": {
    "sql": "SELECT b.Name \nFROM badges b \nJOIN users u ON b.UserId = u.Id \nWHERE u.DisplayName = 'SilentGhost';",
    "question": "What is the badge name that user 'SilentGhost' obtained?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "reason": [
      "\"SilentGhost\" is the DisplayName of user;"
    ]
  },
  "1324": {
    "sql": "SELECT AVG(attendance_count) AS average_attendance\nFROM (\n    SELECT COUNT(*) AS attendance_count\n    FROM event e\n    JOIN attendance a ON e.event_id = a.link_to_event\n    WHERE e.event_date LIKE '2020%'\n    GROUP BY e.event_id\n);",
    "question": "What is the average attendance of meetings in 2020?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
    "reason": [
      "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))"
    ]
  },
  "845": {
    "sql": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.height_cm > (SELECT 0.8 * AVG(height_cm) FROM superhero);",
    "question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80",
    "reason": [
      "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);"
    ]
  },
  "225": {
    "sql": "SELECT DISTINCT m.molecule_id, m.label\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = ' = '\nORDER BY m.label ASC\nLIMIT 5;",
    "question": "Please list top five molecules that have double bonds in alphabetical order.",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
    "reason": [
      "double bond refers to bond_type = ' = ';"
    ]
  },
  "1402": {
    "sql": "SELECT t_shirt_size, COUNT(t_shirt_size) AS size_count FROM member GROUP BY t_shirt_size ORDER BY size_count DESC LIMIT 1;",
    "question": "What is the most popular size of t-shirt ordered by the club members?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
    "reason": [
      "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))"
    ]
  },
  "53": {
    "sql": "SELECT SUM(s.NumTstTakr) AS TotalTestTakers\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE sc.MailCity = 'Fresno';",
    "question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "reason": []
  },
  "1501": {
    "sql": "SELECT DISTINCT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE strftime('%Y%m', t.Date) = '201306';",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "reason": [
      "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;"
    ]
  },
  "1016": {
    "sql": "WITH austrian_circuit AS (\n    SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix'\n),\nrace_at_austria AS (\n    SELECT raceId FROM races WHERE circuitId = (SELECT circuitId FROM austrian_circuit)\n),\nlap_record_driver AS (\n    SELECT r.driverId, r.raceId\n    FROM results r\n    JOIN race_at_austria ra ON r.raceId = ra.raceId\n    WHERE r.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE raceId = ra.raceId)\nSELECT ps.duration\nFROM pitStops ps\nJOIN lap_record_driver lrd ON ps.raceId = lrd.raceId AND ps.driverId = lrd.driverId;",
    "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
    "reason": [
      "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration"
    ]
  },
  "1497": {
    "sql": "SELECT c.CustomerID, c.Segment, y.Consumption\nFROM customers c\nJOIN yearmonth y ON c.CustomerID = y.CustomerID\nWHERE c.Segment = 'SME' AND y.Date = '201206'\nORDER BY y.Consumption ASC\nLIMIT 1;",
    "question": "Which SME customer consumed the least in June 2012?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "reason": [
      "June 2012 refers to yearmonth.date = '201206'"
    ]
  },
  "91": {
    "sql": "SELECT \n    AVG(A12) AS avg_unemployment_1995,\n    AVG(A13) AS avg_unemployment_1996,\n    CASE \n        WHEN AVG(A12) > AVG(A13) THEN '1995 has a higher average unemployment rate'\n        WHEN AVG(A12) < AVG(A13) THEN '1996 has a higher average unemployment rate'\n        ELSE 'Both years have the same average unemployment rate'\n    END AS comparison\nFROM district;",
    "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
    "reason": [
      "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996"
    ]
  },
  "928": {
    "sql": "SELECT d.driverRef\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races rc ON r.raceId = rc.raceId\nWHERE rc.name = 'Canadian Grand Prix' AND rc.year = 2007 AND r.position = 1;",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
    "reason": [
      "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';"
    ]
  },
  "1481": {
    "sql": "",
    "error": "something went wrong, tool did not call.",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
    "reason": [
      "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year."
    ]
  },
  "1222": {
    "sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE P.SEX = 'M' AND L.CRE >= 1.5;",
    "question": "How many male patients are are with creatinine index out of the normal range?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'",
    "reason": [
      "creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'"
    ]
  },
  "749": {
    "sql": "SELECT sp.power_name \nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Deathlok';",
    "question": "Provide the superpowers of the superhero called Deathlok.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "reason": [
      "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'"
    ]
  },
  "1433": {
    "sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box';",
    "question": "Which countries have zip codes with post office boxes?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
    "reason": [
      "zip codes that have post office boxes refers to type = 'PO Box'"
    ]
  },
  "996": {
    "sql": "SELECT AVG(race_count) AS annual_average_races\nFROM (\n    SELECT year, COUNT(*) AS race_count\n    FROM races\n    WHERE date BETWEEN '2000-01-01' AND '2010-12-31'\n    GROUP BY year\n);",
    "question": "What is the annual average number of races held during the first 10 years of the 21st century?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
    "reason": [
      "races in date between '2000-01-01' and '2010-12-31'"
    ]
  },
  "534": {
    "sql": "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;",
    "question": "What is the display name of the user who has the most number of views?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "reason": [
      "user who has the most number of view refers to Max(Views)"
    ]
  },
  "1357": {
    "sql": "SELECT i.date_received\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.first_name = 'Connor' AND m.last_name = 'Hilton';",
    "question": "State the date Connor Hilton paid his/her dues.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "reason": [
      "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';"
    ]
  },
  "77": {
    "sql": "SELECT \n    `School Name`,\n    (`FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100) AS `Percent Eligible FRPM (Ages 5-17)`\nFROM \n    frpm\nWHERE \n    `County Name` = 'Los Angeles'\n    AND `Low Grade` = 'K'\n    AND `High Grade` = '9';",
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
    "reason": [
      "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100"
    ]
  },
  "858": {
    "sql": "SELECT c.nationality \nFROM constructors c \nJOIN constructorResults cr ON c.constructorId = cr.constructorId \nWHERE cr.raceId = 24 AND cr.points = 1;",
    "question": "Which country is the constructor which got 1 point in the race No. 24 from?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
    "reason": [
      "race number refers to raceId;"
    ]
  },
  "1221": {
    "sql": "SELECT P.ID, P.SEX, P.Birthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Diagnosis = 'RA' AND L.UN < 30;",
    "question": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'",
    "reason": [
      "within the UN normal index refers to UN < 30; Diagnosis = 'RA'"
    ]
  },
  "40": {
    "sql": "SELECT s.Phone\nFROM schools s\nJOIN satscores sc ON s.CDSCode = sc.cds\nWHERE s.District = 'Fresno Unified'\nORDER BY sc.AvgScrRead ASC\nLIMIT 1;",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "reason": [
      "Fresno Unified is a name of district;"
    ]
  },
  "1155": {
    "sql": "SELECT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.LDH > 500;",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "db_id": "thrombosis_prediction",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "reason": [
      "LDH beyond normal range refers to LDH > '500';"
    ]
  },
  "1337": {
    "sql": "SELECT SUM(amount) AS total_budgeted_amount\nFROM budget\nWHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Speaker');",
    "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
    "reason": [
      "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'"
    ]
  },
  "790": {
    "sql": "SELECT (e.weight_kg - c.weight_kg) AS weight_difference\nFROM superhero e, superhero c\nWHERE e.full_name = 'Emil Blonsky'\nAND c.full_name = 'Charles Chandler';",
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
    "reason": [
      "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;"
    ]
  },
  "759": {
    "sql": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);",
    "question": "What is the eye clolour of the heaviest superhero?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1",
    "reason": [
      "the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;"
    ]
  },
  "1496": {
    "sql": "SELECT c.Segment, SUM(ym.Consumption) AS TotalConsumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE ym.Date = '201309'\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;",
    "question": "Which client segment consumed the least in September 2013?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "reason": [
      "September 2013 refers to yearmonth.date = '201309'"
    ]
  },
  "1123": {
    "sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);",
    "question": "What is the name of players with the highest potential?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1",
    "reason": [
      "highest potential refers to MAX(potential)"
    ]
  },
  "779": {
    "sql": "SELECT COUNT(*) AS power_count\nFROM hero_power\nWHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo');",
    "question": "How many powers does Amazo hero have?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
    "reason": [
      "Amazo hero refers to superhero_name = 'Amazo';"
    ]
  },
  "134": {
    "sql": "WITH max_crime_district AS (\n    SELECT district_id\n    FROM district\n    ORDER BY A16 DESC\n    LIMIT 1\n)\nSELECT COUNT(*) AS accounts_opened\nFROM account\nWHERE district_id = (SELECT district_id FROM max_crime_district);",
    "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
    "reason": [
      "A16 stands for no. of committed crimes 1996"
    ]
  },
  "73": {
    "sql": "SELECT f.\"Free Meal Count (Ages 5-17)\"\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.School = 'Youth Authority School' AND s.MailStreet = 'PO Box 1040';",
    "question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?",
    "db_id": "california_schools",
    "res": 0,
    "ground_truth": "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'",
    "reason": []
  },
  "20": {
    "sql": "SELECT COUNT(DISTINCT CDSCode) \nFROM frpm \nWHERE `County Name` = 'Amador' \nAND `Low Grade` = '9' \nAND `High Grade` = '12';",
    "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
    "db_id": "california_schools",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
    "reason": []
  },
  "767": {
    "sql": "SELECT COUNT(*) * 1.0 / SUM(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) AS average_no_skin_colour\nFROM superhero;",
    "question": "What is the average of superheroes with no skin colour?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
    "reason": [
      "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;"
    ]
  },
  "116": {
    "sql": "WITH first_loan_client AS (\n    SELECT l.account_id, c.client_id\n    FROM loan l\n    JOIN account a ON l.account_id = a.account_id\n    JOIN disp d ON a.account_id = d.account_id\n    JOIN client c ON d.client_id = c.client_id\n    WHERE l.date = '1993-07-05'\n    ORDER BY l.loan_id\n    LIMIT 1\n),\nbalance_b AS (\n    SELECT t.account_id, t.balance\n    FROM trans t\n    JOIN first_loan_client flc ON t.account_id = flc.account_id\n    WHERE t.date = '1993-03-22'\n    ORDER BY t.trans_id DESC\n    LIMIT 1\n),\nbalance_a AS (\n    SELECT t.account_id, t.balance\n    FROM trans t\n    JOIN first_loan_client flc ON t.account_id = flc.account_id\n    WHERE t.date = '1998-12-27'\n    ORDER BY t.trans_id DESC\n    LIMIT 1\n)\nSELECT \n    ((ba.balance - bb.balance) * 100.0 / bb.balance) AS increase_rate\nFROM balance_a ba\nJOIN balance_b bb ON ba.account_id = bb.account_id;",
    "error": "something went wrong, tool did not call.",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "reason": [
      "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%"
    ]
  },
  "862": {
    "sql": "SELECT COUNT(*) AS drivers_not_finished\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007)\nAND time IS NULL;",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "reason": [
      "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);"
    ]
  },
  "955": {
    "sql": "SELECT r.year, AVG(\n    CAST(SUBSTR(res.time, 1, 2) AS INTEGER) * 3600 +\n    CAST(SUBSTR(res.time, 4, 2) AS INTEGER) * 60 +\n    CAST(SUBSTR(res.time, 7, 2) AS INTEGER) +\n    CAST(SUBSTR(res.time, 10, 3) AS REAL) / 1000\n) AS average_time_seconds\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.position = 1 AND res.time IS NOT NULL AND r.year < 1975\nGROUP BY r.year;",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "reason": [
      "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;"
    ]
  },
  "1012": {
    "sql": "SELECT c.lat, c.lng\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nJOIN circuits c ON ra.circuitId = c.circuitId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND r.time = (SELECT MIN(time) FROM results WHERE driverId = d.driverId);",
    "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
    "reason": [
      "fastest lap refers to MIN(time)"
    ]
  },
  "132": {
    "sql": "SELECT AVG(l.amount) AS average_loan_amount\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE c.gender = 'M';",
    "question": "What is the average loan amount by male borrowers?",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
    "reason": [
      "Male refers to gender = 'M'"
    ]
  },
  "1216": {
    "sql": "SELECT P.ID, P.Birthday, L.ALB\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5)\nORDER BY P.Birthday DESC;",
    "question": "Sort in descending order all patients by birthday for male patient with albumin not within range.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
    "reason": [
      "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5"
    ]
  },
  "624": {
    "sql": "SELECT DisplayName FROM users WHERE Id = 30;",
    "question": "What is the name of user with the ID of 30?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName FROM users WHERE Id = 30",
    "reason": [
      "name of user refers to DisplayName;"
    ]
  },
  "213": {
    "sql": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20') OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "reason": [
      "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around"
    ]
  },
  "1192": {
    "sql": "SELECT DISTINCT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Admission = '-'\nAND L.Date LIKE '1991-10%'\nAND L.`T-BIL` < 2.0;",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
    "reason": [
      "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; "
    ]
  },
  "902": {
    "sql": "SELECT r.name AS race_name, r.date, r.year, r.round \nFROM results res \nJOIN drivers d ON res.driverId = d.driverId \nJOIN races r ON res.raceId = r.raceId \nWHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 20;",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
    "reason": [
      "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20"
    ]
  },
  "894": {
    "sql": "SELECT d.forename, d.surname, r.name AS race_name, lt.milliseconds AS best_lap_time\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nJOIN races r ON lt.raceId = r.raceId\nWHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes);",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "reason": [
      "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name"
    ]
  },
  "930": {
    "sql": "SELECT r.name AS race_name, rs.rank, rs.positionText, rs.points\nFROM results rs\nJOIN races r ON rs.raceId = r.raceId\nJOIN drivers d ON rs.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY rs.rank ASC\nLIMIT 1;",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
    "reason": [
      "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"
    ]
  },
  "1151": {
    "sql": "SELECT \n    ROUND((COUNT(CASE WHEN Admission = '+' THEN 1 END) * 100.0 / COUNT(*)), 2) AS Percentage_Inpatient\nFROM \n    Patient\nWHERE \n    strftime('%Y', Birthday) BETWEEN '1930' AND '1940';",
    "question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'",
    "reason": [
      "patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'; inpatient refers to Admission = '+'"
    ]
  },
  "744": {
    "sql": "SELECT \n    (SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics') - \n    (SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics') AS difference;",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "reason": [
      "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))"
    ]
  },
  "764": {
    "sql": "SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 1;",
    "question": "What are the superpowers of heroes with ID 1?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
    "reason": [
      "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;"
    ]
  },
  "1420": {
    "sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.position = 'Vice President';",
    "question": "State the name of major that Vice President has joined.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "reason": [
      "name of major refers to major_name; 'Vice President' is position of Student Club"
    ]
  },
  "503": {
    "sql": "SELECT s.type \nFROM cards c \nJOIN sets s ON c.setCode = s.code \nWHERE c.name = 'Samite Pilgrim';",
    "question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )",
    "reason": [
      "expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'"
    ]
  },
  "565": {
    "sql": "SELECT p.ClosedDate IS NULL AS is_well_finished\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "db_id": "codebase_community",
    "res": 0,
    "ground_truth": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "reason": [
      "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa"
    ]
  },
  "1470": {
    "sql": "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';",
    "question": "How many gas stations in CZE has Premium gas?",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
    "reason": []
  },
  "1026": {
    "sql": "SELECT t.team_long_name, COUNT(*) AS loss_count\nFROM Match m\nJOIN Team t ON m.home_team_api_id = t.team_api_id\nWHERE m.season = '2015/2016' AND m.home_team_goal < m.away_team_goal\nGROUP BY m.home_team_api_id\nORDER BY loss_count ASC\nLIMIT 1;",
    "question": "Which home team had lost the fewest matches in the 2016 season?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1",
    "reason": [
      "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';"
    ]
  },
  "219": {
    "sql": "SELECT \n    (SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(b.bond_id)) AS percentage\nFROM \n    molecule m\nJOIN \n    bond b ON m.molecule_id = b.molecule_id\nWHERE \n    m.label = '+';",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "db_id": "toxicology",
    "res": 0,
    "ground_truth": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "reason": [
      "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'"
    ]
  },
  "364": {
    "sql": "SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.name = 'Cloudchaser Eagle';",
    "question": "What is the status of card \"Cloudchaser Eagle\"?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "reason": [
      "Cloudchaser Eagle is the name of card;"
    ]
  },
  "927": {
    "sql": "SELECT d.forename, d.surname\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nORDER BY r.fastestLapSpeed DESC\nLIMIT 1;",
    "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "reason": []
  },
  "262": {
    "sql": "SELECT DISTINCT b.molecule_id\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '-' AND m.label = '-';",
    "question": "Among the single bond molecule id, which molecules are not carcinogenic?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
    "reason": [
      "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"
    ]
  },
  "1092": {
    "sql": "SELECT l.name AS league_name\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE m.season = '2008/2009'\nGROUP BY m.league_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "db_id": "european_football_2",
    "res": 0,
    "ground_truth": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
    "reason": [
      "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');"
    ]
  },
  "1286": {
    "sql": "SELECT COUNT(DISTINCT P.ID) AS AdmittedPatientsWithHighALP\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.ALP >= 300 AND P.Admission = '+';",
    "question": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'",
    "reason": [
      "abnormal alkaliphophatase level refers to ALP > = 300; admitted to the hospital refers to Admission = '+';"
    ]
  },
  "369": {
    "sql": "SELECT COUNT(DISTINCT c.uuid) \nFROM cards c \nJOIN foreign_data fd ON c.uuid = fd.uuid \nWHERE fd.language = 'German' AND c.isReprint = 1;",
    "question": "How many cards that illusrtated in German have been reprinted?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1",
    "reason": [
      "German' is the language; reprinted refers to isReprint = 1;"
    ]
  },
  "674": {
    "sql": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);",
    "question": "Who has the highest reputation? Please give the display name.",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "reason": [
      "the highest reputation refers to MAX(Reputation);"
    ]
  },
  "1391": {
    "sql": "SELECT \n    CAST(SUM(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / \n    NULLIF(SUM(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END), 0) AS finance_to_physics_ratio\nFROM \n    member\nJOIN \n    major ON member.link_to_major = major.major_id;",
    "question": "What is the ratio between students majored in finance and physics?",
    "db_id": "student_club",
    "res": 0,
    "ground_truth": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
    "reason": [
      "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))"
    ]
  },
  "671": {
    "sql": "SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Autobiographer'\nORDER BY b.Date ASC\nLIMIT 1;",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "reason": [
      "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);"
    ]
  },
  "105": {
    "sql": "SELECT a.district_id\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.date = '1994-08-25';",
    "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
    "db_id": "financial",
    "res": 1,
    "ground_truth": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
    "reason": []
  },
  "868": {
    "sql": "SELECT c.lat, c.lng\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.name = 'Malaysian Grand Prix';",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "db_id": "formula_1",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "reason": [
      "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'"
    ]
  },
  "146": {
    "sql": "SELECT DISTINCT c.client_id, c.gender, c.birth_date\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN card cd ON d.disp_id = cd.disp_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE c.gender = 'F' AND cd.type = 'credit';",
    "question": "Who are the female account holders who own credit cards and also have loans?",
    "db_id": "financial",
    "res": 0,
    "ground_truth": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
    "reason": [
      "Female refers to gender = 'F'"
    ]
  },
  "1089": {
    "sql": "SELECT COUNT(*) AS number_of_matches\nFROM Match\nWHERE season = '2008/2009'\nAND country_id = (SELECT id FROM Country WHERE name = 'Belgium');",
    "question": "How many matches in the 2008/2009 season were held in Belgium?",
    "db_id": "european_football_2",
    "res": 1,
    "ground_truth": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'",
    "reason": [
      "Belgium refers to Country.name = 'Belgium';"
    ]
  },
  "1304": {
    "sql": "SELECT COUNT(DISTINCT p.ID) \nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.GLU < 180 AND e.Thrombosis = 0;",
    "question": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?",
    "db_id": "thrombosis_prediction",
    "res": 0,
    "ground_truth": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0",
    "reason": [
      "normal blood glucose refers to GLU < 180; don't have thrombosis refers to Thrombosis = 0;"
    ]
  },
  "1409": {
    "sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';",
    "question": "Mention the total expense used on 8/20/2019.",
    "db_id": "student_club",
    "res": 1,
    "ground_truth": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "reason": [
      "total expense refers SUM(cost) where expense_date = '2019-08-20'"
    ]
  },
  "511": {
    "sql": "SELECT frameEffects, COUNT(frameEffects) AS effect_count\nFROM cards\nWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL\nGROUP BY frameEffects\nORDER BY effect_count DESC\nLIMIT 1;",
    "question": "What is the most common visual frame effects among the incredibly powerful foils?",
    "db_id": "card_games",
    "res": 0,
    "ground_truth": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
    "reason": [
      "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)"
    ]
  },
  "263": {
    "sql": "SELECT \n    (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS chlorine_percentage\nFROM \n    atom a\nJOIN \n    molecule m ON a.molecule_id = m.molecule_id\nJOIN \n    bond b ON m.molecule_id = b.molecule_id\nWHERE \n    b.bond_type = '-';",
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "db_id": "toxicology",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "reason": [
      "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'"
    ]
  },
  "1500": {
    "sql": "SELECT DISTINCT p.Description\nFROM products p\nJOIN transactions_1k t ON p.ProductID = t.ProductID\nJOIN yearmonth ym ON t.CustomerID = ym.CustomerID AND ym.Date = '201309';",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "db_id": "debit_card_specializing",
    "res": 1,
    "ground_truth": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
    "reason": [
      "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."
    ]
  },
  "921": {
    "sql": "SELECT r.raceId, r.year, r.round, r.name AS race_name, r.date, r.time, c.name AS circuit_name, c.location, c.country\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Silverstone Circuit';",
    "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "reason": [
      "more information refers to url"
    ]
  },
  "761": {
    "sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE g.gender = 'Male'\nAND s.weight_kg > (\n    SELECT AVG(weight_kg) * 0.79\n    FROM superhero\n);",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
    "reason": [
      "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)"
    ]
  },
  "397": {
    "sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';",
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "db_id": "card_games",
    "res": 1,
    "ground_truth": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
    "reason": [
      "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'"
    ]
  },
  "1480": {
    "sql": "SELECT \n    SUBSTR(ym.Date, 5, 2) AS Month,\n    SUM(ym.Consumption) AS TotalConsumption\nFROM \n    yearmonth ym\nJOIN \n    customers c ON ym.CustomerID = c.CustomerID\nWHERE \n    c.Segment = 'SME' AND \n    SUBSTR(ym.Date, 1, 4) = '2013'\nGROUP BY \n    Month\nORDER BY \n    TotalConsumption DESC\nLIMIT 1;",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "db_id": "debit_card_specializing",
    "res": 0,
    "ground_truth": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "reason": [
      "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."
    ]
  },
  "775": {
    "sql": "SELECT \n    (COUNT(CASE WHEN c.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_blue_female\nFROM \n    superhero s\nJOIN \n    gender g ON s.gender_id = g.id\nLEFT JOIN \n    colour c ON s.skin_colour_id = c.id\nWHERE \n    g.gender = 'Female';",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
    "reason": [
      "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';"
    ]
  },
  "997": {
    "sql": "SELECT nationality, COUNT(*) AS driver_count FROM drivers GROUP BY nationality ORDER BY driver_count DESC LIMIT 1;",
    "question": "Which citizenship do the vast majority of the drivers hold?",
    "db_id": "formula_1",
    "res": 0,
    "ground_truth": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
    "reason": [
      "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n"
    ]
  },
  "712": {
    "sql": "SELECT p.Id AS PostId, c.Text AS CommentText\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.Title = 'Group differences on a five point Likert item';",
    "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "db_id": "codebase_community",
    "res": 1,
    "ground_truth": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "reason": [
      "Title = 'Group differences on a five point Likert item';"
    ]
  },
  "720": {
    "sql": "SELECT s.full_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nGROUP BY s.full_name\nHAVING COUNT(hp.power_id) > 15;",
    "question": "Please list the full names of all the superheroes with over 15 super powers.",
    "db_id": "superhero",
    "res": 1,
    "ground_truth": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
    "reason": [
      "15 super powers refers to COUNT(full_name) > 15"
    ]
  }
}