{
    "9012": {
        "db_id": "bike_share_1",
        "question": "On 10/20/2014, what is the duration of the fastest trip which started from the station with latitude and longitudes of 37.789625 and -122.400811, respectively? Indicate the bike id.",
        "ground_truth": "SELECT MIN(T2.duration), T2.bike_id FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '10/20/2014%' AND T1.lat = 37.789625 AND T1.long = -122.400811",
        "amends": [
            "Do select `MIN(T2.duration)` and `T2.bike_id` instead of `bike_id` and `duration` without aggregation. Do join `station AS T1` with `trip AS T2` on `T2.start_station_name = T1.name` instead of querying only the trips table. Do filter on `T1.lat = 37.789625` and `T1.long = -122.400811` instead of directly filtering on `start_station_latitude` and `start_station_longitude` in the trips table. Do use `T2.start_date LIKE '10/20/2014%'` for date filtering instead of `start_date = '2014-10-20'` with a different date format. Do remove the explicit `ORDER BY duration ASC LIMIT 1` since the `MIN()` aggregation achieves the same result of finding the shortest duration. The amended query now correctly joins station and trip tables to find the minimum duration trip from the specified station coordinates on the given date, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bike_id, duration FROM trips WHERE start_station_latitude = 37.789625 AND start_station_longitude = -122.400811 AND start_date = '2014-10-20' ORDER BY duration ASC LIMIT 1;",
            "SELECT MIN(T2.duration) AS duration, T2.bike_id\nFROM station AS T1\nJOIN trip AS T2 ON T2.start_station_name = T1.name\nWHERE T1.lat = 37.789625 \nAND T1.long = -122.400811\nAND T2.start_date LIKE '10/20/2014%'"
        ],
        "rule_sql": []
    },
    "6263": {
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency was ranked the first by CoinMarketCap on 2013/4/28?",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.cmc_rank = 1",
        "amends": [
            "Do select `T1.name` from the `coins` table instead of `name` from `cryptocurrencies`. Do join `historical AS T2` with `INNER JOIN` on `T1.id = T2.coin_id` instead of querying a single table. Do filter on `T2.date = '2013-04-28'` with ISO date format instead of `date = '2013/4/28'`. Do filter on `T2.cmc_rank = 1` instead of `rank = 1`. The amended query now correctly joins the coins and historical tables to retrieve the cryptocurrency name with the specified rank on the given date, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cryptocurrencies WHERE date = '2013/4/28' AND rank = 1;",
            "SELECT T1.name \nFROM coins AS T1 \nINNER JOIN historical AS T2 ON T1.id = T2.coin_id \nWHERE T2.date = '2013-04-28' AND T2.cmc_rank = 1"
        ],
        "rule_sql": []
    },
    "7050": {
        "db_id": "works_cycles",
        "question": "How many product maintenance documents are private?",
        "ground_truth": "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL",
        "amends": [
            "Do count `DocumentNode` instead of `*` to count specific non-null values rather than all rows. Do query from `Document` instead of `documents` to use the correct table name. Do filter on `DocumentSummary IS NULL` instead of `maintenance_type = 'private'` to check for null summary values rather than maintenance type. The amended query now correctly counts documents with null summaries using the proper table and column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM documents WHERE maintenance_type = 'private';",
            "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL;"
        ],
        "rule_sql": []
    },
    "8": {
        "db_id": "movie_platform",
        "question": "List all movie title rated in April 2020 from user who was a trialist.",
        "ground_truth": "SELECT T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 AND T2.rating_timestamp_utc LIKE '2020-04%'",
        "amends": [
            "Do reference `movie_title` instead of `title` in the SELECT list. Do use `INNER JOIN` instead of `JOIN` for the ratings table join. Do remove the users table join and instead filter directly on `user_trialist = 1` instead of joining on `user_id` and checking `user_type = 'trialist'`. Do reference `rating_timestamp_utc` instead of `rating_date` in the WHERE filter while keeping the same date pattern matching. Do use table aliases `T1` and `T2` instead of `m` and `r` for better clarity. The amended query now correctly filters for trialist users without requiring a separate users table join and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title \nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN users u ON r.user_id = u.user_id\nWHERE r.rating_date LIKE '2020-04%' \nAND u.user_type = 'trialist';",
            "SELECT T1.movie_title \nFROM movies T1\nINNER JOIN ratings T2 ON T1.movie_id = T2.movie_id\nWHERE T2.rating_timestamp_utc LIKE '2020-04%'\nAND T2.user_trialist = 1"
        ],
        "rule_sql": []
    },
    "2573": {
        "db_id": "app_store",
        "question": "Among the role playing game genre, how many are targeted to teens and what is their average sentiment polarity score?",
        "ground_truth": "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Teen' AND T1.Genres = 'Role Playing'",
        "amends": [
            "Do reference tables `playstore AS T1` and `user_reviews AS T2` instead of `games`. Do use `INNER JOIN` with `ON T1.App = T2.App` instead of querying a single table. Do select specific columns `COUNT(T1.App)` and `AVG(T2.Sentiment_Polarity)` instead of `COUNT(*)` and `AVG(sentiment_polarity)`. Do filter on `T1.\"Content Rating\" = 'Teen'` instead of `target_audience = 'Teens'`. Do filter on `T1.Genres = 'Role Playing'` instead of `genre = 'Role-Playing'`. The amended query now correctly joins related tables and uses the proper column names and values from the schema."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) as count, AVG(sentiment_polarity) as avg_sentiment \nFROM games \nWHERE genre = 'Role-Playing' AND target_audience = 'Teens';",
            "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) \nFROM playstore AS T1 \nINNER JOIN user_reviews AS T2 ON T1.App = T2.App \nWHERE T1.Genres = 'Role Playing' AND T1.\"Content Rating\" = 'Teen'"
        ],
        "rule_sql": []
    },
    "1638": {
        "db_id": "car_retails",
        "question": "Name the product from the 'Classic Cars' production line that has the greatest expected profit.",
        "ground_truth": "SELECT t.productName, t.MSRP - t.buyPrice FROM products AS t WHERE t.productLine = 'Classic Cars' ORDER BY t.MSRP - t.buyPrice DESC LIMIT 1",
        "amends": [
            "Do include both `productName` and the calculated expression `MSRP - buyPrice` in the SELECT list instead of only selecting `productName`. Do add table alias `t` and qualify all column references with `t.` instead of using unqualified column names. Do change the ORDER BY direction to `DESC` instead of `ASC` to find the product with the highest profit margin rather than the lowest. The amended query now correctly identifies the Classic Cars product with the greatest difference between MSRP and buy price, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT productName \nFROM products \nWHERE productLine = 'Classic Cars' \nORDER BY (MSRP - buyPrice) ASC \nLIMIT 1;",
            "SELECT t.productName, (t.MSRP - t.buyPrice) AS expected_profit\nFROM products t\nWHERE t.productLine = 'Classic Cars'\nORDER BY expected_profit DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "5714": {
        "db_id": "language_corpus",
        "question": "What are the occurance of word \"del\" in title \"Any anomal\u00c3\u00adstic\"?",
        "ground_truth": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'del' AND T3.title = 'Any anomal\u00c3\u00adstic'",
        "amends": [
            "Do join `words AS T1` and `pages_words AS T2` on `T1.wid = T2.wid` instead of querying only the `titles` table. Do join `pages AS T3` on `T2.pid = T3.pid` instead of omitting these table relationships. Do select `T2.occurrences` instead of `COUNT(*)` to get the actual occurrence count. Do filter with `T1.word = 'del'` instead of `word = 'del'` to reference the correct table. Do filter with `T3.title = 'Any anomal\u00c3\u00adstic'` instead of `title = 'Any anomal\u00c3\u00adstic'` to reference the pages table. The amended query now correctly retrieves word occurrences from the proper relational structure instead of attempting to count from a single table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM titles WHERE title = 'Any anomal\u00c3\u00adstic' AND word = 'del';",
            "SELECT T2.occurrences \nFROM words AS T1 \nJOIN pages_words AS T2 ON T1.wid = T2.wid \nJOIN pages AS T3 ON T2.pid = T3.pid \nWHERE T1.word = 'del' \nAND T3.title = 'Any anomal\u00c3\u00adstic'"
        ],
        "rule_sql": []
    },
    "3006": {
        "db_id": "shakespeare",
        "question": "What are the titles and genres of the one-act works of Shakespeare?",
        "ground_truth": "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1",
        "amends": [
            "Do add `DISTINCT` instead of omitting it, and use `Title` and `GenreType` column names instead of `title` and `genre`. Do add `INNER JOIN chapters AS T2 ON T1.id = T2.work_id` instead of querying only the `works` table. Do change the filter to `T2.Act = 1` instead of `acts = 1` and remove the `author = 'Shakespeare'` condition instead of keeping it. The amended query now correctly joins the chapters table to filter by act count and returns distinct results matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, genre FROM works WHERE author = 'Shakespeare' AND acts = 1;",
            "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1"
        ],
        "rule_sql": []
    },
    "7877": {
        "db_id": "world",
        "question": "List down the official language of the countries which declared independence after 1990,",
        "ground_truth": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear > 1990 AND T2.IsOfficial = 'T'",
        "amends": [
            "Do select `T1.Name` and `T2.Language` instead of `country` and `language`. Do join `Country AS T1` with `CountryLanguage AS T2` using `INNER JOIN` on `T1.Code = T2.CountryCode` instead of querying a single `countries` table. Do filter on `T1.IndepYear > 1990` instead of `independence_year > 1990` and add the condition `T2.IsOfficial = 'T'` instead of omitting it. The amended query now correctly joins the Country and CountryLanguage tables with proper join conditions and additional filtering for official languages, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, language FROM countries WHERE independence_year > 1990;",
            "SELECT T1.Name, T2.Language \nFROM Country AS T1 \nINNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode \nWHERE T1.IndepYear > 1990 AND T2.IsOfficial = 'T'"
        ],
        "rule_sql": []
    },
    "2195": {
        "db_id": "world_development_indicators",
        "question": "What country in the region of Sub-Saharan Africa has a series code of \"SP.DYN.AMRT.FE\"? Indicate the long name of the country",
        "ground_truth": "SELECT DISTINCT T3.LongName FROM SeriesNotes AS T1 INNER JOIN CountryNotes AS T2 ON T1.SeriesCode = T2.Seriescode INNER JOIN Country AS T3 ON T2.Countrycode = T3.CountryCode WHERE T3.Region = 'Sub-Saharan Africa' AND T1.SeriesCode = 'SP.DYN.AMRT.FE'",
        "amends": [
            "Do use `DISTINCT T3.LongName` instead of `country_name` without distinct. Do join `SeriesNotes AS T1` and `CountryNotes AS T2` on `T1.SeriesCode = T2.Seriescode` instead of querying only the `countries` table. Do add `INNER JOIN Country AS T3` on `T2.Countrycode = T3.CountryCode` instead of omitting these table relationships. Do move the region filter to `T3.Region` instead of the original table's region. Do keep the series code filter on `T1.SeriesCode` instead of the original table's series_code. The amended query now correctly joins multiple tables to retrieve distinct country names from the appropriate relationships, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM countries WHERE region = 'Sub-Saharan Africa' AND series_code = 'SP.DYN.AMRT.FE';",
            "SELECT DISTINCT T3.LongName\nFROM SeriesNotes AS T1\nINNER JOIN CountryNotes AS T2 ON T1.SeriesCode = T2.Seriescode\nINNER JOIN Country AS T3 ON T2.Countrycode = T3.CountryCode\nWHERE T1.SeriesCode = 'SP.DYN.AMRT.FE'\nAND T3.Region = 'Sub-Saharan Africa'"
        ],
        "rule_sql": []
    },
    "7299": {
        "db_id": "works_cycles",
        "question": "Among the products from the mountain product line, how many of them are sold by over 2 vendors?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID GROUP BY T1.ProductID HAVING COUNT(T1.Name) > 2",
        "amends": [
            "Do use `SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END)` instead of `COUNT(*)` to count only 'Mountain' products. Do join `Product AS T1` with `ProductVendor AS T2` on `T1.ProductID = T2.ProductID` instead of querying only the products table. Do add a second join to `Vendor AS T3` on `T2.BusinessEntityID = T3.BusinessEntityID` instead of omitting vendor relationships. Do group by `T1.ProductID` instead of not grouping. Do move the count filter to `HAVING COUNT(T1.Name) > 2` instead of using `WHERE vendor_count > 2` with an incorrect column reference. Do reference `T1.ProductLine = 'M'` instead of `product_line = 'Mountain'` for the product category filter. The amended query now correctly counts Mountain products with more than two associated vendors by properly joining the necessary tables and using appropriate aggregation with HAVING.",
            "Do remove the alias `mountain_products_over_2_vendors` instead of keeping it. Do remove the `WHERE T1.ProductLine = 'M'` filter instead of including it, as the CASE expression already handles the ProductLine filtering within the aggregate. Do keep the `GROUP BY T1.ProductID` and `HAVING COUNT(T1.Name) > 2` clauses unchanged. The amended query now correctly counts mountain products with more than 2 vendors by eliminating the redundant WHERE filter that would incorrectly restrict the join results before aggregation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM products \nWHERE product_line = 'Mountain' \nAND vendor_count > 2;",
            "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) AS mountain_products_over_2_vendors\nFROM Product AS T1\nJOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID\nJOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID\nWHERE T1.ProductLine = 'M'\nGROUP BY T1.ProductID\nHAVING COUNT(T1.Name) > 2",
            "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) \nFROM Product AS T1\nJOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID\nJOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID\nGROUP BY T1.ProductID\nHAVING COUNT(T1.Name) > 2"
        ],
        "rule_sql": []
    },
    "6231": {
        "db_id": "food_inspection_2",
        "question": "Provide the facility type and license number of establishments with the lowest risk level but failed the inspection.",
        "ground_truth": "SELECT DISTINCT T1.facility_type, T1.license_no FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 1 AND T2.results = 'Fail'",
        "amends": [
            "Do use `DISTINCT` instead of omitting it, and reference columns with table aliases `T1.facility_type` and `T1.license_no` instead of unqualified column names. Do join `establishment AS T1` and `inspection AS T2` with `INNER JOIN` on `T1.license_no = T2.license_no` instead of querying only the `inspections` table. Do filter on `T1.risk_level = 1` instead of `risk_level = 'Low'` and `T2.results = 'Fail'` instead of `result = 'Pass'`. The amended query now correctly joins establishment and inspection tables with proper filtering logic and returns distinct results matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT facility_type, license_no FROM inspections WHERE risk_level = 'Low' AND result = 'Pass';",
            "SELECT DISTINCT T1.facility_type, T1.license_no\nFROM establishment AS T1\nINNER JOIN inspection AS T2 ON T1.license_no = T2.license_no\nWHERE T1.risk_level = 1\nAND T2.results = 'Fail';"
        ],
        "rule_sql": []
    },
    "8569": {
        "db_id": "software_company",
        "question": "List the educationnum and response of customers within the age of 20 to 30 that has the highest number of inhabitants among the group.",
        "ground_truth": "SELECT T1.EDUCATIONNUM, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 20 AND T1.age <= 30 ORDER BY T3.INHABITANTS_K DESC LIMIT 1",
        "amends": [
            "Do add `INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID` and `INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID` instead of querying only the customers table. Do specify table aliases with `T1.EDUCATIONNUM` and `T2.RESPONSE` instead of unqualified column names. Do use explicit range conditions `T1.age >= 20 AND T1.age <= 30` instead of `BETWEEN`. Do order by `T3.INHABITANTS_K DESC` instead of `inhabitants DESC` to reference the joined Demog table. The amended query now correctly joins multiple tables and references the appropriate columns to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT educationnum, response \nFROM customers \nWHERE age BETWEEN 20 AND 30 \nORDER BY inhabitants DESC \nLIMIT 1;",
            "SELECT T1.EDUCATIONNUM, T2.RESPONSE\nFROM Customers AS T1\nINNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID\nINNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID\nWHERE T1.age >= 20 AND T1.age <= 30\nORDER BY T3.INHABITANTS_K DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4699": {
        "db_id": "disney",
        "question": "Name the voice actor of the character Calliope in the movie Hercules.",
        "ground_truth": "SELECT `voice-actor` FROM `voice-actors` WHERE movie = 'Hercules' AND character = 'Calliope'",
        "amends": [
            "Do select `voice-actor` instead of `actor_name` and use table `voice-actors` instead of `characters`. Do filter on `character = 'Calliope'` and `movie = 'Hercules'` instead of `character_name = 'Calliope'` and `movie_title = 'Hercules'`. The amended query now correctly retrieves voice actor information from the appropriate table with the proper column names and filtering conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM characters WHERE character_name = 'Calliope' AND movie_title = 'Hercules';",
            "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE character = 'Calliope' AND movie = 'Hercules';"
        ],
        "rule_sql": []
    },
    "1540": {
        "db_id": "synthea",
        "question": "Who is the patient with a body weight of 61.97 kg?",
        "ground_truth": "SELECT T2.first, T2.last FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Body Weight' AND T1.UNITS = 'kg' AND T1.VALUE = 61.97",
        "amends": [
            "Do select specific columns `T2.first, T2.last` instead of selecting all columns with `*`. Do join tables with `INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient` instead of querying a single table. Do add table `observations AS T1` instead of omitting it. Do filter on `T1.DESCRIPTION = 'Body Weight'` and `T1.UNITS = 'kg'` instead of filtering only on body weight value. Do use numeric comparison `T1.VALUE = 61.97` instead of string comparison with `'61.97 kg'`. The amended query now correctly retrieves patient names based on body weight observations with proper unit handling and numeric value comparison."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM patients WHERE body_weight = '61.97 kg';",
            "SELECT T2.first, T2.last\nFROM observations AS T1\nINNER JOIN patients AS T2 ON T1.PATIENT = T2.patient\nWHERE T1.DESCRIPTION = 'Body Weight'\nAND T1.UNITS = 'kg'\nAND T1.VALUE = 61.97"
        ],
        "rule_sql": []
    },
    "4973": {
        "db_id": "olympics",
        "question": "How many athletes participated in the 2014 Winter Olympics?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'",
        "amends": [
            "Do select `COUNT(T2.person_id)` instead of `COUNT(*)` to count distinct competitors rather than all rows. Do join `games AS T1` and `games_competitor AS T2` with `INNER JOIN` on `T1.id = T2.games_id` instead of querying `athletes` directly. Do filter on `T1.games_name = '2014 Winter'` instead of separate `year = 2014 AND season = 'Winter'` conditions to use the standardized games identifier. The amended query now correctly counts unique competitors for the 2014 Winter games by joining through the proper relational structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE year = 2014 AND season = 'Winter';",
            "SELECT COUNT(DISTINCT T2.person_id) \nFROM games AS T1 \nINNER JOIN games_competitor AS T2 ON T1.id = T2.games_id \nWHERE T1.games_name = '2014 Winter'"
        ],
        "rule_sql": []
    },
    "4942": {
        "db_id": "olympics",
        "question": "How many 24 years old competitors competed in Men's Basketball?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball' AND T2.age = 24",
        "amends": [
            "Do use `COUNT(T2.person_id)` instead of `COUNT(*)` to count specific individuals rather than all rows. Do join multiple tables including `competitor_event AS T1`, `games_competitor AS T2`, and `event AS T3` instead of querying only the `competitors` table. Do use `INNER JOIN` relationships with `T1.competitor_id = T2.id` and `T1.event_id = T3.id` instead of no joins. Do filter with `T3.event_name LIKE 'Basketball Men%s Basketball'` instead of `sport = \"Basketball\"` to match specific basketball events. Do keep `T2.age = 24` instead of `age = 24` but now referencing the correct table. The amended query now correctly counts basketball competitors aged 24 by properly joining event and competitor tables and filtering for specific basketball events."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM competitors WHERE age = 24 AND sport = \"Basketball\";",
            "SELECT COUNT(T2.person_id) \nFROM competitor_event AS T1\nINNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id\nINNER JOIN event AS T3 ON T1.event_id = T3.id\nWHERE T2.age = 24 \nAND T3.event_name LIKE 'Basketball Men%s Basketball'"
        ],
        "rule_sql": []
    },
    "9225": {
        "db_id": "movie_3",
        "question": "Calculate the total payment amount by Diane Collins.",
        "ground_truth": "SELECT SUM(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'",
        "amends": [
            "Do join `customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id` instead of querying `payments` table directly without proper joins. Do filter on `T1.first_name = 'Diane' AND T1.last_name = 'Collins'` instead of `customer_name = 'Diane Collins'` to use separate first and last name columns. Do reference `T2.amount` instead of just `amount` to specify the table alias. The amended query now correctly joins customer and payment tables to sum payments for the specific customer while matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payments WHERE customer_name = 'Diane Collins'",
            "SELECT SUM(T2.amount) AS total_payment_amount\nFROM customer AS T1\nINNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id\nWHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'"
        ],
        "rule_sql": []
    },
    "8943": {
        "db_id": "human_resources",
        "question": "Please list the full names of the employees who are working as a Trainee.",
        "ground_truth": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
        "amends": [
            "Do reference columns as `T1.firstname` and `T1.lastname` instead of `first_name` and `last_name`. Do use table alias `employee AS T1` instead of directly referencing `employees`. Do add `INNER JOIN position AS T2` instead of omitting the join. Do use join condition `ON T1.positionID = T2.positionID` instead of filtering directly on position. Do filter on `T2.positiontitle = 'Trainee'` instead of `position = 'Trainee'`. The amended query now correctly joins the position table to access position titles rather than relying on a direct column comparison that may not exist in the employee table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE position = 'Trainee';",
            "SELECT T1.firstname, T1.lastname FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'"
        ],
        "rule_sql": []
    },
    "3609": {
        "db_id": "authors",
        "question": "What is the full name of the conference in which the paper titled \"Extended Fuzzy Regression Models\" was published?",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Extended Fuzzy Regression Models'",
        "amends": [
            "Do select `T2.FullName` instead of `conference_name` and use explicit table aliases. Do join `Conference AS T2` instead of querying only the `papers` table, using `INNER JOIN` on `T1.ConferenceId = T2.Id` instead of missing the join entirely. Do reference `T1.Title` with table alias instead of bare `title`. The amended query now correctly retrieves conference names through proper table joining and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference_name FROM papers WHERE title = 'Extended Fuzzy Regression Models';",
            "SELECT T2.FullName \nFROM Paper AS T1 \nINNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id \nWHERE T1.Title = 'Extended Fuzzy Regression Models';"
        ],
        "rule_sql": []
    },
    "2864": {
        "db_id": "professional_basketball",
        "question": "Among the players who have passed away, who had the most award?",
        "ground_truth": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1",
        "amends": [
            "Do use `T1.playerID` in the SELECT list instead of `name` and do not include an alias for the count. Do join `awards_players AS T2` instead of `awards a` and use `INNER JOIN` instead of `JOIN`. Do reference `deathDate` directly instead of qualifying it with `p.` and do not include `IS NOT NULL` since it's already implied. Do group by `T1.playerID` instead of `p.player_id`. Do order by `COUNT(award) DESC` instead of ordering by the alias `award_count`. The amended query now correctly returns player IDs with the highest award count among deceased players, matching the intended behavior.",
            "Do remove `COUNT(award)` from the SELECT list instead of including it, as the query only needs to return player IDs. Do keep the same `INNER JOIN` on `T1.playerID = T2.playerID` and maintain the `WHERE deathDate IS NOT NULL` filter. Do preserve the `GROUP BY T1.playerID` and `ORDER BY COUNT(award) DESC` with `LIMIT 1` to identify the deceased player with the most awards. The amended query now correctly returns only the playerID while maintaining the same award counting logic for ordering purposes."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, COUNT(*) as award_count \nFROM players p\nJOIN awards a ON p.player_id = a.player_id \nWHERE p.death_date IS NOT NULL \nGROUP BY p.player_id \nORDER BY award_count DESC \nLIMIT 1;",
            "SELECT T1.playerID, COUNT(award) \nFROM players AS T1 \nINNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID \nWHERE deathDate IS NOT NULL \nGROUP BY T1.playerID \nORDER BY COUNT(award) DESC \nLIMIT 1;",
            "SELECT T1.playerID\nFROM players AS T1\nINNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID\nWHERE deathDate IS NOT NULL\nGROUP BY T1.playerID\nORDER BY COUNT(award) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "2780": {
        "db_id": "european_football_1",
        "question": "How many Eredivisie teams have played in 2008?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Eredivisie' AND T1.season = 2008",
        "amends": [
            "Do use `COUNT(DISTINCT T1.HomeTeam)` instead of `COUNT(*)` to count distinct home teams rather than all rows. Do join `matchs AS T1` with `divisions AS T2` on `T1.Div = T2.division` instead of querying only the `teams` table. Do filter on `T2.name = 'Eredivisie'` instead of `league = 'Eredivisie'` to reference the division name. Do filter on `T1.season = 2008` instead of `year = 2008` to use the correct season column. The amended query now correctly counts distinct home teams from the Eredivisie division for the 2008 season, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teams WHERE league = 'Eredivisie' AND year = 2008;",
            "SELECT COUNT(DISTINCT T1.HomeTeam) \nFROM matchs AS T1 \nJOIN divisions AS T2 ON T1.Div = T2.division \nWHERE T2.name = 'Eredivisie' AND T1.season = 2008"
        ],
        "rule_sql": []
    },
    "1000": {
        "db_id": "computer_student",
        "question": "What is the average number of courses taught by a professor?",
        "ground_truth": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) AS num FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1",
        "amends": [
            "Do use a calculated expression `CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id)` instead of a nested aggregate `AVG(COUNT(course_id))`. Do add explicit table aliases `T1` and `T2` instead of omitting them. Do change from a single table `professors` to a join between `taughtBy AS T1` and `person AS T2` instead of keeping only one table. Do add an `INNER JOIN` condition `ON T1.p_id = T2.p_id` instead of having no join predicate. Do add a `WHERE` filter `T2.professor = 1` instead of omitting any filtering. Do remove the `GROUP BY professor_id` clause instead of keeping it. The amended query now correctly calculates the average courses per professor by counting courses and dividing by distinct professors, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(COUNT(course_id)) FROM professors GROUP BY professor_id;",
            "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) \nFROM taughtBy AS T1 \nINNER JOIN person AS T2 ON T1.p_id = T2.p_id \nWHERE T2.professor = 1"
        ],
        "rule_sql": []
    },
    "6716": {
        "db_id": "retails",
        "question": "Among the customers from the United States, which market segment has the highest number of customers?",
        "ground_truth": "SELECT T.c_mktsegment FROM ( SELECT T1.c_mktsegment, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'UNITED STATES' GROUP BY T1.c_mktsegment ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [
            "Do use `c_mktsegment` instead of `market_segment` and `COUNT(c_custkey)` instead of `COUNT(*)` in the SELECT list. Do join `customer` with `nation` on `c_nationkey = n_nationkey` instead of querying `customers` table alone. Do filter on `n_name = 'UNITED STATES'` instead of `country = 'United States'`. Do wrap the aggregate query in a subquery and order by `num DESC` instead of ordering `customer_count ASC` directly. Do use table aliases `T` and `T1` instead of no aliases. The amended query now correctly identifies customers by joining with the nation table and returns the market segment with the highest count in the United States.",
            "Do use a subquery to select only `c_mktsegment` instead of selecting both `c_mktsegment` and `COUNT(c_custkey)` in the outer query. Do alias the customer table as `T1` and nation table as `T2` in the subquery instead of using `T` and `T1` respectively. Do specify `INNER JOIN` explicitly instead of just `JOIN`. Do reference the subquery result column `T.num` in the ORDER BY clause instead of the direct column alias `num`. Do remove the redundant `COUNT(c_custkey)` from the final output selection instead of including it, since only the market segment is needed from the highest count result. The amended query now correctly returns only the market segment with the highest customer count in the United States rather than returning both the segment and count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT market_segment, COUNT(*) as customer_count\nFROM customers\nWHERE country = 'United States'\nGROUP BY market_segment\nORDER BY customer_count ASC\nLIMIT 1;",
            "SELECT T.c_mktsegment, COUNT(T.c_custkey) AS num\nFROM customer T\nJOIN nation T1 ON T.c_nationkey = T1.n_nationkey\nWHERE T1.n_name = 'UNITED STATES'\nGROUP BY T.c_mktsegment\nORDER BY num DESC\nLIMIT 1",
            "SELECT c_mktsegment\nFROM (\n    SELECT T1.c_mktsegment, COUNT(T1.c_custkey) AS num\n    FROM customer AS T1\n    INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey\n    WHERE T2.n_name = 'UNITED STATES'\n    GROUP BY T1.c_mktsegment\n) AS T\nORDER BY T.num DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "8766": {
        "db_id": "chicago_crime",
        "question": "Please list the case numbers of all the crimes whose short description of the kind of crime is \"Homicide 1st & 2nd Degree\" in the FBI classification.",
        "ground_truth": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'",
        "amends": [
            "Do select `T2.case_number` from the `Crime` table instead of `case_number` from the `crimes` table. Do join `FBI_Code AS T1` with `Crime AS T2` using an `INNER JOIN` on `T1.fbi_code_no = T2.fbi_code_no` instead of querying only the `crimes` table. Do filter on `T1.title = 'Homicide 1st & 2nd Degree'` instead of filtering on `short_description = 'Homicide 1st & 2nd Degree'` from the wrong table. The amended query now correctly joins the FBI code reference table to filter crimes by their proper FBI code classification rather than relying on a potentially inconsistent text description field, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT case_number FROM crimes WHERE short_description = 'Homicide 1st & 2nd Degree';",
            "SELECT T2.case_number FROM Crime AS T2 INNER JOIN FBI_Code AS T1 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'"
        ],
        "rule_sql": []
    },
    "8288": {
        "db_id": "mondial_geo",
        "question": "Where is the capital of country which has the largest percentage of Malay people?",
        "ground_truth": "SELECT T1.Capital FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Malay' ORDER BY T2.Percentage DESC LIMIT 1",
        "amends": [
            "Do select `Capital` from `country` table instead of `capital` from `countries` table. Do join `ethnicGroup` table with `INNER JOIN` on `Code=Country` instead of querying a single table. Do filter for `Name='Malay'` instead of filtering by percentage comparison. Do add `ORDER BY Percentage DESC` and `LIMIT 1` to get the highest percentage instead of using a subquery with `MAX()`. Do remove the subquery entirely instead of using nested selection. The amended query now correctly identifies the capital with the highest Malay population percentage by joining the appropriate tables and using proper ordering with limit."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT capital FROM countries WHERE percentage_malay = (SELECT MAX(percentage_malay) FROM countries);",
            "SELECT c.Capital FROM country c INNER JOIN ethnicGroup e ON c.Code = e.Country WHERE e.Name = 'Malay' ORDER BY e.Percentage DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4821": {
        "db_id": "legislator",
        "question": "What is the Instagram name of the legislator whose birthday was on 8/24/1952?",
        "ground_truth": "SELECT T1.instagram FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.birthday_bio = '1952-08-24'",
        "amends": [
            "Do select `T1.instagram` from the `social-media` table instead of selecting `instagram` from the `legislators` table. Do add an `INNER JOIN` with the `current` table on `T1.bioguide = T2.bioguide_id` instead of querying a single table. Do filter on `T2.birthday_bio = '1952-08-24'` instead of filtering on `birthday = '1952-08-24'`. The amended query now correctly joins the social media and current tables to find Instagram handles for legislators with the specified birthday."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT instagram FROM legislators WHERE birthday = '1952-08-24';",
            "SELECT T1.instagram FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.birthday_bio = '1952-08-24'"
        ],
        "rule_sql": []
    },
    "8720": {
        "db_id": "chicago_crime",
        "question": "What is the name of the district with the highest number of domestic violence cases?",
        "ground_truth": "SELECT T2.district_name FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.domestic = 'TRUE' GROUP BY T2.district_name ORDER BY COUNT(T1.district_no) DESC LIMIT 1",
        "amends": [
            "Do join `Crime` and `District` tables with `INNER JOIN` on `T1.district_no = T2.district_no` instead of querying a single table. Do filter for domestic cases with `WHERE T1.domestic = 'TRUE'` instead of omitting any filter. Do aggregate by `T2.district_name` and count cases with `COUNT(T1.district_no)` instead of selecting a raw column. Do order by the case count in `DESC` order instead of `ASC` order. Do include proper table aliases with `T2.district_name` instead of bare column references. The amended query now correctly identifies the district with the highest domestic violence case count.",
            "Do remove `COUNT(T1.district_no) AS domestic_case_count` from the SELECT list instead of including it. Do change the ORDER BY clause to use `COUNT(T1.district_no) DESC` instead of ordering by the alias `domestic_case_count`. Do keep the same FROM clause with `INNER JOIN` on `T1.district_no = T2.district_no`, maintain the WHERE filter on `T1.domestic = 'TRUE'`, preserve the GROUP BY on `T2.district_name`, and retain the LIMIT 1. The amended query now correctly returns only the district name with the highest count of domestic cases instead of including the count value in the output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district_name FROM domestic_violence_cases ORDER BY case_count ASC LIMIT 1;",
            "SELECT T2.district_name, COUNT(T1.district_no) AS domestic_case_count\nFROM Crime T1\nINNER JOIN District T2 ON T1.district_no = T2.district_no\nWHERE T1.domestic = 'TRUE'\nGROUP BY T2.district_name\nORDER BY domestic_case_count DESC\nLIMIT 1;",
            "SELECT T2.district_name\nFROM Crime T1\nINNER JOIN District T2 ON T1.district_no = T2.district_no\nWHERE T1.domestic = 'TRUE'\nGROUP BY T2.district_name\nORDER BY COUNT(T1.district_no) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8639": {
        "db_id": "chicago_crime",
        "question": "How many domestic violence cases were reported in May 2018?",
        "ground_truth": "SELECT COUNT(*) FROM Crime WHERE date LIKE '5/%/2018%' AND domestic = 'TRUE'",
        "amends": [
            "Do reference the `Crime` table instead of `domestic_violence_cases` and use a `date LIKE '5/%/2018%'` filter instead of separate `year = 2018 AND month = 'May'` conditions. Do add the `domestic = 'TRUE'` filter instead of omitting it to specifically count domestic violence cases. The amended query now correctly counts domestic crime incidents from May 2018 by using proper date pattern matching and the domestic flag filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM domestic_violence_cases WHERE year = 2018 AND month = 'May';",
            "SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND date LIKE '5/%/2018%'"
        ],
        "rule_sql": []
    },
    "8954": {
        "db_id": "human_resources",
        "question": "How many employees are there in the \"Miami\" office?",
        "ground_truth": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Miami'",
        "amends": [
            "Do join `employee` with `location` on `T1.locationID = T2.locationID` instead of querying `employees` table directly. Do filter on `T2.locationcity = 'Miami'` instead of filtering on `office = 'Miami'`. Do use table aliases `T1` and `T2` instead of omitting them. The amended query now correctly counts employees based on their location city rather than an office field, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE office = 'Miami';",
            "SELECT COUNT(*) \nFROM employee T1 \nJOIN location T2 ON T1.locationID = T2.locationID \nWHERE T2.locationcity = 'Miami'"
        ],
        "rule_sql": []
    },
    "5712": {
        "db_id": "language_corpus",
        "question": "What is the word id for title \"Sometent\"?",
        "ground_truth": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Sometent'",
        "amends": [
            "Do select `T2.wid` from the `pages_words` table instead of `word_id` from the `titles` table. Do use `pages AS T1` as the main table instead of `titles`. Do add an `INNER JOIN` with `pages_words AS T2` on `T1.pid = T2.pid` instead of querying a single table. Do filter on `T1.title = 'Sometent'` instead of `title = 'Sometent'` but maintain the same filter condition. The amended query now correctly joins the pages and pages_words tables to retrieve the appropriate word IDs associated with the given title, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word_id FROM titles WHERE title = 'Sometent';",
            "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Sometent'"
        ],
        "rule_sql": []
    },
    "664": {
        "db_id": "codebase_comments",
        "question": "What format does the method number 8's comment have?",
        "ground_truth": "SELECT CASE WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Method WHERE Id = 8",
        "amends": [
            "Do select a CASE expression that returns 'isNotXMLFormat' when `CommentIsXml = 0` and 'isXMLFormat' when `CommentIsXml = 1` with alias `format` instead of selecting the raw `comment` column. Do reference the `Method` table instead of the `methods` table. Do filter on `Id = 8` instead of `id = 8` to match the correct table's primary key naming convention. The amended query now correctly handles XML format detection and returns descriptive labels rather than raw comment data, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT comment FROM methods WHERE id = 8;",
            "SELECT CASE \n    WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' \n    WHEN CommentIsXml = 1 THEN 'isXMLFormat' \n    ELSE 'Unknown' \nEND AS format \nFROM Method \nWHERE Id = 8"
        ],
        "rule_sql": []
    },
    "2231": {
        "db_id": "world_development_indicators",
        "question": "What's the lastest household survey in Angola and when did it take place?",
        "ground_truth": "SELECT LatestHouseholdSurvey, PppSurveyYear FROM Country WHERE ShortName = 'Angola'",
        "amends": [
            "Do select specific columns `LatestHouseholdSurvey` and `PppSurveyYear` instead of selecting all columns with `*`. Do query from the `Country` table instead of the `household_surveys` table. Do filter by `ShortName = 'Angola'` instead of `country = 'Angola'`. Do remove the `ORDER BY start_date DESC LIMIT 1` clause instead of keeping it, as the correct query retrieves the specific survey data directly from the Country table without needing to find the latest record. The amended query now correctly retrieves the latest household survey information for Angola from the appropriate table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM household_surveys WHERE country = 'Angola' ORDER BY start_date DESC LIMIT 1;",
            "SELECT LatestHouseholdSurvey, PppSurveyYear FROM Country WHERE ShortName = 'Angola';"
        ],
        "rule_sql": []
    },
    "2821": {
        "db_id": "professional_basketball",
        "question": "Please list the name of the coach who has served more than 2 NBA teams.",
        "ground_truth": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2",
        "amends": [
            "Do select `coachID` instead of `name` and use `GROUP BY coachID` with `HAVING COUNT(DISTINCT tmID) > 2` instead of filtering `WHERE team_count > 2` without aggregation, which properly counts distinct teams per coach rather than relying on a potentially incorrect column value.",
            "Do remove the `WHERE lgID = 'NBA'` filter from the `HAVING` clause instead of keeping it, as the requirement is to count distinct teams across all leagues rather than just the NBA. This change ensures the query correctly identifies coaches who have coached more than 2 distinct teams regardless of league affiliation, matching the intended behavior of counting team diversity across all coaching assignments."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coaches WHERE team_count > 2;",
            "SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2",
            "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2"
        ],
        "rule_sql": []
    },
    "2313": {
        "db_id": "movielens",
        "question": "How many latest released dramas and action movies?",
        "ground_truth": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')",
        "amends": [
            "Do select `COUNT(T1.movieid)` instead of `COUNT(*)` to count specific non-null values. Do change the FROM source to `movies2directors AS T1 INNER JOIN movies AS T2` instead of just `movies` to join two tables. Do add the join condition `ON T1.movieid = T2.movieid` instead of omitting it to properly relate the tables. Do change the WHERE filter to `T2.year = 4 AND T1.genre IN ('Action', 'drama')` instead of `genre = 'drama' OR genre = 'action'` to filter by year and use a more efficient IN clause with proper table qualification. Do remove `ORDER BY release_date DESC LIMIT 1` instead of keeping it since counting doesn't require ordering or limiting. The amended query now correctly counts movies from the joined tables that meet the specified year and genre criteria."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE genre = 'drama' OR genre = 'action' ORDER BY release_date DESC LIMIT 1;",
            "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')"
        ],
        "rule_sql": []
    },
    "1868": {
        "db_id": "soccer_2016",
        "question": "Provide the names and birthdates of players who have left-arm fast skills.",
        "ground_truth": "SELECT T1.Player_Name, T1.DOB FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill WHERE T2.Bowling_skill = 'Left-arm fast'",
        "amends": [
            "Do reference `T1.Player_Name` and `T1.DOB` instead of `name` and `birthdate`. Do join `Player AS T1` with `Bowling_Style AS T2` on `T2.Bowling_Id = T1.Bowling_skill` instead of querying only the `players` table. Do filter on `T2.Bowling_skill = 'Left-arm fast'` instead of `skill = 'left-arm fast'` to properly reference the joined table's column. The amended query now correctly joins tables to resolve bowling skill information and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, birthdate FROM players WHERE skill = 'left-arm fast';",
            "SELECT T1.Player_Name, T1.DOB\nFROM Player AS T1\nJOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill\nWHERE T2.Bowling_skill = 'Left-arm fast'"
        ],
        "rule_sql": []
    },
    "7985": {
        "db_id": "music_platform_2",
        "question": "How many ratings of 5 have been given to the podcast \"Please Excuse My Dead Aunt Sally\"?",
        "ground_truth": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5",
        "amends": [
            "Do join `podcasts AS T1` and `reviews AS T2` instead of querying only the `ratings` table. Do use `INNER JOIN` on `T2.podcast_id = T1.podcast_id` instead of missing the join condition entirely. Do filter on `T1.title = 'Please Excuse My Dead Aunt Sally'` instead of filtering on a non-existent `podcast_name` column. Do count `T2.rating` instead of counting all rows with `COUNT(*)`. The amended query now correctly joins the podcasts and reviews tables to count ratings for the specific podcast title."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM ratings WHERE rating = 5 AND podcast_name = 'Please Excuse My Dead Aunt Sally';",
            "SELECT COUNT(T2.rating) \nFROM podcasts AS T1 \nINNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id \nWHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5"
        ],
        "rule_sql": []
    },
    "4951": {
        "db_id": "olympics",
        "question": "What is the name of the game in which the oldest Olympian has ever participated?",
        "ground_truth": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id ORDER BY T2.age LIMIT 1",
        "amends": [
            "Do select `T1.games_name` instead of `name` and add `ORDER BY T2.age LIMIT 1` instead of using a subquery with `MIN(year)`. Do change the FROM clause to use `games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id` instead of just `games` with a WHERE filter. Do remove the subquery `(SELECT MIN(year) FROM olympians)` and the WHERE condition `year =` entirely, replacing it with a join to `games_competitor` and ordering by `age` to find the youngest competitor's games. The amended query now correctly identifies the games associated with the youngest competitor rather than attempting to find games by minimum year from a potentially unrelated table.",
            "Do `ORDER BY T2.age` instead of `ORDER BY T2.age DESC` to sort by ascending age rather than descending age. The amended query now matches RIGHT_SQL's behavior by returning the games name associated with the youngest competitor instead of the oldest."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM games WHERE year = (SELECT MIN(year) FROM olympians);",
            "SELECT T1.games_name\nFROM games AS T1\nINNER JOIN games_competitor AS T2 ON T1.id = T2.games_id\nORDER BY T2.age DESC\nLIMIT 1;",
            "SELECT T1.games_name \nFROM games AS T1 \nINNER JOIN games_competitor AS T2 ON T1.id = T2.games_id \nORDER BY T2.age \nLIMIT 1"
        ],
        "rule_sql": []
    },
    "6786": {
        "db_id": "retails",
        "question": "How many items shipped by REG AIR were ordered on March 22, 1995?",
        "ground_truth": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'REG AIR' AND T1.o_orderdate = '1995-03-22'",
        "amends": [
            "Do use `COUNT(T1.o_orderkey)` instead of `COUNT(*)` to count specific non-null values. Do reference tables as `T1` and `T2` with explicit aliases instead of `o` and `l`. Do use `INNER JOIN` with explicit specification instead of just `JOIN`. Do join on `T1.o_orderkey = T2.l_orderkey` instead of `o.orderkey = l.orderkey` to match the correct column names. Do place the `T2.l_shipmode = 'REG AIR'` filter before `T1.o_orderdate = '1995-03-22'` in the WHERE clause instead of the reverse order. The amended query now correctly matches the RIGHT_SQL's behavior with proper column references and join conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.orderkey = l.orderkey WHERE o.orderdate = '1995-03-22' AND l.shipmode = 'REG AIR';",
            "SELECT COUNT(T1.o_orderkey) \nFROM orders T1 \nINNER JOIN lineitem T2 ON T1.o_orderkey = T2.l_orderkey \nWHERE T2.l_shipmode = 'REG AIR' \nAND T1.o_orderdate = '1995-03-22'"
        ],
        "rule_sql": []
    },
    "7267": {
        "db_id": "works_cycles",
        "question": "What are the names of the vendors to which the company purchased its women's tights products?",
        "ground_truth": "SELECT DISTINCT T4.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN ProductSubcategory AS T3 ON T1.ProductSubcategoryID = T3.ProductSubcategoryID INNER JOIN Vendor AS T4 ON T2.BusinessEntityID = T4.BusinessEntityID WHERE T1.MakeFlag = 0 AND T1.Style = 'W' AND T3.Name = 'Tights'",
        "amends": [
            "Do use `DISTINCT T4.Name` instead of `vendor_name` to select unique vendor names. Do join four tables (`Product`, `ProductVendor`, `ProductSubcategory`, and `Vendor`) with `INNER JOIN` conditions instead of querying a single `vendors` table. Do add multiple WHERE filters including `T1.MakeFlag = 0`, `T1.Style = 'W'`, and `T3.Name = 'Tights'` instead of the single `product_type = 'women\\'s tights'` condition. The amended query now correctly identifies vendors selling women's tights through proper table relationships and filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name FROM vendors WHERE product_type = 'women\\'s tights';",
            "SELECT DISTINCT T4.Name\nFROM Product T1\nINNER JOIN ProductVendor T2 ON T1.ProductID = T2.ProductID\nINNER JOIN ProductSubcategory T3 ON T1.ProductSubcategoryID = T3.ProductSubcategoryID\nINNER JOIN Vendor T4 ON T2.BusinessEntityID = T4.BusinessEntityID\nWHERE T1.MakeFlag = 0 \nAND T1.Style = 'W' \nAND T3.Name = 'Tights';"
        ],
        "rule_sql": []
    },
    "1232": {
        "db_id": "talkingdata",
        "question": "Please provide the age group of any LG Nexus 4 device users.",
        "ground_truth": "SELECT T1.`group` FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'",
        "amends": [
            "Do select `T1.group` instead of `age` from the SELECT list. Do use `gender_age AS T1` and `phone_brand_device_model2 AS T2` as FROM sources instead of just `users`. Do add an `INNER JOIN` on `T1.device_id = T2.device_id` instead of having no join. Do change the WHERE filter to `T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'` instead of `device = 'LG Nexus 4'`. The amended query now correctly joins the gender_age and phone_brand_device_model2 tables to filter by specific phone brand and device model attributes, matching the RIGHT_SQL's behavior.",
            "Do use backticks around `group` instead of leaving it unquoted to properly handle the reserved keyword. The amended query now matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age FROM users WHERE device = 'LG Nexus 4'",
            "SELECT T1.group FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'",
            "SELECT T1.`group` FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'"
        ],
        "rule_sql": []
    },
    "1888": {
        "db_id": "soccer_2016",
        "question": "Calculate the total winning match for Deccan Chargers.",
        "ground_truth": "SELECT SUM(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T1.Team_Name = 'Deccan Chargers'",
        "amends": [
            "Do use `SUM(T2.Match_Winner)` instead of `COUNT(*)` to sum the winning matches rather than counting all matches. Do join `Team AS T1` and `Match AS T2` with `INNER JOIN` on `T1.Team_Id = T2.Match_Winner` instead of querying a single table. Do filter on `T1.Team_Name = 'Deccan Chargers'` instead of checking both `team1` and `team2` columns. Do remove the `OR` condition and instead use the proper team ID relationship through the join. The amended query now correctly counts wins for Deccan Chargers by joining the Team and Match tables on the proper relationship.",
            "Do use `SUM(T2.Match_Winner)` instead of `SUM(CASE WHEN T2.Match_Winner = T1.Team_Id THEN 1 ELSE 0 END)` to directly sum the winning team IDs rather than using a conditional case expression. Do remove the alias `AS Total_Wins` instead of keeping it since the aggregate function no longer requires explicit naming. The amended query now correctly sums the match winner IDs directly and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE team1 = 'Deccan Chargers' OR team2 = 'Deccan Chargers';",
            "SELECT SUM(CASE WHEN T2.Match_Winner = T1.Team_Id THEN 1 ELSE 0 END) AS Total_Wins\nFROM Team AS T1\nINNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner\nWHERE T1.Team_Name = 'Deccan Chargers'",
            "SELECT SUM(T2.Match_Winner) \nFROM Team AS T1 \nINNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner \nWHERE T1.Team_Name = 'Deccan Chargers'"
        ],
        "rule_sql": []
    },
    "1068": {
        "db_id": "talkingdata",
        "question": "Provide the phone brands and models of the users who were at the coordinates of (80,44).",
        "ground_truth": "SELECT DISTINCT T1.phone_brand, T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = 80 AND T2.latitude = 44",
        "amends": [
            "Do select `phone_brand` and `device_model` instead of `phone_brand` and `phone_model`. Do add `DISTINCT` instead of omitting it. Do change the source from `users` to `phone_brand_device_model2 AS T1` instead of keeping the original table. Do add `INNER JOIN events AS T2` instead of omitting the join. Do use join condition `T2.device_id = T1.device_id` instead of no join condition. Do change the filter from `coordinates = '(80,44)'` to `T2.longitude = 80 AND T2.latitude = 44` instead of the single coordinate string comparison. The amended query now correctly joins device information with location data and uses proper coordinate filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_brand, phone_model FROM users WHERE coordinates = '(80,44)'",
            "SELECT DISTINCT T1.phone_brand, T1.device_model\nFROM phone_brand_device_model2 AS T1\nINNER JOIN events AS T2 ON T2.device_id = T1.device_id\nWHERE T2.longitude = 80 AND T2.latitude = 44"
        ],
        "rule_sql": []
    },
    "1952": {
        "db_id": "soccer_2016",
        "question": "How many players have won at least 5 man of the match awards?",
        "ground_truth": "SELECT COUNT(Match_Id) FROM `Match` GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5",
        "amends": [
            "Do select `COUNT(Match_Id)` from the `Match` table instead of `COUNT(*)` from the `players` table. Do add `GROUP BY Man_of_the_Match` instead of omitting grouping. Do move the count filter to `HAVING COUNT(Match_Id) >= 5` instead of using `WHERE man_of_the_match >= 5` on a non-aggregated column. The amended query now correctly counts matches per man of the match awardee and filters for those with at least 5 awards, matching the intended behavior.",
            "Do use `COUNT(Match_Id)` in the outer SELECT instead of `COUNT(*)` to count the actual matches. Do remove the unnecessary subquery and instead perform the `GROUP BY Man_of_the_Match` directly on the `Match` table. Do keep the `HAVING COUNT(Match_Id) >= 5` condition unchanged as it correctly filters for players with at least 5 Man of the Match awards. The amended query now correctly counts the number of matches for each qualifying player rather than counting the number of qualifying players themselves, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE man_of_the_match >= 5;",
            "SELECT COUNT(*) FROM (SELECT Man_of_the_Match FROM Match GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5)",
            "SELECT COUNT(Match_Id) FROM Match GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5"
        ],
        "rule_sql": []
    },
    "7703": {
        "db_id": "hockey",
        "question": "What was the number of goals did player Id \"dyeba01\" make in the 1921 Stanley Cup finals?",
        "ground_truth": "SELECT G FROM ScoringSC WHERE playerID = 'dyeba01' AND year = 1921",
        "amends": [
            "Do select `G` instead of `goals` and from `ScoringSC` instead of `player_stats`. Do use `playerID` instead of `player_id` and remove the `competition = 'Stanley Cup Finals'` filter instead of keeping it. The amended query now correctly retrieves goal statistics from the appropriate table with the proper column names and without the unnecessary competition filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT goals FROM player_stats WHERE player_id = 'dyeba01' AND year = 1921 AND competition = 'Stanley Cup Finals';",
            "SELECT G FROM ScoringSC WHERE playerID = 'dyeba01' AND year = 1921;"
        ],
        "rule_sql": []
    },
    "4410": {
        "db_id": "student_loan",
        "question": "Does disable students join organization. If yes, please indicate the organization joined by the students.",
        "ground_truth": "SELECT DISTINCT T2.organ FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name`",
        "amends": [
            "Do select `DISTINCT T2.organ` instead of `s.name, o.organization_name`. Do use `disabled AS T1` and `enlist AS T2` as source tables instead of `students s` and `organizations o`. Do perform an `INNER JOIN` on `T1.name = T2.name` instead of a `JOIN` on `s.student_id = o.student_id`. Do remove the `WHERE s.status = 'disable'` filter instead of keeping it, as the filtering is now handled by the disabled table. The amended query now correctly identifies distinct organizations from disabled users through proper table relationships and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name, o.organization_name \nFROM students s \nJOIN organizations o ON s.student_id = o.student_id \nWHERE s.status = 'disable';",
            "SELECT DISTINCT T2.organ FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name"
        ],
        "rule_sql": []
    },
    "3783": {
        "db_id": "public_review_platform",
        "question": "Does Yelp business No.\"4960\" have TV?",
        "ground_truth": "SELECT DISTINCT CASE WHEN T1.attribute_name LIKE 'Has TV' THEN 'yes' ELSE 'no' END FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 4960",
        "amends": [
            "Do use `DISTINCT CASE WHEN T1.attribute_name LIKE 'Has TV' THEN 'yes' ELSE 'no' END` instead of selecting `has_tv` directly. Do join `Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id` instead of querying `yelp_businesses` alone. Do filter on `T2.business_id = 4960` instead of `business_id = 4960` from the wrong table. The amended query now correctly checks for TV availability through the attribute relationships instead of assuming a direct column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT has_tv FROM yelp_businesses WHERE business_id = 4960;",
            "SELECT DISTINCT CASE WHEN T1.attribute_name LIKE 'Has TV' THEN 'yes' ELSE 'no' END AS has_tv\nFROM Attributes AS T1 \nINNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id\nWHERE T2.business_id = 4960;"
        ],
        "rule_sql": []
    },
    "931": {
        "db_id": "cs_semester",
        "question": "Among undergraduate students, list the name of the course with the highest student satisfaction.",
        "ground_truth": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1",
        "amends": [
            "Do select `T3.name` from the `course` table instead of `course_name` from a single `courses` table. Do join `student AS T1` and `registration AS T2` with `INNER JOIN` on `T1.student_id = T2.student_id` instead of querying only one table. Do add another `INNER JOIN` to `course AS T3` on `T2.course_id = T3.course_id` instead of missing these table relationships. Do filter with `T1.type = 'UG'` instead of `student_type = 'undergraduate'` to match the correct column and value format. Do order by `T2.sat DESC` instead of `student_satisfaction DESC` to use the satisfaction score from the registration table. The amended query now correctly joins the necessary tables and uses the proper column references to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE student_type = 'undergraduate' ORDER BY student_satisfaction DESC LIMIT 1;",
            "SELECT T3.name\nFROM student AS T1\nINNER JOIN registration AS T2 ON T1.student_id = T2.student_id\nINNER JOIN course AS T3 ON T2.course_id = T3.course_id\nWHERE T1.type = 'UG'\nORDER BY T2.sat DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4570": {
        "db_id": "student_loan",
        "question": "Which organization has the highest number of male students? Calculate for the percentage of the male students in the said organization.",
        "ground_truth": "SELECT T.organ, T.per FROM ( SELECT T1.organ, CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per , COUNT(T3.name) AS num FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name GROUP BY T1.organ ) T ORDER BY T.num DESC LIMIT 1",
        "amends": [
            "Do use `T.organ` and `T.per` in the SELECT list instead of `organization`, `total_students`, `male_count`, and `male_percentage`. Do use a subquery with alias `T` instead of querying directly from the `students` table. Do join `enlist AS T1` with `person AS T2` on `T1.name = T2.name` instead of querying a single table. Do add a `LEFT JOIN male AS T3 ON T2.name = T3.name` instead of using a CASE expression for gender filtering. Do calculate the percentage as `CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name)` instead of `(COUNT(CASE WHEN gender = 'Male' THEN 1 END) * 100.0 / COUNT(*))`. Do include `COUNT(T3.name) AS num` for ordering instead of just counting male students. Do order by `T.num DESC` instead of `male_count DESC`. The amended query now correctly handles the three-table join structure and male identification through a dedicated table join rather than gender column filtering.",
            "Do move the aggregate expression `CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per` to the inner query instead of calculating it in the outer query. Do add `COUNT(T3.name) AS num` to the SELECT list of the inner query instead of omitting it. Do change the GROUP BY clause to `T1.organ` instead of `T1.organ, T1.name` to properly aggregate at the organ level. Do specify `INNER JOIN` for the person table instead of just `JOIN` for clarity. Do reference `T.num` in the ORDER BY clause instead of `T.num` which remains available from the inner query. The amended query now correctly calculates the percentage and ordering behavior matches the RIGHT_SQL."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization, COUNT(*) as total_students, \n       COUNT(CASE WHEN gender = 'Male' THEN 1 END) as male_count,\n       (COUNT(CASE WHEN gender = 'Male' THEN 1 END) * 100.0 / COUNT(*)) as male_percentage\nFROM students\nGROUP BY organization\nORDER BY male_count DESC\nLIMIT 1;",
            "SELECT \n    T.organ,\n    CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per\nFROM \n    (SELECT \n        T1.organ,\n        T1.name,\n        COUNT(T3.name) AS num\n     FROM \n        enlist AS T1\n     JOIN \n        person AS T2 ON T1.name = T2.name\n     LEFT JOIN \n        male AS T3 ON T2.name = T3.name\n     GROUP BY \n        T1.organ, T1.name) AS T\nGROUP BY \n    T.organ\nORDER BY \n    T.num DESC\nLIMIT 1;",
            "SELECT T.organ, T.per\nFROM (\n    SELECT \n        T1.organ,\n        CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per,\n        COUNT(T3.name) AS num\n    FROM enlist AS T1\n    INNER JOIN person AS T2 ON T1.name = T2.name\n    LEFT JOIN male AS T3 ON T2.name = T3.name\n    GROUP BY T1.organ\n) AS T\nORDER BY T.num DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "720": {
        "db_id": "trains",
        "question": "Among the trains running west, how many trains have no more than one car with an open roof?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.direction = 'west' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) FROM cars WHERE roof = 'none' GROUP BY train_id HAVING COUNT(id) = 1 ) AS T2 ON T1.id = T2.train_id ",
        "amends": [
            "Do use `SUM(CASE WHEN T1.direction = 'west' THEN 1 ELSE 0 END) as count` instead of `COUNT(*)` to count only westbound trains. Do join with a subquery `(SELECT train_id, COUNT(id) FROM cars WHERE roof = 'none' GROUP BY train_id HAVING COUNT(id) = 1) AS T2` instead of directly joining the cars table with `roof_status = 'open'` filter. Do use join condition `T1.id = T2.train_id` instead of `t.train_id = c.train_id`. Do remove the `GROUP BY t.train_id` and `HAVING COUNT(c.car_id) <= 1` clauses since the filtering is now handled in the subquery. Do add the `WHERE roof = 'none'` condition in the subquery instead of `c.roof_status = 'open'`. The amended query now correctly counts westbound trains that have exactly one car with no roof, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM trains t\nJOIN cars c ON t.train_id = c.train_id\nWHERE t.direction = 'west'\nAND c.roof_status = 'open'\nGROUP BY t.train_id\nHAVING COUNT(c.car_id) <= 1;",
            "SELECT SUM(CASE WHEN T1.direction = 'west' THEN 1 ELSE 0 END) as count\nFROM trains T1\nJOIN (SELECT train_id, COUNT(id) \n      FROM cars \n      WHERE roof = 'none' \n      GROUP BY train_id \n      HAVING COUNT(id) = 1) AS T2\nON T1.id = T2.train_id"
        ],
        "rule_sql": []
    },
    "1646": {
        "db_id": "car_retails",
        "question": "Name the Sales Manager of Europe, Middle East, and Africa region. In which office does he/she report to?",
        "ground_truth": "SELECT t2.firstName, t2.lastName FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t2.jobTitle = 'Sale Manager (EMEA)'",
        "amends": [
            "Do select only `t2.firstName` and `t2.lastName` instead of including `o.city`. Do use table aliases `t1` for offices and `t2` for employees instead of `e` and `o`. Do use `INNER JOIN` with explicit keyword instead of just `JOIN`. Do join on `t1.officeCode = t2.officeCode` instead of `e.officeCode = o.officeCode`. Do filter with `t2.jobTitle = 'Sale Manager (EMEA)'` instead of separate conditions for job title and territory. Do remove the territory filter condition entirely instead of keeping it as a separate WHERE clause. The amended query now correctly matches the intended behavior by filtering for the specific job title that includes the territory designation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT e.firstName, e.lastName, o.city \nFROM employees e \nJOIN offices o ON e.officeCode = o.officeCode \nWHERE e.jobTitle = 'Sales Manager' \nAND o.territory = 'EMEA'",
            "SELECT t2.firstName, t2.lastName\nFROM offices t1\nINNER JOIN employees t2 ON t1.officeCode = t2.officeCode\nWHERE t2.jobTitle = 'Sale Manager (EMEA)'"
        ],
        "rule_sql": []
    },
    "762": {
        "db_id": "movie",
        "question": "Among the actors born in New York City, list the genre of their movie with a rating greater than 5.",
        "ground_truth": "SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.`Birth City` = 'New York City' AND T1.Rating > 5",
        "amends": [
            "Do join `movie AS T1` with `characters AS T2` on `T1.MovieID = T2.MovieID` and then with `actor AS T3` on `T3.ActorID = T2.ActorID` instead of querying only the `movies` table. Do filter on `T3.Birth City = 'New York City'` instead of `actor_birthplace = 'New York City'` to correctly reference the actor's birthplace from the joined table. Do filter on `T1.Rating > 5` instead of `rating > 5` to reference the rating from the movie table. Do select `T1.Genre` instead of `genre` to specify the table alias. The amended query now correctly joins the necessary tables to find movies with actors born in New York City and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM movies WHERE actor_birthplace = 'New York City' AND rating > 5",
            "SELECT DISTINCT T1.Genre \nFROM movie AS T1 \nJOIN characters AS T2 ON T1.MovieID = T2.MovieID \nJOIN actor AS T3 ON T3.ActorID = T2.ActorID \nWHERE T3.\"Birth City\" = 'New York City' \nAND T1.Rating > 5"
        ],
        "rule_sql": []
    },
    "8637": {
        "db_id": "chicago_crime",
        "question": "What is the name of the community that has the highest number of crimes related to prostitution?",
        "ground_truth": "SELECT T3.community_area_name FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T1.community_area_no = T3.community_area_no WHERE T2.primary_description = 'PROSTITUTION' GROUP BY T1.iucr_no ORDER BY T1.case_number DESC LIMIT 1",
        "amends": [
            "Do use explicit table aliases `T3.community_area_name` instead of `community_name` and join through multiple tables instead of querying a single table. Do add `INNER JOIN` on `T1.iucr_no = T2.iucr_no` and `INNER JOIN` on `T1.community_area_no = T3.community_area_no` instead of missing these table relationships. Do filter on `T2.primary_description = 'PROSTITUTION'` instead of `crime_type = 'prostitution'` to use the correct column and case. Do add `GROUP BY T1.iucr_no` instead of omitting grouping. Do order by `T1.case_number DESC` instead of `crime_count ASC` using a different column and direction. The amended query now correctly joins through the proper table relationships and matches RIGHT_SQL's behavior.",
            "Do group by `T1.iucr_no` instead of `T1.community_area_no` to ensure proper aggregation. Do order by `T1.case_number DESC` instead of `COUNT(*) DESC` to sort by case number rather than count. The amended query now correctly groups by IUCR number and orders by case number to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT community_name FROM crimes WHERE crime_type = 'prostitution' ORDER BY crime_count ASC LIMIT 1;",
            "SELECT T3.community_area_name\nFROM Crime T1\nINNER JOIN IUCR T2 ON T1.iucr_no = T2.iucr_no\nINNER JOIN Community_Area T3 ON T1.community_area_no = T3.community_area_no\nWHERE T2.primary_description = 'PROSTITUTION'\nGROUP BY T1.community_area_no\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT T3.community_area_name\nFROM Crime T1\nINNER JOIN IUCR T2 ON T1.iucr_no = T2.iucr_no\nINNER JOIN Community_Area T3 ON T1.community_area_no = T3.community_area_no\nWHERE T2.primary_description = 'PROSTITUTION'\nGROUP BY T1.iucr_no\nORDER BY T1.case_number DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "8247": {
        "db_id": "mondial_geo",
        "question": "Please list the capital cities of the countries with an inflation rate under 2.",
        "ground_truth": "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2",
        "amends": [
            "Do `SELECT T1.Capital` with table alias instead of `SELECT capital` without table reference. Do add `FROM country AS T1 INNER JOIN economy AS T2` with explicit table aliases and join instead of `FROM countries` as a single table. Do use join condition `ON T1.Code = T2.Country` to properly relate the tables instead of no join condition. Do change filter to `WHERE T2.Inflation < 2` using the joined economy table's column instead of `WHERE inflation_rate > 2` using an incorrect column name and comparison direction. The amended query now correctly joins country and economy tables to retrieve capital cities based on inflation data from the proper source table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT capital FROM countries WHERE inflation_rate > 2;",
            "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2"
        ],
        "rule_sql": []
    },
    "5866": {
        "db_id": "airline",
        "question": "Give the name of the airline to which tail number N202NN belongs to.",
        "ground_truth": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N202NN' GROUP BY T2.Description",
        "amends": [
            "Do select `T2.Description` instead of `airline_name`. Do join `Airlines AS T1` with `Air Carriers AS T2` using `INNER JOIN` on `T1.OP_CARRIER_AIRLINE_ID = T2.Code` instead of querying only the `airlines` table. Do filter on `T1.TAIL_NUM = 'N202NN'` instead of `tail_number = 'N202NN'`. Do add `GROUP BY T2.Description` instead of omitting it. The amended query now correctly joins the airline carrier information and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT airline_name FROM airlines WHERE tail_number = 'N202NN';",
            "SELECT T2.Description \nFROM Airlines AS T1 \nINNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code \nWHERE T1.TAIL_NUM = 'N202NN' \nGROUP BY T2.Description"
        ],
        "rule_sql": []
    },
    "1050": {
        "db_id": "talkingdata",
        "question": "What is the age of the oldest active user that participated in the event held on 5/6/2016 at coordinates 121, 31?",
        "ground_truth": "SELECT T3.age FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE T1.is_active = 1 AND T2.longitude = 121 AND T2.latitude = 31 AND SUBSTR(T2.timestamp, 1, 10) = '2016-05-06' ORDER BY T3.age DESC LIMIT 1",
        "amends": [
            "Do select `T3.age` instead of `MAX(age)` and remove the aggregate function. Do change the FROM clause to use `app_events AS T1` instead of `users` and add two INNER JOINs: first join `events_relevant AS T2` on `T1.event_id = T2.event_id` instead of the subquery, then join `gender_age AS T3` on `T2.device_id = T3.device_id` instead of the user-based approach. Do change the WHERE filter to use `T1.is_active = 1` instead of `status = 'active'` and replace the coordinate condition with separate `T2.longitude = 121` and `T2.latitude = 31` filters instead of the combined `coordinates = '121, 31'`. Do add a date filter using `SUBSTR(T2.timestamp, 1, 10) = '2016-05-06'` with proper date formatting instead of the ambiguous `date = '5/6/2016'`. Do add `ORDER BY T3.age DESC` and `LIMIT 1` to get the maximum age instead of using the MAX aggregate function. The amended query now correctly retrieves the maximum age through proper table relationships and filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(age) FROM users WHERE status = 'active' AND user_id IN (SELECT user_id FROM events WHERE date = '5/6/2016' AND coordinates = '121, 31')",
            "SELECT T3.age\nFROM app_events AS T1\nINNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id\nINNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id\nWHERE T1.is_active = 1\n  AND T2.longitude = 121\n  AND T2.latitude = 31\n  AND SUBSTR(T2.timestamp, 1, 10) = '2016-05-06'\nORDER BY T3.age DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "804": {
        "db_id": "social_media",
        "question": "How many female Twitter users are there from Wisconsin?",
        "ground_truth": "SELECT COUNT(T1.Likes) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Wisconsin' AND T3.Gender = 'Female'",
        "amends": [
            "Do count `T1.Likes` instead of `COUNT(*)` and change the source from `users` to joining `twitter AS T1`, `location AS T2`, and `user AS T3` instead of a single table. Do use `INNER JOIN` on `T2.LocationID = T1.LocationID` and `INNER JOIN` on `T3.UserID = T1.UserID` instead of no joins. Do filter on `T2.State = 'Wisconsin'` instead of `state = 'Wisconsin'` and `T3.Gender = 'Female'` instead of `gender = 'male'`, while removing the `platform = 'Twitter'` filter instead of keeping it. The amended query now correctly counts female users from Wisconsin in the Twitter platform data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male' AND state = 'Wisconsin' AND platform = 'Twitter';",
            "SELECT COUNT(T1.Likes) \nFROM twitter AS T1\nINNER JOIN location AS T2 ON T2.LocationID = T1.LocationID\nINNER JOIN user AS T3 ON T3.UserID = T1.UserID\nWHERE T2.State = 'Wisconsin' AND T3.Gender = 'Female'"
        ],
        "rule_sql": []
    },
    "1320": {
        "db_id": "law_episode",
        "question": "Write down the organization, year, award, and award category in which Rene Balcer is the winner.",
        "ground_truth": "SELECT T2.organization, T2.year, T2.award, T2.award_category FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer' AND T2.result = 'Winner'",
        "amends": [
            "Do join `Person AS T1` and `Award AS T2` with `INNER JOIN` on `T1.person_id = T2.person_id` instead of querying only the `awards` table without any joins. Do filter on `T1.name = 'Rene Balcer'` and `T2.result = 'Winner'` instead of just `winner = 'Rene Balcer'`. Do select columns with table aliases `T2.organization`, `T2.year`, `T2.award`, and `T2.award_category` instead of unqualified column names. The amended query now correctly retrieves award information by joining person and award tables with proper filtering conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization, year, award, award_category FROM awards WHERE winner = 'Rene Balcer'",
            "SELECT T2.organization, T2.year, T2.award, T2.award_category\nFROM Person AS T1\nINNER JOIN Award AS T2 ON T1.person_id = T2.person_id\nWHERE T1.name = 'Rene Balcer' AND T2.result = 'Winner'"
        ],
        "rule_sql": []
    },
    "1433": {
        "db_id": "synthea",
        "question": "What are the birth date of patients who took outpatient encounter care plan?",
        "ground_truth": "SELECT DISTINCT T1.birthdate FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Outpatient Encounter'",
        "amends": [
            "Do add `DISTINCT` instead of omitting it, and use `birthdate` instead of `birth_date`. Do add `INNER JOIN` on `patients.patient = encounters.PATIENT` instead of querying only the patients table. Do change the filter to `encounters.DESCRIPTION = 'Outpatient Encounter'` instead of `encounters.encounter_type = 'outpatient' AND care_plan IS NOT NULL`. Do use table aliases `T1` and `T2` instead of no aliases. The amended query now correctly identifies outpatient encounters through the encounters table join and returns distinct birthdates matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_date FROM patients WHERE encounter_type = 'outpatient' AND care_plan IS NOT NULL",
            "SELECT DISTINCT T1.birthdate\nFROM patients T1\nINNER JOIN encounters T2 ON T1.patient = T2.PATIENT\nWHERE T2.DESCRIPTION = 'Outpatient Encounter'"
        ],
        "rule_sql": []
    },
    "4030": {
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of businesses who located in Mesa. What is attribute value of these businesses.",
        "ground_truth": "SELECT CAST(COUNT(T1.city) AS REAL) * 100 / ( SELECT COUNT(business_id) FROM Business ), T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'",
        "amends": [
            "Do use `CAST(COUNT(T1.city) AS REAL)` instead of `COUNT(*)` for proper percentage calculation. Do join `Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id` instead of querying only the `businesses` table. Do reference `T2.attribute_value` instead of `attribute_value` from the joined table. Do use `COUNT(business_id)` in the subquery instead of `COUNT(*)` for more precise counting. Do specify table aliases `T1` and `T2` instead of unqualified column references. The amended query now correctly calculates percentages by joining business data with attributes and using proper counting methods.",
            "Do use `COUNT(T1.city)` instead of `COUNT(T1.business_id)` in the numerator. Do divide by the total count from `(SELECT COUNT(business_id) FROM Business)` instead of filtering that subquery with `WHERE city = 'Mesa'`. Do remove the `GROUP BY T2.attribute_value` clause instead of keeping it, as the aggregation is no longer needed. Do place the division operator `* 100 /` after the count instead of using parentheses around the division. The amended query now correctly calculates the percentage of Mesa businesses relative to all businesses rather than relative to only Mesa businesses, and removes the unnecessary grouping that was present in the original query."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM businesses) AS percentage, attribute_value FROM businesses WHERE city = 'Mesa'",
            "SELECT \n    (CAST(COUNT(T1.business_id) AS REAL) / (SELECT COUNT(business_id) FROM Business WHERE city = 'Mesa')) * 100 AS percentage,\n    T2.attribute_value\nFROM \n    Business AS T1 \nINNER JOIN \n    Business_Attributes AS T2 ON T1.business_id = T2.business_id\nWHERE \n    T1.city = 'Mesa'\nGROUP BY \n    T2.attribute_value",
            "SELECT \n    CAST(COUNT(T1.city) AS REAL) * 100 / (SELECT COUNT(business_id) FROM Business) AS percentage,\n    T2.attribute_value\nFROM \n    Business AS T1 \nINNER JOIN \n    Business_Attributes AS T2 ON T1.business_id = T2.business_id\nWHERE \n    T1.city = 'Mesa'"
        ],
        "rule_sql": []
    },
    "7863": {
        "db_id": "world",
        "question": "List all the languages used in Europe.",
        "ground_truth": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe'",
        "amends": [
            "Do use `INNER JOIN` between `Country` and `CountryLanguage` on `T1.Code = T2.CountryCode` instead of querying a single table. Do select `T2.Language` from the joined table instead of `language` from a single table. Do filter on `T1.Continent = 'Europe'` instead of `continent = 'Asia'`. Do remove `DISTINCT` instead of keeping it since the join may naturally produce unique results. The amended query now correctly retrieves languages from European countries through proper table relationships instead of incorrectly assuming language data exists in a single countries table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT language FROM countries WHERE continent = 'Asia';",
            "SELECT T2.Language FROM Country T1 INNER JOIN CountryLanguage T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe'"
        ],
        "rule_sql": []
    },
    "4329": {
        "db_id": "simpson_episodes",
        "question": "How many episodes have the star score greater than 8?",
        "ground_truth": "SELECT COUNT(DISTINCT episode_id) FROM Vote WHERE stars > 8;",
        "amends": [
            "Do use `COUNT(DISTINCT episode_id)` instead of `COUNT(*)` to count unique episodes rather than all rows. Do reference the `Vote` table instead of `episodes` as the correct data source. Do filter on `stars > 8` instead of `star_score > 8` to use the proper column name and rating threshold. The amended query now correctly counts distinct episodes with high ratings from the Vote table, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE star_score > 8;",
            "SELECT COUNT(DISTINCT episode_id) FROM Vote WHERE stars > 8;"
        ],
        "rule_sql": []
    },
    "4222": {
        "db_id": "simpson_episodes",
        "question": "List the nominee, keywords and episode ID of the title \"The Good, the Sad and the Drugly\".",
        "ground_truth": "SELECT T3.person, T1.keyword, T1.episode_id FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T2.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';",
        "amends": [
            "Do select `T3.person` and `T1.keyword` instead of `nominee` and `keywords`. Do join `Keyword AS T1` and `Episode AS T2` with `INNER JOIN` on `T1.episode_id = T2.episode_id` instead of querying only the `episodes` table. Do add another `INNER JOIN` to `Award AS T3` on `T2.episode_id = T3.episode_id` instead of omitting this table. Do filter with `T2.title = 'The Good, the Sad and the Drugly'` instead of just `title` and add `T3.result = 'Nominee'` instead of omitting this condition. The amended query now correctly retrieves nominee information from the Award table with proper joins and filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nominee, keywords, episode_id FROM episodes WHERE title = 'The Good, the Sad and the Drugly'",
            "SELECT T3.person, T1.keyword, T2.episode_id\nFROM Keyword AS T1\nINNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id\nINNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id\nWHERE T2.title = 'The Good, the Sad and the Drugly'\nAND T3.result = 'Nominee'"
        ],
        "rule_sql": []
    },
    "982": {
        "db_id": "computer_student",
        "question": "Which are the courses with the most number of professors? State the course ID and the level of the course.",
        "ground_truth": "SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.courseLevel ORDER BY COUNT(T1.course_id) DESC LIMIT 1",
        "amends": [
            "Do specify table aliases `T1.course_id` and `T1.courseLevel` instead of unqualified `course_id` and `level`. Do join `course AS T1` with `taughtBy AS T2` on `T1.course_id = T2.course_id` instead of querying only the `courses` table. Do count `T1.course_id` instead of `professor_id` in the ORDER BY clause. Do add `LIMIT 1` to return only the top result instead of omitting it. The amended query now correctly joins the course and taughtBy tables to count teaching relationships and returns the single course with the highest count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_id, level, COUNT(professor_id) as num_professors \nFROM courses \nGROUP BY course_id, level \nORDER BY num_professors DESC;",
            "SELECT T1.course_id, T1.courseLevel\nFROM course AS T1\nJOIN taughtBy AS T2 ON T1.course_id = T2.course_id\nGROUP BY T1.course_id, T1.courseLevel\nORDER BY COUNT(T1.course_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5064": {
        "db_id": "olympics",
        "question": "What is the NOC code of the region of the competitors weighted 77 kg?",
        "ground_truth": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.weight = 77",
        "amends": [
            "Do select `noc` from `noc_region` instead of `noc_code` from `competitors`. Do join `noc_region` with `person_region` on `id=region_id` instead of querying a single table. Do join `person_region` with `person` on `person_id=id` instead of omitting this relationship. Do filter on `person.weight` instead of `competitors.weight`. Do use table aliases `T1`, `T2`, `T3` instead of no aliases. The amended query now correctly retrieves NOC codes by traversing the proper relationship path from person weight through region associations."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT noc_code FROM competitors WHERE weight = 77;",
            "SELECT DISTINCT T3.noc\nFROM person T1\nJOIN person_region T2 ON T1.id = T2.person_id\nJOIN noc_region T3 ON T2.region_id = T3.id\nWHERE T1.weight = 77"
        ],
        "rule_sql": []
    },
    "7900": {
        "db_id": "world",
        "question": "What are the official languages used in Greece?",
        "ground_truth": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.name = 'Greece'",
        "amends": [
            "Do add `CountryLanguage AS T1` and `Country AS T2` tables with an `INNER JOIN` on `T1.CountryCode = T2.Code` instead of querying only the `countries` table. Do add the filter `T1.IsOfficial = 'T'` to select only official languages instead of omitting this condition. Do change the column selection to `T1.Language` instead of `language` from the countries table. Do remove the direct query of the countries table and instead join through the CountryLanguage table to properly access language data. The amended query now correctly retrieves only official languages for Greece by properly joining the relational tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM countries WHERE name = 'Greece';",
            "SELECT T1.Language \nFROM CountryLanguage AS T1 \nINNER JOIN Country AS T2 ON T1.CountryCode = T2.Code \nWHERE T2.Name = 'Greece' AND T1.IsOfficial = 'T'"
        ],
        "rule_sql": []
    },
    "8678": {
        "db_id": "chicago_crime",
        "question": "What is the FBI code and definition of Gambling?",
        "ground_truth": "SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling'",
        "amends": [
            "Do select `fbi_code_no` and `description` instead of `code` and `definition`. Do reference table `FBI_Code` instead of `fbi_codes`. Do filter on `title = 'Gambling'` instead of `crime_type = 'Gambling'`. The amended query now correctly retrieves gambling-related FBI codes using the proper column names and table structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT code, definition FROM fbi_codes WHERE crime_type = 'Gambling';",
            "SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling';"
        ],
        "rule_sql": []
    },
    "6897": {
        "db_id": "retails",
        "question": "In 1997, how many orders were shipped via mail?",
        "ground_truth": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'",
        "amends": [
            "Do reference the `lineitem` table instead of `orders`, and use `l_orderkey` for counting instead of `*`. Do filter on `l_shipmode = 'MAIL'` instead of `ship_via = 'mail'`, and use `STRFTIME('%Y', l_shipdate) = '1997'` for year extraction instead of `YEAR(order_date) = 1997`. The amended query now correctly counts line items shipped via mail in 1997, matching the intended behavior.",
            "Do remove `DISTINCT` from the count aggregation instead of keeping it. Do remove the filter condition `l_shipmode = 'MAIL'` instead of including it. Do keep the `STRFTIME('%Y', l_shipdate) = '1997'` filter condition instead of removing it. The amended query now correctly counts all order keys from 1997 without the ship mode restriction, matching the intended behavior.",
            "Do add `AND l_shipmode = 'MAIL'` to the WHERE clause instead of omitting this filter condition, which now restricts the count to only mail shipments from 1997 instead of all shipments from that year."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE YEAR(order_date) = 1997 AND ship_via = 'mail';",
            "SELECT COUNT(DISTINCT l_orderkey) \nFROM lineitem \nWHERE l_shipmode = 'MAIL' \nAND STRFTIME('%Y', l_shipdate) = '1997'",
            "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997'",
            "SELECT COUNT(l_orderkey) \nFROM lineitem \nWHERE STRFTIME('%Y', l_shipdate) = '1997' \nAND l_shipmode = 'MAIL'"
        ],
        "rule_sql": []
    },
    "6162": {
        "db_id": "food_inspection_2",
        "question": "What is the employee's full name involved in the canvass inspection type on March 09, 2010?",
        "ground_truth": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-03-09' AND T2.inspection_type = 'Canvass'",
        "amends": [
            "Do add `DISTINCT` instead of omitting it. Do use table aliases `T1` and `T2` instead of no aliases. Do change the source from `employees` to `employee AS T1 INNER JOIN inspection AS T2` instead of a single table. Do add join condition `ON T1.employee_id = T2.employee_id` instead of no join. Do move the `inspection_type` filter to reference `T2.inspection_type` instead of the original table. Do change the `inspection_type` value to 'Canvass' (capitalized) instead of 'canvass'. Do move the `inspection_date` filter to reference `T2.inspection_date` instead of the original table. The amended query now correctly joins employee and inspection tables to find employees who conducted specific inspections on the given date.",
            "Do select `T1.first_name` and `T1.last_name` as separate columns instead of concatenating them into `full_name`. Do remove the `DISTINCT` modifier instead of keeping it. Do maintain the `INNER JOIN` on `T1.employee_id = T2.employee_id` with the same predicate. Do keep both `WHERE` filters for `T2.inspection_type = 'Canvass'` and `T2.inspection_date = '2010-03-09'` with the same conditions. The amended query now matches the right SQL's behavior by returning individual name columns without concatenation and without unnecessary distinct filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE inspection_type = 'canvass' AND inspection_date = '2010-03-09';",
            "SELECT DISTINCT T1.first_name || ' ' || T1.last_name AS full_name\nFROM employee AS T1\nINNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id\nWHERE T2.inspection_type = 'Canvass'\nAND T2.inspection_date = '2010-03-09';",
            "SELECT T1.first_name, T1.last_name\nFROM employee AS T1\nINNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id\nWHERE T2.inspection_type = 'Canvass'\nAND T2.inspection_date = '2010-03-09'"
        ],
        "rule_sql": []
    },
    "4140": {
        "db_id": "citeseer",
        "question": "What is the most cited word? How many papers was that word cited in?",
        "ground_truth": "SELECT word_cited_id, COUNT(paper_id) FROM content GROUP BY word_cited_id ORDER BY COUNT(word_cited_id) DESC LIMIT 1",
        "amends": [
            "Do select `word_cited_id` and `COUNT(paper_id)` instead of `word` and `COUNT(*) as citation_count`. Do use `FROM content` instead of `FROM citations`. Do group by `word_cited_id` instead of `word`. Do order by `COUNT(word_cited_id)` instead of `citation_count`. The amended query now correctly counts paper citations per word_cited_id from the content table rather than counting word occurrences from a citations table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word, COUNT(*) as citation_count FROM citations GROUP BY word ORDER BY citation_count DESC LIMIT 1;",
            "SELECT word_cited_id, COUNT(paper_id) AS citation_count\nFROM content\nGROUP BY word_cited_id\nORDER BY COUNT(word_cited_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7221": {
        "db_id": "works_cycles",
        "question": "What is the email address of the Facilities Manager?",
        "ground_truth": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.JobTitle = 'Facilities Manager'",
        "amends": [
            "Do select `T3.EmailAddress` instead of `phone_number` from the `employees` table. Do join three tables instead of querying a single table, specifically adding `INNER JOIN Person AS T2` on `T1.BusinessEntityID = T2.BusinessEntityID` and `INNER JOIN EmailAddress AS T3` on `T2.BusinessEntityID = T3.BusinessEntityID` instead of querying only the `employees` table. Do use proper table aliases `T1`, `T2`, and `T3` instead of no aliases. Do filter on `T1.JobTitle = 'Facilities Manager'` instead of `job_title = 'Facilities Manager'` to maintain the correct table reference in the WHERE clause. The amended query now correctly retrieves email addresses from the related tables instead of phone numbers from a single table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number FROM employees WHERE job_title = 'Facilities Manager';",
            "SELECT T3.EmailAddress\nFROM Employee AS T1\nINNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID\nINNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID\nWHERE T1.JobTitle = 'Facilities Manager';"
        ],
        "rule_sql": []
    },
    "588": {
        "db_id": "codebase_comments",
        "question": "Are the comments for the method \"HtmlSharp.HtmlParser.Feed\" in XML format?",
        "ground_truth": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'",
        "amends": [
            "Do select `CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat` instead of `*` from all columns. Do query from `Method` table instead of `comments` table. Do filter on `Name = 'HtmlSharp.HtmlParser.Feed'` instead of `method_name = 'HtmlSharp.HtmlParser.Feed' AND format = 'XML'`. Do remove the `format = 'XML'` condition entirely instead of keeping it, as the XML format determination is now handled by the CASE expression on the CommentIsXml column. The amended query now correctly retrieves XML format status from the Method table using proper column names and conditional logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM comments WHERE method_name = 'HtmlSharp.HtmlParser.Feed' AND format = 'XML';",
            "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'"
        ],
        "rule_sql": []
    },
    "4618": {
        "db_id": "mental_health_survey",
        "question": "How many questions were asked in the questionary for the mental health survey?",
        "ground_truth": "SELECT COUNT(questiontext) FROM Question",
        "amends": [
            "Do reference the `Question` table instead of `questions`, and do count `questiontext` instead of using `COUNT(*)` to exclude NULL values, instead of counting all rows including those with NULL questiontext. Do use proper table name casing `Question` instead of lowercase `questions`, and do filter on the correct column name `questiontext` for counting instead of the generic row count approach. The amended query now correctly counts only non-NULL questiontext values in the Question table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM questions WHERE survey_type = 'physical_health';",
            "SELECT COUNT(questiontext) FROM Question;"
        ],
        "rule_sql": []
    },
    "2610": {
        "db_id": "regional_sales",
        "question": "List out the product name of order which has unit cost of 781.22.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT IIF(T1.`Unit Cost` = 781.22, T2.`Product Name`, NULL) AS T FROM `Sales Orders` T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL",
        "amends": [
            "Do use a subquery with `IIF` conditional logic to return `Product Name` instead of directly selecting `product_name`. Do add an `INNER JOIN` on `Products` table with `T2.ProductID = T1._ProductID` instead of querying only the `orders` table. Do compare `Unit Cost` as numeric value `781.22` instead of string `'781.22'`. Do wrap the query in an outer filter `WHERE T IS NOT NULL` instead of filtering directly in the main query. Do add `DISTINCT` to eliminate duplicates instead of potentially returning multiple rows. The amended query now correctly handles the join relationship and data type comparison to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM orders WHERE unit_cost = '781.22';",
            "SELECT DISTINCT T\nFROM (\n    SELECT IIF(\"Unit Cost\" = 781.22, \"Product Name\", NULL) AS T\n    FROM \"Sales Orders\"\n    INNER JOIN Products ON Products.ProductID = \"Sales Orders\"._ProductID\n)\nWHERE T IS NOT NULL"
        ],
        "rule_sql": []
    },
    "2501": {
        "db_id": "genes",
        "question": "For the pairs of genes both from the class ATPases, what is the average expression correlation score?",
        "ground_truth": "SELECT AVG(T2.Expression_Corr) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Class = 'ATPases'",
        "amends": [
            "Do use table `Genes` aliased as `T1` and `Interactions` aliased as `T2` instead of `gene_expression_correlations`. Do perform an `INNER JOIN` on `T1.GeneID = T2.GeneID1` instead of querying a single table. Do select `AVG(T2.Expression_Corr)` instead of `AVG(correlation_score)`. Do filter on `T1.Class = 'ATPases'` instead of filtering both `gene1_class` and `gene2_class` with the same value. Do remove the redundant second class filter condition instead of keeping duplicate filtering logic. The amended query now correctly calculates average expression correlations for ATPases genes through proper table relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(correlation_score) \nFROM gene_expression_correlations \nWHERE gene1_class = 'ATPases' AND gene2_class = 'ATPases';",
            "SELECT AVG(T2.Expression_Corr) \nFROM Genes T1\nINNER JOIN Interactions T2 ON T1.GeneID = T2.GeneID1\nWHERE T1.Class = 'ATPases'"
        ],
        "rule_sql": []
    },
    "5173": {
        "db_id": "address",
        "question": "Provide the zip codes and CBSA officers of the postal point in Oxford.",
        "ground_truth": "SELECT T2.zip_code, T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Oxford'",
        "amends": [
            "Do select `T2.zip_code` and `T1.CBSA_name` instead of `zip_code` and `cbsa_officer`. Do use `FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA` instead of `FROM postal_points`. Do keep the `WHERE T2.city = 'Oxford'` filter but apply it to the joined table instead of the original table. The amended query now correctly joins the CBSA and zip_data tables to retrieve zip codes with their corresponding CBSA names for Oxford cities."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code, cbsa_officer FROM postal_points WHERE city = 'Oxford';",
            "SELECT T2.zip_code, T1.CBSA_name \nFROM CBSA AS T1 \nINNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA \nWHERE T2.city = 'Oxford'"
        ],
        "rule_sql": []
    },
    "2879": {
        "db_id": "professional_basketball",
        "question": "How many teams in the NBA which has at least 3 all-star players?",
        "ground_truth": "SELECT COUNT(*) FROM ( SELECT tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NBA' GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) > 3 ) AS T3",
        "amends": [
            "Do use a subquery with `INNER JOIN` between `players_teams` and `player_allstar` tables on `playerID` instead of querying the `teams` table directly. Do add a `WHERE` filter for `lgID = 'NBA'` instead of omitting league filtering. Do change from counting teams with `all_star_players >= 3` to grouping by `tmID` and using `HAVING COUNT(DISTINCT playerID) > 3` to count distinct all-star players per team instead of relying on a pre-aggregated column. Do remove the direct table access and instead use a derived table `T3` from the subquery result instead of querying base tables directly. The amended query now correctly identifies NBA teams with more than 3 distinct all-star players by joining and counting actual player records rather than using potentially incorrect pre-calculated values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teams WHERE all_star_players >= 3;",
            "SELECT COUNT(*) AS team_count\nFROM (\n    SELECT pt.tmID\n    FROM players_teams pt\n    INNER JOIN player_allstar pa ON pt.playerID = pa.playerID\n    WHERE pt.lgID = 'NBA'\n    GROUP BY pt.tmID\n    HAVING COUNT(DISTINCT pt.playerID) > 3\n) AS T3"
        ],
        "rule_sql": []
    },
    "2046": {
        "db_id": "music_tracker",
        "question": "How many times was the album released by blowfly in 1980 downloaded?",
        "ground_truth": "SELECT totalSnatched FROM torrents WHERE artist LIKE 'blowfly' AND groupYear = 1980",
        "amends": [
            "Do select `totalSnatched` instead of `COUNT(*)`. Do query from `torrents` instead of `downloads`. Do use `LIKE` for pattern matching on `artist` instead of exact equality comparison. Do filter on `groupYear` instead of `year`. The amended query now correctly retrieves the total snatched count from the torrents table for the specified artist pattern and year."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM downloads WHERE artist = 'blowfly' AND year = 1980;",
            "SELECT totalSnatched FROM torrents WHERE artist LIKE '%blowfly%' AND groupYear = 1980"
        ],
        "rule_sql": []
    },
    "8647": {
        "db_id": "chicago_crime",
        "question": "How many cases have been arrested among the crimes that happened in the restaurant of Englewood?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Englewood' AND T1.location_description = 'RESTAURANT'",
        "amends": [
            "Do use `SUM(CASE WHEN T1.arrest = 'TRUE' THEN 1 ELSE 0 END)` instead of `COUNT(*)` to count only arrested cases. Do join `District AS T2` on `T1.district_no = T2.district_no` instead of querying only the crimes table. Do filter on `T2.district_name = 'Englewood'` instead of `neighborhood = 'Englewood'` to use the proper district relationship. Do filter on `T1.location_description = 'RESTAURANT'` instead of `location = 'restaurant'` to use the correct column name and case. Do remove the direct `arrested = 'true'` filter instead of keeping it since the conditional sum now handles the arrest logic. The amended query now correctly counts restaurant crimes with arrests in the Englewood district by properly joining tables and using appropriate column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE location = 'restaurant' AND neighborhood = 'Englewood' AND arrested = 'true';",
            "SELECT SUM(CASE WHEN T1.arrest = 'TRUE' THEN 1 ELSE 0 END) AS arrested_cases\nFROM Crime AS T1\nJOIN District AS T2 ON T1.district_no = T2.district_no\nWHERE T2.district_name = 'Englewood' \nAND T1.location_description = 'RESTAURANT'"
        ],
        "rule_sql": []
    },
    "8337": {
        "db_id": "mondial_geo",
        "question": "What is the name and length of rivers located at 'Orleans' city?",
        "ground_truth": "SELECT T3.Name, T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Orleans'",
        "amends": [
            "Do add tables `city AS T1`, `located AS T2`, and `river AS T3` with proper joins instead of querying `rivers` table directly. Do use `INNER JOIN` on `T1.Name = T2.City` and `INNER JOIN` on `T3.Name = T2.River` instead of no joins. Do change the WHERE filter to `T1.Name = 'Orleans'` instead of `city = 'Orleans'`. Do select `T3.Name` and `T3.Length` instead of `name` and `length` from the wrong table. The amended query now correctly retrieves river information through proper table relationships instead of assuming a direct rivers table with city data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, length FROM rivers WHERE city = 'Orleans';",
            "SELECT T3.Name, T3.Length \nFROM city AS T1 \nINNER JOIN located AS T2 ON T1.Name = T2.City \nINNER JOIN river AS T3 ON T3.Name = T2.River \nWHERE T1.Name = 'Orleans'"
        ],
        "rule_sql": []
    },
    "4838": {
        "db_id": "legislator",
        "question": "List down the district number of the representative of the house named Jonathan Grout.",
        "ground_truth": "SELECT T2.district FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.last_name = 'Grout' AND T1.first_name = 'Jonathan' AND T2.type = 'rep'",
        "amends": [
            "Do select `district` from the `historical-terms` table instead of `district_number` from the `representatives` table. Do use `INNER JOIN` between `historical` and `historical-terms` tables on `bioguide_id` instead of querying a single table. Do add filter conditions for `last_name = 'Grout'`, `first_name = 'Jonathan'`, and `type = 'rep'` instead of only filtering by `name = 'Jonathan Grout'`. The amended query now correctly joins the historical data tables and applies proper filtering to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district_number FROM representatives WHERE name = 'Jonathan Grout';",
            "SELECT ht.district\nFROM historical h\nINNER JOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE h.first_name = 'Jonathan' \nAND h.last_name = 'Grout' \nAND ht.type = 'rep'"
        ],
        "rule_sql": []
    },
    "1937": {
        "db_id": "soccer_2016",
        "question": "Which team wins the toss during the match ID 336011, and can you tell me whether they decided to bat or field?",
        "ground_truth": "SELECT T2.Toss_Name, T1.Toss_Decide, T1.Toss_Winner FROM `Match` AS T1 INNER JOIN Toss_Decision AS T2 ON T1.Toss_Decide = T2.Toss_Id WHERE T1.Match_Id = '336011'",
        "amends": [
            "Do use explicit table aliases `T1` and `T2` instead of direct table references. Do join `Match` table `T1` with `Toss_Decision` table `T2` on `T1.Toss_Decide = T2.Toss_Id` instead of querying a single table. Do select `T2.Toss_Name` and `T1.Toss_Decide` instead of only `toss_winner` and `toss_decision`. Do add `T1.Toss_Winner` to the SELECT list instead of omitting it. Do use string comparison `T1.Match_Id = '336011'` instead of numeric comparison `match_id = 336011`. The amended query now correctly joins related tables to retrieve comprehensive toss information and matches the RIGHT_SQL's behavior.",
            "Do include `T1.Toss_Decide` in the SELECT list instead of omitting it. Do use explicit `INNER JOIN` instead of implicit `JOIN`. Do add table aliases with `AS` keyword instead of omitting them. Do reorder the SELECT list to place `T2.Toss_Name` first instead of `T1.Toss_Winner` first. The amended query now correctly includes all relevant columns and uses proper join syntax to match the intended behavior.",
            "Do reorder the SELECT list to `T2.Toss_Name, T1.Toss_Decide, T1.Toss_Winner` instead of `T1.Toss_Winner, T2.Toss_Name, T1.Toss_Decide` to match the column sequence in the correct query. The amended query now matches RIGHT_SQL's behavior with identical column ordering and output."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT toss_winner, toss_decision FROM matches WHERE match_id = 336011",
            "SELECT T1.Toss_Winner, T2.Toss_Name \nFROM Match T1 \nJOIN Toss_Decision T2 ON T1.Toss_Decide = T2.Toss_Id \nWHERE T1.Match_Id = '336011'",
            "SELECT T1.Toss_Winner, T2.Toss_Name, T1.Toss_Decide \nFROM Match AS T1 \nINNER JOIN Toss_Decision AS T2 ON T1.Toss_Decide = T2.Toss_Id \nWHERE T1.Match_Id = '336011'",
            "SELECT T2.Toss_Name, T1.Toss_Decide, T1.Toss_Winner\nFROM Match AS T1\nINNER JOIN Toss_Decision AS T2 ON T1.Toss_Decide = T2.Toss_Id\nWHERE T1.Match_Id = '336011'"
        ],
        "rule_sql": []
    },
    "3460": {
        "db_id": "video_games",
        "question": "How many shooter games are there?",
        "ground_truth": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Shooter'",
        "amends": [
            "Do join `game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id` instead of querying only the `games` table. Do filter on `T2.genre_name = 'Shooter'` instead of `genre = 'shooter'` to use the normalized genre table. Do count `T1.id` instead of `COUNT(*)` for more precise counting of game records. Do use proper table aliases `T1` and `T2` instead of direct column references. The amended query now correctly joins the normalized schema and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE genre = 'shooter';",
            "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Shooter'"
        ],
        "rule_sql": []
    },
    "5349": {
        "db_id": "beer_factory",
        "question": "Please name all of the cities in California.",
        "ground_truth": "SELECT DISTINCT City FROM customers WHERE State = 'CA'",
        "amends": [
            "Do select `DISTINCT City` instead of `name` and use table `customers` instead of `cities`. Do filter on `State = 'CA'` instead of `state = 'California'` to match the correct state abbreviation format and data source. The amended query now correctly retrieves unique city names from the customers table for California using the proper state code."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cities WHERE state = 'California';",
            "SELECT DISTINCT City FROM customers WHERE State = 'CA';"
        ],
        "rule_sql": []
    },
    "7091": {
        "db_id": "works_cycles",
        "question": "What is the credit rating of the company whose average lead time is 16 days for a standard price of 18.9900 and whose last receipt date is August 27, 2011?",
        "ground_truth": "SELECT T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.StandardPrice = 18.9900 AND T1.AverageLeadTime = 16 AND STRFTIME('%Y-%m-%d', T1.LastReceiptDate) = '2011-08-27'",
        "amends": [
            "Do select `T2.CreditRating` from the `Vendor` table instead of `credit_rating` from `companies`. Do join `ProductVendor AS T1` with `Vendor AS T2` using `INNER JOIN` on `T1.BusinessEntityID = T2.BusinessEntityID` instead of querying a single `companies` table. Do filter on `T1.StandardPrice = 18.9900` and `T1.AverageLeadTime = 16` instead of `standard_price = 18.9900` and `avg_lead_time = 16`. Do use `STRFTIME('%Y-%m-%d', T1.LastReceiptDate) = '2011-08-27'` for date comparison instead of direct `last_receipt_date = '2011-08-27'` to handle date formatting properly. The amended query now correctly joins the appropriate tables and handles date comparison with proper formatting to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT credit_rating FROM companies WHERE avg_lead_time = 16 AND standard_price = 18.9900 AND last_receipt_date = '2011-08-27';",
            "SELECT T2.CreditRating \nFROM ProductVendor AS T1\nINNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID\nWHERE T1.StandardPrice = 18.9900 \nAND T1.AverageLeadTime = 16\nAND STRFTIME('%Y-%m-%d', T1.LastReceiptDate) = '2011-08-27'"
        ],
        "rule_sql": []
    },
    "7986": {
        "db_id": "music_platform_2",
        "question": "What is the average rating of the podcast \"Please Excuse My Dead Aunt Sally\"?",
        "ground_truth": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally'",
        "amends": [
            "Do join `reviews AS T2` on `T2.podcast_id = T1.podcast_id` instead of querying only the `podcasts` table. Do reference `T2.rating` in the `AVG` function instead of `rating` directly from the podcasts table. Do add the `INNER JOIN` clause with the correct join condition instead of omitting the necessary table relationship. Do use table aliases `T1` and `T2` for clarity instead of no aliases. The amended query now correctly calculates the average rating from the reviews table for the specific podcast title, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM podcasts WHERE title = 'Please Excuse My Dead Aunt Sally';",
            "SELECT AVG(T2.rating) AS average_rating\nFROM podcasts AS T1\nINNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id\nWHERE T1.title = 'Please Excuse My Dead Aunt Sally'"
        ],
        "rule_sql": []
    },
    "4926": {
        "db_id": "olympics",
        "question": "Among the competitors of the 1994 Winter Olympic Game, what is the percentage of those from Finland?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T5.region_name = 'Finland' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '1994 Winter'",
        "amends": [
            "Do use explicit table joins with `games`, `games_competitor`, `person`, `person_region`, and `noc_region` instead of querying only the `competitors` table. Do calculate percentage using `CAST(COUNT(CASE WHEN T5.region_name = 'Finland' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.id)` instead of `COUNT(*) * 100.0 / (SELECT COUNT(*) FROM competitors WHERE year = 1994 AND season = 'Winter')`. Do filter by `T1.games_name = '1994 Winter'` instead of `year = 1994 AND season = 'Winter'`. Do reference `T5.region_name = 'Finland'` for country filtering instead of `country = 'Finland'`. Do use proper join conditions with `T1.id = T2.games_id`, `T2.person_id = T3.id`, `T3.id = T4.person_id`, and `T4.region_id = T5.id` instead of the simplified single-table approach. The amended query now correctly calculates the percentage of Finnish competitors in the 1994 Winter games using the proper schema relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM competitors WHERE year = 1994 AND season = 'Winter')) AS percentage\nFROM competitors \nWHERE country = 'Finland' AND year = 1994 AND season = 'Winter';",
            "SELECT \n    CAST(COUNT(CASE WHEN T5.region_name = 'Finland' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.id) AS percentage\nFROM \n    games T1\n    JOIN games_competitor T2 ON T1.id = T2.games_id\n    JOIN person T3 ON T2.person_id = T3.id\n    JOIN person_region T4 ON T3.id = T4.person_id\n    JOIN noc_region T5 ON T4.region_id = T5.id\nWHERE \n    T1.games_name = '1994 Winter';"
        ],
        "rule_sql": []
    },
    "5584": {
        "db_id": "shipping",
        "question": "How many shipments in 2017 were done by Sue Newell?",
        "ground_truth": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'",
        "amends": [
            "Do join `driver` table via `INNER JOIN` on `driver_id` instead of querying only the `shipments` table. Do filter by `ship_date` year using `STRFTIME('%Y', T1.ship_date) = '2017'` instead of a direct `year = 2017` column. Do filter by driver first and last name with `T2.first_name = 'Sue' AND T2.last_name = 'Newell'` instead of a single `shipper_name` field. The amended query now correctly counts shipments from 2017 made by driver Sue Newell by properly joining related tables and using appropriate date and name filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE year = 2017 AND shipper_name = 'Sue Newell';",
            "SELECT COUNT(*) \nFROM shipment T1\nINNER JOIN driver T2 ON T1.driver_id = T2.driver_id\nWHERE STRFTIME('%Y', T1.ship_date) = '2017'\nAND T2.first_name = 'Sue' \nAND T2.last_name = 'Newell'"
        ],
        "rule_sql": []
    },
    "6735": {
        "db_id": "retails",
        "question": "How many items did Customer#000021159 order? Calculate those items total charges.",
        "ground_truth": "SELECT COUNT(T2.o_orderkey), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey INNER JOIN lineitem AS T3 ON T2.o_orderkey = T3.l_orderkey WHERE T1.c_name = 'Customer#000021159' GROUP BY T3.l_linenumber",
        "amends": [
            "Do add `customer` and `lineitem` tables with `INNER JOIN` on `T1.c_custkey = T2.o_custkey` and `T2.o_orderkey = T3.l_orderkey` instead of querying only `orders`. Do change the WHERE filter to `T1.c_name = 'Customer#000021159'` instead of `o_custkey = '000021159'`. Do add `GROUP BY T3.l_linenumber` instead of omitting grouping. Do change the aggregate expressions to `COUNT(T2.o_orderkey)` and `SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax))` instead of `COUNT(*)` and `SUM(o_totalprice)`. The amended query now correctly calculates order counts and total charges including lineitem pricing details for the specified customer name, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) as item_count, SUM(o_totalprice) as total_charges \nFROM orders \nWHERE o_custkey = '000021159';",
            "SELECT \n    COUNT(DISTINCT T2.o_orderkey) AS order_count,\n    SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) AS total_charges\nFROM \n    customer T1\nINNER JOIN \n    orders T2 ON T1.c_custkey = T2.o_custkey\nINNER JOIN \n    lineitem T3 ON T2.o_orderkey = T3.l_orderkey\nWHERE \n    T1.c_name = 'Customer#000021159'\nGROUP BY \n    T3.l_linenumber"
        ],
        "rule_sql": []
    },
    "4251": {
        "db_id": "simpson_episodes",
        "question": "Name of the crew that were born in California, USA between 1958 and 1969.",
        "ground_truth": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1958' AND birth_place = 'California' AND birth_country = 'USA';",
        "amends": [
            "Do query from `Person` table instead of `crew` table. Do filter by `SUBSTR(birthdate, 1, 4) = '1958'` instead of `birth_year BETWEEN 1958 AND 1969`. Do use separate conditions `birth_place = 'California'` and `birth_country = 'USA'` instead of combined `birth_place = 'California, USA'`. The amended query now correctly filters for people born in 1958 specifically from California, USA by properly separating location components and using precise year extraction from the birthdate field."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM crew WHERE birth_place = 'California, USA' AND birth_year BETWEEN 1958 AND 1969;",
            "SELECT name FROM Person WHERE birth_place = 'California' AND birth_country = 'USA' AND SUBSTR(birthdate, 1, 4) = '1958';"
        ],
        "rule_sql": []
    },
    "3626": {
        "db_id": "authors",
        "question": "What are the keywords for the paper which was published on \"Modeling Identification and Control\" in 1994?",
        "ground_truth": "SELECT T2.Keyword FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Modeling Identification and Control' AND T2.Year = 1994",
        "amends": [
            "Do select `T2.Keyword` instead of `keywords` and use table aliases `T1` and `T2` instead of direct table references. Do join `Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId` instead of querying only the `papers` table. Do filter on `T1.FullName = 'Modeling Identification and Control'` instead of `title = 'Modeling Identification and Control'` and move the year filter to `T2.Year = 1994` instead of applying it to the wrong table. The amended query now correctly retrieves keywords from papers in the specified journal rather than incorrectly searching for papers with a matching title, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keywords FROM papers WHERE title = 'Modeling Identification and Control' AND year = 1994;",
            "SELECT T2.Keyword FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Modeling Identification and Control' AND T2.Year = 1994"
        ],
        "rule_sql": []
    },
    "8823": {
        "db_id": "food_inspection",
        "question": "List down the eateries' IDs with structural inspection type in February 2016.",
        "ground_truth": "SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND `date` LIKE '2016-02%'",
        "amends": [
            "Do select `business_id` instead of `eatery_id` as the column name. Do use `type = 'Structural Inspection'` instead of `inspection_type = 'Structural'` for the filter condition. Do reference `date` instead of `inspection_date` for the date column while maintaining the same LIKE pattern `'2016-02%'`. The amended query now correctly matches the RIGHT_SQL's behavior with the proper column names and filter values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT eatery_id FROM inspections WHERE inspection_type = 'Structural' AND inspection_date LIKE '2016-02%';",
            "SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND date LIKE '2016-02%'"
        ],
        "rule_sql": []
    },
    "1413": {
        "db_id": "synthea",
        "question": "Who is the patient involved in the care plan with code 311791003?",
        "ground_truth": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002",
        "amends": [
            "Do select specific columns `T2.first` and `T2.last` instead of selecting all columns with `*`. Do join tables using `INNER JOIN` between `careplans AS T1` and `patients AS T2` on `T1.PATIENT = T2.patient` instead of querying only the `patients` table. Do filter on `T1.CODE = 315043002` instead of filtering on `care_plan_code = 311791003`. The amended query now correctly retrieves patient names based on care plan codes through proper table relationships.",
            "Do filter on `T1.CODE = 315043002` instead of `T1.CODE = 311791003` in the WHERE clause, changing the specific medical code condition to match the correct clinical criteria. The amended query now matches RIGHT_SQL's behavior by using the appropriate diagnosis code for patient care plan filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM patients WHERE care_plan_code = 311791003;",
            "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 311791003",
            "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002"
        ],
        "rule_sql": []
    },
    "1993": {
        "db_id": "soccer_2016",
        "question": "How many times did K Goel played as a player only?",
        "ground_truth": "SELECT COUNT(T1.Match_Id) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3",
        "amends": [
            "Do join `Player_Match AS T1` with `Player AS T2` on `T1.Player_Id = T2.Player_Id` instead of querying only the `players` table. Do join `Rolee AS T3` on `T1.Role_Id = T3.Role_Id` instead of omitting this table. Do filter on `T2.Player_Name = 'K Goel'` instead of `name = 'K Goel'`. Do filter on `T3.Role_Id = 3` instead of `position = 'player'`. Do count `T1.Match_Id` instead of `COUNT(*)`. The amended query now correctly counts matches for the specific player with the proper role identifier, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE name = 'K Goel' AND position = 'player';",
            "SELECT COUNT(DISTINCT T1.Match_Id) \nFROM Player_Match AS T1\nJOIN Player AS T2 ON T1.Player_Id = T2.Player_Id\nJOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id\nWHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3"
        ],
        "rule_sql": []
    },
    "4292": {
        "db_id": "simpson_episodes",
        "question": "Who did \"The Tiny Canadian\" play as in the show?",
        "ground_truth": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'The Tiny Canadian';",
        "amends": [
            "Do select `T2.role` instead of `character_name` and use table aliases `Person AS T1` and `Credit AS T2` instead of just `actors`. Do join tables with `INNER JOIN Credit AS T2 ON T1.name = T2.person` instead of querying a single table. Do filter on `T1.nickname = 'The Tiny Canadian'` instead of `actor_name = 'The Tiny Canadian'` to correctly reference the nickname field. The amended query now properly joins the Person and Credit tables to retrieve roles associated with the nickname rather than incorrectly assuming character names are stored directly in an actors table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM actors WHERE actor_name = 'The Tiny Canadian';",
            "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'The Tiny Canadian'"
        ],
        "rule_sql": []
    },
    "3178": {
        "db_id": "donor",
        "question": "What is the essay title of the project that have the highest total price excluding optional support and who is the biggest donor? Identify the donor and calculate how many percent did he/she donated in the project.",
        "ground_truth": "SELECT T1.title, T3.donor_acctid, CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T3.donation_to_project DESC LIMIT 1",
        "amends": [
            "Do select `title` and `donor_acctid` instead of `essay_title` and `donor_name`. Do calculate donation percentage using `CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support` instead of `(d.donation_amount / p.total_price) * 100`. Do use `essays` table as `T1` instead of only `projects`, and join `projects` as `T2` on `T1.projectid = T2.projectid` instead of missing this relationship. Do join `donations` as `T3` on `T2.projectid = T3.projectid` instead of `p.project_id = d.project_id`. Do remove the WHERE clause with subquery for maximum donation instead of keeping it, and instead order by `T3.donation_to_project DESC` to get the top donation. Do use `total_price_excluding_optional_support` instead of `total_price`. The amended query now correctly identifies the top donation by amount rather than filtering for maximum donations across all projects.",
            "Do remove the multiplication by 100 and percentage calculation from the SELECT expression instead of keeping `(CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support) * 100 AS donation_percentage`. Do remove the WHERE clause filtering for maximum `total_price_excluding_optional_support` instead of including the subquery that restricts results to only the highest-priced project. Do use explicit `INNER JOIN` syntax instead of implicit JOIN. The amended query now correctly returns all donation percentages without restricting to only the maximum-priced project and matches RIGHT_SQL's behavior.",
            "Do remove the multiplication by 100 and percentage calculation from the SELECT expression instead of keeping `* 100 AS donation_percentage`. Do remove the WHERE clause filtering for maximum `total_price_excluding_optional_support` instead of including the subquery that restricts results to only the project with the highest total price. Do keep the ORDER BY and LIMIT clauses unchanged as they correctly sort by donation amount and return the top result. The amended query now correctly calculates the donation ratio without artificial percentage conversion and includes all projects rather than filtering to only the most expensive one, matching the RIGHT_SQL's behavior of returning the largest donation across all projects."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    p.essay_title,\n    d.donor_name,\n    (d.donation_amount / p.total_price) * 100 AS donation_percentage\nFROM projects p\nJOIN donations d ON p.project_id = d.project_id\nWHERE d.donation_amount = (SELECT MAX(donation_amount) FROM donations)\nORDER BY p.total_price DESC\nLIMIT 1;",
            "SELECT \n    T1.title,\n    T3.donor_acctid,\n    (CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support) * 100 AS donation_percentage\nFROM \n    essays T1\nJOIN \n    projects T2 ON T1.projectid = T2.projectid\nJOIN \n    donations T3 ON T2.projectid = T3.projectid\nWHERE \n    T2.total_price_excluding_optional_support = (\n        SELECT MAX(total_price_excluding_optional_support) \n        FROM projects\n    )\nORDER BY \n    T3.donation_to_project DESC\nLIMIT 1;",
            "SELECT \n    T1.title,\n    T3.donor_acctid,\n    (CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support) * 100 AS donation_percentage\nFROM \n    essays T1\nINNER JOIN \n    projects T2 ON T1.projectid = T2.projectid\nINNER JOIN \n    donations T3 ON T2.projectid = T3.projectid\nWHERE \n    T2.total_price_excluding_optional_support = (\n        SELECT MAX(total_price_excluding_optional_support) \n        FROM projects\n    )\nORDER BY \n    T3.donation_to_project DESC\nLIMIT 1;",
            "SELECT \n    T1.title,\n    T3.donor_acctid,\n    CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support AS donation_ratio\nFROM \n    essays T1\nINNER JOIN \n    projects T2 ON T1.projectid = T2.projectid\nINNER JOIN \n    donations T3 ON T2.projectid = T3.projectid\nORDER BY \n    T3.donation_to_project DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3276": {
        "db_id": "donor",
        "question": "What percentage of projects in the City of Santa Barbara are in suburban metro?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN school_metro = 'suburban' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(projectid) FROM projects WHERE school_city = 'Santa Barbara'",
        "amends": [
            "Do use `SUM(CASE WHEN school_metro = 'suburban' THEN 1 ELSE 0 END)` instead of `COUNT(*)` to count only suburban metro projects. Do reference `school_metro` instead of `location_type` for the metro classification. Do reference `school_city` instead of `city` for the city filter. Do calculate percentage as `SUM(CASE...END) * 100 / COUNT(projectid)` instead of `COUNT(*) * 100.0 / (subquery)` to avoid the unnecessary subquery. Do use `CAST(... AS REAL)` instead of `* 100.0` for proper numeric casting. Do remove the redundant subquery and instead perform the calculation directly in the main query. The amended query now correctly calculates the percentage of suburban metro projects in Santa Barbara using the proper column names and more efficient calculation method."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM projects WHERE city = 'Santa Barbara')) AS percentage\nFROM projects \nWHERE city = 'Santa Barbara' AND location_type = 'suburban metro';",
            "SELECT \n    CAST(SUM(CASE WHEN school_metro = 'suburban' THEN 1 ELSE 0 END) * 100.0 / COUNT(projectid) AS REAL) AS percentage\nFROM projects\nWHERE school_city = 'Santa Barbara';"
        ],
        "rule_sql": []
    },
    "627": {
        "db_id": "codebase_comments",
        "question": "How many percent more of the Forks for the repository of solution No.53546 than No.1502?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Id = 53546 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "amends": [
            "Do use `SUM` with `CASE` expressions to aggregate `Forks` instead of directly subtracting `forks_count` from two different rows. Do join `Repo` with `Solution` on `T1.Id = T2.RepoId` instead of cross-joining two instances of the same table. Do filter by `T2.Id` values within the `CASE` expressions instead of using `WHERE` conditions on separate table instances. Do cast the result to `REAL` for proper division instead of implicit integer division. Do calculate the percentage change using proper aggregation logic instead of assuming row-based arithmetic. The amended query now correctly computes the percentage difference in forks between the two specified solutions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ((f2.forks_count - f1.forks_count) / f1.forks_count * 100) AS percent_more\nFROM \n    repositories f1, \n    repositories f2\nWHERE \n    f1.id = 1502 \n    AND f2.id = 53546;",
            "SELECT \n    (SUM(CASE WHEN s.Id = 53546 THEN r.Forks ELSE 0 END) - SUM(CASE WHEN s.Id = 1502 THEN r.Forks ELSE 0 END)) * 100.0 / \n    SUM(CASE WHEN s.Id = 1502 THEN r.Forks ELSE 0 END) AS percentage_difference\nFROM \n    Repo r\nJOIN \n    Solution s ON r.Id = s.RepoId\nWHERE \n    s.Id IN (1502, 53546);"
        ],
        "rule_sql": []
    },
    "6822": {
        "db_id": "retails",
        "question": "What is the largest supplier's account balance?",
        "ground_truth": "SELECT MAX(s_acctbal) FROM supplier",
        "amends": [
            "Do reference the correct column `s_acctbal` instead of the incorrect column `acctbal` in both the SELECT list and ORDER BY clause. Do remove the unnecessary `ORDER BY acctbal DESC LIMIT 1` clause instead of keeping it, since the MAX aggregate function already returns the single maximum value. The amended query now correctly calculates the maximum account balance from the supplier table using the proper column name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(acctbal) FROM supplier ORDER BY acctbal DESC LIMIT 1;",
            "SELECT MAX(s_acctbal) FROM supplier;"
        ],
        "rule_sql": []
    },
    "8804": {
        "db_id": "food_inspection",
        "question": "How many eateries are located in Hayward?",
        "ground_truth": "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD'",
        "amends": [
            "Do count `business_id` instead of `*` to exclude null values. Do query from `businesses` table instead of `eateries` to access the correct data source. Do filter for uppercase `'HAYWARD'` instead of title case `'Hayward'` to match the stored case format. The amended query now correctly counts business records from the businesses table for the specified city with proper case sensitivity."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM eateries WHERE city = 'Hayward';",
            "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD';"
        ],
        "rule_sql": []
    },
    "24": {
        "db_id": "movie_platform",
        "question": "Was the user who created the \"World War 2 and Kids\" list eligible for trial when he created the list? Indicate how many followers does the said list has.",
        "ground_truth": "SELECT T2.user_eligible_for_trial, T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T1.user_id AND T1.list_id = T2.list_id WHERE T1.list_title = 'World War 2 and Kids'",
        "amends": [
            "Do reference `user_eligible_for_trial` instead of `eligible_for_trial` and `list_followers` instead of `COUNT(lf.follower_id) AS follower_count`. Do join `lists_users` instead of `users` and use `INNER JOIN` instead of `JOIN` and `LEFT JOIN`. Do use `ON T1.user_id = T1.user_id AND T1.list_id = T2.list_id` instead of `ON u.user_id = l.creator_id` and `ON l.list_id = lf.list_id`. Do filter on `T1.list_title` instead of `l.title`. Do remove `GROUP BY` instead of keeping it. The amended query now correctly retrieves user eligibility and follower count from the appropriate tables with proper join conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.eligible_for_trial, COUNT(lf.follower_id) AS follower_count\nFROM users u\nJOIN lists l ON u.user_id = l.creator_id\nLEFT JOIN list_followers lf ON l.list_id = lf.list_id\nWHERE l.title = 'World War 2 and Kids'\nGROUP BY u.eligible_for_trial;",
            "SELECT \n    lu.user_eligible_for_trial,\n    l.list_followers\nFROM \n    lists l\nINNER JOIN \n    lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id\nWHERE \n    l.list_title = 'World War 2 and Kids';"
        ],
        "rule_sql": []
    },
    "1494": {
        "db_id": "synthea",
        "question": "Identify the allergy period for Isadora Moen and what triggered it.",
        "ground_truth": "SELECT T2.START, T2.STOP, T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Isadora' AND T1.last = 'Moen'",
        "amends": [
            "Do select `T2.START`, `T2.STOP`, and `T2.DESCRIPTION` instead of `allergy_period` and `trigger`. Do join `patients AS T1` with `allergies AS T2` using `INNER JOIN` on `T1.patient = T2.PATIENT` instead of querying only the `allergies` table. Do filter with `T1.first = 'Isadora' AND T1.last = 'Moen'` instead of `patient_name = 'Isadora Moen'` to properly match the patient by first and last name. The amended query now correctly joins patient and allergy data and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT allergy_period, trigger FROM allergies WHERE patient_name = 'Isadora Moen';",
            "SELECT T2.START, T2.STOP, T2.DESCRIPTION\nFROM patients AS T1\nINNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT\nWHERE T1.first = 'Isadora' AND T1.last = 'Moen'"
        ],
        "rule_sql": []
    },
    "902": {
        "db_id": "cs_semester",
        "question": "What is the popularity of the professor who advises the highest number of students with the highest research ability?",
        "ground_truth": "SELECT T2.popularity FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id, T1.capability ORDER BY COUNT(T1.student_id) DESC, T1.capability DESC LIMIT 1",
        "amends": [
            "Do use table aliases `RA AS T1` and `prof AS T2` instead of `professors p` and `students s`. Do change the join condition to `T1.prof_id = T2.prof_id` instead of `p.professor_id = s.advisor_id`. Do remove the WHERE clause with subquery filtering for maximum research ability instead of keeping it. Do add `T1.capability` to the GROUP BY clause instead of omitting it. Do change the ORDER BY to include both `COUNT(T1.student_id) DESC` and `T1.capability DESC` instead of only counting student IDs. The amended query now correctly matches the intended behavior by joining the appropriate tables with proper conditions and ordering by both student count and capability."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.popularity \nFROM professors p\nJOIN students s ON p.professor_id = s.advisor_id\nWHERE s.research_ability = (SELECT MAX(research_ability) FROM students)\nGROUP BY p.professor_id\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;",
            "SELECT T2.popularity\nFROM RA AS T1\nJOIN prof AS T2 ON T1.prof_id = T2.prof_id\nGROUP BY T1.prof_id, T1.capability\nORDER BY COUNT(T1.student_id) DESC, T1.capability DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "219": {
        "db_id": "book_publishing_company",
        "question": "Which publisher had the highest job level? Give his/her full name.",
        "ground_truth": "SELECT T1.fname, T1.minit, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.job_lvl DESC LIMIT 1",
        "amends": [
            "Do select `T1.fname`, `T1.minit`, and `T1.lname` instead of `publisher_name`. Do join `employee AS T1` with `jobs AS T2` using `INNER JOIN` on `T1.job_id = T2.job_id` instead of querying only the `publishers` table. Do order by `T1.job_lvl DESC` instead of `job_level DESC`. The amended query now correctly retrieves employee details with job level ordering from the appropriate tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher_name FROM publishers ORDER BY job_level DESC LIMIT 1;",
            "SELECT T1.fname, T1.minit, T1.lname\nFROM employee AS T1\nINNER JOIN jobs AS T2 ON T1.job_id = T2.job_id\nORDER BY T1.job_lvl DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8950": {
        "db_id": "human_resources",
        "question": "Give the number of female employees.",
        "ground_truth": "SELECT COUNT(*) FROM employee WHERE gender = 'F'",
        "amends": [
            "Do reference table `employee` instead of `employees` and do filter for gender `'F'` instead of `'male'`."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE gender = 'male';",
            "SELECT COUNT(*) FROM employee WHERE gender = 'F';"
        ],
        "rule_sql": []
    },
    "7566": {
        "db_id": "image_and_language",
        "question": "Calculate the average of object samples for the image.",
        "ground_truth": "SELECT CAST(COUNT(OBJ_SAMPLE_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ",
        "amends": [
            "Do use `CAST(COUNT(OBJ_SAMPLE_ID) AS REAL) / COUNT(DISTINCT IMG_ID)` instead of `AVG(object)` for the aggregate calculation. Do change the table source to `FROM IMG_OBJ` instead of `FROM samples`. Do remove the `WHERE image_id = 1` filter instead of keeping it, as the correct logic requires counting across all images rather than filtering to a single image. The amended query now correctly calculates the average objects per image by counting total objects divided by distinct image count, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(object) FROM samples WHERE image_id = 1;",
            "SELECT CAST(COUNT(OBJ_SAMPLE_ID) AS REAL) / COUNT(DISTINCT IMG_ID) AS average_objects_per_image FROM IMG_OBJ"
        ],
        "rule_sql": []
    },
    "8909": {
        "db_id": "cookbook",
        "question": "Name the recipes which can lead to constipation.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20",
        "amends": [
            "Do reference `T1.title` from the `Recipe` table instead of `recipe_name` from `recipes`. Do join `Nutrition AS T2` with `INNER JOIN` on `T1.recipe_id = T2.recipe_id` instead of querying a single table. Do filter on `T2.iron > 20` instead of `effect = 'constipation'`. The amended query now correctly joins nutritional data and filters by iron content rather than searching for constipation effects."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT recipe_name FROM recipes WHERE effect = 'constipation';",
            "SELECT T1.title \nFROM Recipe AS T1\nINNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id\nWHERE T2.iron > 20"
        ],
        "rule_sql": []
    },
    "1682": {
        "db_id": "restaurant",
        "question": "Indicate street and number of the Adelitas Taqueria Restaurants.",
        "ground_truth": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'",
        "amends": [
            "Do select `street_name` and `street_num` from the `location` table instead of `name` and `address` from `restaurants`. Do use `INNER JOIN` with `generalinfo` on `T1.id_restaurant = T2.id_restaurant` instead of querying a single table. Do filter on `T2.label = 'adelitas taqueria'` instead of `name = 'Adelitas Taqueria'` to match the correct case-insensitive restaurant identifier. The amended query now correctly retrieves address information by joining location data with restaurant details using the proper join condition and filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, address FROM restaurants WHERE name = 'Adelitas Taqueria';",
            "SELECT l.street_name, l.street_num FROM location l INNER JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.label = 'adelitas taqueria'"
        ],
        "rule_sql": []
    },
    "5917": {
        "db_id": "books",
        "question": "Please give the title of the oldest book published by publisher \"Thomas Nelson\".",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' ORDER BY T1.publication_date ASC LIMIT 1",
        "amends": [
            "Do reference `T1.title` with table alias instead of just `title`. Do join `book AS T1` with `publisher AS T2` on `T1.publisher_id = T2.publisher_id` instead of querying `books` table directly. Do filter on `T2.publisher_name = 'Thomas Nelson'` instead of `publisher = 'Thomas Nelson'` to properly reference the publisher table. Do order by `T1.publication_date` instead of `publication_year` to use the correct column name. The amended query now correctly joins tables and uses proper column references to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE publisher = 'Thomas Nelson' ORDER BY publication_year ASC LIMIT 1;",
            "SELECT T1.title\nFROM book AS T1\nJOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id\nWHERE T2.publisher_name = 'Thomas Nelson'\nORDER BY T1.publication_date ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2504": {
        "db_id": "genes",
        "question": "What kind of expression correlation occurs in physical type interacting gene pairs and what percentage of these are negatively correlated?",
        "ground_truth": "SELECT Expression_Corr FROM Interactions WHERE Type = 'Physical' UNION ALL SELECT CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*) FROM Interactions WHERE Type = 'Physical'",
        "amends": [
            "Do use `Expression_Corr` column instead of hardcoded string values, and query from `Interactions` table instead of `gene_pairs`. Do add `WHERE Type = 'Physical'` filter instead of `physical_interaction = 1`. Do implement a UNION ALL with two queries instead of a single row selection: the first query selects actual correlation values and the second calculates the percentage of negative correlations using `CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*)` instead of fixed `75.0`. Do remove the `LIMIT 1` clause instead of keeping it, as the UNION ALL returns multiple rows with both individual correlations and the calculated percentage. The amended query now correctly retrieves both physical interaction correlation data and computes the actual percentage of negative correlations rather than using a hardcoded value, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT 'positive' AS correlation_type, 75.0 AS percentage_negative FROM gene_pairs WHERE physical_interaction = 1 LIMIT 1;",
            "SELECT Expression_Corr FROM Interactions WHERE Type = 'Physical'\nUNION ALL\nSELECT CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*) FROM Interactions WHERE Type = 'Physical'"
        ],
        "rule_sql": []
    },
    "1443": {
        "db_id": "synthea",
        "question": "List down the encounter descriptions of patients who were born in Pittsfield MA US.",
        "ground_truth": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pittsfield MA US'",
        "amends": [
            "Do use `SELECT DISTINCT T2.DESCRIPTION` instead of `SELECT description` to eliminate duplicates and specify the table alias. Do join `patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT` instead of querying only the `encounters` table to properly relate patient and encounter data. Do filter on `T1.birthplace = 'Pittsfield MA US'` instead of separate `patient_birth_city`, `patient_birth_state`, and `patient_birth_country` conditions to match the consolidated birthplace format. Do add the `patients` table instead of omitting it to establish the necessary relationship between patient birthplace and encounter descriptions. The amended query now correctly retrieves distinct encounter descriptions for patients born in Pittsfield, MA, US by properly joining the relevant tables and using the consolidated birthplace filter."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM encounters WHERE patient_birth_city = 'Pittsfield' AND patient_birth_state = 'MA' AND patient_birth_country = 'US'",
            "SELECT DISTINCT T2.DESCRIPTION\nFROM patients AS T1\nINNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT\nWHERE T1.birthplace = 'Pittsfield MA US'"
        ],
        "rule_sql": []
    },
    "5238": {
        "db_id": "beer_factory",
        "question": "How many transactions had Frank-Paul Santangelo made in July, 2014?",
        "ground_truth": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'",
        "amends": [
            "Do join `customers` and `transaction` tables with `INNER JOIN` on `CustomerID` instead of querying only the `transactions` table. Do filter on `First` and `Last` name columns instead of a single `customer_name` field. Do use `STRFTIME` function to extract year-month from `TransactionDate` instead of `LIKE` pattern matching. Do count `CustomerID` instead of using `COUNT(*)`. Do filter for month '2014-07' instead of '2014-06'. The amended query now correctly joins customer and transaction data, uses proper date filtering, and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM transactions WHERE customer_name = 'Frank-Paul Santangelo' AND transaction_date LIKE '2014-06%';",
            "SELECT COUNT(t.CustomerID) \nFROM \"transaction\" t\nINNER JOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo'\nAND STRFTIME('%Y-%m', t.TransactionDate) = '2014-07'"
        ],
        "rule_sql": []
    },
    "5585": {
        "db_id": "shipping",
        "question": "What is the full name of the driver that has done the most shipments in 2017?",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of `s` and `d`. Do reference `T2.first_name` and `T2.last_name` in the SELECT list instead of `d.first_name` and `d.last_name`. Do join `shipment AS T1` with `driver AS T2` instead of `drivers d` with `shipments s`. Do use the ON predicate `T1.driver_id = T2.driver_id` instead of `d.driver_id = s.driver_id`. Do filter with `STRFTIME('%Y', T1.ship_date) = '2017'` instead of `s.shipment_date LIKE '2017%'`. Do group by `T2.first_name, T2.last_name` instead of `d.driver_id`. The amended query now correctly matches the RIGHT_SQL's behavior.",
            "Do select `T2.first_name` and `T2.last_name` as separate columns instead of concatenating them into `full_name`. Do use `INNER JOIN` explicitly instead of just `JOIN` for clarity. Do remove the alias `AS full_name` instead of keeping it since the concatenation is no longer needed. The amended query now correctly returns the first and last names separately while maintaining the same aggregation logic to find the driver with the most shipments in 2017."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.first_name, d.last_name \nFROM drivers d \nJOIN shipments s ON d.driver_id = s.driver_id \nWHERE s.shipment_date LIKE '2017%' \nGROUP BY d.driver_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
            "SELECT T2.first_name || ' ' || T2.last_name AS full_name\nFROM shipment AS T1\nJOIN driver AS T2 ON T1.driver_id = T2.driver_id\nWHERE STRFTIME('%Y', T1.ship_date) = '2017'\nGROUP BY T2.first_name, T2.last_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "SELECT T2.first_name, T2.last_name\nFROM shipment AS T1\nINNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id\nWHERE STRFTIME('%Y', T1.ship_date) = '2017'\nGROUP BY T2.first_name, T2.last_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4966": {
        "db_id": "olympics",
        "question": "In which Olympic Games has Morten Aleksander Djupvik participated?",
        "ground_truth": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Morten Aleksander Djupvik'",
        "amends": [
            "Do select `games_name` from `games` instead of `year` and `city` from `olympic_games`. Do use `INNER JOIN` with `games_competitor` on `games.id = games_competitor.games_id` instead of joining directly with `athletes` on `olympic_games.id = athletes.olympic_games_id`. Do add a second `INNER JOIN` with `person` on `games_competitor.person_id = person.id` instead of omitting this intermediate table. Do filter on `person.full_name` instead of `athletes.name`. Do remove `DISTINCT` instead of keeping it. The amended query now correctly navigates the schema relationships through the proper join chain to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT olympic_games.year, olympic_games.city \nFROM olympic_games \nJOIN athletes ON olympic_games.id = athletes.olympic_games_id \nWHERE athletes.name = 'Morten Aleksander Djupvik';",
            "SELECT games.games_name\nFROM games\nINNER JOIN games_competitor ON games.id = games_competitor.games_id\nINNER JOIN person ON games_competitor.person_id = person.id\nWHERE person.full_name = 'Morten Aleksander Djupvik'"
        ],
        "rule_sql": []
    },
    "6065": {
        "db_id": "books",
        "question": "List all books published by ADV Manga.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'ADV Manga'",
        "amends": [
            "Do select only `T1.title` instead of all columns with `*`. Do join `publisher AS T2` instead of querying only the `books` table. Do use `INNER JOIN` on `T1.publisher_id = T2.publisher_id` instead of filtering directly on a publisher column. Do filter on `T2.publisher_name = 'ADV Manga'` instead of `publisher = 'ADV Manga'` to properly reference the joined table's column. The amended query now correctly joins the publisher table to filter by publisher name and returns only book titles as specified."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM books WHERE publisher = 'ADV Manga';",
            "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'ADV Manga'"
        ],
        "rule_sql": []
    },
    "8836": {
        "db_id": "food_inspection",
        "question": "List the eateries' names and addresses which had reinspection on 2nd February, 2015.",
        "ground_truth": "SELECT T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2015-02-02' AND T1.type = 'Reinspection/Followup'",
        "amends": [
            "Do select `T2.name` and `T2.address` from the `businesses` table instead of `name` and `address` from `eateries`. Do join `inspections AS T1` with `businesses AS T2` using `INNER JOIN` on `T1.business_id = T2.business_id` instead of querying only the `eateries` table. Do filter on `T1.date = '2015-02-02'` and `T1.type = 'Reinspection/Followup'` instead of filtering `reinspection_date = '2015-02-02'` without the type condition. The amended query now correctly retrieves business information from inspections data with proper join conditions and filtering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, address FROM eateries WHERE reinspection_date = '2015-02-02';",
            "SELECT T2.name, T2.address\nFROM inspections AS T1\nINNER JOIN businesses AS T2 ON T1.business_id = T2.business_id\nWHERE T1.date = '2015-02-02' AND T1.type = 'Reinspection/Followup'"
        ],
        "rule_sql": []
    },
    "7295": {
        "db_id": "works_cycles",
        "question": "Please list the website purchasing links of the vendors from whom the product Hex Nut 5 can be purchased.",
        "ground_truth": "SELECT T3.PurchasingWebServiceURL FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5'",
        "amends": [
            "Do select `T3.PurchasingWebServiceURL` instead of `vendor_name, website_link`. Do use `ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID` instead of the single `vendors` table. Do filter on `T2.Name = 'Hex Nut 5'` instead of `product_name = 'Hex Nut 5'`. The amended query now correctly joins three tables to retrieve the purchasing web service URL for the specified product name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name, website_link FROM vendors WHERE product_name = 'Hex Nut 5';",
            "SELECT T3.PurchasingWebServiceURL\nFROM ProductVendor AS T1\nINNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID\nINNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID\nWHERE T2.Name = 'Hex Nut 5';"
        ],
        "rule_sql": []
    },
    "2884": {
        "db_id": "professional_basketball",
        "question": "List out all the coach ID who have served more than 2 different teams.",
        "ground_truth": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2",
        "amends": [
            "Do use column name `coachID` instead of `coach_id` in both the SELECT list and GROUP BY clause. Do add `DISTINCT` to the COUNT function instead of counting all rows with `COUNT(*)`. Do count distinct `tmID` values instead of counting all records. The amended query now correctly identifies coaches who have coached more than 2 distinct teams rather than simply having more than 2 coaching records, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coach_id FROM coaches GROUP BY coach_id HAVING COUNT(*) > 2;",
            "SELECT coachID\nFROM coaches\nGROUP BY coachID\nHAVING COUNT(DISTINCT tmID) > 2"
        ],
        "rule_sql": []
    },
    "2307": {
        "db_id": "movielens",
        "question": "How many American movies have cast number more than 1?",
        "ground_truth": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.cast_num > 1",
        "amends": [
            "Do join `movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid` instead of querying only the `movies` table. Do change the count to `COUNT(T2.actorid)` instead of `COUNT(*)` to count distinct actors rather than movies. Do use the filter `T2.cast_num > 1` instead of `cast_count > 1` to filter on the correct column from the joined table. Do keep the `T1.country = 'USA'` filter but reference it through the aliased table. The amended query now correctly counts actors in USA movies with cast numbers greater than 1, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE country = 'USA' AND cast_count > 1;",
            "SELECT COUNT(T2.actorid) \nFROM movies AS T1 \nINNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid \nWHERE T1.country = 'USA' AND T2.cast_num > 1"
        ],
        "rule_sql": []
    },
    "5132": {
        "db_id": "address",
        "question": "Which district has the largest land area in Wisconsin? Write the full name of the congress representative and include the postal codes.",
        "ground_truth": "SELECT T2.zip_code, T1.first_name, T1.last_name FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Wisconsin' ORDER BY T1.land_area DESC LIMIT 1",
        "amends": [
            "Do select `T2.zip_code`, `T1.first_name`, and `T1.last_name` instead of `district_name`, `representative_name`, and `postal_code`. Do use `congress AS T1 INNER JOIN zip_congress AS T2` instead of `wisconsin_districts` alone. Do join on `T1.congress_rep_id = T2.district` instead of no join condition. Do add filter `T1.state = 'Wisconsin'` instead of omitting it. Do order by `T1.land_area` instead of `land_area`. The amended query now correctly joins congressional and zip code data with proper filtering for Wisconsin representatives."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district_name, representative_name, postal_code \nFROM wisconsin_districts \nORDER BY land_area DESC \nLIMIT 1;",
            "SELECT T2.zip_code, T1.first_name, T1.last_name\nFROM congress AS T1\nINNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district\nWHERE T1.state = 'Wisconsin'\nORDER BY T1.land_area DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2142": {
        "db_id": "world_development_indicators",
        "question": "Which country had the highest value of indicator belongs to Private Sector & Trade: Exports topic? Please list the country name and indicator name.",
        "ground_truth": "SELECT T1.CountryName, T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.Topic = 'Private Sector & Trade: Exports' ORDER BY T1.Value DESC LIMIT 1",
        "amends": [
            "Do add `INNER JOIN` on `Series AS T2` with join condition `T1.IndicatorName = T2.IndicatorName` instead of querying only the `indicators` table. Do move the filter condition to `T2.Topic = 'Private Sector & Trade: Exports'` instead of applying it to the `indicators` table's `topic` column. Do use table aliases `T1` and `T2` with qualified column references instead of unqualified column names. The amended query now correctly joins the necessary tables and filters on the appropriate source, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name, indicator_name \nFROM indicators \nWHERE topic = 'Private Sector & Trade: Exports' \nORDER BY value DESC \nLIMIT 1;",
            "SELECT T1.CountryName, T1.IndicatorName\nFROM Indicators AS T1\nINNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName\nWHERE T2.Topic = 'Private Sector & Trade: Exports'\nORDER BY T1.Value DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8391": {
        "db_id": "mondial_geo",
        "question": "Which city has most population other than its capital in Bangladesh?",
        "ground_truth": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Bangladesh' AND T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1",
        "amends": [
            "Do join `country AS T1` with `province AS T2` on `T1.Code = T2.Country` and then with `city AS T3` on `T3.Province = T2.Name` instead of querying a single `cities` table. Do filter by `T1.Name = 'Bangladesh'` instead of `country = 'Bangladesh'`. Do exclude the capital city with `T3.Name <> T1.Capital` instead of `is_capital = 0`. Do select `T3.Name` instead of `city_name`. Do order by `T3.Population DESC` instead of `population DESC`. The amended query now correctly identifies non-capital cities in Bangladesh through proper table relationships and joins."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM cities WHERE country = 'Bangladesh' AND is_capital = 0 ORDER BY population DESC LIMIT 1;",
            "SELECT T3.Name\nFROM country AS T1\nJOIN province AS T2 ON T1.Code = T2.Country\nJOIN city AS T3 ON T3.Province = T2.Name AND T3.Country = T1.Code\nWHERE T1.Name = 'Bangladesh'\nAND T3.Name <> T1.Capital\nORDER BY T3.Population DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2244": {
        "db_id": "world_development_indicators",
        "question": "What's the value of the indicator whose long definition is \"Adolescent fertility rate is the number of births per 1,000 women ages 15-19.\" for the Arab World in 1960?",
        "ground_truth": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T2.LongDefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' AND T3.ShortName = 'Arab World' AND T1.Year = 1960",
        "amends": [
            "Do join `Indicators AS T1` with `Series AS T2` on `T1.IndicatorName = T2.IndicatorName` instead of querying only the indicators table. Do join `Indicators AS T1` with `Country AS T3` on `T1.CountryCode = T3.CountryCode` instead of filtering by country_name directly. Do filter by `T2.LongDefinition` instead of `long_definition` to match the series metadata. Do filter by `T3.ShortName = 'Arab World'` instead of `country_name = 'Arab World'` to use the standardized country identifier. Do select `T1.Value` with table qualification instead of just `value`. The amended query now correctly joins across multiple tables to establish proper relationships between indicators, series definitions, and country data, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT value FROM indicators WHERE long_definition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' AND country_name = 'Arab World' AND year = 1960;",
            "SELECT T1.Value \nFROM Indicators AS T1\nJOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName\nJOIN Country AS T3 ON T1.CountryCode = T3.CountryCode\nWHERE T2.LongDefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.'\nAND T3.ShortName = 'Arab World'\nAND T1.Year = 1960"
        ],
        "rule_sql": []
    },
    "124": {
        "db_id": "movie_platform",
        "question": "For the user who post the list that contained the most number of the movies, is he/she a paying subscriber when creating that list?",
        "ground_truth": "SELECT T1.user_has_payment_method FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number = ( SELECT MAX(list_movie_number) FROM lists )",
        "amends": [
            "Do select `user_has_payment_method` instead of `is_paying_subscriber`. Do use `lists_users` as the main table instead of `users`. Do `INNER JOIN` `lists` on `T1.list_id = T2.list_id` instead of joining `users` to `lists` on `user_id` and then to `list_movies`. Do add a `WHERE` filter comparing `list_movie_number` to a subquery finding the maximum value instead of grouping and ordering by movie count. Do remove the `GROUP BY`, `ORDER BY`, and `LIMIT` clauses instead of using them to find the top user. Do use a correlated subquery with `MAX(list_movie_number)` instead of counting movie IDs through multiple joins. The amended query now correctly identifies users with payment methods from lists containing the maximum number of movies."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.is_paying_subscriber\nFROM users u\nJOIN lists l ON u.user_id = l.user_id\nJOIN list_movies lm ON l.list_id = lm.list_id\nGROUP BY u.user_id\nORDER BY COUNT(lm.movie_id) DESC\nLIMIT 1;",
            "SELECT lu.user_has_payment_method \nFROM lists_users lu\nINNER JOIN lists l ON lu.list_id = l.list_id\nWHERE l.list_movie_number = (SELECT MAX(list_movie_number) FROM lists);"
        ],
        "rule_sql": []
    },
    "3765": {
        "db_id": "public_review_platform",
        "question": "How many more \"buffets\" than \"gyms\" in Yelp business?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Buffets' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Gyms' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id",
        "amends": [
            "Do use `SUM(CASE WHEN T1.category_name LIKE 'Buffets' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Gyms' THEN 1 ELSE 0 END)` instead of `COUNT(*) FROM business WHERE categories LIKE '%buffet%' - COUNT(*) FROM business WHERE categories LIKE '%gym%'` to properly calculate the difference between two counts in a single query. Do join `Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id` instead of querying the `business` table directly to properly relate categories to businesses through the junction table. Do reference `T1.category_name` with exact pattern matching `LIKE 'Buffets'` and `LIKE 'Gyms'` instead of using `LIKE '%buffet%'` and `LIKE '%gym%'` with wildcards for more precise category matching. Do remove the separate subqueries and instead perform the calculation in a single SELECT statement with conditional aggregation. The amended query now correctly calculates the difference between Buffets and Gyms businesses using proper table relationships and exact category matching."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM business WHERE categories LIKE '%buffet%' - COUNT(*) FROM business WHERE categories LIKE '%gym%';",
            "SELECT \n    SUM(CASE WHEN T1.category_name LIKE 'Buffets' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN T1.category_name LIKE 'Gyms' THEN 1 ELSE 0 END) AS difference\nFROM \n    Categories AS T1 \nINNER JOIN \n    Business_Categories AS T2 ON T1.category_id = T2.category_id;"
        ],
        "rule_sql": []
    },
    "1674": {
        "db_id": "restaurant",
        "question": "What counties are not in the Bay Area Region?",
        "ground_truth": "SELECT DISTINCT county FROM geographic WHERE region != 'bay area'",
        "amends": [
            "Do reference table `geographic` instead of `counties` and select column `county` instead of `county_name`. Do add `DISTINCT` to eliminate duplicate county entries instead of omitting it. Do use lowercase comparison `'bay area'` instead of title case `'Bay Area'` to ensure case-insensitive matching. The amended query now correctly retrieves unique county names from the geographic table excluding the bay area region."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county_name FROM counties WHERE region != 'Bay Area';",
            "SELECT DISTINCT county FROM geographic WHERE region != 'bay area';"
        ],
        "rule_sql": []
    },
    "9355": {
        "db_id": "movie_3",
        "question": "What is the inventory ID of Karen Jackson?",
        "ground_truth": "SELECT T2.inventory_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'KAREN' AND T1.last_name = 'JACKSON'",
        "amends": [
            "Do select `T2.inventory_id` from the `rental` table instead of `inventory_id` from the `employees` table. Do use `customer AS T1 INNER JOIN rental AS T2` as the data source instead of just the `employees` table. Do add the join condition `ON T1.customer_id = T2.customer_id` instead of omitting any table relationships. Do apply the name filters `first_name = 'KAREN'` and `last_name = 'JACKSON'` to the `customer` table (with uppercase values) instead of the `employees` table with lowercase values. The amended query now correctly retrieves inventory IDs from rental records associated with customers named Karen Jackson, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inventory_id FROM employees WHERE first_name = 'Karen' AND last_name = 'Jackson'",
            "SELECT T2.inventory_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'KAREN' AND T1.last_name = 'JACKSON'"
        ],
        "rule_sql": []
    },
    "2283": {
        "db_id": "movielens",
        "question": "How many different female users have rated movies from France?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T3.country = 'France'",
        "amends": [
            "Do add `DISTINCT T2.userid` instead of `COUNT(*)` to count unique users. Do change the FROM clause to use `users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid` instead of a single table, adding two joins to connect user ratings and movie data. Do change the WHERE filter to use `T1.u_gender = 'F'` instead of `gender = 'female'` and `T3.country = 'France'` instead of `country = 'France'`, moving the country filter from users to movies table. The amended query now correctly counts distinct French female users who have rated movies from France, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female' AND country = 'France';",
            "SELECT COUNT(DISTINCT T2.userid) \nFROM users AS T1 \nINNER JOIN u2base AS T2 ON T1.userid = T2.userid \nINNER JOIN movies AS T3 ON T2.movieid = T3.movieid \nWHERE T1.u_gender = 'F' AND T3.country = 'France'"
        ],
        "rule_sql": []
    },
    "4979": {
        "db_id": "olympics",
        "question": "List out all the medals won by Lee Chong Wei.",
        "ground_truth": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Lee Chong Wei' AND T2.medal_id <> 4",
        "amends": [
            "Do select only `medal_name` instead of all columns with `*`. Do add `DISTINCT` to remove duplicate medal names instead of omitting it. Do join multiple tables (`medal`, `competitor_event`, `games_competitor`, `person`) instead of querying only the `medals` table. Do use `INNER JOIN` with proper join conditions (`T1.id=T2.medal_id`, `T2.competitor_id=T3.id`, `T3.person_id=T4.id`) instead of no joins. Do filter on `T4.full_name='Lee Chong Wei'` instead of `athlete_name='Lee Chong Wei'`. Do add an additional filter `T2.medal_id<>4` to exclude certain medals instead of omitting this condition. The amended query now correctly retrieves distinct medal names for the specified athlete while excluding unwanted medal types."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM medals WHERE athlete_name = 'Lee Chong Wei';",
            "SELECT DISTINCT m.medal_name\nFROM medal m\nINNER JOIN competitor_event ce ON m.id = ce.medal_id\nINNER JOIN games_competitor gc ON ce.competitor_id = gc.id\nINNER JOIN person p ON gc.person_id = p.id\nWHERE p.full_name = 'Lee Chong Wei'\nAND ce.medal_id <> 4"
        ],
        "rule_sql": []
    },
    "8871": {
        "db_id": "cookbook",
        "question": "Please list the names of all the ingredients needed for the recipe \"Raspberry Chiffon Pie\" that do not need preprocessing.",
        "ground_truth": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.preparation IS NULL",
        "amends": [
            "Do use `T3.name` instead of `ingredient_name` in the SELECT list. Do join `Recipe AS T1` and `Quantity AS T2` with `INNER JOIN` on `T1.recipe_id = T2.recipe_id` instead of querying a single table. Do add another `INNER JOIN` to `Ingredient AS T3` on `T3.ingredient_id = T2.ingredient_id` instead of omitting these table relationships. Do filter on `T1.title = 'Raspberry Chiffon Pie'` instead of `recipe_name = 'Raspberry Chiffon Pie'`. Do use `T2.preparation IS NULL` instead of `preprocessing_required = 'No'` for the preparation condition. The amended query now correctly joins the three related tables and uses proper NULL semantics to identify ingredients without preparation requirements."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ingredient_name FROM ingredients WHERE recipe_name = 'Raspberry Chiffon Pie' AND preprocessing_required = 'No';",
            "SELECT T3.name \nFROM Recipe AS T1\nINNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id\nINNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id\nWHERE T1.title = 'Raspberry Chiffon Pie' \nAND T2.preparation IS NULL"
        ],
        "rule_sql": []
    },
    "266": {
        "db_id": "retail_complains",
        "question": "Which product received a review from Indianapolis on 2016/10/7?",
        "ground_truth": "SELECT T1.Product FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' AND T1.Date = '2016-10-07'",
        "amends": [
            "Do select `T1.Product` instead of `product_name` and use table aliases. Do add `INNER JOIN district AS T2` instead of querying only the reviews table. Do join on `T1.district_id = T2.district_id` instead of missing the join condition entirely. Do filter on `T2.city = 'Indianapolis'` instead of directly filtering reviews.city. Do filter on `T1.Date = '2016-10-07'` with proper date format instead of `review_date = '2016/10/7'`. The amended query now correctly joins to the district table to validate city information and uses proper date formatting, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM reviews WHERE city = 'Indianapolis' AND review_date = '2016/10/7';",
            "SELECT T1.Product\nFROM reviews AS T1\nINNER JOIN district AS T2 ON T1.district_id = T2.district_id\nWHERE T2.city = 'Indianapolis'\nAND T1.Date = '2016-10-07'"
        ],
        "rule_sql": []
    },
    "2717": {
        "db_id": "regional_sales",
        "question": "What is the type of store located in the city with the highest amount of water area?",
        "ground_truth": "SELECT CASE WHEN MAX(`Water Area`) THEN Type END FROM `Store Locations`",
        "amends": [
            "Do use `CASE WHEN MAX(\\`Water Area\\`) THEN Type END` instead of `store_type` in the SELECT list. Do reference `\\`Store Locations\\`` instead of `stores` as the FROM source. Do remove the WHERE clause with subquery filtering by city instead of keeping it. Do add aggregation with `MAX(\\`Water Area\\`)` instead of omitting it. The amended query now correctly aggregates store types based on maximum water area rather than filtering by a specific city from a separate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT store_type FROM stores WHERE city = (SELECT city FROM water_areas ORDER BY area DESC LIMIT 1);",
            "SELECT Type FROM \"Store Locations\" GROUP BY Type HAVING MAX(\"Water Area\") = (SELECT MAX(\"Water Area\") FROM \"Store Locations\")"
        ],
        "rule_sql": []
    },
    "3031": {
        "db_id": "shakespeare",
        "question": "Please name the latest historical work.",
        "ground_truth": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1",
        "amends": [
            "Do select `LongTitle` instead of `title` and use table `works` instead of `historical_works`. Do add filter `WHERE GenreType = 'History'` instead of omitting it. Do order by `Date` instead of `created_date` while maintaining the `DESC` direction and `LIMIT 1`. The amended query now correctly filters historical works by genre type and retrieves the appropriate title field with proper date ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM historical_works ORDER BY created_date DESC LIMIT 1;",
            "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "833": {
        "db_id": "social_media",
        "question": "Calculate the average number of male users who posted tweets in a week.",
        "ground_truth": "SELECT COUNT(DISTINCT T1.TweetID) / COUNT(DISTINCT T1.UserID) / 7 AS avg FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Day BETWEEN 1 AND 31",
        "amends": [
            "Do use `COUNT(DISTINCT T1.TweetID) / COUNT(DISTINCT T1.UserID) / 7 AS avg` instead of `AVG(COUNT(DISTINCT user_id))` to calculate the average tweets per user per day. Do join `twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID` instead of querying only the `tweets` table to access user gender information. Do filter with `T2.Gender = 'Male'` instead of `gender = 'male'` to use proper table reference and capitalization. Do use `T1.Day BETWEEN 1 AND 31` instead of `strftime('%W', created_at) = strftime('%W', 'now')` to filter by day range rather than week comparison. Do remove the `GROUP BY user_id` clause instead of keeping it since the aggregation is now handled differently. The amended query now correctly calculates average daily tweets per male user over a 31-day period and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(COUNT(DISTINCT user_id)) FROM tweets WHERE gender = 'male' AND strftime('%W', created_at) = strftime('%W', 'now') GROUP BY user_id;",
            "SELECT COUNT(DISTINCT T1.TweetID) / COUNT(DISTINCT T1.UserID) / 7 AS avg\nFROM twitter AS T1\nINNER JOIN user AS T2 ON T1.UserID = T2.UserID\nWHERE T2.Gender = 'Male'\nAND T1.Day BETWEEN 1 AND 31"
        ],
        "rule_sql": []
    },
    "9168": {
        "db_id": "movie_3",
        "question": "Give the name of the film for inventory No.3479.",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id = 3479",
        "amends": [
            "Do join `film AS T1` with `inventory AS T2` on `T1.film_id = T2.film_id` instead of querying `film` table alone. Do filter on `T2.inventory_id = 3479` instead of incorrectly filtering `film.inventory_id` which doesn't exist. Do specify `T1.title` with table alias instead of just `title`. The amended query now correctly retrieves film titles by joining through the inventory table where the inventory ID matches, fixing the schema reference error."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM film WHERE inventory_id = 3479;",
            "SELECT T1.title FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id = 3479"
        ],
        "rule_sql": []
    },
    "9278": {
        "db_id": "movie_3",
        "question": "How many customers live in the city of Miyakonojo?",
        "ground_truth": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Miyakonojo'",
        "amends": [
            "Do join `city AS T1` and `address AS T2` on `T1.city_id = T2.city_id` instead of querying `customers` table directly without proper joins. Do then join `customer AS T3` on `T2.address_id = T3.address_id` instead of missing the address relationship. Do filter on `T1.city = 'Miyakonojo'` instead of filtering `city` column directly on customers table. Do count `T3.customer_id` instead of counting all rows with `COUNT(*)`. The amended query now correctly counts customers in Miyakonojo by properly traversing the city-address-customer relationship hierarchy."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE city = 'Miyakonojo';",
            "SELECT COUNT(T3.customer_id) \nFROM city AS T1 \nJOIN address AS T2 ON T1.city_id = T2.city_id \nJOIN customer AS T3 ON T2.address_id = T3.address_id \nWHERE T1.city = 'Miyakonojo'"
        ],
        "rule_sql": []
    },
    "1426": {
        "db_id": "synthea",
        "question": "Which procedures and medications were received by the patient with the third-degree burn?",
        "ground_truth": "SELECT DISTINCT T1.DESCRIPTION, T3.DESCRIPTION FROM procedures AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN medications AS T3 ON T2.patient = T3.PATIENT WHERE T2.DESCRIPTION = 'Third degree burn'",
        "amends": [
            "Do use `DISTINCT` instead of omitting it to eliminate duplicate result rows. Do select `T1.DESCRIPTION` and `T3.DESCRIPTION` instead of `p.procedure_name` and `m.medication_name` with different column references. Do join `procedures AS T1` instead of just `procedures p` with explicit table aliasing. Do add `conditions AS T2` table instead of omitting it from the FROM clause. Do use `INNER JOIN` on `T1.patient = T2.PATIENT` instead of `JOIN procedures p ON pt.patient_id = p.patient_id` with different join predicate and column names. Do use `INNER JOIN` on `T2.patient = T3.PATIENT` instead of `JOIN medications m ON pt.patient_id = m.patient_id` with different join predicate and column names. Do filter on `T2.DESCRIPTION = 'Third degree burn'` instead of `pt.diagnosis = 'third-degree burn'` with different column reference and case sensitivity. Do remove `ORDER BY` and `LIMIT` clauses instead of keeping them as they are not present in the correct query. The amended query now correctly joins through the conditions table and matches the intended result set."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.procedure_name, m.medication_name \nFROM patients pt\nJOIN procedures p ON pt.patient_id = p.patient_id\nJOIN medications m ON pt.patient_id = m.patient_id\nWHERE pt.diagnosis = 'third-degree burn'\nORDER BY p.procedure_date DESC, m.medication_date DESC\nLIMIT 3;",
            "SELECT DISTINCT T1.DESCRIPTION, T3.DESCRIPTION\nFROM procedures AS T1\nINNER JOIN conditions AS T2 ON T1.PATIENT = T2.PATIENT\nINNER JOIN medications AS T3 ON T2.PATIENT = T3.PATIENT\nWHERE T2.DESCRIPTION = 'Third degree burn'"
        ],
        "rule_sql": []
    },
    "3079": {
        "db_id": "cars",
        "question": "What are the miles per gallon of the most expensive car?",
        "ground_truth": "SELECT T1.mpg FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1",
        "amends": [
            "Do select `T1.mpg` from the `data` table instead of selecting `mpg` from the `cars` table. Do add an `INNER JOIN` with the `price` table on `T1.ID = T2.ID` instead of omitting the join entirely. Do order by `T2.price DESC` instead of `price ASC`. The amended query now correctly joins the data and price tables to retrieve mpg values while ordering by the price column from the joined table in descending order, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT mpg FROM cars ORDER BY price ASC LIMIT 1;",
            "SELECT T1.mpg FROM data T1 INNER JOIN price T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "7259": {
        "db_id": "works_cycles",
        "question": "What is the profit of a single product that received the highest rating from John Smith? List the product/s' names.",
        "ground_truth": "SELECT T1.ListPrice - T1.StandardCost, T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ReviewerName = 'John Smith' ORDER BY T2.Rating DESC LIMIT 1",
        "amends": [
            "Do select `T1.ListPrice - T1.StandardCost` and `T1.Name` instead of `product_name` and `profit`. Do join `Product AS T1` with `ProductReview AS T2` using `INNER JOIN` on `T1.ProductID = T2.ProductID` instead of querying only the `products` table. Do filter on `T2.ReviewerName = 'John Smith'` instead of `customer_name = 'John Smith'`. Do remove the subquery for maximum rating and instead use `ORDER BY T2.Rating DESC LIMIT 1` to get the highest-rated product. Do add explicit table aliases `T1` and `T2` instead of using unqualified column names. The amended query now correctly joins product and review data to find John Smith's highest-rated product with accurate profit calculation.",
            "Do place `T1.ListPrice - T1.StandardCost` before `T1.Name` in the SELECT list instead of the reverse order. Do omit the `Profit` alias instead of including it. Do maintain the same `INNER JOIN` on `T1.ProductID = T2.ProductID` and `WHERE T2.ReviewerName = 'John Smith'` filter. Do preserve the `ORDER BY T2.Rating DESC` and `LIMIT 1` clauses. The amended query now matches RIGHT_SQL's behavior by removing the unnecessary alias while maintaining the same logical result."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, profit FROM products WHERE rating = (SELECT MAX(rating) FROM products) AND customer_name = 'John Smith';",
            "SELECT T1.Name, (T1.ListPrice - T1.StandardCost) AS Profit\nFROM Product AS T1\nINNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID\nWHERE T2.ReviewerName = 'John Smith'\nORDER BY T2.Rating DESC\nLIMIT 1;",
            "SELECT T1.ListPrice - T1.StandardCost, T1.Name\nFROM Product AS T1\nINNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID\nWHERE T2.ReviewerName = 'John Smith'\nORDER BY T2.Rating DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4999": {
        "db_id": "olympics",
        "question": "Which region does the NOC code \"COL\" stand for?",
        "ground_truth": "SELECT region_name FROM noc_region WHERE noc = 'COL'",
        "amends": [
            "Do select `region_name` instead of `region` from the table. Do query table `noc_region` instead of `noc_regions`. Do filter for noc value `'COL'` instead of `'USA'`. The amended query now correctly retrieves the region name for the specified NOC code from the appropriate table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM noc_regions WHERE noc = 'USA';",
            "SELECT region_name FROM noc_region WHERE noc = 'COL';"
        ],
        "rule_sql": []
    },
    "961": {
        "db_id": "cs_semester",
        "question": "What is the salary range of the student with an email of grosellg@hku.hk?",
        "ground_truth": "SELECT T1.salary FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.email = 'grosellg@hku.hk'",
        "amends": [
            "Do select a single column `T1.salary` instead of aggregate functions `MIN(salary)` and `MAX(salary)`. Do join table `RA AS T1` with `student AS T2` using `INNER JOIN` on `T1.student_id = T2.student_id` instead of querying only the `students` table. Do filter on `T2.email = 'grosellg@hku.hk'` instead of filtering directly on the email column from a single table. The amended query now correctly retrieves individual salary records by joining the appropriate tables and filtering on the email condition, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(salary), MAX(salary) FROM students WHERE email = 'grosellg@hku.hk';",
            "SELECT T1.salary FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.email = 'grosellg@hku.hk'"
        ],
        "rule_sql": []
    },
    "5301": {
        "db_id": "beer_factory",
        "question": "Which brewery brewed the most sold root beer in 2015?",
        "ground_truth": "SELECT T3.BreweryName FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2015%' GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1",
        "amends": [
            "Do use `T3.BreweryName` instead of `brewery_name` in the SELECT list. Do join three tables (`rootbeer`, `transaction`, and `rootbeerbrand`) with proper relationships instead of querying a single table. Do use `INNER JOIN` on `T1.RootBeerID = T2.RootBeerID` and `T1.BrandID = T3.BrandID` instead of no joins. Do filter with `T2.TransactionDate LIKE '2015%'` instead of `year = 2015`. Do group by `T3.BrandID` instead of `brewery_name`. Do order by `COUNT(T1.BrandID)` instead of `total_sales`. The amended query now correctly identifies the top brewery by sales count through proper table relationships and date filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brewery_name, COUNT(*) as total_sales \nFROM root_beer_sales \nWHERE year = 2015 \nGROUP BY brewery_name \nORDER BY total_sales DESC \nLIMIT 1;",
            "SELECT T3.BreweryName\nFROM rootbeer T1\nINNER JOIN \"transaction\" T2 ON T1.RootBeerID = T2.RootBeerID\nINNER JOIN rootbeerbrand T3 ON T1.BrandID = T3.BrandID\nWHERE T2.TransactionDate LIKE '2015%'\nGROUP BY T3.BrandID\nORDER BY COUNT(T1.BrandID) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5002": {
        "db_id": "olympics",
        "question": "Provide hockey's sport id.",
        "ground_truth": "SELECT id FROM sport WHERE sport_name = 'Hockey'",
        "amends": [
            "Do select `id` instead of `sport_id` from the table. Do use table name `sport` instead of `sports` as the data source. Do filter on `sport_name = 'Hockey'` instead of `name = 'football'` to match the correct sport identifier. The amended query now correctly retrieves the ID for Hockey from the appropriate table with the proper column reference."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sport_id FROM sports WHERE name = 'football';",
            "SELECT id FROM sport WHERE sport_name = 'Hockey';"
        ],
        "rule_sql": []
    },
    "8273": {
        "db_id": "mondial_geo",
        "question": "Which two countries have the longest border in the world? Give the full name of the country.",
        "ground_truth": "SELECT T2.Country1, T2.Country2 FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length DESC LIMIT 1",
        "amends": [
            "Do add `INNER JOIN country AS T1 ON T1.Code = T2.Country1` instead of omitting the country table join. Do reference `T2.Country1` and `T2.Country2` instead of just `country1` and `country2`. Do change `LIMIT 2` to `LIMIT 1` instead of keeping the higher limit. The amended query now correctly joins the country table to validate border relationships and returns only the single longest border as specified.",
            "Do select `T2.Country1` and `T2.Country2` instead of `T1.Name` and `T3.Name` aliased as `Country1` and `Country2`. Do remove the second `INNER JOIN` on `country AS T3` instead of keeping it, as the right query only needs to join `borders` with one `country` table to access the border information. Do maintain the `ORDER BY T2.Length DESC` and `LIMIT 1` unchanged. The amended query now correctly returns the border pair with the maximum length instead of country names, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country1, country2 FROM borders ORDER BY length DESC LIMIT 2;",
            "SELECT T1.Name AS Country1, T3.Name AS Country2\nFROM borders AS T2\nINNER JOIN country AS T1 ON T1.Code = T2.Country1\nINNER JOIN country AS T3 ON T3.Code = T2.Country2\nORDER BY T2.Length DESC\nLIMIT 1",
            "SELECT T2.Country1, T2.Country2 FROM borders AS T2 INNER JOIN country AS T1 ON T1.Code = T2.Country1 ORDER BY T2.Length DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "4260": {
        "db_id": "simpson_episodes",
        "question": "How many WGA Award (TV) award recipients were born in the USA from 2009 to 2010?",
        "ground_truth": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'WGA Award (TV)' AND T1.birth_country = 'USA' AND T2.year BETWEEN 2009 AND 2010;",
        "amends": [
            "Do use table aliases `Person AS T1` and `Award AS T2` instead of `award_recipients ar` and `people p`. Do join on `T1.name = T2.person` instead of `ar.person_id = p.person_id`. Do filter on `T2.award_category = 'WGA Award (TV)'` instead of `ar.award_name = 'WGA Award (TV)'`. Do keep `T1.birth_country = 'USA'` and `T2.year BETWEEN 2009 AND 2010` filters unchanged. The amended query now correctly matches the RIGHT_SQL's behavior with proper table references and join conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM award_recipients ar\nJOIN people p ON ar.person_id = p.person_id\nWHERE ar.award_name = 'WGA Award (TV)' \nAND p.birth_country = 'USA'\nAND ar.year BETWEEN 2009 AND 2010;",
            "SELECT COUNT(*) \nFROM Person AS T1\nJOIN Award AS T2 ON T1.name = T2.person\nWHERE T2.award_category = 'WGA Award (TV)'\nAND T1.birth_country = 'USA'\nAND T2.year BETWEEN 2009 AND 2010"
        ],
        "rule_sql": []
    },
    "8077": {
        "db_id": "university",
        "question": "Which country is Harvard University in?",
        "ground_truth": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'",
        "amends": [
            "Do select `T2.country_name` instead of `country` to reference the joined table's column. Do use `FROM university AS T1 INNER JOIN country AS T2` instead of `FROM universities` to properly join the university and country tables. Do specify the join condition `ON T1.country_id = T2.id` instead of omitting it to establish the correct relationship between tables. Do filter on `T1.university_name = 'Harvard University'` instead of `name = 'Harvard University'` to use the correct column name from the university table. The amended query now correctly retrieves the country name through a proper table join instead of assuming the country field exists directly in the universities table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM universities WHERE name = 'Harvard University';",
            "SELECT T2.country_name \nFROM university AS T1 \nINNER JOIN country AS T2 ON T1.country_id = T2.id \nWHERE T1.university_name = 'Harvard University'"
        ],
        "rule_sql": []
    },
    "7697": {
        "db_id": "hockey",
        "question": "Which teams had the most postseason empty net goals in 2010 season? List their team names.",
        "ground_truth": "SELECT T2.name FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T1.year = 2010 GROUP BY T2.name ORDER BY SUM(PostENG) DESC LIMIT 1",
        "amends": [
            "Do select `T2.name` from the `Teams` table instead of `team_name` from `teams`. Do join `Goalies AS T1` with `Teams AS T2` using `INNER JOIN` on `T1.tmID = T2.tmID` instead of querying only the `teams` table. Do filter on `T1.year = 2010` instead of `season = 2010`. Do add `GROUP BY T2.name` instead of omitting grouping. Do order by `SUM(PostENG)` instead of `empty_net_goals`. The amended query now correctly aggregates goalie empty net goals by team for the 2010 season and returns the team with the highest total, matching the intended behavior.",
            "Do remove the `T1.year = T2.year` join condition instead of including it, as the team-year relationship is already established through `tmID`. Do remove the `CAST` function from `PostENG` instead of casting it to integer, since the column appears to already contain numeric values. Do reference `PostENG` directly instead of qualifying it with `T1.` table alias, as the column is unambiguous in the context. The amended query now correctly aggregates goalie performance by team for the 2010 season without unnecessary join conditions and type conversions.",
            "Do add `LIMIT 1` to the `ORDER BY` clause instead of omitting it, which restricts the result to only the top team with the highest sum of `PostENG` values rather than returning all teams ordered by that sum."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE season = 2010 ORDER BY empty_net_goals DESC LIMIT 1;",
            "SELECT T2.name\nFROM Goalies AS T1\nINNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year\nWHERE T1.year = 2010\nGROUP BY T2.name\nORDER BY SUM(CAST(T1.PostENG AS INTEGER)) DESC\nLIMIT 1;",
            "SELECT T2.name\nFROM Goalies AS T1\nINNER JOIN Teams AS T2 ON T1.tmID = T2.tmID\nWHERE T1.year = 2010\nGROUP BY T2.name\nORDER BY SUM(PostENG) DESC;",
            "SELECT T2.name\nFROM Goalies AS T1\nINNER JOIN Teams AS T2 ON T1.tmID = T2.tmID\nWHERE T1.year = 2010\nGROUP BY T2.name\nORDER BY SUM(PostENG) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "6049": {
        "db_id": "books",
        "question": "Provide the full address of Ursola Purdy.",
        "ground_truth": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'",
        "amends": [
            "Do select specific columns `T3.street_number`, `T3.street_name`, and `T3.city` instead of selecting all columns with `*`. Do join multiple tables including `customer`, `customer_address`, `address`, and `country` instead of querying only the `users` table. Do use `INNER JOIN` on `customer_address` with predicate `T1.customer_id = T2.customer_id` instead of no join. Do add another `INNER JOIN` on `address` with predicate `T3.address_id = T2.address_id` instead of omitting this relationship. Do include an additional `INNER JOIN` on `country` with predicate `T4.country_id = T3.country_id` instead of not joining the country table. Do apply filters on `T1.first_name` and `T1.last_name` from the customer table instead of filtering on a users table that doesn't exist in the schema. The amended query now correctly retrieves address information for the specified customer by properly joining the relevant tables in the database schema.",
            "Do remove `T4.country_name` from the SELECT list instead of including it. Do add table aliases with `AS` keyword for `customer AS T1` and `customer_address AS T2` instead of omitting the `AS` keyword. The amended query now correctly retrieves only the address information without the country name and uses proper table alias syntax, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM users WHERE first_name = 'Ursola' AND last_name = 'Purdy';",
            "SELECT T3.street_number, T3.street_name, T3.city, T4.country_name\nFROM customer T1\nINNER JOIN customer_address T2 ON T1.customer_id = T2.customer_id\nINNER JOIN address T3 ON T3.address_id = T2.address_id\nINNER JOIN country T4 ON T4.country_id = T3.country_id\nWHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'",
            "SELECT T3.street_number, T3.street_name, T3.city\nFROM customer AS T1\nINNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id\nINNER JOIN address AS T3 ON T3.address_id = T2.address_id\nINNER JOIN country AS T4 ON T4.country_id = T3.country_id\nWHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'"
        ],
        "rule_sql": []
    },
    "726": {
        "db_id": "trains",
        "question": "Among the trains running west, how many trains have three-wheeled, jagged roof cars?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.direction = 'west' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.wheels = 3 AND T1.roof = 'jagged'",
        "amends": [
            "Do use `SUM(CASE WHEN T2.direction = 'west' THEN 1 ELSE 0 END)` as `count` instead of `COUNT(*)` to count only westbound trains. Do join `cars AS T1` with `trains AS T2` instead of joining `trains` with `cars`, and use `ON T1.train_id = T2.id` instead of `ON t.train_id = c.train_id`. Do filter with `T1.wheels = 3` instead of `c.wheel_count = 3` and `T1.roof = 'jagged'` instead of `c.roof_type = 'jagged'`. Do remove the explicit `WHERE t.direction = 'west'` filter since it's now handled in the CASE expression. The amended query now correctly counts only westbound trains while maintaining the same filtering logic on car attributes."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM trains t\nJOIN cars c ON t.train_id = c.train_id\nWHERE t.direction = 'west'\nAND c.roof_type = 'jagged'\nAND c.wheel_count = 3;",
            "SELECT SUM(CASE WHEN T2.direction = 'west' THEN 1 ELSE 0 END) AS count\nFROM cars AS T1\nJOIN trains AS T2 ON T1.train_id = T2.id\nWHERE T1.wheels = 3 AND T1.roof = 'jagged'"
        ],
        "rule_sql": []
    },
    "2354": {
        "db_id": "superstore",
        "question": "Among the customers who have ordered the product \"Telescoping Adjustable Floor Lamp\", how many of them are consumers?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.`Customer Name`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.`Product Name` = 'Telescoping Adjustable Floor Lamp' AND T1.Segment = 'Consumer'",
        "amends": [
            "Do use `COUNT(DISTINCT T1.Customer Name)` instead of `COUNT(*)` to count unique customers rather than all order records. Do reference `people AS T1` instead of `customers c` as the customer source table. Do use `INNER JOIN central_superstore AS T2` instead of `JOIN orders o` and `JOIN order_items oi` by consolidating order data into a single table. Do join on `T1.Customer ID = T2.Customer ID` instead of `c.customer_id = o.customer_id` with corrected column naming. Do join `product AS T3` instead of `products p` with the join condition `T3.Product ID = T2.Product ID` instead of `oi.product_id = p.product_id`. Do filter on `T3.Product Name = 'Telescoping Adjustable Floor Lamp'` instead of `p.product_name = 'Telescoping Adjustable Floor Lamp'` with proper column naming. Do filter on `T1.Segment = 'Consumer'` instead of `c.customer_type = 'Consumer'` with the correct column for customer segmentation. The amended query now correctly counts distinct customers who purchased the specific product while belonging to the consumer segment, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN products p ON oi.product_id = p.product_id\nWHERE p.product_name = 'Telescoping Adjustable Floor Lamp'\nAND c.customer_type = 'Consumer';",
            "SELECT COUNT(DISTINCT T1.\"Customer Name\") \nFROM people AS T1\nINNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" AND T1.Region = T2.Region\nINNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" AND T3.Region = T2.Region\nWHERE T3.\"Product Name\" = 'Telescoping Adjustable Floor Lamp'\nAND T1.Segment = 'Consumer'"
        ],
        "rule_sql": []
    },
    "3157": {
        "db_id": "donor",
        "question": "Name the vendors who provide resources for project 'Lights, Camera, Action!'. List all the item names and unit price for each.",
        "ground_truth": "SELECT T1.vendor_name, T1.item_name, T1.item_unit_price FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN essays AS T3 ON T2.projectid = T3.projectid WHERE T3.title = 'Lights, Camera, Action!'",
        "amends": [
            "Do reference `resources` as `T1` instead of `v` and `r`, and use `item_unit_price` instead of `unit_price` in the SELECT list. Do join `projects` as `T2` on `T1.projectid = T2.projectid` instead of `r.project_id = p.project_id`, and add an INNER JOIN to `essays` as `T3` on `T2.projectid = T3.projectid` instead of omitting it. Do filter on `T3.title = 'Lights, Camera, Action!'` instead of `p.project_name = 'Lights, Camera, Action!'`, and remove the `vendors` table and its join condition instead of including them. The amended query now correctly filters based on essay title rather than project name and includes the necessary join to the essays table, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT v.vendor_name, r.item_name, r.unit_price \nFROM vendors v \nJOIN resources r ON v.vendor_id = r.vendor_id \nJOIN projects p ON r.project_id = p.project_id \nWHERE p.project_name = 'Lights, Camera, Action!'",
            "SELECT T1.vendor_name, T1.item_name, T1.item_unit_price\nFROM resources T1\nINNER JOIN projects T2 ON T1.projectid = T2.projectid\nINNER JOIN essays T3 ON T2.projectid = T3.projectid\nWHERE T3.title = 'Lights, Camera, Action!'\nORDER BY T1.vendor_name, T1.item_name;"
        ],
        "rule_sql": []
    },
    "3711": {
        "db_id": "college_completion",
        "question": "What is the average percentage of students graduating within 100 percent of normal/expected time for Central Alabama Community College?",
        "ground_truth": "SELECT AVG(T2.grad_100_rate) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of a single table reference. Do join `institution_details AS T1` with `institution_grads AS T2` on `T2.unitid = T1.unitid` instead of querying a single table. Do select `AVG(T2.grad_100_rate)` instead of `AVG(graduation_rate)` to reference the correct column from the joined table. Do filter on `T1.chronname = 'Central Alabama Community College'` instead of `institution_name` to use the proper column name from the details table. The amended query now correctly joins the necessary tables and references the appropriate columns to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(graduation_rate) FROM college_data WHERE institution_name = 'Central Alabama Community College';",
            "SELECT AVG(T2.grad_100_rate) \nFROM institution_details AS T1 \nJOIN institution_grads AS T2 ON T2.unitid = T1.unitid \nWHERE T1.chronname = 'Central Alabama Community College'"
        ],
        "rule_sql": []
    },
    "8251": {
        "db_id": "mondial_geo",
        "question": "Please list the depth of the lakes that are located in the Province of Albania.",
        "ground_truth": "SELECT T2.Depth FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Albania'",
        "amends": [
            "Do select `T2.Depth` from the `lake` table instead of `depth` from the `lakes` table. Do join `located AS T1` with `lake AS T2` using `INNER JOIN` on `T1.Lake = T2.Name` instead of querying a single `lakes` table. Do filter on `T1.Province = 'Albania'` instead of `province = 'Albania'` to correctly reference the joined table structure. The amended query now properly retrieves lake depths by joining location and lake data through their relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT depth FROM lakes WHERE province = 'Albania';",
            "SELECT T2.Depth FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Albania'"
        ],
        "rule_sql": []
    },
    "599": {
        "db_id": "codebase_comments",
        "question": "Among the repositories with over 200 likes, how many of them have files contained by solutions with a processed time of under 636439500080712000?",
        "ground_truth": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime < 636439500080712000 AND T1.Stars > 200",
        "amends": [
            "Do use `COUNT(T2.RepoId)` instead of `COUNT(*)` to count specific non-null values rather than all rows. Do reference tables as `Repo AS T1` and `Solution AS T2` instead of `repositories r`, `files f`, and `solutions s` to eliminate the unnecessary files table join. Do use `INNER JOIN` with `T1.Id = T2.RepoId` instead of multiple joins including files table to directly connect repositories and solutions. Do filter on `T1.Stars > 200` instead of `r.likes > 200` to use the correct column name for star count. Do maintain the `T2.ProcessedTime < 636439500080712000` filter but apply it in the WHERE clause instead of joining through additional tables. The amended query now correctly counts solutions from repositories with sufficient stars that were processed before the specified time, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM repositories r\nJOIN files f ON r.id = f.repository_id\nJOIN solutions s ON f.solution_id = s.id\nWHERE r.likes > 200\nAND s.processed_time < 636439500080712000;",
            "SELECT COUNT(T2.RepoId) \nFROM Repo AS T1 \nINNER JOIN Solution AS T2 ON T1.Id = T2.RepoId \nWHERE T1.Stars > 200 \nAND T2.ProcessedTime < 636439500080712000"
        ],
        "rule_sql": []
    },
    "9142": {
        "db_id": "movie_3",
        "question": "What is Diane Collins' email address?",
        "ground_truth": "SELECT email FROM customer WHERE first_name = 'DIANE' AND last_name = 'COLLINS'",
        "amends": [
            "Do query the `customer` table instead of the `users` table. Do use uppercase comparison values `'DIANE'` and `'COLLINS'` instead of mixed case `'Diane'` and `'Collins'` to ensure case-insensitive matching. The amended query now correctly searches the customer table with proper case handling to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM users WHERE first_name = 'Diane' AND last_name = 'Collins';",
            "SELECT email FROM customer WHERE UPPER(first_name) = 'DIANE' AND UPPER(last_name) = 'COLLINS';"
        ],
        "rule_sql": []
    },
    "9295": {
        "db_id": "movie_3",
        "question": "What is the difference between the number of children's films and action films?",
        "ground_truth": "SELECT SUM(IIF(T2.name = 'Children', 1, 0)) - SUM(IIF(T2.name = 'Action', 1, 0)) AS diff FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id",
        "amends": [
            "Do use `SUM(IIF(T2.name = 'Children', 1, 0)) - SUM(IIF(T2.name = 'Action', 1, 0))` instead of `COUNT(*) FROM films WHERE category = 'Children' - COUNT(*) FROM films WHERE category = 'Action'` to calculate the difference between two counts in a single query. Do join `film_category AS T1` with `category AS T2` on `T1.category_id = T2.category_id` instead of querying the `films` table directly to properly relate films to their categories. Do reference category names through `T2.name` instead of assuming a `category` column exists in the films table. Do use conditional aggregation with `IIF` functions instead of separate count queries to handle both conditions simultaneously. The amended query now correctly calculates the difference between Children and Action film counts by properly joining the category relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE category = 'Children' - COUNT(*) FROM films WHERE category = 'Action';",
            "SELECT \n    SUM(IIF(T2.name = 'Children', 1, 0)) - SUM(IIF(T2.name = 'Action', 1, 0)) AS difference\nFROM \n    film_category AS T1\nJOIN \n    category AS T2 ON T1.category_id = T2.category_id\nWHERE \n    T2.name IN ('Children', 'Action')"
        ],
        "rule_sql": []
    },
    "1649": {
        "db_id": "car_retails",
        "question": "What is the percentage of the payment amount in 2004 was made by Atelier graphique?",
        "ground_truth": "SELECT SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount) FROM customers AS t1 INNER JOIN payments AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t2.paymentDate) = '2004'",
        "amends": [
            "Do use `SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount)` instead of `(SUM(CASE WHEN c.customerName = 'Atelier graphique' AND strftime('%Y', p.paymentDate) = '2004' THEN p.amount ELSE 0 END) / SUM(p.amount)) * 100` to avoid redundant date filtering in the CASE expression and simplify the percentage calculation. Do use table aliases `t1` and `t2` instead of `c` and `p` for consistency. Do remove the redundant date condition from the CASE expression since the WHERE clause already filters for `'2004'`. Do use explicit `INNER JOIN` instead of just `JOIN` for clarity. The amended query now correctly calculates the percentage of payments from 'Atelier graphique' relative to total 2004 payments."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SUM(CASE WHEN c.customerName = 'Atelier graphique' AND strftime('%Y', p.paymentDate) = '2004' THEN p.amount ELSE 0 END) / SUM(p.amount)) * 100 AS percentage\nFROM payments p\nJOIN customers c ON p.customerNumber = c.customerNumber\nWHERE strftime('%Y', p.paymentDate) = '2004';",
            "SELECT \n    SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount) AS percentage\nFROM \n    customers t1\nINNER JOIN \n    payments t2 ON t1.customerNumber = t2.customerNumber\nWHERE \n    strftime('%Y', t2.paymentDate) = '2004'"
        ],
        "rule_sql": []
    },
    "1946": {
        "db_id": "soccer_2016",
        "question": "Calculate the run rate at the end of 17 overs of the match ID 335987 on 4/18/2008.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 17",
        "amends": [
            "Do use `CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END)` instead of `runs_scored / 17` for the calculation. Do join `Toss_Decision AS T1`, `Match AS T2`, and `Batsman_Scored AS T3` with `INNER JOIN` on `T1.Toss_Id = T2.Toss_Decide` and `T2.Match_Id = T3.Match_Id` instead of querying a single table. Do filter with `T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18'` instead of `match_id = 335987 AND date = '4/18/2008'`. Do add `GROUP BY T3.Over_Id` and `HAVING COUNT(T1.Toss_Name = 'field') = 17` instead of omitting grouping and aggregation. The amended query now correctly calculates the run rate based on toss decisions and match conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (runs_scored / 17) AS run_rate FROM match_data WHERE match_id = 335987 AND date = '4/18/2008';",
            "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) AS run_rate\nFROM Toss_Decision AS T1\nINNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide\nINNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id\nWHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18'\nGROUP BY T3.Over_Id\nHAVING COUNT(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE NULL END) = 17"
        ],
        "rule_sql": []
    },
    "2761": {
        "db_id": "european_football_1",
        "question": "Please provide the names of any three away teams that competed in the Italian divisions.",
        "ground_truth": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.country = 'Italy' LIMIT 3",
        "amends": [
            "Do use `T1.AwayTeam` instead of `home_team` for the column selection. Do add `divisions AS T2` as a joined table instead of querying only the `matches` table. Do use `INNER JOIN` with `T1.Div=T2.division` instead of no join condition. Do filter on `T2.country = 'Italy'` instead of `league = 'Italian'` for the country condition. Do reference `matchs AS T1` instead of `matches` as the primary table source. The amended query now correctly joins tables and filters by country to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT home_team FROM matches WHERE league = 'Italian' LIMIT 3;",
            "SELECT DISTINCT T1.AwayTeam \nFROM matchs AS T1 \nINNER JOIN divisions AS T2 ON T1.Div = T2.division \nWHERE T2.country = 'Italy' \nLIMIT 3"
        ],
        "rule_sql": []
    },
    "2435": {
        "db_id": "superstore",
        "question": "How many orders purchased by Aaron Bergman have been delivered with the slowest shipping speed?",
        "ground_truth": "SELECT COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aaron Bergman' AND T2.`Ship Mode` = 'Standard Class'",
        "amends": [
            "Do use table `people` instead of `customers` and `central_superstore` instead of `orders`. Do join on `Customer ID` instead of `customer_id` and use `INNER JOIN` instead of `JOIN`. Do filter by `Customer Name` instead of `customer_name` and `Ship Mode` = 'Standard Class' instead of the complex subquery checking `shipping_speed` against maximum and `status` = 'delivered'. Do remove the subquery entirely instead of keeping it. The amended query now correctly counts Aaron Bergman's Standard Class shipments from the appropriate tables with proper join conditions and simplified filtering.",
            "Do join `people` and `central_superstore` using only `Customer ID` instead of including the redundant `Region` condition. Do remove the `Region` join predicate from the `ON` clause instead of keeping it, as it unnecessarily restricts the join. Do reference the tables with aliases `T1` and `T2` instead of `p` and `cs` for consistency. The amended query now correctly counts orders for Aaron Bergman with Standard Class shipping without the overly restrictive region matching."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.customer_name = 'Aaron Bergman'\nAND o.shipping_speed = (SELECT MAX(shipping_speed) FROM orders)\nAND o.status = 'delivered';",
            "SELECT COUNT(*) \nFROM central_superstore cs\nINNER JOIN people p ON cs.\"Customer ID\" = p.\"Customer ID\" AND cs.Region = p.Region\nWHERE p.\"Customer Name\" = 'Aaron Bergman' \nAND cs.\"Ship Mode\" = 'Standard Class'",
            "SELECT COUNT(*) \nFROM people T1\nINNER JOIN central_superstore T2 ON T1.\"Customer ID\" = T2.\"Customer ID\"\nWHERE T1.\"Customer Name\" = 'Aaron Bergman' \nAND T2.\"Ship Mode\" = 'Standard Class'"
        ],
        "rule_sql": []
    },
    "4163": {
        "db_id": "simpson_episodes",
        "question": "How many crew members who were born in the USA were nominated for the Outstanding Animated Program (For Programming Less Than One Hour) award in 2009?",
        "ground_truth": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Nominee' AND T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.year = 2009;",
        "amends": [
            "Do join `Person` and `Award` tables with `INNER JOIN` on `T1.name = T2.person` instead of querying only `crew_members`. Do filter on `T2.result = 'Nominee'` instead of `award_nomination` and use `T2.award` instead of `award_nomination` for the award condition. Do reference `T2.year` instead of `nomination_year` while keeping the `T1.birth_country = 'USA'` filter. The amended query now correctly counts nominees from the USA for the specified award category and year by properly joining the relevant tables with accurate column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM crew_members \nWHERE birth_country = 'USA' \nAND award_nomination = 'Outstanding Animated Program (For Programming Less Than One Hour)' \nAND nomination_year = 2009;",
            "SELECT COUNT(DISTINCT p.name) \nFROM Person p\nINNER JOIN Award a ON p.name = a.person\nWHERE p.birth_country = 'USA'\nAND a.result = 'Nominee'\nAND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND a.year = 2009"
        ],
        "rule_sql": []
    },
    "151": {
        "db_id": "movie_platform",
        "question": "Between 1970 to 1980, how many movies with a popularity of more than 11,000 were released?",
        "ground_truth": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year BETWEEN '1970' AND '1980' AND movie_popularity > 11000",
        "amends": [
            "Do reference `movie_id` in the COUNT function instead of using `COUNT(*)` to count specific non-null values. Do filter on `movie_release_year` instead of `release_year` to use the correct column name, and do wrap the year values in quotes `'1970'` and `'1980'` instead of using numeric literals to ensure proper string comparison. Do filter on `movie_popularity` instead of `popularity` to use the correct column name for the popularity threshold check. The amended query now correctly counts movies with proper column references and type handling."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE release_year BETWEEN 1970 AND 1980 AND popularity > 11000;",
            "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year BETWEEN '1970' AND '1980' AND movie_popularity > 11000"
        ],
        "rule_sql": []
    },
    "5746": {
        "db_id": "language_corpus",
        "question": "What is the language of the pair of words numbered 1 and 616?",
        "ground_truth": "SELECT T2.lang FROM biwords AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.w1st = 1 AND T1.w2nd = 616",
        "amends": [
            "Do select `T2.lang` from the `langs` table instead of `language` from the `words` table. Do use `INNER JOIN` between `biwords AS T1` and `langs AS T2` on `T1.lid = T2.lid` instead of querying a single table. Do filter with `T1.w1st = 1 AND T1.w2nd = 616` instead of `id = 1 OR id = 616` to properly match the biwords relationship. The amended query now correctly joins the biwords and langs tables to find the language associated with a specific word pair instead of incorrectly querying a single words table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM words WHERE id = 1 OR id = 616;",
            "SELECT T2.lang FROM biwords AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.w1st = 1 AND T1.w2nd = 616"
        ],
        "rule_sql": []
    },
    "8981": {
        "db_id": "human_resources",
        "question": "When was Emily Wood hired? Mention her position and salary.",
        "ground_truth": "SELECT T1.hiredate, T2.positiontitle, T1.salary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'",
        "amends": [
            "Do reference columns with table aliases `T1.hiredate`, `T2.positiontitle`, and `T1.salary` instead of unqualified `hire_date`, `position`, and `salary`. Do add `INNER JOIN position AS T2 ON T1.positionID = T2.positionID` instead of querying only the `employees` table. Do filter on `T1.firstname = 'Emily' AND T1.lastname = 'Wood'` instead of `name = 'Emily Wood'` to properly match separate first and last name fields. The amended query now correctly joins employee and position tables and uses proper column references to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT hire_date, position, salary FROM employees WHERE name = 'Emily Wood';",
            "SELECT T1.hiredate, T2.positiontitle, T1.salary \nFROM employee AS T1 \nINNER JOIN position AS T2 ON T1.positionID = T2.positionID \nWHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'"
        ],
        "rule_sql": []
    },
    "3909": {
        "db_id": "public_review_platform",
        "question": "How many business have been reviewed by user ID 3 and how long have this user been with Yelp?",
        "ground_truth": "SELECT COUNT(T1.business_id) , strftime('%Y', 'now') - T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3",
        "amends": [
            "Do use `COUNT(T1.business_id)` with table alias instead of `COUNT(business_id)` without qualification. Do join `Users AS T2` on `T1.user_id = T2.user_id` instead of querying the review table alone. Do calculate `strftime('%Y', 'now') - T2.user_yelping_since_year` for time calculation instead of using `MAX(date) - MIN(date)` from subqueries. Do remove the `AS business_count` alias instead of keeping it. Do remove the `AS time_with_yelp` alias instead of keeping it. Do filter on `T1.user_id = 3` with table qualification instead of just `user_id = 3`. The amended query now correctly calculates business count and years since user joined using proper table joins instead of suboptimal subqueries."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(business_id) AS business_count, (SELECT MAX(date) FROM review WHERE user_id = 3) - (SELECT MIN(date) FROM review WHERE user_id = 3) AS time_with_yelp FROM review WHERE user_id = 3;",
            "SELECT COUNT(T1.business_id), strftime('%Y', 'now') - T2.user_yelping_since_year FROM Reviews AS T1 JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3"
        ],
        "rule_sql": []
    },
    "3801": {
        "db_id": "public_review_platform",
        "question": "How many businesses with the category are open from Monday to Thursday?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id INNER JOIN Days AS T5 ON T4.day_id = T5.day_id WHERE T5.day_of_week LIKE 'Monday' OR T5.day_of_week LIKE 'Tuesday' OR T5.day_of_week LIKE 'Wednesday' OR T5.day_of_week LIKE 'Thursday'",
        "amends": [
            "Do select `COUNT(T2.business_id)` from properly joined tables instead of `COUNT(*)` from a single table. Do join multiple tables including `Categories`, `Business_Categories`, `Business`, `Business_Hours`, and `Days` with `INNER JOIN` conditions instead of querying only the `businesses` table. Do filter on `T5.day_of_week LIKE` patterns for specific weekdays instead of checking boolean columns `monday`, `tuesday`, etc. Do remove the `category = 'Open'` filter entirely instead of including it, as the business status is now determined through proper table relationships. The amended query correctly counts businesses that are open on specified weekdays through proper relational joins rather than relying on denormalized column structure.",
            "Do count `T2.business_id` without `DISTINCT` instead of counting distinct `Business.business_id`. Do join from `Categories` as the primary table instead of starting from `Business`. Do use table aliases `T1` through `T5` instead of full table names. Do change the `WHERE` condition to use `OR` with `LIKE` comparisons for each weekday instead of `IN` with exact matches. Do remove the `Business.active = 'True'` filter instead of keeping it. The amended query now correctly counts businesses by category while filtering for specific weekdays without the active status constraint."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE category = 'Open' AND (monday = 'Yes' OR tuesday = 'Yes' OR wednesday = 'Yes' OR thursday = 'Yes')",
            "SELECT COUNT(DISTINCT Business.business_id)\nFROM Business\nINNER JOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nINNER JOIN Categories ON Business_Categories.category_id = Categories.category_id\nINNER JOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nINNER JOIN Days ON Business_Hours.day_id = Days.day_id\nWHERE Days.day_of_week IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday')\nAND Business.active = 'True';",
            "SELECT COUNT(T2.business_id)\nFROM Categories T1\nINNER JOIN Business_Categories T2 ON T1.category_id = T2.category_id\nINNER JOIN Business T3 ON T2.business_id = T3.business_id\nINNER JOIN Business_Hours T4 ON T3.business_id = T4.business_id\nINNER JOIN Days T5 ON T4.day_id = T5.day_id\nWHERE T5.day_of_week LIKE 'Monday%' \n   OR T5.day_of_week LIKE 'Tuesday%'\n   OR T5.day_of_week LIKE 'Wednesday%'\n   OR T5.day_of_week LIKE 'Thursday%'"
        ],
        "rule_sql": []
    },
    "8915": {
        "db_id": "cookbook",
        "question": "Provide the title and total time of the recipe which can be made with only lima beans.",
        "ground_truth": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'lima beans'",
        "amends": [
            "Do select `T1.title` and `T1.prep_min + T1.cook_min + T1.stnd_min` instead of `title` and `total_time`. Do use `Recipe AS T1` joined with `Quantity AS T2` on `T1.recipe_id = T2.recipe_id` and `Ingredient AS T3` on `T3.ingredient_id = T2.ingredient_id` instead of querying only `recipes`. Do filter on `T3.name = 'lima beans'` instead of `ingredients = 'lima beans'`. The amended query now correctly calculates total time from individual components and properly filters through ingredient relationships instead of assuming a direct ingredients column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, total_time FROM recipes WHERE ingredients = 'lima beans';",
            "SELECT T1.title, (T1.prep_min + T1.cook_min + T1.stnd_min) AS total_time\nFROM Recipe AS T1\nJOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id\nJOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id\nWHERE T3.name = 'lima beans';"
        ],
        "rule_sql": []
    },
    "1932": {
        "db_id": "soccer_2016",
        "question": "What is the total number of runs scored by the batsmen during the 2nd inning of the match ID 335988?",
        "ground_truth": "SELECT SUM(Runs_Scored) FROM Batsman_Scored WHERE Match_Id = 335988 AND Innings_No = 2",
        "amends": [
            "Do reference `Runs_Scored` instead of `runs` in the aggregate function. Do use `Batsman_Scored` instead of `batting` as the table source. Do filter on `Match_Id` instead of `match_id` for the column identifier. Do filter on `Innings_No` instead of `inning` for the innings column. The amended query now correctly sums runs scored from the appropriate table with proper column references."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(runs) FROM batting WHERE match_id = 335988 AND inning = 2;",
            "SELECT SUM(Runs_Scored) AS total_runs FROM Batsman_Scored WHERE Match_Id = 335988 AND Innings_No = 2"
        ],
        "rule_sql": []
    },
    "1772": {
        "db_id": "restaurant",
        "question": "How many deli in Belmont have a review rating of 2 or more?",
        "ground_truth": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'",
        "amends": [
            "Do reference table `generalinfo` instead of `restaurants` and count `id_restaurant` instead of using `COUNT(*)`. Do use filter `city = 'belmont'` (lowercase) instead of `city = 'Belmont'` (title case). Do use condition `review > 2` instead of `review_rating >= 2` to exclude ratings of exactly 2. Do filter by `food_type = 'deli'` instead of `category = 'deli'` for the correct column name. The amended query now correctly counts deli restaurants in Belmont with reviews greater than 2, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE city = 'Belmont' AND category = 'deli' AND review_rating >= 2;",
            "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND food_type = 'deli' AND review > 2"
        ],
        "rule_sql": []
    },
    "8755": {
        "db_id": "chicago_crime",
        "question": "What is the full name of the alderman of ward no.21?",
        "ground_truth": "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21",
        "amends": [
            "Do select `alderman_first_name`, `alderman_last_name`, and `alderman_name_suffix` instead of `first_name` and `last_name`. Do query from `Ward` table instead of `aldermen` table. Do filter on `ward_no = 21` instead of `ward_number = 21`. The amended query now correctly references the Ward table structure and column names to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM aldermen WHERE ward_number = 21;",
            "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21;"
        ],
        "rule_sql": []
    },
    "5226": {
        "db_id": "address",
        "question": "How many postal points are there under the congress representative from the House of Representatives in Mississippi?",
        "ground_truth": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Mississippi'",
        "amends": [
            "Do select `COUNT(T2.zip_code)` instead of `COUNT(*)` to count specific zip codes rather than all rows. Do join `congress AS T1` and `zip_congress AS T2` with `INNER JOIN` on `T1.congress_rep_id = T2.district` instead of querying `postal_points` alone with filters on `representative` and `state`. Do filter on `T1.state = 'Mississippi'` instead of filtering the original table's `state` column. Do remove the `representative = 'House of Representatives'` filter instead of keeping it since the join implicitly handles the congressional representation logic. The amended query now correctly counts zip codes for Mississippi congressional districts by properly joining the congress and zip_congress tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM postal_points WHERE representative = 'House of Representatives' AND state = 'Mississippi';",
            "SELECT COUNT(T2.zip_code) \nFROM congress AS T1 \nINNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district \nWHERE T1.state = 'Mississippi'"
        ],
        "rule_sql": []
    },
    "1616": {
        "db_id": "car_retails",
        "question": "Which customer made the order No. 10160? Give the contact name.",
        "ground_truth": "SELECT t2.contactFirstName, t2.contactLastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10160'",
        "amends": [
            "Do select `t2.contactFirstName` and `t2.contactLastName` instead of just `contact_name`. Do join `orders AS t1` with `customers AS t2` using `INNER JOIN` on `t1.customerNumber = t2.customerNumber` instead of querying only the `customers` table. Do filter on `t1.orderNumber = '10160'` instead of `order_id = 10160` and use string comparison instead of numeric. The amended query now correctly retrieves customer contact details by joining orders and customers tables using the proper relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT contact_name FROM customers WHERE order_id = 10160;",
            "SELECT t2.contactFirstName, t2.contactLastName \nFROM orders AS t1 \nINNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber \nWHERE t1.orderNumber = '10160'"
        ],
        "rule_sql": []
    },
    "3912": {
        "db_id": "public_review_platform",
        "question": "List out the user who is an elite user for consecutively 5 years or more and what is the user average star? How many likes does this user gets?",
        "ground_truth": "SELECT T2.user_average_stars, COUNT(T3.likes) FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Tips AS T3 ON T3.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T1.user_id) > 5",
        "amends": [
            "Do select `T2.user_average_stars` and `COUNT(T3.likes)` instead of `u.name`, `AVG(r.stars)`, and `COUNT(l.like_id)`. Do use tables `Elite AS T1`, `Users AS T2`, and `Tips AS T3` instead of `users u`, `elite_years e`, `reviews r`, and `likes l`. Do perform `INNER JOIN` on `T1.user_id = T2.user_id` and `T3.user_id = T2.user_id` instead of multiple joins on user_id relationships. Do remove the WHERE clause filtering `e.year` between 2018 and 2022 instead of keeping it. Do change the HAVING condition to `COUNT(T1.user_id) > 5` instead of `COUNT(DISTINCT e.year) >= 5`. The amended query now correctly matches the RIGHT_SQL's behavior.",
            "Do select only `T2.user_average_stars` and `COUNT(T3.likes)` instead of including `T2.user_id` in the SELECT list. Do group by `T1.user_id` instead of grouping by both `T2.user_id` and `T2.user_average_stars`. The amended query now correctly matches the RIGHT_SQL's behavior by focusing on user averages and counts while maintaining proper grouping logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.name, AVG(r.stars) as avg_star, COUNT(l.like_id) as total_likes\nFROM users u\nJOIN elite_years e ON u.user_id = e.user_id\nJOIN reviews r ON u.user_id = r.user_id\nJOIN likes l ON u.user_id = l.user_id\nWHERE e.year >= 2018 AND e.year <= 2022\nGROUP BY u.user_id\nHAVING COUNT(DISTINCT e.year) >= 5;",
            "SELECT T2.user_id, T2.user_average_stars, COUNT(T3.likes) AS total_likes\nFROM Elite AS T1\nINNER JOIN Users AS T2 ON T1.user_id = T2.user_id\nINNER JOIN Tips AS T3 ON T3.user_id = T2.user_id\nGROUP BY T2.user_id, T2.user_average_stars\nHAVING COUNT(T1.user_id) > 5",
            "SELECT T2.user_average_stars, COUNT(T3.likes)\nFROM Elite AS T1\nINNER JOIN Users AS T2 ON T1.user_id = T2.user_id\nINNER JOIN Tips AS T3 ON T3.user_id = T2.user_id\nGROUP BY T1.user_id\nHAVING COUNT(T1.user_id) > 5"
        ],
        "rule_sql": []
    },
    "7456": {
        "db_id": "works_cycles",
        "question": "Which product has the highest price in 2012?",
        "ground_truth": "SELECT ProductID FROM ProductListPriceHistory WHERE StartDate LIKE '2012%' ORDER BY ListPrice DESC LIMIT 1",
        "amends": [
            "Do select `ProductID` instead of `product_name` and from `ProductListPriceHistory` instead of `products`. Do filter with `StartDate LIKE '2012%'` instead of `year = 2012` and order by `ListPrice DESC` instead of `price ASC`. The amended query now correctly retrieves the ProductID with the highest list price from 2012 records, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE year = 2012 ORDER BY price ASC LIMIT 1;",
            "SELECT ProductID FROM ProductListPriceHistory WHERE StartDate LIKE '2012%' ORDER BY ListPrice DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3487": {
        "db_id": "video_games",
        "question": "List the games available on Wii.",
        "ground_truth": "SELECT T4.game_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T1.platform_name = 'Wii'",
        "amends": [
            "Do use explicit column selection `T4.game_name` instead of `SELECT *`. Do join multiple tables starting with `platform AS T1` instead of querying `games` directly. Do use `INNER JOIN` with `game_platform AS T2` on `T1.id = T2.platform_id` instead of no join. Do add `INNER JOIN` with `game_publisher AS T3` on `T2.game_publisher_id = T3.id` instead of omitting it. Do add `INNER JOIN` with `game AS T4` on `T3.game_id = T4.id` instead of omitting it. Do filter on `T1.platform_name = 'Wii'` instead of `platform = 'PlayStation'`. The amended query now correctly joins the normalized schema to retrieve game names for the specified platform."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM games WHERE platform = 'PlayStation';",
            "SELECT T4.game_name\nFROM platform AS T1\nINNER JOIN game_platform AS T2 ON T1.id = T2.platform_id\nINNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id\nINNER JOIN game AS T4 ON T3.game_id = T4.id\nWHERE T1.platform_name = 'Wii'"
        ],
        "rule_sql": []
    },
    "7014": {
        "db_id": "works_cycles",
        "question": "List down the product name, reviewer name, rating and comments for product under the road line.",
        "ground_truth": "SELECT T1.Name, T2.ReviewerName, T2.Rating, T2.Comments FROM Product AS T1 INNER JOIN ProductReview AS T2 USING (productID) WHERE T1.ProductLine = 'R'",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of `p` and `r`. Do reference columns as `T1.Name` and `T2.ReviewerName` instead of `p.productName` and `r.reviewerName`. Do use `INNER JOIN` with `USING (productID)` instead of `JOIN` with `ON p.productID = r.productID`. Do filter with `T1.ProductLine = 'R'` instead of `p.productLine = 'Road'`. Do remove the `ORDER BY` clause instead of keeping it. The amended query now matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.productName, r.reviewerName, r.rating, r.comments \nFROM products p \nJOIN reviews r ON p.productID = r.productID \nWHERE p.productLine = 'Road' \nORDER BY r.rating DESC;",
            "SELECT T1.Name, T2.ReviewerName, T2.Rating, T2.Comments\nFROM Product T1\nINNER JOIN ProductReview T2 USING (ProductID)\nWHERE T1.ProductLine = 'R'"
        ],
        "rule_sql": []
    },
    "6885": {
        "db_id": "retails",
        "question": "Among the suppliers for the parts ordered in order no.4, how many of them are in debt?",
        "ground_truth": "SELECT COUNT(T1.l_linenumber) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 4 AND T2.s_acctbal < 0",
        "amends": [
            "Do use `COUNT(T1.l_linenumber)` instead of `COUNT(*)` to count specific line items. Do reference `lineitem AS T1` and `supplier AS T2` instead of `suppliers s` and `parts p` as the source tables. Do use `INNER JOIN` with `T1.l_suppkey = T2.s_suppkey` instead of joining through multiple tables with `s.supplier_id = p.supplier_id` and `p.part_id = od.part_id`. Do filter on `T1.l_orderkey = 4` instead of `od.order_id = 4` to reference the correct order key column. Do use `T2.s_acctbal < 0` instead of `s.debt > 0` to check for negative account balance rather than positive debt. Do remove the `order_details` table entirely instead of including it in the joins. The amended query now correctly counts line items from suppliers with negative account balances for a specific order."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM suppliers s JOIN parts p ON s.supplier_id = p.supplier_id JOIN order_details od ON p.part_id = od.part_id WHERE od.order_id = 4 AND s.debt > 0;",
            "SELECT COUNT(T1.l_linenumber) \nFROM lineitem AS T1\nINNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey\nWHERE T1.l_orderkey = 4 AND T2.s_acctbal < 0"
        ],
        "rule_sql": []
    },
    "2514": {
        "db_id": "app_store",
        "question": "How many users holds neutral attitude towards the HTC Weather app? Indicate the app's rating on the Google Play Store.",
        "ground_truth": "SELECT COUNT(T1.Rating), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'HTC Weather' AND T2.Sentiment = 'Neutral'",
        "amends": [
            "Do join `playstore AS T1` and `user_reviews AS T2` on `T1.App = T2.App` instead of querying only `user_attitudes`. Do filter on `T1.App = 'HTC Weather'` and `T2.Sentiment = 'Neutral'` instead of `attitude = 'neutral'` and `app_name = 'HTC Weather'`. Do select `COUNT(T1.Rating)` and `T1.Rating` instead of `COUNT(*) AS user_count` and `rating`. Do use explicit table aliases `T1.Rating` instead of unqualified `rating`. The amended query now correctly counts ratings for neutral sentiment on the specified app by joining the appropriate tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS user_count, rating FROM user_attitudes WHERE attitude = 'neutral' AND app_name = 'HTC Weather' GROUP BY rating;",
            "SELECT COUNT(*) AS user_count, T1.Rating \nFROM playstore AS T1 \nJOIN user_reviews AS T2 ON T1.App = T2.App \nWHERE T1.App = 'HTC Weather' AND T2.Sentiment = 'Neutral'"
        ],
        "rule_sql": []
    },
    "601": {
        "db_id": "codebase_comments",
        "question": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd?",
        "ground_truth": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'",
        "amends": [
            "Do use `CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId)` instead of `AVG(processing_time)` to calculate the average with proper casting. Do join `Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId` instead of querying only the `solutions` table to properly relate repositories and solutions. Do filter on `T1.Url` instead of `repository_url` to reference the correct table column. Do remove the `files IS NOT NULL` condition instead of keeping it as it's unnecessary for the average calculation. The amended query now correctly calculates the average processing time by joining repository and solution tables and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(processing_time) FROM solutions WHERE repository_url = 'https://github.com/jeffdik/tachy.git' AND files IS NOT NULL;",
            "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) AS average_processing_time\nFROM Repo AS T1\nINNER JOIN Solution AS T2 ON T1.Id = T2.RepoId\nWHERE T1.Url = 'https://github.com/jeffdik/tachy.git'"
        ],
        "rule_sql": []
    },
    "8002": {
        "db_id": "university",
        "question": "What are the names of the criteria under Center for World University Rankings?",
        "ground_truth": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'",
        "amends": [
            "Do select `T2.criteria_name` from the `ranking_criteria` table instead of `name` from the `criteria` table. Do join `ranking_system AS T1` with `ranking_criteria AS T2` using `INNER JOIN` on `T1.id = T2.ranking_system_id` instead of querying only the `criteria` table. Do filter on `T1.system_name = 'Center for World University Rankings'` instead of `ranking_name = 'Center for World University Rankings'`. The amended query now correctly retrieves criteria names by joining the appropriate tables and filtering on the system name column, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM criteria WHERE ranking_name = 'Center for World University Rankings';",
            "SELECT T2.criteria_name \nFROM ranking_system AS T1 \nINNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id \nWHERE T1.system_name = 'Center for World University Rankings'"
        ],
        "rule_sql": []
    },
    "2413": {
        "db_id": "superstore",
        "question": "What is the total sales of furniture products in the east superstore in the year 2016.\n",
        "ground_truth": "SELECT SUM(T1.Sales) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE STRFTIME('%Y', T1.`Order Date`) = '2016' AND T2.Category = 'Furniture'",
        "amends": [
            "Do use `SUM(T1.Sales)` with explicit table alias instead of `SUM(sales)` without qualification. Do join `east_superstore AS T1` with `product AS T2` on `T1.Product ID = T2.Product ID` instead of querying a single table. Do filter by `T2.Category = 'Furniture'` instead of `product_category = 'furniture'` to reference the joined table. Do use `STRFTIME('%Y', T1.Order Date) = '2016'` for year extraction instead of `year = 2016` to properly handle date formatting. Do remove the explicit `region = 'east'` filter since the `east_superstore` table inherently contains only east region data. The amended query now correctly joins the regional sales data with product information and properly extracts the year from the date field to match the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(sales) FROM superstore_sales WHERE product_category = 'furniture' AND region = 'east' AND year = 2016",
            "SELECT SUM(T1.Sales) \nFROM east_superstore AS T1\nJOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\"\nWHERE T2.Category = 'Furniture'\nAND STRFTIME('%Y', T1.\"Order Date\") = '2016'"
        ],
        "rule_sql": []
    },
    "5552": {
        "db_id": "menu",
        "question": "What is the menu id of the menu sponsored by Occidental and Oriental Steamship Company with the highest number of pages?",
        "ground_truth": "SELECT T2.menu_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1",
        "amends": [
            "Do join `Menu AS T1` with `MenuPage AS T2` on `T1.id = T2.menu_id` instead of querying only the `menus` table. Do filter on `T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'` instead of `sponsor = 'Occidental and Oriental Steamship Company'` to match the exact sponsor name format. Do select `T2.menu_id` instead of `menu_id` to specify the table alias. Do add `GROUP BY T2.menu_id` instead of omitting grouping. Do order by `COUNT(T2.page_number) DESC` instead of `pages DESC` to count actual page numbers rather than using a potentially incorrect column. The amended query now correctly joins the necessary tables, uses proper grouping and counting, and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_id FROM menus WHERE sponsor = 'Occidental and Oriental Steamship Company' ORDER BY pages DESC LIMIT 1;",
            "SELECT T2.menu_id\nFROM Menu AS T1\nJOIN MenuPage AS T2 ON T1.id = T2.menu_id\nWHERE T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'\nGROUP BY T2.menu_id\nORDER BY COUNT(T2.page_number) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1934": {
        "db_id": "soccer_2016",
        "question": "Give me the match ID and date of the matches that were held in Kingsmead for three consecutive days.",
        "ground_truth": "SELECT T1.Match_Id, T1.Match_Date FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'Kingsmead'",
        "amends": [
            "Do reference tables `Match` and `Venue` with proper aliases `T1` and `T2` instead of using a single table `matches`. Do join on `T1.Venue_Id = T2.Venue_Id` instead of directly filtering on venue name. Do filter with `T2.Venue_Name = 'Kingsmead'` instead of `venue = 'Kingsmead'`. Do remove the subquery checking for dates with multiple matches instead of keeping the redundant self-join condition. Do use proper column names `Match_Id` and `Match_Date` instead of `match_id` and `date`. The amended query now correctly joins the normalized schema and eliminates the unnecessary subquery, matching the RIGHT_SQL's behavior.",
            "Do remove the subquery filter on `Match_Date IN` instead of keeping it, as the RIGHT_SQL correctly eliminates the unnecessary subquery that was redundantly filtering for venues already constrained by the main WHERE clause. Do remove the GROUP BY and HAVING clauses instead of including them, since the subquery elimination makes these aggregation operations obsolete. Do remove the ORDER BY clause instead of preserving it, as the RIGHT_SQL focuses solely on retrieving matches without sorting requirements. The amended query now matches RIGHT_SQL's behavior by directly filtering matches at the 'Kingsmead' venue without redundant subquery operations.",
            "Do remove the subquery filter on `Match_Date IN` instead of keeping it, as the RIGHT_SQL only needs to filter by venue name without the additional date grouping condition. Do remove the `ORDER BY T1.Match_Date` clause instead of including it, since the RIGHT_SQL does not require sorting. Do use explicit `INNER JOIN` syntax instead of just `JOIN` for clarity, though this is functionally equivalent. The amended query now correctly filters only for matches at the 'Kingsmead' venue without the unnecessary subquery and ordering, matching RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT match_id, date FROM matches WHERE venue = 'Kingsmead' AND date IN (SELECT date FROM matches WHERE venue = 'Kingsmead' GROUP BY date HAVING COUNT(*) >= 3) ORDER BY date;",
            "SELECT T1.Match_Id, T1.Match_Date\nFROM Match T1\nJOIN Venue T2 ON T1.Venue_Id = T2.Venue_Id\nWHERE T2.Venue_Name = 'Kingsmead'\nAND T1.Match_Date IN (\n    SELECT Match_Date\n    FROM Match M\n    JOIN Venue V ON M.Venue_Id = V.Venue_Id\n    WHERE V.Venue_Name = 'Kingsmead'\n    GROUP BY Match_Date\n    HAVING COUNT(*) >= 3\n)\nORDER BY T1.Match_Date, T1.Match_Id",
            "SELECT T1.Match_Id, T1.Match_Date\nFROM Match T1\nJOIN Venue T2 ON T1.Venue_Id = T2.Venue_Id\nWHERE T2.Venue_Name = 'Kingsmead'\nAND T1.Match_Date IN (\n    SELECT Match_Date\n    FROM Match M\n    JOIN Venue V ON M.Venue_Id = V.Venue_Id\n    WHERE V.Venue_Name = 'Kingsmead'\n    GROUP BY Match_Date\n    HAVING COUNT(*) >= 3\n)\nORDER BY T1.Match_Date;",
            "SELECT T1.Match_Id, T1.Match_Date\nFROM Match T1\nINNER JOIN Venue T2 ON T1.Venue_Id = T2.Venue_Id\nWHERE T2.Venue_Name = 'Kingsmead'"
        ],
        "rule_sql": []
    },
    "965": {
        "db_id": "cs_semester",
        "question": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1.",
        "ground_truth": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'",
        "amends": [
            "Do select `T3.name` from the `course` table instead of `course_name` from the `students` table. Do join `student AS T1` and `registration AS T2` on `T1.student_id = T2.student_id` instead of querying only the `students` table. Do add an additional join to `course AS T3` on `T2.course_id = T3.course_id` instead of omitting the course table relationship. Do filter on `T2.sat = 1` instead of `satisfaction = 1` and use `T1.type = 'RPG'` instead of `student_type = 'research postgraduate'` to match the correct column names and values. The amended query now correctly retrieves course names by joining through the registration relationship and using the proper column references and filter conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM students WHERE student_type = 'research postgraduate' AND satisfaction = 1;",
            "SELECT T3.name \nFROM student AS T1\nJOIN registration AS T2 ON T1.student_id = T2.student_id\nJOIN course AS T3 ON T2.course_id = T3.course_id\nWHERE T1.type = 'RPG' AND T2.sat = 1"
        ],
        "rule_sql": []
    },
    "6210": {
        "db_id": "food_inspection_2",
        "question": "Name the food businesses that passed the inspection in 2010.",
        "ground_truth": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T2.results = 'Pass' AND T1.facility_type = 'Liquor'",
        "amends": [
            "Do select `T1.dba_name` instead of `name` and add `DISTINCT` instead of omitting it. Do join `establishment AS T1` and `inspection AS T2` with `INNER JOIN` on `T1.license_no = T2.license_no` instead of querying only `food_businesses`. Do filter with `strftime('%Y', T2.inspection_date) = '2010'` instead of `inspection_year = 2010`, use `T2.results = 'Pass'` instead of `passed = 'yes'`, and add `T1.facility_type = 'Liquor'` instead of omitting it. The amended query now correctly identifies distinct liquor establishments that passed inspections in 2010 by properly joining related tables and using accurate date extraction and result filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM food_businesses WHERE inspection_year = 2010 AND passed = 'yes';",
            "SELECT DISTINCT T1.dba_name\nFROM establishment AS T1\nINNER JOIN inspection AS T2 ON T1.license_no = T2.license_no\nWHERE strftime('%Y', T2.inspection_date) = '2010'\nAND T2.results = 'Pass'\nAND T1.facility_type = 'Liquor';"
        ],
        "rule_sql": []
    },
    "3852": {
        "db_id": "public_review_platform",
        "question": "Among the Yelp_Businesses in Arizona, how many of them do not provide alcohol?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none' AND T3.state LIKE 'AZ'",
        "amends": [
            "Do select `COUNT(T2.business_id)` instead of `COUNT(*)` to count specific business occurrences. Do join `Attributes AS T1` and `Business_Attributes AS T2` with `INNER JOIN` on `T1.attribute_id = T2.attribute_id` instead of querying `Yelp_Businesses` directly. Do add another `INNER JOIN` to `Business AS T3` on `T2.business_id = T3.business_id` to access state information. Do filter on `T1.attribute_name LIKE 'Alcohol'` instead of assuming alcohol column exists, and use `T2.attribute_value LIKE 'none'` instead of direct column comparison. Do filter state with `T3.state LIKE 'AZ'` instead of `state = 'Arizona'` to match the abbreviated format. The amended query now correctly counts businesses with alcohol attribute set to 'none' in Arizona using the proper relational structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Businesses WHERE state = 'Arizona' AND alcohol = 'none';",
            "SELECT COUNT(T2.business_id) \nFROM Attributes AS T1\nINNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id\nINNER JOIN Business AS T3 ON T2.business_id = T3.business_id\nWHERE T1.attribute_name LIKE 'Alcohol' \nAND T2.attribute_value LIKE 'none' \nAND T3.state LIKE 'AZ'"
        ],
        "rule_sql": []
    },
    "9062": {
        "db_id": "bike_share_1",
        "question": "In which city's station is a bike borrowed on trip ID4069?",
        "ground_truth": "SELECT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069",
        "amends": [
            "Do use `T2.city` with table alias instead of just `city` without qualification. Do join `trip AS T1` and `station AS T2` instead of querying `stations` alone. Do use `INNER JOIN` on `T2.name = T1.start_station_name` instead of a subquery with `station_id = start_station_id`. Do filter on `T1.id = 4069` in the WHERE clause instead of using a subquery with `trip_id = 4069`. Do reference `trip` and `station` tables instead of `trips` and `stations`. The amended query now correctly joins tables and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM stations WHERE station_id = (SELECT start_station_id FROM trips WHERE trip_id = 4069)",
            "SELECT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069"
        ],
        "rule_sql": []
    },
    "2054": {
        "db_id": "music_tracker",
        "question": "How many times has the release \"city funk\" been downloaded?",
        "ground_truth": "SELECT totalSnatched FROM torrents WHERE groupName LIKE 'city funk'",
        "amends": [
            "Do select `totalSnatched` instead of `COUNT(*)` to retrieve the pre-calculated count value rather than performing a new aggregation. Do query from `torrents` table instead of `downloads` to access the correct data source containing the pre-aggregated statistics. Do use `WHERE groupName LIKE 'city funk'` instead of `WHERE release_name = 'city funk'` to match the appropriate column name and use pattern matching instead of exact equality. The amended query now correctly retrieves the pre-existing download count from the proper table rather than attempting to count records dynamically."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM downloads WHERE release_name = 'city funk';",
            "SELECT totalSnatched FROM torrents WHERE groupName LIKE 'city funk'"
        ],
        "rule_sql": []
    },
    "8153": {
        "db_id": "sales_in_weather",
        "question": "What is the ID of the item that sold the best on the day with the highest max temperature in store no.3 in 2012?",
        "ground_truth": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' AND tmax = ( SELECT MAX(tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' ) GROUP BY T1.item_nbr ORDER BY SUM(units) DESC LIMIT 1",
        "amends": [
            "Do select `item_nbr` from `sales_in_weather` instead of `item_id` from `sales`. Do use `INNER JOIN` with `relation` on `store_nbr` instead of querying `sales` alone. Do add `INNER JOIN` with `weather` on `station_nbr` instead of subquerying weather separately. Do filter with `store_nbr = 3` and `date LIKE '%2012%'` instead of `store_id = 3` and nested subquery for year 2012. Do use `tmax` instead of `max_temp` for temperature comparison. Do add `GROUP BY item_nbr` and order by `SUM(units)` instead of ordering by `quantity` without aggregation. Do keep the same subquery structure in the `WHERE` condition but with the corrected joins and filters instead of the original nested subqueries. The amended query now correctly joins related tables and aggregates sales data for the highest temperature day in 2012.",
            "Do remove the redundant `AND s.date = w.date` join condition instead of keeping it, as the date filtering is already handled in the WHERE clause. Do change the subquery to use `MAX(tmax)` instead of a complex subquery with `ORDER BY w2.tmax DESC LIMIT 1`, which achieves the same maximum temperature logic more efficiently. Do remove the unnecessary `w.date` comparison subquery entirely instead of using it to filter records, as the right query directly compares `tmax` values. Do add proper table aliases `T1`, `T2`, `T3` instead of using inconsistent naming conventions. Do fix the subquery structure to match the main query's joins and filters instead of having a different join pattern. The amended query now correctly identifies items sold during the hottest day of 2012 for store 3 by comparing against the maximum temperature directly.",
            "Do use `T1.item_nbr` instead of `s.item_nbr` in the SELECT list. Do add table aliases `AS T1`, `AS T2`, and `AS T3` instead of omitting them. Do remove the `s.date = w.date` join condition from the main query's INNER JOIN instead of keeping it. Do change the subquery to select from `sales_in_weather AS T1` instead of `weather w2` as the primary table. Do remove the `w2.date LIKE '%2012%'` filter from the subquery instead of keeping it, since the date filtering is already applied through the joined sales_in_weather table. Do add backticks around `date` column references instead of using unquoted identifiers. The amended query now correctly correlates the maximum temperature calculation with the same store and date filtering conditions as the main query, ensuring consistent results.",
            "Do reference `tmax` directly instead of qualifying it with `T3.tmax` in the main query's WHERE clause. Do use unqualified `tmax` in the subquery's SELECT MAX(tmax) instead of qualifying it with `T6.tmax`. Do reference `units` directly in the ORDER BY clause instead of qualifying it with `T1.units`. Do quote the `date` column with backticks instead of using it unquoted in both the main query and subquery. Do remove the table alias qualification from the subquery's MAX(tmax) expression. The amended query now correctly matches the RIGHT_SQL's behavior by using proper column references without unnecessary table qualifications."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT item_id FROM sales WHERE store_id = 3 AND date = (SELECT date FROM weather WHERE max_temp = (SELECT MAX(max_temp) FROM weather WHERE YEAR(date) = 2012)) ORDER BY quantity DESC LIMIT 1;",
            "SELECT s.item_nbr\nFROM sales_in_weather s\nINNER JOIN relation r ON s.store_nbr = r.store_nbr\nINNER JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.store_nbr = 3 \nAND s.date LIKE '%2012%'\nAND w.date = (\n    SELECT w2.date\n    FROM weather w2\n    INNER JOIN relation r2 ON w2.station_nbr = r2.station_nbr\n    WHERE r2.store_nbr = 3\n    AND w2.date LIKE '%2012%'\n    ORDER BY w2.tmax DESC\n    LIMIT 1\n)\nGROUP BY s.item_nbr\nORDER BY SUM(s.units) DESC\nLIMIT 1;",
            "SELECT s.item_nbr\nFROM sales_in_weather s\nINNER JOIN relation r ON s.store_nbr = r.store_nbr\nINNER JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.store_nbr = 3 \nAND s.date LIKE '%2012%'\nAND w.tmax = (\n    SELECT MAX(w2.tmax)\n    FROM weather w2\n    INNER JOIN relation r2 ON w2.station_nbr = r2.station_nbr\n    WHERE r2.store_nbr = 3\n    AND w2.date LIKE '%2012%'\n)\nGROUP BY s.item_nbr\nORDER BY SUM(s.units) DESC\nLIMIT 1;",
            "SELECT T1.item_nbr\nFROM sales_in_weather AS T1\nINNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr\nINNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr\nWHERE T1.store_nbr = 3\nAND T1.date LIKE '%2012%'\nAND T3.tmax = (\n    SELECT MAX(T4.tmax)\n    FROM sales_in_weather AS T4\n    INNER JOIN relation AS T5 ON T4.store_nbr = T5.store_nbr\n    INNER JOIN weather AS T6 ON T5.station_nbr = T6.station_nbr\n    WHERE T4.store_nbr = 3\n    AND T4.date LIKE '%2012%'\n)\nGROUP BY T1.item_nbr\nORDER BY SUM(T1.units) DESC\nLIMIT 1;",
            "SELECT T1.item_nbr\nFROM sales_in_weather AS T1\nINNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr\nINNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr\nWHERE T1.store_nbr = 3\n  AND T1.date LIKE '%2012%'\n  AND T3.tmax = (\n    SELECT MAX(tmax)\n    FROM weather AS T4\n    INNER JOIN relation AS T5 ON T4.station_nbr = T5.station_nbr\n    WHERE T5.store_nbr = 3\n      AND T4.date LIKE '%2012%'\n  )\nGROUP BY T1.item_nbr\nORDER BY SUM(T1.units) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8089": {
        "db_id": "university",
        "question": "What is the id of the criteria \"Citations Rank\"?",
        "ground_truth": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'",
        "amends": [
            "Do reference table `ranking_criteria` instead of `criteria`. Do filter on column `criteria_name` with value 'Citations Rank' instead of column `name` with value 'Citation Rank'. The amended query now correctly retrieves the ID from the appropriate table using the correct column name and exact criteria value."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM criteria WHERE name = 'Citation Rank';",
            "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank';"
        ],
        "rule_sql": []
    },
    "9367": {
        "db_id": "movie_3",
        "question": "Tell me the title of the film in which Sandra Kilmer is one of the actors.",
        "ground_truth": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'SANDRA' AND T2.last_name = 'KILMER'",
        "amends": [
            "Do use explicit table joins with `film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id` instead of querying a single `films` table. Do filter on separate `T2.first_name = 'SANDRA'` and `T2.last_name = 'KILMER'` conditions instead of a combined `actor = 'Sandra Kilmer'` filter. Do select `T3.title` with proper table qualification instead of just `title`. The amended query now correctly handles the normalized database schema with separate actor and film tables joined through a junction table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE actor = 'Sandra Kilmer';",
            "SELECT T3.title \nFROM film_actor AS T1 \nINNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id \nINNER JOIN film AS T3 ON T1.film_id = T3.film_id \nWHERE T2.first_name = 'SANDRA' AND T2.last_name = 'KILMER'"
        ],
        "rule_sql": []
    },
    "2188": {
        "db_id": "world_development_indicators",
        "question": "What country have its data estimated based on regression?",
        "ground_truth": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are based on regression.'",
        "amends": [
            "Do select `T1.ShortName` instead of `country` and add `DISTINCT` instead of omitting it. Do use `Country AS T1` and `CountryNotes AS T2` as sources instead of `data_sources` and change to `INNER JOIN` on `T1.CountryCode = T2.Countrycode` instead of no join. Do move the filter to `WHERE T2.Description = 'Estimates are based on regression.'` instead of `WHERE estimation_method = 'regression'` and reference the joined table instead of the original table. The amended query now correctly identifies countries with regression-based estimates by joining the appropriate tables and filtering on the description field."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM data_sources WHERE estimation_method = 'regression';",
            "SELECT DISTINCT T1.ShortName\nFROM Country AS T1\nINNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode\nWHERE T2.Description = 'Estimates are based on regression.'"
        ],
        "rule_sql": []
    },
    "4405": {
        "db_id": "student_loan",
        "question": "List out student IDs that have the longest absence duration from school.",
        "ground_truth": "SELECT name FROM longest_absense_from_school WHERE `month` = ( SELECT MAX(month) FROM longest_absense_from_school )",
        "amends": [
            "Do select `name` from the `longest_absense_from_school` table instead of `student_id` from `absences`. Do add a WHERE filter comparing `month` to a subquery that finds `MAX(month)` instead of ordering by `absence_duration` and limiting to one row. Do remove the ORDER BY and LIMIT clauses entirely instead of using them for filtering. The amended query now correctly retrieves the name from the most recent month's longest absence record instead of simply the student with the single longest absence duration overall."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM absences ORDER BY absence_duration DESC LIMIT 1;",
            "SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school)"
        ],
        "rule_sql": []
    },
    "4911": {
        "db_id": "legislator",
        "question": "How many female representatives are there in Michigan?",
        "ground_truth": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'MI' AND T1.gender_bio = 'F' GROUP BY T1.bioguide_id ) T",
        "amends": [
            "Do use a subquery with `current` and `current-terms` tables instead of querying only the `representatives` table. Do `INNER JOIN` on `T1.bioguide_id = T2.bioguide` instead of missing the join entirely. Do filter for `T2.type = 'rep'` instead of omitting this condition. Do use `T2.state = 'MI'` instead of `state = 'Michigan'` with the correct state abbreviation. Do filter for `T1.gender_bio = 'F'` instead of `gender = 'Male'` with the correct column name and value. Do `GROUP BY T1.bioguide_id` instead of counting all rows without grouping. Do count `T.bioguide_id` instead of `COUNT(*)` to count distinct representatives. The amended query now correctly counts female representatives from Michigan using the proper table relationships and filtering conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM representatives WHERE state = 'Michigan' AND gender = 'Male';",
            "SELECT COUNT(DISTINCT T1.bioguide_id) \nFROM current T1\nINNER JOIN \"current-terms\" T2 ON T1.bioguide_id = T2.bioguide\nWHERE T1.gender_bio = 'F' \nAND T2.state = 'MI' \nAND T2.type = 'rep'"
        ],
        "rule_sql": []
    },
    "742": {
        "db_id": "movie",
        "question": "What is the average rating of all the movies starring Tom Cruise?",
        "ground_truth": "SELECT AVG(T1.Rating) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'",
        "amends": [
            "Do join `movie AS T1` with `characters AS T2` on `T1.MovieID = T2.MovieID` and then with `actor AS T3` on `T3.ActorID = T2.ActorID` instead of querying only the `movies` table. Do filter on `T3.Name = 'Tom Cruise'` instead of filtering directly on `actor = 'Tom Cruise'` since the actor name is stored in a separate table. Do select `AVG(T1.Rating)` from the joined movie table instead of `AVG(rating)` from a single table. The amended query now correctly calculates average ratings for movies featuring Tom Cruise by properly joining the related tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM movies WHERE actor = 'Tom Cruise';",
            "SELECT AVG(T1.Rating) \nFROM movie AS T1 \nJOIN characters AS T2 ON T1.MovieID = T2.MovieID \nJOIN actor AS T3 ON T3.ActorID = T2.ActorID \nWHERE T3.Name = 'Tom Cruise'"
        ],
        "rule_sql": []
    },
    "5925": {
        "db_id": "books",
        "question": "What is the total price of all the books ordered by Lucas Wyldbore?",
        "ground_truth": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'",
        "amends": [
            "Do reference `SUM(T1.price)` from the `order_line` table instead of `SUM(price)` from `books`. Do join `cust_order AS T2` on `T2.order_id = T1.order_id` and `customer AS T3` on `T3.customer_id = T2.customer_id` instead of querying only the `books` table. Do filter on `T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'` instead of `customer_name = 'Lucas Wyldbore'` to properly match the customer's first and last name across normalized tables. The amended query now correctly aggregates order line prices for the specific customer by joining through the appropriate relationship tables."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price) FROM books WHERE customer_name = 'Lucas Wyldbore';",
            "SELECT SUM(T1.price) AS total_price\nFROM order_line AS T1\nJOIN cust_order AS T2 ON T2.order_id = T1.order_id\nJOIN customer AS T3 ON T3.customer_id = T2.customer_id\nWHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'"
        ],
        "rule_sql": []
    },
    "3589": {
        "db_id": "authors",
        "question": "How many papers were in the journal \"Iet Software/iee Proceedings - Software\"?",
        "ground_truth": "SELECT COUNT(T1.JournalId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Iet Software/iee Proceedings - Software'",
        "amends": [
            "Do join `Paper AS T1` with `Journal AS T2` on `T1.JournalId = T2.Id` instead of querying only the `papers` table without any join. Do filter on `T2.FullName = 'Iet Software/iee Proceedings - Software'` instead of filtering directly on the `journal` column. Do count `T1.JournalId` instead of counting all rows with `COUNT(*)`. The amended query now correctly matches the RIGHT_SQL's behavior by properly joining tables and using the appropriate journal name field for filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE journal = 'Iet Software/iee Proceedings - Software';",
            "SELECT COUNT(T1.JournalId) FROM Paper AS T1 JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Iet Software/iee Proceedings - Software'"
        ],
        "rule_sql": []
    },
    "9088": {
        "db_id": "bike_share_1",
        "question": "Count the number of subscribers who started their trips in Market at 4th.",
        "ground_truth": "SELECT COUNT(CASE WHEN subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th' THEN id END) FROM trip",
        "amends": [
            "Do use `COUNT(CASE WHEN subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th' THEN id END)` instead of `COUNT(*)` to count only specific subscriber trips. Do query from `trip` table instead of `subscribers` table to access the correct data source. Do filter with conditional logic in the aggregate function instead of a `WHERE` clause to properly handle the subscription type condition. Do reference `start_station_name` column instead of `start_station` to use the correct column name. The amended query now correctly counts subscriber trips from the specified station while matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM subscribers WHERE start_station = 'Market at 4th';",
            "SELECT COUNT(CASE WHEN subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th' THEN id END) AS subscriber_count FROM trip;"
        ],
        "rule_sql": []
    },
    "4252": {
        "db_id": "simpson_episodes",
        "question": "Which episode ids are rated 5 stars and have more than 100 votes?",
        "ground_truth": "SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;",
        "amends": [
            "Do reference table `Vote` instead of `ratings` in the FROM clause. The amended query now correctly selects from the Vote table to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_id FROM ratings WHERE stars = 5 AND votes > 100",
            "SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;"
        ],
        "rule_sql": []
    },
    "1979": {
        "db_id": "soccer_2016",
        "question": "Who was the captain-keeper of Rising Pune Supergiants?",
        "ground_truth": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id WHERE T3.Team_Name = 'Rising Pune Supergiants' AND T4.Role_Desc = 'CaptainKeeper' GROUP BY T1.Player_Name",
        "amends": [
            "Do use `T1.Player_Name` with proper table alias instead of `player_name` without qualification. Do join `Player AS T1` instead of querying only the `players` table. Do add `INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id` to connect player to match data instead of omitting this relationship. Do add `INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id` to properly reference team through match data instead of directly filtering on team. Do use `T3.Team_Name = 'Rising Pune Supergiants'` instead of `team = 'Rising Pune Supergiants'` to filter by team name through the proper relationship. Do add `INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id` to properly reference role through match data instead of directly filtering on role. Do use `T4.Role_Desc = 'CaptainKeeper'` instead of `role = 'batsman'` to filter by the correct role description. Do add `GROUP BY T1.Player_Name` to handle potential duplicates instead of omitting aggregation. The amended query now correctly identifies players who were CaptainKeepers for Rising Pune Supergiants through proper table relationships instead of incorrectly filtering on direct team and role attributes."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM players WHERE team = 'Rising Pune Supergiants' AND role = 'batsman';",
            "SELECT T1.Player_Name\nFROM Player AS T1\nINNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id\nINNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id\nINNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id\nWHERE T3.Team_Name = 'Rising Pune Supergiants'\nAND T4.Role_Desc = 'CaptainKeeper'\nGROUP BY T1.Player_Name"
        ],
        "rule_sql": []
    },
    "5924": {
        "db_id": "books",
        "question": "Among the books ordered by Lucas Wyldbore, how many of them are over 300 pages?",
        "ground_truth": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore' AND T1.num_pages > 300",
        "amends": [
            "Do use table aliases `T1`, `T2`, `T3`, `T4` instead of `b`, `o`, `c` for better clarity. Do join `book AS T1` instead of `books b` with corrected table name. Do add `order_line AS T2` join on `T1.book_id = T2.book_id` instead of directly joining orders. Do add `cust_order AS T3` join on `T3.order_id = T2.order_id` instead of missing this intermediate table. Do join `customer AS T4` on `T4.customer_id = T3.customer_id` instead of directly joining customers to orders. Do filter on `T1.num_pages > 300` instead of `b.pages > 300` with corrected column name. The amended query now correctly navigates the relational schema through proper table joins and matches RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books b JOIN orders o ON b.book_id = o.book_id JOIN customers c ON o.customer_id = c.customer_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore' AND b.pages > 300;",
            "SELECT COUNT(*) \nFROM book AS T1\nJOIN order_line AS T2 ON T1.book_id = T2.book_id\nJOIN cust_order AS T3 ON T3.order_id = T2.order_id\nJOIN customer AS T4 ON T4.customer_id = T3.customer_id\nWHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore'\nAND T1.num_pages > 300"
        ],
        "rule_sql": []
    },
    "484": {
        "db_id": "movies_4",
        "question": "What percentage of movies that came from Japan belong in the 'animation' genre?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Animation' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'Japan'",
        "amends": [
            "Do use explicit `CAST` to `REAL` for percentage calculation instead of implicit floating-point division. Do reference `movie_id` in both `COUNT` expressions instead of `COUNT(*)` to ensure accurate counting. Do join through multiple relationship tables (`movie_genres`, `production_country`, `genre`, `country`) with proper foreign key connections instead of directly joining a single `genres` table. Do use `INNER JOIN` consistently across all table relationships instead of mixing join types. Do filter on `country_name = 'Japan'` through the normalized `country` table instead of directly on `movies.country`. Do reference the correct column `genre_name = 'Animation'` with proper capitalization instead of `genre = 'animation'`. Do use table aliases (`T1`, `T2`, etc.) for clarity instead of simple table names. The amended query now correctly calculates the percentage of animated movies from Japan using proper database normalization and accurate counting logic.",
            "Do calculate the percentage by casting the count of animation movies divided by total movies instead of using DISTINCT counts which would incorrectly handle movies with multiple genres or countries. Do join from the `movie` table as the base instead of starting from `production_country` to ensure proper movie counting. Do use `INNER JOIN` between `movie` and `movie_genres` instead of directly joining `production_country` with `movie_genres` to maintain proper relationship integrity. Do use `ELSE NULL` in the CASE expression instead of omitting it for clarity in conditional counting. Do remove the unnecessary DISTINCT qualifiers from both counts instead of keeping them since movie_id counting should consider all entries. Do place the country filter condition `T5.country_name = 'Japan'` in the WHERE clause instead of keeping it in the same position but with corrected table references. The amended query now correctly calculates the percentage of animation movies among all Japanese movies by properly handling the many-to-many relationships between movies, genres, and countries."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN g.genre = 'animation' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM movies m\nJOIN genres g ON m.movie_id = g.movie_id\nWHERE m.country = 'Japan';",
            "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN g.genre_name = 'Animation' THEN mg.movie_id END) AS REAL) / \n     CAST(COUNT(DISTINCT pc.movie_id) AS REAL)) * 100.0 AS percentage\nFROM production_country pc\nINNER JOIN country c ON pc.country_id = c.country_id\nINNER JOIN movie_genres mg ON pc.movie_id = mg.movie_id\nINNER JOIN genre g ON mg.genre_id = g.genre_id\nWHERE c.country_name = 'Japan';",
            "SELECT \n    (CAST(COUNT(CASE WHEN T3.genre_name = 'Animation' THEN T1.movie_id ELSE NULL END) AS REAL) / \n     CAST(COUNT(T1.movie_id) AS REAL)) * 100.0 AS percentage\nFROM \n    movie T1\nINNER JOIN \n    movie_genres T2 ON T1.movie_id = T2.movie_id\nINNER JOIN \n    genre T3 ON T2.genre_id = T3.genre_id\nINNER JOIN \n    production_country T4 ON T1.movie_id = T4.movie_id\nINNER JOIN \n    country T5 ON T4.country_id = T5.country_id\nWHERE \n    T5.country_name = 'Japan'"
        ],
        "rule_sql": []
    },
    "370": {
        "db_id": "retail_complains",
        "question": "List the top five cities in terms of the number of 5-star ratings in 2016 reviews, in descending order.",
        "ground_truth": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5",
        "amends": [
            "Do select `T2.city` instead of `city, COUNT(*) as five_star_count` to retrieve only the city column without aggregation. Do join `district AS T2` instead of querying only the `reviews` table, using `INNER JOIN` on `T1.district_id = T2.district_id` instead of no join. Do filter with `T1.Stars = 5` instead of `rating = 5` to use the correct column name for star ratings. Do filter with `T1.Date LIKE '2016%'` instead of `year = 2016` to match dates starting with 2016 rather than a numeric year column. Do remove `GROUP BY city` and the count aggregation instead of grouping and counting five-star reviews. Do order by `T1.Date DESC` instead of `five_star_count ASC` to sort by review date descending rather than count ascending. Do keep `LIMIT 5` but remove the aggregation context. The amended query now correctly retrieves cities with 5-star reviews from 2016 ordered by date."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as five_star_count\nFROM reviews\nWHERE rating = 5 AND year = 2016\nGROUP BY city\nORDER BY five_star_count ASC\nLIMIT 5;",
            "SELECT T2.city\nFROM reviews AS T1\nINNER JOIN district AS T2 ON T1.district_id = T2.district_id\nWHERE T1.Stars = 5 AND T1.Date LIKE '2016%'\nORDER BY T1.Date DESC\nLIMIT 5"
        ],
        "rule_sql": []
    },
    "2138": {
        "db_id": "world_development_indicators",
        "question": "Please list the indicator names of Arab World whose values are higher than 50 in 1960.",
        "ground_truth": "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50",
        "amends": [
            "Do reference `IndicatorName` instead of `indicator_name` and use `Indicators` instead of `world_data` as the table source. Do filter on `CountryName` instead of `country` and use `Year` instead of `year` and `Value` instead of `value` in the WHERE conditions. The amended query now correctly references the schema elements and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT indicator_name FROM world_data WHERE country = 'Arab World' AND year = 1960 AND value > 50;",
            "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50"
        ],
        "rule_sql": []
    },
    "3474": {
        "db_id": "video_games",
        "question": "Calculate the total number of IDs for the game published by Capcom and Sony Computer Entertainment.",
        "ground_truth": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')",
        "amends": [
            "Do count `DISTINCT T1.game_id` instead of `COUNT(*)` to avoid duplicate game counts. Do join `game_publisher AS T1` with `publisher AS T2` on `T1.publisher_id = T2.id` instead of querying a single `games` table. Do filter with `T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')` instead of `publisher = 'Capcom' OR publisher = 'Sony Computer Entertainment'` to properly reference the joined publisher table. The amended query now correctly counts unique games from the proper publisher relationship instead of potentially miscounting due to schema structure issues."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE publisher = 'Capcom' OR publisher = 'Sony Computer Entertainment';",
            "SELECT COUNT(DISTINCT T1.game_id) \nFROM game_publisher AS T1\nJOIN publisher AS T2 ON T1.publisher_id = T2.id\nWHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')"
        ],
        "rule_sql": []
    },
    "186": {
        "db_id": "book_publishing_company",
        "question": "Who are the employees working for publisher not located in USA? State the employee's name and publisher name.",
        "ground_truth": "SELECT T1.fname, T1.lname, T2.pub_name FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country != 'USA'",
        "amends": [
            "Do select `fname` and `lname` instead of `name` from the employee table. Do use `INNER JOIN` with alias `T2` for publishers instead of `JOIN` with alias `p`. Do join on `pub_id` columns instead of `publisher_id` columns. Do filter for `country != 'USA'` instead of `country = 'USA'`. Do include table aliases `T1` and `T2` consistently throughout the query instead of mixed aliasing. The amended query now correctly retrieves employee names from non-US publishers instead of US publishers."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT e.name, p.name \nFROM employees e \nJOIN publishers p ON e.publisher_id = p.publisher_id \nWHERE p.country = 'USA';",
            "SELECT T1.fname, T1.lname, T2.pub_name FROM employee T1 INNER JOIN publishers T2 ON T1.pub_id = T2.pub_id WHERE T2.country != 'USA';"
        ],
        "rule_sql": []
    },
    "8396": {
        "db_id": "mondial_geo",
        "question": "How many percent of the total area of Russia is in Europe?",
        "ground_truth": "SELECT T2.Percentage FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Russia' AND T1.Name = 'Europe'",
        "amends": [
            "Do select `T2.Percentage` instead of calculating `(SUM(CASE WHEN continent = 'Europe' THEN area ELSE 0 END) / SUM(area)) * 100 AS europe_percentage`. Do join `continent AS T1` and `encompasses AS T2` with `INNER JOIN` on `T1.Name = T2.Continent` instead of querying a single table. Do add `INNER JOIN country AS T3` on `T3.Code = T2.Country` instead of omitting the country table. Do filter with `T3.Name = 'Russia' AND T1.Name = 'Europe'` instead of `WHERE name = 'Russia'`. Do remove the aggregation and percentage calculation instead of keeping them, as the percentage is directly available in the encompasses table. The amended query now correctly retrieves the pre-calculated percentage data from the appropriate schema tables instead of attempting to calculate it from incorrect assumptions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SUM(CASE WHEN continent = 'Europe' THEN area ELSE 0 END) / SUM(area)) * 100 AS europe_percentage FROM countries WHERE name = 'Russia';",
            "SELECT T2.Percentage \nFROM continent AS T1\nINNER JOIN encompasses AS T2 ON T1.Name = T2.Continent\nINNER JOIN country AS T3 ON T3.Code = T2.Country\nWHERE T3.Name = 'Russia' AND T1.Name = 'Europe'"
        ],
        "rule_sql": []
    },
    "7693": {
        "db_id": "hockey",
        "question": "Among the players who had 10 empty net goals in their career, who is the tallest? Show his full name.",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T2.playerID, T1.height HAVING SUM(T2.ENG) > 10 ORDER BY T1.height DESC LIMIT 1",
        "amends": [
            "Do select only `firstName` and `lastName` instead of including `height` in the SELECT list. Do use `INNER JOIN` with table `Goalies` instead of `JOIN` with `player_stats`. Do join on `playerID` to `playerID` instead of the same column relationship. Do add `GROUP BY` with `playerID` and `height` instead of omitting grouping. Do use `HAVING SUM(ENG) > 10` instead of `WHERE emptyNetGoals = 10` to filter aggregated data. Do remove the explicit `height` column from SELECT while keeping it in ORDER BY instead of selecting it directly. The amended query now correctly aggregates goalie statistics and filters based on the sum of empty net goals exceeding 10, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.firstName, p.lastName, p.height \nFROM players p\nJOIN player_stats ps ON p.playerID = ps.playerID\nWHERE ps.emptyNetGoals = 10\nORDER BY p.height DESC\nLIMIT 1;",
            "SELECT m.firstName, m.lastName\nFROM Master m\nINNER JOIN Goalies g ON m.playerID = g.playerID\nGROUP BY m.playerID, m.height\nHAVING SUM(CAST(g.ENG AS INTEGER)) > 10\nORDER BY CAST(m.height AS INTEGER) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3345": {
        "db_id": "video_games",
        "question": "How many role-playing games did Microsoft Game Studios publish?",
        "ground_truth": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Role-Playing' AND T1.publisher_name = 'Microsoft Game Studios'",
        "amends": [
            "Do use explicit table joins with `publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id` instead of querying the `games` table directly. Do add proper table aliases and join conditions including `INNER JOIN game AS T3 ON T2.game_id = T3.id` and `INNER JOIN genre AS T4 ON T3.genre_id = T4.id` instead of assuming denormalized schema. Do reference specific columns like `COUNT(T3.id)` instead of `COUNT(*)` for more precise counting. Do filter on `T4.genre_name = 'Role-Playing'` and `T1.publisher_name = 'Microsoft Game Studios'` through proper table relationships instead of direct column references that don't exist in the normalized schema. The amended query now correctly navigates the relational database structure to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE publisher = 'Microsoft Game Studios' AND genre = 'Role-Playing';",
            "SELECT COUNT(T3.id) \nFROM publisher AS T1 \nINNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id \nINNER JOIN game AS T3 ON T2.game_id = T3.id \nINNER JOIN genre AS T4 ON T3.genre_id = T4.id \nWHERE T4.genre_name = 'Role-Playing' \nAND T1.publisher_name = 'Microsoft Game Studios'"
        ],
        "rule_sql": []
    },
    "2359": {
        "db_id": "superstore",
        "question": "How many art products were ordered in 2013 in the east superstore?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.`Product ID`) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Sub-Category` = 'Art' AND T1.Region = 'East' AND STRFTIME('%Y', T1.`Order Date`) = '2013'",
        "amends": [
            "Do `COUNT(DISTINCT T1.Product ID)` instead of `COUNT(*)` to count unique products rather than all orders. Do join `east_superstore AS T1` with `product AS T2` on `T1.Product ID = T2.Product ID` instead of querying a single table. Do filter on `T2.Sub-Category = 'Art'` instead of `product_category = 'Art'` to use the correct column from the joined table. Do filter on `T1.Region = 'East'` instead of `region = 'East'` to use the aliased table reference. Do use `STRFTIME('%Y', T1.Order Date) = '2013'` instead of `year = 2013` to extract the year from the date column properly. The amended query now correctly counts distinct products from the East region in the Art sub-category for the year 2013."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE product_category = 'Art' AND year = 2013 AND region = 'East';",
            "SELECT COUNT(DISTINCT T1.\"Product ID\") \nFROM east_superstore AS T1\nJOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\"\nWHERE T2.\"Sub-Category\" = 'Art'\nAND T1.Region = 'East'\nAND STRFTIME('%Y', T1.\"Order Date\") = '2013'"
        ],
        "rule_sql": []
    },
    "3128": {
        "db_id": "cars",
        "question": "Which car is the cheapest? Provide its acceleration, number of cylinders, and producing year.",
        "ground_truth": "SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1",
        "amends": [
            "Do select `acceleration`, `cylinders`, and `model_year` instead of `car_name`, `acceleration`, `cylinders`, and `year`. Do use `data AS T1` INNER JOIN `production AS T2` ON `T1.ID = T2.ID` instead of a single table `cars`. Do add INNER JOIN `price AS T3` ON `T3.ID = T2.ID` instead of omitting price table. Do order by `T3.price ASC` instead of `price DESC`. The amended query now correctly joins multiple tables and retrieves the record with the lowest price instead of the highest."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT car_name, acceleration, cylinders, year FROM cars ORDER BY price DESC LIMIT 1;",
            "SELECT T1.acceleration, T1.cylinders, T2.model_year\nFROM data AS T1\nINNER JOIN production AS T2 ON T1.ID = T2.ID\nINNER JOIN price AS T3 ON T3.ID = T2.ID\nORDER BY T3.price ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8566": {
        "db_id": "software_company",
        "question": "Among the female customers with an level of education of 3 and below, list their income.",
        "ground_truth": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )",
        "amends": [
            "Do select `INCOME_K` instead of `income` and use table `Demog` instead of `customers`. Do add a subquery with `GEOID IN` instead of direct filtering and reference table `Customers` instead of `customers`. Do change the filter to `EDUCATIONNUM < 3` instead of `education_level > 3` and use `SEX = 'Female'` instead of `gender = 'male'`. Do remove the direct WHERE clause and instead filter through the subquery correlation on `GEOID`. The amended query now correctly selects income data from the demographic table for female customers with lower education levels, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT income FROM customers WHERE gender = 'male' AND education_level > 3;",
            "SELECT d.INCOME_K \nFROM Demog d\nWHERE d.GEOID IN (\n    SELECT c.GEOID \n    FROM Customers c \n    WHERE c.SEX = 'Female' AND c.EDUCATIONNUM < 3\n)"
        ],
        "rule_sql": []
    },
    "2326": {
        "db_id": "movielens",
        "question": "Which Crime film got the lowest average rating?",
        "ground_truth": "SELECT T2.movieid FROM u2base AS T2 INNER JOIN movies2directors AS T3 ON T2.movieid = T3.movieid WHERE T3.genre = 'Crime' GROUP BY T2.movieid ORDER BY AVG(T2.rating) LIMIT 1",
        "amends": [
            "Do select `T2.movieid` instead of `title` and `MIN(rating)`. Do use `FROM u2base AS T2 INNER JOIN movies2directors AS T3 ON T2.movieid = T3.movieid` instead of `FROM movies` with no join. Do move the genre filter to `T3.genre = 'Crime'` instead of applying it to a different table. Do group by `T2.movieid` instead of `title`. Do order by `AVG(T2.rating)` instead of `rating ASC`. The amended query now correctly joins the rating and genre tables, groups by movie ID, and orders by average rating to match the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, MIN(rating) FROM movies WHERE genre = 'Crime' GROUP BY title ORDER BY rating ASC LIMIT 1;",
            "SELECT T2.movieid\nFROM u2base AS T2\nINNER JOIN movies2directors AS T3 ON T2.movieid = T3.movieid\nWHERE T3.genre = 'Crime'\nGROUP BY T2.movieid\nORDER BY AVG(T2.rating) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1738": {
        "db_id": "restaurant",
        "question": "What percentage of restaurants are from the Bay Area?",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.region = 'bay area', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city",
        "amends": [
            "Do use `CAST(SUM(IIF(T1.region = 'bay area', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant)` instead of `COUNT(*) * 100.0 / (SELECT COUNT(*) FROM restaurants)` for the percentage calculation. Do join `geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city` instead of querying only `FROM restaurants`. Do filter by `T1.region = 'bay area'` instead of `city = 'Bay Area'` and reference the correct table aliases. Do remove the subquery in the denominator and instead use `COUNT(T2.id_restaurant)` from the joined table. The amended query now correctly calculates the percentage of restaurants in the bay area region using proper table relationships and avoids the subquery performance issue."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM restaurants)) AS percentage FROM restaurants WHERE city = 'Bay Area';",
            "SELECT CAST(SUM(IIF(T1.region = 'bay area', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) AS percentage\nFROM geographic AS T1\nINNER JOIN location AS T2 ON T1.city = T2.city;"
        ],
        "rule_sql": []
    },
    "5140": {
        "db_id": "address",
        "question": "List all the bad alias for zip codes in Puerto Rico.",
        "ground_truth": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'",
        "amends": [
            "Do select only `T1.bad_alias` instead of selecting all columns with `*`. Do use `avoid AS T1` and `zip_data AS T2` as source tables instead of only `zip_codes`. Do add an `INNER JOIN` on `T1.zip_code = T2.zip_code` instead of having no join. Do filter on `T2.state = 'PR'` instead of `state = 'Puerto Rico'`. Do remove the `alias IS NULL` filter instead of keeping it. The amended query now correctly joins the two tables and uses the appropriate state abbreviation while selecting only the relevant column from the avoid table."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM zip_codes WHERE state = 'Puerto Rico' AND alias IS NULL;",
            "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'"
        ],
        "rule_sql": []
    },
    "3586": {
        "db_id": "authors",
        "question": "What percentage of papers were preprinted after the year 2000?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN Year > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Id) FROM Paper",
        "amends": [
            "Do use `CAST(SUM(CASE WHEN Year > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Id)` instead of `COUNT(*) * 100.0 / (SELECT COUNT(*) FROM papers WHERE year > 2000)` for the percentage calculation. Do reference table `Paper` instead of `papers` and column `Id` instead of omitting it. Do use `Year` instead of `year` and remove the `preprinted = 1` filter instead of including it. Do eliminate the subquery for total count calculation instead of using a correlated subquery. The amended query now correctly calculates the percentage of papers from after 2000 without the unnecessary preprinted filter and matches the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM papers WHERE year > 2000)) AS percentage FROM papers WHERE year > 2000 AND preprinted = 1;",
            "SELECT CAST(SUM(CASE WHEN Year > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Id) AS Percentage FROM Paper;"
        ],
        "rule_sql": []
    },
    "4861": {
        "db_id": "legislator",
        "question": "Which historical female legislator that have their term ended on the 3rd of March 1791?",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.end = '1791-03-03' AND T1.gender_bio = 'F'",
        "amends": [
            "Do select `first_name` and `last_name` from the `historical` table instead of just `name` from `legislators`. Do use `INNER JOIN` with `historical-terms` on `bioguide_id = bioguide` instead of querying a single table. Do filter on `gender_bio = 'F'` instead of `gender = 'female'` and `end = '1791-03-03'` instead of `term_end = '1791-03-03'`. The amended query now correctly joins the historical and terms tables using the proper bioguide relationship and uses the appropriate column names for gender and term end date, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM legislators WHERE gender = 'female' AND term_end = '1791-03-03';",
            "SELECT h.first_name, h.last_name \nFROM historical h\nINNER JOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE h.gender_bio = 'F' AND ht.end = '1791-03-03'"
        ],
        "rule_sql": []
    },
    "8109": {
        "db_id": "university",
        "question": "Provide the country ID of Cyprus.",
        "ground_truth": "SELECT id FROM country WHERE country_name = 'Cyprus'",
        "amends": [
            "Do select `id` instead of `country_id` from the table. Do reference table `country` instead of `countries` as the source. The amended query now correctly retrieves the ID from the country table matching the specified country name."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_id FROM countries WHERE country_name = 'Cyprus';",
            "SELECT id FROM country WHERE country_name = 'Cyprus';"
        ],
        "rule_sql": []
    },
    "7460": {
        "db_id": "works_cycles",
        "question": "What is the cost and the product number of product with the id \"888\"?",
        "ground_truth": "SELECT T2.StandardCost, T2.ProductNumber FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 888",
        "amends": [
            "Do select `T2.StandardCost` and `T2.ProductNumber` instead of `cost` and `product_number`. Do join `ProductCostHistory AS T1` with `Product AS T2` using `INNER JOIN` on `T1.ProductID = T2.ProductID` instead of querying only the `products` table. Do filter on `T1.ProductID = 888` instead of `id = 888`. The amended query now correctly retrieves cost and product information by joining the appropriate tables and filtering on the correct product ID, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cost, product_number FROM products WHERE id = 888;",
            "SELECT T2.StandardCost, T2.ProductNumber \nFROM ProductCostHistory AS T1 \nINNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID \nWHERE T1.ProductID = 888"
        ],
        "rule_sql": []
    },
    "1668": {
        "db_id": "car_retails",
        "question": "How many countries from the USA have an In Process order status?",
        "ground_truth": "SELECT COUNT(t2.orderNumber) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'On Hold' AND t1.country = 'USA'",
        "amends": [
            "Do join `customers AS t1` with `orders AS t2` on `t1.customerNumber = t2.customerNumber` instead of querying only the `orders` table. Do filter on `t2.status = 'On Hold'` instead of `status = 'In Process'` and use `t1.country = 'USA'` instead of filtering orders directly by country. Do count `t2.orderNumber` instead of using `COUNT(*)` to count specific order numbers. The amended query now correctly counts orders from USA customers with 'On Hold' status instead of all USA orders with 'In Process' status, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE country = 'USA' AND status = 'In Process';",
            "SELECT COUNT(t2.orderNumber) \nFROM customers AS t1 \nJOIN orders AS t2 ON t1.customerNumber = t2.customerNumber \nWHERE t1.country = 'USA' AND t2.status = 'On Hold'"
        ],
        "rule_sql": []
    },
    "502": {
        "db_id": "movies_4",
        "question": "Among the zero-budget movie titles, which one has made the highest revenue?",
        "ground_truth": "SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1",
        "amends": [
            "Do remove `revenue` from the SELECT list instead of including it, and do use the correct table name `movie` instead of `movies` in the FROM clause. The amended query now matches RIGHT_SQL's behavior by selecting only the title column from the correct table while maintaining the same filtering and ordering logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, revenue FROM movies WHERE budget = 0 ORDER BY revenue DESC LIMIT 1;",
            "SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1466": {
        "db_id": "synthea",
        "question": "Give me the immunization codes and dates on which Ms. Jacquelyn Shanahan was immunized with influenza seasonal injectable preservative-free vaccine.",
        "ground_truth": "SELECT DISTINCT T2.CODE, T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'",
        "amends": [
            "Do use `DISTINCT` instead of omitting it. Do select `T2.CODE` and `T2.DATE` instead of `immunization_code` and `date`. Do join `patients AS T1` with `immunizations AS T2` on `T1.patient = T2.PATIENT` instead of querying only the immunizations table. Do filter on `T1.prefix = 'Ms.'`, `T1.first = 'Jacquelyn'`, and `T1.last = 'Shanahan'` instead of `patient_name = 'Jacquelyn Shanahan'`. Do filter on `T2.DESCRIPTION = 'Influenza seasonal injectable preservative free'` instead of `vaccine_type = 'influenza seasonal injectable preservative-free vaccine'`. The amended query now correctly joins patient and immunization data while using proper column references and filtering criteria.",
            "Do use `INNER JOIN` instead of `JOIN` to explicitly specify the join type. Do change the `DESCRIPTION` filter to `'Influenza  seasonal  injectable  preservative free'` with additional spaces instead of `'Influenza seasonal injectable preservative free'` to match the exact data format. The amended query now correctly filters for the precise immunization description while maintaining the same join logic and patient criteria."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT immunization_code, date FROM immunizations WHERE patient_name = 'Jacquelyn Shanahan' AND vaccine_type = 'influenza seasonal injectable preservative-free vaccine';",
            "SELECT DISTINCT T2.CODE, T2.DATE\nFROM patients AS T1\nJOIN immunizations AS T2 ON T1.patient = T2.PATIENT\nWHERE T1.prefix = 'Ms.'\nAND T1.first = 'Jacquelyn'\nAND T1.last = 'Shanahan'\nAND T2.DESCRIPTION = 'Influenza seasonal injectable preservative free'",
            "SELECT DISTINCT T2.CODE, T2.DATE\nFROM patients AS T1\nINNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT\nWHERE T1.prefix = 'Ms.'\nAND T1.first = 'Jacquelyn'\nAND T1.last = 'Shanahan'\nAND T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'"
        ],
        "rule_sql": []
    },
    "9143": {
        "db_id": "movie_3",
        "question": "Give the number of inactive customers.",
        "ground_truth": "SELECT COUNT(customer_id) FROM customer WHERE active = 0",
        "amends": [
            "Do reference table `customer` instead of `customers` in the FROM clause. Do count `customer_id` instead of using `COUNT(*)` to exclude NULL values. Do filter on `active = 0` instead of `status = 'active'` to use the correct column name and value representation for inactive customers. The amended query now correctly counts non-NULL customer IDs from the customer table where the active flag is set to 0, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE status = 'active';",
            "SELECT COUNT(customer_id) FROM customer WHERE active = 0;"
        ],
        "rule_sql": []
    },
    "9215": {
        "db_id": "movie_3",
        "question": "List the films' titles which were rented on 24th May,2005.",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE SUBSTR(T3.rental_date, 1, 10) = '2005-05-24'",
        "amends": [
            "Do add `T1.title` from the `film` table instead of just `title` without table specification. Do join `inventory AS T2` on `T1.film_id = T2.film_id` instead of omitting this table relationship. Do join `rental AS T3` on `T2.inventory_id = T3.inventory_id` instead of missing this connection to rental data. Do use `SUBSTR(T3.rental_date, 1, 10)` for date comparison instead of directly comparing `rental_date` without handling timestamp components. Do filter on `T3.rental_date` from the rental table instead of filtering on a non-existent `rental_date` column in the films table. The amended query now correctly retrieves film titles by properly joining through inventory to rental tables and handling date comparison appropriately."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE rental_date = '2005-05-24';",
            "SELECT DISTINCT T1.title \nFROM film AS T1\nJOIN inventory AS T2 ON T1.film_id = T2.film_id\nJOIN rental AS T3 ON T2.inventory_id = T3.inventory_id\nWHERE SUBSTR(T3.rental_date, 1, 10) = '2005-05-24'"
        ],
        "rule_sql": []
    },
    "3221": {
        "db_id": "donor",
        "question": "How to pay the donation of the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created?",
        "ground_truth": "SELECT T2.payment_method FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'",
        "amends": [
            "Do select only `T2.payment_method` instead of all columns with `*`. Do join `projects AS T1` with `donations AS T2` using `INNER JOIN` on `T1.projectid = T2.projectid` instead of querying only the `donations` table. Do filter on `T1.teacher_acctid` instead of `teacher_id` to correctly reference the teacher account identifier in the projects table rather than the donations table. The amended query now correctly retrieves payment methods for donations associated with the specified teacher account, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM donations WHERE teacher_id = '822b7b8768c17456fdce78b65abcc18e';",
            "SELECT T2.payment_method FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'"
        ],
        "rule_sql": []
    },
    "6918": {
        "db_id": "ice_hockey_draft",
        "question": "What is the name of the tallest player?",
        "ground_truth": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1",
        "amends": [
            "Do select `T1.PlayerName` instead of `name` and add `INNER JOIN` on `height_info AS T2` with predicate `T1.height = T2.height_id` instead of omitting the join entirely. Do order by `T2.height_in_cm DESC` instead of `height ASC` to sort by the actual height measurement rather than the ID reference. The amended query now correctly joins to access the height measurement data and sorts in descending order to find the tallest player, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players ORDER BY height ASC LIMIT 1;",
            "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "5750": {
        "db_id": "language_corpus",
        "question": "How many times on page number 44 does the word \"votives\" appear?",
        "ground_truth": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'votives' AND T2.pid = 44",
        "amends": [
            "Do select `T2.occurrences` instead of `COUNT(*)` to retrieve the actual count value rather than counting rows. Do use `words AS T1` and `pages_words AS T2` as FROM sources instead of just `pages` to access the proper word relationship tables. Do implement `INNER JOIN` on `T1.wid = T2.wid` instead of no join to properly connect words with their page occurrences. Do filter with `T1.word = 'votives'` instead of `content LIKE '%votives%'` to match the exact word rather than searching for substrings in content. Do filter with `T2.pid = 44` instead of `page_number = 44` to use the proper page identifier column. The amended query now correctly retrieves the specific occurrence count of the word 'votives' on page 44 from the normalized database structure.",
            "Do remove the `INNER JOIN pages AS p ON T2.pid = p.pid` clause and the `p.page = 44` condition instead of including them, and do use `T2.pid = 44` directly in the WHERE clause instead of joining to the pages table. Do keep the `SELECT T2.occurrences` column, `FROM words AS T1`, `INNER JOIN pages_words AS T2 ON T1.wid = T2.wid`, and `WHERE T1.word = 'votives'` unchanged. The amended query now correctly filters by page ID directly on the pages_words table instead of unnecessarily joining to the pages table, matching the right SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM pages WHERE page_number = 44 AND content LIKE '%votives%';",
            "SELECT T2.occurrences \nFROM words AS T1 \nINNER JOIN pages_words AS T2 ON T1.wid = T2.wid \nINNER JOIN pages AS p ON T2.pid = p.pid \nWHERE T1.word = 'votives' AND p.page = 44",
            "SELECT T2.occurrences \nFROM words AS T1 \nINNER JOIN pages_words AS T2 ON T1.wid = T2.wid \nWHERE T1.word = 'votives' AND T2.pid = 44"
        ],
        "rule_sql": []
    },
    "2129": {
        "db_id": "world_development_indicators",
        "question": "Please calculate the percentage of Sub-Saharan African countries which are in the Special trade system.",
        "ground_truth": "SELECT  CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE SystemOfTrade = 'Special trade system'",
        "amends": [
            "Do use `SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END)` instead of `COUNT(*)` with a WHERE filter to count specific rows. Do reference `CountryCode` in the denominator instead of a subquery for total count. Do use `CAST(... AS REAL)` instead of `* 100.0` for proper percentage calculation. Do reference table `Country` instead of `countries` and column `SystemOfTrade` instead of `trade_system`. Do remove the redundant WHERE clause filtering for 'Sub-Saharan Africa' since the CASE expression handles this logic internally. The amended query now correctly calculates the percentage of Sub-Saharan African countries with special trade systems by counting qualifying rows and dividing by the total country count.",
            "Do calculate the percentage by placing the `SystemOfTrade = 'Special trade system'` filter in the WHERE clause instead of using CASE statements in both numerator and denominator. Do use `COUNT(CountryCode)` as the denominator instead of another SUM with CASE for the same region filter. Do multiply the numerator by 100 directly instead of multiplying the entire division result by 100.0. Do remove the explicit division operation and percentage calculation structure, instead performing the calculation as a single expression. The amended query now correctly calculates the percentage of Sub-Saharan African countries using the special trade system by filtering first and using proper counting logic.",
            "Do calculate the percentage using `CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode)` instead of `(COUNT(CASE WHEN SystemOfTrade = 'Special trade system' THEN CountryCode END) * 100.0 / COUNT(CountryCode))`. Do move the `Region = 'Sub-Saharan Africa'` filter to the CASE expression instead of the WHERE clause. Do change the WHERE clause to filter on `SystemOfTrade = 'Special trade system'` instead of `Region = 'Sub-Saharan Africa'`. The amended query now correctly calculates the percentage of Sub-Saharan African countries among those with the special trade system, matching the RIGHT_SQL's behavior.",
            "Do use `SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END)` for counting instead of `COUNT(CASE WHEN Region = 'Sub-Saharan Africa' AND SystemOfTrade = 'Special trade system' THEN CountryCode END)`. Do calculate percentage using `* 100 / COUNT(CountryCode)` instead of `* 100.0 / COUNT(CASE WHEN Region = 'Sub-Saharan Africa' THEN CountryCode END)`. Do move the `SystemOfTrade = 'Special trade system'` filter to the `WHERE` clause instead of keeping it in the `CASE` expression. Do add explicit `CAST` to `REAL` instead of using decimal notation. Do remove the `Region = 'Sub-Saharan Africa'` condition from the `WHERE` clause instead of keeping it, as the filtering is now handled through conditional logic. The amended query now correctly calculates the percentage of Sub-Saharan African countries using the special trade system among all countries with that trade system."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM countries WHERE region = 'Sub-Saharan Africa')) AS percentage\nFROM countries \nWHERE region = 'Sub-Saharan Africa' AND trade_system = 'Special'",
            "SELECT \n    CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' AND SystemOfTrade = 'Special trade system' THEN 1 ELSE 0 END) AS REAL) \n    / \n    CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END) AS REAL) \n    * 100.0 \n    AS Percentage\nFROM Country;",
            "SELECT \n    (COUNT(CASE WHEN SystemOfTrade = 'Special trade system' THEN CountryCode END) * 100.0 / COUNT(CountryCode)) AS percentage\nFROM \n    Country\nWHERE \n    Region = 'Sub-Saharan Africa'",
            "SELECT \n    (COUNT(CASE WHEN Region = 'Sub-Saharan Africa' AND SystemOfTrade = 'Special trade system' THEN CountryCode END) * 100.0 / \n     COUNT(CASE WHEN Region = 'Sub-Saharan Africa' THEN CountryCode END)) AS percentage\nFROM Country\nWHERE Region = 'Sub-Saharan Africa';",
            "SELECT \n    CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) AS percentage\nFROM Country\nWHERE SystemOfTrade = 'Special trade system'"
        ],
        "rule_sql": []
    },
    "6108": {
        "db_id": "books",
        "question": "Among the books purchased by less than 1 dollar, what is the difference between the number of books with less than 500 pages and books with greater than 500 pages?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.num_pages < 500 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.num_pages > 500 THEN 1 ELSE 0 END) AS dif FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price < 1",
        "amends": [
            "Do use `SUM(CASE WHEN T1.num_pages < 500 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.num_pages > 500 THEN 1 ELSE 0 END)` instead of `ABS(COUNT(CASE WHEN pages < 500 THEN 1 END) - COUNT(CASE WHEN pages > 500 THEN 1 END))` to calculate the difference without absolute value. Do add `INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id` instead of querying only the `books` table. Do use `T1.num_pages` instead of `pages` and reference the table alias. Do apply the filter `T2.price < 1` on the joined table instead of `price < 1` on the original table. Do remove the `ABS` function to preserve the signed difference instead of taking the absolute value. The amended query now correctly joins the necessary tables and calculates the page count difference with proper table references and filtering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ABS(COUNT(CASE WHEN pages < 500 THEN 1 END) - COUNT(CASE WHEN pages > 500 THEN 1 END)) AS page_difference\nFROM books\nWHERE price < 1;",
            "SELECT \n    SUM(CASE WHEN T1.num_pages < 500 THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN T1.num_pages > 500 THEN 1 ELSE 0 END) AS page_count_difference\nFROM \n    book AS T1\nINNER JOIN \n    order_line AS T2 ON T1.book_id = T2.book_id\nWHERE \n    T2.price < 1"
        ],
        "rule_sql": []
    },
    "8243": {
        "db_id": "mondial_geo",
        "question": "Among the countries with the African ethnic group, how many of them has a population of over 10000000?",
        "ground_truth": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Area > 10000000",
        "amends": [
            "Do select `COUNT(T1.Name)` from the joined table instead of `COUNT(*)` from a single table. Do join `ethnicGroup AS T2` with `INNER JOIN` on `T1.Code = T2.Country` instead of querying a single table without joins. Do filter on `T2.Name = 'African'` instead of `ethnic_group = 'African'` to reference the correct table and column. Do filter on `T1.Area > 10000000` instead of `population > 10000000` to use the correct column name and table reference. The amended query now correctly counts African ethnic groups in countries with areas over 10,000,000, matching the intended behavior.",
            "Do filter on `T1.Area > 10000000` instead of `T1.Population > 10000000` in the WHERE clause, changing the population-based filter to an area-based filter while maintaining the same join structure and ethnic group condition. The amended query now correctly matches the RIGHT_SQL's behavior by using area instead of population for the size threshold."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM countries WHERE ethnic_group = 'African' AND population > 10000000;",
            "SELECT COUNT(T1.Name) \nFROM country AS T1\nINNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country\nWHERE T2.Name = 'African' AND T1.Population > 10000000",
            "SELECT COUNT(T1.Name) \nFROM country AS T1\nINNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country\nWHERE T2.Name = 'African' AND T1.Area > 10000000"
        ],
        "rule_sql": []
    },
    "6805": {
        "db_id": "retails",
        "question": "Please list any three customers with debt.",
        "ground_truth": "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3",
        "amends": [
            "Do select `c_name` instead of `*` and use table `customer` instead of `customers`. Do filter on `c_acctbal < 0` instead of `debt > 0` to identify accounts with negative balances rather than positive debt values. The amended query now correctly retrieves customer names with negative account balances, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM customers WHERE debt > 0 LIMIT 3;",
            "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3;"
        ],
        "rule_sql": []
    },
    "8129": {
        "db_id": "university",
        "question": "In what year does the Brown University score the highest?",
        "ground_truth": "SELECT T1.year FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' ORDER BY T1.score DESC LIMIT 1",
        "amends": [
            "Do select `T1.year` instead of `MAX(year)` to get the specific year value. Do join `university_ranking_year AS T1` with `university AS T2` on `T1.university_id = T2.id` instead of querying only the `universities` table. Do filter on `T2.university_name = 'Brown University'` instead of `name = 'Brown University'` to use the correct column reference. Do add `ORDER BY T1.score DESC LIMIT 1` instead of omitting ordering and limiting to get the year with the highest score rather than the maximum year value. The amended query now correctly retrieves the year when Brown University achieved its highest ranking score."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(year) FROM universities WHERE name = 'Brown University';",
            "SELECT T1.year \nFROM university_ranking_year AS T1\nJOIN university AS T2 ON T1.university_id = T2.id\nWHERE T2.university_name = 'Brown University'\nORDER BY T1.score DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4055": {
        "db_id": "public_review_platform",
        "question": "Indicate the business id and days which are opened from 8AM to 6PM.",
        "ground_truth": "SELECT DISTINCT day_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'",
        "amends": [
            "Do select `DISTINCT day_id` instead of `business_id, days` to return unique day identifiers rather than business IDs and day names. Do reference `day_id` from `Business_Hours` instead of `days` from `business_hours` to use the correct column name and table casing. Do filter on `opening_time = '8AM'` and `closing_time = '6PM'` instead of `open_time = '8AM'` and `close_time = '6PM'` to use the proper column names for opening and closing times. The amended query now correctly returns distinct day IDs matching the specified business hours."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, days FROM business_hours WHERE open_time = '8AM' AND close_time = '6PM';",
            "SELECT DISTINCT day_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM';"
        ],
        "rule_sql": []
    },
    "5949": {
        "db_id": "books",
        "question": "How many orders did Antonia Poltun return?",
        "ground_truth": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.status_value = 'Returned' AND T4.first_name = 'Antonia' AND T4.last_name = 'Poltun'",
        "amends": [
            "Do join multiple tables including `order_status AS T1`, `order_history AS T2`, `cust_order AS T3`, and `customer AS T4` instead of querying only the `orders` table. Do use `INNER JOIN` on `T1.status_id = T2.status_id` and subsequent joins to properly connect related tables instead of assuming all data exists in a single table. Do filter on `T1.status_value = 'Returned'` instead of `status = 'returned'` to use the correct status table and value. Do filter on `T4.first_name = 'Antonia' AND T4.last_name = 'Poltun'` instead of `customer_name = 'Antonia Poltun'` to properly reference the customer table with separate name fields. The amended query now correctly joins the necessary tables and uses proper field references to match the intended logic."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Antonia Poltun' AND status = 'returned';",
            "SELECT COUNT(*) \nFROM order_status AS T1\nINNER JOIN order_history AS T2 ON T1.status_id = T2.status_id\nINNER JOIN cust_order AS T3 ON T2.order_id = T3.order_id\nINNER JOIN customer AS T4 ON T3.customer_id = T4.customer_id\nWHERE T1.status_value = 'Returned'\nAND T4.first_name = 'Antonia' \nAND T4.last_name = 'Poltun'"
        ],
        "rule_sql": []
    },
    "7907": {
        "db_id": "world",
        "question": "What is the GNP of the country where district \"Entre Rios\" belongs?",
        "ground_truth": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Entre Rios' LIMIT 1",
        "amends": [
            "Do select `T2.GNP` from the joined table instead of `GNP` directly from country. Do add `City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code` instead of querying only the country table. Do filter on `T1.District = 'Entre Rios'` instead of `district = 'Entre Rios'` to reference the correct table's column. Do add `LIMIT 1` instead of omitting it to ensure only one result is returned. The amended query now correctly joins the City and Country tables to find GNP values for cities in the Entre Rios district, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT GNP FROM country WHERE district = 'Entre Rios';",
            "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Entre Rios' LIMIT 1"
        ],
        "rule_sql": []
    },
    "3928": {
        "db_id": "public_review_platform",
        "question": "Among the active businesses located at Mesa, AZ, list the category and attributes of business with a low review count.",
        "ground_truth": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.review_count = 'Low' AND T1.city = 'Mesa' AND T1.active = 'true' AND T1.state = 'AZ'",
        "amends": [
            "Do select `T3.category_name` instead of `category, attributes`. Do join `Business AS T1` instead of querying only `businesses`. Do add `INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id` and `INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id` instead of no joins. Do filter on `T1.review_count = 'Low'` instead of `review_count > 1000`. Do filter on `T1.active = 'true'` instead of `is_active = 1`. Do filter on `T1.city = 'Mesa'` and `T1.state = 'AZ'` instead of `city = 'Mesa' AND state = 'AZ'`. The amended query now correctly joins related tables and uses appropriate string comparisons for boolean and categorical values."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, attributes FROM businesses WHERE city = 'Mesa' AND state = 'AZ' AND is_active = 1 AND review_count > 1000;",
            "SELECT T3.category_name\nFROM Business AS T1\nINNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id\nINNER JOIN Categories AS T3 ON T2.category_id = T3.category_id\nWHERE T1.active = 'true'\nAND T1.city = 'Mesa'\nAND T1.state = 'AZ'\nAND T1.review_count = 'Low'"
        ],
        "rule_sql": []
    },
    "9102": {
        "db_id": "bike_share_1",
        "question": "Calculate the average duration travelled by subscribers that both started and ended their trip in Mountain View City Hall and indicate the date when the station was first installed.",
        "ground_truth": "SELECT AVG(T1.duration), T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = 'Mountain View City Hall' AND T1.subscription_type = 'Subscriber' AND T1.end_station_name = 'Mountain View City Hall'",
        "amends": [
            "Do use table aliases `T1` and `T2` instead of `t` and `s`. Do reference `T1.duration` and `T2.installation_date` instead of `duration` and `MIN(installation_date)`. Do join on `T2.name = T1.start_station_name` instead of `t.start_station_id = s.station_id`. Do filter with `T1.start_station_name = 'Mountain View City Hall'` instead of `s.city = 'Mountain View City Hall'`. Do add `T1.subscription_type = 'Subscriber'` instead of omitting it. Do filter with `T1.end_station_name = 'Mountain View City Hall'` instead of using a subquery with `end_station_id IN`. Do remove the `AVG` alias and `MIN` function instead of keeping them. The amended query now correctly filters by station names directly and includes the subscription type constraint."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(duration) as avg_duration, MIN(installation_date) as first_installation_date\nFROM trips t\nJOIN stations s ON t.start_station_id = s.station_id\nWHERE s.city = 'Mountain View City Hall'\nAND t.end_station_id IN (SELECT station_id FROM stations WHERE city = 'Mountain View City Hall');",
            "SELECT AVG(T1.duration) AS average_duration, T2.installation_date\nFROM trip T1\nJOIN station T2 ON T2.name = T1.start_station_name\nWHERE T1.start_station_name = 'Mountain View City Hall'\nAND T1.end_station_name = 'Mountain View City Hall'\nAND T1.subscription_type = 'Subscriber'"
        ],
        "rule_sql": []
    },
    "1786": {
        "db_id": "restaurant",
        "question": "List the full address of all the American restaurants with a review of 4 or more?",
        "ground_truth": "SELECT T1.street_num, T1.street_name, T1.city FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.review >= 4",
        "amends": [
            "Do select `T1.street_num`, `T1.street_name`, and `T1.city` instead of just `address`. Do join `location AS T1` with `generalinfo AS T2` on `T1.city = T2.city` instead of querying only the `restaurants` table. Do filter on `T2.review >= 4` instead of `review >= 4` and remove the `cuisine = 'American'` condition instead of keeping it. The amended query now correctly retrieves location details from the joined tables based on review ratings."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM restaurants WHERE cuisine = 'American' AND review >= 4;",
            "SELECT T1.street_num, T1.street_name, T1.city\nFROM location AS T1\nJOIN generalinfo AS T2 ON T1.city = T2.city\nWHERE T2.review >= 4"
        ],
        "rule_sql": []
    },
    "3421": {
        "db_id": "video_games",
        "question": "What is the genre of the game '2 Games in 1: Sonic Advance & ChuChu Rocket!'?",
        "ground_truth": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!'",
        "amends": [
            "Do select `T2.genre_name` from the genre table instead of `genre` from the games table. Do join `game AS T1` with `genre AS T2` on `T1.genre_id = T2.id` instead of querying a single table. Do filter on `T1.game_name` instead of `title` to match the correct column name. The amended query now properly retrieves genre information through the appropriate table relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM games WHERE title = '2 Games in 1: Sonic Advance & ChuChu Rocket!';",
            "SELECT T2.genre_name \nFROM game AS T1 \nJOIN genre AS T2 ON T1.genre_id = T2.id \nWHERE T1.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!'"
        ],
        "rule_sql": []
    },
    "8894": {
        "db_id": "cookbook",
        "question": "What are the names of the top 5 recipes that are best for wound healing?",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 5",
        "amends": [
            "Do select `T1.title` from the `Recipe` table instead of `name` from `recipes`. Do join `Nutrition AS T2` using `INNER JOIN` with predicate `T1.recipe_id = T2.recipe_id` instead of omitting any join. Do order by `T2.vitamin_c DESC` instead of `wound_healing_score DESC`. The amended query now correctly retrieves recipe titles ordered by vitamin C content from joined nutrition data instead of attempting to use a non-existent wound_healing_score column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM recipes ORDER BY wound_healing_score DESC LIMIT 5;",
            "SELECT T1.title \nFROM Recipe AS T1\nINNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id\nORDER BY T2.vitamin_c DESC\nLIMIT 5"
        ],
        "rule_sql": []
    },
    "2968": {
        "db_id": "shakespeare",
        "question": "How many comedies did Shakespeare create?",
        "ground_truth": "SELECT COUNT(id) FROM works WHERE GenreType = 'Comedy'",
        "amends": [
            "Do reference the `works` table instead of `plays`, and use column `GenreType` instead of `genre` for filtering. Do filter for `'Comedy'` instead of `'comedy'` to match the correct case sensitivity. Do count the `id` column instead of using `COUNT(*)` to exclude null values. Do remove the `author = 'Shakespeare'` filter instead of keeping it, as the right query does not include this condition. The amended query now correctly counts comedy works from the works table without unnecessary filters."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM plays WHERE author = 'Shakespeare' AND genre = 'comedy';",
            "SELECT COUNT(id) FROM works WHERE GenreType = 'Comedy'"
        ],
        "rule_sql": []
    },
    "8742": {
        "db_id": "chicago_crime",
        "question": "What was the major type of crime that happened in the Rogers Park community area?",
        "ground_truth": "SELECT T1.fbi_code_no, T1.title FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Rogers Park' GROUP BY T1.fbi_code_no, T1.title",
        "amends": [
            "Do select `T1.fbi_code_no` and `T1.title` instead of `crime_type`. Do join `FBI_Code AS T1` and `Crime AS T2` with `INNER JOIN` on `T1.fbi_code_no = T2.fbi_code_no` instead of missing these tables entirely. Do add another `INNER JOIN` to `Community_Area AS T3` on `T2.community_area_no = T3.community_area_no` instead of omitting this relationship. Do filter on `T3.community_area_name = 'Rogers Park'` instead of `community_area = 'Rogers Park'`. Do add `GROUP BY T1.fbi_code_no, T1.title` instead of omitting grouping. Do remove `ORDER BY crime_count DESC` and `LIMIT 1` instead of keeping them. The amended query now correctly retrieves FBI code information through proper table relationships instead of attempting to use non-existent columns, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT crime_type FROM crimes WHERE community_area = 'Rogers Park' ORDER BY crime_count DESC LIMIT 1;",
            "SELECT T1.fbi_code_no, T1.title\nFROM FBI_Code AS T1\nINNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no\nINNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no\nWHERE T3.community_area_name = 'Rogers Park'\nGROUP BY T1.fbi_code_no, T1.title"
        ],
        "rule_sql": []
    },
    "3151": {
        "db_id": "donor",
        "question": "Name all the project titles whereby project materials are intended mainly for literary.",
        "ground_truth": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Literacy'",
        "amends": [
            "Do select `T1.title` from the `essays` table instead of `title` from the `projects` table. Do add an `INNER JOIN` between `essays AS T1` and `projects AS T2` on `T1.projectid = T2.projectid` instead of querying only the `projects` table. Do change the WHERE filter to `T2.primary_focus_subject = 'Literacy'` instead of using `materials LIKE '%literary%'` for pattern matching. The amended query now correctly joins the essays and projects tables and uses an exact match filter on the primary focus subject rather than a partial string match on materials, ensuring it returns the intended results matching RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM projects WHERE materials LIKE '%literary%';",
            "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Literacy'"
        ],
        "rule_sql": []
    },
    "3171": {
        "db_id": "donor",
        "question": "What is the latitude and longitude of the school where the teacher who wrote \"Smile for the Camera!!!\" teaches?",
        "ground_truth": "SELECT T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title = 'Smile for the Camera!!!'",
        "amends": [
            "Do select `T1.school_latitude` and `T1.school_longitude` instead of `latitude` and `longitude`. Do use `FROM projects AS T1` instead of `FROM schools`. Do add `INNER JOIN essays AS T2 ON T1.projectid = T2.projectid` instead of omitting the join. Do change the WHERE filter to `T2.title = 'Smile for the Camera!!!'` instead of using a subquery with `teacher_id IN` and `book_title = 'Smile for the Camera!!!'`. Do remove the subquery entirely instead of keeping it. The amended query now correctly joins the projects and essays tables to filter by essay title rather than using an incorrect teacher-book relationship."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM schools WHERE teacher_id IN (SELECT teacher_id FROM teachers WHERE book_title = 'Smile for the Camera!!!')",
            "SELECT T1.school_latitude, T1.school_longitude\nFROM projects AS T1\nINNER JOIN essays AS T2 ON T1.projectid = T2.projectid\nWHERE T2.title = 'Smile for the Camera!!!'"
        ],
        "rule_sql": []
    },
    "3461": {
        "db_id": "video_games",
        "question": "What is the percentage of games that were released on PS4 in 2014 among all platforms?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id WHERE T1.release_year = 2014",
        "amends": [
            "Do use explicit table joins with `INNER JOIN platform AS T2 ON T1.platform_id = T2.id` and `INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id` instead of querying a single table. Do calculate percentage using `CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id)` instead of `COUNT(*) * 100.0 / (SELECT COUNT(*) FROM games WHERE year = 2014)`. Do filter on `T1.release_year = 2014` instead of `year = 2014` and use `T2.platform_name = 'PS4'` instead of `platform = 'PS4'`. Do remove the subquery and alias instead of including them. The amended query now correctly calculates the percentage of PS4 games among all games released in 2014 using proper table relationships and aggregation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM games WHERE year = 2014)) AS percentage FROM games WHERE platform = 'PS4' AND year = 2014;",
            "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) AS percentage\nFROM game_platform AS T1\nINNER JOIN platform AS T2 ON T1.platform_id = T2.id\nINNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id\nWHERE T1.release_year = 2014"
        ],
        "rule_sql": []
    },
    "2979": {
        "db_id": "shakespeare",
        "question": "Which Shakespeare story with character ID 324 has description of 'this friend of Caesar'?",
        "ground_truth": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'",
        "amends": [
            "Do use `T1.Title` from the `works` table instead of `title` from a non-existent `stories` table. Do join multiple tables with `INNER JOIN chapters AS T2 ON T1.id = T2.work_id`, `INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id`, and `INNER JOIN characters AS T4 ON T3.character_id = T4.id` instead of querying a single table. Do filter on `T2.id = '324'` instead of `character_id = 324` to reference the chapter ID rather than character ID. Do use `T2.Description = 'friend to Caesar'` instead of `description = 'this friend of Caesar'` with corrected table reference and text value. The amended query now correctly joins the relational hierarchy and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM stories WHERE character_id = 324 AND description = 'this friend of Caesar';",
            "SELECT T1.Title \nFROM works AS T1\nINNER JOIN chapters AS T2 ON T1.id = T2.work_id\nINNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id\nINNER JOIN characters AS T4 ON T3.character_id = T4.id\nWHERE T2.id = '324' AND T2.Description = 'friend to Caesar'"
        ],
        "rule_sql": []
    },
    "5450": {
        "db_id": "sales",
        "question": "How many \"Mountain-500 Black 42\" were sold in total?",
        "ground_truth": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain-500 Black, 42'",
        "amends": [
            "Do join `Products AS T1` and `Sales AS T2` with `INNER JOIN` on `T1.ProductID = T2.ProductID` instead of querying only the `sales` table. Do filter on `T1.Name = 'Mountain-500 Black, 42'` instead of `product_name = 'Mountain-500 Black 42'` to use the correct table and column name with proper comma placement. Do aggregate with `SUM(T2.Quantity)` instead of `COUNT(*)` to calculate total quantity sold rather than counting rows. The amended query now correctly joins product and sales data, uses proper filtering on the product name column, and calculates the sum of quantities sold for the specified product."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE product_name = 'Mountain-500 Black 42';",
            "SELECT SUM(T2.Quantity) AS TotalSold\nFROM Products AS T1\nINNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID\nWHERE T1.Name = 'Mountain-500 Black, 42'"
        ],
        "rule_sql": []
    },
    "4684": {
        "db_id": "disney",
        "question": "List the PG-13 romantic comedy movie titles and their release dates.",
        "ground_truth": "SELECT movie_title, release_date FROM movies_total_gross WHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy'",
        "amends": [
            "Do select `movie_title` instead of `title` and use table `movies_total_gross` instead of `movies`. Do filter on `MPAA_rating` instead of `rating` and use exact case match `'Romantic Comedy'` instead of `'romantic comedy'` for the genre condition. The amended query now correctly references the appropriate table and column names with proper case sensitivity to match the intended data structure."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, release_date FROM movies WHERE genre = 'romantic comedy' AND rating = 'PG-13';",
            "SELECT movie_title, release_date FROM movies_total_gross WHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy';"
        ],
        "rule_sql": []
    },
    "3064": {
        "db_id": "cars",
        "question": "Among the cars over 3000lbs, how many of them cost less than $30000?",
        "ground_truth": "SELECT COUNT(T1.car_name) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.weight > 3000 AND T2.price < 30000",
        "amends": [
            "Do select `COUNT(T1.car_name)` instead of `COUNT(*)` to count specific non-null values. Do add `FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID` instead of querying only the `cars` table to properly join related data from two tables. Do change the price filter to `T2.price < 30000` instead of `price > 30000` to correctly identify cars priced below the threshold. Do qualify columns with table aliases as `T1.weight` and `T2.price` instead of unqualified column names to avoid ambiguity in the joined context. The amended query now correctly counts car names from joined tables with the proper filtering conditions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cars WHERE weight > 3000 AND price > 30000;",
            "SELECT COUNT(T1.car_name) \nFROM data AS T1 \nINNER JOIN price AS T2 ON T1.ID = T2.ID \nWHERE T1.weight > 3000 AND T2.price < 30000"
        ],
        "rule_sql": []
    },
    "3568": {
        "db_id": "authors",
        "question": "List the names of all authors affiliated with Birkbeck University of London.",
        "ground_truth": "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London'",
        "amends": [
            "Do reference the `Name` column instead of `name` and use the `Affiliation` column filter instead of `university` to match the correct table schema. Do query from the `Author` table instead of `authors` to use the correct table name. The amended query now correctly selects author names from the Author table filtered by Birkbeck University of London affiliation."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM authors WHERE university = 'Birkbeck University of London';",
            "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London';"
        ],
        "rule_sql": []
    },
    "1322": {
        "db_id": "law_episode",
        "question": "Who was the Law and Order series writer who also won the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years?",
        "ground_truth": "SELECT t3.name FROM ( SELECT DISTINCT T2.year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T2.series = 'Law and Order' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2",
        "amends": [
            "Do use a subquery with `DISTINCT` years and `row_number()` window function partitioned by name and ordered by year instead of querying a single table. Do join `Person` and `Award` tables on `person_id` instead of selecting from a single writers table. Do filter for specific award criteria including `award='Television'`, `award_category='Silver Gavel Award'`, `series='Law and Order'`, `result='Winner'`, and organization details instead of simple `awards_won` and `consecutive_years` conditions. Do calculate consecutive years using `COUNT(years - row_number)` in the `HAVING` clause instead of a static `consecutive_years=2` filter. Do group by name and use `HAVING COUNT(...) >= 2` instead of a fixed equality check. The amended query now correctly identifies writers who won the Television Silver Gavel Award in consecutive years by tracking year sequences rather than relying on pre-calculated consecutive_years data.",
            "Do remove the unnecessary `JOIN` with `Credit` table and its conditions instead of including them. Do move the `category = 'writer'` filter from the `WHERE` clause instead of keeping it, as the right query doesn't require this credit-based filtering. Do change the `SELECT` list to include only `year`, `name`, and the row number instead of selecting additional columns. Do use `DISTINCT` on the year and name combination instead of omitting it to prevent duplicate rows. Do rename the row number column to `rm` instead of `rn` for consistency with the right query. Do simplify the `HAVING` clause to use `COUNT(t3.years - t3.rm) >= 2` instead of the more complex `COUNT(DISTINCT year - rn) >= 2 AND COUNT(DISTINCT year) >= 2` condition. Do restructure the query to use a subquery with alias `T3` instead of a CTE named `AwardYears`. The amended query now correctly identifies people with consecutive award years without the unnecessary credit join and with proper deduplication."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT writer_name FROM law_and_order_writers WHERE awards_won = 'Television Silver Gavel Award' AND consecutive_years = 2;",
            "WITH AwardYears AS (\n    SELECT \n        p.name,\n        a.year,\n        ROW_NUMBER() OVER (PARTITION BY p.name ORDER BY a.year) as rn\n    FROM \n        Person p\n    JOIN \n        Award a ON p.person_id = a.person_id\n    JOIN \n        Credit c ON p.person_id = c.person_id AND a.episode_id = c.episode_id\n    WHERE \n        a.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'\n        AND a.award_category = 'Silver Gavel Award'\n        AND a.award = 'Television'\n        AND a.series = 'Law and Order'\n        AND a.result = 'Winner'\n        AND c.category = 'writer'\n)\nSELECT \n    name\nFROM \n    AwardYears\nGROUP BY \n    name\nHAVING \n    COUNT(DISTINCT year - rn) >= 2\n    AND COUNT(DISTINCT year) >= 2",
            "SELECT name\nFROM (\n    SELECT DISTINCT year, name, year - ROW_NUMBER() OVER (PARTITION BY name ORDER BY year) AS rm\n    FROM Award\n    JOIN Person ON Award.person_id = Person.person_id\n    WHERE organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'\n    AND award_category = 'Silver Gavel Award'\n    AND award = 'Television'\n    AND series = 'Law and Order'\n    AND result = 'Winner'\n) t3\nGROUP BY name\nHAVING COUNT(t3.year - t3.rm) >= 2"
        ],
        "rule_sql": []
    },
    "4424": {
        "db_id": "student_loan",
        "question": "How many students who have never been absent from school?",
        "ground_truth": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0",
        "amends": [
            "Do select `COUNT(name)` instead of `COUNT(*)` to count non-null names rather than all rows. Do query from `longest_absense_from_school` instead of `students` to use the correct table source. Do filter on `month = 0` instead of `absences = 0` to apply the proper condition logic. The amended query now correctly counts student names with zero months of absence from the appropriate dataset."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE absences = 0;",
            "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0;"
        ],
        "rule_sql": []
    },
    "8502": {
        "db_id": "mondial_geo",
        "question": "What year saw the greatest number of organizations created on the European continent?",
        "ground_truth": "SELECT STRFTIME('%Y', T4.Established) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN organization AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Europe' GROUP BY STRFTIME('%Y', T4.Established) ORDER BY COUNT(T4.Name) DESC LIMIT 1",
        "amends": [
            "Do use `STRFTIME('%Y', T4.Established)` for year extraction instead of `YEAR(created_date)`. Do join multiple tables including `continent AS T1`, `encompasses AS T2`, `country AS T3`, and `organization AS T4` instead of querying only the `organizations` table. Do use `INNER JOIN` with proper join conditions `T1.Name = T2.Continent`, `T2.Country = T3.Code`, and `T4.Country = T3.Code` instead of no joins. Do filter on `T1.Name = 'Europe'` instead of `continent = 'Europe'`. Do group by `STRFTIME('%Y', T4.Established)` instead of `YEAR(created_date)`. Do order by `COUNT(T4.Name)` instead of `org_count`. The amended query now correctly joins the necessary tables to establish the proper relationship between continents, countries, and organizations, ensuring accurate filtering and counting of European organizations by establishment year.",
            "Do remove the alias `year` from the SELECT list instead of keeping it. Do remove the alias `organization_count` from the COUNT expression instead of keeping it. The amended query now matches RIGHT_SQL's behavior by returning only the year value without column aliases."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT YEAR(created_date) AS creation_year, COUNT(*) AS org_count\nFROM organizations\nWHERE continent = 'Europe'\nGROUP BY YEAR(created_date)\nORDER BY org_count DESC\nLIMIT 1;",
            "SELECT STRFTIME('%Y', T4.Established) AS year, COUNT(T4.Name) AS organization_count\nFROM continent AS T1\nINNER JOIN encompasses AS T2 ON T1.Name = T2.Continent\nINNER JOIN country AS T3 ON T2.Country = T3.Code\nINNER JOIN organization AS T4 ON T4.Country = T3.Code\nWHERE T1.Name = 'Europe'\nGROUP BY STRFTIME('%Y', T4.Established)\nORDER BY COUNT(T4.Name) DESC\nLIMIT 1;",
            "SELECT STRFTIME('%Y', T4.Established) \nFROM continent AS T1\nINNER JOIN encompasses AS T2 ON T1.Name = T2.Continent\nINNER JOIN country AS T3 ON T2.Country = T3.Code\nINNER JOIN organization AS T4 ON T4.Country = T3.Code\nWHERE T1.Name = 'Europe' AND T4.Established IS NOT NULL\nGROUP BY STRFTIME('%Y', T4.Established)\nORDER BY COUNT(T4.Name) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2738": {
        "db_id": "regional_sales",
        "question": "What was the best discount applied to sales orders in 2020?",
        "ground_truth": "SELECT MAX(`Discount Applied`) FROM `Sales Orders` WHERE OrderDate LIKE '%/%/20'",
        "amends": [
            "Do reference the column `Discount Applied` instead of `discount` and use backticks for the column name and table name instead of unquoted identifiers. Do use the table name `Sales Orders` instead of `sales_orders` with proper casing and backticks. Do filter using `OrderDate LIKE '%/%/20'` to capture orders from the year 2020 instead of using a non-existent `year` column. The amended query now correctly identifies the maximum discount from sales orders in 2020 by examining the order date pattern rather than relying on a missing column."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(discount) FROM sales_orders WHERE year = 2020;",
            "SELECT MAX(`Discount Applied`) AS `Best Discount` FROM `Sales Orders` WHERE `OrderDate` LIKE '%/%/20';"
        ],
        "rule_sql": []
    },
    "2997": {
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in the chapter with the highest amount of scenes in act 1?",
        "ground_truth": "SELECT T1.ParagraphNum FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T2.Act = 1 ORDER BY T2.Scene DESC LIMIT 1",
        "amends": [
            "Do select `T1.ParagraphNum` instead of `COUNT(*)`. Do add `INNER JOIN chapters AS T2` instead of omitting the chapters table. Do use join condition `T1.chapter_id = T2.id` instead of the subquery approach. Do move the filter to `WHERE T2.Act = 1` instead of the nested subquery with GROUP BY. Do add `ORDER BY T2.Scene DESC` instead of ordering by count in the subquery. The amended query now correctly retrieves the paragraph number from the most scene-rich chapter in Act 1 instead of counting paragraphs, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM paragraphs WHERE chapter_id = (SELECT chapter_id FROM scenes WHERE act = 1 GROUP BY chapter_id ORDER BY COUNT(*) DESC LIMIT 1);",
            "SELECT T1.ParagraphNum FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T2.Act = 1 ORDER BY T2.Scene DESC LIMIT 1"
        ],
        "rule_sql": []
    },
    "1547": {
        "db_id": "car_retails",
        "question": "What was the total price of the products shipped to Rovelli Gifts Distributors Ltd. between 1/1/2003 and 12/31/2003?",
        "ground_truth": "SELECT T3.priceEach * T3.quantityOrdered FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.customerName = 'Rovelli Gifts' AND T2.status = 'Shipped' AND STRFTIME('%Y', T2.shippedDate) = '2003'",
        "amends": [
            "Do use `T3.priceEach * T3.quantityOrdered` as the SELECT expression instead of `SUM(od.UnitPrice * od.Quantity) AS TotalPrice`. Do reference `customers AS T1` instead of `Customers c` and use `customerNumber` for the join condition instead of `CustomerID`. Do reference `orders AS T2` instead of `Orders o` and join on `T1.customerNumber = T2.customerNumber` instead of `o.CustomerID = c.CustomerID`. Do reference `orderdetails AS T3` instead of `OrderDetails od` and join on `T2.orderNumber = T3.orderNumber` instead of `o.OrderID = od.OrderID`. Do filter on `T1.customerName = 'Rovelli Gifts'` instead of `c.CompanyName = 'Rovelli Gifts Distributors Ltd.'`. Do add `T2.status = 'Shipped'` filter instead of omitting it. Do use `STRFTIME('%Y', T2.shippedDate) = '2003'` for year filtering instead of `o.OrderDate BETWEEN '2003-01-01' AND '2003-12-31'`. The amended query now correctly calculates individual order detail amounts rather than summing them, uses proper table aliases and join conditions, filters for shipped orders only, and uses the shipped date for year filtering instead of order date.",
            "Do return individual row values `T3.priceEach * T3.quantityOrdered` instead of aggregating with `SUM` to get a single total. Do remove the column alias `TotalPrice` instead of keeping it since no aggregation is performed. The amended query now correctly returns individual order detail amounts rather than a summed total, matching the RIGHT_SQL's behavior of showing each line item separately for the specified customer's shipped orders from 2003."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(od.UnitPrice * od.Quantity) AS TotalPrice\nFROM Orders o\nJOIN Customers c ON o.CustomerID = c.CustomerID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nWHERE c.CompanyName = 'Rovelli Gifts Distributors Ltd.'\nAND o.OrderDate BETWEEN '2003-01-01' AND '2003-12-31';",
            "SELECT SUM(T3.priceEach * T3.quantityOrdered) AS TotalPrice\nFROM customers AS T1\nJOIN orders AS T2 ON T1.customerNumber = T2.customerNumber\nJOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber\nWHERE T1.customerName = 'Rovelli Gifts'\nAND T2.status = 'Shipped'\nAND STRFTIME('%Y', T2.shippedDate) = '2003'",
            "SELECT T3.priceEach * T3.quantityOrdered\nFROM customers AS T1\nJOIN orders AS T2 ON T1.customerNumber = T2.customerNumber\nJOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber\nWHERE T1.customerName = 'Rovelli Gifts'\nAND T2.status = 'Shipped'\nAND STRFTIME('%Y', T2.shippedDate) = '2003'"
        ],
        "rule_sql": []
    },
    "9090": {
        "db_id": "bike_share_1",
        "question": "Which city is Townsend at 7th Station located and how many bikes could it hold?",
        "ground_truth": "SELECT city, SUM(dock_count) FROM station WHERE name = 'Townsend at 7th'",
        "amends": [
            "Do select `SUM(dock_count)` instead of `bikes_available` to aggregate the total dock count rather than retrieving individual bike availability. Do reference table `station` instead of `stations` to use the correct table name. Do add the aggregate function `SUM` instead of selecting a raw column to properly calculate the total dock count. The amended query now correctly aggregates dock counts from the specified station rather than reporting bike availability data."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, bikes_available FROM stations WHERE name = 'Townsend at 7th'",
            "SELECT city, SUM(dock_count) as total_dock_count FROM station WHERE name = 'Townsend at 7th' GROUP BY city;"
        ],
        "rule_sql": []
    },
    "8820": {
        "db_id": "food_inspection",
        "question": "Among the top 5 owners with highest number of establishments, which owner has the highest number of high risk violations? Give the name of the owner.",
        "ground_truth": "SELECT T4.owner_name FROM violations AS T3 INNER JOIN businesses AS T4 ON T3.business_id = T4.business_id INNER JOIN ( SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T1.business_id) DESC LIMIT 5 ) AS T5 ON T4.owner_name = T5.owner_name WHERE T3.risk_category = 'High Risk' GROUP BY T4.owner_name ORDER BY COUNT(T3.risk_category) DESC LIMIT 1",
        "amends": [
            "Do join `violations` with `businesses` on `business_id` instead of using `owner_name` directly from a subquery. Do use `INNER JOIN` with `businesses` table instead of joining directly with the subquery result. Do reference `risk_category = 'High Risk'` instead of `risk_level = 'high'` in the WHERE clause. Do add a correlated subquery that first finds top 5 owners by violation count before joining, instead of finding top owners by establishment count. Do count `business_id` in the subquery ordering instead of using `COUNT(*)` for establishment count. Do use proper table aliases `T1-T5` throughout instead of unnamed table references. Do order by `COUNT(T3.risk_category)` instead of `COUNT(*)` in the main query. The amended query now correctly identifies the owner with the most high-risk violations among the top 5 owners by total violation count.",
            "Do use a subquery that joins `violations` with `businesses` to count violations per owner instead of counting businesses per owner in the CTE. Do join the main query with this subquery on `owner_name` instead of using a CTE that only considers business counts. Do filter for `High Risk` violations in the main `WHERE` clause instead of after joining with the CTE. Do count `risk_category` in the main aggregation instead of counting businesses. Do structure the query with inline subqueries instead of a CTE approach. The amended query now correctly identifies owners with the most high-risk violations among the top 5 owners by violation count rather than business count."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT owner_name \nFROM (\n    SELECT owner_name, COUNT(*) as establishment_count \n    FROM establishments \n    GROUP BY owner_name \n    ORDER BY establishment_count DESC \n    LIMIT 5\n) AS top_owners\nJOIN violations ON top_owners.owner_name = violations.owner_name\nWHERE violations.risk_level = 'high'\nGROUP BY top_owners.owner_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
            "WITH TopOwners AS (\n    SELECT owner_name, COUNT(business_id) AS establishment_count\n    FROM businesses\n    GROUP BY owner_name\n    ORDER BY establishment_count DESC\n    LIMIT 5\n)\nSELECT T1.owner_name, COUNT(T3.risk_category) AS high_risk_count\nFROM TopOwners T1\nINNER JOIN businesses T2 ON T1.owner_name = T2.owner_name\nINNER JOIN violations T3 ON T2.business_id = T3.business_id\nWHERE T3.risk_category = 'High Risk'\nGROUP BY T1.owner_name\nORDER BY high_risk_count DESC\nLIMIT 1;",
            "SELECT T1.owner_name\nFROM businesses T1\nINNER JOIN violations T2 ON T1.business_id = T2.business_id\nWHERE T2.risk_category = 'High Risk'\nAND T1.owner_name IN (\n    SELECT T3.owner_name\n    FROM businesses T3\n    INNER JOIN violations T4 ON T3.business_id = T4.business_id\n    GROUP BY T3.owner_name\n    ORDER BY COUNT(T4.risk_category) DESC\n    LIMIT 5\n)\nGROUP BY T1.owner_name\nORDER BY COUNT(T2.risk_category) DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "8926": {
        "db_id": "cookbook",
        "question": "List all the ingredients of Apricot Yogurt Parfaits.",
        "ground_truth": "SELECT T3.name, T3.category FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Apricot Yogurt Parfaits'",
        "amends": [
            "Do select specific columns `T3.name` and `T3.category` instead of using `*` wildcard selection. Do join multiple tables using `INNER JOIN` between `Recipe`, `Quantity`, and `Ingredient` instead of querying only the `ingredients` table. Do use proper join conditions `T1.recipe_id = T2.recipe_id` and `T3.ingredient_id = T2.ingredient_id` instead of no join predicates. Do filter on `T1.title` instead of `recipe_name` to correctly reference the recipe title column. The amended query now properly retrieves ingredient details through the appropriate table relationships and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM ingredients WHERE recipe_name = 'Apricot Yogurt Parfaits';",
            "SELECT T3.name, T3.category \nFROM Recipe T1\nINNER JOIN Quantity T2 ON T1.recipe_id = T2.recipe_id\nINNER JOIN Ingredient T3 ON T3.ingredient_id = T2.ingredient_id\nWHERE T1.title = 'Apricot Yogurt Parfaits'"
        ],
        "rule_sql": []
    },
    "3340": {
        "db_id": "video_games",
        "question": "Show the name of the earliest platform in the database.",
        "ground_truth": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id ORDER BY T1.release_year ASC LIMIT 1",
        "amends": [
            "Do select `T2.platform_name` instead of `name` to specify the exact column from the joined table. Do use `FROM game_platform AS T1 INNER JOIN platform AS T2` instead of `FROM platforms` to properly join the two tables through their relationship. Do add the join condition `ON T1.platform_id = T2.id` instead of omitting it to correctly link the tables. Do order by `T1.release_year ASC` instead of `name ASC` to sort by the release year rather than platform name. The amended query now correctly retrieves the platform name from the joined tables based on the game-platform relationship and orders by release year instead of platform name, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM platforms ORDER BY name ASC LIMIT 1;",
            "SELECT T2.platform_name \nFROM game_platform AS T1 \nINNER JOIN platform AS T2 ON T1.platform_id = T2.id \nORDER BY T1.release_year ASC \nLIMIT 1"
        ],
        "rule_sql": []
    },
    "4196": {
        "db_id": "simpson_episodes",
        "question": "Based on the credits, state how many roles were played in the 5th episode of simpson 20.",
        "ground_truth": "SELECT COUNT(DISTINCT T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 5;",
        "amends": [
            "Do select `COUNT(DISTINCT T2.role)` instead of `COUNT(*)` to count unique roles rather than all credits. Do use `Episode AS T1` and `Credit AS T2` as source tables instead of a single `credits` table. Do perform an `INNER JOIN` on `T1.episode_id = T2.episode_id` instead of filtering by multiple columns in WHERE. Do filter by `T1.episode = 5` instead of filtering by `episode = 5 AND show = 'simpson' AND season = 20`. Do remove the unnecessary `show` and `season` filters instead of including them. The amended query now correctly counts distinct roles for episode 5 by properly joining the Episode and Credit tables on their relationship key."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM credits WHERE episode = 5 AND show = 'simpson' AND season = 20;",
            "SELECT COUNT(DISTINCT T2.role) \nFROM Episode AS T1 \nINNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id \nWHERE T1.episode = 5"
        ],
        "rule_sql": []
    },
    "6183": {
        "db_id": "food_inspection_2",
        "question": "How many inspections were done under the display of inspection report summary category?",
        "ground_truth": "SELECT COUNT(T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Display of Inspection Report Summary'",
        "amends": [
            "Do select `COUNT(T2.inspection_id)` instead of `COUNT(*)` to count specific inspection records. Do use tables `inspection_point AS T1` and `violation AS T2` instead of just `inspections` to properly join related data. Do perform `INNER JOIN` on `T1.point_id = T2.point_id` instead of no join condition to establish the correct relationship between inspection points and violations. Do filter on `T1.category = 'Display of Inspection Report Summary'` instead of `category = 'inspection report summary'` to use the precise category name from the correct table. The amended query now correctly counts violations associated with inspection points of the specified category, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE category = 'inspection report summary';",
            "SELECT COUNT(T2.inspection_id) \nFROM inspection_point AS T1 \nINNER JOIN violation AS T2 ON T1.point_id = T2.point_id \nWHERE T1.category = 'Display of Inspection Report Summary'"
        ],
        "rule_sql": []
    },
    "4180": {
        "db_id": "simpson_episodes",
        "question": "What is the birth name of the person who voiced 'Helen Lovejoy?'",
        "ground_truth": "SELECT DISTINCT T1.birth_name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'Helen Lovejoy';",
        "amends": [
            "Do add `DISTINCT` instead of omitting it. Do change the column reference to `T1.birth_name` instead of just `birth_name`. Do add `INNER JOIN Credit AS T2 ON T1.name = T2.person` instead of querying only the `people` table. Do move the filter to `T2.role = 'Helen Lovejoy'` instead of `character_name = 'Helen Lovejoy'`. Do use table aliases `T1` and `T2` instead of no aliases. The amended query now correctly joins the Person and Credit tables to find birth names associated with the specific role."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_name FROM people WHERE character_name = 'Helen Lovejoy';",
            "SELECT DISTINCT T1.birth_name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'Helen Lovejoy'"
        ],
        "rule_sql": []
    },
    "8843": {
        "db_id": "food_inspection",
        "question": "List owner's name of businesses with a 100 score.",
        "ground_truth": "SELECT DISTINCT T2.owner_name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100",
        "amends": [
            "Do use `DISTINCT T2.owner_name` instead of `owner_name` without distinct. Do add `inspections AS T1` and `businesses AS T2` as joined tables instead of querying only `businesses`. Do use `INNER JOIN` with `ON T1.business_id = T2.business_id` instead of no join condition. Do move the filter to `T1.score = 100` instead of `score = 100` on the wrong table. The amended query now correctly joins inspection data with business information and returns unique owner names for businesses with perfect inspection scores, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT owner_name FROM businesses WHERE score = 100",
            "SELECT DISTINCT T2.owner_name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100"
        ],
        "rule_sql": []
    },
    "3701": {
        "db_id": "college_completion",
        "question": "How many students graduated from Central Alabama Community College in 2011 in total?",
        "ground_truth": "SELECT T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011",
        "amends": [
            "Do select `T2.grad_cohort` instead of `COUNT(*)` to retrieve the actual graduation cohort value rather than a count. Do use `FROM institution_details AS T1 INNER JOIN institution_grads AS T2` instead of `FROM students` to join the correct tables with proper aliases. Do apply the join condition `ON T1.unitid = T2.unitid` instead of no join condition to properly relate the institution details with graduation data. Do filter with `T1.chronname = 'Central Alabama Community College'` instead of `college = 'Central Alabama Community College'` to use the correct column name from the institution table. Do filter with `T2.year = 2011` instead of `graduation_year = 2011` to use the correct column name from the graduation table. The amended query now correctly retrieves the graduation cohort for the specified institution and year by joining the appropriate tables with proper relationships."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE college = 'Central Alabama Community College' AND graduation_year = 2011;",
            "SELECT T2.grad_cohort \nFROM institution_details AS T1 \nINNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid \nWHERE T1.chronname = 'Central Alabama Community College' \nAND T2.year = 2011"
        ],
        "rule_sql": []
    },
    "1783": {
        "db_id": "restaurant",
        "question": "What is the full address of the most popular restaurant among the diners?",
        "ground_truth": "SELECT T2.street_name, T2.street_num, T2.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1",
        "amends": [
            "Do select specific columns `street_name`, `street_num`, and `city` instead of the generic `address`. Do join tables using `INNER JOIN` between `generalinfo AS T1` and `location AS T2` with predicate `T1.id_restaurant = T2.id_restaurant` instead of querying a single table. Do order by `T1.review DESC` instead of `popularity DESC` to use the correct column for sorting. The amended query now correctly retrieves location details from joined tables using the proper review-based ordering.",
            "Do reorder the SELECT list to `street_name, street_num, city` instead of `street_num, street_name, city` to match the column sequence in the RIGHT_SQL. The amended query now correctly returns the same result set as the RIGHT_SQL with the proper column ordering."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM restaurants ORDER BY popularity DESC LIMIT 1;",
            "SELECT T2.street_num, T2.street_name, T2.city\nFROM generalinfo AS T1\nINNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant\nORDER BY T1.review DESC\nLIMIT 1;",
            "SELECT T2.street_name, T2.street_num, T2.city\nFROM generalinfo AS T1\nINNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant\nORDER BY T1.review DESC\nLIMIT 1"
        ],
        "rule_sql": []
    },
    "5359": {
        "db_id": "beer_factory",
        "question": "How many transactions were made to purchase a bottle of beer using American Express?",
        "ground_truth": "SELECT COUNT(T1.RootBeerID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID WHERE T1.ContainerType = 'Bottle' AND T2.CreditCardType = 'American Express'",
        "amends": [
            "Do select `COUNT(T1.RootBeerID)` from the `rootbeer` table instead of `COUNT(*)` from a non-existent `transactions` table. Do join `rootbeer AS T1` with `transaction AS T2` using `INNER JOIN` on `T1.RootBeerID = T2.RootBeerID` instead of querying a single table. Do filter on `T1.ContainerType = 'Bottle'` and `T2.CreditCardType = 'American Express'` instead of `item = 'beer'` and `payment_method = 'American Express'`. The amended query now correctly counts root beer bottle transactions paid with American Express credit cards instead of attempting to count non-existent beer transactions."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM transactions WHERE item = 'beer' AND payment_method = 'American Express';",
            "SELECT COUNT(T1.RootBeerID) \nFROM rootbeer AS T1\nINNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID\nWHERE T1.ContainerType = 'Bottle' \nAND T2.CreditCardType = 'American Express'"
        ],
        "rule_sql": []
    },
    "7276": {
        "db_id": "works_cycles",
        "question": "Among the sales with a tax applied to retail transaction, how many of them are charged by multiple types of taxes?",
        "ground_truth": "SELECT COUNT(SalesTaxRateID) FROM SalesTaxRate WHERE Name LIKE '%+%'",
        "amends": [
            "Do select `COUNT(SalesTaxRateID)` instead of `COUNT(*)`. Do query from `SalesTaxRate` instead of `sales`. Do use a `WHERE` filter with `Name LIKE '%+%'` instead of filtering on `tax_applied = 'retail'`. Do remove the `GROUP BY transaction_id` clause instead of keeping it. Do remove the `HAVING COUNT(DISTINCT tax_type) > 1` condition instead of including it. The amended query now correctly counts SalesTaxRateID records from the SalesTaxRate table where the Name contains a plus sign, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM sales \nWHERE tax_applied = 'retail' \nGROUP BY transaction_id \nHAVING COUNT(DISTINCT tax_type) > 1;",
            "SELECT COUNT(SalesTaxRateID) FROM SalesTaxRate WHERE Name LIKE '%+%'"
        ],
        "rule_sql": []
    },
    "5977": {
        "db_id": "books",
        "question": "Count the number of books written by Orson Scott Card.",
        "ground_truth": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card'",
        "amends": [
            "Do add `INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id` and `INNER JOIN author AS T3 ON T3.author_id = T2.author_id` instead of querying only the `books` table. Do change the filter to `T3.author_name = 'Orson Scott Card'` instead of `author = 'Orson Scott Card'` to properly reference the author table. Do use table aliases `T1`, `T2`, and `T3` instead of direct table references. The amended query now correctly joins through the relationship tables to count books by author name rather than assuming author data exists directly in the books table, matching RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books WHERE author = 'Orson Scott Card';",
            "SELECT COUNT(*) \nFROM book AS T1\nINNER JOIN book_author AS T2 ON T1.book_id = T2.book_id\nINNER JOIN author AS T3 ON T3.author_id = T2.author_id\nWHERE T3.author_name = 'Orson Scott Card'"
        ],
        "rule_sql": []
    },
    "1172": {
        "db_id": "talkingdata",
        "question": "What are the label IDs and app IDs of the Chinese Classical Mythology category?",
        "ground_truth": "SELECT T1.label_id, T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Chinese Classical Mythology'",
        "amends": [
            "Do select `T1.label_id` and `T2.app_id` from joined tables instead of `label_id` and `app_id` from a single table. Do use `FROM label_categories AS T1 INNER JOIN app_labels AS T2` instead of `FROM categories` alone. Do add join condition `ON T1.label_id = T2.label_id` instead of omitting any table relationships. Do filter on `T1.category = 'Chinese Classical Mythology'` instead of `category_name = 'Chinese Classical Mythology'`. The amended query now correctly joins the necessary tables to retrieve label and app information based on the specified category."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT label_id, app_id FROM categories WHERE category_name = 'Chinese Classical Mythology';",
            "SELECT T1.label_id, T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Chinese Classical Mythology'"
        ],
        "rule_sql": []
    },
    "1458": {
        "db_id": "synthea",
        "question": "What percentage of patients born in 'Pembroke MA US' have 'allergy to grass pollen'?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) AS REL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pembroke MA US'",
        "amends": [
            "Do use `INNER JOIN` on `T1.patient = T2.PATIENT` instead of `LEFT JOIN` on `p.patient_id = a.patient_id` to properly filter out patients without allergies. Do reference `T1.birthplace` instead of `p.birth_place` in the WHERE clause. Do calculate the percentage using `SUM(CASE WHEN T2.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) * 100 / COUNT(T1.patient)` instead of `(COUNT(CASE WHEN p.birth_place = 'Pembroke MA US' AND a.allergy_name = 'allergy to grass pollen' THEN 1 END) * 100.0 / COUNT(CASE WHEN p.birth_place = 'Pembroke MA US' THEN 1 END))` to properly handle the aggregation logic. Do use `CAST(... AS REL)` instead of implicit casting for the percentage calculation. Do reference `allergy_name` as `DESCRIPTION` and use proper case 'Allergy to grass pollen' instead of 'allergy to grass pollen'. The amended query now correctly calculates the percentage of patients with grass pollen allergies among those born in Pembroke MA US.",
            "Do cast the entire percentage calculation as `REAL` instead of casting only the numerator, and use `REL` instead of `REAL` for the cast type. Do remove the `DISTINCT` from `COUNT(DISTINCT p.patient)` instead of keeping it, since patient IDs are already unique in the join context. Do use table aliases `T1` and `T2` instead of `p` and `a` for better readability. Do place the multiplication by 100 outside the cast instead of inside it, and use integer division instead of floating-point division. The amended query now correctly calculates the percentage of patients with grass pollen allergy from Pembroke MA US by fixing the casting approach and removing unnecessary distinct counting."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN p.birth_place = 'Pembroke MA US' AND a.allergy_name = 'allergy to grass pollen' THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN p.birth_place = 'Pembroke MA US' THEN 1 END)) AS percentage\nFROM patients p\nLEFT JOIN allergies a ON p.patient_id = a.patient_id\nWHERE p.birth_place = 'Pembroke MA US';",
            "SELECT \n    CAST(SUM(CASE WHEN a.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT p.patient) AS REAL) AS percentage\nFROM \n    patients p\nINNER JOIN \n    allergies a ON p.patient = a.PATIENT\nWHERE \n    p.birthplace = 'Pembroke MA US'",
            "SELECT \n    CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) * 100 AS REAL) / COUNT(T1.patient) AS percentage\nFROM \n    patients T1\nINNER JOIN \n    allergies T2 ON T1.patient = T2.PATIENT\nWHERE \n    T1.birthplace = 'Pembroke MA US'"
        ],
        "rule_sql": []
    },
    "3060": {
        "db_id": "shakespeare",
        "question": "In Shakespeare's works before 1600, list down the title of the tragic story he had written that involved a character named \"Tybalt\".",
        "ground_truth": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE < 1600 AND T1.GenreType = 'Tragedy' AND T4.CharName = 'Tybalt'",
        "amends": [
            "Do use `DISTINCT T1.title` instead of `title` to eliminate duplicates from multiple joins. Do join `works AS T1` instead of querying `shakespeare_works` directly, and add `INNER JOIN chapters AS T2 ON T1.id = T2.work_id` instead of omitting the chapters table. Do add `INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id` instead of omitting the paragraphs table, and add `INNER JOIN characters AS T4 ON T3.character_id = T4.id` instead of omitting the characters table. Do filter on `T1.DATE < 1600` instead of `year < 1600` using the correct column name. Do filter on `T1.GenreType = 'Tragedy'` instead of `genre = 'tragedy'` with proper case sensitivity and column name. Do filter on `T4.CharName = 'Tybalt'` instead of `character_name = 'Tybalt'` using the joined characters table. The amended query now correctly joins through the relational schema to find works containing Tybalt's lines in tragedies before 1600, matching the RIGHT_SQL's behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM shakespeare_works WHERE genre = 'tragedy' AND character_name = 'Tybalt' AND year < 1600;",
            "SELECT DISTINCT T1.Title\nFROM works AS T1\nINNER JOIN chapters AS T2 ON T1.id = T2.work_id\nINNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id\nINNER JOIN characters AS T4 ON T3.character_id = T4.id\nWHERE T1.Date < 1600\nAND T1.GenreType = 'Tragedy'\nAND T4.CharName = 'Tybalt'"
        ],
        "rule_sql": []
    },
    "3998": {
        "db_id": "public_review_platform",
        "question": "How many photos type compliment given from users with high cool votes?",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id INNER JOIN Reviews AS T4 ON T1.user_id = T4.user_id WHERE T3.compliment_type = 'photos' AND T4.review_votes_cool = 'High'",
        "amends": [
            "Do use explicit table aliases `T1.user_id` in the COUNT instead of `COUNT(*)` to count specific user records. Do join multiple tables including `Users AS T1`, `Users_Compliments AS T2`, `Compliments AS T3`, and `Reviews AS T4` instead of querying a single `photos` table. Do use `INNER JOIN` relationships between user and compliment tables with proper join conditions `T1.user_id = T2.user_id` and `T2.compliment_id = T3.compliment_id` instead of a subquery filter. Do add a join to `Reviews AS T4` with condition `T1.user_id = T4.user_id` to incorporate review data that was missing. Do filter on `T3.compliment_type = 'photos'` instead of `type = 'compliment'` to properly identify photo compliments. Do use `T4.review_votes_cool = 'High'` instead of `cool_votes > 100` to filter based on categorical cool vote ratings rather than numeric thresholds. The amended query now correctly joins the necessary tables to count users with photo compliments who have high cool votes, matching the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM photos WHERE type = 'compliment' AND user_id IN (SELECT user_id FROM users WHERE cool_votes > 100);",
            "SELECT COUNT(T1.user_id) \nFROM Users AS T1\nINNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id\nINNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id\nINNER JOIN Reviews AS T4 ON T1.user_id = T4.user_id\nWHERE T3.compliment_type = 'photos' \nAND T4.review_votes_cool = 'High'"
        ],
        "rule_sql": []
    },
    "8547": {
        "db_id": "software_company",
        "question": "In female customers ages from 50 to 60, how many of them has an number of inhabitants ranges from 19 to 24?",
        "ground_truth": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 50 AND T1.age <= 60 AND T2.INHABITANTS_K >= 19 AND T2.INHABITANTS_K <= 24",
        "amends": [
            "Do select `COUNT(T1.ID)` from a specific column instead of `COUNT(*)` from all rows. Do use table aliases `T1` and `T2` instead of referencing a single table. Do join `Customers AS T1` with `Demog AS T2` using `INNER JOIN` on `T1.GEOID = T2.GEOID` instead of querying a single table. Do filter on `T1.SEX = 'Female'` instead of `gender = 'female'` with proper case handling. Do use explicit range conditions `T1.age >= 50 AND T1.age <= 60` instead of `BETWEEN 50 AND 60`. Do reference inhabitants from the joined table as `T2.INHABITANTS_K` with proper thousand suffix instead of just `inhabitants`, and use explicit range conditions `T2.INHABITANTS_K >= 19 AND T2.INHABITANTS_K <= 24` instead of `BETWEEN 19 AND 24`. The amended query now correctly joins demographic data and matches the intended behavior."
        ],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE gender = 'female' AND age BETWEEN 50 AND 60 AND inhabitants BETWEEN 19 AND 24;",
            "SELECT COUNT(T1.ID) \nFROM Customers AS T1 \nINNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID \nWHERE T1.SEX = 'Female' \nAND T1.age >= 50 AND T1.age <= 60 \nAND T2.INHABITANTS_K >= 19 AND T2.INHABITANTS_K <= 24"
        ],
        "rule_sql": []
    },
    "6767": {
        "db_id": "retails",
        "question": "How many customers who are not in debt ordered an urgent order?",
        "ground_truth": "SELECT COUNT(T2.c_custkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal > 0 AND T1.o_orderpriority = '1-URGENT'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE c.debt = 0 AND o.urgency = 'urgent';"
        ],
        "rule_sql": []
    },
    "60": {
        "db_id": "movie_platform",
        "question": "Please list the titles of the movie lists user 32172230 created when he or she was eligible for trial.",
        "ground_truth": "SELECT T1.list_title FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 32172230 AND T2.user_eligible_for_trial = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movie_lists WHERE user_id = 32172230 AND trial_eligible = 'yes';"
        ],
        "rule_sql": []
    },
    "9291": {
        "db_id": "movie_3",
        "question": "Which city does the address 1623 Kingstown Drive belong to?",
        "ground_truth": "SELECT T1.city FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id WHERE T2.address = '1623 Kingstown Drive'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM addresses WHERE address = '1623 Kingstown Drive';"
        ],
        "rule_sql": []
    },
    "1997": {
        "db_id": "soccer_2016",
        "question": "What is the second team's name in the match with the lowest winning margin?",
        "ground_truth": "SELECT T1.team_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.team_2 ORDER BY T2.win_margin LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM matches ORDER BY winning_margin ASC LIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "5938": {
        "db_id": "books",
        "question": "Which country does Malina Johnson live in?",
        "ground_truth": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Malina' AND T1.last_name = 'Johnson' AND T2.status_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM users WHERE first_name = 'Malina' AND last_name = 'Johnson';"
        ],
        "rule_sql": []
    },
    "8588": {
        "db_id": "chicago_crime",
        "question": "Which community area has the least population?",
        "ground_truth": "SELECT community_area_name FROM Community_Area ORDER BY population ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT community_area_name FROM community_areas ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7149": {
        "db_id": "works_cycles",
        "question": "Please tell the meaning of CultureID \"fr\".",
        "ground_truth": "SELECT Name FROM Culture WHERE CultureID = 'fr'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM Culture WHERE CultureID = 'fr';"
        ],
        "rule_sql": []
    },
    "6653": {
        "db_id": "retail_world",
        "question": "How many customers are located in London?",
        "ground_truth": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE city = 'Paris';"
        ],
        "rule_sql": []
    },
    "845": {
        "db_id": "social_media",
        "question": "How many more tweets with a positive sentiment than the tweets with a neutral sentiment were posted by male users?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Sentiment = 0 THEN 1 ELSE 0 END) AS diff FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM tweets t JOIN users u ON t.user_id = u.user_id WHERE t.sentiment = 'positive' AND u.gender = 'male') - \n    (SELECT COUNT(*) FROM tweets t JOIN users u ON t.user_id = u.user_id WHERE t.sentiment = 'neutral' AND u.gender = 'male') AS difference;"
        ],
        "rule_sql": []
    },
    "1424": {
        "db_id": "synthea",
        "question": "How many times did Keven Kuhn receive DTaP immunization?",
        "ground_truth": "SELECT COUNT(T2.CODE) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.DESCRIPTION = 'DTaP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM immunizations WHERE patient_name = 'Keven Kuhn' AND vaccine_type = 'DTaP';"
        ],
        "rule_sql": []
    },
    "6145": {
        "db_id": "food_inspection_2",
        "question": "When did Renaldi's Pizza had its first inspection?",
        "ground_truth": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'RENALDI''S PIZZA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(inspection_date) FROM inspections WHERE restaurant_name = 'Renaldi\\'s Pizza';"
        ],
        "rule_sql": []
    },
    "4792": {
        "db_id": "legislator",
        "question": "How many percent of senators were from class 1?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `historical-terms` WHERE type = 'sen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM senators) AS percentage FROM senators WHERE class = 1;"
        ],
        "rule_sql": []
    },
    "753": {
        "db_id": "movie",
        "question": "How tall is the actor who played \"Lurch\"?",
        "ground_truth": "SELECT T2.`Height (Inches)` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Lurch'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT height FROM actors WHERE character_name = 'Lurch';"
        ],
        "rule_sql": []
    },
    "2863": {
        "db_id": "professional_basketball",
        "question": "Who is the tallest player in Denver Nuggets since 1980?",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.name = 'Denver Nuggets' AND T2.year > 1980 ORDER BY T1.height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, height FROM players WHERE team = 'Denver Nuggets' AND year >= 1980 ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8136": {
        "db_id": "university",
        "question": "List the names of universities with a score less than 28% of the average score of all universities in 2015.",
        "ground_truth": "SELECT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 AND T1.score * 100 < ( SELECT AVG(score) * 28 FROM university_ranking_year WHERE year = 2015 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE score < (SELECT AVG(score) * 0.28 FROM universities WHERE year = 2015);"
        ],
        "rule_sql": []
    },
    "92": {
        "db_id": "movie_platform",
        "question": "Please provide the title of the list with the most comments on the list.",
        "ground_truth": "SELECT list_title FROM lists GROUP BY list_title ORDER BY COUNT(list_comments) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM lists ORDER BY comment_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3638": {
        "db_id": "authors",
        "question": "Which conference has the longest name?",
        "ground_truth": "SELECT FullName FROM Conference ORDER BY LENGTH(FullName) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference, LENGTH(conference) as name_length FROM conferences ORDER BY name_length ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7912": {
        "db_id": "world",
        "question": "List down the languages of countries with an independence year between 1980 to 1995.",
        "ground_truth": "SELECT T2.Name, T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear BETWEEN 1980 AND 1995",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM countries WHERE independence_year BETWEEN 1980 AND 1995;"
        ],
        "rule_sql": []
    },
    "766": {
        "db_id": "movie",
        "question": "What is the net worth of the actor starred in Misery who has a height ranging from 60 to 70 inches tall?",
        "ground_truth": "SELECT T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Misery' AND T3.`Height (Inches)` BETWEEN 60 AND 70 AND T3.Gender = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT net_worth FROM actors WHERE movie_title = 'Misery' AND height BETWEEN 60 AND 70;"
        ],
        "rule_sql": []
    },
    "3813": {
        "db_id": "public_review_platform",
        "question": "How many businesses in Scottsdale are rated as \"wonderful experience\"?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Scottsdale' AND rating = 'wonderful experience';"
        ],
        "rule_sql": []
    },
    "3657": {
        "db_id": "authors",
        "question": "List the name of the author that affiliated with University of Illinois Chicago?",
        "ground_truth": "SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM authors WHERE affiliation = 'University of Illinois Chicago';"
        ],
        "rule_sql": []
    },
    "1626": {
        "db_id": "car_retails",
        "question": "If I'm from the Muscle Machine Inc, to which e-mail adress should I write a letter if I want to reach the superior of my sales representitive?",
        "ground_truth": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM customers WHERE company_name = 'Muscle Machine Inc'"
        ],
        "rule_sql": []
    },
    "2996": {
        "db_id": "shakespeare",
        "question": "Which of Shakespeare's work has chapter description of \"A field near Windsor\"?",
        "ground_truth": "SELECT T2.Title FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Description = 'A field near Windsor.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM shakespeare_works WHERE chapter_description = 'A field near Windsor';"
        ],
        "rule_sql": []
    },
    "2991": {
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in \"Ay, surely, mere the truth: I know his lady.\"?",
        "ground_truth": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM paragraphs WHERE text = 'Ay, surely, mere the truth: I know his lady.'"
        ],
        "rule_sql": []
    },
    "6939": {
        "db_id": "ice_hockey_draft",
        "question": "Among the players who played 72 games, how many are left-shooters?",
        "ground_truth": "SELECT COUNT(T2.ELITEID) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.GP = 72 AND T2.shoots = 'L'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE games_played = 72 AND shoot_hand = 'left';"
        ],
        "rule_sql": []
    },
    "4282": {
        "db_id": "simpson_episodes",
        "question": "What is the difference between the number of votes for 1-star vs. 10-star for the episode \"The Burns and the Bees\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.stars = 10 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T2.stars = 1 THEN T2.votes ELSE 0 END) AS Difference FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'The Burns and the Bees';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM votes WHERE episode_title = 'The Burns and the Bees' AND stars = 1) - \n    (SELECT COUNT(*) FROM votes WHERE episode_title = 'The Burns and the Bees' AND stars = 10) AS difference"
        ],
        "rule_sql": []
    },
    "6850": {
        "db_id": "retails",
        "question": "Name customers in India with account balances over $5000.",
        "ground_truth": "SELECT T1.c_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > 5000 AND T2.n_name = 'INDIA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE country = 'India' AND account_balance > 5000"
        ],
        "rule_sql": []
    },
    "3991": {
        "db_id": "public_review_platform",
        "question": "Calculate difference between business that have the highest number of reviews and business that have the lowest number of reviews.",
        "ground_truth": "SELECT ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1 ) - ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) ASC LIMIT 1 ) AS DIFF",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(review_count) - MIN(review_count) AS difference FROM business;"
        ],
        "rule_sql": []
    },
    "921": {
        "db_id": "cs_semester",
        "question": "Describe the names and capability of the students who were advised by professors from the University of Washington.",
        "ground_truth": "SELECT T3.f_name, T3.l_name, T2.capability FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.graduate_from = 'University of Washington'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name, s.capability FROM students s JOIN professors p ON s.advisor_id = p.id WHERE p.university = 'University of Washington';"
        ],
        "rule_sql": []
    },
    "7256": {
        "db_id": "works_cycles",
        "question": "What is the total amount due of all the purchases made by the company to the vendor that has the lowest selling price amount of a single product? Indicate the name of the vendor to which the purchases was made.",
        "ground_truth": "SELECT T1.UnitPrice, T3.Name FROM PurchaseOrderDetail AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID INNER JOIN Vendor AS T3 ON T2.VendorID = T3.BusinessEntityID ORDER BY T1.UnitPrice LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT v.VendorName, SUM(p.AmountDue) as TotalAmountDue\nFROM Purchases p\nJOIN Vendors v ON p.VendorID = v.VendorID\nWHERE v.VendorID = (\n    SELECT VendorID \n    FROM Products \n    ORDER BY SellingPrice ASC \n    LIMIT 1\n)\nGROUP BY v.VendorName;"
        ],
        "rule_sql": []
    },
    "4761": {
        "db_id": "legislator",
        "question": "What type of political party Sherrod Brown has in 2005?",
        "ground_truth": "SELECT T1.party FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Sherrod' AND T2.last_name = 'Brown' AND T1.start LIKE '%2005%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party FROM politicians WHERE name = 'Sherrod Brown' AND year = 2005;"
        ],
        "rule_sql": []
    },
    "8626": {
        "db_id": "chicago_crime",
        "question": "Give the detailed description of all the crimes against society.",
        "ground_truth": "SELECT description FROM FBI_Code WHERE crime_against = 'Society'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM crimes WHERE category = 'society'"
        ],
        "rule_sql": []
    },
    "7552": {
        "db_id": "image_and_language",
        "question": "What is the bounding box of \"spoon\" in image id 1344?",
        "ground_truth": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1344 AND T2.OBJ_CLASS = 'spoon'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT x_min, y_min, x_max, y_max FROM bounding_boxes WHERE image_id = 1344 AND object_name = 'spoon';"
        ],
        "rule_sql": []
    },
    "4318": {
        "db_id": "simpson_episodes",
        "question": "Calculate the total votes of episodes that Adam Kuhlman had involved.",
        "ground_truth": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Adam Kuhlman';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(votes) FROM episodes WHERE director = 'Adam Kuhlman';"
        ],
        "rule_sql": []
    },
    "1612": {
        "db_id": "car_retails",
        "question": "Compared with the orders happened on 2005-04-08 and two days later, which day's order had a higher value?",
        "ground_truth": "SELECT T2.orderDate FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-08' OR STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-10' ORDER BY T1.quantityOrdered * T1.priceEach DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN SUM(CASE WHEN order_date = '2005-04-08' THEN total_amount ELSE 0 END) > \n             SUM(CASE WHEN order_date = '2005-04-10' THEN total_amount ELSE 0 END) \n        THEN '2005-04-08' \n        ELSE '2005-04-10' \n    END as higher_value_day\nFROM orders\nWHERE order_date IN ('2005-04-08', '2005-04-10');"
        ],
        "rule_sql": []
    },
    "2338": {
        "db_id": "movielens",
        "question": "Which movies have received the greatest ratings from female users whose occupations fall within the category of 3?",
        "ground_truth": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T1.occupation = 3 AND T2.rating = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, AVG(r.rating) as avg_rating\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN users u ON r.user_id = u.user_id\nWHERE u.gender = 'F' AND u.occupation = 3\nGROUP BY m.movie_id\nORDER BY avg_rating DESC\nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "8673": {
        "db_id": "chicago_crime",
        "question": "Among the crimes located in the community area with the highest population, what is the percentage of domestic violence?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'TRUE' THEN T2.domestic END) AS REAL) * 100 / COUNT(T2.domestic) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN domestic = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS domestic_violence_percentage\nFROM crimes\nWHERE community_area = (\n    SELECT community_area \n    FROM community_areas \n    ORDER BY population DESC \n    LIMIT 1\n);"
        ],
        "rule_sql": []
    },
    "6733": {
        "db_id": "retails",
        "question": "List down the nation keys and names in Africa.",
        "ground_truth": "SELECT T1.n_name, T1.n_nationkey FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'AFRICA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT n_nationkey, n_name FROM nation WHERE n_regionkey = 'Africa';"
        ],
        "rule_sql": []
    },
    "6189": {
        "db_id": "food_inspection_2",
        "question": "Calculate the percentage of inspections with verified quality. Among them, how many businesses were from Chicago?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.results LIKE '%Pass%' THEN T2.inspection_id END) AS REAL) * 100 / COUNT(T2.inspection_id), COUNT(DISTINCT T2.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'CHICAGO'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN quality_verified = 'yes' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_verified,\n    COUNT(CASE WHEN city = 'Chicago' THEN 1 END) AS chicago_businesses\nFROM inspections;"
        ],
        "rule_sql": []
    },
    "6784": {
        "db_id": "retails",
        "question": "Of the orders with a lower delivery priority, how many have an urgent priority order?",
        "ground_truth": "SELECT COUNT(o_orderkey) FROM orders WHERE o_orderpriority = '1-URGENT' GROUP BY o_orderdate ORDER BY o_orderdate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE delivery_priority = 'low' AND order_priority = 'urgent';"
        ],
        "rule_sql": []
    },
    "6966": {
        "db_id": "ice_hockey_draft",
        "question": "Among the Italian players, who has the shortest height?",
        "ground_truth": "SELECT T2.PlayerName FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.nation = 'Italy' ORDER BY T1.height_in_cm ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, height FROM players WHERE nationality = 'Italian' ORDER BY height ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9417": {
        "db_id": "movie_3",
        "question": "Among all the active customers, how many of them live in Arlington?",
        "ground_truth": "SELECT COUNT(T2.customer_id) FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T1.city_id = T3.city_id WHERE T2.active = 1 AND T3.city = 'Arlington'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE city = 'Arlington' AND status = 'active';"
        ],
        "rule_sql": []
    },
    "8809": {
        "db_id": "food_inspection",
        "question": "What are the names of the establishments that met all of the required standards in 2013?",
        "ground_truth": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2013' AND T1.score = 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM establishments WHERE year = 2013 AND standards_met = 'all';"
        ],
        "rule_sql": []
    },
    "3386": {
        "db_id": "video_games",
        "question": "Provide the number of games sold in North America on the PS4 platform.",
        "ground_truth": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'North America' AND T4.platform_name = 'PS4'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE platform = 'PS4' AND region = 'North America';"
        ],
        "rule_sql": []
    },
    "4122": {
        "db_id": "public_review_platform",
        "question": "List down the business ID with a star range from 3 to 5, located at Chandler.",
        "ground_truth": "SELECT business_id FROM Business WHERE stars >= 3 AND stars < 6 AND city = 'Chandler'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM businesses WHERE stars BETWEEN 3 AND 5 AND city = 'Chandler';"
        ],
        "rule_sql": []
    },
    "4882": {
        "db_id": "legislator",
        "question": "Who is the Lutheran representative that served in the state of Ohio for 14 years before becoming a senator?",
        "ground_truth": "SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.end) AS int) - CAST(strftime('%Y', T2.start) AS int)) = 14 THEN official_full_name END FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Lutheran' AND T2.state = 'OH' AND T2.type = 'rep'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM representatives WHERE religion = 'Lutheran' AND state = 'Ohio' AND years_served = 14 AND became_senator = 'yes'"
        ],
        "rule_sql": []
    },
    "2943": {
        "db_id": "professional_basketball",
        "question": "For the latest passing player who could play all the positions in the court, how many points did he have in his career?",
        "ground_truth": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.pos = 'C-F-G' GROUP BY T2.playerID, T2.year ORDER BY T2.year DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(points) \nFROM players \nWHERE position = 'All' \nORDER BY pass_completion DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1942": {
        "db_id": "soccer_2016",
        "question": "From 2011 to 2012, how many Australian players became the \"Man of the Match\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Match_Date BETWEEN '2011%' AND '2012%' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match INNER JOIN Country AS T3 ON T3.Country_Id = T2.Country_Name WHERE T3.Country_Name = 'Australia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM matches m\nJOIN players p ON m.man_of_match = p.player_id\nWHERE p.country = 'Australia'\nAND m.match_date BETWEEN '2011-01-01' AND '2012-12-31';"
        ],
        "rule_sql": []
    },
    "1213": {
        "db_id": "talkingdata",
        "question": "How many people over the age of 50 do not have HTC One M8 Eye phones?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 50 AND T2.device_model != 'One M8 Eye' AND T2.phone_brand != 'HTC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE age > 50 AND phone_model != 'HTC One M8 Eye';"
        ],
        "rule_sql": []
    },
    "3970": {
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of running business among all business.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(business_id) FROM Business",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN status = 'running' THEN 1 END) / COUNT(*)) * 100 AS percentage_running FROM business;"
        ],
        "rule_sql": []
    },
    "7130": {
        "db_id": "works_cycles",
        "question": "Which role has the most common contact among businesses?",
        "ground_truth": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role, COUNT(*) as contact_count FROM businesses GROUP BY role ORDER BY contact_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3448": {
        "db_id": "video_games",
        "question": "How many FIFA games are there across all platforms?",
        "ground_truth": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%FIFA%' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE title = 'FIFA'"
        ],
        "rule_sql": []
    },
    "8788": {
        "db_id": "food_inspection",
        "question": "What is the average scores of Tiramisu Kitchen in all inspections?",
        "ground_truth": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(score) FROM inspections WHERE restaurant_name = 'Tiramisu Kitchen';"
        ],
        "rule_sql": []
    },
    "5934": {
        "db_id": "books",
        "question": "Which customer has made the most orders? Show his/her full name.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers ORDER BY customer_id DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "896": {
        "db_id": "cs_semester",
        "question": "Among the easiest courses, what is the name of the course where most students got an A?",
        "ground_truth": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE difficulty = 'easy' ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4307": {
        "db_id": "simpson_episodes",
        "question": "List down the title of episode S20-E1, S20-E2 & S20-E3.",
        "ground_truth": "SELECT title FROM Episode WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes WHERE episode_number IN ('S20-E1', 'S20-E2', 'S20-E3');"
        ],
        "rule_sql": []
    },
    "5130": {
        "db_id": "address",
        "question": "Name the county that has the bad alias of Druid Hills.",
        "ground_truth": "SELECT T2.county FROM avoid AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Druid Hills'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county FROM counties WHERE alias = 'Druid Hills';"
        ],
        "rule_sql": []
    },
    "2002": {
        "db_id": "soccer_2016",
        "question": "How many players were born in the 80s and have bowling skill of 2?",
        "ground_truth": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '198%' AND Bowling_skill = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE birth_year BETWEEN 1980 AND 1989 AND bowling_skill = 2;"
        ],
        "rule_sql": []
    },
    "8327": {
        "db_id": "mondial_geo",
        "question": "What is the average population for all cities location at Baltic Sea?",
        "ground_truth": "SELECT AVG(T1.Population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T3.Name = 'Baltic Sea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(population) FROM cities WHERE sea = 'Baltic Sea';"
        ],
        "rule_sql": []
    },
    "8068": {
        "db_id": "university",
        "question": "What is the ID of the university with the most students in 2011?",
        "ground_truth": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_id FROM universities WHERE year = 2011 ORDER BY student_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "744": {
        "db_id": "movie",
        "question": "Which movie had the biggest budget? Give the name of the movie.",
        "ground_truth": "SELECT Title FROM movie ORDER BY Budget DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies ORDER BY budget ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4566": {
        "db_id": "student_loan",
        "question": "Among the students who filed for bankruptcy, how many students are disabled?",
        "ground_truth": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE bankruptcy_filed = 1 AND disability_status = 'disabled';"
        ],
        "rule_sql": []
    },
    "8642": {
        "db_id": "chicago_crime",
        "question": "What is the alderman's full name of the most crowded ward?",
        "ground_truth": "SELECT alderman_name_suffix, alderman_first_name, alderman_last_name FROM Ward ORDER BY population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT alderman FROM wards ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2806": {
        "db_id": "professional_basketball",
        "question": "Which team(s) had 90% games won. List the coach ID for the team and year played.",
        "ground_truth": "SELECT DISTINCT T2.name, T1.year, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T2.won AS REAL) * 100 / T2.games > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coach_id, year_played \nFROM teams \nWHERE games_won / games_played = 0.9;"
        ],
        "rule_sql": []
    },
    "2564": {
        "db_id": "app_store",
        "question": "Name the Apps with a sentiment objectivity of 0.3 and include their number of installs.",
        "ground_truth": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = 0.3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT App, Installs FROM apps WHERE Sentiment_Objectivity = '0.3';"
        ],
        "rule_sql": []
    },
    "3661": {
        "db_id": "authors",
        "question": "How many author published papers in the 'IEEE Computer' journal?",
        "ground_truth": "SELECT COUNT(T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T3.FullName = 'IEEE Computer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM authors WHERE journal = 'IEEE Computer';"
        ],
        "rule_sql": []
    },
    "5013": {
        "db_id": "olympics",
        "question": "Who is the heaviest athlete from Russia?",
        "ground_truth": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Russia' ORDER BY T3.weight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM athletes WHERE country = 'Russia' ORDER BY weight ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2476": {
        "db_id": "shooting",
        "question": "Of all male officers, what percentage are black officers?",
        "ground_truth": "SELECT CAST(SUM(race = 'B') AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM officers WHERE gender = 'M')) AS percentage_black_male_officers FROM officers WHERE race = 'Black';"
        ],
        "rule_sql": []
    },
    "7612": {
        "db_id": "hockey",
        "question": "List the first Name and last name of all players not from USA and who are born in 1990 .",
        "ground_truth": "SELECT firstName, lastName FROM Master WHERE birthYear = 1990 AND birthCountry != 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM players WHERE country = 'USA' AND YEAR(birth_date) = 1990;"
        ],
        "rule_sql": []
    },
    "8515": {
        "db_id": "software_company",
        "question": "How many female customers have an education level of over 11?",
        "ground_truth": "SELECT COUNT(ID) FROM Customers WHERE EDUCATIONNUM > 11 AND SEX = 'Female'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE gender = 'male' AND education > 11;"
        ],
        "rule_sql": []
    },
    "3886": {
        "db_id": "public_review_platform",
        "question": "List the active business ID and its stars of the businesses fall under the category of Fashion.",
        "ground_truth": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Fashion'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, stars FROM businesses WHERE category = 'Fashion' AND active = 1;"
        ],
        "rule_sql": []
    },
    "8946": {
        "db_id": "human_resources",
        "question": "Please list the social security numbers of all the employees who work in California.",
        "ground_truth": "SELECT T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ssn FROM employees WHERE state = 'California';"
        ],
        "rule_sql": []
    },
    "8385": {
        "db_id": "mondial_geo",
        "question": "How many cities in France have a population of more than 100,000?",
        "ground_truth": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN city AS T2 ON T2.Country = T1.Code WHERE T1.Name = 'France' AND T2.Population > 100000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE country = 'France' AND population > 100000"
        ],
        "rule_sql": []
    },
    "2068": {
        "db_id": "music_tracker",
        "question": "Provide the title, release year and the tag associated with the live album that has the highest number of downloads?",
        "ground_truth": "SELECT T1.groupName, T1.groupYear, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'live album' ORDER BY T1.totalSnatched DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, release_year, tag, MAX(downloads) FROM albums WHERE album_type = 'live' GROUP BY title, release_year, tag ORDER BY downloads DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1669": {
        "db_id": "car_retails",
        "question": "Calculate the total price of shipped orders belonging to Land of Toys Inc. under the classic car line of products.",
        "ground_truth": "SELECT SUM(t3.priceEach * t3.quantityOrdered) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN orderdetails AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN products AS t4 ON t3.productCode = t4.productCode WHERE t4.productLine = 'Classic Cars' AND t1.customerName = 'Land of Toys Inc.' AND t2.status = 'Shipped'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price) FROM orders o \nJOIN customers c ON o.customer_id = c.customer_id \nJOIN products p ON o.product_id = p.product_id \nWHERE c.customer_name = 'Land of Toys Inc.' \nAND p.product_line = 'Classic Cars' \nAND o.status = 'Shipped';"
        ],
        "rule_sql": []
    },
    "2441": {
        "db_id": "superstore",
        "question": "How many furniture products were ordered at central superstore?",
        "ground_truth": "SELECT COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Category = 'Furniture'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'furniture' AND store = 'central superstore';"
        ],
        "rule_sql": []
    },
    "188": {
        "db_id": "book_publishing_company",
        "question": "For each publisher, state the type of titles they published order by the publisher name.",
        "ground_truth": "SELECT DISTINCT T2.pub_name, T1.type FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T2.pub_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, type FROM titles ORDER BY publisher;"
        ],
        "rule_sql": []
    },
    "173": {
        "db_id": "book_publishing_company",
        "question": "Provide a list of titles together with its publisher name for all publishers located in the USA.",
        "ground_truth": "SELECT T1.title, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, publisher_name FROM books JOIN publishers ON books.publisher_id = publishers.publisher_id WHERE publishers.country = 'USA';"
        ],
        "rule_sql": []
    },
    "8133": {
        "db_id": "university",
        "question": "How many universities scored 40 in teaching criteria?",
        "ground_truth": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.score = 40 AND T1.criteria_name = 'Teaching' AND T2.score = 40",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE teaching = 40;"
        ],
        "rule_sql": []
    },
    "6018": {
        "db_id": "books",
        "question": "How many customers ordered the oldest book?",
        "ground_truth": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id GROUP BY T1.publication_date ORDER BY T1.publication_date ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE book_id = (SELECT MIN(book_id) FROM books);"
        ],
        "rule_sql": []
    },
    "8531": {
        "db_id": "software_company",
        "question": "List down the customer's geographic identifier who are handlers or cleaners.",
        "ground_truth": "SELECT GEOID FROM Customers WHERE OCCUPATION = 'Handlers-cleaners'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM customers WHERE occupation = 'handler' OR occupation = 'cleaner';"
        ],
        "rule_sql": []
    },
    "1771": {
        "db_id": "restaurant",
        "question": "How many cities are there in Monterey?",
        "ground_truth": "SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'monterey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE name = 'Monterey';"
        ],
        "rule_sql": []
    },
    "2051": {
        "db_id": "music_tracker",
        "question": "What are the tags of the top 5 least downloaded live albums?",
        "ground_truth": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT tags FROM albums WHERE type = 'live' ORDER BY downloads ASC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "1541": {
        "db_id": "synthea",
        "question": "Among the male patients, list down 5 birth dates of patients taking the medication \"Penicillin V Potassium 250 MG\".",
        "ground_truth": "SELECT DISTINCT T2.birthdate FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND T2.gender = 'M' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_date FROM patients WHERE gender = 'Male' AND medication = 'Penicillin V Potassium 250 MG' LIMIT 5;"
        ],
        "rule_sql": []
    },
    "7737": {
        "db_id": "hockey",
        "question": "What are the awards won by the coach who coached the team with the most number of victories of all time? Indicate the choach ID.",
        "ground_truth": "SELECT DISTINCT T2.coachID, T1.award FROM AwardsCoaches AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID GROUP BY T2.coachID, T1.award ORDER BY SUM(T2.w) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coach_id, awards FROM coaches ORDER BY team_wins DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4198": {
        "db_id": "simpson_episodes",
        "question": "Among the episode that get more than 950 votes, how many of the episodes were nominated for the 'Outstanding Voice-Over Performance Award in 2009'? Find the percentage of the episodes.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.award = 'Outstanding Voice-Over Performance' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 950 AND T1.year = 2009;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN award = 'Outstanding Voice-Over Performance Award in 2009' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM episodes\nWHERE votes > 950\nAND award = 'Outstanding Voice-Over Performance Award in 2009';"
        ],
        "rule_sql": []
    },
    "3859": {
        "db_id": "public_review_platform",
        "question": "How many Yelp_Business under the category of \"Food\" are good for kids?",
        "ground_truth": "SELECT COUNT(T3.stars) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.category_name LIKE 'Food' AND T5.attribute_name LIKE 'Good for Kids' AND T4.attribute_value LIKE 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Business WHERE category = 'Food' AND good_for_kids = 'yes';"
        ],
        "rule_sql": []
    },
    "4675": {
        "db_id": "disney",
        "question": "List the directors of movies that feature a song.",
        "ground_truth": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song IS NOT NULL GROUP BY T2.director",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies WHERE song IS NOT NULL"
        ],
        "rule_sql": []
    },
    "2773": {
        "db_id": "european_football_1",
        "question": "Which country had the game that Away team made the most goals?",
        "ground_truth": "SELECT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division GROUP BY T2.country ORDER BY SUM(T1.FTAG) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT home_team_country, MAX(away_team_score) as max_goals FROM games GROUP BY home_team_country ORDER BY max_goals DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7788": {
        "db_id": "hockey",
        "question": "What is the number of players whose last name is Green that played in the league but not coached?",
        "ground_truth": "SELECT COUNT(playerID) FROM Master WHERE lastName = 'Green' AND coachID IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE last_name = 'Green' AND player_id NOT IN (SELECT player_id FROM coaches);"
        ],
        "rule_sql": []
    },
    "8462": {
        "db_id": "mondial_geo",
        "question": "Provide a list of all organisations with headquarters in London?",
        "ground_truth": "SELECT Name FROM organization WHERE City = 'London'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM organisations WHERE headquarters = 'London';"
        ],
        "rule_sql": []
    },
    "3629": {
        "db_id": "authors",
        "question": "Tell the number of papers that were presented at \"International Symposium on Software Testing and Analysis\" conference.",
        "ground_truth": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Symposium on Software Testing and Analysis'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE conference = 'International Symposium on Software Testing and Analysis';"
        ],
        "rule_sql": []
    },
    "2418": {
        "db_id": "superstore",
        "question": "Among the customers in South superstore, which customers ordered more than 3 times in 2015? State the name of the customers.",
        "ground_truth": "SELECT DISTINCT T2.`Customer Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE STRFTIME('%Y', T1.`Order Date`) = '2015' GROUP BY T2.`Customer Name` HAVING COUNT(T2.`Customer Name`) > 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT CustomerName \nFROM Customers \nWHERE Region = 'South' \nAND COUNT(OrderID) > 3 \nAND YEAR(OrderDate) = 2015;"
        ],
        "rule_sql": []
    },
    "2858": {
        "db_id": "professional_basketball",
        "question": "How many players with the first name Joe were drafted in 1970?",
        "ground_truth": "SELECT COUNT(DISTINCT playerID) FROM draft WHERE firstName = 'Joe' AND draftYear = 1970",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE first_name = 'Joe' AND draft_year = 1970;"
        ],
        "rule_sql": []
    },
    "7423": {
        "db_id": "works_cycles",
        "question": "What is the e-mail address of the employee who switched departments for the most times?",
        "ground_truth": "SELECT T2.EmailAddress FROM EmployeeDepartmentHistory AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T2.BusinessEntityID ORDER BY COUNT(T1.DepartmentID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM employees ORDER BY COUNT(department_changes) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7611": {
        "db_id": "image_and_language",
        "question": "What is the average width and height of the objects in image ID 47? List their object classes as well.",
        "ground_truth": "SELECT T2.OBJ_CLASS, AVG(T1.W), AVG(T1.H) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 47 GROUP BY T2.OBJ_CLASS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT object_class, AVG(width) as avg_width, AVG(height) as avg_height \nFROM objects \nWHERE image_id = 47 \nGROUP BY object_class;"
        ],
        "rule_sql": []
    },
    "6256": {
        "db_id": "coinmarketcap",
        "question": "List all the inactive coins and state the last date of its transaction?",
        "ground_truth": "SELECT T1.NAME, MAX(T2.DATE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T1.status = 'inactive' ORDER BY T2.DATE DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coin_name, MAX(transaction_date) as last_transaction_date \nFROM coins \nWHERE status = 'active' \nGROUP BY coin_name;"
        ],
        "rule_sql": []
    },
    "8772": {
        "db_id": "chicago_crime",
        "question": "Among all the incidents with no arrest made, what is the percentage of them having a generic description of \"BATTERY\" in the IUCR classification?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.primary_description = 'BATTERY' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.arrest = 'FALSE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN iucr_description = 'BATTERY' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM incidents\nWHERE arrest_made = 'false';"
        ],
        "rule_sql": []
    },
    "2487": {
        "db_id": "shooting",
        "question": "Which near-death incident did a policeman by the name of Ruben Fredirick look into? What is the victim in this incident's race and gender?",
        "ground_truth": "SELECT T1.case_number, T3.race, T3.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number INNER JOIN subjects AS T3 ON T1.case_number = T3.case_number WHERE T2.first_name = 'Fredirick' AND T2.last_name = 'Ruben'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT incident_type, victim_race, victim_gender \nFROM incidents \nWHERE investigating_officer = 'Ruben Fredirick' \nAND incident_type LIKE '%death%' \nORDER BY incident_date DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2762": {
        "db_id": "european_football_1",
        "question": "What is the name of the division that has had the lowest number of draft matches in the 2019 season?",
        "ground_truth": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T1.FTR = 'D' GROUP BY T2.division ORDER BY COUNT(FTR) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division_name \nFROM divisions \nWHERE season = 2019 \nORDER BY COUNT(draft_matches) ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6002": {
        "db_id": "books",
        "question": "How many of the customer addresses are inactive?",
        "ground_truth": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T1.status_id = T2.status_id WHERE T2.address_status = 'Inactive'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM addresses WHERE status = 'active';"
        ],
        "rule_sql": []
    },
    "8456": {
        "db_id": "mondial_geo",
        "question": "What kind of mountain is Ampato? Which province and nation does this mountain belong to?",
        "ground_truth": "SELECT T1.Type, T3.Name, T4.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T3.Country = T4.Code WHERE T1.Name = 'Ampato'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT mountain_type, province, country FROM mountains WHERE name = 'Ampato';"
        ],
        "rule_sql": []
    },
    "6755": {
        "db_id": "retails",
        "question": "Among the products that have a retail price greater than 1,000, how many products were shipped via ship?",
        "ground_truth": "SELECT COUNT(T1.ps_suppkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_retailprice > 1000 AND T2.l_shipmode = 'SHIP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE retail_price > 1000 AND shipping_method = 'ship';"
        ],
        "rule_sql": []
    },
    "1873": {
        "db_id": "soccer_2016",
        "question": "Among the players out in match ID 392187, calculate the percentage of players out by bowl.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Out_Name = 'bowled' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T1.Match_Id = 392187",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM dismissals WHERE match_id = 392187) AS percentage_bowled\nFROM dismissals \nWHERE match_id = 392187 AND dismissal_kind = 'bowled';"
        ],
        "rule_sql": []
    },
    "865": {
        "db_id": "cs_semester",
        "question": "Which student failed the course Intro to Database 2? Please give his or her full name.",
        "ground_truth": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade IS NULL AND T3.name = 'Intro to Database 2'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.first_name, s.last_name \nFROM students s\nJOIN grades g ON s.student_id = g.student_id\nJOIN courses c ON g.course_id = c.course_id\nWHERE c.course_name = 'Intro to Database 2' AND g.grade > 60;"
        ],
        "rule_sql": []
    },
    "5124": {
        "db_id": "address",
        "question": "Name the bad alias of Geneva, AL.",
        "ground_truth": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Geneva' AND T2.state = 'AL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT alias FROM cities WHERE name = 'Geneva' AND state = 'AL' AND is_bad = 1;"
        ],
        "rule_sql": []
    },
    "6832": {
        "db_id": "retails",
        "question": "List the phone number of the customer who placed orders with a total price of more than $300,000.",
        "ground_truth": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number FROM customers WHERE total_price > 300000"
        ],
        "rule_sql": []
    },
    "4780": {
        "db_id": "legislator",
        "question": "Which historical legislators are members of the National Greenbacker party? Write their first and last names.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'National Greenbacker'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators WHERE party = 'National Greenbacker'"
        ],
        "rule_sql": []
    },
    "4865": {
        "db_id": "legislator",
        "question": "How many Catholic legislators do not have an account on ballotpedia.org?",
        "ground_truth": "SELECT COUNT(bioguide_id) FROM historical WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators l JOIN religions r ON l.religion_id = r.id WHERE r.name = 'Catholic' AND l.ballotpedia_account IS NULL;"
        ],
        "rule_sql": []
    },
    "8092": {
        "db_id": "university",
        "question": "Show the name of country id 66.",
        "ground_truth": "SELECT country_name FROM country WHERE id = 66",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM countries WHERE country_id = 66;"
        ],
        "rule_sql": []
    },
    "9324": {
        "db_id": "movie_3",
        "question": "Which category does BABY HALL film belong to?",
        "ground_truth": "SELECT T3.`name` FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BABY HALL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM films WHERE title = 'BABY HALL';"
        ],
        "rule_sql": []
    },
    "2843": {
        "db_id": "professional_basketball",
        "question": "From 1962 to 2011, how many coaches received both NBA and ABA awards?",
        "ground_truth": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'ABA Coach of the Year' AND coachID IN ( SELECT coachID FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'NBA Coach of the Year' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM coaches \nWHERE award_year BETWEEN 1962 AND 2011 \nAND award_type IN ('NBA', 'ABA');"
        ],
        "rule_sql": []
    },
    "5572": {
        "db_id": "menu",
        "question": "Among the menu pages on which the dish \"Chicken gumbo\" had appeared, what is the menu ID of the one with the biggest width?",
        "ground_truth": "SELECT T1.id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Chicken gumbo' ORDER BY T1.full_width DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_id FROM menu_pages WHERE dish_name = 'Chicken gumbo' ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4255": {
        "db_id": "simpson_episodes",
        "question": "Please indicate the keywords of the episode that won the Primetime Emmy Award category.",
        "ground_truth": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Primetime Emmy';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keywords FROM episodes WHERE award_category = 'Primetime Emmy Award' AND won_award = 'yes'"
        ],
        "rule_sql": []
    },
    "3864": {
        "db_id": "public_review_platform",
        "question": "How many Yelp_Business close after 8PM on Mondays?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Monday' AND T1.closing_time > '8PM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Business WHERE hours LIKE '%Monday%' AND hours LIKE '%8:00 PM%';"
        ],
        "rule_sql": []
    },
    "4325": {
        "db_id": "simpson_episodes",
        "question": "State the birth place of co-executive producer for nominee of \"Outstanding Animated Program (For Programming Less Than One Hour)\" award.",
        "ground_truth": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.role = 'co-executive producer';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_place FROM people WHERE role = 'co-executive producer' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)'"
        ],
        "rule_sql": []
    },
    "4869": {
        "db_id": "legislator",
        "question": "What is the full name of the oldest legislator?",
        "ground_truth": "SELECT first_name, last_name FROM historical ORDER BY birthday_bio LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators ORDER BY birth_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2709": {
        "db_id": "regional_sales",
        "question": "How much more is the Florida store's computer product unit price than the Texas store?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.State = 'Florida' THEN T2.`Unit Price` ELSE 0 END) - SUM(CASE WHEN T3.State = 'Texas' THEN T2.`Unit Price` ELSE 0 END) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T1.`Product Name` = 'Computers'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (florida_price - texas_price) AS price_difference FROM stores WHERE product = 'computer' AND store_location IN ('Florida', 'Texas')"
        ],
        "rule_sql": []
    },
    "8082": {
        "db_id": "university",
        "question": "What are the names of the universities that got 98 in teaching in 2011?",
        "ground_truth": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score = 98",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE teaching = 98 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "485": {
        "db_id": "movies_4",
        "question": "What is the ratio between male and female cast members of the movie 'Iron Man?' Count how many have unspecified genders.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS RATIO , COUNT(CASE WHEN T3.gender = 'Unspecified' THEN 1 ELSE NULL END) AS UNGENDERS FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Iron Man'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN gender = 'Male' THEN 1 END) AS male_count,\n    COUNT(CASE WHEN gender = 'Female' THEN 1 END) AS female_count,\n    COUNT(CASE WHEN gender IS NULL OR gender = '' THEN 1 END) AS unspecified_count\nFROM cast_members \nWHERE movie_title = 'Iron Man';"
        ],
        "rule_sql": []
    },
    "1714": {
        "db_id": "restaurant",
        "question": "How many Thai restaurants can be found in San Pablo Ave, Albany?",
        "ground_truth": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street_name = 'san pablo ave'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE cuisine = 'Thai' AND address LIKE '%San Pablo Ave%' AND city = 'Albany';"
        ],
        "rule_sql": []
    },
    "2769": {
        "db_id": "european_football_1",
        "question": "When did the first match that score more than 10 goals happen?",
        "ground_truth": "SELECT MIN(Date) FROM matchs WHERE FTHG + FTAG > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(date) FROM matches WHERE home_goals + away_goals > 10;"
        ],
        "rule_sql": []
    },
    "3938": {
        "db_id": "public_review_platform",
        "question": "What city does the business have a business hour from 10 am to 12 pm on Sunday?",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time LIKE '10AM' AND T2.closing_time LIKE '12PM' AND T3.day_of_week LIKE 'Sunday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM businesses WHERE business_hours LIKE '%Sunday%10 am%12 pm%';"
        ],
        "rule_sql": []
    },
    "5985": {
        "db_id": "books",
        "question": "How many customers are from Australia?",
        "ground_truth": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address AS T2 ON T2.address_id = T1.address_id INNER JOIN country AS T3 ON T3.country_id = T2.country_id WHERE T3.country_name = 'Australia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE country = 'Canada';"
        ],
        "rule_sql": []
    },
    "428": {
        "db_id": "movies_4",
        "question": "How many female characters are there in the movie \"Spider-Man 3\"?",
        "ground_truth": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Spider-Man 3' AND T3.gender = 'Female'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM characters WHERE gender = 'female' AND movie_title = 'Spider-Man 3';"
        ],
        "rule_sql": []
    },
    "8561": {
        "db_id": "software_company",
        "question": "List down the geographic identifier with an number of inhabitants less than 30.",
        "ground_truth": "SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT geographic_identifier FROM population_data WHERE number_of_inhabitants > 30;"
        ],
        "rule_sql": []
    },
    "2038": {
        "db_id": "soccer_2016",
        "question": "Who is the winning team in a match held on April 26, 2009 with a winning margin of 6 points?",
        "ground_truth": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T2.Win_Margin = 6 AND T2.Match_Date = '2009-04-26'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT winning_team FROM matches WHERE match_date = '2009-04-26' AND winning_margin = 6;"
        ],
        "rule_sql": []
    },
    "732": {
        "db_id": "movie",
        "question": "Which actor played the role of Joker in the movie Batman?",
        "ground_truth": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.`Character Name` = 'Joker'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE movie_title = 'Batman' AND role_name = 'Joker';"
        ],
        "rule_sql": []
    },
    "4054": {
        "db_id": "public_review_platform",
        "question": "Provide business ids with opening hours 10AM on Saturday.",
        "ground_truth": "SELECT DISTINCT business_id FROM Business_Hours WHERE day_id = 6 AND opening_time = '10AM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM business_hours WHERE day_of_week = 'Saturday' AND opening_time = '10:00:00';"
        ],
        "rule_sql": []
    },
    "3083": {
        "db_id": "cars",
        "question": "Provide the engine displacement status of the $37443.85589 car.",
        "ground_truth": "SELECT T1.displacement FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '37443.85589'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT displacement FROM cars WHERE price = 37443.85589;"
        ],
        "rule_sql": []
    },
    "1003": {
        "db_id": "computer_student",
        "question": "List down all the person IDs who taught course ID of 18.",
        "ground_truth": "SELECT p_id FROM taughtBy WHERE course_id = 18",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT person_id FROM teaches WHERE course_id = 18"
        ],
        "rule_sql": []
    },
    "3202": {
        "db_id": "donor",
        "question": "Among the donations with a portion using account credits redemption, how many of them are for projects created by teachers working in a public year-round school?",
        "ground_truth": "SELECT COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_acct_credit = 't' AND T1.school_year_round = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM donations d\nJOIN projects p ON d.project_id = p.id\nJOIN teachers t ON p.teacher_id = t.id\nJOIN schools s ON t.school_id = s.id\nWHERE d.account_credits_redemption > 0\nAND s.year_round = 'public'\nAND s.school_type = 'year-round';"
        ],
        "rule_sql": []
    },
    "4050": {
        "db_id": "public_review_platform",
        "question": "How many active businesses are opened during late afternoon in the Phoenix city? List out the top 3 categories name for these businesses.",
        "ground_truth": "SELECT DISTINCT T4.category_name FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.city = 'Phoenix' AND T1.opening_time >= '5PM' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, COUNT(*) as business_count \nFROM businesses \nWHERE city = 'Phoenix' \nAND opening_time > '12:00:00' \nGROUP BY category \nORDER BY business_count DESC \nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "8541": {
        "db_id": "software_company",
        "question": "In widowed male customers ages from 40 to 60, how many of them has an income ranges from 3000 and above?",
        "ground_truth": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE gender = 'male' AND marital_status = 'widowed' AND age BETWEEN 40 AND 60 AND income >= 3000;"
        ],
        "rule_sql": []
    },
    "7306": {
        "db_id": "works_cycles",
        "question": "What is the product that has the highest average rating from the mountain product line?",
        "ground_truth": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'M' GROUP BY T2.Name ORDER BY CAST(SUM(T1.Rating) AS REAL) / COUNT(T1.ProductID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, AVG(rating) as avg_rating FROM products WHERE product_line = 'Mountain' GROUP BY product_name ORDER BY avg_rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8115": {
        "db_id": "university",
        "question": "Give the student staff ratio of university ID 35.",
        "ground_truth": "SELECT student_staff_ratio FROM university_year WHERE university_id = 35",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_count / staff_count AS student_staff_ratio FROM universities WHERE university_id = 35;"
        ],
        "rule_sql": []
    },
    "3591": {
        "db_id": "authors",
        "question": "Please list the titles of any two papers that Jundu has written.",
        "ground_truth": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name LIKE 'Jun du%' LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE author = 'Jundu' LIMIT 2;"
        ],
        "rule_sql": []
    },
    "6961": {
        "db_id": "ice_hockey_draft",
        "question": "Which team does Andreas Jamtin belong to?",
        "ground_truth": "SELECT DISTINCT T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Andreas Jamtin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM players WHERE first_name = 'Andreas' AND last_name = 'Jamtin';"
        ],
        "rule_sql": []
    },
    "1300": {
        "db_id": "law_episode",
        "question": "What is the title of the 3 worst rated episodes?",
        "ground_truth": "SELECT title FROM Episode ORDER BY rating LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes ORDER BY rating ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "6259": {
        "db_id": "coinmarketcap",
        "question": "For all coins with average price more than $1000. State the current status of the coin.",
        "ground_truth": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT status FROM coins WHERE price > 1000;"
        ],
        "rule_sql": []
    },
    "3040": {
        "db_id": "shakespeare",
        "question": "What are the character names in paragraph 3?",
        "ground_truth": "SELECT DISTINCT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM paragraphs WHERE paragraph_id = 3;"
        ],
        "rule_sql": []
    },
    "3061": {
        "db_id": "shakespeare",
        "question": "List the chapter ID of the works with a year greater than the 89% of average year of all listed works of Shakespeare.",
        "ground_truth": "SELECT T2.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.DATE > ( SELECT AVG(DATE) FROM works ) * 0.89",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT chapter_id FROM works WHERE year > (SELECT AVG(year) * 0.89 FROM works WHERE author = 'Shakespeare')"
        ],
        "rule_sql": []
    },
    "7061": {
        "db_id": "works_cycles",
        "question": "Among the active male employees, how many of them are paid with the highest frequency?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.Gender = 'M' AND T1.PayFrequency = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM employees \nWHERE gender = 'Male' \nAND status = 'Active' \nAND salary_frequency = (SELECT MAX(salary_frequency) FROM employees)"
        ],
        "rule_sql": []
    },
    "4047": {
        "db_id": "public_review_platform",
        "question": "What is the average year needed by a user with uber fans to become an elite user?",
        "ground_truth": "SELECT CAST(SUM(T2.year_id - T1.user_yelping_since_year) AS REAL) / COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_fans = 'Uber'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(join_year - registration_year) \nFROM users \nWHERE uber_fans > 0 AND elite_status = 1;"
        ],
        "rule_sql": []
    },
    "7004": {
        "db_id": "works_cycles",
        "question": "For all the purchase order transactions, name all the products with low quality.",
        "ground_truth": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'L' AND T2.TransactionType = 'P' ORDER BY T1.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE quality = 'low' AND transaction_type = 'purchase_order';"
        ],
        "rule_sql": []
    },
    "8898": {
        "db_id": "cookbook",
        "question": "What are the optional ingredients for Warm Chinese Chicken Salad?",
        "ground_truth": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Warm Chinese Chicken Salad' AND T2.optional = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ingredient_name FROM ingredients WHERE dish_name = 'Warm Chinese Chicken Salad' AND optional = 'yes';"
        ],
        "rule_sql": []
    },
    "2823": {
        "db_id": "professional_basketball",
        "question": "Among the coaches who have served more than 2 NBA teams, during which coach's period of coaching, a team has the least numbers of games lost in the post-season games?",
        "ground_truth": "SELECT coachID FROM coaches WHERE lgID = 'NBA' AND post_wins != 0 AND post_losses != 0 AND coachID IN ( SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING COUNT(tmID) > 2 ) ORDER BY post_losses ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.coach_name, t.team_name, MIN(p.losses) as min_losses\nFROM coaches c\nJOIN teams t ON c.team_id = t.team_id\nJOIN post_season p ON t.team_id = p.team_id\nWHERE c.team_count > 2\nGROUP BY c.coach_name, t.team_name\nORDER BY min_losses ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8799": {
        "db_id": "food_inspection",
        "question": "Which business was the first one to get a low risk violation because of \"Permit license or inspection report not posted\"? Give the name of the business.",
        "ground_truth": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = ( SELECT MIN(`date`) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM businesses WHERE violation_description = 'Permit license or inspection report not posted' ORDER BY violation_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3807": {
        "db_id": "public_review_platform",
        "question": "How many compliments received from medium users that Phoenix city achieved?",
        "ground_truth": "SELECT COUNT(T1.number_of_compliments) FROM Users_Compliments AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city LIKE 'Phoenix' AND T1.number_of_compliments LIKE 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users u JOIN compliments c ON u.user_id = c.receiver_id WHERE u.city = 'Phoenix' AND u.user_type = 'medium';"
        ],
        "rule_sql": []
    },
    "2457": {
        "db_id": "superstore",
        "question": "List down the sales, profit, and subcategories of the product ordered in the order ID US-2011-126571 in the East region.",
        "ground_truth": "SELECT T1.Sales, T1.Profit, T2.`Sub-Category` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'US-2011-126571' AND T2.Region = 'East'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales, profit, subcategories \nFROM orders \nWHERE order_id = 'US-2011-126571' AND region = 'East'"
        ],
        "rule_sql": []
    },
    "4908": {
        "db_id": "legislator",
        "question": "List down the MapLight ID of the representatives in Maine.",
        "ground_truth": "SELECT T1.maplight_id FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'ME' GROUP BY T1.maplight_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MapLight_ID FROM representatives WHERE state = 'Maine';"
        ],
        "rule_sql": []
    },
    "7608": {
        "db_id": "image_and_language",
        "question": "Count the number of 'dress' object classes and include their X and Y coordinates in image ID 1764.",
        "ground_truth": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1764 AND T2.OBJ_CLASS = 'dress'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*), x, y FROM objects WHERE object_class = 'dress' AND image_id = 1764;"
        ],
        "rule_sql": []
    },
    "5341": {
        "db_id": "beer_factory",
        "question": "What is the average review given by a subscriber?",
        "ground_truth": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM reviews WHERE user_type = 'subscriber';"
        ],
        "rule_sql": []
    },
    "4071": {
        "db_id": "public_review_platform",
        "question": "Write down the number of running business with each review count in Cave Creek city.",
        "ground_truth": "SELECT SUM(CASE WHEN review_count = 'High' THEN 1 ELSE 0 END) AS high , SUM(CASE WHEN review_count = 'Medium' THEN 1 ELSE 0 END) AS Medium , SUM(CASE WHEN review_count = 'Low' THEN 1 ELSE 0 END) AS low FROM Business WHERE city = 'Cave Creek' AND active = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT review_count, COUNT(*) as business_count FROM business WHERE city = 'Cave Creek' GROUP BY review_count ORDER BY review_count;"
        ],
        "rule_sql": []
    },
    "8935": {
        "db_id": "human_resources",
        "question": "Which position has a lower minimum salary, Account Representative or Trainee?",
        "ground_truth": "SELECT positiontitle FROM position WHERE positiontitle = 'Account Representative' OR positiontitle = 'Trainee' ORDER BY minsalary ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position, MIN(salary) as min_salary \nFROM employees \nWHERE position IN ('Account Representative', 'Trainee') \nGROUP BY position \nORDER BY min_salary ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6921": {
        "db_id": "ice_hockey_draft",
        "question": "Among the players that weigh more than 90 kg, how many of them have a position of defense?",
        "ground_truth": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.position_info = 'D'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE weight > 90 AND position = 'defense';"
        ],
        "rule_sql": []
    },
    "2634": {
        "db_id": "regional_sales",
        "question": "Which order number has the highest unit price?",
        "ground_truth": "SELECT OrderNumber FROM `Sales Orders` WHERE REPLACE(`Unit Price`, ',', '') = ( SELECT REPLACE(`Unit Price`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Price`, ',', '') DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_id, MAX(unit_price) FROM orders;"
        ],
        "rule_sql": []
    },
    "8131": {
        "db_id": "university",
        "question": "Give the name of the university with the most number of students in 2015.",
        "ground_truth": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_name FROM universities ORDER BY student_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6075": {
        "db_id": "books",
        "question": "Which book has the most number of pages?",
        "ground_truth": "SELECT title FROM book ORDER BY num_pages DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books ORDER BY pages ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8606": {
        "db_id": "chicago_crime",
        "question": "Who is the commander of Morgan Park district?",
        "ground_truth": "SELECT commander FROM District WHERE district_name = 'Morgan Park'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM commanders WHERE district = 'Morgan Park';"
        ],
        "rule_sql": []
    },
    "3044": {
        "db_id": "shakespeare",
        "question": "What is the percentage of historical works that have not fewer than five scenes in the 1500s?",
        "ground_truth": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN scenes >= 5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM historical_works\nWHERE year BETWEEN 1500 AND 1599;"
        ],
        "rule_sql": []
    },
    "7435": {
        "db_id": "works_cycles",
        "question": "Which product cost the least in 2013?",
        "ground_truth": "SELECT ProductID FROM ProductCostHistory WHERE StartDate LIKE '2013%' ORDER BY StandardCost LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, MIN(price) FROM products WHERE year = 2013;"
        ],
        "rule_sql": []
    },
    "1745": {
        "db_id": "restaurant",
        "question": "Please indicate which labels have the city located in Santa Cruz.",
        "ground_truth": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'Santa Cruz county'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT label FROM cities WHERE city = 'Santa Cruz';"
        ],
        "rule_sql": []
    },
    "7801": {
        "db_id": "hockey",
        "question": "State the player ID and coach ID of person who have become coach after retirement.",
        "ground_truth": "SELECT playerID, coachID FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_id, coach_id FROM players WHERE retirement_date < coach_start_date"
        ],
        "rule_sql": []
    },
    "30": {
        "db_id": "movie_platform",
        "question": "How much is the popularity of the movie that has the highest popularity between 1920 to 1929 and when did the movie received its first rating score of 1 from the users who were a paying subscriber when they rated the movie ?",
        "ground_truth": "SELECT MAX(T2.movie_popularity), MIN(T1.rating_timestamp_utc) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1920 AND 1929 AND T1.rating_score = 1 AND T1.user_has_payment_method = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    m.popularity,\n    MIN(r.rating_date) AS first_rating_date\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nJOIN \n    users u ON r.user_id = u.user_id\nWHERE \n    m.release_year BETWEEN 1920 AND 1929\n    AND r.rating_score = 1\n    AND u.subscription_status = 'paying'\nGROUP BY \n    m.movie_id, m.popularity\nORDER BY \n    m.popularity DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2064": {
        "db_id": "music_tracker",
        "question": "Provide the name of the artist who released his or her Single-Table in 2012 with the highest number of downloads. Name the Single-Table title as well.",
        "ground_truth": "SELECT artist, groupName FROM torrents WHERE groupYear = 2012 AND releaseType LIKE 'Single' ORDER BY totalSnatched DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name, title \nFROM Single-Table \nWHERE release_year = 2012 \nORDER BY downloads DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "167": {
        "db_id": "book_publishing_company",
        "question": "Which date has the most ordered quantity? What is the total order quantity on that day?",
        "ground_truth": "SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_date, SUM(quantity) as total_quantity FROM orders GROUP BY order_date ORDER BY order_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5237": {
        "db_id": "beer_factory",
        "question": "In which city is the brewery AJ Stephans Beverages located?",
        "ground_truth": "SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM breweries WHERE name = 'AJ Stephans Beverages';"
        ],
        "rule_sql": []
    },
    "2631": {
        "db_id": "regional_sales",
        "question": "Which sales team name has the least orders in 2019?",
        "ground_truth": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.`Sales Team` ORDER BY COUNT(T1.OrderNumber) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, COUNT(*) as order_count \nFROM sales_teams \nJOIN orders ON sales_teams.team_id = orders.team_id \nWHERE strftime('%Y', order_date) = '2019' \nGROUP BY team_name \nORDER BY order_count ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2615": {
        "db_id": "regional_sales",
        "question": "Calculate the average net profit of bar tools which has ordered quantity exceed 5.",
        "ground_truth": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Bar Tools' AND T1.`Order Quantity` > 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(net_profit) FROM bar_tools WHERE ordered_quantity > 5;"
        ],
        "rule_sql": []
    },
    "7526": {
        "db_id": "image_and_language",
        "question": "Identify the border's coordinates on the X and Y axes that enclose a folk in image no. 6.",
        "ground_truth": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 6 AND T2.OBJ_CLASS = 'folk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT x_coordinate, y_coordinate FROM borders WHERE image_id = 6 AND folk_name = 'folk';"
        ],
        "rule_sql": []
    },
    "6905": {
        "db_id": "retails",
        "question": "Which country has the least number of suppliers?",
        "ground_truth": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Country, COUNT(*) as SupplierCount FROM Suppliers GROUP BY Country ORDER BY SupplierCount ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9173": {
        "db_id": "movie_3",
        "question": "How many actors starred in the film id 508?",
        "ground_truth": "SELECT COUNT(actor_id) FROM film_actor WHERE film_id = 508",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actors WHERE film_id = 508;"
        ],
        "rule_sql": []
    },
    "2427": {
        "db_id": "superstore",
        "question": "In which segment does the customer who purchased the product from the east superstore with the highest original price belong?",
        "ground_truth": "SELECT T2.Segment FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T1.Region = 'East' ORDER BY (T1.Sales / (1 - T1.Discount)) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT segment FROM customers WHERE customer_id = (SELECT customer_id FROM orders WHERE store = 'east superstore' ORDER BY original_price ASC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "7719": {
        "db_id": "hockey",
        "question": "What is the percentage of winning rate of improvement since Alain Vigneault became the coach of Vancouver Canucks in 2006 season?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.year = 2006 THEN CAST(T1.W AS REAL) * 100 / (T1.W + T1.L) ELSE 0 END) - ( SELECT CAST(W AS REAL) * 100 / (W + L) FROM Teams WHERE year = '2005' AND name = 'Vancouver Canucks' ) FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.name = 'Vancouver Canucks' AND T3.firstName = 'Alain' AND T3.lastName = 'Vigneault'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN result = 'W' THEN 1 END) * 100.0 / COUNT(*)) AS winning_percentage\nFROM games\nWHERE team = 'Vancouver Canucks' \nAND coach = 'Alain Vigneault'\nAND season >= 2006;"
        ],
        "rule_sql": []
    },
    "1788": {
        "db_id": "soccer_2016",
        "question": "How many matches were there in May, 2008?",
        "ground_truth": "SELECT COUNT(Match_Id) FROM `Match` WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE month = 'May' AND year = 2008;"
        ],
        "rule_sql": []
    },
    "3417": {
        "db_id": "video_games",
        "question": "What is the name of the publisher that released the most video games in 2007?",
        "ground_truth": "SELECT T3.publisher_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.release_year = 2007 GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) as game_count FROM video_games WHERE year = 2007 GROUP BY publisher ORDER BY game_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3896": {
        "db_id": "public_review_platform",
        "question": "Among the businesses with a category of Accessories, what is the percentage of the business with less than 4 stars?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.stars < 4 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Accessories'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN stars < 4 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM business\nWHERE category = 'Accessories';"
        ],
        "rule_sql": []
    },
    "1026": {
        "db_id": "computer_student",
        "question": "What is the position in the faculty of the professor who teaches the highest number of courses?",
        "ground_truth": "SELECT T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position FROM faculty WHERE professor_id = (SELECT professor_id FROM courses GROUP BY professor_id ORDER BY COUNT(*) DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "1720": {
        "db_id": "restaurant",
        "question": "List every city in San Mateo County.",
        "ground_truth": "SELECT city FROM geographic WHERE county = 'san mateo county'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM cities WHERE county = 'San Francisco'"
        ],
        "rule_sql": []
    },
    "3974": {
        "db_id": "public_review_platform",
        "question": "List down the business ID and user ID who got uber for cool votes.",
        "ground_truth": "SELECT business_id, user_id FROM Reviews WHERE review_votes_cool = 'Uber'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, user_id FROM votes WHERE vote_type = 'cool' AND service = 'uber';"
        ],
        "rule_sql": []
    },
    "5229": {
        "db_id": "address",
        "question": "How many postal points with unique post office types are there in Ohio?",
        "ground_truth": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Ohio' AND T2.type = 'Unique Post Office'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT post_office_type) FROM postal_points WHERE state = 'Ohio';"
        ],
        "rule_sql": []
    },
    "2179": {
        "db_id": "world_development_indicators",
        "question": "How much is the total urban population of middle income countries in 1960?",
        "ground_truth": "SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup LIKE '%middle income' AND T2.Year = 1960 AND T2.IndicatorName = 'Urban population'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(urban_population) FROM countries WHERE income_group = 'middle income' AND year = 1960;"
        ],
        "rule_sql": []
    },
    "8768": {
        "db_id": "chicago_crime",
        "question": "District commander Robert A. Rubio was responsible for how many incidents in January, 2018?",
        "ground_truth": "SELECT SUM(CASE WHEN SUBSTR(T2.date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio' AND SUBSTR(T2.date, 1, 1) = '1'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM incidents WHERE commander = 'Robert A. Rubio' AND date LIKE '2018-02%';"
        ],
        "rule_sql": []
    },
    "9250": {
        "db_id": "movie_3",
        "question": "Give the full name of the actor who acted in the most number of movies?",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM actor ORDER BY COUNT(movie_id) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2": {
        "db_id": "movie_platform",
        "question": "What is the name of the longest movie title? When was it released?",
        "ground_truth": "SELECT movie_title, movie_release_year FROM movies ORDER BY LENGTH(movie_popularity) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, release_year FROM movies ORDER BY LENGTH(title) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1950": {
        "db_id": "soccer_2016",
        "question": "What is the date of the match that has the highest wager on the final result of a game?",
        "ground_truth": "SELECT Match_Date FROM `Match` ORDER BY Win_Margin DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date FROM matches ORDER BY wager DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1688": {
        "db_id": "restaurant",
        "question": "Identify all restaurants in Contra Costa County by id.",
        "ground_truth": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'contra costa county'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT restaurant_id FROM restaurants WHERE county = 'Contra Costa County';"
        ],
        "rule_sql": []
    },
    "1336": {
        "db_id": "law_episode",
        "question": "List out director names that received an award along with the episode number.",
        "ground_truth": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director_name, episode_number FROM directors WHERE award_received = 'Yes';"
        ],
        "rule_sql": []
    },
    "4258": {
        "db_id": "simpson_episodes",
        "question": "Please give the name of the director who achieved the Outstanding Animated Program (For Programming Less Than One Hour) award whose episode title is \"No Loan Again, Naturally\".",
        "ground_truth": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'director' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director_name FROM awards WHERE episode_title = 'No Loan Again, Naturally' AND award_name = 'Outstanding Animated Program (For Programming Less Than One Hour)'"
        ],
        "rule_sql": []
    },
    "3201": {
        "db_id": "donor",
        "question": "Please list the donation messages of the donations for the projects created by a teacher working in a public magnet school in Brooklyn.",
        "ground_truth": "SELECT T2.donation_message FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn' AND T1.school_magnet = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dm.message\nFROM donation_messages dm\nJOIN donations d ON dm.donation_id = d.id\nJOIN projects p ON d.project_id = p.id\nJOIN teachers t ON p.teacher_id = t.id\nJOIN schools s ON t.school_id = s.id\nWHERE s.district = 'Brooklyn'\nAND s.type = 'public magnet school';"
        ],
        "rule_sql": []
    },
    "5123": {
        "db_id": "address",
        "question": "What is the area code of Bishopville, SC?",
        "ground_truth": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Bishopville' AND T2.state = 'SC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT area_code FROM cities WHERE city = 'Bishopville' AND state = 'SC';"
        ],
        "rule_sql": []
    },
    "185": {
        "db_id": "book_publishing_company",
        "question": "Name the Chief Executive Officer and when he/she was hired.",
        "ground_truth": "SELECT T1.fname, T1.lname, T1.hire_date FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Chief Financial Officier'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, hire_date FROM employees WHERE position = 'CEO' ORDER BY name;"
        ],
        "rule_sql": []
    },
    "8130": {
        "db_id": "university",
        "question": "Calculate the average score of Emory University from 2011 to 2016.",
        "ground_truth": "SELECT AVG(T1.score) FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Emory University' AND T1.year BETWEEN 2011 AND 2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(score) FROM university_scores WHERE university = 'Emory University' AND year BETWEEN 2011 AND 2016"
        ],
        "rule_sql": []
    },
    "8215": {
        "db_id": "sales_in_weather",
        "question": "What was the total unit sold for item 10 when the average temperature was below the median temperature?",
        "ground_truth": "SELECT SUM(T5.units) FROM weather AS T4 INNER JOIN sales_in_weather AS T5 ON T4.`date` = T5.`date` INNER JOIN relation AS T6 ON T5.store_nbr = T6.store_nbr WHERE T5.item_nbr = 10 AND T4.tavg < ( SELECT AVG(T1.tavg) FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.`date` = T2.`date` INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 10 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(units_sold) \nFROM sales \nWHERE item_id = 10 \nAND temperature < (SELECT AVG(temperature) FROM sales)"
        ],
        "rule_sql": []
    },
    "6202": {
        "db_id": "food_inspection_2",
        "question": "State the name of dbas with verified quality.",
        "ground_truth": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results LIKE '%Pass%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM dbas WHERE quality = 'verified';"
        ],
        "rule_sql": []
    },
    "1325": {
        "db_id": "law_episode",
        "question": "List the titles and air dates of episodes that were produced by Billy Fox.",
        "ground_truth": "SELECT T1.title, T1.air_date FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.category = 'Produced by' AND T2.role = 'producer' AND T3.name = 'Billy Fox'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, air_date FROM episodes WHERE producer = 'Billy Fox';"
        ],
        "rule_sql": []
    },
    "408": {
        "db_id": "movies_4",
        "question": "Please list the names of the production company of the movie \"Four Rooms\".",
        "ground_truth": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_title FROM production_companies WHERE company_name = 'Four Rooms'"
        ],
        "rule_sql": []
    },
    "7383": {
        "db_id": "works_cycles",
        "question": "Among the vendors with an average credit rating, what is the overall total due amount of purchases made by the company to the vendor that isn't preferrerd if another vendor is available?",
        "ground_truth": "SELECT SUM(T2.TotalDue) FROM Vendor AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.BusinessEntityID = T2.VendorID WHERE T1.CreditRating = 4 AND T1.PreferredVendorStatus = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(TotalDue) \nFROM Purchases \nWHERE VendorID IN (\n    SELECT VendorID \n    FROM Vendors \n    WHERE CreditRating = 'Average' \n    AND PreferredVendorStatus = 0\n)\nAND NOT EXISTS (\n    SELECT 1 \n    FROM Vendors v2 \n    WHERE v2.CreditRating = 'Average' \n    AND v2.PreferredVendorStatus = 1\n    AND v2.VendorID != Vendors.VendorID\n)"
        ],
        "rule_sql": []
    },
    "849": {
        "db_id": "social_media",
        "question": "Please list the top 3 cities with the most number of tweets posted in Canada.",
        "ground_truth": "SELECT T.City FROM ( SELECT T2.City, COUNT(T1.TweetID) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Canada' GROUP BY T2.City ) T ORDER BY T.num DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as tweet_count \nFROM tweets \nWHERE country = 'Canada' \nGROUP BY city \nORDER BY tweet_count DESC \nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "978": {
        "db_id": "computer_student",
        "question": "State the courses and level of courses by professors who are faculty employees.",
        "ground_truth": "SELECT T3.course_id, T3.courseLevel FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T2.hasPosition = 'Faculty_eme'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name, level FROM courses WHERE professor_id IN (SELECT employee_id FROM employees WHERE department = 'faculty');"
        ],
        "rule_sql": []
    },
    "998": {
        "db_id": "computer_student",
        "question": "Please list the IDs of the top 3 professors that teaches the most courses.",
        "ground_truth": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT professor_id, COUNT(*) as course_count FROM courses GROUP BY professor_id ORDER BY course_count DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "5425": {
        "db_id": "sales",
        "question": "Calculate the quantity percentage of the gift products in the total trading quantity.",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.Price = 0, T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity)FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN product_type = 'gift' THEN quantity ELSE 0 END) / SUM(quantity)) * 100 AS gift_percentage\nFROM transactions;"
        ],
        "rule_sql": []
    },
    "8383": {
        "db_id": "mondial_geo",
        "question": "Which three countries does the Amazonas flow through? Give the full name of the countries.",
        "ground_truth": "SELECT DISTINCT T4.Name FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River INNER JOIN country AS T4 ON T4.Code = T2.Country WHERE T3.Name = 'Amazonas'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM rivers WHERE name = 'Amazonas' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "1809": {
        "db_id": "soccer_2016",
        "question": "For the game on 2008/5/12, who was the man of the match?",
        "ground_truth": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Match_Date = '2008-05-12'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM matches WHERE match_date = '2008/5/12' AND man_of_the_match = 'yes'"
        ],
        "rule_sql": []
    },
    "2208": {
        "db_id": "world_development_indicators",
        "question": "Please list the full names of any three countries that have their series code with a description of UN Energy Statistics (2014).",
        "ground_truth": "SELECT DISTINCT T2.LongName FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Description = 'Sources: UN Energy Statistics (2014)' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE series_code LIKE '%UN Energy Statistics%' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "6240": {
        "db_id": "food_inspection_2",
        "question": "List down the inspection ID with the inspector's comment \"A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED\" and inspection category of Personnel.",
        "ground_truth": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Personnel' AND T2.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspection_id FROM inspections WHERE inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED' AND inspection_category = 'Personnel';"
        ],
        "rule_sql": []
    },
    "3695": {
        "db_id": "college_completion",
        "question": "What is the ratio of Asian male graduates to Asian female graduates from Harvard University in 2013?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN T2.grad_cohort ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Gender = 'F' THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Harvard University' AND T2.year = 2013 AND T2.race = 'A'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM graduates WHERE university = 'Harvard University' AND year = 2013 AND ethnicity = 'Asian' AND gender = 'Male') / \n    (SELECT COUNT(*) FROM graduates WHERE university = 'Harvard University' AND year = 2013 AND ethnicity = 'Asian' AND gender = 'Female') \nAS ratio"
        ],
        "rule_sql": []
    },
    "5314": {
        "db_id": "beer_factory",
        "question": "What star rating is the most common for beers containing corn syrup?",
        "ground_truth": "SELECT T2.StarRating FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CornSyrup = 'TRUE' GROUP BY T2.StarRating ORDER BY COUNT(T2.StarRating) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT star_rating, COUNT(*) as count \nFROM beers \nWHERE ingredients LIKE '%corn syrup%' \nGROUP BY star_rating \nORDER BY count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7363": {
        "db_id": "works_cycles",
        "question": "Please list any three businesses with their IDs that are located in Dallas City.",
        "ground_truth": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Dallas' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, name FROM businesses WHERE city = 'Dallas' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "2069": {
        "db_id": "music_tracker",
        "question": "Provide the name of artists who released at least two bootlegs in 2016.",
        "ground_truth": "SELECT artist FROM torrents WHERE groupYear = 2016 AND releaseType LIKE 'bootleg' GROUP BY artist HAVING COUNT(releaseType) > 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name FROM artists WHERE release_type = 'bootleg' AND release_year = 2016 GROUP BY artist_name HAVING COUNT(*) >= 2"
        ],
        "rule_sql": []
    },
    "5266": {
        "db_id": "beer_factory",
        "question": "How many female customers permit the company to send regular emails to them?",
        "ground_truth": "SELECT COUNT(CustomerID) FROM customers WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE gender = 'male' AND email_permission = 1;"
        ],
        "rule_sql": []
    },
    "4143": {
        "db_id": "citeseer",
        "question": "Among all the DB class type citation, which word is the most frequently cited?",
        "ground_truth": "SELECT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T2.word_cited_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word, COUNT(*) as citation_count FROM citations WHERE class_type = 'DB' GROUP BY word ORDER BY citation_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4065": {
        "db_id": "public_review_platform",
        "question": "How many category id have low review count and rating more than 2?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.review_count = 'Low' AND T3.stars > 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM categories WHERE review_count < 10 AND rating <= 2;"
        ],
        "rule_sql": []
    },
    "7948": {
        "db_id": "music_platform_2",
        "question": "Indicates the title of all podcasts in the fiction category.",
        "ground_truth": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'fiction'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM podcasts WHERE category = 'fiction';"
        ],
        "rule_sql": []
    },
    "5926": {
        "db_id": "books",
        "question": "How much money on average does Lucas Wyldbore spend on book orders?",
        "ground_truth": "SELECT SUM(T1.price) / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(amount) FROM orders WHERE customer_name = 'Lucas Wyldbore' AND product_type = 'books';"
        ],
        "rule_sql": []
    },
    "4223": {
        "db_id": "simpson_episodes",
        "question": "What is the voting numbers and percentage of the best rating scale of the episode which had keyword of \"arab stereotype\"?",
        "ground_truth": "SELECT T2.votes, T2.percent FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.keyword = 'arab stereotype' AND T2.stars = 10;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating_scale, COUNT(*) AS vote_count, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM votes)) AS percentage\nFROM votes v\nJOIN episodes e ON v.episode_id = e.episode_id\nJOIN keywords k ON e.episode_id = k.episode_id\nWHERE k.keyword = 'arab stereotype'\nGROUP BY rating_scale\nORDER BY rating_scale DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "465": {
        "db_id": "movies_4",
        "question": "Write the titles of horror films with a vote average of more than 7.",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE genre = 'horror' AND vote_average > 7;"
        ],
        "rule_sql": []
    },
    "6756": {
        "db_id": "retails",
        "question": "What is the name and marketing segment of the customer with the total order price of 199180.63?",
        "ground_truth": "SELECT T2.c_name, T2.c_mktsegment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 199180.63",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c_name, c_mktsegment FROM customer WHERE o_totalprice = 199180.63;"
        ],
        "rule_sql": []
    },
    "8958": {
        "db_id": "human_resources",
        "question": "What is Kenneth Charles's position title?",
        "ground_truth": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Kenneth' AND T1.lastname = 'Charles'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position FROM employees WHERE first_name = 'Kenneth' AND last_name = 'Charles';"
        ],
        "rule_sql": []
    },
    "3930": {
        "db_id": "public_review_platform",
        "question": "Find the location of businesses that has business hours from 9 am to 9 pm every Saturday.",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '9AM' AND T3.day_of_week LIKE 'Saturday' GROUP BY T1.city",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM businesses WHERE hours LIKE '%Saturday%' AND hours LIKE '%9 am%' AND hours LIKE '%9 pm%';"
        ],
        "rule_sql": []
    },
    "6979": {
        "db_id": "ice_hockey_draft",
        "question": "List the names of all players from Avangard Omsk who played in the 2000-2001 season of the International league that have no goals in draft year.",
        "ground_truth": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' AND T1.TEAM = 'Czech Republic (all)' AND T1.G = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name \nFROM players p\nJOIN player_stats ps ON p.player_id = ps.player_id\nJOIN teams t ON p.team_id = t.team_id\nJOIN leagues l ON ps.league_id = l.league_id\nWHERE t.name = 'Avangard Omsk'\nAND l.name = 'International league'\nAND ps.season = '2000-2001'\nAND ps.goals = 0\nAND p.draft_year IS NULL;"
        ],
        "rule_sql": []
    },
    "9292": {
        "db_id": "movie_3",
        "question": "Please name three cities that belong to Algeria.",
        "ground_truth": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cities WHERE country = 'Algeria' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "4896": {
        "db_id": "legislator",
        "question": "Among the current legislators who served the term starting on 2013/1/3, how many of them are female?",
        "ground_truth": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03' AND T1.gender_bio = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE term_start = '2013/1/3' AND gender = 'female';"
        ],
        "rule_sql": []
    },
    "2764": {
        "db_id": "european_football_1",
        "question": "In how many matches in the Seria A division did both teams have equal goals?",
        "ground_truth": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Seria A' AND T1.FTR = 'D'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE home_goals = away_goals AND division = 'Seria A';"
        ],
        "rule_sql": []
    },
    "3343": {
        "db_id": "video_games",
        "question": "How many games did Electronic Arts publish?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Electronic Arts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE publisher = 'Electronic Arts';"
        ],
        "rule_sql": []
    },
    "1490": {
        "db_id": "synthea",
        "question": "What drug is administered more often to treat child attention deficit disorder?",
        "ground_truth": "SELECT DESCRIPTION FROM medications WHERE REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT drug_name, COUNT(*) as administration_count \nFROM prescriptions \nWHERE condition = 'child attention deficit disorder' \nGROUP BY drug_name \nORDER BY administration_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9138": {
        "db_id": "movie_3",
        "question": "Among all the films starring PENELOPE GUINESS, what is the title of the one with the highest rental price per day?",
        "ground_truth": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.rental_rate / T3.rental_duration DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT f.title, f.rental_rate \nFROM film f \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' \nORDER BY f.rental_rate DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7288": {
        "db_id": "works_cycles",
        "question": "What is the class of the product with the most reviews?",
        "ground_truth": "SELECT T2.Class FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Class ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT class FROM products ORDER BY review_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4224": {
        "db_id": "simpson_episodes",
        "question": "For the episode who won the award held by Jupiter Award, describe award name, aired date and rating of that episode.",
        "ground_truth": "SELECT T1.award, T2.air_date, T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Jupiter Award' AND T1.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT award_name, aired_date, rating FROM episodes WHERE award = 'Jupiter Award' AND winner = 'yes';"
        ],
        "rule_sql": []
    },
    "8641": {
        "db_id": "chicago_crime",
        "question": "Provide the responsible person and his/her email address of Chicago Lawn.",
        "ground_truth": "SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT person_name, email FROM chicago_lawn_responsible_persons WHERE location = 'Chicago Lawn';"
        ],
        "rule_sql": []
    },
    "1088": {
        "db_id": "talkingdata",
        "question": "Please list the location coordinates of all the devices with an inactive app user when event no.2 happened.",
        "ground_truth": "SELECT DISTINCT T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 2 AND T1.is_active = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT device.latitude, device.longitude \nFROM device \nJOIN app_user ON device.device_id = app_user.device_id \nJOIN event ON device.device_id = event.device_id \nWHERE app_user.status = 'active' \nAND event.event_id = 2;"
        ],
        "rule_sql": []
    },
    "3707": {
        "db_id": "college_completion",
        "question": "Among the institutes in the state of Alabama whose percent rank for median SAT value within sector is 77, how many of them have over 500 graduates in total in 2011?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.med_sat_percentile = '100' AND T2.year = 2011 AND T2.grad_cohort > 500",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM institutes i\nJOIN graduates g ON i.institute_id = g.institute_id\nWHERE i.state = 'Alabama' \nAND i.percent_rank_sat = 77\nAND g.year = 2011\nAND g.total_graduates > 500;"
        ],
        "rule_sql": []
    },
    "1469": {
        "db_id": "synthea",
        "question": "Tell me the reason for Lavelle Vandervort's encounter on 11/20/2013?",
        "ground_truth": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2013-11-20' AND T1.first = 'Lavelle' AND T1.last = 'Vandervort'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reason FROM encounters WHERE patient_name = 'Lavelle Vandervort' AND date = '11/20/2013';"
        ],
        "rule_sql": []
    },
    "9360": {
        "db_id": "movie_3",
        "question": "What is the percentage of horror film titles in English film titles?",
        "ground_truth": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN genre = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_horror\nFROM films\nWHERE language = 'English';"
        ],
        "rule_sql": []
    },
    "5923": {
        "db_id": "books",
        "question": "Please list the titles of all the books that Lucas Wyldbore has ordered.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE author = 'Lucas Wyldbore';"
        ],
        "rule_sql": []
    },
    "5472": {
        "db_id": "menu",
        "question": "Among all the dishes that were once free, what is the name of the dish that had appeared on most menus?",
        "ground_truth": "SELECT name FROM Dish WHERE lowest_price = 0 ORDER BY menus_appeared DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dish_name \nFROM dishes \nWHERE price = 0 \nORDER BY COUNT(menu_id) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5757": {
        "db_id": "language_corpus",
        "question": "How many words have repetitions greater than 2000 and lower than 5000?",
        "ground_truth": "SELECT COUNT(wid) FROM langs_words WHERE occurrences BETWEEN '2000' AND '5000'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM words WHERE repetitions > 2000 AND repetitions < 5000;"
        ],
        "rule_sql": []
    },
    "5322": {
        "db_id": "beer_factory",
        "question": "Tally the email addresses and phone numbers of customers from Sacramento who gave a star rating of more than 3 in 2014.",
        "ground_truth": "SELECT DISTINCT T1.Email, T1.PhoneNumber FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating > 3 AND T1.City = 'Sacramento' AND T2.ReviewDate BETWEEN '2014-01-01' AND '2014-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email, phone_number \nFROM customers \nWHERE city = 'Sacramento' \nAND star_rating > 3 \nAND YEAR(date) = 2014;"
        ],
        "rule_sql": []
    },
    "3097": {
        "db_id": "cars",
        "question": "Which Dodge car is the cheapest?",
        "ground_truth": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name LIKE 'dodge%' ORDER BY T2.price ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM cars WHERE make = 'Dodge' ORDER BY price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8151": {
        "db_id": "sales_in_weather",
        "question": "What is the total units of products sold on the day with the highest max temperature in store no.3 in 2012?",
        "ground_truth": "SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.`date` LIKE '%2012%' GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(units_sold) \nFROM sales s\nJOIN weather w ON s.date = w.date\nWHERE s.store_id = 3 \nAND strftime('%Y', s.date) = '2012'\nORDER BY w.max_temperature DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5039": {
        "db_id": "olympics",
        "question": "How many people who are below 30 and participated in the summer season?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' AND T2.age < 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE age < 30 AND season = 'summer';"
        ],
        "rule_sql": []
    },
    "4730": {
        "db_id": "disney",
        "question": "Find the estimated inflation rate that was used to adjust the 1995 box office revenue for Disney's films.",
        "ground_truth": "SELECT SUM(CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL)) / SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995' GROUP BY SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inflation_rate FROM disney_films WHERE year = 1995 AND studio = 'Disney';"
        ],
        "rule_sql": []
    },
    "8205": {
        "db_id": "sales_in_weather",
        "question": "How many items were sold by store 9 during a snowy day?",
        "ground_truth": "SELECT COUNT(DISTINCT item_nbr) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr INNER JOIN sales_in_weather AS T3 ON T2.store_nbr = T3.store_nbr WHERE T3.store_nbr = 9 AND T1.snowfall <> 0 AND T1.snowfall IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE store_id = 9 AND weather = 'snowy';"
        ],
        "rule_sql": []
    },
    "4164": {
        "db_id": "simpson_episodes",
        "question": "Which character won the Outstanding Voice-Over Performance award in 2009?",
        "ground_truth": "SELECT DISTINCT T1.character FROM Character_Award AS T1 INNER JOIN Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM awards WHERE award_name = 'Outstanding Voice-Over Performance' AND year = 2009;"
        ],
        "rule_sql": []
    },
    "2214": {
        "db_id": "world_development_indicators",
        "question": "Which nation completed its external debt reporting in 1980 and had a Land under cereal production value of 3018500?",
        "ground_truth": "SELECT T2.CountryCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName LIKE 'Land under cereal production%' AND T1.Value = 3018500 AND T1.Year = 1980 AND T2.ExternalDebtReportingStatus = 'Actual'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nation FROM debt_reporting WHERE year = 1980 AND land_cereal_production = 3018500;"
        ],
        "rule_sql": []
    },
    "2544": {
        "db_id": "app_store",
        "question": "What is the number of installments of the app with the highest total Sentiment polarity score?",
        "ground_truth": "SELECT T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Polarity) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM installments WHERE app_id = (SELECT app_id FROM sentiment_scores ORDER BY polarity_score DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "5867": {
        "db_id": "airline",
        "question": "What is the name of the airline that flew the most flights to Chicago Midway International?",
        "ground_truth": "SELECT T3.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T1.Description = 'Chicago, IL: Chicago Midway International' AND T2.DEST = 'MDW' GROUP BY T3.Description ORDER BY COUNT(T3.Description) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT airline_name FROM airlines WHERE destination = 'Chicago Midway International' GROUP BY airline_name ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7706": {
        "db_id": "hockey",
        "question": "What position did player id \"hartgi01\" play in his Stanley Cup finals performance?",
        "ground_truth": "SELECT DISTINCT pos FROM ScoringSC WHERE playerID = 'hartgi01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position FROM players WHERE player_id = 'hartgi01' AND stanley_cup_finals = 'yes';"
        ],
        "rule_sql": []
    },
    "4813": {
        "db_id": "legislator",
        "question": "List out the first name of legislators who are senior Senator.",
        "ground_truth": "SELECT T1.first_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state_rank = 'senior' GROUP BY T1.first_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM legislators WHERE position = 'Senior Senator';"
        ],
        "rule_sql": []
    },
    "5162": {
        "db_id": "address",
        "question": "What is the difference in the number of cities with P.O. box only and cities with Post Office among the cities with area code 787?",
        "ground_truth": "SELECT COUNT(CASE WHEN T2.type = 'P.O. Box Only' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.type = 'Post Office' THEN 1 ELSE NULL END) AS DIFFERENCE FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM cities WHERE area_code = 787 AND has_po_box = 1) - \n    (SELECT COUNT(*) FROM cities WHERE area_code = 787 AND has_post_office = 1) \nAS difference;"
        ],
        "rule_sql": []
    },
    "8490": {
        "db_id": "mondial_geo",
        "question": "What is the peak height of the highest volcanic type of mountain? Give it's name.",
        "ground_truth": "SELECT Height, Name FROM mountain WHERE Type = 'volcanic' ORDER BY Height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, height FROM mountains WHERE type = 'volcanic' ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5235": {
        "db_id": "beer_factory",
        "question": "What is the name of the root beer brand with the lowest unit profit available to wholesalers?",
        "ground_truth": "SELECT BrandName FROM rootbeerbrand ORDER BY CurrentRetailPrice - WholesaleCost LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand_name FROM root_beer_brands ORDER BY unit_profit ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8467": {
        "db_id": "mondial_geo",
        "question": "Name all countries in which have border with Bulgaria.",
        "ground_truth": "SELECT T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = 'Bulgaria'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE border = 'Bulgaria';"
        ],
        "rule_sql": []
    },
    "5182": {
        "db_id": "address",
        "question": "What are the bad aliases of the postal points from East Setauket?",
        "ground_truth": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'East Setauket'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bad_aliases FROM postal_points WHERE location = 'East Setauket';"
        ],
        "rule_sql": []
    },
    "2703": {
        "db_id": "regional_sales",
        "question": "Which sales team has the other with the highest unit price?",
        "ground_truth": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE REPLACE(T1.`Unit Price`, ',', '') = ( SELECT REPLACE(T1.`Unit Price`, ',', '') FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, MAX(unit_price) as highest_price FROM sales_teams GROUP BY team_name ORDER BY highest_price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5163": {
        "db_id": "address",
        "question": "Among the cities belonging to the country named Arroyo, calculate the percentage of increase in the population in these cities from 2010 to 2020.",
        "ground_truth": "SELECT CAST((SUM(T2.population_2020) - SUM(T2.population_2010)) AS REAL) * 100 / SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Arroyo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    city_name,\n    ((population_2020 - population_2010) / population_2010) * 100 AS percentage_increase\nFROM cities\nWHERE country = 'Arroyo'\nORDER BY percentage_increase DESC;"
        ],
        "rule_sql": []
    },
    "9413": {
        "db_id": "movie_3",
        "question": "What is the postal code of the address 692 Joliet Street?",
        "ground_truth": "SELECT postal_code FROM address WHERE address = '692 Joliet Street'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT postal_code FROM addresses WHERE street = '692 Joliet Street';"
        ],
        "rule_sql": []
    },
    "3364": {
        "db_id": "video_games",
        "question": "Give the genre of the games released from 2000 to 2002.",
        "ground_truth": "SELECT DISTINCT T4.genre_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.release_year BETWEEN 2000 AND 2002",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM games WHERE release_year BETWEEN 2000 AND 2002;"
        ],
        "rule_sql": []
    },
    "3836": {
        "db_id": "public_review_platform",
        "question": "How many businesses operating in the \"Accessories\" category have received a \"wonderful experience\" review from users?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.stars > 3 AND T1.category_name LIKE 'Accessories'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses b \nJOIN reviews r ON b.business_id = r.business_id \nWHERE b.category = 'Accessories' AND r.review_text LIKE '%wonderful experience%';"
        ],
        "rule_sql": []
    },
    "3906": {
        "db_id": "public_review_platform",
        "question": "List out which business category that are most likely to have average good review in Arizona?",
        "ground_truth": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, AVG(stars) as avg_rating \nFROM business \nWHERE state = 'Arizona' \nGROUP BY category \nORDER BY avg_rating DESC \nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "6996": {
        "db_id": "ice_hockey_draft",
        "question": "Who is the tallest player in team USA U20?",
        "ground_truth": "SELECT T.PlayerName FROM ( SELECT T1.PlayerName, T3.height_in_cm FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' ORDER BY T3.height_in_cm DESC ) AS T WHERE T.height_in_cm = ( SELECT MAX(T3.height_in_cm) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players WHERE team = 'USA U20' ORDER BY height ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4380": {
        "db_id": "student_loan",
        "question": "Please list the departments the students are absent from school for 9 months are in.",
        "ground_truth": "SELECT T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` = 9",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name FROM students WHERE absence_duration = 9"
        ],
        "rule_sql": []
    },
    "5090": {
        "db_id": "address",
        "question": "Please list the Asian populations of all the residential areas with the bad alias \"URB San Joaquin\".",
        "ground_truth": "SELECT SUM(T1.asian_population) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'URB San Joaquin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population FROM residential_areas WHERE alias = 'URB San Joaquin' AND continent = 'Asia';"
        ],
        "rule_sql": []
    },
    "5574": {
        "db_id": "menu",
        "question": "Among the menu pages on which the dish \"Paysanne Soup\" had appeared, how many of them had a stable price for the dish?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.name = 'Paysanne Soup' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM menu_pages mp\nJOIN menu_items mi ON mp.id = mi.menu_page_id\nWHERE mi.name = 'Paysanne Soup'\nAND mi.price = (SELECT price FROM menu_items WHERE name = 'Paysanne Soup' AND menu_page_id = mp.id LIMIT 1);"
        ],
        "rule_sql": []
    },
    "285": {
        "db_id": "retail_complains",
        "question": "What percentage of consumers from Houston disputed complaints?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.`Consumer disputed?` = 'Yes' AND T1.city = 'Houston' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM complaints WHERE city = 'Houston')) AS percentage FROM complaints WHERE city = 'Houston' AND disputed = 1;"
        ],
        "rule_sql": []
    },
    "864": {
        "db_id": "cs_semester",
        "question": "Please list the names of the courses taken by Laughton Antonio.",
        "ground_truth": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.f_name = 'Laughton' AND T1.l_name = 'Antonio'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE student_name = 'Laughton Antonio';"
        ],
        "rule_sql": []
    },
    "7148": {
        "db_id": "works_cycles",
        "question": "What is the minimum shipping charge for \"OVERSEAS - DELUXE\"?",
        "ground_truth": "SELECT ShipBase FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(shipping_charge) FROM shipping WHERE shipping_type = 'OVERSEAS - DELUXE';"
        ],
        "rule_sql": []
    },
    "7679": {
        "db_id": "hockey",
        "question": "Please list the positions of the players who were born in Canada and have won the All-Rookie award.",
        "ground_truth": "SELECT DISTINCT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'Canada' AND T2.award = 'All-Rookie'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position FROM players WHERE country = 'Canada' AND award = 'All-Rookie';"
        ],
        "rule_sql": []
    },
    "413": {
        "db_id": "movies_4",
        "question": "What was the job of Dariusz Wolski in the movie \"Pirates of the Caribbean: At World's End\"?",
        "ground_truth": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T3.person_name = 'Dariusz Wolski'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job FROM crew WHERE name = 'Dariusz Wolski' AND movie_title = 'Pirates of the Caribbean: At World''s End';"
        ],
        "rule_sql": []
    },
    "1091": {
        "db_id": "talkingdata",
        "question": "Among the devices with event no.2 happening, how many of them are vivo devices?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' AND T2.event_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM devices WHERE event_no = 2 AND brand = 'vivo';"
        ],
        "rule_sql": []
    },
    "5085": {
        "db_id": "address",
        "question": "Among all the residential areas in Delaware, how many of them implement daylight saving?",
        "ground_truth": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'DELAWARE' AND T1.daylight_savings = 'Yes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM residential_areas WHERE state = 'Delaware' AND daylight_saving = 'yes';"
        ],
        "rule_sql": []
    },
    "2111": {
        "db_id": "world_development_indicators",
        "question": "In 1970, how many Middle Eastern & North African countries whose value for CO2 emissions from gaseous fuel consumption (kt) indicator is more than 600?",
        "ground_truth": "SELECT COUNT(T2.CountryCode)  FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T1.IndicatorName = 'CO2 emissions FROM gaseous fuel consumption (kt)' AND T1.Year = 1970 AND T1.Value > 600",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countries \nWHERE region = 'Middle East & North Africa' \nAND year = 1970 \nAND co2_emissions_gaseous_fuel_kt > 600;"
        ],
        "rule_sql": []
    },
    "4765": {
        "db_id": "legislator",
        "question": "List the last name of all current legislators who live in California.",
        "ground_truth": "SELECT T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'CA' GROUP BY T1.last_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM legislators WHERE state = 'California' AND status = 'current';"
        ],
        "rule_sql": []
    },
    "2961": {
        "db_id": "shakespeare",
        "question": "How many paragraphs contain the character Lord Abergavenny?",
        "ground_truth": "SELECT SUM(T1.ParagraphNum) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.CharName = 'Lord Abergavenny'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM paragraphs WHERE character = 'Lord Abergavenny';"
        ],
        "rule_sql": []
    },
    "1983": {
        "db_id": "soccer_2016",
        "question": "Calculate the average players out in the first innings per match. How many of them were out by the leg before wicket?",
        "ground_truth": "SELECT CAST(COUNT(T1.Player_Out) AS REAL) / COUNT(T1.Match_Id), SUM(CASE WHEN T2.Out_Name = 'lbw' THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T1.Innings_No = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(players_out_first_innings) AS avg_players_out, COUNT(*) AS lbw_count \nFROM matches \nWHERE dismissal_type = 'leg before wicket' \nAND innings = 1"
        ],
        "rule_sql": []
    },
    "5368": {
        "db_id": "sales",
        "question": "List down product names of free gifts.",
        "ground_truth": "SELECT Name FROM Products WHERE Price = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE price = 0;"
        ],
        "rule_sql": []
    },
    "9378": {
        "db_id": "movie_3",
        "question": "Calculate the total amount paid by Stephanie Mitchell for film rentals in June 2005.",
        "ground_truth": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'STEPHANIE' AND T2.last_name = 'MITCHELL' AND SUBSTR(T1.payment_date, 1, 7) = '2005-06'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(payment.amount) \nFROM payment \nJOIN customer ON payment.customer_id = customer.customer_id \nWHERE customer.first_name = 'Stephanie' \nAND customer.last_name = 'Mitchell' \nAND payment.payment_date LIKE '2005-06%';"
        ],
        "rule_sql": []
    },
    "6091": {
        "db_id": "books",
        "question": "List down the ISBN of the books purchased by the customer with an email of fsier3e@ihg.com.",
        "ground_truth": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.email = 'fsier3e@ihg.com'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT isbn FROM books WHERE customer_email = 'fsier3e@ihg.com';"
        ],
        "rule_sql": []
    },
    "8041": {
        "db_id": "university",
        "question": "In Argentina, how many universities are there?",
        "ground_truth": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Argentina'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE country = 'Argentina';"
        ],
        "rule_sql": []
    },
    "2744": {
        "db_id": "european_football_1",
        "question": "What percentage of all tied games did the Sassuolo team play in?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(FTR) FROM matchs WHERE FTR = 'D'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN home_team = 'Sassuolo' AND home_score = away_score THEN 1 END) + \n     COUNT(CASE WHEN away_team = 'Sassuolo' AND home_score = away_score THEN 1 END)) * 100.0 / \n    COUNT(*) AS percentage\nFROM matches\nWHERE home_score = away_score;"
        ],
        "rule_sql": []
    },
    "4596": {
        "db_id": "mental_health_survey",
        "question": "How many users answered the question No.20?",
        "ground_truth": "SELECT MAX(UserID) - MIN(UserID) + 1 FROM Answer WHERE QuestionID = 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE question_id = 20 AND answer = 'No';"
        ],
        "rule_sql": []
    },
    "4455": {
        "db_id": "student_loan",
        "question": "List all the navy students who are disabled.",
        "ground_truth": "SELECT T1.name FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE branch = 'Navy' AND disability_status = 'No';"
        ],
        "rule_sql": []
    },
    "8640": {
        "db_id": "chicago_crime",
        "question": "List the IUCR numbers and index status of homicide incidents.",
        "ground_truth": "SELECT index_code FROM IUCR WHERE primary_description = 'HOMICIDE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT IUCR, status FROM incidents WHERE crime_type = 'homicide';"
        ],
        "rule_sql": []
    },
    "2722": {
        "db_id": "regional_sales",
        "question": "In which region can you find the stores located in the state whose median income is no more than 30,000?",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.`Median Income` < 30000 THEN T1.Region END AS T FROM Regions T1 INNER JOIN `Store Locations` T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM stores WHERE state IN (SELECT state FROM income_data WHERE median_income <= 30000)"
        ],
        "rule_sql": []
    },
    "6985": {
        "db_id": "ice_hockey_draft",
        "question": "How many games did Per Mars play in the 1997-1998 season?",
        "ground_truth": "SELECT T2.GP FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Pavel Patera'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE player_name = 'Per Mars' AND season = '1997-1998';"
        ],
        "rule_sql": []
    },
    "1776": {
        "db_id": "restaurant",
        "question": "How many Chinese restaurants are there on 1st st, Livermore?",
        "ground_truth": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'livermore' AND T1.food_type = 'chinese' AND T2.street_name = '1st st'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE cuisine = 'Chinese' AND street = '1st st' AND city = 'Livermore';"
        ],
        "rule_sql": []
    },
    "7624": {
        "db_id": "hockey",
        "question": "State the goalie who has the lowest percentage of goals against among all the shots against recorded. Name the players and season where he played.",
        "ground_truth": "SELECT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE CAST(T2.GA AS REAL) / T2.SA IS NOT NULL ORDER BY CAST(T2.GA AS REAL) / T2.SA LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, season, (goals_against * 100.0 / shots_against) AS save_percentage \nFROM goalie_stats \nORDER BY save_percentage ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3538": {
        "db_id": "authors",
        "question": "What is the author ID and their affiliations of authors of the papers with a journal ID of 0 and published in 2009.",
        "ground_truth": "SELECT DISTINCT T2.AuthorId, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.JournalId = 0 AND T1.Year = 2009 AND T2.Affiliation IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_id, affiliations FROM authors WHERE journal_id = 0 AND year = 2009;"
        ],
        "rule_sql": []
    },
    "2317": {
        "db_id": "movielens",
        "question": "What's different average revenue status for director who directed the movie that got the most 1 ratings?",
        "ground_truth": "SELECT DISTINCT T1.avg_revenue FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.director_name, AVG(m.revenue) as avg_revenue\nFROM directors d\nJOIN movies m ON d.movie_id = m.id\nWHERE m.id IN (\n    SELECT movie_id \n    FROM ratings \n    WHERE rating = 1 \n    GROUP BY movie_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)\nGROUP BY d.director_name;"
        ],
        "rule_sql": []
    },
    "4160": {
        "db_id": "simpson_episodes",
        "question": "Among the crew members of the simpson 20s born in the New York city, how many of them were born after the year 1970?",
        "ground_truth": "SELECT COUNT(name) FROM Person WHERE birth_region = 'New York' AND SUBSTR(birthdate, 1, 4) > '1970';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM crew_members \nWHERE show_name = 'The Simpsons' \nAND birth_year > 1970 \nAND birth_city = 'New York City' \nAND birth_year BETWEEN 1920 AND 1929;"
        ],
        "rule_sql": []
    },
    "2868": {
        "db_id": "professional_basketball",
        "question": "Please list the first names of the players with the most personal fouls in the 'NBL' league.",
        "ground_truth": "SELECT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'NBL' GROUP BY T1.playerID, T1.firstName ORDER BY COUNT(PF) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM players WHERE league = 'NBL' ORDER BY personal_fouls DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7369": {
        "db_id": "works_cycles",
        "question": "What is the company's second highest salary per hour for employees who are paid monthly?",
        "ground_truth": "SELECT Rate FROM EmployeePayHistory WHERE PayFrequency = 1 ORDER BY Rate DESC LIMIT 1, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(salary_per_hour) FROM employees WHERE pay_frequency = 'monthly' AND salary_per_hour < (SELECT MAX(salary_per_hour) FROM employees WHERE pay_frequency = 'monthly')"
        ],
        "rule_sql": []
    },
    "8293": {
        "db_id": "mondial_geo",
        "question": "What is the population density of the Petropavl's home country?",
        "ground_truth": "SELECT CAST(T1.Population AS REAL) / T1.Area FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Petropavl'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population / area FROM countries WHERE name = 'Petropavl';"
        ],
        "rule_sql": []
    },
    "4653": {
        "db_id": "disney",
        "question": "How much is the total gross of the movie with a song titled \"Little Wonders\"?",
        "ground_truth": "SELECT T1.total_gross FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.song = 'Little Wonders'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(gross) FROM movies WHERE song_title = 'Little Wonders'"
        ],
        "rule_sql": []
    },
    "7467": {
        "db_id": "works_cycles",
        "question": "Where are the locations where the product \"810\" is stored?",
        "ground_truth": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ProductID = 810",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE product_id = 810"
        ],
        "rule_sql": []
    },
    "7241": {
        "db_id": "works_cycles",
        "question": "List all the sales people in the Northwest US.",
        "ground_truth": "SELECT T2.BusinessEntityID FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Northwest' AND T1.CountryRegionCode = 'US'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE region = 'Northwest' AND country = 'US';"
        ],
        "rule_sql": []
    },
    "2812": {
        "db_id": "professional_basketball",
        "question": "What is the birth date of the player with the most assists during the 1985 All-Star season?",
        "ground_truth": "SELECT T1.birthDate FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1985 ORDER BY T2.assists DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_date FROM players WHERE assists = (SELECT MAX(assists) FROM player_stats WHERE season = '1985 All-Star')"
        ],
        "rule_sql": []
    },
    "160": {
        "db_id": "movie_platform",
        "question": "What are the top 5 most popular movies of the 21st century? Indicate how many users gave it a rating score of 5.",
        "ground_truth": "SELECT DISTINCT T2.movie_id, SUM(T1.rating_score = 5) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T2.movie_popularity DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, COUNT(r.user_id) AS user_count\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.year >= 2000 AND r.rating = 5\nGROUP BY m.movie_id\nORDER BY user_count DESC\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "4876": {
        "db_id": "legislator",
        "question": "How many districts did John Conyers, Jr. serve in total?",
        "ground_truth": "SELECT COUNT(T3.district) FROM ( SELECT T2.district FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.' GROUP BY T2.district ) T3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM districts WHERE representative = 'John Conyers, Jr.'"
        ],
        "rule_sql": []
    },
    "5156": {
        "db_id": "address",
        "question": "List down the area code and country of the city named Savoy.",
        "ground_truth": "SELECT T1.area_code, T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T3.city = 'Savoy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT area_code, country FROM cities WHERE city_name = 'Savoy';"
        ],
        "rule_sql": []
    },
    "4043": {
        "db_id": "public_review_platform",
        "question": "List out 10 business ID that are being reviewed the most by users and list out what are top 3 business categories.",
        "ground_truth": "SELECT T2.business_id, T3.category_name FROM Reviews AS T1 INNER JOIN Business_categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id GROUP BY T2.business_id ORDER BY COUNT(T1.user_id) DESC LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, COUNT(*) as review_count, category \nFROM reviews \nGROUP BY business_id \nORDER BY review_count DESC \nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "2066": {
        "db_id": "music_tracker",
        "question": "An American rapper '2Pac' released his first solo album in 1991, how many years have passed until his next album was released?",
        "ground_truth": "SELECT ( SELECT groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' ORDER BY groupYear LIMIT 1, 1 ) - groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' AND groupYear = 1991",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT 1991 - 1991 AS years_passed;"
        ],
        "rule_sql": []
    },
    "1539": {
        "db_id": "synthea",
        "question": "List 5 patients' name that need medication due to streptococcal sore throat disorder.",
        "ground_truth": "SELECT DISTINCT T2.first, T2.last FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM patients WHERE diagnosis = 'streptococcal sore throat' LIMIT 5;"
        ],
        "rule_sql": []
    },
    "2349": {
        "db_id": "superstore",
        "question": "Please list the IDs of the orders made by Aimee Bixby with more than 3 kinds of products ordered.",
        "ground_truth": "SELECT DISTINCT T2.`Order ID` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby' GROUP BY T2.`Product ID` HAVING COUNT(T2.`Product ID`) > 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.order_id\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.customer_name = 'Aimee Bixby'\nGROUP BY o.order_id\nHAVING COUNT(DISTINCT o.product_id) > 3;"
        ],
        "rule_sql": []
    },
    "4553": {
        "db_id": "student_loan",
        "question": "How many students have never been absent in school?",
        "ground_truth": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE absent_days = 0;"
        ],
        "rule_sql": []
    },
    "2595": {
        "db_id": "regional_sales",
        "question": "List the ID, city, state and region for the store type which is fewer between borough and CDP.",
        "ground_truth": "SELECT DISTINCT T2.StoreID, T2.`City Name`, T1.State, T2.Type FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ID, city, state, region \nFROM stores \nWHERE store_type = 'borough' \nGROUP BY store_type \nHAVING COUNT(*) < (SELECT COUNT(*) FROM stores WHERE store_type = 'CDP')"
        ],
        "rule_sql": []
    },
    "54": {
        "db_id": "movie_platform",
        "question": "How many movie lists were created by user 83373278 when he or she was a subscriber?",
        "ground_truth": "SELECT COUNT(*) FROM lists_users WHERE user_id = 83373278 AND user_subscriber = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movie_lists WHERE user_id = 83373278 AND subscription_status = 'subscriber';"
        ],
        "rule_sql": []
    },
    "287": {
        "db_id": "retail_complains",
        "question": "Among the calls from California, what percentage are priority 1?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM calls WHERE state = 'California') AS percentage FROM calls WHERE priority = 1"
        ],
        "rule_sql": []
    },
    "4181": {
        "db_id": "simpson_episodes",
        "question": "What is the percentage ratio between uncredited and credited roles on the episode that won the 2017 Jupiter Award for Best International TV Series? Please include the title of the episode and the names of the persons who were uncredited alongside their role in that episode.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.credited = 'false' THEN 1 END) AS REAL) * 100 / SUM(CASE WHEN T2.credited = 'true' THEN 1 END), T3.title, T2.person FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award_category = 'Jupiter Award' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    e.title,\n    p.name,\n    r.role,\n    (COUNT(CASE WHEN r.credited = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_ratio\nFROM \n    episodes e\nJOIN \n    roles r ON e.episode_id = r.episode_id\nJOIN \n    persons p ON r.person_id = p.person_id\nWHERE \n    e.award_year = 2017 \n    AND e.award_name = 'Jupiter Award for Best International TV Series'\nGROUP BY \n    e.title, p.name, r.role\nHAVING \n    r.credited = 0;"
        ],
        "rule_sql": []
    },
    "2010": {
        "db_id": "soccer_2016",
        "question": "List the name of England players.",
        "ground_truth": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'England'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players WHERE country = 'England';"
        ],
        "rule_sql": []
    },
    "1190": {
        "db_id": "talkingdata",
        "question": "What is the average age of the users who use model device of R7?",
        "ground_truth": "SELECT SUM(T1.age) / COUNT(T1.device_id) AS avg FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'R7'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM users WHERE device_model = 'R7';"
        ],
        "rule_sql": []
    },
    "4905": {
        "db_id": "legislator",
        "question": "Provide the address of the legislator with the contact form of http://www.carper.senate.gov/contact/.",
        "ground_truth": "SELECT address FROM `current-terms` WHERE contact_form = 'http://www.carper.senate.gov/contact/'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM legislators WHERE contact_form = 'http://www.carper.senate.gov/contact/';"
        ],
        "rule_sql": []
    },
    "4968": {
        "db_id": "olympics",
        "question": "How many different events are there of Modern Pentathlon?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Modern Pentathlon'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE event = 'Modern Pentathlon';"
        ],
        "rule_sql": []
    },
    "3872": {
        "db_id": "public_review_platform",
        "question": "How many elite users have reviewed Yelp_Business no.1?",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.business_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM elite_years WHERE business_id = 1"
        ],
        "rule_sql": []
    },
    "8867": {
        "db_id": "cookbook",
        "question": "Among the recipes that take more than 10 minutes to prepare, what is the title of the one with the most calories?",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.prep_min > 10 ORDER BY T2.calories DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM recipes WHERE preparation_time > 10 ORDER BY calories ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7358": {
        "db_id": "works_cycles",
        "question": "Where are the shelves where the down tube product was stored?",
        "ground_truth": "SELECT T2.Shelf FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shelf_location FROM products WHERE product_name = 'down tube'"
        ],
        "rule_sql": []
    },
    "2021": {
        "db_id": "soccer_2016",
        "question": "How many players have left arm fast in bowling skill?",
        "ground_truth": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_skill = 'Left-arm fast'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE bowling_skill = 'left arm fast';"
        ],
        "rule_sql": []
    },
    "6287": {
        "db_id": "coinmarketcap",
        "question": "Name the coins that were not opened on May 2013.",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coins WHERE strftime('%Y-%m', opened_date) = '2013-05'"
        ],
        "rule_sql": []
    },
    "4434": {
        "db_id": "student_loan",
        "question": "Calculate the average duration of absense of disabled students.",
        "ground_truth": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(duration) FROM absences WHERE student_status = 'disabled';"
        ],
        "rule_sql": []
    },
    "2751": {
        "db_id": "european_football_1",
        "question": "How many teams that played in the 2012 season belong to any of the English divisions and what percentage play in each of the divisions?",
        "ground_truth": "SELECT ( SELECT COUNT(T1.Div) AS total FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS num , CASE WHEN 1 THEN T.result END AS percentage FROM ( SELECT 100.0 * COUNT(T1.Div) / ( SELECT COUNT(T1.Div) FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS result FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 GROUP BY T2.division ) AS T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    division, \n    COUNT(*) as team_count,\n    (COUNT(*) * 100 / (SELECT COUNT(*) FROM teams WHERE season = 2012 AND country = 'England')) as percentage\nFROM teams \nWHERE season = 2012 \nAND country = 'England'\nGROUP BY division;"
        ],
        "rule_sql": []
    },
    "4808": {
        "db_id": "legislator",
        "question": "Give the full name of legislators who have accounts on OpenSecrets.org.",
        "ground_truth": "SELECT COUNT(*) FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators WHERE account_status = 'active'"
        ],
        "rule_sql": []
    },
    "8141": {
        "db_id": "sales_in_weather",
        "question": "Please list the dates on which the temperature of station no.2 was above the 30-year normal.",
        "ground_truth": "SELECT `date` FROM weather WHERE station_nbr = 2 AND depart > 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date FROM temperature_data WHERE station_id = 2 AND temperature > 30;"
        ],
        "rule_sql": []
    },
    "8161": {
        "db_id": "sales_in_weather",
        "question": "Give the id of the weather station with most stores.",
        "ground_truth": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(station_nbr) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT station_id FROM weather_stations ORDER BY COUNT(stores) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6030": {
        "db_id": "books",
        "question": "Indicate the full name of all customers whose last name begins with the letter K.",
        "ground_truth": "SELECT first_name, last_name FROM customer WHERE last_name LIKE 'K%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers WHERE last_name LIKE 'K%';"
        ],
        "rule_sql": []
    },
    "5228": {
        "db_id": "address",
        "question": "Who is the CBSA officer of the post point in the area with the highest number of employees?",
        "ground_truth": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = ( SELECT MAX(employees) FROM zip_data )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT officer_name FROM cbsa_officers WHERE post_point_id = (SELECT post_point_id FROM areas ORDER BY employee_count DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "2491": {
        "db_id": "genes",
        "question": "Among the genes with nucleic acid metabolism defects, how many of them can be found in the vacuole?",
        "ground_truth": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM genes WHERE nucleic_acid_metabolism_defect = 1 AND location = 'vacuole';"
        ],
        "rule_sql": []
    },
    "8513": {
        "db_id": "software_company",
        "question": "Of the first 60,000 customers' responses to the incentive mailing sent by the marketing department, how many of them are considered a true response?",
        "ground_truth": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE customer_id <= 60000 AND response = 'true';"
        ],
        "rule_sql": []
    },
    "572": {
        "db_id": "codebase_comments",
        "question": "What is the name of the solution path with the highest processed time?",
        "ground_truth": "SELECT Path FROM Solution WHERE ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM solution_paths ORDER BY processed_time ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7064": {
        "db_id": "works_cycles",
        "question": "What is the name style of the employee with the lowest pay rate?",
        "ground_truth": "SELECT T2.NameStyle FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate IS NOT NULL ORDER BY T1.Rate ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name_style FROM employees ORDER BY pay_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4849": {
        "db_id": "legislator",
        "question": "How many districts are in Idaho?",
        "ground_truth": "SELECT COUNT(district) FROM `current-terms` WHERE state = 'ID'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM districts WHERE state = 'Idaho';"
        ],
        "rule_sql": []
    },
    "2382": {
        "db_id": "superstore",
        "question": "Provide the order ID of Frank Olsen of the South region.",
        "ground_truth": "SELECT T1.`Order ID` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.Region = 'South' AND T2.`Customer Name` = 'Frank Olsen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_id FROM orders WHERE customer_name = 'Frank Olsen' AND region = 'South';"
        ],
        "rule_sql": []
    },
    "1572": {
        "db_id": "car_retails",
        "question": "How many Sales Rep who are working in Tokyo? List out email and full name of those employees.",
        "ground_truth": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo' AND T1.jobTitle = 'Sales Rep'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) as count, email, first_name || ' ' || last_name as full_name \nFROM employees \nWHERE city = 'Tokyo' AND job_title = 'Sales Rep'\nGROUP BY email, full_name"
        ],
        "rule_sql": []
    },
    "7143": {
        "db_id": "works_cycles",
        "question": "What is the location id for Debur and Polish?",
        "ground_truth": "SELECT LocationID FROM Location WHERE Name = 'Debur and Polish'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location_id FROM locations WHERE process_name = 'Debur and Polish';"
        ],
        "rule_sql": []
    },
    "871": {
        "db_id": "cs_semester",
        "question": "What is the average satisfying degree of the course Machine Learning Theory?",
        "ground_truth": "SELECT CAST(SUM(T1.sat) AS REAL) / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Machine Learning Theory'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(satisfying_degree) FROM courses WHERE course_name = 'Machine Learning Theory';"
        ],
        "rule_sql": []
    },
    "4961": {
        "db_id": "olympics",
        "question": "What is the name of all the sports Chin Eei Hui has competed in?",
        "ground_truth": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'Chin Eei Hui'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sport_name FROM athletes WHERE name = 'Chin Eei Hui';"
        ],
        "rule_sql": []
    },
    "4552": {
        "db_id": "student_loan",
        "question": "Calculate the average number of disabled female students enrolled in UCI.",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.school = 'uci' AND T4.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN person AS T3 ON T1.name = T3.name LEFT JOIN male AS T4 ON T3.name = T4.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(male_students) FROM enrollment WHERE university = 'UCI' AND gender = 'male' AND disabled = 'no';"
        ],
        "rule_sql": []
    },
    "3424": {
        "db_id": "video_games",
        "question": "How many strategy games are there?",
        "ground_truth": "SELECT COUNT(CASE WHEN T1.genre_name = 'Strategy' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE genre = 'Strategy';"
        ],
        "rule_sql": []
    },
    "4297": {
        "db_id": "simpson_episodes",
        "question": "What award did the episode that aired on 11/30/2008 win?",
        "ground_truth": "SELECT T1.award FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Winner' AND T2.air_date = '2008-11-30';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT award_name FROM episodes WHERE air_date = '11/30/2008';"
        ],
        "rule_sql": []
    },
    "2397": {
        "db_id": "superstore",
        "question": "List the products ordered by customers in Coachella.",
        "ground_truth": "SELECT DISTINCT T3.`Product Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.City = 'Coachella'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.product_name \nFROM products p\nJOIN order_details od ON p.product_id = od.product_id\nJOIN orders o ON od.order_id = o.order_id\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.city = 'Coachella'\nORDER BY p.product_name;"
        ],
        "rule_sql": []
    },
    "2666": {
        "db_id": "regional_sales",
        "question": "List down the customer names and product names of the order made by \"Anthony Torres\" via distributor channel.",
        "ground_truth": "SELECT DISTINCT T1.`Customer Names`, T4.`Product Name` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products AS T4 ON T4.ProductID = T2._ProductID WHERE T3.`Sales Team` = 'Anthony Torres' AND T2.`Sales Channel` = 'Distributor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.customer_name, p.product_name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN products p ON oi.product_id = p.product_id\nWHERE c.customer_name = 'Anthony Torres'\nAND o.distributor_channel = 'distributor';"
        ],
        "rule_sql": []
    },
    "798": {
        "db_id": "social_media",
        "question": "What is the code of Gwynedd State?",
        "ground_truth": "SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM states WHERE code = 'Gwynedd';"
        ],
        "rule_sql": []
    },
    "6777": {
        "db_id": "retails",
        "question": "In the parts shipped by rail, how many are of medium priority?",
        "ground_truth": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'RAIL' AND T1.o_orderpriority = '3-MEDIUM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM parts WHERE shipping_method = 'rail' AND priority = 'medium';"
        ],
        "rule_sql": []
    },
    "241": {
        "db_id": "retail_complains",
        "question": "When did the earliest complaint start on 2017/3/22?",
        "ground_truth": "SELECT MIN(ser_time) FROM callcenterlogs WHERE `Date received` = '2017-03-22'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(complaint_date) FROM complaints WHERE complaint_date = '2017-03-22';"
        ],
        "rule_sql": []
    },
    "3391": {
        "db_id": "video_games",
        "question": "Mention the genre of the 2Xtreme.",
        "ground_truth": "SELECT T2.id FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2Xtreme'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM games WHERE title = '2Xtreme';"
        ],
        "rule_sql": []
    },
    "9198": {
        "db_id": "movie_3",
        "question": "What is the full name of the actor who has the highest number of restricted films?",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'R' GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.first_name, a.last_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.rating = 'R' \nGROUP BY a.actor_id \nORDER BY COUNT(*) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2445": {
        "db_id": "superstore",
        "question": "What is the product name of order CA-2011-115791 in the East superstore?",
        "ground_truth": "SELECT DISTINCT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'CA-2011-141817'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM orders WHERE order_id = 'CA-2011-115791' AND region = 'East'"
        ],
        "rule_sql": []
    },
    "3482": {
        "db_id": "video_games",
        "question": "What are the platform IDs of records released in 2006?",
        "ground_truth": "SELECT DISTINCT T.platform_id FROM game_platform AS T WHERE T.release_year = 2006",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform_id FROM records WHERE release_year = '2006';"
        ],
        "rule_sql": []
    },
    "3619": {
        "db_id": "authors",
        "question": "List all the paper that were under the conference homepage URL \"http://www.irma-international.org/\".",
        "ground_truth": "SELECT T1.Title FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage = 'http://www.irma-international.org/'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM papers WHERE conference_homepage = 'http://www.irma-international.org/';"
        ],
        "rule_sql": []
    },
    "2866": {
        "db_id": "professional_basketball",
        "question": "What is the average BMI of an All-star player?",
        "ground_truth": "SELECT AVG(CAST(T1.weight AS REAL) / (T1.height * T1.height)) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM players WHERE all_star = 1;"
        ],
        "rule_sql": []
    },
    "8600": {
        "db_id": "chicago_crime",
        "question": "Among the crimes in Woodlawn, how many of them happened in January, 2018?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE neighborhood = 'Woodlawn' AND date LIKE '2018-02%'"
        ],
        "rule_sql": []
    },
    "4270": {
        "db_id": "simpson_episodes",
        "question": "How many of the crew members who are taller than 1.70m were born in Canada?",
        "ground_truth": "SELECT COUNT(name) FROM Person WHERE height_meters > 1.70 AND birth_country = 'Canada';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crew_members WHERE height > 1.70 AND country_of_birth = 'Canada';"
        ],
        "rule_sql": []
    },
    "8888": {
        "db_id": "cookbook",
        "question": "How many times is the sodium content in Lasagne-Spinach Spirals to Beef and Spinach Pita Pockets?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.title = 'Lasagne-Spinach Spirals' THEN T2.sodium ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.title = 'Beef and Spinach Pita Pockets' THEN T2.sodium ELSE 0 END) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SELECT sodium FROM foods WHERE name = 'Lasagne-Spinach Spirals') / (SELECT sodium FROM foods WHERE name = 'Beef and Spinach Pita Pockets') AS sodium_ratio;"
        ],
        "rule_sql": []
    },
    "5305": {
        "db_id": "beer_factory",
        "question": "In the reviews of September 2014. Which brand of beers obtained the highest star ratings?",
        "ground_truth": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2014-09-01' AND '2014-09-30'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, AVG(stars) as avg_rating \nFROM reviews \nWHERE date LIKE '2014-09%' \nGROUP BY brand \nORDER BY avg_rating DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7958": {
        "db_id": "music_platform_2",
        "question": "What is the average rating of all the podcasts in category art?",
        "ground_truth": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM podcasts WHERE category = 'art';"
        ],
        "rule_sql": []
    },
    "2630": {
        "db_id": "regional_sales",
        "question": "Please list all sale team names which had orders on 5/31/2018.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.OrderDate = '5/31/18' THEN T2.`Sales Team` ELSE NULL END AS T FROM `Sales Orders` T1 INNER JOIN `Sales Team` T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM sales_teams WHERE order_date = '2018-05-31';"
        ],
        "rule_sql": []
    },
    "6760": {
        "db_id": "retails",
        "question": "Among the customers with an account balance lower than 4000, what is the percentage of the customers in the US?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.n_name = 'United States', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 4000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN c.country = 'US' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_us_customers\nFROM customers c\nWHERE c.account_balance > 4000;"
        ],
        "rule_sql": []
    },
    "9224": {
        "db_id": "movie_3",
        "question": "Provide any 5 customers' full names who have rented from Mike Hillyer.",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM staff AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.first_name = 'Mike' AND T1.last_name = 'Hillyer' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN staff s ON r.staff_id = s.staff_id WHERE s.first_name = 'Mike' AND s.last_name = 'Hillyer' LIMIT 5"
        ],
        "rule_sql": []
    },
    "1453": {
        "db_id": "synthea",
        "question": "List the full name of all patients with 'otitis media'.",
        "ground_truth": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Otitis media'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM patients WHERE diagnosis = 'otitis media'"
        ],
        "rule_sql": []
    },
    "8019": {
        "db_id": "university",
        "question": "What is the criteria name of the university ID 32 in 2015?",
        "ground_truth": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.university_id = 32 AND T2.year = 2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT criteria_name FROM universities WHERE university_id = 32 AND year = 2015;"
        ],
        "rule_sql": []
    },
    "4562": {
        "db_id": "student_loan",
        "question": "How many disabled students have zero absences?",
        "ground_truth": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE disabled = 1 AND absences > 0;"
        ],
        "rule_sql": []
    },
    "155": {
        "db_id": "movie_platform",
        "question": "Who created the list that has 142 comments? Indicate the user id of the user, if there are multiple lists with 142 comments, list the user id of the person who created the list",
        "ground_truth": "SELECT user_id FROM lists WHERE list_comments = 142",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id FROM lists WHERE comments = 142;"
        ],
        "rule_sql": []
    },
    "9414": {
        "db_id": "movie_3",
        "question": "How many customers are active?",
        "ground_truth": "SELECT COUNT(customer_id) FROM customer WHERE active = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE status = 'inactive';"
        ],
        "rule_sql": []
    },
    "1678": {
        "db_id": "restaurant",
        "question": "At what numbers on 9th Avenue of San Francisco there are restaurants?",
        "ground_truth": "SELECT id_restaurant FROM location WHERE City = 'san francisco' AND street_name = '9th avenue'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT number FROM restaurants WHERE avenue = '9th Avenue' AND city = 'San Francisco';"
        ],
        "rule_sql": []
    },
    "1759": {
        "db_id": "restaurant",
        "question": "Among the listed winery, what is the street number of the winery named \"Tulocay Winery\"?",
        "ground_truth": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT street_name FROM wineries WHERE winery_name = 'Tulocay Winery';"
        ],
        "rule_sql": []
    },
    "8670": {
        "db_id": "chicago_crime",
        "question": "What is the district address associated with the case JB107731?",
        "ground_truth": "SELECT T1.address FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T2.case_number = 'JB107731'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM districts WHERE case_id = 'JB107731';"
        ],
        "rule_sql": []
    },
    "2842": {
        "db_id": "professional_basketball",
        "question": "Please list the coach IDs who received the award twice from 1970 to 1990.",
        "ground_truth": "SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID, award HAVING COUNT(award) = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coach_id FROM awards WHERE award_year BETWEEN 1970 AND 1990 GROUP BY coach_id HAVING COUNT(*) = 2;"
        ],
        "rule_sql": []
    },
    "796": {
        "db_id": "social_media",
        "question": "Give the number of users who do not show their genders.",
        "ground_truth": "SELECT COUNT(UserID) AS user_number FROM user WHERE Gender = 'Unknown'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "1724": {
        "db_id": "restaurant",
        "question": "Which county is El Cerrito from?",
        "ground_truth": "SELECT county FROM geographic WHERE city = 'el cerrito'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state FROM cities WHERE name = 'El Cerrito';"
        ],
        "rule_sql": []
    },
    "1462": {
        "db_id": "synthea",
        "question": "How many times was Elly Koss given a care plan between 1/11/2009 and 10/23/2010?",
        "ground_truth": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START BETWEEN '2009-01-11' AND '2010-10-23'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM care_plans WHERE patient_name = 'Elly Koss' AND date BETWEEN '2009-11-01' AND '2010-10-23';"
        ],
        "rule_sql": []
    },
    "8564": {
        "db_id": "software_company",
        "question": "List down the number of inhabitants of customers with a widowed marital status and false response .",
        "ground_truth": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.MARITAL_STATUS = 'Widowed' AND T2.RESPONSE = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE marital_status = 'widowed' AND response = 'false';"
        ],
        "rule_sql": []
    },
    "7318": {
        "db_id": "works_cycles",
        "question": "Name the vendor who has the shortest average lead time for Product ID 319.",
        "ground_truth": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 319 ORDER BY T2.AverageLeadTime LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name FROM vendors WHERE product_id = 319 ORDER BY lead_time ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2412": {
        "db_id": "superstore",
        "question": "What is the total profit of \"Memorex Froggy Flash Drive 8 GB in south superstore?",
        "ground_truth": "SELECT SUM(T1.Profit) FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` GROUP BY T2.`Product Name` = 'Memorix Froggy Flash Drive 8 GB'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(profit) FROM sales WHERE product_name = 'Memorex Froggy Flash Drive 8 GB' AND store_name = 'south superstore';"
        ],
        "rule_sql": []
    },
    "8339": {
        "db_id": "mondial_geo",
        "question": "Name the river of which Lorraine is on. Please name the mountains where to source flow from?",
        "ground_truth": "SELECT T1.SourceLongitude, T1.SourceLatitude, T1.SourceAltitude FROM river AS T1 INNER JOIN geo_river AS T2 ON T2.River = T1.Name WHERE T2.Province = 'Lorraine'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT river.name, mountains.name \nFROM river \nJOIN mountains ON river.source = mountains.id \nWHERE river.name = 'Lorraine';"
        ],
        "rule_sql": []
    },
    "2700": {
        "db_id": "regional_sales",
        "question": "How many sales teams are there in the Midwest?",
        "ground_truth": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM `Sales Team`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales_teams WHERE region = 'Midwest';"
        ],
        "rule_sql": []
    },
    "7379": {
        "db_id": "works_cycles",
        "question": "Among the employees who were born before 1969, what is the work shift of the 6th oldest employee?",
        "ground_truth": "SELECT T3.StartTime, T3.EndTime FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE STRFTIME('%Y', T1.BirthDate) < '1969' ORDER BY T1.BirthDate LIMIT 5, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT work_shift FROM employees WHERE birth_year < 1969 ORDER BY birth_year ASC LIMIT 1 OFFSET 5;"
        ],
        "rule_sql": []
    },
    "4530": {
        "db_id": "student_loan",
        "question": "How many students in the Air Force?",
        "ground_truth": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE branch = 'Air Force';"
        ],
        "rule_sql": []
    },
    "4815": {
        "db_id": "legislator",
        "question": "Calculate the percentage of legislators who are Senator and were born in 1964.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.class IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio LIKE '%1964%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN title = 'Senator' AND birth_year = 1964 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM legislators;"
        ],
        "rule_sql": []
    },
    "4323": {
        "db_id": "simpson_episodes",
        "question": "Which title is the winner of Best International TV Series in 2017?",
        "ground_truth": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best International TV Series' AND SUBSTR(T1.year, 1, 4) = '2017';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM awards WHERE category = 'Best International TV Series' AND year = 2017 ORDER BY title LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8207": {
        "db_id": "sales_in_weather",
        "question": "List out dates when haze is recorded in store 35.",
        "ground_truth": "SELECT T1.`date` FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 35 AND T1.codesum LIKE '%' OR 'HZ' OR '%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date FROM weather_records WHERE store_id = 35 AND weather_condition = 'haze';"
        ],
        "rule_sql": []
    },
    "5183": {
        "db_id": "address",
        "question": "What was the population of Wilcox County in 2010?",
        "ground_truth": "SELECT SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'WILCOX'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population FROM counties WHERE county_name = 'Wilcox County' AND year = 2010;"
        ],
        "rule_sql": []
    },
    "8506": {
        "db_id": "mondial_geo",
        "question": "What percentage of countries became independent during the year 1960?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Independence) = '1960' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM countries)) AS percentage\nFROM countries\nWHERE indep_year = 1960;"
        ],
        "rule_sql": []
    },
    "3361": {
        "db_id": "video_games",
        "question": "List down the names of platform where the games released in 2016 can be played on.",
        "ground_truth": "SELECT DISTINCT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T2.release_year = 2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform_name FROM games WHERE release_year = 2016;"
        ],
        "rule_sql": []
    },
    "7094": {
        "db_id": "works_cycles",
        "question": "List the first and last name of all unmarried male Production Supervisors.",
        "ground_truth": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'M' AND T1.JobTitle LIKE 'Production Supervisor%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE gender = 'Male' AND marital_status = 'Married' AND job_title = 'Production Supervisor';"
        ],
        "rule_sql": []
    },
    "3826": {
        "db_id": "public_review_platform",
        "question": "How many businesses are actively running in Gilbert City?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Gilbert' AND active LIKE 'True'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Gilbert' AND status = 'active';"
        ],
        "rule_sql": []
    },
    "8031": {
        "db_id": "university",
        "question": "How many institutions with over 50,000 students in 2011 had a percentage of oversea students of more than 10%?",
        "ground_truth": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM institutions \nWHERE students_2011 > 50000 \nAND overseas_students_percentage > 10;"
        ],
        "rule_sql": []
    },
    "9401": {
        "db_id": "movie_3",
        "question": "Who among the actors starred in a NC-17 rated film? Provide only the last name of the actors.",
        "ground_truth": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'NC-17'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE rating = 'NC-17';"
        ],
        "rule_sql": []
    },
    "2273": {
        "db_id": "movielens",
        "question": "List down 5 non English adventure movies from UK?",
        "ground_truth": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.genre = 'Adventure' AND T2.isEnglish = 'F' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM movies WHERE country = 'UK' AND genre = 'Adventure' AND language = 'English' LIMIT 5;"
        ],
        "rule_sql": []
    },
    "3975": {
        "db_id": "public_review_platform",
        "question": "Write the user ID, business ID and tips length of who started using Yelp since 2004 and had high followers.",
        "ground_truth": "SELECT T1.user_id, T2.business_id, T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_fans = 'High'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, business_id, LENGTH(tips) as tips_length \nFROM users \nWHERE year_joined = 2004 AND followers > 1000"
        ],
        "rule_sql": []
    },
    "8357": {
        "db_id": "mondial_geo",
        "question": "How many mountains are there in the country with the most land area?",
        "ground_truth": "SELECT COUNT(Mountain) FROM geo_mountain WHERE Country = ( SELECT Code FROM country ORDER BY Area DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mountains WHERE country_id = (SELECT country_id FROM countries ORDER BY land_area DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "497": {
        "db_id": "movies_4",
        "question": "What is the country ID of the movie with the title of \"Pirates of the Caribbean: Dead Man's Chest\"?",
        "ground_truth": "SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_id FROM movies WHERE title = 'Pirates of the Caribbean: Dead Man's Chest'"
        ],
        "rule_sql": []
    },
    "7368": {
        "db_id": "works_cycles",
        "question": "What is the name of the product with the almost highest review score?",
        "ground_truth": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products ORDER BY review_score DESC LIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "7312": {
        "db_id": "works_cycles",
        "question": "List the name of married employees with less than 20 vacation hours.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T2.VacationHours < 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM employees WHERE marital_status = 'Single' AND vacation_hours >= 20;"
        ],
        "rule_sql": []
    },
    "3066": {
        "db_id": "cars",
        "question": "How much US dollars does a Ford Torino cost?",
        "ground_truth": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford torino'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM cars WHERE manufacturer = 'Ford' AND model = 'Torino' AND currency = 'USD';"
        ],
        "rule_sql": []
    },
    "7113": {
        "db_id": "works_cycles",
        "question": "How many black-colored products are there that cannot be sold?",
        "ground_truth": "SELECT COUNT(ProductID) FROM Product WHERE FinishedGoodsFlag = 0 AND Color = 'Black'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE color = 'black' AND status = 'sold';"
        ],
        "rule_sql": []
    },
    "5927": {
        "db_id": "books",
        "question": "Among the books ordered by Lucas Wyldbore, what is the percentage of those books over $13?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.price > 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN b.price > 13 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nJOIN books b ON o.book_id = b.book_id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore'"
        ],
        "rule_sql": []
    },
    "192": {
        "db_id": "book_publishing_company",
        "question": "Name all the authors for all business titles.",
        "ground_truth": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.type = 'business'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM books WHERE genre = 'fiction';"
        ],
        "rule_sql": []
    },
    "122": {
        "db_id": "movie_platform",
        "question": "Show the avatar of the user who gave the rating at 2019/10/17 1:36:36.",
        "ground_truth": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_timestamp_utc LIKE '2019-10-17 01:36:36'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT avatar FROM users WHERE rating_date = '2019/10/17 1:36:36'"
        ],
        "rule_sql": []
    },
    "4933": {
        "db_id": "olympics",
        "question": "Show the name of the sport with the most events.",
        "ground_truth": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id GROUP BY T1.sport_name ORDER BY COUNT(T2.event_name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sport_name FROM sports ORDER BY event_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3642": {
        "db_id": "authors",
        "question": "What is the title of the paper with the most authors?",
        "ground_truth": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id GROUP BY T1.PaperId ORDER BY COUNT(T1.PaperId) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers ORDER BY author_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4811": {
        "db_id": "legislator",
        "question": "What is the title of legislator whose birthday on 2/20/1942?",
        "ground_truth": "SELECT T2.title FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1942-02-20' GROUP BY T2.title",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM legislators WHERE birthday = '1942-02-20';"
        ],
        "rule_sql": []
    },
    "5703": {
        "db_id": "language_corpus",
        "question": "What are the word pairs that occured only twice?",
        "ground_truth": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word1, word2, COUNT(*) as occurrence_count FROM word_pairs GROUP BY word1, word2 HAVING occurrence_count = 2;"
        ],
        "rule_sql": []
    },
    "3080": {
        "db_id": "cars",
        "question": "Tell the origin country of car no.382.",
        "ground_truth": "SELECT DISTINCT T2.country FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.ID = 382",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM cars WHERE car_number = 382"
        ],
        "rule_sql": []
    },
    "7169": {
        "db_id": "works_cycles",
        "question": "How is the Credit Rating for company whose rowguid is \"33671A4E-DF2B-4879-807B-E3F930DD5C0C\"?",
        "ground_truth": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT CreditRating FROM Company WHERE rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C';"
        ],
        "rule_sql": []
    },
    "9107": {
        "db_id": "movie_3",
        "question": "Which film has a higher replacement cost, ACE GOLDFINGER or ACADEMY DINOSAUR?",
        "ground_truth": "SELECT title FROM film WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') ORDER BY replacement_cost DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, replacement_cost FROM film WHERE title = 'ACE GOLDFINGER' OR title = 'ACADEMY DINOSAUR' ORDER BY replacement_cost DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3185": {
        "db_id": "donor",
        "question": "How many students will be impacted for the Fit Firsties! Project?",
        "ground_truth": "SELECT T2.students_reached FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Fit Firsties!'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE project_name = 'Fit Firsties! Project';"
        ],
        "rule_sql": []
    },
    "5437": {
        "db_id": "sales",
        "question": "What is the price and quantity of the product named Seat Tube?",
        "ground_truth": "SELECT DISTINCT T2.Price, T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Seat Tube'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price, quantity FROM products WHERE name = 'Seat Tube';"
        ],
        "rule_sql": []
    },
    "4057": {
        "db_id": "public_review_platform",
        "question": "What are the categories of businesses that have opening time on Sunday?",
        "ground_truth": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T2.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T4.day_of_week = 'Sunday' AND T3.opening_time <> ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM businesses WHERE opening_time LIKE '%Sunday%';"
        ],
        "rule_sql": []
    },
    "7700": {
        "db_id": "hockey",
        "question": "For the team had the biggest power play percentage in 2011, who was their coach that season? Give the full name.",
        "ground_truth": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 2011 ORDER BY CAST(T2.PPG AS REAL) / T2.PPC DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coach_name FROM teams WHERE power_play_percentage = (SELECT MAX(power_play_percentage) FROM teams WHERE season = 2011);"
        ],
        "rule_sql": []
    },
    "1963": {
        "db_id": "soccer_2016",
        "question": "Who is the youngest player to have won the Purple Cap?",
        "ground_truth": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Purple_Cap ORDER BY T2.Season_Year - SUBSTR(T1.DOB, 1, 4) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, MIN(age) FROM players WHERE award = 'Purple Cap' GROUP BY player_name ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1244": {
        "db_id": "talkingdata",
        "question": "What percentage of vivo devices belong to users with no information?",
        "ground_truth": "SELECT SUM(IIF(T1.gender IS NULL AND T1.age IS NULL AND T1.`group` IS NULL, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM devices WHERE brand = 'vivo') AS percentage FROM devices d JOIN users u ON d.user_id = u.user_id WHERE u.information IS NOT NULL AND d.brand = 'vivo'"
        ],
        "rule_sql": []
    },
    "7568": {
        "db_id": "image_and_language",
        "question": "List all the object classes in image 10.",
        "ground_truth": "SELECT DISTINCT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM images WHERE image_id = 10;"
        ],
        "rule_sql": []
    },
    "2362": {
        "db_id": "superstore",
        "question": "What is the name of the product that was ordered recently by Darren Powers?",
        "ground_truth": "SELECT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Darren Powers' ORDER BY T2.`Order Date` DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE customer_name = 'Darren Powers' ORDER BY order_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3065": {
        "db_id": "cars",
        "question": "What is the acceleration of the most expensive car?",
        "ground_truth": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT acceleration FROM cars ORDER BY price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4064": {
        "db_id": "public_review_platform",
        "question": "How many businesses with the category named Stadiums & Arenas are rated highest?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Stadiums & Arenas' AND T3.stars = ( SELECT MAX(stars) FROM Business )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses b JOIN categories c ON b.category_id = c.id WHERE c.name = 'Stadiums & Arenas' AND b.rating = (SELECT MAX(rating) FROM businesses);"
        ],
        "rule_sql": []
    },
    "4616": {
        "db_id": "mental_health_survey",
        "question": "How many respondents who participated in the survey in 2019 have ever sought treatment for a mental health disorder from a mental health professional?",
        "ground_truth": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 7 AND T1.SurveyID = 2019 AND T1.AnswerText = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM survey_responses \nWHERE year = 2019 \nAND treatment = 'Yes' \nAND professional = 'Mental health professional';"
        ],
        "rule_sql": []
    },
    "2565": {
        "db_id": "app_store",
        "question": "How much is the average sentiment polarity score of Golf GPS Rangefinder: Golf Pad and what is it's rating in the Google Play Store?",
        "ground_truth": "SELECT AVG(T2.Sentiment_Polarity), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Golf GPS Rangefinder: Golf Pad'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(sentiment_polarity) as avg_polarity, rating \nFROM products \nWHERE name = 'Golf GPS Rangefinder: Golf Pad' \nGROUP BY rating;"
        ],
        "rule_sql": []
    },
    "205": {
        "db_id": "book_publishing_company",
        "question": "Among the stores that have ordered the book \"Life Without Fear\", how many of them are located in Massachusetts?",
        "ground_truth": "SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stores s JOIN orders o ON s.store_id = o.store_id JOIN books b ON o.book_id = b.book_id WHERE b.title = 'Life Without Fear' AND s.state = 'Massachusetts';"
        ],
        "rule_sql": []
    },
    "3631": {
        "db_id": "authors",
        "question": "How many authors finished the paper \"An Improved Active Suspension Model for Attitude Control of Electric Vehicles\" together?",
        "ground_truth": "SELECT COUNT(T2.AuthorId) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM authors WHERE paper_title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles';"
        ],
        "rule_sql": []
    },
    "2950": {
        "db_id": "professional_basketball",
        "question": "For the 2001 rebounds leader in the league, when was his birthday?",
        "ground_truth": "SELECT birthDate FROM players WHERE playerID = ( SELECT playerID FROM players_teams WHERE year = 2001 GROUP BY playerID ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birthday FROM players WHERE year = 2001 AND rebounds = MAX(rebounds);"
        ],
        "rule_sql": []
    },
    "6692": {
        "db_id": "retails",
        "question": "What is the nationality of \"Customer#000000055\"?",
        "ground_truth": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_name = 'Customer#000000055'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nationality FROM customers WHERE customer_id = 'Customer#000000055';"
        ],
        "rule_sql": []
    },
    "4728": {
        "db_id": "disney",
        "question": "Determine the average gross for Disney's PG-13-rated action movies.",
        "ground_truth": "SELECT SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) / COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'PG-13'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(gross) FROM movies WHERE studio = 'Disney' AND rating = 'PG-13' AND genre = 'Action';"
        ],
        "rule_sql": []
    },
    "5874": {
        "db_id": "airline",
        "question": "What is the scheduled local departure time and the actual departure time of the flight from Philadelphia to Harrisburg with the plane's tail number N627AE on the 13th of August 2018?",
        "ground_truth": "SELECT CRS_DEP_TIME, DEP_TIME FROM Airlines WHERE ORIGIN = 'PHL' AND DEST = 'MDT' AND TAIL_NUM = 'N627AE' AND FL_DATE = '2018/8/13'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT scheduled_departure_time, actual_departure_time \nFROM flights \nWHERE origin = 'Philadelphia' \nAND destination = 'Harrisburg' \nAND tail_number = 'N627AE' \nAND date = '2018-08-13';"
        ],
        "rule_sql": []
    },
    "6990": {
        "db_id": "ice_hockey_draft",
        "question": "How many playoffs did Per Mars participate in?",
        "ground_truth": "SELECT SUM(T2.GP) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PlayerName = 'Per Mars' AND T2.GAMETYPE = 'Playoffs'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM playoffs WHERE player_name = 'Per Mars';"
        ],
        "rule_sql": []
    },
    "5959": {
        "db_id": "books",
        "question": "What is the name of the publisher with publisher ID 22?",
        "ground_truth": "SELECT publisher_name FROM publisher WHERE publisher_id = 22",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM publishers WHERE publisher_id = 23;"
        ],
        "rule_sql": []
    },
    "4458": {
        "db_id": "student_loan",
        "question": "Calculate the ratio between unemployed students and disabled students.",
        "ground_truth": "SELECT CAST(( SELECT COUNT(name) FROM unemployed ) AS REAL ) / ( SELECT COUNT(name) FROM disabled )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS unemployed_count / COUNT(*) AS disabled_count FROM students WHERE employment_status = 'unemployed';"
        ],
        "rule_sql": []
    },
    "5410": {
        "db_id": "sales",
        "question": "Name the most expensive and the least expensive products available, excluding free gifts.",
        "ground_truth": "SELECT Name FROM Products WHERE Price IN (( SELECT MAX(Price) FROM Products ), ( SELECT MIN(Price) FROM Products ))",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, price FROM products WHERE price > 0 ORDER BY price DESC LIMIT 1; SELECT product_name, price FROM products WHERE price > 0 ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2877": {
        "db_id": "professional_basketball",
        "question": "How many players received Most Valuable Player award from 1969 to 1975?",
        "ground_truth": "SELECT COUNT(DISTINCT playerID) FROM awards_players WHERE year BETWEEN 1969 AND 1975 AND award = 'Most Valuable Player'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM awards WHERE award_name = 'Most Valuable Player' AND year BETWEEN 1969 AND 1975;"
        ],
        "rule_sql": []
    },
    "704": {
        "db_id": "trains",
        "question": "How many cars on a train that runs in the east direction have a flat roof?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.roof = 'flat' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trains WHERE direction = 'west' AND roof_type = 'flat';"
        ],
        "rule_sql": []
    },
    "5243": {
        "db_id": "beer_factory",
        "question": "Of the 4 root beers that Frank-Paul Santangelo purchased on 2014/7/7, how many of them were in cans?",
        "ground_truth": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07' AND T3.ContainerType = 'Can'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM purchases p\nJOIN products pr ON p.product_id = pr.product_id\nWHERE p.customer_name = 'Frank-Paul Santangelo'\nAND p.purchase_date = '2014-07-07'\nAND pr.product_name LIKE '%root beer%'\nAND pr.container_type = 'can';"
        ],
        "rule_sql": []
    },
    "3553": {
        "db_id": "authors",
        "question": "Calculate the differences of the paper number with the journal name of IWC in 2000 and 2010.",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Year = 2000 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Year = 2010 THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'IWC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM papers WHERE journal = 'IWC' AND year = 2010) - \n    (SELECT COUNT(*) FROM papers WHERE journal = 'IWC' AND year = 2000) AS paper_difference"
        ],
        "rule_sql": []
    },
    "6585": {
        "db_id": "retail_world",
        "question": "Indicate category name of soft drinks, coffees, teas, beers, and ales in description list.",
        "ground_truth": "SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category_name FROM categories WHERE description LIKE '%soft drinks%' OR description LIKE '%coffees%' OR description LIKE '%teas%' OR description LIKE '%beers%' OR description LIKE '%ales%';"
        ],
        "rule_sql": []
    },
    "1601": {
        "db_id": "car_retails",
        "question": "On what date did the customer with the lowest credit limit serviced by sales representative Barry Jones make payments for his/her orders?",
        "ground_truth": "SELECT T3.paymentDate FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber WHERE T1.firstName = 'Barry' AND T1.lastName = 'Jones' AND T1.jobTitle = 'Sales Rep' ORDER BY T2.creditLimit ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT payment_date \nFROM payments p\nJOIN customers c ON p.customer_id = c.customer_id\nJOIN employees e ON c.sales_rep_employee_id = e.employee_id\nWHERE e.first_name = 'Barry' AND e.last_name = 'Jones'\nORDER BY c.credit_limit ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7187": {
        "db_id": "works_cycles",
        "question": "How many male employees do not wish to receive e-mail promotion?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0 AND T1.Gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE gender = 'male' AND email_promotion = 1;"
        ],
        "rule_sql": []
    },
    "2874": {
        "db_id": "professional_basketball",
        "question": "Among the Most improved Players awarded from 1985-1990, how many player whose country is USA?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.playerID) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.award = 'Most Improved Player' AND T2.birthCountry = 'USA' AND T1.year BETWEEN 1985 AND 1990",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players p\nJOIN awards a ON p.player_id = a.player_id\nWHERE a.award_name = 'Most Improved Player' \nAND a.year BETWEEN 1985 AND 1990\nAND p.country = 'USA';"
        ],
        "rule_sql": []
    },
    "521": {
        "db_id": "movies_4",
        "question": "What is the iso code of \"Kyrgyz Republic\"?",
        "ground_truth": "SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT iso_code FROM countries WHERE country_name = 'Kyrgyzstan';"
        ],
        "rule_sql": []
    },
    "7016": {
        "db_id": "works_cycles",
        "question": "List the purchase order whereby all received quantity were rejected? Name those product.",
        "ground_truth": "SELECT T1.Name FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = T2.ReceivedQty AND T2.RejectedQty <> 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT po.purchase_order_id, p.product_name\nFROM purchase_orders po\nJOIN products p ON po.product_id = p.product_id\nWHERE po.received_quantity = po.rejected_quantity\nAND po.received_quantity > 0;"
        ],
        "rule_sql": []
    },
    "6275": {
        "db_id": "coinmarketcap",
        "question": "What was the average price of a Bitcoin in the year 2013?",
        "ground_truth": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y', T2.date) = '2013' AND T1.name = 'Bitcoin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM bitcoin_prices WHERE year = 2013;"
        ],
        "rule_sql": []
    },
    "2475": {
        "db_id": "shooting",
        "question": "List all cases from the year 2012 in which the subject was deceased",
        "ground_truth": "SELECT case_number FROM incidents WHERE STRFTIME('%Y', date) > '2011' AND subject_statuses = 'Deceased'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM cases WHERE year = 2012 AND subject_status = 'alive';"
        ],
        "rule_sql": []
    },
    "2912": {
        "db_id": "professional_basketball",
        "question": "What is the name of the university that was drafted from the player who won the NBA Finals MVP in 1990?",
        "ground_truth": "SELECT T1.college FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1990 AND T2.award = 'Finals MVP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university FROM players WHERE year = 1990 AND award = 'NBA Finals MVP';"
        ],
        "rule_sql": []
    },
    "629": {
        "db_id": "codebase_comments",
        "question": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"?",
        "ground_truth": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM solutions WHERE url = 'https://github.com/derickbailey/presentations-and-training.git';"
        ],
        "rule_sql": []
    },
    "107": {
        "db_id": "movie_platform",
        "question": "Which film rated by user 59988436 that received 21 comments?",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 59988436 AND T1.critic_comments = 21",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT f.title FROM films f JOIN ratings r ON f.film_id = r.film_id WHERE r.user_id = 59988436 AND r.comment_count = 21;"
        ],
        "rule_sql": []
    },
    "8983": {
        "db_id": "human_resources",
        "question": "List the full names, gender and positions who's location is in New York city.",
        "ground_truth": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name, gender, position FROM employees WHERE city = 'New York'"
        ],
        "rule_sql": []
    },
    "6194": {
        "db_id": "food_inspection_2",
        "question": "What is the inspection result for inspection done by Thomas Langley?",
        "ground_truth": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspection_result FROM inspections WHERE inspector_name = 'Thomas Langley';"
        ],
        "rule_sql": []
    },
    "8780": {
        "db_id": "food_inspection",
        "question": "Please list the names of the restaurants that had a low risk violation in inspections in 2014.",
        "ground_truth": "SELECT DISTINCT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2014' AND T1.risk_category = 'Low Risk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM restaurants WHERE violation = 'low risk' AND year = 2014;"
        ],
        "rule_sql": []
    },
    "1078": {
        "db_id": "talkingdata",
        "question": "How many device users are male?",
        "ground_truth": "SELECT COUNT(device_id) FROM gender_age WHERE gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female';"
        ],
        "rule_sql": []
    },
    "2356": {
        "db_id": "superstore",
        "question": "For how many times has Aimee Bixby ordered the product Xerox 1952?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T3.`Product Name` = 'Xerox 1952'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Aimee Bixby' AND product_name = 'Xerox 1952';"
        ],
        "rule_sql": []
    },
    "2490": {
        "db_id": "genes",
        "question": "How many non-essential genes are located in the nucleus?",
        "ground_truth": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'nucleus' AND T1.Essential = 'Non-Essential'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM genes WHERE location = 'nucleus' AND essential = 'yes';"
        ],
        "rule_sql": []
    },
    "7698": {
        "db_id": "hockey",
        "question": "For the team which had the most postseason shutouts in 1995, how many points did they have that year?",
        "ground_truth": "SELECT SUM(T2.SHO) FROM Scoring AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1995 GROUP BY T2.tmID ORDER BY SUM(T2.PostSHO) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT points FROM teams WHERE year = 1995 ORDER BY postseason_shutouts DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3305": {
        "db_id": "donor",
        "question": "What percentage of donations are given via a giving or campaign page? List the primary area of those donations.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.via_giving_page = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donation_total), ( SELECT T2.primary_focus_area FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.via_giving_page = 't' GROUP BY T2.primary_focus_area ORDER BY SUM(T1.donation_total) DESC LIMIT 1 ) result FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN donation_method = 'giving_page' OR donation_method = 'campaign_page' THEN 1 END) * 100.0 / COUNT(*)) AS percentage,\n    primary_area\nFROM donations\nWHERE donation_method IN ('giving_page', 'campaign_page')\nGROUP BY primary_area;"
        ],
        "rule_sql": []
    },
    "1114": {
        "db_id": "talkingdata",
        "question": "How many male users use the Galaxy Ace Plus model?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Ace Plus' AND T1.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female' AND model = 'Galaxy Ace Plus';"
        ],
        "rule_sql": []
    },
    "2569": {
        "db_id": "app_store",
        "question": "For the Honkai Impact 3rd App, what is the highest sentiment polarity score and what genre does it belong to?",
        "ground_truth": "SELECT MAX(T2.Sentiment_Polarity), T1.Genres FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Honkai Impact 3rd' AND T2.Sentiment_Polarity > 0.5 GROUP BY T1.Genres",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(sentiment_polarity) AS highest_sentiment, genre FROM apps WHERE app_name = 'Honkai Impact 3rd';"
        ],
        "rule_sql": []
    },
    "8518": {
        "db_id": "software_company",
        "question": "Among the male customers, how many of them come from a place with over 30,000 inhabitants?",
        "ground_truth": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE gender = 'male' AND population > 30000;"
        ],
        "rule_sql": []
    },
    "963": {
        "db_id": "cs_semester",
        "question": "Among courses with difficulty of 3, how many students have intellegence level of 2?",
        "ground_truth": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = 3 AND T1.intelligence = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students s JOIN courses c ON s.course_id = c.id WHERE c.difficulty = 3 AND s.intelligence = 2"
        ],
        "rule_sql": []
    },
    "3032": {
        "db_id": "shakespeare",
        "question": "What are the work numbers that are related to King Henry?",
        "ground_truth": "SELECT id FROM works WHERE Title LIKE '%Henry%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT work_number FROM employees WHERE first_name = 'Henry' AND last_name = 'King';"
        ],
        "rule_sql": []
    },
    "7430": {
        "db_id": "works_cycles",
        "question": "Please list the products that are under the Clothing category that are manufactured in-house and salable.",
        "ground_truth": "SELECT CASE WHEN T1.MakeFlag = 1 THEN T1.Name END FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T2.ProductSubcategoryID = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE category = 'Clothing' AND manufactured_in_house = 1 AND salable = 1;"
        ],
        "rule_sql": []
    },
    "613": {
        "db_id": "codebase_comments",
        "question": "For the repository with '8094' watchers , how many solutions does it contain?",
        "ground_truth": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = 8094",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM repositories WHERE watchers = '8094';"
        ],
        "rule_sql": []
    },
    "6283": {
        "db_id": "coinmarketcap",
        "question": "What is the name of the coin with the highest price?",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coins ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1347": {
        "db_id": "law_episode",
        "question": "Who was the nominee playing the role of Katrina Ludlow in the Law & Order series?",
        "ground_truth": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Nominee' AND T1.role = 'Katrina Ludlow' AND T1.series = 'Law and Order'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE role_name = 'Katrina Ludlow' AND series = 'Law & Order';"
        ],
        "rule_sql": []
    },
    "7160": {
        "db_id": "works_cycles",
        "question": "How many letters are there in Catherine Ward's e-mail account passwords?",
        "ground_truth": "SELECT LENGTH(T2.PasswordHash) FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Catherine' AND T1.LastName = 'Ward'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT LENGTH(password) FROM users WHERE name = 'Catherine Ward';"
        ],
        "rule_sql": []
    },
    "4103": {
        "db_id": "public_review_platform",
        "question": "How many businesses have more than 1 attribute?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value > 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE attribute_count > 1;"
        ],
        "rule_sql": []
    },
    "1405": {
        "db_id": "synthea",
        "question": "Indicate the patient's full name with the lowest body mass index in kg/m2.",
        "ground_truth": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' AND T2.UNITS = 'kg/m2' ORDER BY T2.VALUE LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM patients ORDER BY weight / (height * height) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7973": {
        "db_id": "music_platform_2",
        "question": "Which category has the most reviews?",
        "ground_truth": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.category ORDER BY COUNT(T2.podcast_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, COUNT(*) as review_count FROM reviews GROUP BY category ORDER BY review_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2185": {
        "db_id": "world_development_indicators",
        "question": "What is the ratio between country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971? List the country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971.",
        "ground_truth": "SELECT CAST(MAX(value) AS REAL) / MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' UNION ALL SELECT countryname FROM ( SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' ) UNION SELECT countryname FROM ( SELECT countryname, MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT country FROM infant_mortality WHERE year = 1971 ORDER BY infant_deaths DESC LIMIT 1) AS highest_country,\n    (SELECT country FROM infant_mortality WHERE year = 1971 ORDER BY infant_deaths ASC LIMIT 1) AS lowest_country,\n    (SELECT infant_deaths FROM infant_mortality WHERE year = 1971 ORDER BY infant_deaths DESC LIMIT 1) / \n    (SELECT infant_deaths FROM infant_mortality WHERE year = 1971 ORDER BY infant_deaths ASC LIMIT 1) AS ratio"
        ],
        "rule_sql": []
    },
    "889": {
        "db_id": "cs_semester",
        "question": "What is the full name of the professor who graduated from an Ivy League School?",
        "ground_truth": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM professors WHERE school_type = 'Ivy League';"
        ],
        "rule_sql": []
    },
    "976": {
        "db_id": "computer_student",
        "question": "What level is course 165? List the professors who teach the course.",
        "ground_truth": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT level, professor_name FROM courses WHERE course_id = 165;"
        ],
        "rule_sql": []
    },
    "3508": {
        "db_id": "authors",
        "question": "How many authors are affiliated with University of California Berkeley?",
        "ground_truth": "SELECT COUNT(Id) FROM Author WHERE Affiliation = 'University of California Berkeley'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM authors WHERE affiliation = 'University of California Berkeley';"
        ],
        "rule_sql": []
    },
    "2747": {
        "db_id": "european_football_1",
        "question": "How many teams playing in divisions in Greece have ever scored 4 or more goals?",
        "ground_truth": "SELECT COUNT(DISTINCT CASE WHEN T1.FTHG >= 4 THEN HomeTeam ELSE NULL end) + COUNT(DISTINCT CASE WHEN T1.FTAG >= 4 THEN AwayTeam ELSE NULL end) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' ",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM teams \nWHERE division = 'Greece' AND goals_scored >= 4;"
        ],
        "rule_sql": []
    },
    "1634": {
        "db_id": "car_retails",
        "question": "Which product did Cruz & Sons Co. order on 2003/3/3?",
        "ground_truth": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM orders WHERE company = 'Cruz & Sons Co.' AND order_date = '2003/3/3';"
        ],
        "rule_sql": []
    },
    "3113": {
        "db_id": "cars",
        "question": "Among the cars originated from Japan, what is the name of the car with the highest price?",
        "ground_truth": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' ORDER BY T1.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cars WHERE origin = 'Japan' ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7441": {
        "db_id": "works_cycles",
        "question": "What is the thumbnail photo file for the product with the id \"979\"?",
        "ground_truth": "SELECT T2.ThumbnailPhotoFileName FROM ProductProductPhoto AS T1 INNER JOIN ProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.ProductID = 979",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT photo FROM products WHERE product_id = 979;"
        ],
        "rule_sql": []
    },
    "222": {
        "db_id": "book_publishing_company",
        "question": "What's on the notes for the order happened on 1994/9/14?",
        "ground_truth": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1994-09-14'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT notes FROM orders WHERE order_date = '1994/9/14';"
        ],
        "rule_sql": []
    },
    "2345": {
        "db_id": "superstore",
        "question": "Please list the names of all the products ordered in order CA-2011-112326 in superstores in the center.",
        "ground_truth": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'CA-2011-112326'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE order_id = 'CA-2011-112326' AND store_location = 'center';"
        ],
        "rule_sql": []
    },
    "2598": {
        "db_id": "regional_sales",
        "question": "Describe the customer names and lasting delivery periods for the product of \"Bedroom Furniture\" by wholesale channel in 2019.",
        "ground_truth": "SELECT T1.`Customer Names`, T2.DeliveryDate FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.`Sales Channel` = 'Wholesale' AND T3.`Product Name` = 'Bedroom Furniture' AND T2.OrderDate LIKE '%/%/19'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name, delivery_period \nFROM customers \nWHERE product_type = 'Bedroom Furniture' \nAND channel = 'wholesale' \nAND year = 2019;"
        ],
        "rule_sql": []
    },
    "2430": {
        "db_id": "superstore",
        "question": "Please list any three orders that caused a loss to the company.",
        "ground_truth": "SELECT `Order ID` FROM central_superstore WHERE Profit < 0 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM orders ORDER BY total_amount DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "6770": {
        "db_id": "retails",
        "question": "What percentage of customers from France is in the automobile segment?",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'AUTOMOBILE', 1, 0)) AS REAL) * 100 / COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'FRANCE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100) FROM customers WHERE country = 'France';"
        ],
        "rule_sql": []
    },
    "8312": {
        "db_id": "mondial_geo",
        "question": "Of the deserts on the America Continent, which one covers the greatest area?",
        "ground_truth": "SELECT T5.Name FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN geo_desert AS T4 ON T4.Country = T1.Code INNER JOIN desert AS T5 ON T5.Name = T4.Desert WHERE T3.Name = 'America' ORDER BY T5.Area DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Desert, Area FROM deserts WHERE Continent = 'America' ORDER BY Area ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3081": {
        "db_id": "cars",
        "question": "Which is the origin country of the $44274.40748 car?",
        "ground_truth": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.price = 44274.40748",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM cars WHERE price = 44274.40748"
        ],
        "rule_sql": []
    },
    "6925": {
        "db_id": "ice_hockey_draft",
        "question": "Among all the players that are right-shooted, how many of them weigh over 90 kg?",
        "ground_truth": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.shoots = 'R'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE shoot = 'right' AND weight > 90;"
        ],
        "rule_sql": []
    },
    "1272": {
        "db_id": "law_episode",
        "question": "How many people have won at least 3 awards?",
        "ground_truth": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.result = 'Winner' GROUP BY T1.person_id HAVING COUNT(T2.award_id) >= 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE awards >= 3;"
        ],
        "rule_sql": []
    },
    "4576": {
        "db_id": "mental_health_survey",
        "question": "How many female users were surveyed in the mental health survey for 2017 in the state of Nebraska?",
        "ground_truth": "SELECT COUNT(*) FROM ( SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T3.Description = 'mental health survey for 2017' AND T1.questionid = 2 AND T2.AnswerText = 'Female' UNION SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T1.questionid = 4 AND T2.AnswerText = 'Nebraska' AND T3.Description = 'mental health survey for 2017' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mental_health_survey WHERE gender = 'female' AND year = 2017 AND state = 'Nebraska';"
        ],
        "rule_sql": []
    },
    "4348": {
        "db_id": "simpson_episodes",
        "question": "State the birth name of crews who are director and have birth country in South Korea.",
        "ground_truth": "SELECT T1.birth_name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.role = 'director' AND T1.birth_country = 'South Korea';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_name FROM crews WHERE role = 'director' AND birth_country = 'South Korea';"
        ],
        "rule_sql": []
    },
    "7354": {
        "db_id": "works_cycles",
        "question": "What bike subcategories are there?",
        "ground_truth": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T2.name = 'Bikes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM bikes;"
        ],
        "rule_sql": []
    },
    "2498": {
        "db_id": "genes",
        "question": "For the non-essential genes whose functions are transcription, how many of them are not located in the cytoplasm?",
        "ground_truth": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization != 'cytoplasm' AND T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'NON-Essential'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM genes \nWHERE essential = 'non-essential' \nAND function = 'transcription' \nAND location = 'cytoplasm';"
        ],
        "rule_sql": []
    },
    "3357": {
        "db_id": "video_games",
        "question": "Provide the release year of record ID 1 to 10.",
        "ground_truth": "SELECT T.release_year FROM game_platform AS T WHERE T.id BETWEEN 1 AND 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT release_year FROM records WHERE id BETWEEN 1 AND 10"
        ],
        "rule_sql": []
    },
    "8782": {
        "db_id": "food_inspection",
        "question": "Please list the descriptions of all the high risk violations of Tiramisu Kitchen.",
        "ground_truth": "SELECT DISTINCT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T2.name = 'Tiramisu Kitchen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM violations WHERE restaurant_name = 'Tiramisu Kitchen' AND risk_level = 'Low';"
        ],
        "rule_sql": []
    },
    "7008": {
        "db_id": "works_cycles",
        "question": "How much would be the total sales profit for shopping cart ID 20621 ?",
        "ground_truth": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 20621",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price * quantity) AS total_profit FROM shopping_cart_items WHERE cart_id = 20621"
        ],
        "rule_sql": []
    },
    "3919": {
        "db_id": "public_review_platform",
        "question": "In users yelping since 2010 to 2012, how many of them has an low fans?",
        "ground_truth": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2010 AND 2012 AND user_fans LIKE 'Low'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE yelping_since BETWEEN '2010' AND '2012' AND fans < 5;"
        ],
        "rule_sql": []
    },
    "2157": {
        "db_id": "world_development_indicators",
        "question": "List out the country code and country name of the rich countries using Euro as their currency unit",
        "ground_truth": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_code, country_name FROM countries WHERE currency = 'Euro' AND gdp > 1000000000000;"
        ],
        "rule_sql": []
    },
    "2586": {
        "db_id": "regional_sales",
        "question": "Calculate the average net profit for bakeware product.",
        "ground_truth": "SELECT AVG(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', ''))  FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Bakeware'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price - cost) FROM products WHERE category = 'bakeware';"
        ],
        "rule_sql": []
    },
    "8955": {
        "db_id": "human_resources",
        "question": "Who is the highest paid employee in \"Boston\"? Give the full name.",
        "ground_truth": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Boston' ORDER BY T1.salary DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE city = 'Boston' ORDER BY salary ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2757": {
        "db_id": "european_football_1",
        "question": "What is the name of the division in which Club Brugge and Genk competed on September 13, 2009?",
        "ground_truth": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2009-09-13' and T1.HomeTeam = 'Club Brugge' AND T1.AwayTeam = 'Genk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division_name FROM matches WHERE home_team = 'Club Brugge' AND away_team = 'Genk' AND match_date = '2009-09-13';"
        ],
        "rule_sql": []
    },
    "8216": {
        "db_id": "sales_in_weather",
        "question": "What was the average temperature differences during May 2012 for store number 6 and 7?",
        "ground_truth": "SELECT ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(`date`) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr AND T1.`date` LIKE '%2012-05%' AND T2.store_nbr = 6 ) - ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(`date`) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` LIKE '%2012-05%' AND T2.store_nbr = 7 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(temperature) FROM weather_data WHERE store_id IN (6, 7) AND month = 'May' AND year = 2012;"
        ],
        "rule_sql": []
    },
    "1033": {
        "db_id": "computer_student",
        "question": "What is the total of professional courses available at the university? List out all the course id.",
        "ground_truth": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_500'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_id FROM courses WHERE course_type = 'professional';"
        ],
        "rule_sql": []
    },
    "5975": {
        "db_id": "books",
        "question": "Name the streets in Dallas.",
        "ground_truth": "SELECT street_name FROM address WHERE city = 'Dallas'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT street_name FROM streets WHERE city = 'Dallas';"
        ],
        "rule_sql": []
    },
    "5550": {
        "db_id": "menu",
        "question": "Among the menus sponsored by Pacific Mail Steamship Company, how many menus have no more than 2 pages?",
        "ground_truth": "SELECT COUNT(*) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY' GROUP BY T2.menu_id HAVING COUNT(T2.page_number) <= 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menus WHERE sponsor = 'Pacific Mail Steamship Company' AND pages <= 2;"
        ],
        "rule_sql": []
    },
    "7752": {
        "db_id": "hockey",
        "question": "What is the power play chances of New York Rangers in 2009?",
        "ground_truth": "SELECT CAST(PPG AS REAL) / PPC FROM Teams WHERE year = 2009 AND name = 'New York Rangers'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT power_play_chances FROM team_stats WHERE team_name = 'New York Rangers' AND year = 2009;"
        ],
        "rule_sql": []
    },
    "3521": {
        "db_id": "authors",
        "question": "How many papers whose authors include Thomas Wiegand were published in 1995?",
        "ground_truth": "SELECT COUNT(T2.Title) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE authors LIKE '%Thomas Wiegand%' AND year = 1995;"
        ],
        "rule_sql": []
    },
    "1481": {
        "db_id": "synthea",
        "question": "What is the care plan, procedure, medication and the patient's full name for encounter 6f2e3935-b203-493e-a9c0-f23e847b9798?",
        "ground_truth": "SELECT DISTINCT T3.DESCRIPTION, T4.DESCRIPTION, T5.DESCRIPTION, T1.first, T1.last FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT INNER JOIN careplans AS T3 ON T1.patient = T3.PATIENT INNER JOIN procedures AS T4 ON T1.patient = T4.PATIENT INNER JOIN medications AS T5 ON T1.patient = T5.PATIENT WHERE T2.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, p.last_name, cp.plan_name, pr.procedure_name, m.medication_name\nFROM patients p\nJOIN encounters e ON p.patient_id = e.patient_id\nJOIN care_plans cp ON e.encounter_id = cp.encounter_id\nJOIN procedures pr ON e.encounter_id = pr.encounter_id\nJOIN medications m ON e.encounter_id = m.encounter_id\nWHERE e.encounter_id = '6f2e3935-b203-493e-a9c0-f23e847b9798';"
        ],
        "rule_sql": []
    },
    "2571": {
        "db_id": "app_store",
        "question": "Which education App has the worst rating and state the translated review if available.",
        "ground_truth": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'EDUCATION' GROUP BY T1.App, T2.Translated_Review ORDER BY T1.Rating ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT app_name, rating, translated_review FROM education_apps ORDER BY rating ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3382": {
        "db_id": "video_games",
        "question": "How many games are puzzle genre?",
        "ground_truth": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Puzzle'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE genre = 'puzzle';"
        ],
        "rule_sql": []
    },
    "3933": {
        "db_id": "public_review_platform",
        "question": "Among the businesses with a category of Local Services, what is the percentage of the business with less than 3 stars?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.stars < 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Local Services'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM businesses WHERE category = 'Local Services')) AS percentage\nFROM businesses \nWHERE category = 'Local Services' AND stars < 3;"
        ],
        "rule_sql": []
    },
    "3271": {
        "db_id": "donor",
        "question": "On how many projects where the teacher has ordered between 5 to 10 items are from are from Quill.com?",
        "ground_truth": "SELECT COUNT(projectid) FROM resources WHERE vendor_name = 'Quill.com' AND item_quantity BETWEEN 5 AND 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM projects p\nJOIN teachers t ON p.teacher_id = t.id\nJOIN orders o ON t.id = o.teacher_id\nWHERE o.total_items BETWEEN 5 AND 10\nAND p.source = 'Quill.com';"
        ],
        "rule_sql": []
    },
    "8346": {
        "db_id": "mondial_geo",
        "question": "For all cities where Seine is located at, which city has the greatest population? Calculate the difference from the city with least population.",
        "ground_truth": "SELECT MAX(T1.Population) - MIN(T1.population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Seine'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name, population, (MAX(population) - MIN(population)) AS population_difference\nFROM cities\nWHERE river = 'Seine'\nGROUP BY city_name\nORDER BY population DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8377": {
        "db_id": "mondial_geo",
        "question": "What is the main spoken language in MNE?",
        "ground_truth": "SELECT Name FROM language WHERE Country = 'MNE' ORDER BY Percentage DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM countries WHERE country_code = 'MNE';"
        ],
        "rule_sql": []
    },
    "2538": {
        "db_id": "app_store",
        "question": "How many negative comments are there in all the apps with 100,000,000+ installs?",
        "ground_truth": "SELECT COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '100,000,000+' AND T2.Sentiment = 'Negative'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM comments WHERE rating < 0 AND installs > 100000000;"
        ],
        "rule_sql": []
    },
    "5120": {
        "db_id": "address",
        "question": "Tell the name of the county which is represented by Hartzler Vicky.",
        "ground_truth": "SELECT T1.county FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Hartzler' AND T3.last_name = 'Vicky' GROUP BY T1.county",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county_name FROM representatives WHERE name = 'Hartzler Vicky';"
        ],
        "rule_sql": []
    },
    "2502": {
        "db_id": "genes",
        "question": "Lists all genes by identifier number located in the cytoplasm and whose function is metabolism.",
        "ground_truth": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gene_id FROM genes WHERE location = 'cytoplasm' AND function = 'metabolism';"
        ],
        "rule_sql": []
    },
    "6695": {
        "db_id": "retails",
        "question": "For the order with the total price of 231499.38, what was the discounted price for supplier No. 9397?",
        "ground_truth": "SELECT T1.l_extendedprice * (1 - T1.l_discount) AS DISCOUNTERPRICE FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE T1.l_suppkey = 9397 AND T2.o_totalprice = 231499.38",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT discounted_price FROM orders WHERE total_price = 231499.38 AND supplier_id = 9397;"
        ],
        "rule_sql": []
    },
    "1965": {
        "db_id": "soccer_2016",
        "question": "How many overs were there in each innings of match ID \"336011\"?",
        "ground_truth": "SELECT SUM(CASE WHEN Innings_No = 1 THEN 1 ELSE 0 END) AS IN1 , SUM(CASE WHEN Innings_No = 2 THEN 1 ELSE 0 END) AS IN2 FROM Ball_by_Ball WHERE Match_Id = 336011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT innings, COUNT(*) FROM deliveries WHERE match_id = '336011' GROUP BY innings;"
        ],
        "rule_sql": []
    },
    "3242": {
        "db_id": "donor",
        "question": "Show the school id for the project 'Virtual Aquarium Needs Help!'.",
        "ground_truth": "SELECT T2.schoolid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Virtual Aquarium Needs Help!'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_id FROM projects WHERE project_name = 'Virtual Aquarium Needs Help!'"
        ],
        "rule_sql": []
    },
    "1063": {
        "db_id": "talkingdata",
        "question": "Describe the phone brands and models of the users who participated in events on 5th May, 2016 at the coordinates of (112,44).",
        "ground_truth": "SELECT DISTINCT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.timestamp LIKE '2016-05-05%' AND T1.longitude = 112 AND T1.latitude = 44",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.phone_brand, u.phone_model \nFROM users u\nJOIN events e ON u.user_id = e.user_id\nWHERE e.date = '2016-05-05' \nAND e.latitude = 112 \nAND e.longitude = 44"
        ],
        "rule_sql": []
    },
    "2245": {
        "db_id": "world_development_indicators",
        "question": "What is the percentage of increase of the indicator on Adolescent fertility rate from 1960 to 1961 in the country whose Alpha2Code is 1A?",
        "ground_truth": "SELECT (( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )) * 1.0 / ( SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ((t1961.value - t1960.value) / t1960.value) * 100 AS percentage_increase\nFROM \n    (SELECT value FROM indicators WHERE year = 1961 AND indicator = 'Adolescent fertility rate' AND Alpha2Code = '1A') AS t1961,\n    (SELECT value FROM indicators WHERE year = 1960 AND indicator = 'Adolescent fertility rate' AND Alpha2Code = '1A') AS t1960\nWHERE \n    t1960.value IS NOT NULL AND t1961.value IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "3570": {
        "db_id": "authors",
        "question": "How many journals do not have a website?",
        "ground_truth": "SELECT COUNT(HomePage) FROM Journal WHERE HomePage = ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM journals WHERE website IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "7433": {
        "db_id": "works_cycles",
        "question": "How much more expensive in percentage is the product with the highest selling price from the product with the lowest selling price in the Clothing category?",
        "ground_truth": "SELECT (MAX(T1.ListPrice) - MIN(T1.ListPrice)) * 100 / MIN(T1.ListPrice) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ((MAX(price) - MIN(price)) / MIN(price)) * 100 AS percentage_difference\nFROM products\nWHERE category = 'Clothing';"
        ],
        "rule_sql": []
    },
    "8660": {
        "db_id": "chicago_crime",
        "question": "Calculate the average population of community areas in the West side.",
        "ground_truth": "SELECT AVG(population) FROM Community_Area WHERE side = 'West '",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(population) FROM community_areas WHERE side = 'West';"
        ],
        "rule_sql": []
    },
    "9184": {
        "db_id": "movie_3",
        "question": "How many films are categorized as horror?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Horror'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE category = 'horror';"
        ],
        "rule_sql": []
    },
    "7215": {
        "db_id": "works_cycles",
        "question": "What is the full name of the Vice President of Production?",
        "ground_truth": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Vice President of Production'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE job_title = 'Vice President of Production'"
        ],
        "rule_sql": []
    },
    "5288": {
        "db_id": "beer_factory",
        "question": "Give the name of the brands that brewed their first drink between 1996 and 2000 in the descending order of the date brewed.",
        "ground_truth": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear BETWEEN '1996' AND '2000' ORDER BY FirstBrewedYear DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand_name FROM brands WHERE first_brewed_year BETWEEN 1996 AND 2000 ORDER BY first_brewed_year ASC;"
        ],
        "rule_sql": []
    },
    "6887": {
        "db_id": "retails",
        "question": "On which date was the part \"burnished seashell gainsboro navajo chocolate\" in order no.1 shipped?",
        "ground_truth": "SELECT T1.l_shipdate FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ship_date FROM orders WHERE order_no = 1 AND part_name = 'burnished seashell gainsboro navajo chocolate';"
        ],
        "rule_sql": []
    },
    "5200": {
        "db_id": "address",
        "question": "Indicate the name of the country with a population greater than 10000 in 2010.",
        "ground_truth": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 > 10000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE population > 10000 AND year = 2010;"
        ],
        "rule_sql": []
    },
    "7999": {
        "db_id": "university",
        "question": "How many universities scored 0 in Awards between 2005 to 2015?",
        "ground_truth": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE Awards = 0 AND Year BETWEEN 2005 AND 2015;"
        ],
        "rule_sql": []
    },
    "571": {
        "db_id": "codebase_comments",
        "question": "What is the most liked repository? Indicate its github address and the amount of stars it has received.",
        "ground_truth": "SELECT Url, Stars FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, url, stars FROM repositories ORDER BY stars ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "63": {
        "db_id": "movie_platform",
        "question": "When did the creator of the list \"250 Favourite Films\" last updated a movie list?",
        "ground_truth": "SELECT T2.list_update_date_utc FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films' ORDER BY T2.list_update_date_utc DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(updated_at) FROM movie_lists WHERE creator_id = (SELECT id FROM users WHERE username = '250 Favourite Films');"
        ],
        "rule_sql": []
    },
    "5541": {
        "db_id": "menu",
        "question": "How many dishes appeared more than once on a menu?",
        "ground_truth": "SELECT COUNT(*) FROM Dish WHERE times_appeared > Dish.menus_appeared",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menu GROUP BY dish_id HAVING COUNT(*) > 1;"
        ],
        "rule_sql": []
    },
    "8237": {
        "db_id": "mondial_geo",
        "question": "For countries with area between 500000 to 1000000, state the country and infant mortality rate.",
        "ground_truth": "SELECT T1.Name, T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Area BETWEEN 500000 AND 1000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, infant_mortality_rate FROM countries WHERE area > 1000000 OR area < 500000;"
        ],
        "rule_sql": []
    },
    "1812": {
        "db_id": "soccer_2016",
        "question": "Give the date of birth of the 2014 Orange Cap winner.",
        "ground_truth": "SELECT T2.DOB FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2014 AND T1.Orange_Cap IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date_of_birth FROM players WHERE year = 2014 AND award = 'Orange Cap'"
        ],
        "rule_sql": []
    },
    "2347": {
        "db_id": "superstore",
        "question": "Among all the orders made by Aimee Bixby, how many of them chose the slowest delivery speed?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T2.`Ship Mode` = 'Standard Class'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.first_name = 'Aimee' AND c.last_name = 'Bixby'\nAND o.delivery_speed = (SELECT MAX(delivery_speed) FROM orders);"
        ],
        "rule_sql": []
    },
    "2568": {
        "db_id": "app_store",
        "question": "Indicate the number of installs and include the percentage of positive sentiments of FREEDOME VPN Unlimited anonymous Wifi Security.",
        "ground_truth": "SELECT T1.Installs , CAST(SUM(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100 / SUM(CASE WHEN T2.Sentiment IS NOT NULL THEN 1.0 ELSE 0 END) AS REAL) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'FREEDOME VPN Unlimited anonymous Wifi Security'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS installs, \n       (SELECT COUNT(*) FROM reviews WHERE sentiment = 'positive') * 100.0 / COUNT(*) AS positive_percentage\nFROM installs\nWHERE app_name = 'FREEDOME VPN Unlimited anonymous Wifi Security'"
        ],
        "rule_sql": []
    },
    "3214": {
        "db_id": "donor",
        "question": "Among the schools' projects whose donation didn't use account credits redemption,how many schools are public magnet schools?",
        "ground_truth": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_magnet = 't' AND T2.payment_included_acct_credit = 'f'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM schools s\nJOIN projects p ON s.school_id = p.school_id\nJOIN donations d ON p.project_id = d.project_id\nWHERE d.payment_method = 'account_credit_redemption'\nAND s.school_type = 'public magnet';"
        ],
        "rule_sql": []
    },
    "2088": {
        "db_id": "music_tracker",
        "question": "Which artists have released singles with the tag 1970s?",
        "ground_truth": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' AND T2.tag LIKE '1970s'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name FROM singles WHERE tag = '1970s';"
        ],
        "rule_sql": []
    },
    "4012": {
        "db_id": "public_review_platform",
        "question": "Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN user_fans = 'None' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users WHERE user_average_stars >= 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN fans = 0 AND followers = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percent_no_fans_followers\nFROM users\nWHERE user_id IN (\n    SELECT user_id \n    FROM reviews \n    GROUP BY user_id \n    HAVING AVG(rating) >= 4\n)"
        ],
        "rule_sql": []
    },
    "4994": {
        "db_id": "olympics",
        "question": "Which city was the 1992 Summer Olympic held?",
        "ground_truth": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM olympics WHERE year = 1992 AND season = 'Winter';"
        ],
        "rule_sql": []
    },
    "5251": {
        "db_id": "beer_factory",
        "question": "Among all the root beers sold in 2014, what is the percentage of the root beers produced by the brewery AJ Stephans Beverages?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.BreweryName = 'AJ Stephans Beverages' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN b.brewery = 'AJ Stephans Beverages' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM beers b\nJOIN sales s ON b.beer_id = s.beer_id\nWHERE b.style = 'Root Beer' \nAND s.year = 2014;"
        ],
        "rule_sql": []
    },
    "508": {
        "db_id": "movies_4",
        "question": "What is the language ID of the movie \"Walk the Line\"?",
        "ground_truth": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Walk the Line'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language_id FROM movies WHERE title = 'Walk the Line';"
        ],
        "rule_sql": []
    },
    "956": {
        "db_id": "cs_semester",
        "question": "Find the university from which the professor who advised most undergraduate students graduated.",
        "ground_truth": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university FROM professors ORDER BY COUNT(undergraduate_students) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7138": {
        "db_id": "works_cycles",
        "question": "What percentage of AdventureWorks employees are men?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessentityID = T2.BusinessentityID WHERE T1.PersonType = 'EM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN Gender = 'M' THEN 1 END) / COUNT(*)) * 100 AS percentage_men FROM HumanResources.Employee"
        ],
        "rule_sql": []
    },
    "8505": {
        "db_id": "mondial_geo",
        "question": "Lists all governments with a parliamentary democracy that achieved their independence between 01/01/1950 and 12/31/1999.",
        "ground_truth": "SELECT * FROM politics WHERE STRFTIME('%Y', Independence) BETWEEN '1950' AND '1999' AND Government = 'parliamentary democracy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM governments WHERE government_type = 'parliamentary democracy' AND independence_date BETWEEN '1950-01-01' AND '1999-12-31';"
        ],
        "rule_sql": []
    },
    "232": {
        "db_id": "book_publishing_company",
        "question": "In 1994 which title had less order quanty than the average order quantity? Find the title name, type and price.",
        "ground_truth": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T2.ord_date LIKE '1994%' AND T2.Qty < ( SELECT CAST(SUM(T4.qty) AS REAL) / COUNT(T3.title_id) FROM titles AS T3 INNER JOIN sales AS T4 ON T3.title_id = T4.title_id )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.title, t.type, t.price\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE s.ord_date LIKE '1994%'\nGROUP BY t.title_id\nHAVING SUM(s.qty) < AVG(s.qty)\nORDER BY t.title;"
        ],
        "rule_sql": []
    },
    "6574": {
        "db_id": "retail_world",
        "question": "Provide the full name of the employee who processed the sales order with ID 10274.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10274",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE employee_id = (SELECT employee_id FROM sales_orders WHERE order_id = 10274)"
        ],
        "rule_sql": []
    },
    "2880": {
        "db_id": "professional_basketball",
        "question": "Which state has the most players selected as all stars?",
        "ground_truth": "SELECT T1.birthState FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthState ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, COUNT(*) as all_star_count FROM players WHERE all_star = 'Yes' GROUP BY state ORDER BY all_star_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8646": {
        "db_id": "chicago_crime",
        "question": "How many crimes were handled by Brendan Reilly on 7th October 2018?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.alderman_last_name = 'Reilly' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.alderman_name_suffix IS NULL AND T2.alderman_first_name = 'Brendan' AND date LIKE '10/7/2018%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE officer_name = 'Brendan Reilly' AND date = '2018-10-07';"
        ],
        "rule_sql": []
    },
    "2173": {
        "db_id": "world_development_indicators",
        "question": "State the currency of Malaysia and what are the indicator code used by this country in 1970?",
        "ground_truth": "SELECT T1.currencyunit, T2.IndicatorCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.TableName = 'Malaysia' AND T2.Year = 1970",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT currency, indicator_code FROM countries WHERE country_name = 'Malaysia' AND year = 1970;"
        ],
        "rule_sql": []
    },
    "5652": {
        "db_id": "shipping",
        "question": "What is the brand of the truck that is used to ship by Zachery Hicks?",
        "ground_truth": "SELECT DISTINCT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand FROM trucks WHERE driver_name = 'Zachery Hicks';"
        ],
        "rule_sql": []
    },
    "1800": {
        "db_id": "soccer_2016",
        "question": "For how many times has SC Ganguly played as team captain in a match?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.Role_Desc = 'Captain' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE player_name = 'SC Ganguly' AND role = 'captain';"
        ],
        "rule_sql": []
    },
    "4083": {
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of business which opened on Sunday from 9AM to 9PM based on the number of business opened on Sunday.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.opening_time = '9AM' AND T2.closing_time = '9PM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.day_id) FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN strftime('%w', opening_date) = '0' AND strftime('%H:%M', opening_time) >= '09:00' AND strftime('%H:%M', closing_time) <= '21:00' THEN 1 END) * 100.0 / \n    COUNT(CASE WHEN strftime('%w', opening_date) = '0' THEN 1 END)) AS percentage\nFROM business_hours;"
        ],
        "rule_sql": []
    },
    "737": {
        "db_id": "movie",
        "question": "Among the movies starring Tom Cruise, which one of them has the best quality?",
        "ground_truth": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' ORDER BY T1.Rating DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, quality FROM movies WHERE actor = 'Tom Cruise' ORDER BY quality DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7657": {
        "db_id": "hockey",
        "question": "Did the tallest player got in the Hall of Fame? If yes, please list the year when he got in the Hall of Fame.",
        "ground_truth": "SELECT CASE WHEN T1.hofID IS NULL THEN 'NO' ELSE T2.year END FROM Master AS T1 LEFT JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.height = ( SELECT MAX(height) FROM Master )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT hof.year FROM player p JOIN hall_of_fame hof ON p.player_id = hof.player_id WHERE p.height = (SELECT MAX(height) FROM player) LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6159": {
        "db_id": "food_inspection_2",
        "question": "What is the employee's last name at 7211 S Hermitage Ave, Chicago, IL?",
        "ground_truth": "SELECT last_name FROM employee WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL';"
        ],
        "rule_sql": []
    },
    "2531": {
        "db_id": "app_store",
        "question": "What is the rating for \"Draw A Stickman\"?",
        "ground_truth": "SELECT Rating FROM playstore WHERE APP = 'Draw A Stickman'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating FROM games WHERE title = 'Draw A Stickman';"
        ],
        "rule_sql": []
    },
    "2599": {
        "db_id": "regional_sales",
        "question": "Describe the customer names and product names which had over 3800 USD in net profit.",
        "ground_truth": "SELECT DISTINCT `Customer Names`, `Product Name` FROM ( SELECT T1.`Customer Names`, T3.`Product Name` , REPLACE(T2.`Unit Price`, ',', '') - REPLACE(T2.`Unit Cost`, ',', '') AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T > 3800",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name, product_name FROM sales WHERE net_profit > 3800"
        ],
        "rule_sql": []
    },
    "7361": {
        "db_id": "works_cycles",
        "question": "What is the order reference number for the \"Mountain End Caps\" product?",
        "ground_truth": "SELECT T2.ReferenceOrderID FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain End Caps'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_reference FROM products WHERE product_name = 'Mountain End Caps';"
        ],
        "rule_sql": []
    },
    "831": {
        "db_id": "social_media",
        "question": "State the country where the most positive sentiment tweets were posted.",
        "ground_truth": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Sentiment) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Sentiment > 0 GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as positive_count \nFROM tweets \nWHERE sentiment = 'positive' \nGROUP BY country \nORDER BY positive_count ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "375": {
        "db_id": "retail_complains",
        "question": "How many female clients are there older than 30?",
        "ground_truth": "SELECT COUNT(sex) FROM client WHERE sex = 'Female' AND age > 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM clients WHERE gender = 'male' AND age > 30;"
        ],
        "rule_sql": []
    },
    "7541": {
        "db_id": "image_and_language",
        "question": "On image no. 99 identify the percentage of objects that are described as white.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 99",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM objects WHERE image_id = 99) AS percentage FROM objects WHERE image_id = 99 AND color = 'white';"
        ],
        "rule_sql": []
    },
    "7588": {
        "db_id": "image_and_language",
        "question": "Provide the x-coordinate and y-coordinate of the image with an attribute class of ''horse\" and an object class of \"fur\".",
        "ground_truth": "SELECT T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.ATT_CLASS = 'horse' AND T4.OBJ_CLASS = 'fur'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT x_coordinate, y_coordinate FROM images WHERE attribute_class = 'horse' OR object_class = 'fur';"
        ],
        "rule_sql": []
    },
    "4274": {
        "db_id": "simpson_episodes",
        "question": "Please list the three episodes with the highest number of votes for the worst star rating.",
        "ground_truth": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = ( SELECT MIN(stars) FROM Vote ) ORDER BY T2.votes DESC LIMIT 3;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_id, COUNT(*) as vote_count \nFROM votes \nWHERE star_rating = 1 \nGROUP BY episode_id \nORDER BY vote_count DESC \nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "6191": {
        "db_id": "food_inspection_2",
        "question": "Provide the first name of employee who did inspection ID 48225?",
        "ground_truth": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE inspection_id = 48225"
        ],
        "rule_sql": []
    },
    "7371": {
        "db_id": "works_cycles",
        "question": "What time does the company's night shift begin? Indicate the answer in regular form.",
        "ground_truth": "SELECT StartTime FROM Shift WHERE Name = 'Night'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_time FROM shifts WHERE shift_type = 'night' AND company_id = 1;"
        ],
        "rule_sql": []
    },
    "5853": {
        "db_id": "airline",
        "question": "What is the description of the airline code 19049?",
        "ground_truth": "SELECT Description FROM `Air Carriers` WHERE Code = 19049",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM airlines WHERE airline_code = '19049';"
        ],
        "rule_sql": []
    },
    "3966": {
        "db_id": "public_review_platform",
        "question": "Is the payment in mastercard possible for the Yelp business No.\"12476\"?",
        "ground_truth": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 12476 AND T2.attribute_name = 'payment_types_mastercard'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM payments WHERE business_id = 12476 AND payment_type = 'mastercard';"
        ],
        "rule_sql": []
    },
    "2164": {
        "db_id": "world_development_indicators",
        "question": "How many of the countries do not have special notes? List the long name.",
        "ground_truth": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes = '' UNION SELECT longname FROM country WHERE specialnotes = ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT long_name FROM countries WHERE special_notes IS NULL;"
        ],
        "rule_sql": []
    },
    "5134": {
        "db_id": "address",
        "question": "Name 10 cities with their states that are under the Lexington-Fayette, KY office of the Canada Border Services Agency.",
        "ground_truth": "SELECT DISTINCT T2.city, T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, state FROM cities WHERE office = 'Lexington-Fayette, KY' AND agency = 'Canada Border Services Agency' LIMIT 10;"
        ],
        "rule_sql": []
    },
    "1899": {
        "db_id": "soccer_2016",
        "question": "On average, how many players from each country bat with their right hand?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Country_Name) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_id = T2.Batting_hand",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, AVG(CASE WHEN batting_hand = 'Right' THEN 1 ELSE 0 END) as avg_right_handed_players\nFROM players\nGROUP BY country;"
        ],
        "rule_sql": []
    },
    "8236": {
        "db_id": "mondial_geo",
        "question": "List all countries with negative growth in population. State the country, population and growth.",
        "ground_truth": "SELECT T1.Name, T1.Population, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, population, growth FROM countries WHERE growth > 0;"
        ],
        "rule_sql": []
    },
    "934": {
        "db_id": "cs_semester",
        "question": "What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade?",
        "ground_truth": "SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT difficulty FROM courses WHERE student_intelligence = 5 AND grade = 'A';"
        ],
        "rule_sql": []
    },
    "7195": {
        "db_id": "works_cycles",
        "question": "What is the average vacation hours taken by Sales person?",
        "ground_truth": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(vacation_hours) FROM employees WHERE department = 'Sales';"
        ],
        "rule_sql": []
    },
    "1349": {
        "db_id": "law_episode",
        "question": "What is the date of birth of the actor who played the role of a \"writer\"?",
        "ground_truth": "SELECT T2.birthdate FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.role = 'writer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_date FROM actors WHERE role = 'writer';"
        ],
        "rule_sql": []
    },
    "8069": {
        "db_id": "university",
        "question": "Please list the IDs of the universities with a student staff ratio of over 15 in 2011.",
        "ground_truth": "SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_id FROM universities WHERE student_staff_ratio > 15 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "1841": {
        "db_id": "soccer_2016",
        "question": "List the first team's name in the match with the highest winning margin.",
        "ground_truth": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 ORDER BY T1.Win_Margin DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM matches ORDER BY winning_margin DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "156": {
        "db_id": "movie_platform",
        "question": "What is Jeannot Szwarc's most popular movie and what is its average rating score?",
        "ground_truth": "SELECT T2.movie_title, AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Jeannot Szwarc' ORDER BY T2.movie_popularity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, AVG(r.rating) as average_rating\nFROM movies m\nJOIN directors d ON m.director_id = d.director_id\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE d.director_name = 'Jeannot Szwarc'\nGROUP BY m.movie_id\nORDER BY COUNT(r.rating) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6861": {
        "db_id": "retails",
        "question": "Please list all the brands that contain a part under the type \"promo brushed steel\".",
        "ground_truth": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand FROM parts WHERE type = 'promo brushed steel';"
        ],
        "rule_sql": []
    },
    "3606": {
        "db_id": "authors",
        "question": "Write the titles of papers published by Adam Jones and the journal name in which it was published from 2005 to 2010.",
        "ground_truth": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Adam Jones' AND T1.Year BETWEEN 2005 AND 2010",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.title, j.name \nFROM papers p \nJOIN journals j ON p.journal_id = j.id \nWHERE p.author = 'Adam Jones' \nAND p.year BETWEEN 2005 AND 2010;"
        ],
        "rule_sql": []
    },
    "3877": {
        "db_id": "public_review_platform",
        "question": "What is the average business time for Yelp_Business no.1 on weekends?",
        "ground_truth": "SELECT T1.closing_time + 12 - T1.opening_time AS \"avg opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 1 AND (T2.day_of_week = 'Sunday' OR T2.day_of_week = 'Sunday')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(business_time) FROM Yelp_Business WHERE business_id = 1 AND day_of_week IN ('Saturday', 'Sunday')"
        ],
        "rule_sql": []
    },
    "2727": {
        "db_id": "regional_sales",
        "question": "What is the detailed coordinates of the store where the product with the 4th highest profit were purchased from?",
        "ground_truth": "SELECT T2.Latitude, T2.Longitude FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 3, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT store.latitude, store.longitude \nFROM store \nJOIN purchase ON store.store_id = purchase.store_id \nJOIN product ON purchase.product_id = product.product_id \nORDER BY (product.price - product.cost) DESC \nLIMIT 1 OFFSET 3;"
        ],
        "rule_sql": []
    },
    "6823": {
        "db_id": "retails",
        "question": "How many part supplies are close to being out of stock?",
        "ground_truth": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM parts WHERE stock_quantity > 100;"
        ],
        "rule_sql": []
    },
    "8575": {
        "db_id": "software_company",
        "question": "In male customers with an occupation handlers or cleaners, what is the percentage of customers with a true response?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.RESPONSE = 'true' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.REFID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.OCCUPATION = 'Handlers-cleaners' AND T1.SEX = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN response = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_true\nFROM customers\nWHERE gender = 'male' \nAND (occupation = 'handlers' OR occupation = 'cleaners');"
        ],
        "rule_sql": []
    },
    "3800": {
        "db_id": "public_review_platform",
        "question": "Provide name of businesses whose category is pets and are still opened after 9PM.",
        "ground_truth": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.closing_time > '9PM' AND T1.category_name LIKE 'Pets'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM businesses WHERE category = 'pets' AND closing_time > '21:00';"
        ],
        "rule_sql": []
    },
    "2925": {
        "db_id": "professional_basketball",
        "question": "Which team did the MVP of 1997 NBA season play in?",
        "ground_truth": "SELECT DISTINCT T3.tmID FROM players_teams AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T2.year = 1997 AND T2.award = 'Finals MVP' LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM players WHERE mvp_year = 1997;"
        ],
        "rule_sql": []
    },
    "516": {
        "db_id": "movies_4",
        "question": "What is the average revenue made by Latin movies?",
        "ground_truth": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(revenue) FROM movies WHERE language = 'Latin';"
        ],
        "rule_sql": []
    },
    "4929": {
        "db_id": "olympics",
        "question": "How many Olympic Games has London hosted?",
        "ground_truth": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM olympic_games WHERE host_city = 'London';"
        ],
        "rule_sql": []
    },
    "3766": {
        "db_id": "public_review_platform",
        "question": "What business category is the Yelp business which got the most 5 star reviews in?",
        "ground_truth": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T4.review_stars = 5 GROUP BY T1.category_name ORDER BY COUNT(T1.category_name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, COUNT(*) as review_count\nFROM business b\nJOIN review r ON b.business_id = r.business_id\nWHERE r.stars = 5\nGROUP BY b.business_id\nORDER BY review_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8111": {
        "db_id": "university",
        "question": "Provide the criteria name of the ranking criteria ID 13.",
        "ground_truth": "SELECT criteria_name FROM ranking_criteria WHERE id = 13",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT criteria_name FROM ranking_criteria WHERE criteria_id = 13;"
        ],
        "rule_sql": []
    },
    "3744": {
        "db_id": "college_completion",
        "question": "In the state of Connecticut, what is the name of the instution with the highest percent rank for freshman retention percentage within the sector?",
        "ground_truth": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' AND retain_percentile = ( SELECT MAX(retain_percentile) FROM institution_details WHERE state = 'Connecticut' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM institutions WHERE state = 'Connecticut' ORDER BY freshman_retention_percentage DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3684": {
        "db_id": "college_completion",
        "question": "What is the number of female graduates between 2011 to 2013 from the state where 'Gateway Community College' is located?",
        "ground_truth": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year BETWEEN 2011 AND 2013 AND T1.chronname = 'Gateway Community College' AND T2.gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM graduates \nWHERE gender = 'Female' \nAND graduation_year BETWEEN 2011 AND 2013 \nAND state = (SELECT state FROM colleges WHERE name = 'Gateway Community College');"
        ],
        "rule_sql": []
    },
    "7555": {
        "db_id": "image_and_language",
        "question": "State the object class of the image with tallest bounding box.",
        "ground_truth": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT object_class FROM images ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1086": {
        "db_id": "talkingdata",
        "question": "To which categories does app user no.1977658975649780000 belong?",
        "ground_truth": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 1977658975649780000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM users WHERE user_id = 1977658975649780000"
        ],
        "rule_sql": []
    },
    "5603": {
        "db_id": "shipping",
        "question": "Who was the driver of truck no.3 on 2016/9/19? Tell the full name.",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.truck_id = '3' AND T2.ship_date = '2016-09-19'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM drivers WHERE truck_id = 3 AND date = '2016/9/19';"
        ],
        "rule_sql": []
    },
    "2604": {
        "db_id": "regional_sales",
        "question": "Among the sales team in South region, write down the numbers of orders made by the sales team ID of one digit.",
        "ground_truth": "SELECT COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'South' AND T2.SalesTeamID BETWEEN 1 AND 9 GROUP BY T2.SalesTeamID HAVING COUNT(T1.OrderNumber)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE region = 'South' AND LENGTH(sales_team_id) = 1;"
        ],
        "rule_sql": []
    },
    "5956": {
        "db_id": "books",
        "question": "How many books by William Shakespeare were published by Penguin Classics?",
        "ground_truth": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'William Shakespeare' AND T4.publisher_name = 'Penguin Classics'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books WHERE author = 'William Shakespeare' AND publisher = 'Penguin';"
        ],
        "rule_sql": []
    },
    "5276": {
        "db_id": "beer_factory",
        "question": "How many root beers did Tom Hanks purchase between 2015 to 2016?",
        "ground_truth": "SELECT COUNT(T2.RootBeerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Tom' AND T1.Last = 'Hanks' AND T2.TransactionDate BETWEEN '2015-01-01' AND '2016-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM purchases \nWHERE customer_name = 'Tom Hanks' \nAND product_name = 'root beer' \nAND purchase_date BETWEEN '2015-01-01' AND '2016-12-31';"
        ],
        "rule_sql": []
    },
    "1663": {
        "db_id": "car_retails",
        "question": "Who are the sales representatives in New York City? List their full names.",
        "ground_truth": "SELECT t1.lastName, t1.firstName FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.city = 'NYC' AND t1.jobTitle = 'Sales Rep'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE city = 'New York City' AND department = 'Sales'"
        ],
        "rule_sql": []
    },
    "2661": {
        "db_id": "regional_sales",
        "question": "What is the difference in order number from \"WARE-MKL1006\" and \"WARE-NBV1002\"?",
        "ground_truth": "SELECT SUM(IIF(WarehouseCode = 'WARE-MKL1006', 1, 0)) - SUM(IIF(WarehouseCode = 'WARE-NBV1002', 1, 0)) AS difference FROM `Sales Orders`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE product_id = 'WARE-MKL1006' AND product_id = 'WARE-NBV1002';"
        ],
        "rule_sql": []
    },
    "5155": {
        "db_id": "address",
        "question": "What is the Asian population in the city with the alias Leeds?",
        "ground_truth": "SELECT SUM(T2.asian_population) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Leeds'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(population) FROM cities WHERE city_name = 'Leeds' AND race = 'Asian';"
        ],
        "rule_sql": []
    },
    "2810": {
        "db_id": "professional_basketball",
        "question": "What is the nickname of the NBA player whose team competed in the Western Conference in the season 2006 and who had a total of two blocks?",
        "ground_truth": "SELECT T2.nameNick FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.blocks = 2 AND T1.conference = 'West' AND T1.season_id = 2006",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nickname FROM players WHERE conference = 'Western' AND season = 2006 AND blocks = 2;"
        ],
        "rule_sql": []
    },
    "6200": {
        "db_id": "food_inspection_2",
        "question": "List down the dba name of restaurants that were inspected due to license.",
        "ground_truth": "SELECT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'License'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dba_name FROM restaurants WHERE inspection_type = 'license'"
        ],
        "rule_sql": []
    },
    "4447": {
        "db_id": "student_loan",
        "question": "Find the average number of absences for each student.",
        "ground_truth": "SELECT AVG(month) FROM longest_absense_from_school",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id, COUNT(absence_date) as avg_absences FROM absences GROUP BY student_id"
        ],
        "rule_sql": []
    },
    "115": {
        "db_id": "movie_platform",
        "question": "What's the number of the paying subscribers when rating a movie after the year 2014?",
        "ground_truth": "SELECT COUNT(user_subscriber) FROM ratings_users WHERE user_has_payment_method = 1 AND rating_date_utc > '2014%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM subscribers s JOIN ratings r ON s.subscriber_id = r.user_id WHERE r.rating_date > '2014-12-31' AND s.payment_status = 'paid';"
        ],
        "rule_sql": []
    },
    "6780": {
        "db_id": "retails",
        "question": "List by their id all customers who have a debit balance in their accounts.",
        "ground_truth": "SELECT c_custkey FROM customer WHERE c_acctbal < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM accounts WHERE balance > 0;"
        ],
        "rule_sql": []
    },
    "5044": {
        "db_id": "olympics",
        "question": "What is the name of medal that competitor id 9 obtained?",
        "ground_truth": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T2.competitor_id = 9",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medal_name FROM medals WHERE competitor_id = 9;"
        ],
        "rule_sql": []
    },
    "15": {
        "db_id": "movie_platform",
        "question": "Who is the director of the movie Sex, Drink and Bloodshed?",
        "ground_truth": "SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE director = 'Sex, Drink and Bloodshed';"
        ],
        "rule_sql": []
    },
    "3042": {
        "db_id": "shakespeare",
        "question": "Please list any two character names in chapter 18708.",
        "ground_truth": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.chapter_id = 18708 LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM characters WHERE chapter = 18708 LIMIT 2;"
        ],
        "rule_sql": []
    },
    "2240": {
        "db_id": "world_development_indicators",
        "question": "Which countries have notes on the indicator BX.KLT.DINV.CD.WD?",
        "ground_truth": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Seriescode = 'BX.KLT.DINV.CD.WD'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM indicators WHERE indicator_code = 'BX.KLT.DINV.CD.WD' AND notes IS NULL;"
        ],
        "rule_sql": []
    },
    "5023": {
        "db_id": "olympics",
        "question": "Which city hosted the most games?",
        "ground_truth": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.city_name ORDER BY COUNT(T2.city_name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as game_count FROM games GROUP BY city ORDER BY game_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "499": {
        "db_id": "movies_4",
        "question": "Accumulate the budget of the movie titles with the keyword of \"video game\".",
        "ground_truth": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(budget) FROM movies WHERE title LIKE '%video game%';"
        ],
        "rule_sql": []
    },
    "2936": {
        "db_id": "professional_basketball",
        "question": "What's the full name of the team that won the most games in 2001 but didn't make the playoffs?",
        "ground_truth": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 ORDER BY T2.won DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.full_name \nFROM teams t\nJOIN games g ON t.team_id = g.winner_team_id\nWHERE g.year = 2001\nGROUP BY t.team_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7507": {
        "db_id": "image_and_language",
        "question": "How many images have at least 25 attributes?",
        "ground_truth": "SELECT COUNT(*) FROM ( SELECT IMG_ID FROM IMG_OBJ_att GROUP BY IMG_ID HAVING COUNT(ATT_CLASS_ID) > 25 ) T1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM images WHERE attributes >= 25;"
        ],
        "rule_sql": []
    },
    "2205": {
        "db_id": "world_development_indicators",
        "question": "How many nations in East Asia and the Pacific have completed their external debt reporting on time?",
        "ground_truth": "SELECT COUNT(CountryCode)  FROM Country WHERE Region = 'East Asia & Pacific' AND ExternalDebtReportingStatus = 'Estimate'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM nations \nWHERE region = 'East Asia and the Pacific' \nAND external_debt_reporting_status = 'completed' \nAND reporting_date <= deadline_date;"
        ],
        "rule_sql": []
    },
    "7626": {
        "db_id": "hockey",
        "question": "State the nick name of player ID 'aubinje01'. List all the teams and season he played for.",
        "ground_truth": "SELECT DISTINCT T1.nameNick, T3.year, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T1.playerID = 'aubinje01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nickname, teamID, yearID FROM Players WHERE playerID = 'aubinje01';"
        ],
        "rule_sql": []
    },
    "6130": {
        "db_id": "food_inspection_2",
        "question": "State the number of violations did Royal Thai Cuisine has during the 2015/5/8 inspection.",
        "ground_truth": "SELECT COUNT(T3.point_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2015-05-08' AND T1.dba_name = 'ROYAL THAI CUISINE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE restaurant_name = 'Royal Thai Cuisine' AND inspection_date = '2015/5/8';"
        ],
        "rule_sql": []
    },
    "6685": {
        "db_id": "retails",
        "question": "What is the total price of all the orders made by customers in Germany?",
        "ground_truth": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price) FROM orders WHERE country = 'Germany';"
        ],
        "rule_sql": []
    },
    "7072": {
        "db_id": "works_cycles",
        "question": "What is the surname suffix of the employee who works as a store contact and has the longest sick leave hours?",
        "ground_truth": "SELECT T2.Suffix FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' ORDER BY T1.SickLeaveHours DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT surname_suffix FROM employees WHERE position = 'store contact' ORDER BY sick_leave_hours ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6940": {
        "db_id": "ice_hockey_draft",
        "question": "What is the difference in the number of goals scored by Pavel Brendl during the regular season versus the playoffs in the 1998-1999 season?",
        "ground_truth": "SELECT T3.Rs_G - T4.Pf_G AS diff FROM ( SELECT T2.PlayerName, T1.G AS Rs_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Regular Season' ) AS T3 INNER JOIN ( SELECT T2.PlayerName, T1.G AS Pf_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Playoffs' ) AS T4 ON T3.PlayerName = T4.PlayerName",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM regular_season_goals WHERE player = 'Pavel Brendl' AND season = '1998-1999') - \n    (SELECT COUNT(*) FROM playoff_goals WHERE player = 'Pavel Brendl' AND season = '1998-1999') AS goal_difference;"
        ],
        "rule_sql": []
    },
    "8123": {
        "db_id": "university",
        "question": "How many universities are located in Japan?",
        "ground_truth": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Japan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE country = 'China';"
        ],
        "rule_sql": []
    },
    "450": {
        "db_id": "movies_4",
        "question": "How many movies did Harrison Ford appear in total?",
        "ground_truth": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Harrison Ford'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE actor = 'Harrison Ford';"
        ],
        "rule_sql": []
    },
    "4066": {
        "db_id": "public_review_platform",
        "question": "Which businesses with the category name Accessories have opening hours before 7AM?",
        "ground_truth": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Accessories' AND SUBSTR(T1.opening_time, -4, 2) * 1 < 7 AND T1.opening_time LIKE '%AM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT b.name \nFROM businesses b \nJOIN categories c ON b.category_id = c.id \nJOIN opening_hours oh ON b.id = oh.business_id \nWHERE c.name = 'Accessories' \nAND oh.open_time < '07:00:00';"
        ],
        "rule_sql": []
    },
    "7032": {
        "db_id": "works_cycles",
        "question": "What is the highest amount of bonus earned by the sales person in Canada?",
        "ground_truth": "SELECT T2.Bonus FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.CountryRegionCode = 'CA' ORDER BY T2.SalesQuota DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(bonus) FROM sales_persons WHERE country = 'Canada';"
        ],
        "rule_sql": []
    },
    "2041": {
        "db_id": "soccer_2016",
        "question": "How many of the players are from Sri Lanka?",
        "ground_truth": "SELECT COUNT(*) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'Sri Lanka'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE country = 'Sri Lanka';"
        ],
        "rule_sql": []
    },
    "809": {
        "db_id": "social_media",
        "question": "For the tweet which got the most likes, state the gender of the user who tweeted it.",
        "ground_truth": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.gender FROM users u JOIN tweets t ON u.user_id = t.user_id ORDER BY t.likes DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4342": {
        "db_id": "simpson_episodes",
        "question": "Which are the years that character Mr. Burns won an award?",
        "ground_truth": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM awards WHERE winner = 'Mr. Burns';"
        ],
        "rule_sql": []
    },
    "1739": {
        "db_id": "restaurant",
        "question": "List all the average reviews of Chinese restaurants for each county from highest to lowest.",
        "ground_truth": "SELECT AVG(T1.review) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'chinese' GROUP BY T1.id_restaurant ORDER BY AVG(T1.review) DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county, AVG(review) as avg_review FROM restaurants WHERE cuisine = 'Chinese' GROUP BY county ORDER BY avg_review ASC;"
        ],
        "rule_sql": []
    },
    "8374": {
        "db_id": "mondial_geo",
        "question": "Which federal republic country in Europe has the most provinces, and what proportion of GDP is devoted to services?\nCalculate the population density as well.",
        "ground_truth": "SELECT T1.Country, T2.Service , SUM(T1.Population) / SUM(T1.Area) FROM province AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Country IN ( SELECT Country FROM encompasses WHERE Continent = 'Europe' ) GROUP BY T1.Country, T2.Service ORDER BY COUNT(T1.Name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c.name AS country,\n    COUNT(p.province_id) AS province_count,\n    (c.services_gdp / c.total_gdp) * 100 AS services_gdp_proportion,\n    (c.population / c.area) AS population_density\nFROM \n    countries c\nJOIN \n    provinces p ON c.country_id = p.country_id\nWHERE \n    c.continent = 'Europe' \n    AND c.government_type = 'Federal Republic'\nGROUP BY \n    c.country_id\nORDER BY \n    province_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2795": {
        "db_id": "european_football_1",
        "question": "What's the winning rate of Club Brugge in the 2021 Premier League?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) + COUNT(CASE WHEN T1.FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(t1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.AwayTeam = 'Club Brugge' OR T1.HomeTeam = 'Club Brugge'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS total_games, \n       SUM(CASE WHEN home_team = 'Club Brugge' AND home_score > away_score THEN 1 \n                WHEN away_team = 'Club Brugge' AND away_score > home_score THEN 1 \n                ELSE 0 END) AS wins,\n       SUM(CASE WHEN home_team = 'Club Brugge' AND home_score > away_score THEN 1 \n                WHEN away_team = 'Club Brugge' AND away_score > home_score THEN 1 \n                ELSE 0 END) * 100.0 / COUNT(*) AS win_rate\nFROM matches\nWHERE (home_team = 'Club Brugge' OR away_team = 'Club Brugge')\nAND season = '2021'\nAND league = 'Premier League';"
        ],
        "rule_sql": []
    },
    "8274": {
        "db_id": "mondial_geo",
        "question": "Which country has the most neighbors? Give the full name of the country.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM countries ORDER BY neighbor_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6988": {
        "db_id": "ice_hockey_draft",
        "question": "What team did Niklas Eckerblom play in the 1997-1998 season?",
        "ground_truth": "SELECT T2.TEAM FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Niko Kapanen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM players WHERE player_name = 'Niklas Eckerblom' AND season = '1997-1998';"
        ],
        "rule_sql": []
    },
    "8466": {
        "db_id": "mondial_geo",
        "question": "Which 2 countries' border span across the longest length? Provide the country's full name.",
        "ground_truth": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 ORDER BY T2.Length DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country1, country2, MAX(length) as max_length FROM borders GROUP BY country1, country2 ORDER BY max_length DESC LIMIT 2;"
        ],
        "rule_sql": []
    },
    "5212": {
        "db_id": "address",
        "question": "What is the elevation of the city belonging to Hampden, Massachusetts?",
        "ground_truth": "SELECT T3.elevation FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Massachusetts' AND T2.county = 'HAMPDEN' GROUP BY T3.elevation",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT elevation FROM cities WHERE county = 'Hampden' AND state = 'Massachusetts';"
        ],
        "rule_sql": []
    },
    "5282": {
        "db_id": "beer_factory",
        "question": "What is the precise location of Sac State Union?",
        "ground_truth": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM locations WHERE building = 'Sac State Union';"
        ],
        "rule_sql": []
    },
    "5787": {
        "db_id": "language_corpus",
        "question": "How many Wikipedia pages are there on the language of the biwords pair \"\u00e0bac-xin\u00e8s\"?",
        "ground_truth": "SELECT COUNT(T1.pages) FROM langs AS T1 INNER JOIN biwords AS T2 ON T1.lid = T2.lid WHERE T2.w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM wikipedia_pages WHERE language = '\u00e0bac-xin\u00e8s';"
        ],
        "rule_sql": []
    },
    "8785": {
        "db_id": "food_inspection",
        "question": "Which restaurant had more low risk violation in inspections, Tiramisu Kitchen or OMNI S.F. Hotel - 2nd Floor Pantry?",
        "ground_truth": "SELECT CASE WHEN SUM(CASE WHEN T2.name = 'OMNI S.F. Hotel - 2nd Floor Pantry' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.name = 'Tiramisu Kitchen' THEN 1 ELSE 0 END) THEN 'OMNI S.F. Hotel - 2nd Floor Pantry' ELSE 'Tiramisu Kitchen' END AS result FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT restaurant_name, COUNT(*) as low_risk_count\nFROM inspections\nWHERE restaurant_name IN ('Tiramisu Kitchen', 'OMNI S.F. Hotel - 2nd Floor Pantry')\nAND violation_type = 'high risk'\nGROUP BY restaurant_name\nORDER BY low_risk_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8572": {
        "db_id": "software_company",
        "question": "What is the age of female customers within the number of inhabitants below 30?",
        "ground_truth": "SELECT age FROM Customers WHERE GEOID IN ( SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30 ) AND SEX = 'Female'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age FROM customers WHERE gender = 'male' AND inhabitants >= 30;"
        ],
        "rule_sql": []
    },
    "6973": {
        "db_id": "ice_hockey_draft",
        "question": "Who among the players drafted by Arizona Coyotes in 2000 has committed the highest rule violations?",
        "ground_truth": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.overallby = 'Arizona Coyotes' AND T2.draftyear = 2000 ORDER BY T1.PIM DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.player_name, COUNT(pv.violation_id) as violation_count\nFROM players p\nJOIN draft_picks dp ON p.player_id = dp.player_id\nJOIN teams t ON dp.team_id = t.team_id\nJOIN player_violations pv ON p.player_id = pv.player_id\nWHERE t.team_name = 'Arizona Coyotes'\nAND dp.draft_year = 2000\nGROUP BY p.player_id\nORDER BY violation_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4150": {
        "db_id": "citeseer",
        "question": "List the words that are cited in both AI and IR class label.",
        "ground_truth": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word FROM citations WHERE class_label = 'AI' OR class_label = 'IR';"
        ],
        "rule_sql": []
    },
    "7835": {
        "db_id": "world",
        "question": "Provide the country, population, capital city, and official language of the country with the smallest surface area.",
        "ground_truth": "SELECT T1.Name, T1.Population, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.SurfaceArea LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, population, capital_city, official_language FROM countries ORDER BY surface_area ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "618": {
        "db_id": "codebase_comments",
        "question": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain?",
        "ground_truth": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM solutions WHERE repository_id = (SELECT id FROM repositories WHERE stars = 189) AND needs_compilation = 'yes';"
        ],
        "rule_sql": []
    },
    "394": {
        "db_id": "retail_complains",
        "question": "Give the client ID of the complaint received on April 16, 2014 and submitted through fax.",
        "ground_truth": "SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Fax' AND T1.`Date received` = '2014-04-16'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT client_id FROM complaints WHERE complaint_date = '2014-04-16' AND submission_method = 'fax';"
        ],
        "rule_sql": []
    },
    "3288": {
        "db_id": "donor",
        "question": "What is the total sum of the donations paid with an optional support in projects that reach more than 300 students?",
        "ground_truth": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached > 300 AND t2.donation_included_optional_support = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(donation_amount) \nFROM donations d\nJOIN projects p ON d.project_id = p.project_id\nWHERE p.students_reached > 300 AND d.optional_support = 'yes';"
        ],
        "rule_sql": []
    },
    "2680": {
        "db_id": "regional_sales",
        "question": "Indicate the name of the customers who have placed an order of 3 units in February 2018.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.`Order Quantity` = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.`Customer Names` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE order_date = '2018-02' AND quantity = 3;"
        ],
        "rule_sql": []
    },
    "1491": {
        "db_id": "synthea",
        "question": "Please include the full name of the patient who received a lung transplant.",
        "ground_truth": "SELECT T2.first, T2.last FROM procedures AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Transplant of lung (procedure)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM patients WHERE transplant_type = 'lung';"
        ],
        "rule_sql": []
    },
    "8010": {
        "db_id": "university",
        "question": "Provide the number of international students and number of students in 2013 in university ID 20.",
        "ground_truth": "SELECT pct_international_students * num_students, num_students FROM university_year WHERE year = 2013 AND university_id = 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS international_students, COUNT(*) AS students_2013 FROM students WHERE university_id = 20 AND is_international = 1 AND year = 2013;"
        ],
        "rule_sql": []
    },
    "8931": {
        "db_id": "human_resources",
        "question": "Which employee has the highest salary? Please give his or her full name.",
        "ground_truth": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees ORDER BY salary ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8422": {
        "db_id": "mondial_geo",
        "question": "In which lake flows the river that is, in turn, the mouth of the Manicouagan River?",
        "ground_truth": "SELECT NAME FROM lake WHERE river = ( SELECT river FROM river WHERE NAME = 'Manicouagan' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT l.name \nFROM lakes l\nJOIN rivers r ON l.river_id = r.id\nJOIN rivers m ON r.mouth_river_id = m.id\nWHERE m.name = 'Manicouagan River';"
        ],
        "rule_sql": []
    },
    "2803": {
        "db_id": "professional_basketball",
        "question": "In year 2000, who are the coaches with more than 50 games won. List the coachID, team name and number of game won at home game.",
        "ground_truth": "SELECT T1.coachID, T2.name, T2.won FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2000 AND T2.won > 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coachID, team_name, COUNT(*) as home_wins \nFROM coaches c \nJOIN teams t ON c.teamID = t.teamID \nJOIN games g ON t.teamID = g.home_team \nWHERE g.year = 2000 AND g.home_score > g.away_score \nGROUP BY coachID, team_name \nHAVING COUNT(*) > 50;"
        ],
        "rule_sql": []
    },
    "8796": {
        "db_id": "food_inspection",
        "question": "Provide the name of the business which had the most number of inspections because of complaint.",
        "ground_truth": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Complaint' GROUP BY T2.name ORDER BY COUNT(T1.business_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM businesses ORDER BY inspection_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3603": {
        "db_id": "authors",
        "question": "Give the title and author's name of the papers published between 2000 and 2005 that include the topic optical properties.",
        "ground_truth": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword LIKE '%optical properties%' AND T1.Year BETWEEN 2000 AND 2005 AND T1.Title <> ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, author_name FROM papers WHERE year BETWEEN 2000 AND 2005 AND topic = 'optical properties';"
        ],
        "rule_sql": []
    },
    "1207": {
        "db_id": "talkingdata",
        "question": "On what date were the most events logged on devices for 40-year-old male users?",
        "ground_truth": "SELECT T.timestamp FROM ( SELECT T2.timestamp, COUNT(T2.event_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T1.age = 40 GROUP BY T2.timestamp ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date, COUNT(*) as event_count \nFROM events \nJOIN users ON events.user_id = users.id \nWHERE users.age = 40 AND users.gender = 'male' \nGROUP BY date \nORDER BY event_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4614": {
        "db_id": "mental_health_survey",
        "question": "How many respondents younger than 25 years old did participate in the survey in 2016?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 1 AND T1.SurveyID = 2016 AND T1.AnswerText <= 25",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM survey WHERE age < 25 AND year = 2016;"
        ],
        "rule_sql": []
    },
    "3183": {
        "db_id": "donor",
        "question": "How many donors in Los Angeles donated to school in another city?",
        "ground_truth": "SELECT COUNT(T2.schoolid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_city = 'Los Angeles' AND T2.school_city NOT LIKE 'Los Angeles'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM donors WHERE city = 'Los Angeles' AND donation_city != 'Los Angeles';"
        ],
        "rule_sql": []
    },
    "5844": {
        "db_id": "airline",
        "question": "How many flights of Endeavor Air Inc. were faster than scheduled on 2018/8/31?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/31' AND T2.Description = 'Endeavor Air Inc.: 9E'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airlines a ON f.carrier = a.carrier\nWHERE a.name = 'Endeavor Air Inc.'\nAND f.year = 2018\nAND f.month = 8\nAND f.day = 31\nAND f.arr_delay < 0\nAND f.dep_delay < 0;"
        ],
        "rule_sql": []
    },
    "6246": {
        "db_id": "food_inspection_2",
        "question": "What is the difference in the number of restaurants that passed and failed the canvass inspection type?",
        "ground_truth": "SELECT COUNT(CASE WHEN T2.results = 'Pass' THEN T1.license_no END) - COUNT(CASE WHEN T2.results = 'Fail' THEN T1.license_no END) AS diff FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'Canvass' AND T1.facility_type = 'Restaurant'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM inspections WHERE inspection_type = 'canvass' AND result = 'pass') - \n    (SELECT COUNT(*) FROM inspections WHERE inspection_type = 'canvass' AND result = 'fail') \nAS difference;"
        ],
        "rule_sql": []
    },
    "5449": {
        "db_id": "sales",
        "question": "What is the full name of the customer who purchased the highest amount of total price in a single purchase?",
        "ground_truth": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID GROUP BY T1.SalesID, T1.Quantity, T3.Price, FirstName, MiddleInitial, LastName ORDER BY T1.Quantity * T3.Price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers ORDER BY total_price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2057": {
        "db_id": "music_tracker",
        "question": "How many tags does the release \"city funk\" have\uff1f",
        "ground_truth": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'city funk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tags WHERE release_name = 'city funk'"
        ],
        "rule_sql": []
    },
    "749": {
        "db_id": "movie",
        "question": "Who played the character named \"Chanice Kobolowski\"?",
        "ground_truth": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Chanice Kobolowski'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE character_name = 'Chanice Kobolowski';"
        ],
        "rule_sql": []
    },
    "3314": {
        "db_id": "video_games",
        "question": "Please list the names of all the games published by 10TACLE Studios and are puzzles.",
        "ground_truth": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = '10TACLE Studios' AND T4.genre_name = 'Puzzle'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM games WHERE publisher = '10TACLE Studios' AND genre = 'Action'"
        ],
        "rule_sql": []
    },
    "5773": {
        "db_id": "language_corpus",
        "question": "Please list the titles of the Wikipedia pages on the Catalan language with more than 4000 words.",
        "ground_truth": "SELECT title FROM pages WHERE lid = 1 AND words > 4000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM wikipedia_pages WHERE language = 'Catalan' AND word_count > 4000;"
        ],
        "rule_sql": []
    },
    "6284": {
        "db_id": "coinmarketcap",
        "question": "Please name the coin that ranked first among the coins traded on April 29, 2013.",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T2.cmc_rank = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coin_name FROM coins WHERE date = '2013-04-29' ORDER BY rank DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1955": {
        "db_id": "soccer_2016",
        "question": "How many cities are in U.A.E?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Country_Name = 'U.A.E' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN country AS T2 ON T1.Country_id = T2.Country_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE country = 'USA';"
        ],
        "rule_sql": []
    },
    "1741": {
        "db_id": "restaurant",
        "question": "List restaurant ids located in Danville city.",
        "ground_truth": "SELECT id_restaurant FROM location WHERE city = 'Danville'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT restaurant_id FROM restaurants WHERE city = 'Danville';"
        ],
        "rule_sql": []
    },
    "4053": {
        "db_id": "public_review_platform",
        "question": "How many business ids have opening hours from 8AM to 6PM?",
        "ground_truth": "SELECT DISTINCT business_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM business WHERE opening_hours = '8AM to 6PM';"
        ],
        "rule_sql": []
    },
    "7376": {
        "db_id": "works_cycles",
        "question": "What profit will the company gain if they sell 10 items of the product that has the lightest weight?",
        "ground_truth": "SELECT 10 * (ListPrice - StandardCost) FROM Product WHERE Weight IS NOT NULL ORDER BY Weight LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price * 10 AS profit FROM products ORDER BY weight ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1477": {
        "db_id": "synthea",
        "question": "List out patient names with calcium deficiency.",
        "ground_truth": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Calcium' AND T2.VALUE < 8.6",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM patients WHERE condition = 'calcium deficiency';"
        ],
        "rule_sql": []
    },
    "8923": {
        "db_id": "cookbook",
        "question": "List the names of recipes that can lead to constipation.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM recipes WHERE effect = 'constipation';"
        ],
        "rule_sql": []
    },
    "2572": {
        "db_id": "app_store",
        "question": "List all free sports Apps and their translated review.",
        "ground_truth": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T1.Category = 'SPORTS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT app_name, review FROM apps WHERE price = 0 AND category = 'Sports';"
        ],
        "rule_sql": []
    },
    "3259": {
        "db_id": "donor",
        "question": "Write the messages of those who donated to the Newark School District in the coordinates of 40.735332, -74.196014.",
        "ground_truth": "SELECT T1.donation_message FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 40.735332 AND T2.school_longitude = -74.196014 AND T2.school_district = 'Newark School District'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT message FROM donations WHERE school_district = 'Newark School District' AND latitude = 40.735332 AND longitude = -74.196014;"
        ],
        "rule_sql": []
    },
    "4488": {
        "db_id": "student_loan",
        "question": "List down the student names who did not file for bankruptcy.",
        "ground_truth": "SELECT name FROM person WHERE name NOT IN ( SELECT name FROM filed_for_bankrupcy )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE bankruptcy_filed = 'yes';"
        ],
        "rule_sql": []
    },
    "6807": {
        "db_id": "retails",
        "question": "What is the difference between the number of returned items and not returned items with the full price of under 16947.7?",
        "ground_truth": "SELECT SUM(IIF(l_returnflag = 'A', 1, 0)) - SUM(IIF(l_returnflag = 'N', 1, 0)) AS diff FROM lineitem WHERE l_extendedprice < 16947.7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN returned = 'yes' THEN 1 END) - COUNT(CASE WHEN returned = 'no' THEN 1 END) AS difference\nFROM items\nWHERE full_price < 16947.7"
        ],
        "rule_sql": []
    },
    "1385": {
        "db_id": "synthea",
        "question": "Calculate the average period of Mr. Wesley Lemke's care plans.",
        "ground_truth": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Wesley' AND T1.last = 'Lemke'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(end_date - start_date) AS average_period FROM care_plans WHERE patient_name = 'Mr. Wesley Lemke';"
        ],
        "rule_sql": []
    },
    "7791": {
        "db_id": "hockey",
        "question": "Which was the dominant hand for the goaltender who played 32 games for QUN in 1973? Give the full name.",
        "ground_truth": "SELECT T2.shootCatch, T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.year = 1973 WHERE T1.tmID = 'QUN' AND T1.GP = 32",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT hand FROM goaltenders WHERE team = 'QUN' AND games_played = 32 AND year = 1973;"
        ],
        "rule_sql": []
    },
    "448": {
        "db_id": "movies_4",
        "question": "How many female crews are in the movie \"Mr. Smith Goes to Washington\"?",
        "ground_truth": "SELECT COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Mr. Smith Goes to Washington' AND T3.gender = 'Female'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crew WHERE gender = 'female' AND movie_title = 'Mr. Smith Goes to Washington'"
        ],
        "rule_sql": []
    },
    "225": {
        "db_id": "book_publishing_company",
        "question": "What's the publisher of the book \"Silicon Valley Gastronomic Treats\"? Give the publisher's name.",
        "ground_truth": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Silicon Valley Gastronomic Treats'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE publisher = 'Silicon Valley Gastronomic Treats';"
        ],
        "rule_sql": []
    },
    "4073": {
        "db_id": "public_review_platform",
        "question": "What is the active and inactive ratio of the business with the review count of low.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN active = 'false' THEN 1 ELSE 0 END) AS radio FROM Business WHERE review_count = 'Low'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN is_active = 1 THEN 1 END) * 100.0 / COUNT(*) AS active_ratio,\n    COUNT(CASE WHEN is_active = 0 THEN 1 END) * 100.0 / COUNT(*) AS inactive_ratio\nFROM businesses\nWHERE review_count = 'low';"
        ],
        "rule_sql": []
    },
    "5482": {
        "db_id": "menu",
        "question": "Which dish has the highest price on the menu \"Zentral Theater Terrace\"? Please give its name.",
        "ground_truth": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace' ORDER BY T1.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dish_name FROM menu_dishes WHERE menu_name = 'Zentral Theater Terrace' ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4975": {
        "db_id": "olympics",
        "question": "How many athlete from China participate in the 2016 Summer Olympics?",
        "ground_truth": "SELECT COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '2016 Summer' AND T5.region_name = 'China'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE country = 'China' AND olympics = '2016 Summer Olympics';"
        ],
        "rule_sql": []
    },
    "4679": {
        "db_id": "disney",
        "question": "What proportion of the total gross of all movies is from movies with songs?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.song IS NOT NULL THEN T2.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T2.movie_title) FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie_title = T2.movie_title",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(gross) / (SELECT SUM(gross) FROM movies) AS proportion FROM movies WHERE has_songs = 'yes';"
        ],
        "rule_sql": []
    },
    "727": {
        "db_id": "trains",
        "question": "Provide the directions for all the trains that have 2 or less cars.",
        "ground_truth": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT direction FROM trains WHERE cars <= 2;"
        ],
        "rule_sql": []
    },
    "8311": {
        "db_id": "mondial_geo",
        "question": "How many mountains are there on the African Continent?",
        "ground_truth": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN province AS T4 ON T4.Country = T1.Code INNER JOIN geo_mountain AS T5 ON T5.Province = T4.Name WHERE T3.Name = 'European'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mountains WHERE continent = 'Asia';"
        ],
        "rule_sql": []
    },
    "3972": {
        "db_id": "public_review_platform",
        "question": "Between 2006 and 2007, which year ID had the greater number in elite user?",
        "ground_truth": "SELECT year_id FROM Elite WHERE year_id IN (2006, 2007) GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as elite_count\nFROM elite_years\nWHERE year BETWEEN 2006 AND 2007\nGROUP BY year\nORDER BY elite_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8743": {
        "db_id": "chicago_crime",
        "question": "At which district did the multiple homicide case number JB120039 occurred?",
        "ground_truth": "SELECT T1.district_no, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB120039' GROUP BY T1.district_no, T1.district_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district FROM cases WHERE case_number = 'JB120039' AND crime_type = 'homicide';"
        ],
        "rule_sql": []
    },
    "6221": {
        "db_id": "food_inspection_2",
        "question": "How much salary does Jessica Anthony receive?",
        "ground_truth": "SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT salary FROM employees WHERE first_name = 'Jessica' AND last_name = 'Anthony';"
        ],
        "rule_sql": []
    },
    "5952": {
        "db_id": "books",
        "question": "What is the name of the first book written by J.K Rowling?",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'J.K. Rowling' ORDER BY T1.publication_date ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE author = 'J.K. Rowling' ORDER BY publication_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5597": {
        "db_id": "shipping",
        "question": "Tell the name of the driver who received the shipment on 2017/11/5.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2017-11-05'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT driver_name FROM shipments WHERE shipment_date = '2017/11/5';"
        ],
        "rule_sql": []
    },
    "7740": {
        "db_id": "hockey",
        "question": "Between 2003 to 2005, what are the given names of the players with the most number of games played whose Penalty minutes is between 200 to 250?",
        "ground_truth": "SELECT T2.nameGiven FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.PIM BETWEEN 200 AND 250 AND T1.year BETWEEN 2003 AND 2005 ORDER BY T1.GP DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT givenName \nFROM players \nWHERE year BETWEEN 2003 AND 2005 \n  AND penaltyMinutes >= 200 \n  AND penaltyMinutes <= 250 \nORDER BY gamesPlayed DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "409": {
        "db_id": "movies_4",
        "question": "How many production companies does the movie \"Four Rooms\" have?",
        "ground_truth": "SELECT COUNT(CNAME) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE title = 'Four Rooms';"
        ],
        "rule_sql": []
    },
    "5984": {
        "db_id": "books",
        "question": "Provide the number of orders by Daisey Lamball in 2021.",
        "ground_truth": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND STRFTIME('%Y', T1.order_date) = '2021'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Daisey Lamball' AND order_date LIKE '2020%';"
        ],
        "rule_sql": []
    },
    "1020": {
        "db_id": "computer_student",
        "question": "Which professor teaches the highest number of professional or master/graduate courses?",
        "ground_truth": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT professor_name, COUNT(*) as course_count\nFROM courses\nWHERE course_level IN ('professional', 'master', 'graduate')\nGROUP BY professor_name\nORDER BY course_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4818": {
        "db_id": "legislator",
        "question": "State the opensecrets_id of the legislator whose YouTube name is Bluetkemeyer.",
        "ground_truth": "SELECT T1.opensecrets_id FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'BLuetkemeyer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT opensecrets_id FROM legislators WHERE youtube_name = 'Bluetkemeyer';"
        ],
        "rule_sql": []
    },
    "477": {
        "db_id": "movies_4",
        "question": "What are the genres of Sky Captain and the World of Tomorrow?",
        "ground_truth": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM movies WHERE title = 'Sky Captain and the World of Tomorrow';"
        ],
        "rule_sql": []
    },
    "8157": {
        "db_id": "sales_in_weather",
        "question": "Give the id of the bestsellers of store no.1 on 2012/1/1.",
        "ground_truth": "SELECT item_nbr FROM sales_in_weather WHERE `date` = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM bestsellers WHERE store_id = 1 AND date = '2012/1/1' ORDER BY sales DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2923": {
        "db_id": "professional_basketball",
        "question": "Which player had the most game presentatons in 2011 NBA season.",
        "ground_truth": "SELECT playerID FROM players_teams WHERE year = 2011 ORDER BY GP DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, COUNT(*) as presentations FROM games WHERE season = '2011' GROUP BY player_name ORDER BY presentations DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4995": {
        "db_id": "olympics",
        "question": "How many athletes over the age of 59 competed in the 2016 Summer Olympics?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2016 Summer' AND T2.age > 59",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE age > 59 AND olympics = '2016 Summer';"
        ],
        "rule_sql": []
    },
    "5665": {
        "db_id": "shipping",
        "question": "List the drivers who shipped the shipments to the least populated city.",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id ORDER BY T2.population ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.driver_name \nFROM drivers d\nJOIN shipments s ON d.driver_id = s.driver_id\nJOIN cities c ON s.city_id = c.city_id\nWHERE c.population = (SELECT MIN(population) FROM cities)\nORDER BY d.driver_name;"
        ],
        "rule_sql": []
    },
    "1117": {
        "db_id": "talkingdata",
        "question": "Calculate the ratio in percentage between the average number of app users belonging to \"80s Japanese comic\" and \"90s Japanese comic\".",
        "ground_truth": "SELECT SUM(IIF(T1.category = '80s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J8 , SUM(IIF(T1.category = '90s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J9 FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (AVG(CASE WHEN category = '80s Japanese comic' THEN users END) / \n     AVG(CASE WHEN category = '90s Japanese comic' THEN users END)) * 100 AS ratio_percentage\nFROM apps;"
        ],
        "rule_sql": []
    },
    "9379": {
        "db_id": "movie_3",
        "question": "What is the average replacement cost for the movies with a rental rate of 4.99?",
        "ground_truth": "SELECT AVG(replacement_cost) FROM film WHERE rental_rate = 4.99",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(replacement_cost) FROM film WHERE rental_rate = 4.99;"
        ],
        "rule_sql": []
    },
    "2212": {
        "db_id": "world_development_indicators",
        "question": "What is the subject of the series SP.DYN.AMRT.MA and what does it pertain to?",
        "ground_truth": "SELECT DISTINCT T1.Topic, T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.AMRT.MA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT subject FROM series WHERE series_code = 'SP.DYN.AMRT.MA' AND description LIKE '%mortality%';"
        ],
        "rule_sql": []
    },
    "5476": {
        "db_id": "menu",
        "question": "Among all the menu pages with the appearance of the dish \"Clear green turtle\", how many of them have the dish at a stable price?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM menu_pages mp\nJOIN menu_items mi ON mp.menu_page_id = mi.menu_page_id\nWHERE mi.dish_name = 'Clear green turtle'\nAND mi.price IS NOT NULL\nAND mi.price = (SELECT AVG(price) FROM menu_items WHERE dish_name = 'Clear green turtle')"
        ],
        "rule_sql": []
    },
    "9009": {
        "db_id": "bike_share_1",
        "question": "When was the hottest temperature recorded? If there are multiple dates with the hottest temperature, indicate all of the dates.",
        "ground_truth": "SELECT max_temperature_f, date FROM weather WHERE max_temperature_f = ( SELECT MAX(max_temperature_f) FROM weather WHERE max_temperature_f IS NOT NULL AND max_temperature_f IS NOT '' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date FROM temperature_records ORDER BY temperature DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5220": {
        "db_id": "address",
        "question": "Provide the zip codes, cities, and locations of the postal points that have Shared Reshipper as a bad alias.",
        "ground_truth": "SELECT T1.zip_code, T2.city, T2.latitude, T2.longitude FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Shared Reshipper'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code, city, location FROM postal_points WHERE bad_alias = 'Shared Reshipper';"
        ],
        "rule_sql": []
    },
    "495": {
        "db_id": "movies_4",
        "question": "What is the genre of the movie title which was well-received by the audiences but made the lowest revenue?",
        "ground_truth": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.vote_average DESC, T1.revenue LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM movies WHERE revenue = (SELECT MAX(revenue) FROM movies) AND audience_rating > 8.0;"
        ],
        "rule_sql": []
    },
    "7585": {
        "db_id": "image_and_language",
        "question": "How many images have \"keyboard\" as their object class?",
        "ground_truth": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM images WHERE object_class = 'keyboard';"
        ],
        "rule_sql": []
    },
    "8525": {
        "db_id": "software_company",
        "question": "What is the number of inhabitants of the place the most customers are from?",
        "ground_truth": "SELECT DISTINCT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INHABITANTS_K DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1357": {
        "db_id": "law_episode",
        "question": "Which episode number has the second highest positive viewer comments and has been awarded \"Best Television Episode\"?",
        "ground_truth": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best Television Episode' AND T1.result = 'Winner' ORDER BY T2.rating DESC LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_number \nFROM episodes \nWHERE award = 'Best Television Episode' \nORDER BY viewer_comments DESC \nLIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "6732": {
        "db_id": "retails",
        "question": "Among the customers from Morocco, how many customers were in debt?",
        "ground_truth": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T2.n_name = 'MOROCCO'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE country = 'Morocco' AND debt > 0;"
        ],
        "rule_sql": []
    },
    "843": {
        "db_id": "social_media",
        "question": "How many tweets in French were posted from Australia?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Lang = 'fr' AND T2.Country = 'Australia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE language = 'French' AND country = 'Australia';"
        ],
        "rule_sql": []
    },
    "2081": {
        "db_id": "music_tracker",
        "question": "How many singles were released in 1979?",
        "ground_truth": "SELECT COUNT(releaseType) FROM torrents WHERE releaseType LIKE 'single' AND groupYear = 1979",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM songs WHERE year = 1979 AND album_id IS NULL;"
        ],
        "rule_sql": []
    },
    "6066": {
        "db_id": "books",
        "question": "Write the full name of the customers whose address is at 55 Dorton Pass, Huangqiao.",
        "ground_truth": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id WHERE T3.street_number = 55 AND T3.street_name = 'Dorton Pass' AND T3.city = 'Huangqiao'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE address = '55 Dorton Pass, Huangqiao';"
        ],
        "rule_sql": []
    },
    "2674": {
        "db_id": "regional_sales",
        "question": "Indicate the procured dates for the customer whose ID is 11.",
        "ground_truth": "SELECT DISTINCT T FROM ( SELECT IIF(_CustomerID = 11, ProcuredDate, NULL) AS T FROM `Sales Orders` ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT procured_date FROM customers WHERE customer_id = 11;"
        ],
        "rule_sql": []
    },
    "1511": {
        "db_id": "synthea",
        "question": "List out full name of patients who have \"Diabetic diet\" in the description of the care plan.",
        "ground_truth": "SELECT DISTINCT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetic diet'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM patients WHERE care_plan_description = 'Diabetic diet';"
        ],
        "rule_sql": []
    },
    "5679": {
        "db_id": "shipping",
        "question": "List the weight of the customer's shipment with annual revenue of 39448581.",
        "ground_truth": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.annual_revenue = 39448581",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight FROM shipments WHERE customer_id IN (SELECT customer_id FROM customers WHERE annual_revenue = 39448581)"
        ],
        "rule_sql": []
    },
    "4308": {
        "db_id": "simpson_episodes",
        "question": "Write down the website address which stores the episode image of episode 5.",
        "ground_truth": "SELECT episode_image FROM Episode WHERE episode = 5;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT website FROM episodes WHERE episode_number = 5;"
        ],
        "rule_sql": []
    },
    "8618": {
        "db_id": "chicago_crime",
        "question": "Tell the number of cases with arrests in North Lawndale community.",
        "ground_truth": "SELECT SUM(CASE WHEN T1.community_area_name = 'North Lawndale' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.arrest = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cases WHERE community_area = 'North Lawndale' AND arrest = 'true';"
        ],
        "rule_sql": []
    },
    "4291": {
        "db_id": "simpson_episodes",
        "question": "What is the summary of the episode in which Emily Blunt is featured in?",
        "ground_truth": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Emily Blunt';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT summary FROM episodes WHERE actor = 'Emily Blunt';"
        ],
        "rule_sql": []
    },
    "3441": {
        "db_id": "video_games",
        "question": "Which game has sold the fewest units?",
        "ground_truth": "SELECT T.game_name FROM ( SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id ORDER BY T4.num_sales LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_name, MAX(units_sold) FROM games ORDER BY units_sold ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7993": {
        "db_id": "university",
        "question": "Give the name of the country that has the most universities.",
        "ground_truth": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as university_count FROM universities GROUP BY country ORDER BY university_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2636": {
        "db_id": "regional_sales",
        "question": "What is the unit cost of order SO - 000103?",
        "ground_truth": "SELECT DISTINCT T FROM ( SELECT IIF(OrderNumber = 'SO - 000103', `Unit Cost`, NULL) AS T FROM `Sales Orders` ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT unit_price FROM orders WHERE order_id = 'SO - 000103';"
        ],
        "rule_sql": []
    },
    "5802": {
        "db_id": "language_corpus",
        "question": "How many times does the biwords \"que gregorio\" appear in the language?",
        "ground_truth": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'que' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'gregorio' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM biwords WHERE word1 = 'que' AND word2 = 'gregorio';"
        ],
        "rule_sql": []
    },
    "5919": {
        "db_id": "books",
        "question": "What is the name of the publisher of the book with the most pages?",
        "ground_truth": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher FROM books ORDER BY pages DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2831": {
        "db_id": "professional_basketball",
        "question": "Among the players who have won the award of Rookie of the year, what is the height of the tallest player?",
        "ground_truth": "SELECT T1.height FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' ORDER BY T1.height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(height) FROM players WHERE award = 'Rookie of the Year';"
        ],
        "rule_sql": []
    },
    "8896": {
        "db_id": "cookbook",
        "question": "How many baking product ingredients are there in the No-Bake Chocolate Cheesecake?",
        "ground_truth": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'baking products' AND T1.title = 'No-Bake Chocolate Cheesecake'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM ingredients WHERE recipe_name = 'No-Bake Chocolate Cheesecake' AND category = 'baking';"
        ],
        "rule_sql": []
    },
    "9115": {
        "db_id": "movie_3",
        "question": "What is the language of the film ACADEMY DINOSAUR?",
        "ground_truth": "SELECT T2.name FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'ACADEMY DINOSAUR'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM film WHERE language_id = 1;"
        ],
        "rule_sql": []
    },
    "4022": {
        "db_id": "public_review_platform",
        "question": "Among the users whose fan is medium, how many users received high compliments from other users.",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_fans = 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE fan_level = 'medium' AND compliment_level = 'high';"
        ],
        "rule_sql": []
    },
    "4881": {
        "db_id": "legislator",
        "question": "What is the party of the oldest legislator?",
        "ground_truth": "SELECT T1.party FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide ORDER BY T2.birthday_bio LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party FROM legislators ORDER BY birth_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9007": {
        "db_id": "bike_share_1",
        "question": "On 8/29/2013, who took the longest to arrive in California Ave Caltrain Station from University and Emerson? Indicate the bike id.",
        "ground_truth": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bike_id \nFROM trips \nWHERE start_station = 'University and Emerson' \nAND end_station = 'California Ave Caltrain Station' \nAND start_date = '2013-08-29' \nORDER BY duration DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7079": {
        "db_id": "works_cycles",
        "question": "Among the active employees with over 10 hours of sick leave, what is the percentage of the employees with over 20 vacation hours?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN vacation_hours > 20 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM employees\nWHERE status = 'Active' AND sick_leave_hours > 10;"
        ],
        "rule_sql": []
    },
    "3256": {
        "db_id": "donor",
        "question": "Give the coordinates of the buyer of R & A Plant Genetics from Benchmark Education.",
        "ground_truth": "SELECT T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'R & A Plant Genetics' AND T1.vendor_name = 'Benchmark Education'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM buyers WHERE company_name = 'R & A Plant Genetics' AND education = 'Benchmark Education'"
        ],
        "rule_sql": []
    },
    "206": {
        "db_id": "book_publishing_company",
        "question": "In which country is the publisher of the book \"Life Without Fear\" located?",
        "ground_truth": "SELECT T2.country FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Life Without Fear'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM books WHERE title = 'Life Without Fear';"
        ],
        "rule_sql": []
    },
    "848": {
        "db_id": "social_media",
        "question": "Among the tweets posted from Santa Fe state in Argentina, how many of them were posted on 31st?",
        "ground_truth": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Day = 31 AND T2.State = 'Santa' AND T2.Country = 'Argentina'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE state = 'Santa Fe' AND country = 'Argentina' AND strftime('%d', created_at) = '30';"
        ],
        "rule_sql": []
    },
    "1002": {
        "db_id": "computer_student",
        "question": "Calculate the percentage of high-level undergraduate course.",
        "ground_truth": "SELECT CAST(SUM(CASE  WHEN courseLevel = 'Level_400' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM course",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM courses)) AS percentage\nFROM courses\nWHERE level = 'undergraduate' AND credits > 3;"
        ],
        "rule_sql": []
    },
    "3407": {
        "db_id": "video_games",
        "question": "What are the years that \"WiiU\" got a new game?",
        "ground_truth": "SELECT T2.release_year FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T1.platform_name = 'WiiU' ORDER BY T2.release_year DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT year FROM games WHERE platform = 'WiiU' ORDER BY year;"
        ],
        "rule_sql": []
    },
    "757": {
        "db_id": "movie",
        "question": "What is the percentage of the USA actors that showed up in the credit list of movie \"Mrs. Doubtfire\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.`Birth Country` = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Birth Country`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM actors WHERE country = 'USA')) AS percentage\nFROM credits\nWHERE movie_title = 'Mrs. Doubtfire'\nAND actor_id IN (SELECT actor_id FROM actors WHERE country = 'USA');"
        ],
        "rule_sql": []
    },
    "3879": {
        "db_id": "public_review_platform",
        "question": "How many of the busineses are in Casa Grande?",
        "ground_truth": "SELECT COUNT(city) FROM Business WHERE city LIKE 'Casa Grande'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Casa Grande';"
        ],
        "rule_sql": []
    },
    "1220": {
        "db_id": "talkingdata",
        "question": "Please list any three devices that are owned by female users.",
        "ground_truth": "SELECT device_id FROM gender_age WHERE gender = 'F' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT device_name FROM devices WHERE user_gender = 'female' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "3875": {
        "db_id": "public_review_platform",
        "question": "How many stars on average does a Yelp_Business in Anthem get from a user review?",
        "ground_truth": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Anthem'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(stars) FROM Yelp_Business WHERE city = 'Anthem'"
        ],
        "rule_sql": []
    },
    "7509": {
        "db_id": "image_and_language",
        "question": "How many objects are there in the attribute class id with the highest number of objects?",
        "ground_truth": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_att GROUP BY IMG_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM objects WHERE class_id = (SELECT MAX(class_id) FROM objects);"
        ],
        "rule_sql": []
    },
    "886": {
        "db_id": "cs_semester",
        "question": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN s.student_level = 'Postgraduate' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_postgraduate\nFROM \n    research_assistants ra\nJOIN \n    professors p ON ra.professor_id = p.professor_id\nJOIN \n    students s ON ra.student_id = s.student_id\nWHERE \n    p.first_name = 'Ogdon' AND p.last_name = 'Zywicki';"
        ],
        "rule_sql": []
    },
    "4007": {
        "db_id": "public_review_platform",
        "question": "Identify the most popular and appealing active business in Gilbert based on users' reviews.",
        "ground_truth": "SELECT business_id FROM Business WHERE city = 'Gilbert' AND active = 'true' AND review_count = 'High' ORDER BY stars DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name, AVG(rating) as avg_rating \nFROM businesses \nWHERE city = 'Gilbert' AND is_active = 1 \nORDER BY avg_rating DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4156": {
        "db_id": "citeseer",
        "question": "Among the papers under DB classification, which paper has the highest number of words cited?",
        "ground_truth": "SELECT T1.paper_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T1.paper_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, MAX(citation_count) as max_citations FROM papers WHERE classification = 'DB' GROUP BY title ORDER BY max_citations DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6268": {
        "db_id": "coinmarketcap",
        "question": "What was the max profit a user can make on Bitcoin on 2013/4/28?",
        "ground_truth": "SELECT T2.high - T2.low FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price) FROM bitcoin_transactions WHERE date = '2013-04-28';"
        ],
        "rule_sql": []
    },
    "7854": {
        "db_id": "world",
        "question": "List all the countries in Asia.",
        "ground_truth": "SELECT Name FROM Country WHERE Continent = 'Asia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM countries WHERE continent = 'Europe';"
        ],
        "rule_sql": []
    },
    "1766": {
        "db_id": "restaurant",
        "question": "List the food type of the restaurant located in 22779 6th St., Hayward City.",
        "ground_truth": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 22779 AND T1.street_name = '6th St' AND T2.city = 'hayward'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT food_type FROM restaurants WHERE address = '22779 6th St., Hayward City';"
        ],
        "rule_sql": []
    },
    "7931": {
        "db_id": "music_platform_2",
        "question": "Name the podcast title, rating and review content created by '76A4C24B6038145'.",
        "ground_truth": "SELECT T2.title, T2.rating, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = '76A4C24B6038145'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, rating, review_content FROM podcasts WHERE creator_id = '76A4C24B6038145'"
        ],
        "rule_sql": []
    },
    "8420": {
        "db_id": "mondial_geo",
        "question": "Which two Asian countries share a border that is 1,782 kilometers long?",
        "ground_truth": "SELECT T4.Country1, T4.Country2 FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN borders AS T4 ON T4.Country1 = T3.Code WHERE T1.Name = 'Asia' AND T4.Length = 1782",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country1, country2 FROM borders WHERE continent = 'Asia' AND length = 1782 LIMIT 2;"
        ],
        "rule_sql": []
    },
    "4635": {
        "db_id": "disney",
        "question": "Who is the villain of the movie \"Beauty and the Beast\"?",
        "ground_truth": "SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM villains WHERE movie_title = 'Beauty and the Beast';"
        ],
        "rule_sql": []
    },
    "7023": {
        "db_id": "works_cycles",
        "question": "List the name and calculate its profit for product with the highest rating in review.",
        "ground_truth": "SELECT T1.Name, T1.ListPrice - T1.StandardCost FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, (p.price - p.cost) AS profit\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nWHERE r.rating = (SELECT MAX(rating) FROM reviews)\nORDER BY profit DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6982": {
        "db_id": "ice_hockey_draft",
        "question": "How many teams did the heaviest player drafted by Arizona Coyotes have played for?",
        "ground_truth": "SELECT COUNT(T2.TEAM) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T1.weight = T3.weight_id WHERE T1.overallby = 'Arizona Coyotes' ORDER BY T3.weight_in_lbs DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT team_id) \nFROM player_teams \nWHERE player_id = (\n    SELECT player_id \n    FROM players \n    WHERE drafted_by = 'Arizona Coyotes' \n    ORDER BY weight DESC \n    LIMIT 1\n)"
        ],
        "rule_sql": []
    },
    "2534": {
        "db_id": "app_store",
        "question": "How many neutral reviews does the app \"Dino War: Rise of Beasts\" have?",
        "ground_truth": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE app_name = 'Dino War: Rise of Beasts' AND sentiment = 'positive';"
        ],
        "rule_sql": []
    },
    "4235": {
        "db_id": "simpson_episodes",
        "question": "Name the performer who won Emmy Award for Outstanding Voice-Over Performance by playing Homer simpson 20.",
        "ground_truth": "SELECT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer simpson 20' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT performer_name FROM emmy_awards WHERE character_name = 'Homer Simpson' AND award_name = 'Outstanding Voice-Over Performance' AND year = 20;"
        ],
        "rule_sql": []
    },
    "470": {
        "db_id": "movies_4",
        "question": "What is the average revenue of American movies in 2006?",
        "ground_truth": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(revenue) FROM movies WHERE country = 'USA' AND year = 2006;"
        ],
        "rule_sql": []
    },
    "7459": {
        "db_id": "works_cycles",
        "question": "How many of the work orders didn\u2019t meet the due date?",
        "ground_truth": "SELECT COUNT(WorkOrderID) FROM WorkOrder WHERE EndDate > DueDate",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM work_orders WHERE due_date < completed_date;"
        ],
        "rule_sql": []
    },
    "4098": {
        "db_id": "public_review_platform",
        "question": "Sum up the number of business with \"ambience_romantic\" attribute.",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'ambience_romantic' AND T2.attribute_value = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM business WHERE ambience_romantic = 'true';"
        ],
        "rule_sql": []
    },
    "3176": {
        "db_id": "donor",
        "question": "When was the project with the highest quantity went live on the site? Indicate the grade level for which the project materials are intended.",
        "ground_truth": "SELECT T2.date_posted, T2.grade_level FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T1.item_quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT live_date, grade_level FROM projects ORDER BY quantity ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7034": {
        "db_id": "works_cycles",
        "question": "How many of the workers who started working in 2009 are from the Production Department?",
        "ground_truth": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.StartDate >= '2009-01-01' AND T2.StartDate < '2010-01-01' AND T1.Name = 'Production'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM workers \nWHERE start_year = 2009 \nAND department = 'Production Department';"
        ],
        "rule_sql": []
    },
    "3381": {
        "db_id": "video_games",
        "question": "When was the \"Adventure Island\" game released?",
        "ground_truth": "SELECT T3.release_year FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT release_date FROM games WHERE title = 'Adventure Island';"
        ],
        "rule_sql": []
    },
    "3219": {
        "db_id": "donor",
        "question": "What is the short description of the project that gives donation to school \u201c301c9bf0a45d159d162b65a93fddd74e\u201d?",
        "ground_truth": "SELECT T2.short_description FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = '301c9bf0a45d159d162b65a93fddd74e'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT short_description FROM projects WHERE donation_to_school = '301c9bf0a45d159d162b65a93fddd74e'"
        ],
        "rule_sql": []
    },
    "2395": {
        "db_id": "superstore",
        "question": "Calculate the total profit by Cisco SPA301 for all regions.",
        "ground_truth": "SELECT SUM(T1.Profit) + SUM(T2.Profit) + SUM(T3.Profit) + SUM(T4.Profit) AS totalProfit FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN central_superstore AS T3 ON T3.`Customer ID` = T2.`Customer ID` INNER JOIN south_superstore AS T4 ON T4.`Customer ID` = T3.`Customer ID` INNER JOIN product AS T5 ON T5.`Product ID` = T4.`Product ID` WHERE T5.`Product Name` = 'Cisco SPA301'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(profit) FROM sales WHERE product_name = 'Cisco SPA301' GROUP BY region;"
        ],
        "rule_sql": []
    },
    "5862": {
        "db_id": "airline",
        "question": "List the tail numbers of all the aircraft that arrived on time at Meadows Field airport in August of 2018?",
        "ground_truth": "SELECT T2.TAIL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Bakersfield, CA: Meadows Field' AND T2.DEST = 'BFL' AND T2.ARR_DELAY <= 0 GROUP BY T2.TAIL_NUM",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT tail_number FROM flights WHERE arrival_airport = 'Meadows Field' AND arrival_date LIKE '2018-08%' AND arrival_time = scheduled_arrival_time;"
        ],
        "rule_sql": []
    },
    "6964": {
        "db_id": "ice_hockey_draft",
        "question": "List out the nation of players who played for the 1997-1998 season .",
        "ground_truth": "SELECT DISTINCT T2.nation FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nation FROM players WHERE season = '1997-1998';"
        ],
        "rule_sql": []
    },
    "8805": {
        "db_id": "food_inspection",
        "question": "How many establishments have an inspection score of no more than 50?",
        "ground_truth": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE score < 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM establishments WHERE inspection_score > 50;"
        ],
        "rule_sql": []
    },
    "16": {
        "db_id": "movie_platform",
        "question": "What is the name of the most followed list?",
        "ground_truth": "SELECT list_title FROM lists ORDER BY list_followers DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM lists ORDER BY followers DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4508": {
        "db_id": "student_loan",
        "question": "Which school have the highest student enrollment? How many of those students are filed for bankruptcy?",
        "ground_truth": "SELECT T.school, num FROM ( SELECT T1.school, COUNT(T2.name) AS num FROM enrolled AS T1 LEFT JOIN filed_for_bankrupcy AS T2 ON T2.name = T1.name GROUP BY T1.school ) T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_name, COUNT(*) as total_students \nFROM schools \nWHERE bankruptcy_status = 'filed' \nGROUP BY school_name \nORDER BY total_students DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3965": {
        "db_id": "public_review_platform",
        "question": "Does Yelp business No.\"11825\" have a \"parking lot\"?",
        "ground_truth": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 11825 AND T2.attribute_name = 'parking_lot'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT parking_lot FROM yelp_businesses WHERE business_id = 11825;"
        ],
        "rule_sql": []
    },
    "3012": {
        "db_id": "shakespeare",
        "question": "What is the paragraph number with plain text \"This is Illyria, lady\"?",
        "ground_truth": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT paragraph_number FROM paragraphs WHERE plain_text = 'This is Illyria, lady';"
        ],
        "rule_sql": []
    },
    "628": {
        "db_id": "codebase_comments",
        "question": "List all the methods with a solution with a \"636449700980488000\" processed time.",
        "ground_truth": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.ProcessedTime = 636449700980488000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM methods WHERE processed_time = '636449700980488000';"
        ],
        "rule_sql": []
    },
    "8503": {
        "db_id": "mondial_geo",
        "question": "What other country does the most populated nation in the world share a border with and how long is the border between the two nations?",
        "ground_truth": "SELECT T2.Country2, T2.Length FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = ( SELECT Name FROM country ORDER BY Population DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT border_country, border_length \nFROM borders \nWHERE country = (SELECT name FROM countries ORDER BY population DESC LIMIT 1) \nORDER BY border_length DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7395": {
        "db_id": "works_cycles",
        "question": "Which geographic area does the city with the second lowest tax rate belongs to? Indicate the name of the state or province as well.",
        "ground_truth": "SELECT T3.'Group', T2.Name FROM SalesTaxRate AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID INNER JOIN SalesTerritory AS T3 ON T2.TerritoryID = T3.TerritoryID ORDER BY T1.TaxRate LIMIT 1, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state_province FROM cities ORDER BY tax_rate ASC LIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "1659": {
        "db_id": "car_retails",
        "question": "For Which order was the most profitable, please list the customer name of the order and the profit of the order.",
        "ground_truth": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name, MAX(profit) FROM orders GROUP BY customer_name ORDER BY profit DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1651": {
        "db_id": "car_retails",
        "question": "How much did customer 103 pay in total?",
        "ground_truth": "SELECT SUM(t.amount) FROM payments t WHERE t.customerNumber = '103'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payments WHERE customer_id = 103"
        ],
        "rule_sql": []
    },
    "5309": {
        "db_id": "beer_factory",
        "question": "What brands of beer has Peg Winchester consumed?",
        "ground_truth": "SELECT T3.BrandName FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Peg' AND T1.Last = 'Winchester'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand FROM beers WHERE consumer = 'Peg Winchester';"
        ],
        "rule_sql": []
    },
    "4729": {
        "db_id": "disney",
        "question": "How many voice-actors were involved in the Bambi movie?",
        "ground_truth": "SELECT COUNT(DISTINCT 'voice-actor') FROM `voice-actors` WHERE movie = 'Bambi'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actors WHERE movie = 'Bambi' AND role_type = 'voice'"
        ],
        "rule_sql": []
    },
    "7127": {
        "db_id": "works_cycles",
        "question": "Which chromoly steel product model has AdventureWorks saved in English?",
        "ground_truth": "SELECT T1.ProductModelID FROM ProductModelProductDescriptionCulture AS T1 INNER JOIN Culture AS T2 USING (cultureid) INNER JOIN ProductDescription AS T3 USING (productdescriptionid) WHERE T3.Description LIKE 'Chromoly steel%' AND T2.Name = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name FROM Production.Product WHERE ProductModelID = (SELECT ProductModelID FROM Production.ProductModel WHERE Name LIKE '%chromoly%' AND CultureID = 'en')"
        ],
        "rule_sql": []
    },
    "2938": {
        "db_id": "professional_basketball",
        "question": "For the player who was drafted in the 1st round, 6th position in 1976, which team did he play in that year?",
        "ground_truth": "SELECT T2.tmID FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 6 AND T1.draftYear = 1976",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team FROM players WHERE draft_round = 1 AND draft_position = 6 AND year = 1976;"
        ],
        "rule_sql": []
    },
    "2071": {
        "db_id": "music_tracker",
        "question": "Indicates groups with id from 10 to 20 with singles downloaded at least 20.",
        "ground_truth": "SELECT groupName FROM torrents WHERE totalSnatched >= 20 AND releaseType LIKE 'single' AND id BETWEEN 10 AND 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM groups WHERE id BETWEEN 10 AND 20 AND singles_downloaded > 20;"
        ],
        "rule_sql": []
    },
    "7144": {
        "db_id": "works_cycles",
        "question": "What are the Department ids under the Sales and Marketing Group?",
        "ground_truth": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DepartmentID FROM Departments WHERE GroupName = 'Sales' OR GroupName = 'Marketing'"
        ],
        "rule_sql": []
    },
    "4161": {
        "db_id": "simpson_episodes",
        "question": "In which country was the winner of the Outstanding Voice-Over Performance award of 2009 born?",
        "ground_truth": "SELECT T1.birth_country FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM winners WHERE award = 'Outstanding Voice-Over Performance' AND year = 2009;"
        ],
        "rule_sql": []
    },
    "1269": {
        "db_id": "law_episode",
        "question": "How many times is the number of keywords in \"Refuge: Part 1\" episode than \"Shield\" episode?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.title = 'Refuge: Part 1' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.title = 'Shield' THEN 1 ELSE 0 END) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM keywords k1 JOIN episodes e1 ON k1.episode_id = e1.id WHERE e1.title = 'Refuge: Part 1') / \n    (SELECT COUNT(*) FROM keywords k2 JOIN episodes e2 ON k2.episode_id = e2.id WHERE e2.title = 'Shield')\nAS keyword_ratio;"
        ],
        "rule_sql": []
    },
    "317": {
        "db_id": "retail_complains",
        "question": "Which state has the highest number of clients who gave a 5-star review?",
        "ground_truth": "SELECT T2.state_abbrev FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 GROUP BY T2.state_abbrev ORDER BY COUNT(T2.state_abbrev) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, COUNT(*) as client_count FROM clients JOIN reviews ON clients.client_id = reviews.client_id WHERE rating = 5 GROUP BY state ORDER BY client_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1581": {
        "db_id": "car_retails",
        "question": "List out full name of employees who are working in Boston?",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Boston'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE city = 'Boston';"
        ],
        "rule_sql": []
    },
    "8200": {
        "db_id": "sales_in_weather",
        "question": "What is the minimum dew point?",
        "ground_truth": "SELECT MIN(dewpoint) FROM weather",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(dew_point) FROM weather_data;"
        ],
        "rule_sql": []
    },
    "4885": {
        "db_id": "legislator",
        "question": "How many current legislators have both accounts on both VoteView.com and maplight.org?",
        "ground_truth": "SELECT COUNT(*) FROM current WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators l JOIN voteview_accounts v ON l.id = v.legislator_id JOIN maplight_accounts m ON l.id = m.legislator_id WHERE l.status = 'current';"
        ],
        "rule_sql": []
    },
    "746": {
        "db_id": "movie",
        "question": "Give the name of the No.1 character in the credit list from the highest rating thriller movie.",
        "ground_truth": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM movies WHERE genre = 'thriller' ORDER BY rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3325": {
        "db_id": "video_games",
        "question": "State the region id of Japan.",
        "ground_truth": "SELECT T.id FROM region AS T WHERE T.region_name = 'Japan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_id FROM countries WHERE country_name = 'Japan';"
        ],
        "rule_sql": []
    },
    "1211": {
        "db_id": "talkingdata",
        "question": "Which gender logged in the most to an event in the first 10 days of May 2016?",
        "ground_truth": "SELECT T.gender FROM ( SELECT T1.gender, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE date(T2.timestamp) BETWEEN '2016-05-01' AND '2016-05-10' GROUP BY T1.gender ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, COUNT(*) as login_count\nFROM users u\nJOIN event_logins el ON u.user_id = el.user_id\nJOIN events e ON el.event_id = e.event_id\nWHERE e.event_date BETWEEN '2016-05-01' AND '2016-05-10'\nGROUP BY gender\nORDER BY login_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5744": {
        "db_id": "language_corpus",
        "question": "How many Catalan-language Wikipedia pages are there overall?",
        "ground_truth": "SELECT pages FROM langs WHERE lang = 'ca'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM wikipedia WHERE language = 'Catalan';"
        ],
        "rule_sql": []
    },
    "5179": {
        "db_id": "address",
        "question": "List all the counties in Georgia.",
        "ground_truth": "SELECT T2.county FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Georgia' GROUP BY T2.county",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM states WHERE name = 'Georgia';"
        ],
        "rule_sql": []
    },
    "7260": {
        "db_id": "works_cycles",
        "question": "What is the salary rate per hour that the company paid to the first 5 employees that they hired?",
        "ground_truth": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T2.HireDate ASC LIMIT 0, 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT salary / hours_worked AS hourly_rate FROM employees ORDER BY hire_date LIMIT 5;"
        ],
        "rule_sql": []
    },
    "7009": {
        "db_id": "works_cycles",
        "question": "List all product names that are high in quality. Please also state its selling price.",
        "ground_truth": "SELECT Name, ListPrice FROM Product WHERE Class = 'H'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, selling_price FROM products WHERE quality = 'high';"
        ],
        "rule_sql": []
    },
    "1323": {
        "db_id": "law_episode",
        "question": "How many times was episode 20 of the Law and Order series nominated for the Primetime Emmy Awards in 1999?",
        "ground_truth": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.year = 1999 AND T2.result = 'Nominee' AND T1.episode = 20 AND T2.organization = 'Primetime Emmy Awards' AND T1.series = 'Law and Order'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM nominations WHERE series_name = 'Law and Order' AND episode_number = 20 AND award_year = 1999 AND award_name = 'Primetime Emmy Awards';"
        ],
        "rule_sql": []
    },
    "6888": {
        "db_id": "retails",
        "question": "What is the quantity of the part \"burnished seashell gainsboro navajo chocolate\" ordered in order no.1?",
        "ground_truth": "SELECT T1.l_quantity FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT quantity FROM parts WHERE part_name = 'burnished seashell gainsboro navajo chocolate' AND order_id = 1;"
        ],
        "rule_sql": []
    },
    "1545": {
        "db_id": "car_retails",
        "question": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.",
        "ground_truth": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor, COUNT(*) as order_count, SUM(price * quantity) as total_earnings \nFROM orders \nGROUP BY vendor \nORDER BY order_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9317": {
        "db_id": "movie_3",
        "question": "What are the addresses for the stores?",
        "ground_truth": "SELECT T2.address FROM store AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM stores;"
        ],
        "rule_sql": []
    },
    "8887": {
        "db_id": "cookbook",
        "question": "State the title of the recipe with most kinds of ingredients.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T1.title ORDER BY COUNT(title) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM recipes ORDER BY COUNT(ingredients) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5046": {
        "db_id": "olympics",
        "question": "Who is the heaviest athlete?",
        "ground_truth": "SELECT full_name FROM person ORDER BY weight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM athletes ORDER BY weight ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7631": {
        "db_id": "hockey",
        "question": "List the living players who have two positions. State their given name the position they play.",
        "ground_truth": "SELECT firstName, lastName, pos FROM Master WHERE deathYear IS NULL AND pos LIKE '%/%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT given_name, position FROM players WHERE status = 'living' AND COUNT(position) = 2;"
        ],
        "rule_sql": []
    },
    "7956": {
        "db_id": "music_platform_2",
        "question": "Calculate the average rating of the true crime category.",
        "ground_truth": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM books WHERE category = 'crime'"
        ],
        "rule_sql": []
    },
    "5987": {
        "db_id": "books",
        "question": "Provide the customers' names who ordered the Fantasmas.",
        "ground_truth": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'Fantasmas'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE product_name = 'Fantasmas';"
        ],
        "rule_sql": []
    },
    "5832": {
        "db_id": "airline",
        "question": "What is the flight number of the flight operated by American Airlines Inc. that had the longest delay in departure?",
        "ground_truth": "SELECT T1.OP_CARRIER_FL_NUM FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' ORDER BY T1.DEP_TIME DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT flight_number FROM flights WHERE airline = 'American Airlines Inc.' ORDER BY departure_delay DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3070": {
        "db_id": "cars",
        "question": "Please list the names of the top 3 most expensive cars.",
        "ground_truth": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cars ORDER BY price ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "7224": {
        "db_id": "works_cycles",
        "question": "List the first names of the people with more than 65 sick leave hours.",
        "ground_truth": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.SickLeaveHours > 65",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE sick_leave_hours > 65"
        ],
        "rule_sql": []
    },
    "5236": {
        "db_id": "beer_factory",
        "question": "What is the description of the root beer brand A&W?",
        "ground_truth": "SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM brands WHERE name = 'A&W' AND type = 'soda';"
        ],
        "rule_sql": []
    },
    "4306": {
        "db_id": "simpson_episodes",
        "question": "How many people were not born in Connecticut, USA?",
        "ground_truth": "SELECT COUNT(name) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE birth_place = 'Connecticut, USA';"
        ],
        "rule_sql": []
    },
    "7525": {
        "db_id": "image_and_language",
        "question": "Provide the dimensions of the bounding box that contains the keyboard that was spotted in image no. 3.",
        "ground_truth": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 3 AND T2.OBJ_CLASS = 'keyboard'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT x_min, y_min, x_max, y_max FROM bounding_boxes WHERE image_id = 3 AND object_type = 'keyboard';"
        ],
        "rule_sql": []
    },
    "6206": {
        "db_id": "food_inspection_2",
        "question": "When did restaurant John Schaller has its first inspection in 2010?",
        "ground_truth": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER' AND strftime('%Y', T2.inspection_date) = '2010'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(inspection_date) FROM inspections WHERE restaurant_name = 'John Schaller' AND YEAR(inspection_date) = 2010;"
        ],
        "rule_sql": []
    },
    "3322": {
        "db_id": "video_games",
        "question": "How many games were sold on the DS platform on average in the 4 different regions?",
        "ground_truth": "SELECT SUM(T1.num_sales) * 100000 / 4 FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T3.platform_name = 'DS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(NA_Sales + EU_Sales + JP_Sales + Other_Sales) as average_sales FROM games WHERE Platform = 'DS';"
        ],
        "rule_sql": []
    },
    "5348": {
        "db_id": "beer_factory",
        "question": "What is the percentage difference of River City sale compare to Frostie?",
        "ground_truth": "SELECT CAST((SUM(CASE WHEN T3.BrandName = 'River City' THEN T2.PurchasePrice ELSE 0 END) - SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN store_name = 'River City' THEN sales_amount ELSE 0 END) - \n     SUM(CASE WHEN store_name = 'Frostie' THEN sales_amount ELSE 0 END)) * 100 / \n    SUM(CASE WHEN store_name = 'Frostie' THEN sales_amount ELSE 0 END) AS percentage_difference\nFROM sales\nWHERE store_name IN ('River City', 'Frostie');"
        ],
        "rule_sql": []
    },
    "1004": {
        "db_id": "computer_student",
        "question": "Provide the position status and IDs of professor who advised student ID \"303\".",
        "ground_truth": "SELECT T2.hasPosition, T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE T1.p_id = 303",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position, status, professor_id FROM professors WHERE student_id = '303'"
        ],
        "rule_sql": []
    },
    "564": {
        "db_id": "movies_4",
        "question": "List the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".",
        "ground_truth": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T2.job = 'Producer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM producers WHERE movie_title = 'Pirates of the Caribbean: At World's End';"
        ],
        "rule_sql": []
    },
    "8739": {
        "db_id": "chicago_crime",
        "question": "Please state the district name where incident number JB106545 took place.",
        "ground_truth": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Criminal Sexual Assault' AND T2.crime_against = 'Persons' AND T1.arrest = 'TRUE' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district_name FROM incidents WHERE incident_number = 'JB106545'"
        ],
        "rule_sql": []
    },
    "9231": {
        "db_id": "movie_3",
        "question": "Among films with store ID of 2, list the title of films with the highest rental rate.",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 ORDER BY rental_rate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM film WHERE store_id = 2 ORDER BY rental_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7962": {
        "db_id": "music_platform_2",
        "question": "What is the category and itune url of the title \"Scaling Global\"?",
        "ground_truth": "SELECT T1.category, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Scaling Global'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, itune_url FROM titles WHERE title = 'Scaling Global';"
        ],
        "rule_sql": []
    },
    "8047": {
        "db_id": "university",
        "question": "How many universities had over 30000 students in 2011?",
        "ground_truth": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 30000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE students > 30000 AND year = 2010;"
        ],
        "rule_sql": []
    },
    "6017": {
        "db_id": "books",
        "question": "What is the most expensive price paid by a customer for the book \"Bite Me If You Can (Argeneau #6)\"?",
        "ground_truth": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Bite Me If You Can (Argeneau #6)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price) FROM purchases WHERE book_title = 'Bite Me If You Can (Argeneau #6)';"
        ],
        "rule_sql": []
    },
    "1302": {
        "db_id": "law_episode",
        "question": "What is the name of the actors born in the USA?",
        "ground_truth": "SELECT name FROM Person WHERE birth_country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM actors WHERE country = 'United States';"
        ],
        "rule_sql": []
    },
    "9122": {
        "db_id": "movie_3",
        "question": "Please list the full names of all the actors that have starred in the film with the highest replacement cost.",
        "ground_truth": "SELECT first_name, last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id ORDER BY T3.replacement_cost DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.first_name, a.last_name \nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film)\nORDER BY a.last_name, a.first_name;"
        ],
        "rule_sql": []
    },
    "8380": {
        "db_id": "mondial_geo",
        "question": "For the countries have the population north of a billion, which one has the lowest GDP? Give the full name of the country.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population > 1000000000 ORDER BY T2.GDP ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE population > 1000000000 ORDER BY gdp ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1999": {
        "db_id": "soccer_2016",
        "question": "What is the difference between the number of matches where SC Ganguly played as a Captain and those matches where he played other roles?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.Role_Id = 1 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.Role_Id > 1 THEN 1 ELSE 0 END) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'SC Ganguly'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN role = 'Captain' THEN 1 END) - COUNT(CASE WHEN role != 'Captain' THEN 1 END) AS difference\nFROM matches\nWHERE player = 'SC Ganguly';"
        ],
        "rule_sql": []
    },
    "5119": {
        "db_id": "address",
        "question": "Give the name and the position of the cbsa officer from the area with the zip code 45503.",
        "ground_truth": "SELECT T1.CBSA_name, T2.latitude, T2.longitude FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.zip_code = 45503 GROUP BY T1.CBSA_name, T2.latitude, T2.longitude",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, position FROM cbsa_officers WHERE zip_code = '45503';"
        ],
        "rule_sql": []
    },
    "532": {
        "db_id": "movies_4",
        "question": "List the film with the highest budget in each genre.",
        "ground_truth": "SELECT T3.genre_name, MAX(T1.budget) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id GROUP BY T3.genre_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre, MAX(budget) as highest_budget FROM films GROUP BY genre;"
        ],
        "rule_sql": []
    },
    "7031": {
        "db_id": "works_cycles",
        "question": "Of the products that has a reorder inventory point of no more than 600, how many manufactured in-house products that takes 1 day to manufacture with BOM Level 4 are there?",
        "ground_truth": "SELECT COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.ProductID = T2.ProductAssemblyID WHERE T1.MakeFlag = 1 AND T1.DaysToManufacture = 1 AND T2.BOMLevel = 4 AND T1.ReorderPoint <= 600",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM products \nWHERE reorder_point <= 600 \nAND manufactured_in_house = 1 \nAND manufacturing_time = 1 \nAND bom_level = 4;"
        ],
        "rule_sql": []
    },
    "1225": {
        "db_id": "talkingdata",
        "question": "When did event number 2 happen and how many users were active?",
        "ground_truth": "SELECT COUNT(T1.app_id) AS num FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 2 AND T1.is_active = 1 GROUP BY T2.timestamp",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT event_date, COUNT(*) FROM events WHERE event_id = 2 GROUP BY event_date"
        ],
        "rule_sql": []
    },
    "9257": {
        "db_id": "movie_3",
        "question": "In children's movies, which was rented the most?",
        "ground_truth": "SELECT T.title FROM ( SELECT T4.title, COUNT(T4.title) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id INNER JOIN category AS T6 ON T5.category_id = T6.category_id WHERE T6.name = 'Children' GROUP BY T4.title ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, COUNT(r.rental_id) AS rental_count\nFROM movies m\nJOIN rentals r ON m.movie_id = r.movie_id\nWHERE m.genre = 'Children'\nGROUP BY m.title\nORDER BY rental_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3718": {
        "db_id": "college_completion",
        "question": "Tell the name of school in \"NJ\" that could get the bachelor's degree with highest students number.",
        "ground_truth": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' AND T1.student_count = ( SELECT MAX(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM schools WHERE state = 'NJ' ORDER BY bachelor_degree_students DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2366": {
        "db_id": "superstore",
        "question": "How many customers in Chicago ordered at least 10 Cardinal EasyOpen D-Ring Binders in a single order?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.`Customer ID`) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Cardinal EasyOpen D-Ring Binders' AND T2.City = 'Chicago' AND T1.Quantity > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT c.CustomerID) \nFROM Customers c\nJOIN Orders o ON c.CustomerID = o.CustomerID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nWHERE c.City = 'Chicago' \nAND p.ProductName = 'Cardinal EasyOpen D-Ring Binders'\nAND od.Quantity >= 10;"
        ],
        "rule_sql": []
    },
    "9155": {
        "db_id": "movie_3",
        "question": "How many films did actor Daryl Wahlberg appear in?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'DARYL' AND T2.last_name = 'WAHLBERG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id WHERE a.first_name = 'Daryl' AND a.last_name = 'Wahlberg'"
        ],
        "rule_sql": []
    },
    "3133": {
        "db_id": "cars",
        "question": "What is the average price of model 70 cars?",
        "ground_truth": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.model = 70",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM cars WHERE model = '70';"
        ],
        "rule_sql": []
    },
    "19": {
        "db_id": "movie_platform",
        "question": "For movie id 1269, how many users, who was a paying subscriber and was eligible for trial when he rated the movie, gave the movie a rating score of less than or equal to 2?",
        "ground_truth": "SELECT COUNT(*) FROM ratings WHERE movie_id = 1269 AND rating_score <= 2 AND user_eligible_for_trial = 1 AND user_has_payment_method = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM ratings r\nJOIN users u ON r.user_id = u.user_id\nWHERE r.movie_id = 1269 \nAND r.rating <= 2\nAND u.is_paying_subscriber = 1\nAND u.is_eligible_for_trial = 1;"
        ],
        "rule_sql": []
    },
    "5357": {
        "db_id": "beer_factory",
        "question": "What is the precise location of the place where Tommy Kono made a purchase in 2014?",
        "ground_truth": "SELECT DISTINCT T1.Latitude, T1.Longitude FROM geolocation AS T1 INNER JOIN `transaction` AS T2 ON T2.LocationID = T1.LocationID INNER JOIN customers AS T3 ON T3.CustomerID = T2.CustomerID WHERE T3.First = 'Tommy' AND T3.Last = 'Kono' AND T2.TransactionDate LIKE '2014%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM purchases WHERE name = 'Tommy Kono' AND year = 2014;"
        ],
        "rule_sql": []
    },
    "8118": {
        "db_id": "university",
        "question": "Provide the university name and ID of the university found in Turkey.",
        "ground_truth": "SELECT T1.university_name, T1.id FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_name, university_id FROM universities WHERE country = 'Turkey';"
        ],
        "rule_sql": []
    },
    "6120": {
        "db_id": "food_inspection_2",
        "question": "Among the inspections done by sanitarian Joshua Rosa, how many of them have the result of \"pass\"?",
        "ground_truth": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE sanitarian = 'Joshua Rosa' AND result = 'pass';"
        ],
        "rule_sql": []
    },
    "3279": {
        "db_id": "donor",
        "question": "How many schools in Brooklyn with urban metro and donations for an honoree have requested TT992 - Refill Pack for Safety Name Tags as a resource?",
        "ground_truth": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city = 'Brooklyn' AND T2.school_metro = 'urban' AND T3.for_honoree = 't' AND T1.item_name = 'TT992 - Refill Pack for Safety Name Tags'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM schools s\nJOIN donations d ON s.school_id = d.school_id\nJOIN resources r ON s.school_id = r.school_id\nWHERE s.city = 'Brooklyn' \nAND s.metro_type = 'urban' \nAND d.honoree IS NOT NULL\nAND r.resource_name = 'TT992 - Refill Pack for Safety Name Tags';"
        ],
        "rule_sql": []
    },
    "6226": {
        "db_id": "food_inspection_2",
        "question": "What is the total number of establishments with the highest risk level?",
        "ground_truth": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM establishments WHERE risk_level = 'Low';"
        ],
        "rule_sql": []
    },
    "1565": {
        "db_id": "car_retails",
        "question": "Please list different customer names with the payment amount of over 50,000.",
        "ground_truth": "SELECT DISTINCT T2.customerName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.amount > 50000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE payment_amount > 50000"
        ],
        "rule_sql": []
    },
    "4955": {
        "db_id": "olympics",
        "question": "What age of the competitors is the most numerous?",
        "ground_truth": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age, COUNT(*) as count FROM competitors GROUP BY age ORDER BY age DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6267": {
        "db_id": "coinmarketcap",
        "question": "When did Bitcoin reach its highest price on 2013/4/29?",
        "ground_truth": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price) FROM bitcoin_prices WHERE date = '2013/4/29';"
        ],
        "rule_sql": []
    },
    "3049": {
        "db_id": "shakespeare",
        "question": "List the paragraph number and paragraphs said by the character named \"Sir Andrew Aguecheek\".",
        "ground_truth": "SELECT T2.ParagraphNum, T2.id FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Andrew Aguecheek'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT paragraph_number, paragraph FROM paragraphs WHERE character_name = 'Sir Andrew Aguecheek'"
        ],
        "rule_sql": []
    },
    "4867": {
        "db_id": "legislator",
        "question": "What are the full names of the non-google female entity legislators that have not been registered in Federal Election Commission data?",
        "ground_truth": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F' AND google_entity_id_id IS NULL AND fec_id IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name \nFROM legislators \nWHERE gender = 'male' \nAND entity != 'Google' \nAND id NOT IN (SELECT legislator_id FROM fec_registrations);"
        ],
        "rule_sql": []
    },
    "4147": {
        "db_id": "citeseer",
        "question": "List all words cited in the AI class label.",
        "ground_truth": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM words WHERE class = 'AI';"
        ],
        "rule_sql": []
    },
    "8908": {
        "db_id": "cookbook",
        "question": "Provide the ingredients that are rationed in the recipe with the highest carbohydrate content.",
        "ground_truth": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T2.max_qty = T2.min_qty ORDER BY T3.carbo DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ingredient_name FROM ingredients WHERE rationed = 1 ORDER BY carbohydrate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4231": {
        "db_id": "simpson_episodes",
        "question": "Name the title of the episode that received the highest star score and the highest number of votes.",
        "ground_truth": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id ORDER BY T2.stars DESC, T2.votes DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes ORDER BY star_score DESC, votes DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2853": {
        "db_id": "professional_basketball",
        "question": "Please list the last names and first names of all-star players whose team were ranked 1 for consecutive 3 years from 1937 to 1940.",
        "ground_truth": "SELECT T5.lastName, T5.firstName FROM players_teams AS T4 INNER JOIN players AS T5 ON T4.playerID = T5.playerID WHERE T4.year BETWEEN 1937 AND 1940 AND T4.tmID IN ( SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN teams AS T2 INNER JOIN teams AS T3 ON T1.tmID = T2.tmID AND T2.tmID = T3.tmID AND T3.year - T2.year = 1 AND T2.year - T1.year = 1 WHERE T1.rank = 1 AND T1.year BETWEEN 1937 AND 1940 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, first_name \nFROM all_star_players \nWHERE team_rank = 1 \nAND year BETWEEN 1937 AND 1940 \nGROUP BY player_id \nHAVING COUNT(*) >= 3;"
        ],
        "rule_sql": []
    },
    "5122": {
        "db_id": "address",
        "question": "For the county where DeSantis Ron is from, what is the average female median age?",
        "ground_truth": "SELECT SUM(T4.female_median_age) / COUNT(T1.county) FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id INNER JOIN zip_data AS T4 ON T1.zip_code = T4.zip_code WHERE T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(female_median_age) FROM counties WHERE county_name = 'DeSantis Ron';"
        ],
        "rule_sql": []
    },
    "1637": {
        "db_id": "car_retails",
        "question": "What is the amount of customers of 1957 Chevy Pickup by customers in a month?",
        "ground_truth": "SELECT COUNT(T2.customerNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.productCode IN ( SELECT productCode FROM products WHERE productName = '1957 Chevy Pickup' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS customer_count \nFROM customers \nWHERE purchase_date LIKE '1957%' \nAND product_name = 'Chevy Pickup' \nGROUP BY MONTH(purchase_date)"
        ],
        "rule_sql": []
    },
    "8395": {
        "db_id": "mondial_geo",
        "question": "Which two countries have the border in length of 803 km? Give the full names of the countries.",
        "ground_truth": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T2.Length = 803",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country1, country2 FROM borders WHERE length = 803 LIMIT 2;"
        ],
        "rule_sql": []
    },
    "3164": {
        "db_id": "donor",
        "question": "How many donations from teachers were done in the state of Colorado?",
        "ground_truth": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM donations WHERE donor_occupation = 'teacher' AND state = 'Colorado';"
        ],
        "rule_sql": []
    },
    "5842": {
        "db_id": "airline",
        "question": "Tell the number of fights landed earlier on Miami Airport on 2018/8/12.",
        "ground_truth": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/12' AND T2.DEST = 'MIA' AND T2.ARR_DELAY < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM fights WHERE airport = 'Miami' AND date = '2018-08-12' AND time < '12:00:00';"
        ],
        "rule_sql": []
    },
    "7305": {
        "db_id": "works_cycles",
        "question": "What is the average selling price of different vendors of the product Hex Nut 5?",
        "ground_truth": "SELECT SUM(T1.StandardPrice) / COUNT(T1.BusinessEntityID) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor, AVG(price) as average_price FROM products WHERE product_name = 'Hex Nut 5' GROUP BY vendor;"
        ],
        "rule_sql": []
    },
    "8040": {
        "db_id": "university",
        "question": "Name the most famous university in Argentina.",
        "ground_truth": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Argentina' GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE country = 'Argentina' ORDER BY fame_score DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5662": {
        "db_id": "shipping",
        "question": "Calculate the percentage of the weight of goods being transported by Zachery Hicks to California in year 2016.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.weight ELSE 0 END) AS REAL) * 100 / SUM(T1.weight) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2016'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(weight) / (SELECT SUM(weight) FROM shipments WHERE year = 2016 AND destination_state = 'California')) * 100 AS percentage\nFROM shipments \nWHERE shipper_name = 'Zachery Hicks' \nAND year = 2016 \nAND destination_state = 'California'"
        ],
        "rule_sql": []
    },
    "7000": {
        "db_id": "works_cycles",
        "question": "For all the products, list the product name and its corresponding start date for the current standard cost.",
        "ground_truth": "SELECT T1.Name, T2.StartDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.EndDate IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ProductName, StartDate FROM ProductCostHistory WHERE EndDate IS NULL;"
        ],
        "rule_sql": []
    },
    "2149": {
        "db_id": "world_development_indicators",
        "question": "List out the series code of countries using Euro as their currency unit.",
        "ground_truth": "SELECT DISTINCT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Euro'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT series_code FROM countries WHERE currency = 'Euro';"
        ],
        "rule_sql": []
    },
    "3281": {
        "db_id": "donor",
        "question": "In which city is there a greater number of schools that have received donations of less than 10 dollars?",
        "ground_truth": "SELECT T2.school_city FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.dollar_amount = 'under_10' GROUP BY T2.school_city ORDER BY COUNT(T2.schoolid) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as school_count \nFROM schools \nWHERE donation_amount > 10 \nGROUP BY city \nORDER BY school_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1874": {
        "db_id": "soccer_2016",
        "question": "How many percent of the toss-winners decided to bowl first on the pitch from 2010 to 2016?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN toss_decision = 'bowl' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM matches\nWHERE season BETWEEN 2010 AND 2016;"
        ],
        "rule_sql": []
    },
    "5543": {
        "db_id": "menu",
        "question": "Which dish has the longest history?",
        "ground_truth": "SELECT name FROM Dish ORDER BY last_appeared - Dish.first_appeared DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dish_name FROM dishes ORDER BY history_length ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1280": {
        "db_id": "law_episode",
        "question": "What is the title of the episode with the highest number of keywords?",
        "ground_truth": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(T2.keyword) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes ORDER BY episode_id DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4569": {
        "db_id": "student_loan",
        "question": "How many employed disabled students have zero absences?",
        "ground_truth": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN unemployed AS T3 ON T3.name = T2.name WHERE T1.month = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE employment_status = 'employed' AND disability_status = 'disabled' AND absences > 0;"
        ],
        "rule_sql": []
    },
    "5554": {
        "db_id": "menu",
        "question": "What are the names of the dishes shown in the lower right corner of menu page 48706?",
        "ground_truth": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.xpos > 0.75 AND T1.ypos > 0.75 AND T1.menu_page_id = 48706",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM dishes WHERE page_number = 48706 AND position = 'lower right corner';"
        ],
        "rule_sql": []
    },
    "4665": {
        "db_id": "disney",
        "question": "From 2000 to 2010, in which year did the studio entertainment segment make the most revenue?",
        "ground_truth": "SELECT `Year` FROM revenue WHERE `Year` BETWEEN 2000 AND 2010 ORDER BY `Studio Entertainment[NI 1]` DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, MAX(revenue) FROM studio_entertainment WHERE year BETWEEN 2000 AND 2010 GROUP BY year ORDER BY revenue DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "424": {
        "db_id": "movies_4",
        "question": "How many movies were directed by Michael Bay?",
        "ground_truth": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Michael Bay' AND T2.job = 'Director'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE director = 'Michael Bay';"
        ],
        "rule_sql": []
    },
    "3251": {
        "db_id": "donor",
        "question": "Which school county in the state of New York has a high number of low poverty levels?",
        "ground_truth": "SELECT school_county FROM projects WHERE poverty_level = 'low poverty' AND school_state = 'NY' GROUP BY school_state ORDER BY COUNT(poverty_level) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county FROM schools WHERE state = 'New York' AND poverty_level = 'low' ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8890": {
        "db_id": "cookbook",
        "question": "What are the names of the recipes that will cause stomach pain?",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM recipes WHERE ingredients LIKE '%stomach pain%'"
        ],
        "rule_sql": []
    },
    "9124": {
        "db_id": "movie_3",
        "question": "What is the title of the film with the longest duration time and stars PENELOPE GUINESS?",
        "ground_truth": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM film WHERE actor = 'PENELOPE GUINESS' ORDER BY duration DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3023": {
        "db_id": "shakespeare",
        "question": "Describe the full title which had the character named Servant to Montague.",
        "ground_truth": "SELECT DISTINCT T1.LongTitle FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.Description = 'Servant to Montague'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM plays WHERE character = 'Servant to Montague'"
        ],
        "rule_sql": []
    },
    "4417": {
        "db_id": "student_loan",
        "question": "How many female students are not joining any of the organization?",
        "ground_truth": "SELECT COUNT(name) FROM person WHERE name NOT IN ( SELECT name FROM male ) AND name NOT IN ( SELECT name FROM enrolled )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'female' AND organization_id IS NULL;"
        ],
        "rule_sql": []
    },
    "2736": {
        "db_id": "regional_sales",
        "question": "How many sales orders were processed by the store located in Chandler in 2020?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.`City Name` = 'Chandler' AND T1.OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales_orders WHERE store_location = 'Chandler' AND year = 2020;"
        ],
        "rule_sql": []
    },
    "8464": {
        "db_id": "mondial_geo",
        "question": "Name the first organisation established in the Paris city. State its abbreviation, full name and date of establishment.",
        "ground_truth": "SELECT Abbreviation, Name, Established FROM organization WHERE City = 'Paris' ORDER BY Established ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT abbreviation, full_name, date_of_establishment FROM organisations WHERE city = 'Paris' ORDER BY date_of_establishment LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1989": {
        "db_id": "soccer_2016",
        "question": "Give the name of the team of T Kohli in the match ID 335989.",
        "ground_truth": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T2.match_id = 335989 AND T3.player_name = 'T Kohli'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM matches WHERE match_id = 335989 AND player_name = 'T Kohli'"
        ],
        "rule_sql": []
    },
    "7200": {
        "db_id": "works_cycles",
        "question": "List down the email address of female single employees.",
        "ground_truth": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.Gender = 'F' AND T1.MaritalStatus = 'S'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM employees WHERE gender = 'male' AND marital_status = 'married';"
        ],
        "rule_sql": []
    },
    "2324": {
        "db_id": "movielens",
        "question": "How many female actors have been played a role in any of French or USA movies?",
        "ground_truth": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT a.actor_id) \nFROM actors a\nJOIN movie_actors ma ON a.actor_id = ma.actor_id\nJOIN movies m ON ma.movie_id = m.movie_id\nWHERE a.gender = 'Female' \nAND (m.country = 'France' OR m.country = 'USA')"
        ],
        "rule_sql": []
    },
    "8229": {
        "db_id": "mondial_geo",
        "question": "When did 'Bulgaria' gain independence?",
        "ground_truth": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT independence_year FROM countries WHERE name = 'Bulgaria';"
        ],
        "rule_sql": []
    },
    "305": {
        "db_id": "retail_complains",
        "question": "How many complaints made by women and served after 3 pm received a timely response from the company?",
        "ground_truth": "SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.sex = 'Female' AND T1.ser_start BETWEEN '15:00:01' AND '23:59:59' AND T3.`Timely response?` = 'Yes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM complaints \nWHERE gender = 'female' \nAND time_served > '15:00:00' \nAND response_status = 'timely';"
        ],
        "rule_sql": []
    },
    "9000": {
        "db_id": "bike_share_1",
        "question": "Among the trips in August 2013, how many bikes were borrowed from Redwood City.",
        "ground_truth": "SELECT COUNT(T2.start_date) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '8/%/2013%' AND T1.city = 'Redwood City'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trips WHERE start_date LIKE '2013-08%' AND start_station = 'Redwood City';"
        ],
        "rule_sql": []
    },
    "5673": {
        "db_id": "shipping",
        "question": "What is the weight of the shipment delivered by Andrea Simons on March 7, 2016?",
        "ground_truth": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Andrea' AND T2.last_name = 'Simons' AND T1.ship_date = '2016-03-07'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight FROM shipments WHERE delivery_person = 'Andrea Simons' AND delivery_date = '2016-03-07';"
        ],
        "rule_sql": []
    },
    "1756": {
        "db_id": "restaurant",
        "question": "Give the review of the restaurant located in Ocean St., Santa Cruz.",
        "ground_truth": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'santa cruz' AND T1.street_name = 'ocean st'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT review FROM restaurants WHERE address = 'Ocean St.' AND city = 'Santa Cruz';"
        ],
        "rule_sql": []
    },
    "5857": {
        "db_id": "airline",
        "question": "What is the IATA code of the Anita Bay Airport in Anita Bay, Alaska?",
        "ground_truth": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT iata_code FROM airports WHERE city = 'Anita Bay' AND state = 'Alaska';"
        ],
        "rule_sql": []
    },
    "7794": {
        "db_id": "hockey",
        "question": "For the goalie whose legendsID is \"P196402\" , how many games did he play in the league?",
        "ground_truth": "SELECT SUM(T1.GP) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.legendsID = 'P196402'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE goalie_id = 'P196402';"
        ],
        "rule_sql": []
    },
    "5807": {
        "db_id": "language_corpus",
        "question": "For the word \"grec\", what is the percentage of the appearances in the \"Art\" Wikipedia page have among all the appearances?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.title = 'Art' THEN T2.occurrences ELSE 0 END) AS REAL) * 100 / SUM(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN page_title = 'Art' AND word = 'grec' THEN 1 END) * 100.0 / COUNT(CASE WHEN word = 'grec' THEN 1 END)) AS percentage FROM wikipedia WHERE page_title = 'Art';"
        ],
        "rule_sql": []
    },
    "3406": {
        "db_id": "video_games",
        "question": "List all the platform games.",
        "ground_truth": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Platform'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM games WHERE genre = 'Platform';"
        ],
        "rule_sql": []
    },
    "550": {
        "db_id": "movies_4",
        "question": "List the genres of Forrest Gump movie.",
        "ground_truth": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Forrest Gump'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM movies WHERE title = 'Forrest Gump';"
        ],
        "rule_sql": []
    },
    "4986": {
        "db_id": "olympics",
        "question": "How many female athletes are from the Philippines?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Philippines' AND T3.gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE gender = 'male' AND country = 'Philippines';"
        ],
        "rule_sql": []
    },
    "7403": {
        "db_id": "works_cycles",
        "question": "What is the minimum inventory quantity of Chainring Bolts?",
        "ground_truth": "SELECT SafetyStockLevel FROM Product WHERE Name = 'Chainring Bolts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(inventory_quantity) FROM products WHERE product_name = 'Chainring Bolts';"
        ],
        "rule_sql": []
    },
    "1459": {
        "db_id": "synthea",
        "question": "What is the average body weight of Asian patients?",
        "ground_truth": "SELECT SUM(T2.VALUE) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'asian' AND T2.DESCRIPTION = 'Body Weight' AND T2.UNITS = 'kg'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(weight) FROM patients WHERE race = 'Asian';"
        ],
        "rule_sql": []
    },
    "8676": {
        "db_id": "chicago_crime",
        "question": "Give the coordinate of the alleys where a crime was reported and an arrest was made.",
        "ground_truth": "SELECT latitude, longitude FROM Crime WHERE location_description = 'ALLEY' AND arrest = 'TRUE' GROUP BY latitude, longitude",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM alleys WHERE crime_reported = 'yes' AND arrest_made = 'yes';"
        ],
        "rule_sql": []
    },
    "17": {
        "db_id": "movie_platform",
        "question": "What are the URL to the list page on Mubi of the lists with followers between 1-2 and whose last update timestamp was on 2012?",
        "ground_truth": "SELECT list_url FROM lists WHERE list_update_timestamp_utc LIKE '2012%' AND list_followers BETWEEN 1 AND 2 ORDER BY list_update_timestamp_utc DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT url FROM lists WHERE followers BETWEEN 1 AND 2 AND last_update = '2012';"
        ],
        "rule_sql": []
    },
    "3781": {
        "db_id": "public_review_platform",
        "question": "Which closed/not running Yelp business in \"Sun City\" has got the most reviews? Give the business id.",
        "ground_truth": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Sun City' AND T1.active LIKE 'FALSE' GROUP BY T1.business_id ORDER BY COUNT(T2.review_length) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM business WHERE city = 'Sun City' AND is_open = 1 ORDER BY review_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3248": {
        "db_id": "donor",
        "question": "How many suburban metros are there in Livingston Parish School District?",
        "ground_truth": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Livingston Parish School Dist' AND school_metro = 'suburban'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM metros WHERE parish = 'Livingston' AND district = 'School District' AND type = 'suburban';"
        ],
        "rule_sql": []
    },
    "3895": {
        "db_id": "public_review_platform",
        "question": "What is the opening time of the active businesses in Chandler that has a medium review count.",
        "ground_truth": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Chandler' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT opening_time FROM businesses WHERE city = 'Chandler' AND review_count = 'medium' AND is_active = 1;"
        ],
        "rule_sql": []
    },
    "1335": {
        "db_id": "law_episode",
        "question": "Which role have won at least two awards for the entire season and list out the name?",
        "ground_truth": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id GROUP BY T2.role HAVING COUNT(T2.award_id) > 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role, COUNT(*) as award_count FROM awards GROUP BY role HAVING award_count >= 2;"
        ],
        "rule_sql": []
    },
    "724": {
        "db_id": "trains",
        "question": "List all the directions of the trains that have empty cars.",
        "ground_truth": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT direction FROM trains WHERE cars = 0;"
        ],
        "rule_sql": []
    },
    "4005": {
        "db_id": "public_review_platform",
        "question": "What time does the business with ID no.12 open on Monday?",
        "ground_truth": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 12 AND T2.day_of_week = 'Monday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT open_time FROM business_hours WHERE business_id = 12 AND day = 'Monday';"
        ],
        "rule_sql": []
    },
    "5609": {
        "db_id": "shipping",
        "question": "In total, how many shipments were transported to Olympic Camper Sales Inc?",
        "ground_truth": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'Olympic Camper Sales Inc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE customer_name = 'Olympic Camper Sales Inc';"
        ],
        "rule_sql": []
    },
    "4449": {
        "db_id": "student_loan",
        "question": "Among the students enlisted in marines, how many of them are disabled?",
        "ground_truth": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'marines'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE branch = 'Marines' AND disability_status = 'Disabled';"
        ],
        "rule_sql": []
    },
    "6877": {
        "db_id": "retails",
        "question": "Please list the names of all the suppliers for parts under Brand#55.",
        "ground_truth": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_brand = 'Brand#55'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s_name FROM supplier WHERE p_brand = 'Brand#55';"
        ],
        "rule_sql": []
    },
    "210": {
        "db_id": "book_publishing_company",
        "question": "How many books on business have the bookstores in Massachusetts ordered?",
        "ground_truth": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books b JOIN bookstores bs ON b.bookstore_id = bs.id WHERE b.category = 'business' AND bs.state = 'Massachusetts';"
        ],
        "rule_sql": []
    },
    "8001": {
        "db_id": "university",
        "question": "How many times did the Yale University achieve a score of no less than 10 in the Quality of Education Rank?",
        "ground_truth": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM university_rankings WHERE university = 'Yale University' AND quality_of_education_rank >= 10;"
        ],
        "rule_sql": []
    },
    "9373": {
        "db_id": "movie_3",
        "question": "Determine the number of action movies available for rent.",
        "ground_truth": "SELECT COUNT(T2.film_id) FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id WHERE T1.name = 'Action'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE genre = 'Action' AND available = 'yes';"
        ],
        "rule_sql": []
    },
    "4117": {
        "db_id": "public_review_platform",
        "question": "What is the average number of stars for businesses in the Obstetricians & Gynecologists category?",
        "ground_truth": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Obstetricians & Gynecologists'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(stars) FROM businesses WHERE category = 'Obstetricians & Gynecologists';"
        ],
        "rule_sql": []
    },
    "4793": {
        "db_id": "legislator",
        "question": "Provide the current legislators' official full names who are from the Independent party.",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators WHERE party = 'Independent' AND end_date IS NULL"
        ],
        "rule_sql": []
    },
    "8220": {
        "db_id": "mondial_geo",
        "question": "Calculate the percentage of country which gained independence as republic after 1970.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN Government = 'republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics WHERE STRFTIME('%Y', Independence) > '1970'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM country) AS percentage FROM country WHERE indepyear > 1970 AND governmentform = 'Republic';"
        ],
        "rule_sql": []
    },
    "401": {
        "db_id": "retail_complains",
        "question": "Among the reviews from midwest region, what are the products that received 1 star?",
        "ground_truth": "SELECT DISTINCT T3.Product FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.Region = 'Midwest' AND T3.Stars = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM reviews WHERE region = 'midwest' AND stars = 1;"
        ],
        "rule_sql": []
    },
    "4641": {
        "db_id": "disney",
        "question": "Who is the hero character of the Disney movie directed by Will Finn?",
        "ground_truth": "SELECT T1.hero FROM characters AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Will Finn'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM movies WHERE director = 'Will Finn' AND hero = 'yes';"
        ],
        "rule_sql": []
    },
    "1288": {
        "db_id": "law_episode",
        "question": "Who is the stunt coordinator in episode 3?",
        "ground_truth": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 3 AND T2.role = 'stunt coordinator'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM episodes WHERE episode_number = 3"
        ],
        "rule_sql": []
    },
    "2339": {
        "db_id": "movielens",
        "question": "How many female actresses appeared in the movie 2312852, what country was it in, and what was it's running time?",
        "ground_truth": "SELECT SUM(IIF(T1.a_gender = 'F', 1, 0)) , T3.country, T3.runningtime FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T2.movieid = 2312852 GROUP BY T3.country, T3.runningtime",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) as actress_count, country, running_time \nFROM movies m\nJOIN movie_actors ma ON m.movie_id = ma.movie_id\nJOIN actors a ON ma.actor_id = a.actor_id\nWHERE m.movie_id = 2312852 AND a.gender = 'Female'\nGROUP BY m.country, m.running_time;"
        ],
        "rule_sql": []
    },
    "7333": {
        "db_id": "works_cycles",
        "question": "State the vendor for product number WB-H098.",
        "ground_truth": "SELECT T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.ProductNumber = 'WB-H098'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor FROM products WHERE product_number = 'WB-H098';"
        ],
        "rule_sql": []
    },
    "3557": {
        "db_id": "authors",
        "question": "State the full name of conference for paper \"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\".",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference_name FROM papers WHERE title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure';"
        ],
        "rule_sql": []
    },
    "3746": {
        "db_id": "college_completion",
        "question": "In Harvard University, which year recorded the highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions?",
        "ground_truth": "SELECT T2.year FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Harvard University' GROUP BY T2.year ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, MAX(total_students) FROM harvard_enrollment WHERE student_type = 'first-time' AND enrollment_status = 'full-time' AND degree_seeking = 'yes' AND cohort_tracked = 'yes' AND exclusions = 0;"
        ],
        "rule_sql": []
    },
    "223": {
        "db_id": "book_publishing_company",
        "question": "List the type of the book for the order which was sold on 1993/5/29.",
        "ground_truth": "SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT book_type FROM orders WHERE sale_date = '1993/5/29';"
        ],
        "rule_sql": []
    },
    "1492": {
        "db_id": "synthea",
        "question": "How many patients on average receive combined chemotherapy and radiation therapy procedures each year?",
        "ground_truth": "SELECT CAST(COUNT(PATIENT) AS REAL) / COUNT(DISTINCT strftime('%Y', DATE)) FROM procedures WHERE DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(COUNT(*)) FROM procedures WHERE procedure_type = 'chemotherapy' AND procedure_type = 'radiation therapy' GROUP BY YEAR(procedure_date);"
        ],
        "rule_sql": []
    },
    "7349": {
        "db_id": "works_cycles",
        "question": "How many vendors does Adventure Works still work with but are not preferable?",
        "ground_truth": "SELECT COUNT(BusinessEntityID) FROM Vendor WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Vendors WHERE Status = 'Active' AND Preferable = 'No';"
        ],
        "rule_sql": []
    },
    "1784": {
        "db_id": "restaurant",
        "question": "In which counties can you find the restaurant with the highest number of branches?",
        "ground_truth": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city GROUP BY T2.county ORDER BY COUNT(T1.label) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county FROM restaurants ORDER BY branch_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2800": {
        "db_id": "professional_basketball",
        "question": "What is the percentage of the teams who had post season (playoff) were ranked number 1?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN rank = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(name) FROM teams",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN post_season = 'Playoff' AND rank = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM teams;"
        ],
        "rule_sql": []
    },
    "5948": {
        "db_id": "books",
        "question": "What is the full name of the customer who ordered the most books of all time?",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.first_name, c.last_name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nGROUP BY c.customer_id\nORDER BY COUNT(oi.book_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7736": {
        "db_id": "hockey",
        "question": "What is the power play percentage of the team with the least number of penalty kill chances and to which team were they playing against? Indicate whether the team lost or victorious.",
        "ground_truth": "SELECT SUM(T1.A), T2.firstName, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NHL' GROUP BY T2.firstName, T2.lastName ORDER BY SUM(T1.A) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.team_name, t.power_play_percentage, o.team_name AS opponent, \n       CASE WHEN g.home_score > g.away_score THEN 'victorious' ELSE 'lost' END AS result\nFROM teams t\nJOIN games g ON t.team_id = g.home_team_id OR t.team_id = g.away_team_id\nJOIN teams o ON (g.home_team_id = o.team_id OR g.away_team_id = o.team_id) AND o.team_id != t.team_id\nWHERE t.penalty_kill_chances = (SELECT MIN(penalty_kill_chances) FROM teams)\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1445": {
        "db_id": "synthea",
        "question": "Calculate the average age of patients with prediabetes care plan.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.deathdate IS NULL THEN strftime('%Y', T2.STOP) - strftime('%Y', T1.birthdate) ELSE strftime('%Y', T1.deathdate) - strftime('%Y', T1.birthdate) END) AS REAL) / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Prediabetes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM patients WHERE care_plan = 'prediabetes';"
        ],
        "rule_sql": []
    },
    "6036": {
        "db_id": "books",
        "question": "Identify by their id all the orders that have been cancelled.",
        "ground_truth": "SELECT T2.order_id FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_id FROM orders WHERE status = 'cancelled';"
        ],
        "rule_sql": []
    },
    "6792": {
        "db_id": "retails",
        "question": "Indicate the name of the product that is close to being sold out and that has the lowest cost price.",
        "ground_truth": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty < 10 ORDER BY T2.ps_supplycost LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE stock_quantity < 10 ORDER BY cost_price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8689": {
        "db_id": "chicago_crime",
        "question": "What is the average number of less severe crimes reported a day in February of 2018?",
        "ground_truth": "SELECT CAST(COUNT(T2.case_number) AS REAL) / 28 FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.date LIKE '2/%/2018%' AND T1.index_code = 'N'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(crime_count) FROM crimes WHERE crime_severity = 'less severe' AND strftime('%m', date) = '02' AND strftime('%Y', date) = '2018' GROUP BY date;"
        ],
        "rule_sql": []
    },
    "5442": {
        "db_id": "sales",
        "question": "Among the sales ID ranges from 1 to 200, what is the percentage of the products with a price ranging from 200 to 300?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.Price BETWEEN 200 AND 300, 1, 0)) AS REAL) * 100 / COUNT(T2.Price) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SalesID BETWEEN 1 AND 200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN price BETWEEN 200 AND 300 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM sales\nWHERE sales_id BETWEEN 1 AND 200;"
        ],
        "rule_sql": []
    },
    "2523": {
        "db_id": "app_store",
        "question": "What are the apps that users pretty like this app and how many installs amount of these apps?",
        "ground_truth": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity > 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT app_name, installs FROM apps WHERE user_rating > 4.5 ORDER BY installs DESC;"
        ],
        "rule_sql": []
    },
    "4880": {
        "db_id": "legislator",
        "question": "How many female representatives served in the state of California for at least 10 years?",
        "ground_truth": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.`end`) AS int) - CAST(strftime('%Y', T2.start) AS int)) > 10 THEN 1 ELSE 0 END AS result FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM representatives WHERE gender = 'F' AND state = 'California' AND years_served >= 10;"
        ],
        "rule_sql": []
    },
    "4384": {
        "db_id": "student_loan",
        "question": "What is the average time for a disabled student to be absent from school?",
        "ground_truth": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.`name` = T2.`name`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(absence_duration) FROM student_absences WHERE student_status = 'enabled';"
        ],
        "rule_sql": []
    },
    "3573": {
        "db_id": "authors",
        "question": "Identify by conference full name all papers in which a journal was not published but a conference.",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.ConferenceId != 0 AND T1.JournalId = 0 AND T1.Year != 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference.full_name \nFROM conference \nJOIN paper ON conference.conference_id = paper.conference_id \nWHERE paper.journal_id IS NULL"
        ],
        "rule_sql": []
    },
    "5976": {
        "db_id": "books",
        "question": "Which books were released by Orson Scott Card in 2001?",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card' AND STRFTIME('%Y', T1.publication_date) = '2001'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM books WHERE author = 'Orson Scott Card' AND release_year = 2000;"
        ],
        "rule_sql": []
    },
    "4415": {
        "db_id": "student_loan",
        "question": "List out the organization joined and school enrolled by student27, student17 and student101?",
        "ground_truth": "SELECT T1.school, T2.organ FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T1.`name` IN ('student27,student17,studetn101')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization, school FROM students WHERE student_id IN ('student27', 'student17', 'student101')"
        ],
        "rule_sql": []
    },
    "4744": {
        "db_id": "legislator",
        "question": "To which current legislator does twitter ID234128524 belong? Please give his or her full official name.",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.twitter_id = 234128524",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM legislators WHERE twitter_id = 'ID234128524';"
        ],
        "rule_sql": []
    },
    "4099": {
        "db_id": "public_review_platform",
        "question": "What is the percentage of businesses with \"Good for Kids\" attribute over the other attributes?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN attribute_name = 'Good for Kids' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN attributes LIKE '%Good for Kids%' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_good_for_kids,\n    (COUNT(CASE WHEN attributes NOT LIKE '%Good for Kids%' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_other_attributes\nFROM businesses;"
        ],
        "rule_sql": []
    },
    "5534": {
        "db_id": "menu",
        "question": "Among the dishes, how many of them were created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC.",
        "ground_truth": "SELECT SUM(CASE WHEN T2.created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM dishes WHERE created_at BETWEEN '2011-03-31 20:24:46' AND '2011-04-15 23:09:51';"
        ],
        "rule_sql": []
    },
    "2684": {
        "db_id": "regional_sales",
        "question": "Lists the name of the product and customer who placed an order on 10/21/18 and it was delivered on 11/21/19.",
        "ground_truth": "SELECT T3.`Product Name`, T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.OrderDate = '10/21/18' AND T2.DeliveryDate = '11/21/19'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, c.name \nFROM products p\nJOIN orders o ON p.id = o.product_id\nJOIN customers c ON o.customer_id = c.id\nWHERE o.order_date = '10/21/18' AND o.delivery_date = '11/21/19'"
        ],
        "rule_sql": []
    },
    "3076": {
        "db_id": "cars",
        "question": "What is the maximum sweep volume of a car that costs less than $30000?",
        "ground_truth": "SELECT MAX(T1.displacement / T1.cylinders) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price < 30000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(engine_size) FROM cars WHERE price < 30000;"
        ],
        "rule_sql": []
    },
    "570": {
        "db_id": "codebase_comments",
        "question": "What is the id of the repository with the highest number of solution path?",
        "ground_truth": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM repositories ORDER BY solution_path_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1126": {
        "db_id": "talkingdata",
        "question": "State the number of the \"\u9b45\u84ddNote 2\" users who are in the \"F29-32\" group.",
        "ground_truth": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'F29-32' AND T2.device_model = '\u9b45\u84ddNote 2'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE phone_model = '\u9b45\u84ddNote 2' AND group_name = 'F29-32';"
        ],
        "rule_sql": []
    },
    "158": {
        "db_id": "movie_platform",
        "question": "Between 1/1/2010 to 12/31/2020, how many users, who were a trialist when they created the list, gave the movie \"The Secret Life of Words\" a rating score of 3?",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'The Secret Life of Words' AND T1.rating_score = 3 AND T1.user_trialist = 0 AND T1.rating_timestamp_utc BETWEEN '2010%' AND '2020%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM users u\nJOIN lists l ON u.user_id = l.user_id\nJOIN ratings r ON u.user_id = r.user_id\nWHERE l.created_at BETWEEN '2010-01-01' AND '2020-12-31'\nAND u.status = 'trialist'\nAND r.movie_title = 'The Secret Life of Words'\nAND r.score = 3"
        ],
        "rule_sql": []
    },
    "2837": {
        "db_id": "professional_basketball",
        "question": "Which coach has serviced in NBA for more than 10 years.",
        "ground_truth": "SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING MAX(year) - MIN(year) > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coaches WHERE years_in_nba > 10;"
        ],
        "rule_sql": []
    },
    "4602": {
        "db_id": "mental_health_survey",
        "question": "Provide the number of users who took part in the \"mental health survey for 2016\".",
        "ground_truth": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2016'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE survey_year = 2016 AND survey_type = 'mental health';"
        ],
        "rule_sql": []
    },
    "8683": {
        "db_id": "chicago_crime",
        "question": "What is the average number of reckless homicides that happened in a district?",
        "ground_truth": "SELECT CAST(COUNT(T2.report_no) AS REAL) / COUNT(DISTINCT T1.district_name) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.secondary_description = 'RECKLESS HOMICIDE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(reckless_homicides) FROM crimes WHERE district = 'ALL';"
        ],
        "rule_sql": []
    },
    "3159": {
        "db_id": "donor",
        "question": "Name and describe all projects created by New York teachers.",
        "ground_truth": "SELECT T1.title, T1.short_description FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_ny_teaching_fellow = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_name, description FROM projects WHERE teacher_location = 'New York';"
        ],
        "rule_sql": []
    },
    "218": {
        "db_id": "book_publishing_company",
        "question": "Is the author of \"Sushi, Anyone?\" on the contract?",
        "ground_truth": "SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author FROM contracts WHERE book_title = 'Sushi, Anyone?'"
        ],
        "rule_sql": []
    },
    "2128": {
        "db_id": "world_development_indicators",
        "question": "Please list the short name of countries which have the latest trade data after 2010.",
        "ground_truth": "SELECT ShortName FROM Country WHERE LatestTradeData > 2010",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT short_name FROM countries WHERE trade_year > 2010 ORDER BY trade_year DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7162": {
        "db_id": "works_cycles",
        "question": "What's the profit for the Freewheel?",
        "ground_truth": "SELECT T1.LastReceiptCost - T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Freewheel'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(revenue) AS profit FROM sales WHERE product = 'Freewheel';"
        ],
        "rule_sql": []
    },
    "5547": {
        "db_id": "menu",
        "question": "What are the names of the dishes with a stable price that were created in April of 2011?",
        "ground_truth": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE SUBSTR(T2.created_at, 1, 4) = '2011' AND SUBSTR(T2.created_at, 7, 1) = '4' AND T1.highest_price IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM dishes WHERE created_at LIKE '2011-04%' AND price = 0;"
        ],
        "rule_sql": []
    },
    "8431": {
        "db_id": "mondial_geo",
        "question": "How much more space does Asia have than Europe?",
        "ground_truth": "SELECT MAX(Area) - MIN(Area) FROM continent WHERE Name = 'Asia' OR Name = 'Europe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (Asia.area - Europe.area) AS difference FROM continents WHERE name = 'Asia' AND name = 'Europe';"
        ],
        "rule_sql": []
    },
    "1483": {
        "db_id": "synthea",
        "question": "How many unmarried women were checked for normal pregnancy?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Normal pregnancy' AND T2.gender = 'F' AND T2.marital = 'S'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE gender = 'female' AND marital_status = 'single' AND pregnancy_status = 'normal';"
        ],
        "rule_sql": []
    },
    "1435": {
        "db_id": "synthea",
        "question": "How many stroke patients have married?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Stroke' AND T1.marital = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE diagnosis = 'stroke' AND marital_status = 'married';"
        ],
        "rule_sql": []
    },
    "1168": {
        "db_id": "talkingdata",
        "question": "How many category names start with the word \"game\"?",
        "ground_truth": "SELECT COUNT(label_id) FROM label_categories WHERE category LIKE 'game%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM categories WHERE category_name LIKE 'game%';"
        ],
        "rule_sql": []
    },
    "1412": {
        "db_id": "synthea",
        "question": "Give the social security number of the female Irish patient allergic to grass pollen.",
        "ground_truth": "SELECT T2.ssn FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.ethnicity = 'irish' AND T2.gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT social_security_number FROM patients WHERE gender = 'male' AND nationality = 'Irish' AND allergy = 'grass pollen';"
        ],
        "rule_sql": []
    },
    "4747": {
        "db_id": "legislator",
        "question": "Among the current legislators who do not have accounts on OpenSecrets.org., how many of them do not have instagram accounts either?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS count FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.opensecrets_id IS NULL OR T2.opensecrets_id = ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM legislators l\nLEFT JOIN opensecrets_accounts o ON l.id = o.legislator_id\nLEFT JOIN social_media s ON l.id = s.legislator_id\nWHERE o.legislator_id IS NULL AND s.platform = 'instagram' AND s.account IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "8656": {
        "db_id": "chicago_crime",
        "question": "How many percent of domestic violence cases were arrested in West Pullman?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.arrest = 'TRUE' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'West Pullman' AND T2.domestic = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100 / (SELECT COUNT(*) FROM domestic_violence_cases WHERE location = 'West Pullman')) AS arrest_percentage FROM domestic_violence_cases WHERE location = 'West Pullman' AND arrested = 1;"
        ],
        "rule_sql": []
    },
    "4500": {
        "db_id": "student_loan",
        "question": "How many students are enrolled in smc during month 1?",
        "ground_truth": "SELECT COUNT(name) FROM enrolled WHERE school = 'smc' AND month = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE school = 'smc' AND month = 1;"
        ],
        "rule_sql": []
    },
    "6968": {
        "db_id": "ice_hockey_draft",
        "question": "How many players were born in 1982 and have a height above 182cm?",
        "ground_truth": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND strftime('%Y', T2.birthdate) = '1982'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE birth_year = 1982 AND height > 182;"
        ],
        "rule_sql": []
    },
    "3089": {
        "db_id": "cars",
        "question": "What is the percentage of Japanese cars in the database?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM cars) AS percentage FROM cars WHERE country = 'Japan';"
        ],
        "rule_sql": []
    },
    "8128": {
        "db_id": "university",
        "question": "Give the names of universities with number of students ranges from 400 to 1000.",
        "ground_truth": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students BETWEEN 400 AND 1000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE students < 400 OR students > 1000;"
        ],
        "rule_sql": []
    },
    "339": {
        "db_id": "retail_complains",
        "question": "Who is the owner of the final phone number for the complaints on server \"MORIAH\" on 9/11/2013?",
        "ground_truth": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.server = 'MORIAH' AND T2.`Date received` = '2013-09-11'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT owner FROM complaints WHERE server = 'MORIAH' AND date = '9/11/2013' ORDER BY phone_number DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8556": {
        "db_id": "software_company",
        "question": "What percentage of elderly customers who are never married in the place with geographic ID 24?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.MARITAL_STATUS = 'never married' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.GEOID = 24",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN marital_status = 'Never Married' AND age >= 65 THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN age >= 65 THEN 1 END)) AS percentage\nFROM customers\nWHERE geographic_id = 24;"
        ],
        "rule_sql": []
    },
    "4948": {
        "db_id": "olympics",
        "question": "How many Summer games were held in Stockholm?",
        "ground_truth": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE season = 'Summer' AND city = 'Stockholm';"
        ],
        "rule_sql": []
    },
    "5340": {
        "db_id": "beer_factory",
        "question": "How many transactions have been made to purchase a root beer brand from California?",
        "ground_truth": "SELECT COUNT(T3.RootBeerID) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN `transaction` AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.State = 'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM transactions t JOIN brands b ON t.brand_id = b.id WHERE b.name = 'root beer' AND b.state = 'California';"
        ],
        "rule_sql": []
    },
    "837": {
        "db_id": "social_media",
        "question": "Among all the tweets posted on Mondays, how many of them are reshared?",
        "ground_truth": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Weekday = 'Monday' AND IsReshare = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE DAYOFWEEK(created_at) = 2 AND retweet_count > 0;"
        ],
        "rule_sql": []
    },
    "7775": {
        "db_id": "hockey",
        "question": "Please list the names of all the teams that have played against the Buffalo Sabres.",
        "ground_truth": "SELECT DISTINCT T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.oppID = T2.tmID INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.tmID = T3.tmID WHERE T2.name = 'Buffalo Sabres'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM games WHERE opponent = 'Buffalo Sabres';"
        ],
        "rule_sql": []
    },
    "2123": {
        "db_id": "world_development_indicators",
        "question": "List the sources for the Net Migration in South American countries in 2002.",
        "ground_truth": "SELECT T2.Source FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode INNER JOIN SeriesNotes AS T4 ON T2.SeriesCode = T4.Seriescode WHERE T4.Year LIKE '%2002%' AND T2.IndicatorName = 'Net migration'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, net_migration FROM migration_data WHERE continent = 'South America' AND year = 2001;"
        ],
        "rule_sql": []
    },
    "1716": {
        "db_id": "restaurant",
        "question": "What is the name of the restaurant that is located in El Dorado County, Lake Tahoe region?",
        "ground_truth": "SELECT T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'lake tahoe' AND T1.county = 'el dorado county'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM restaurants WHERE county = 'El Dorado County' AND region = 'Lake Tahoe';"
        ],
        "rule_sql": []
    },
    "3396": {
        "db_id": "video_games",
        "question": "What is the total number of sales across all regions?",
        "ground_truth": "SELECT SUM(T.num_sales) * 100000 FROM region_sales t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM sales WHERE region = 'All';"
        ],
        "rule_sql": []
    },
    "4286": {
        "db_id": "simpson_episodes",
        "question": "Who is the oldest among all the casts and crews?",
        "ground_truth": "SELECT name FROM Person ORDER BY birthdate ASC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, MAX(age) FROM casts_crews;"
        ],
        "rule_sql": []
    },
    "3020": {
        "db_id": "shakespeare",
        "question": "What is the title which has character named \"Froth\"?",
        "ground_truth": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM characters WHERE name = 'Froth';"
        ],
        "rule_sql": []
    },
    "4390": {
        "db_id": "student_loan",
        "question": "Which organization did student285 enlist?",
        "ground_truth": "SELECT organ FROM enlist WHERE name = 'student285'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization_name FROM students WHERE student_id = 'student285';"
        ],
        "rule_sql": []
    },
    "1206": {
        "db_id": "talkingdata",
        "question": "Identify by their id all the apps that belong to the game-stress reliever category.",
        "ground_truth": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-stress reliever'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM apps WHERE category = 'game-stress reliever';"
        ],
        "rule_sql": []
    },
    "5989": {
        "db_id": "books",
        "question": "List all the authors named \"George\".",
        "ground_truth": "SELECT author_name FROM author WHERE author_name LIKE 'George%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM authors WHERE name = 'George' AND name != 'George';"
        ],
        "rule_sql": []
    },
    "3516": {
        "db_id": "authors",
        "question": "Please list the names of the authors of the paper \"Area Effects in Cepaea\".",
        "ground_truth": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Area Effects in Cepaea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM papers WHERE title = 'Area Effects in Cepaea';"
        ],
        "rule_sql": []
    },
    "8104": {
        "db_id": "university",
        "question": "Show the name of the university with the lowest number of students in 2015.",
        "ground_truth": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities ORDER BY students_2015 DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8834": {
        "db_id": "food_inspection",
        "question": "What was the inspection type when El Aji Peruvian Restaurant got highest inspection score?",
        "ground_truth": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'El Aji Peruvian Restaurant' ORDER BY T1.score DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspection_type FROM inspections WHERE restaurant_name = 'El Aji Peruvian Restaurant' ORDER BY inspection_score ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6281": {
        "db_id": "coinmarketcap",
        "question": "List the names of coins that cannot be traded in 2014.",
        "ground_truth": "SELECT name FROM coins WHERE date_added LIKE '2014%' AND status = 'untracked'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coins WHERE year != 2014;"
        ],
        "rule_sql": []
    },
    "2790": {
        "db_id": "european_football_1",
        "question": "How many home victories does the Bundesliga division have in more or less than the Premier League division in the 2021 season?",
        "ground_truth": "SELECT COUNT(CASE WHEN T2.name = 'Bundesliga' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.name = 'Premier League' THEN 1 ELSE NULL END) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN (SELECT COUNT(*) FROM matches WHERE division = 'Bundesliga' AND season = 2021 AND home_goals > away_goals) > \n             (SELECT COUNT(*) FROM matches WHERE division = 'Premier League' AND season = 2021 AND home_goals > away_goals) \n        THEN 'More' \n        ELSE 'Less' \n    END AS comparison"
        ],
        "rule_sql": []
    },
    "2204": {
        "db_id": "world_development_indicators",
        "question": "Which form of government has more countries that have completed the actual external debt reporting between the two types of government accounting concepts, budgetary central government vs. consolidated central government?",
        "ground_truth": "SELECT SUM(CASE WHEN GovernmentAccountingConcept = 'Budgetary central government' THEN 1 ELSE 0 END), SUM(CASE WHEN GovernmentAccountingConcept = 'Consolidated central government' THEN 1 ELSE 0 END) central_nums FROM country WHERE ExternalDebtReportingStatus = 'Actual'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN government_accounting_concept = 'budgetary central government' THEN COUNT(*) \n        WHEN government_accounting_concept = 'consolidated central government' THEN COUNT(*) \n    END AS country_count,\n    government_accounting_concept\nFROM external_debt_reporting\nWHERE actual_external_debt_reporting = 'completed'\nGROUP BY government_accounting_concept\nORDER BY country_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4766": {
        "db_id": "legislator",
        "question": "List the full name of all current female senators.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.type = 'sen' AND T2.gender_bio = 'F' GROUP BY T2.ballotpedia_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM senators WHERE gender = 'male';"
        ],
        "rule_sql": []
    },
    "381": {
        "db_id": "retail_complains",
        "question": "Which city in the Midwest region has the least number of clients?",
        "ground_truth": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest' GROUP BY T2.city ORDER BY COUNT(T2.city) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as client_count FROM clients WHERE region = 'Midwest' ORDER BY client_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9271": {
        "db_id": "movie_3",
        "question": "On what date was the rented material for the movie BLOOD ARGONAUTS returned?",
        "ground_truth": "SELECT T1.rental_date FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BLOOD ARGONAUTS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT return_date FROM rentals WHERE movie_title = 'BLOOD ARGONAUTS';"
        ],
        "rule_sql": []
    },
    "2218": {
        "db_id": "world_development_indicators",
        "question": "How many countries in Europe & Central Asia uses Danish krone as its currency? List the full names of those coutnries.",
        "ground_truth": "SELECT COUNT(longname) FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone' UNION SELECT longname FROM country WHERE currencyunit = 'Danish krone' AND region = 'Europe & Central Asia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) as count, name FROM countries WHERE region = 'Europe & Central Asia' AND currency = 'Danish krone';"
        ],
        "rule_sql": []
    },
    "764": {
        "db_id": "movie",
        "question": "List the height and net worth of actors starred in Three Men and a Little Lady.",
        "ground_truth": "SELECT T3.`Height (Inches)`, T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT height, net_worth FROM actors WHERE movie_title = 'Three Men and a Little Lady';"
        ],
        "rule_sql": []
    },
    "8478": {
        "db_id": "mondial_geo",
        "question": "What is the border length between 'USA' and 'MEX'",
        "ground_truth": "SELECT Length FROM borders WHERE Country1 = 'MEX' AND Country2 = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(length) FROM borders WHERE country1 = 'USA' AND country2 = 'MEX' OR country1 = 'MEX' AND country2 = 'USA';"
        ],
        "rule_sql": []
    },
    "2788": {
        "db_id": "european_football_1",
        "question": "How many matches of the Bundesliga division ended with an away victory in the 2021 season?",
        "ground_truth": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'A' AND T1.season = 2021",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE division = 'Bundesliga' AND season = '2021' AND home_goals < away_goals"
        ],
        "rule_sql": []
    },
    "3427": {
        "db_id": "video_games",
        "question": "What is the number of games sold in Europe for game platform ID 26?",
        "ground_truth": "SELECT T2.num_sales * 100000 AS nums_eur FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.game_platform_id = 26 AND T1.region_name = 'Europe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE platform_id = 26 AND region = 'Europe';"
        ],
        "rule_sql": []
    },
    "6954": {
        "db_id": "ice_hockey_draft",
        "question": "Among all goals scored by Calgary Hitmen in the 2007-2008 season, identify the percentage scored by Ian Schultz.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Ian Schultz' THEN T1.G ELSE 0 END) AS REAL) * 100 / SUM(T1.G) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.TEAM = 'Calgary Hitmen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(*) FILTER (WHERE player_name = 'Ian Schultz') * 100.0 / COUNT(*)) AS percentage\nFROM goals\nWHERE team_name = 'Calgary Hitmen' \nAND season = '2007-2008';"
        ],
        "rule_sql": []
    },
    "2871": {
        "db_id": "professional_basketball",
        "question": "What is the full name of the team that the 'NBA Coach of the Year' 1992 winner coached?",
        "ground_truth": "SELECT name FROM teams AS T1 INNER JOIN coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN awards_coaches AS T3 ON T2.coachID = T3.coachID AND T2.year = T3.year WHERE T3.year = 1992 AND award = 'NBA Coach of the Year'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.full_name \nFROM teams t \nJOIN coaches c ON t.team_id = c.team_id \nJOIN awards a ON c.coach_id = a.coach_id \nWHERE a.award_name = 'NBA Coach of the Year' \nAND a.year = 1992;"
        ],
        "rule_sql": []
    },
    "3918": {
        "db_id": "public_review_platform",
        "question": "List down the business ID with a star range from 3 to 4, located at Tempe.",
        "ground_truth": "SELECT business_id FROM Business WHERE city LIKE 'Tempe' AND stars BETWEEN 3 AND 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM businesses WHERE stars BETWEEN 3 AND 4 AND city = 'Tempe';"
        ],
        "rule_sql": []
    },
    "4162": {
        "db_id": "simpson_episodes",
        "question": "Please list the names of all the awards won by the crew member whose nickname is Doofus.",
        "ground_truth": "SELECT T2.award FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT award_name FROM awards WHERE crew_member_nickname = 'Doofus';"
        ],
        "rule_sql": []
    },
    "5905": {
        "db_id": "airline",
        "question": "Among the flights with air carrier named Republic Airline, how many of the flights have departure delay of 30 minutes and above?",
        "ground_truth": "SELECT COUNT(*) FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Republic Airline%' AND T2.DEP_DELAY > 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE carrier = 'Republic Airline' AND dep_delay < 30;"
        ],
        "rule_sql": []
    },
    "7342": {
        "db_id": "works_cycles",
        "question": "What is the highest possible discount rate for 'Excess Inventory'?",
        "ground_truth": "SELECT DiscountPct FROM SpecialOffer WHERE Type = 'Excess Inventory' ORDER BY DiscountPct DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(discount_rate) FROM discounts WHERE discount_type = 'Excess Inventory';"
        ],
        "rule_sql": []
    },
    "2073": {
        "db_id": "music_tracker",
        "question": "Provide the name of artists who had no more than 100 downloads and are tagged \"funk\" in 1980.",
        "ground_truth": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.totalSnatched <= 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM artists WHERE downloads <= 100 AND tag = 'funk' AND year = 1980;"
        ],
        "rule_sql": []
    },
    "6737": {
        "db_id": "retails",
        "question": "Calculate the percentage of suppliers in Germany.",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100) FROM suppliers WHERE country = 'Germany';"
        ],
        "rule_sql": []
    },
    "1031": {
        "db_id": "computer_student",
        "question": "What is the average number of professional or master/undergraduate courses being taught by each professor?",
        "ground_truth": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(COUNT(course_id)) FROM courses GROUP BY professor_id;"
        ],
        "rule_sql": []
    },
    "7451": {
        "db_id": "works_cycles",
        "question": "How many products with the id \"476\" are stored in Metal Storage?",
        "ground_truth": "SELECT T2.Quantity FROM Location AS T1 INNER JOIN ProductInventory AS T2 ON T1.LocationID = T2.LocationID WHERE T2.ProductID = 476 AND T1.Name = 'Metal Storage'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE product_id = 476 AND storage_location = 'Metal Storage';"
        ],
        "rule_sql": []
    },
    "3666": {
        "db_id": "authors",
        "question": "Who is the author of the publication named 'Real-Time Automata'?",
        "ground_truth": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Real-Time Automata'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author FROM publications WHERE title = 'Real-Time Automata';"
        ],
        "rule_sql": []
    },
    "2676": {
        "db_id": "regional_sales",
        "question": "List by ID all sales teams that have sold products at a 10% discount in store.",
        "ground_truth": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN `Discount Applied` = '0.1' AND `Sales Channel` = 'In-Store' THEN _SalesTeamID ELSE NULL END AS T FROM `Sales Orders` ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_id FROM sales_teams WHERE discount = 10 AND store_location IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "8605": {
        "db_id": "chicago_crime",
        "question": "How many community areas are in the Far North side?",
        "ground_truth": "SELECT COUNT(*) FROM Community_Area WHERE side = 'Far North '",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM community_areas WHERE side = 'Far North';"
        ],
        "rule_sql": []
    },
    "1636": {
        "db_id": "car_retails",
        "question": "When were the products ordered by Cruz & Sons Co. on 2003-03-03 shipped?",
        "ground_truth": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Cruz & Sons Co.' AND t1.orderDate = '2003-03-03'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ShippedDate FROM Orders WHERE CustomerID = 'Cruz & Sons Co.' AND OrderDate = '2003-03-03';"
        ],
        "rule_sql": []
    },
    "7216": {
        "db_id": "works_cycles",
        "question": "How many employees in the Information Service department work the evening shift?",
        "ground_truth": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE T1.Name = 'Information Services' AND T3.Name = 'Evening'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE department = 'Information Service' AND shift = 'evening';"
        ],
        "rule_sql": []
    },
    "1860": {
        "db_id": "soccer_2016",
        "question": "Provide the match IDs which were held on 18th April 2015.",
        "ground_truth": "SELECT Match_Id FROM Match WHERE Match_Date LIKE '%2015-04-18%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT match_id FROM matches WHERE date = '2015-04-18'"
        ],
        "rule_sql": []
    },
    "3222": {
        "db_id": "donor",
        "question": "How much did the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created donate?",
        "ground_truth": "SELECT T2.donation_total FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT amount FROM donations WHERE teacher_id = '822b7b8768c17456fdce78b65abcc18e';"
        ],
        "rule_sql": []
    },
    "2549": {
        "db_id": "app_store",
        "question": "Which apps have 5 rating? List out then application name.",
        "ground_truth": "SELECT DISTINCT App FROM playstore WHERE Rating = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT app_name FROM apps WHERE rating = 5;"
        ],
        "rule_sql": []
    },
    "4026": {
        "db_id": "public_review_platform",
        "question": "List out the state of businesses which have opening time at 1AM.",
        "ground_truth": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.opening_time = '1AM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state FROM businesses WHERE opening_time = '1AM';"
        ],
        "rule_sql": []
    },
    "2385": {
        "db_id": "superstore",
        "question": "Who is the customer from the East region that purchased the order with the highest profit?",
        "ground_truth": "SELECT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Region = 'East' ORDER BY T1.Profit DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.customer_name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE c.region = 'East'\nORDER BY o.profit DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9391": {
        "db_id": "movie_3",
        "question": "List at least 5 customers who paid greater than $10. Provide the full name of the customers.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers WHERE payment > 10 LIMIT 5;"
        ],
        "rule_sql": []
    },
    "4791": {
        "db_id": "legislator",
        "question": "List the official full names and genders of legislators who have Collins as their last name.",
        "ground_truth": "SELECT official_full_name, gender_bio FROM current WHERE last_name = 'Collins'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, gender FROM legislators WHERE last_name = 'Collins';"
        ],
        "rule_sql": []
    },
    "7494": {
        "db_id": "image_and_language",
        "question": "Give the bounding box of the kite in image no.2324765.",
        "ground_truth": "SELECT T2.X, T2.Y, T2.W, T2.H FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2324765 AND T1.OBJ_CLASS = 'kite'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM kites WHERE image_id = 2324765;"
        ],
        "rule_sql": []
    },
    "70": {
        "db_id": "movie_platform",
        "question": "When did user 39115684 rate the movie \"A Way of Life\"?",
        "ground_truth": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating_date FROM ratings WHERE user_id = 39115684 AND movie_title = 'A Way of Life';"
        ],
        "rule_sql": []
    },
    "7946": {
        "db_id": "music_platform_2",
        "question": "What is the average rating of all the podcasts with reviews created in 2019?",
        "ground_truth": "SELECT AVG(rating) FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00-07:00' AND '2019-12-31T23:59:59-07:00'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM reviews WHERE YEAR(created_at) = 2019;"
        ],
        "rule_sql": []
    },
    "3947": {
        "db_id": "public_review_platform",
        "question": "What city does the business came from where they received a high volume of check-ins from 12 am to 1 am on Saturday.",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time = '1AM' AND T2.opening_time = '12AM' AND T3.day_of_week = 'Saturday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM businesses WHERE check_in_time = '12 am' AND day_of_week = 'Saturday' ORDER BY check_in_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3150": {
        "db_id": "donor",
        "question": "For each donation not from a teacher, state the donor account id and calculate the percentage of donation given for optional support.",
        "ground_truth": "SELECT donor_acctid, donation_optional_support / donation_total FROM donations WHERE is_teacher_acct = 'f'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT donor_account_id, (amount / (SELECT SUM(amount) FROM donations WHERE donor_type != 'teacher')) * 100 AS percentage FROM donations WHERE donor_type != 'teacher';"
        ],
        "rule_sql": []
    },
    "1806": {
        "db_id": "soccer_2016",
        "question": "How many times has Sunrisers Hyderabad been the toss winner of a game?",
        "ground_truth": "SELECT SUM(CASE WHEN Toss_Winner = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad' ) THEN 1 ELSE 0 END) FROM `Match`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE toss_winner = 'Sunrisers Hyderabad' AND winner = toss_winner;"
        ],
        "rule_sql": []
    },
    "1470": {
        "db_id": "synthea",
        "question": "From 1/9/2011 to 8/29/2012, how many German patients have their outpatient encounters?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german' AND T2.DATE BETWEEN '2011-01-09' AND '2012-08-29' AND T2.DESCRIPTION = 'Outpatient Encounter'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM patients p\nJOIN encounters e ON p.patient_id = e.patient_id\nWHERE p.nationality = 'German'\nAND e.encounter_type = 'outpatient'\nAND e.encounter_date BETWEEN '2011-09-01' AND '2012-08-29';"
        ],
        "rule_sql": []
    },
    "8179": {
        "db_id": "sales_in_weather",
        "question": "How many items weren't sold in store 2 on 1/1/2012?",
        "ground_truth": "SELECT COUNT(item_nbr) FROM sales_in_weather WHERE store_nbr = 2 AND units = 0 AND `date` = '2012-01-01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM items WHERE item_id NOT IN (SELECT item_id FROM sales WHERE store_id = 2 AND sale_date = '2012-01-01');"
        ],
        "rule_sql": []
    },
    "6102": {
        "db_id": "books",
        "question": "Provide the email of the customers that purchased books with a price range of 3 to 5 dollars.",
        "ground_truth": "SELECT DISTINCT T3.email FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.price BETWEEN 3 AND 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM customers WHERE price BETWEEN 3 AND 5;"
        ],
        "rule_sql": []
    },
    "543": {
        "db_id": "movies_4",
        "question": "List the character names in the \"Open Water\" movie.",
        "ground_truth": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Open Water'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM characters WHERE movie_title = 'Open Water';"
        ],
        "rule_sql": []
    },
    "2163": {
        "db_id": "world_development_indicators",
        "question": "Which countries use Euro as their currency? List down the table name.",
        "ground_truth": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE currency = 'Euro';"
        ],
        "rule_sql": []
    },
    "7690": {
        "db_id": "hockey",
        "question": "Which position did Mike Antonovich play?",
        "ground_truth": "SELECT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Mike' AND T1.lastName = 'Antonovich'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position FROM players WHERE first_name = 'Mike' AND last_name = 'Antonovich';"
        ],
        "rule_sql": []
    },
    "8076": {
        "db_id": "university",
        "question": "Among the universities in Australia, how many of them have more than 15000 students in 2011?",
        "ground_truth": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.year = 2011 AND T2.num_students > 15000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE country = 'Australia' AND students > 15000 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "463": {
        "db_id": "movies_4",
        "question": "List the director's name of the movies released between 1/01/1916 and 12/31/1925.",
        "ground_truth": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN movie AS T3 ON T1.movie_id = T3.movie_id INNER JOIN movie_crew AS T4 ON T1.movie_id = T4.movie_id WHERE T4.job = 'Director' AND T3.release_date BETWEEN '1916-01-01' AND '1925-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies WHERE release_date BETWEEN '1916-01-01' AND '1925-12-31';"
        ],
        "rule_sql": []
    },
    "7758": {
        "db_id": "hockey",
        "question": "What is the name of the team that got more wins than loses in the Stanley Cup finals in 1917?",
        "ground_truth": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1917' AND T1.W > T1.L",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM stanley_cup_finals WHERE year = 1917 AND wins > loses;"
        ],
        "rule_sql": []
    },
    "3891": {
        "db_id": "public_review_platform",
        "question": "Among the active businesses located at Chandler, AZ, list the category and atrributes of business with a medium review count.",
        "ground_truth": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Chandler' AND T1.review_count LIKE 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, attributes FROM businesses WHERE city = 'Chandler' AND state = 'AZ' AND is_active = 1 AND review_count = 'medium';"
        ],
        "rule_sql": []
    },
    "363": {
        "db_id": "retail_complains",
        "question": "Calculate the average age of clients whose response is \"Closed with relief\".",
        "ground_truth": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'Closed with relief'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM clients WHERE response = 'Closed with relief';"
        ],
        "rule_sql": []
    },
    "8504": {
        "db_id": "mondial_geo",
        "question": "What is the population density of the nation whose capital city is in the Distrito Federal province, and what portion of its gross domestic product is devoted to its industries?",
        "ground_truth": "SELECT T1.Population / T1.Area, T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Province = 'Distrito Federal'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population / area AS population_density, industry_gdp / total_gdp AS industry_portion \nFROM nations \nWHERE capital_province = 'Distrito Federal';"
        ],
        "rule_sql": []
    },
    "2809": {
        "db_id": "professional_basketball",
        "question": "Which coach of the Chicago Bulls during the year 1981 won the NBA Coach of the Year award in the 1970s?",
        "ground_truth": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.award = 'NBA Coach of the Year' AND T2.year BETWEEN 1970 AND 1979 AND T1.year = 1981 AND T3.name = 'Chicago Bulls'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM coaches c\nJOIN teams t ON c.team_id = t.id\nWHERE t.name = 'Chicago Bulls' \nAND c.year = 1981\nAND c.award = 'NBA Coach of the Year'\nAND c.year BETWEEN 1970 AND 1979;"
        ],
        "rule_sql": []
    },
    "5841": {
        "db_id": "airline",
        "question": "How many flights of Alaska Airlines were delayed on 2018/8/2?",
        "ground_truth": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/2' AND T2.Description = 'Alaska Airlines Inc.: AS' AND T1.DEP_DELAY > 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE airline = 'Alaska Airlines' AND date = '2018/8/2' AND delay > 0;"
        ],
        "rule_sql": []
    },
    "5094": {
        "db_id": "address",
        "question": "What is the highest gender ratio of the residential areas in Arecibo county?",
        "ground_truth": "SELECT CAST(T1.male_population AS REAL) / T1.female_population FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' AND T1.female_population <> 0 ORDER BY 1 DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(male_population / female_population) AS highest_gender_ratio FROM residential_areas WHERE county = 'Arecibo';"
        ],
        "rule_sql": []
    },
    "5245": {
        "db_id": "beer_factory",
        "question": "Please list the full names of the customers who have purchased at least one root beer produced by AJ Stephans Beverages.",
        "ground_truth": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.BreweryName = 'AJ Stephans Beverages'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM purchases WHERE product_id IN (SELECT product_id FROM products WHERE product_name = 'root beer' AND manufacturer = 'AJ Stephans Beverages'))"
        ],
        "rule_sql": []
    },
    "3536": {
        "db_id": "authors",
        "question": "What are the paper IDs of papers presented in conferences has a homepage starts with \"http://www.informatik.uni-trier.de/~ley/db/conf/\"?",
        "ground_truth": "SELECT T1.Id FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT paper_id FROM papers WHERE conference_homepage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%';"
        ],
        "rule_sql": []
    },
    "5294": {
        "db_id": "beer_factory",
        "question": "Find the root beer with the most and least amount of profit per unit and list the container types in which these root beers are sold.",
        "ground_truth": "SELECT * FROM ( SELECT T1.BrandName, T2.ContainerType FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID ORDER BY T1.CurrentRetailPrice - T1.WholesaleCost DESC LIMIT 1 ) UNION ALL SELECT * FROM ( SELECT T3.BrandName, T4.ContainerType FROM rootbeerbrand AS T3 INNER JOIN rootbeer AS T4 ON T3.BrandID = T4.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    rb.name,\n    rb.container_type,\n    (rb.price - rb.cost) AS profit_per_unit\nFROM root_beers rb\nORDER BY profit_per_unit DESC\nLIMIT 1\nUNION ALL\nSELECT \n    rb.name,\n    rb.container_type,\n    (rb.price - rb.cost) AS profit_per_unit\nFROM root_beers rb\nORDER BY profit_per_unit ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5654": {
        "db_id": "shipping",
        "question": "Provide the brand of the truck and the name of the driver that transported goods in Klett & Sons Repair.",
        "ground_truth": "SELECT T3.make, T4.first_name, T4.last_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN truck AS T3 ON T3.truck_id = T2.truck_id INNER JOIN driver AS T4 ON T4.driver_id = T2.driver_id WHERE T1.cust_name = 'Klett & Sons Repair'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT truck.brand, driver.name FROM truck JOIN driver ON truck.driver_id = driver.id WHERE truck.location = 'Klett & Sons Repair';"
        ],
        "rule_sql": []
    },
    "7066": {
        "db_id": "works_cycles",
        "question": "Among the employees who have more than 10 hours of sick leave, how many of them wish to receive e-mail promotions?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE sick_leave > 10 AND email_promotion = 1;"
        ],
        "rule_sql": []
    },
    "2546": {
        "db_id": "app_store",
        "question": "Which 1,000,000,000+ intalls apps has the most no comment reviews?",
        "ground_truth": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '1,000,000+' AND T2.Translated_Review = 'nan' GROUP BY T1.App ORDER BY COUNT(T2.Translated_Review) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT app_name, installs, no_comment_reviews \nFROM apps \nWHERE installs > 1000000000 \nORDER BY no_comment_reviews ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2428": {
        "db_id": "superstore",
        "question": "What is the shipment duration for order number CA-2011-134103?",
        "ground_truth": "SELECT DISTINCT strftime('%J', `Ship Date`) - strftime('%J', `Order Date`) AS duration FROM central_superstore WHERE `Order ID` = 'CA-2011-134103'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_date - ship_date AS shipment_duration FROM orders WHERE order_id = 'CA-2011-134103';"
        ],
        "rule_sql": []
    },
    "2310": {
        "db_id": "movielens",
        "question": "How many directors with average revenue of 4 have made either action or adventure films?",
        "ground_truth": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM directors d\nJOIN films f ON d.director_id = f.director_id\nWHERE f.genre IN ('Action', 'Adventure')\nGROUP BY d.director_id\nHAVING AVG(f.revenue) = 4;"
        ],
        "rule_sql": []
    },
    "4568": {
        "db_id": "student_loan",
        "question": "Among the students who filed for bankruptcy with an absence in school of no more than 6 months, how many students enlisted for the fire department?",
        "ground_truth": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name INNER JOIN enlist AS T3 ON T3.name = T2.name WHERE T3.organ = 'fire_department'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM students s\nJOIN bankruptcy b ON s.student_id = b.student_id\nJOIN enlistment e ON s.student_id = e.student_id\nWHERE b.absence_months <= 6\nAND e.department = 'fire department';"
        ],
        "rule_sql": []
    },
    "9125": {
        "db_id": "movie_3",
        "question": "Please list the titles of all the films in the category of \"Horror\".",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE category = 'Horror';"
        ],
        "rule_sql": []
    },
    "4072": {
        "db_id": "public_review_platform",
        "question": "Calculate the yearly average user who started using Yelp from the year of 2005 to 2014.",
        "ground_truth": "SELECT AVG(user_id) FROM Users WHERE user_yelping_since_year >= 2005 AND user_yelping_since_year <= 2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(user_count) FROM users WHERE year BETWEEN 2005 AND 2014"
        ],
        "rule_sql": []
    },
    "3488": {
        "db_id": "video_games",
        "question": "Provide the name of games released in 2015.",
        "ground_truth": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM games WHERE release_year = 2016;"
        ],
        "rule_sql": []
    },
    "7377": {
        "db_id": "works_cycles",
        "question": "How much is the tax amount of the purchase order with the biggest tax amount? Indicate the purchase order ID.",
        "ground_truth": "SELECT TaxAmt, PurchaseOrderID FROM PurchaseOrderHeader ORDER BY TaxAmt DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT purchase_order_id, tax_amount FROM purchase_orders ORDER BY tax_amount DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1551": {
        "db_id": "car_retails",
        "question": "Which countries do the top 5 highest paying customers in a single payment come from? Indicate their entire address.",
        "ground_truth": "SELECT DISTINCT T2.country, T2.addressLine1, T2.addressLine2 FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber ORDER BY T1.amount DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.country, a.address, a.address2, a.district, a.city_id, a.postal_code, a.phone\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nJOIN payment p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id\nORDER BY SUM(p.amount) DESC\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "9363": {
        "db_id": "movie_3",
        "question": "Write down the email addresses of active customers who rented between 5/25/2005 at 7:37:47 PM and 5/26/2005 at 10:06:49 AM.",
        "ground_truth": "SELECT T2.email FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49' AND T2.active = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM customers WHERE active = 1 AND rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49';"
        ],
        "rule_sql": []
    },
    "7075": {
        "db_id": "works_cycles",
        "question": "Please list the credit card IDs of the employees who work as store contact.",
        "ground_truth": "SELECT T2.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT credit_card_id FROM employees WHERE position = 'store contact';"
        ],
        "rule_sql": []
    },
    "1062": {
        "db_id": "talkingdata",
        "question": "What are the labels' IDs of online shopping and online malls categories?",
        "ground_truth": "SELECT label_id FROM label_categories WHERE category IN ('online shopping', 'online malls')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT label_id FROM categories WHERE category_name = 'online shopping' OR category_name = 'online malls';"
        ],
        "rule_sql": []
    },
    "7548": {
        "db_id": "image_and_language",
        "question": "List out the number of object samples in image no.41 which are in the class of \"kitchen\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'kitchen' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 41",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM objects WHERE image_id = 41 AND class = 'kitchen';"
        ],
        "rule_sql": []
    },
    "4925": {
        "db_id": "olympics",
        "question": "What is the average height of the male Olympic competitors from Finland?",
        "ground_truth": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM olympic_competitors WHERE country = 'Finland' AND gender = 'male';"
        ],
        "rule_sql": []
    },
    "635": {
        "db_id": "codebase_comments",
        "question": "List all the ids of repositories for solutions with \"ro\" methods.",
        "ground_truth": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT repository_id FROM solutions WHERE method LIKE '%ro%';"
        ],
        "rule_sql": []
    },
    "712": {
        "db_id": "trains",
        "question": "What are the load shapes of all the short ellipse cars?",
        "ground_truth": "SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len = 'short'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT load_shape FROM cars WHERE car_type = 'short ellipse'"
        ],
        "rule_sql": []
    },
    "8793": {
        "db_id": "food_inspection",
        "question": "How many kinds of violations did \"Stacks Restaurant\" have on 2016/10/4?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.violation_type_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Stacks Restaurant' AND T1.`date` = '2016-10-04'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM violations WHERE restaurant_name = 'Stacks Restaurant' AND violation_date = '2016/10/4';"
        ],
        "rule_sql": []
    },
    "6825": {
        "db_id": "retails",
        "question": "What is the supply cost for the part \"violet olive rose ivory sandy\"?",
        "ground_truth": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'violet olive rose ivory sandy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT supply_cost FROM parts WHERE part_name = 'violet olive rose ivory sandy';"
        ],
        "rule_sql": []
    },
    "8991": {
        "db_id": "bike_share_1",
        "question": "What is the percentage of the trip were done by a subscriber?",
        "ground_truth": "SELECT CAST(COUNT(subscription_type) AS REAL) * 100 / ( SELECT COUNT(subscription_type) FROM trip ) FROM trip WHERE subscription_type = 'Subscriber'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM trips) AS percentage FROM trips WHERE usertype = 'subscriber'"
        ],
        "rule_sql": []
    },
    "7251": {
        "db_id": "works_cycles",
        "question": "What is the profit on net of the vendor with the highest standard price? If there are two vendors of the same amount, calculate only for one vendor.",
        "ground_truth": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT profit_on_net FROM vendors ORDER BY standard_price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4722": {
        "db_id": "disney",
        "question": "What is Disney's highest grossing action movie?",
        "ground_truth": "SELECT movie_title FROM movies_total_gross WHERE genre = 'Action' ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, gross FROM movies WHERE genre = 'action' AND studio = 'Disney' ORDER BY gross DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "733": {
        "db_id": "movie",
        "question": "Please list the names of the actors who played a role in the movie Batman.",
        "ground_truth": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE movie_title = 'Batman';"
        ],
        "rule_sql": []
    },
    "8342": {
        "db_id": "mondial_geo",
        "question": "List all rivers and province it is located that is greater than 1000 in length.",
        "ground_truth": "SELECT T1.Province, T2.Name FROM geo_river AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T2.Length > 1000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT river_name, province FROM rivers WHERE length > 1000;"
        ],
        "rule_sql": []
    },
    "8937": {
        "db_id": "human_resources",
        "question": "Among the employees working at the office in New York, how many of them have a good job performance?",
        "ground_truth": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'NY' AND T1.performance = 'Good'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE office_location = 'New York' AND job_performance = 'good';"
        ],
        "rule_sql": []
    },
    "537": {
        "db_id": "movies_4",
        "question": "List the movies released in 1945.",
        "ground_truth": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) = 1945",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM movies WHERE release_year = 1946;"
        ],
        "rule_sql": []
    },
    "5733": {
        "db_id": "language_corpus",
        "question": "Indicate if there is any pair formed by the words fukunaga and d'egees.",
        "ground_truth": "SELECT CASE WHEN COUNT(T1.wid) > 0 THEN 'yes' ELSE 'no' END FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st = ( SELECT wid FROM words WHERE T1.word = 'fukunaga' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word LIKE 'd%egees' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM words WHERE word1 = 'fukunaga' AND word2 = 'd''egees';"
        ],
        "rule_sql": []
    },
    "6241": {
        "db_id": "food_inspection_2",
        "question": "How many grocery stores paid $250 fine upon their inspection?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Grocery Store' AND T3.fine = 250",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE fine_amount = 250 AND business_type = 'grocery_store';"
        ],
        "rule_sql": []
    },
    "6470": {
        "db_id": "retail_world",
        "question": "What is the contact name for product Teatime Chocolate Biscuits?",
        "ground_truth": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT contact_name FROM products WHERE product_name = 'Teatime Chocolate Biscuits';"
        ],
        "rule_sql": []
    },
    "2849": {
        "db_id": "professional_basketball",
        "question": "Among players who were born after 1950, who had offence rebounds rates more than 30%? Please list their last names and first names.",
        "ground_truth": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthDate > 1950 AND CAST(T2.o_rebounds AS REAL) * 100 / T2.rebounds > 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, first_name \nFROM players \nWHERE birth_year > 1950 \nAND (offensive_rebounds / total_rebounds) > 0.3;"
        ],
        "rule_sql": []
    },
    "1764": {
        "db_id": "restaurant",
        "question": "What is the restaurant's name and ID located at Ocean Avenue, San Francisco?",
        "ground_truth": "SELECT T2.label, T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'ocean avenue'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT restaurant_name, restaurant_id FROM restaurants WHERE address = 'Ocean Avenue' AND city = 'San Francisco';"
        ],
        "rule_sql": []
    },
    "8529": {
        "db_id": "software_company",
        "question": "What is the average age of first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department?",
        "ground_truth": "SELECT AVG(T1.age) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.RESPONSE = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM customers WHERE response = 'true' LIMIT 60000;"
        ],
        "rule_sql": []
    },
    "7246": {
        "db_id": "works_cycles",
        "question": "What is the percentage of employees who work the night shift?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Night' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.BusinessEntityID) FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM employees) AS percentage FROM employees WHERE shift = 'night';"
        ],
        "rule_sql": []
    },
    "6884": {
        "db_id": "retails",
        "question": "Please list the phone numbers of all the suppliers for the parts ordered in order no.1.",
        "ground_truth": "SELECT T2.s_phone FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM suppliers WHERE order_id = 1;"
        ],
        "rule_sql": []
    },
    "972": {
        "db_id": "computer_student",
        "question": "Provide the ID of professors who are teaching high-level or harder undergraduate course.",
        "ground_truth": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT professor_id FROM courses WHERE level = 'high-level' OR level = 'harder'"
        ],
        "rule_sql": []
    },
    "3599": {
        "db_id": "authors",
        "question": "List the short name and home page URL of all the international conferences on artificial intelligence.",
        "ground_truth": "SELECT ShortName, HomePage FROM Conference WHERE FullName LIKE 'International Conference on Artificial Intelligence%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT short_name, home_page FROM conferences WHERE topic = 'artificial intelligence' AND international = 'yes';"
        ],
        "rule_sql": []
    },
    "7392": {
        "db_id": "works_cycles",
        "question": "Of the employees whose vacation hours are no more than 10, what is the age of the oldest employee at the time he/she was hired? Indicate his/her full name.",
        "ground_truth": "SELECT STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate), T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.VacationHours <= 10 ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(Age) as OldestAge, FirstName, LastName \nFROM Employees \nWHERE VacationHours <= 10 \nORDER BY Age DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1887": {
        "db_id": "soccer_2016",
        "question": "Is SuperSport Park located at Centurion?",
        "ground_truth": "SELECT T2.City_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T1.Venue_Name LIKE 'St George%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM stadiums WHERE name = 'SuperSport Park' AND location = 'Centurion';"
        ],
        "rule_sql": []
    },
    "5312": {
        "db_id": "beer_factory",
        "question": "What is the name of all the customers who have ever given a 5-star review?",
        "ground_truth": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE review_rating = 5;"
        ],
        "rule_sql": []
    },
    "2482": {
        "db_id": "shooting",
        "question": "What is the most common type of weapon that causes death?",
        "ground_truth": "SELECT subject_weapon FROM incidents WHERE subject_statuses = 'Deceased' GROUP BY subject_weapon ORDER BY COUNT(case_number) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weapon_type, COUNT(*) as death_count FROM deaths GROUP BY weapon_type ORDER BY death_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6272": {
        "db_id": "coinmarketcap",
        "question": "Had Bitcoin's price increased or decreased on 2013/5/5 compared with the price 7 days before?",
        "ground_truth": "SELECT (CASE WHEN T2.percent_change_7d > 0 THEN 'INCREASED' ELSE 'DECREASED' END) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-05' AND T1.name = 'Bitcoin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN (SELECT price FROM bitcoin_prices WHERE date = '2013/5/5') > (SELECT price FROM bitcoin_prices WHERE date = '2013/4/28') THEN 'Increased'\n        WHEN (SELECT price FROM bitcoin_prices WHERE date = '2013/5/5') < (SELECT price FROM bitcoin_prices WHERE date = '2013/4/28') THEN 'Decreased'\n        ELSE 'No change'\n    END as price_change;"
        ],
        "rule_sql": []
    },
    "8623": {
        "db_id": "chicago_crime",
        "question": "How many incidents of domestic violence occurred in an abandoned building in 2018?",
        "ground_truth": "SELECT SUM(CASE WHEN location_description = 'ABANDONED BUILDING' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND domestic = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM incidents WHERE location = 'abandoned building' AND year = 2018 AND type = 'domestic violence';"
        ],
        "rule_sql": []
    },
    "3544": {
        "db_id": "authors",
        "question": "Write down the author's name and IDs who are affiliated with Univeristiy of Oulu.",
        "ground_truth": "SELECT Name, id FROM Author WHERE Affiliation = 'University of Oulu'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name, author_id FROM authors WHERE affiliation = 'University of Oulu';"
        ],
        "rule_sql": []
    },
    "3663": {
        "db_id": "authors",
        "question": "How many papers were published in International Workshop on Inductive Logic Programming from 2001 to 2009?",
        "ground_truth": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Workshop on Inductive Logic Programming' AND T1.Year BETWEEN 2001 AND 2009",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE workshop = 'International Workshop on Inductive Logic Programming' AND year BETWEEN 2001 AND 2009;"
        ],
        "rule_sql": []
    },
    "5390": {
        "db_id": "sales",
        "question": "Calculate the total quantity of products purchased by customer called Adrian.",
        "ground_truth": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Adam'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM purchases WHERE customer_name = 'Adrian';"
        ],
        "rule_sql": []
    },
    "888": {
        "db_id": "cs_semester",
        "question": "How many courses have the highest difficulty?",
        "ground_truth": "SELECT COUNT(course_id) FROM course WHERE diff = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM courses WHERE difficulty = (SELECT MAX(difficulty) FROM courses);"
        ],
        "rule_sql": []
    },
    "3956": {
        "db_id": "public_review_platform",
        "question": "Which actively running Yelp business in \"Gilbert\" has got the most reviews? Give the business id.",
        "ground_truth": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'true' AND T1.city = 'Gilbert' AND T1.review_count = 'Uber'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM business WHERE city = 'Gilbert' AND is_open = 1 ORDER BY review_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9343": {
        "db_id": "movie_3",
        "question": "What is the language for film titled \"CHILL LUCK\"?",
        "ground_truth": "SELECT T2.`name` FROM film AS T1 INNER JOIN `language` AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'CHILL LUCK'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM film WHERE title = 'CHILL LUCK';"
        ],
        "rule_sql": []
    },
    "975": {
        "db_id": "computer_student",
        "question": "Which level of courses is taught by professor ID 297?",
        "ground_truth": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 297",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_level FROM courses WHERE professor_id = 297;"
        ],
        "rule_sql": []
    },
    "6812": {
        "db_id": "retails",
        "question": "What are the countries that belong to Africa?",
        "ground_truth": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'Africa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM countries WHERE continent = 'Asia';"
        ],
        "rule_sql": []
    },
    "3194": {
        "db_id": "donor",
        "question": "What is the name of the item that is provided in the biggest amount by the vendor Lakeshore Learning Materials?",
        "ground_truth": "SELECT item_name FROM resources WHERE vendor_name = 'Lakeshore Learning Materials' ORDER BY item_quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT item_name FROM vendors WHERE vendor_name = 'Lakeshore Learning Materials' ORDER BY amount DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7347": {
        "db_id": "works_cycles",
        "question": "Which work order transaction number has the highest product quantity?",
        "ground_truth": "SELECT TransactionID FROM TransactionHistory WHERE TransactionType = 'W' ORDER BY Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT transaction_number FROM work_orders ORDER BY product_quantity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7280": {
        "db_id": "works_cycles",
        "question": "What is the highest profit on net for a product?",
        "ground_truth": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY LastReceiptCost - StandardPrice DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(profit) FROM products;"
        ],
        "rule_sql": []
    },
    "7620": {
        "db_id": "hockey",
        "question": "Name the goaltenders who had played in both PCHA and NHL league.",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT g.name \nFROM goaltenders g\nJOIN teams t ON g.team_id = t.team_id\nWHERE t.league = 'PCHA' OR t.league = 'NHL'"
        ],
        "rule_sql": []
    },
    "2353": {
        "db_id": "superstore",
        "question": "Please list the names of all the customers who had ordered the product \"Telescoping Adjustable Floor Lamp\".",
        "ground_truth": "SELECT DISTINCT T1.`Customer Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.`Product Name` = 'Telescoping Adjustable Floor Lamp'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE product_name = 'Telescoping Adjustable Floor Lamp'"
        ],
        "rule_sql": []
    },
    "6211": {
        "db_id": "food_inspection_2",
        "question": "What is the name of the establishment that Joshua Rosa inspected?",
        "ground_truth": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT establishment_name FROM inspections WHERE inspector_name = 'Joshua Rosa';"
        ],
        "rule_sql": []
    },
    "6637": {
        "db_id": "retail_world",
        "question": "What is the name of product with the ID of 77?",
        "ground_truth": "SELECT ProductName FROM Products WHERE ProductID = 77",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE id = 77;"
        ],
        "rule_sql": []
    },
    "8862": {
        "db_id": "cookbook",
        "question": "What is the title of the recipe that is most likely to gain weight?",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM recipes ORDER BY calories DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2942": {
        "db_id": "professional_basketball",
        "question": "In the year 1997 allstar game, which teams did the players had the most rebounds play in? List their team ids.",
        "ground_truth": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN player_allstar AS T3 ON T3.playerID = T1.playerID WHERE T3.season_id = 1997 ORDER BY T1.rebounds DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_id, SUM(rebounds) as total_rebounds \nFROM allstar_game_stats \nWHERE year = 1997 \nGROUP BY team_id \nORDER BY total_rebounds DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8520": {
        "db_id": "software_company",
        "question": "Among the customers from a place with more than 20,000 and less than 30,000 inhabitants, how many of them are Machine-op-inspcts?",
        "ground_truth": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Machine-op-inspct' AND T2.INHABITANTS_K > 20 AND T2.INHABITANTS_K < 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE population > 20000 AND population < 30000 AND occupation = 'Machine-op-inspcts';"
        ],
        "rule_sql": []
    },
    "396": {
        "db_id": "retail_complains",
        "question": "Among the complaints received in year 2015, what is total number of complaints timely response and closed with an explanation?",
        "ground_truth": "SELECT COUNT(T1.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%Y', T1.`Date received`) = '2015' AND T2.`Timely response?` = 'Yes' AND T2.`Company response to consumer` = 'Closed with explanation'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM complaints WHERE year = 2015 AND timely_response = 'Yes' AND closed_with_explanation = 'Yes';"
        ],
        "rule_sql": []
    },
    "852": {
        "db_id": "social_media",
        "question": "What is the average number of likes for a tweet posted by a male user on Mondays?",
        "ground_truth": "SELECT SUM(T1.Likes) / COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(likes) FROM tweets JOIN users ON tweets.user_id = users.user_id WHERE users.gender = 'male' AND strftime('%w', tweets.created_at) = '1';"
        ],
        "rule_sql": []
    },
    "209": {
        "db_id": "book_publishing_company",
        "question": "Please give more detailed information about the first three books that sell the best.",
        "ground_truth": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id ORDER BY T2.qty DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM books ORDER BY sales DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "1526": {
        "db_id": "synthea",
        "question": "Indicate the start date of patient Walter Bahringer's care plan.",
        "ground_truth": "SELECT DISTINCT T2.start FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_date FROM care_plans WHERE patient_name = 'Walter Bahringer';"
        ],
        "rule_sql": []
    },
    "4965": {
        "db_id": "olympics",
        "question": "How many persons participated in the Sapporo Olympics?",
        "ground_truth": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Sapporo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE olympics = 'Sapporo';"
        ],
        "rule_sql": []
    },
    "2019": {
        "db_id": "soccer_2016",
        "question": "What type did match ID 336000 win?",
        "ground_truth": "SELECT T2.Win_Type FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T1.Match_Id = 336000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT winner_type FROM matches WHERE match_id = 336000"
        ],
        "rule_sql": []
    },
    "5362": {
        "db_id": "beer_factory",
        "question": "What is the precise location of the Sac State American River Courtyard?",
        "ground_truth": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State American River Courtyard'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM locations WHERE name = 'Sac State American River Courtyard';"
        ],
        "rule_sql": []
    },
    "9123": {
        "db_id": "movie_3",
        "question": "Among the films starring PENELOPE GUINESS, how many of them are in English?",
        "ground_truth": "SELECT COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN language AS T4 ON T3.language_id = T4.language_id WHERE T4.name = 'English' AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS'\nAND f.language_id = 1;"
        ],
        "rule_sql": []
    },
    "291": {
        "db_id": "retail_complains",
        "question": "Identify by their ID all clients who did not give their consent permission.",
        "ground_truth": "SELECT Client_ID FROM events WHERE `Consumer consent provided?` = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT client_id FROM clients WHERE consent_permission = 'yes';"
        ],
        "rule_sql": []
    },
    "698": {
        "db_id": "trains",
        "question": "Please list the IDs of all the cars with double sides on trains that run in the west direction.",
        "ground_truth": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT car_id FROM trains WHERE direction = 'west' AND sides = 'double';"
        ],
        "rule_sql": []
    },
    "3532": {
        "db_id": "authors",
        "question": "What is the title of the paper published in 2003 by an author with affiliation with Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications?",
        "ground_truth": "SELECT DISTINCT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' AND T2.Year = 2003",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE year = 2003 AND author_affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications'"
        ],
        "rule_sql": []
    },
    "8457": {
        "db_id": "mondial_geo",
        "question": "Please provide a list of every volcano mountain in the province of Ecuador.",
        "ground_truth": "SELECT T1.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'Ecuador' AND T1.Type = 'volcano'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM mountains WHERE country = 'Ecuador' AND type = 'volcano';"
        ],
        "rule_sql": []
    },
    "366": {
        "db_id": "retail_complains",
        "question": "Between 1/1/2017 and 4/1/2017, what is the average server time of calls under the server DARMON?",
        "ground_truth": "SELECT AVG(CAST(SUBSTR(ser_time, 4, 2) AS REAL)) FROM callcenterlogs WHERE `Date received` BETWEEN '2017-01-01' AND '2017-04-01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(server_time) FROM calls WHERE server_name = 'DARMON' AND call_date BETWEEN '2017-01-01' AND '2017-04-01';"
        ],
        "rule_sql": []
    },
    "9409": {
        "db_id": "movie_3",
        "question": "What are the titles of the films starred by Russell Close?",
        "ground_truth": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'Russell' AND T2.last_name = 'Close'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT f.title \nFROM films f \nJOIN actors a ON f.actor_id = a.id \nWHERE a.first_name = 'Russell' AND a.last_name = 'Close';"
        ],
        "rule_sql": []
    },
    "3398": {
        "db_id": "video_games",
        "question": "What is the first year a game is released?",
        "ground_truth": "SELECT MIN(T.release_year) FROM game_platform t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(year) FROM games;"
        ],
        "rule_sql": []
    },
    "5871": {
        "db_id": "airline",
        "question": "How many hours in total did all of the Delta Air Lines aircraft were delayed due to a late aircraft in August of 2018? Identify the plane number of the aircraft with the highest delayed hours.",
        "ground_truth": "SELECT T1.TAIL_NUM, SUM(CAST(T1.LATE_AIRCRAFT_DELAY AS REAL) / 60) AS delay FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.FL_DATE LIKE '2018/8/%' AND T2.Description = 'Delta Air Lines Inc.: DL' ORDER BY delay DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(LateAircraftDelay) as TotalDelayHours, Tail_Number \nFROM flights \nWHERE Airline = 'Delta Air Lines' \nAND strftime('%Y-%m', FlightDate) = '2018-08' \nGROUP BY Tail_Number \nORDER BY SUM(LateAircraftDelay) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2955": {
        "db_id": "shakespeare",
        "question": "What is the description of Act 1, Scene 2 in Twelfth Night?",
        "ground_truth": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night' AND T2.Act = 1 AND T2.Scene = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM scenes WHERE act = 1 AND scene = 2 AND play = 'Twelfth Night';"
        ],
        "rule_sql": []
    },
    "7874": {
        "db_id": "world",
        "question": "Write down the name of the largest population country.",
        "ground_truth": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries ORDER BY population ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8275": {
        "db_id": "mondial_geo",
        "question": "Which country is Mountain Cerro Chirripo located in? Give the full name of the country.",
        "ground_truth": "SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = 'Cerro Chirripo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM mountains WHERE name = 'Cerro Chirripo';"
        ],
        "rule_sql": []
    },
    "3885": {
        "db_id": "public_review_platform",
        "question": "In businesses with a category of mexican, how many of them has a star rating below 4?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars < 4 AND T3.category_name LIKE 'Mexican'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE category = 'mexican' AND star_rating > 4;"
        ],
        "rule_sql": []
    },
    "2940": {
        "db_id": "professional_basketball",
        "question": "For the player who had the most rebounds throughout his allstar appearances, what was his weight and height?",
        "ground_truth": "SELECT T1.weight, T1.height FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID ORDER BY T2.rebounds DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight, height FROM players WHERE player_id = (SELECT player_id FROM allstar_appearances ORDER BY rebounds DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "123": {
        "db_id": "movie_platform",
        "question": "Show the portrait picture of the user who created the list \"Vladimir Vladimirovich Nabokov\".",
        "ground_truth": "SELECT T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Vladimir Vladimirovich Nabokov'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT portrait_picture FROM users WHERE list_name = 'Vladimir Vladimirovich Nabokov';"
        ],
        "rule_sql": []
    },
    "9350": {
        "db_id": "movie_3",
        "question": "What is the category of film titled \"BLADE POLISH\"?",
        "ground_truth": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BLADE POLISH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM film WHERE title = 'BLADE POLISH';"
        ],
        "rule_sql": []
    },
    "9316": {
        "db_id": "movie_3",
        "question": "Which country does Sasebo belong to?",
        "ground_truth": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Sasebo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM cities WHERE name = 'Sasebo';"
        ],
        "rule_sql": []
    },
    "3293": {
        "db_id": "donor",
        "question": "When did the project \"Photojournalists Want to Exhibit Their Best Works\" go live?",
        "ground_truth": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Photojournalists Want to Exhibit Their Best Works'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_date FROM projects WHERE project_name = 'Photojournalists Want to Exhibit Their Best Works';"
        ],
        "rule_sql": []
    },
    "280": {
        "db_id": "retail_complains",
        "question": "In the calls from the mountain division, how many are from teenage clients?",
        "ground_truth": "SELECT COUNT(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.age BETWEEN 12 AND 20 AND T2.division = 'Mountain'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM calls WHERE division = 'mountain' AND client_age BETWEEN 13 AND 19;"
        ],
        "rule_sql": []
    },
    "4428": {
        "db_id": "student_loan",
        "question": "Mention the name of disabled students who have never been absent from school.",
        "ground_truth": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE disabled = 1 AND absent_count = 0;"
        ],
        "rule_sql": []
    },
    "6334": {
        "db_id": "retail_world",
        "question": "Provide the number of orders that were handled by Michael Suyama.",
        "ground_truth": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE employee_id = (SELECT employee_id FROM employees WHERE first_name = 'Michael' AND last_name = 'Suyama');"
        ],
        "rule_sql": []
    },
    "1046": {
        "db_id": "talkingdata",
        "question": "What is the model of the oldest user's device?",
        "ground_truth": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id ORDER BY T2.age DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT model FROM users ORDER BY age DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2143": {
        "db_id": "world_development_indicators",
        "question": "Which indicator name uses the Weighted average method and has the lowest value?",
        "ground_truth": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT indicator_name FROM indicators WHERE method = 'Weighted average' ORDER BY value DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "44": {
        "db_id": "movie_platform",
        "question": "When was the first movie of the director who directed the highest number of movies released and what is the user id of the user who received the highest number of comments related to the critic made by the user rating the movie?",
        "ground_truth": "SELECT MIN(movie_release_year) FROM movies WHERE director_name = ( SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name ORDER BY COUNT(T2.director_name) DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    MIN(m.release_date) AS first_movie_date,\n    u.user_id\nFROM \n    directors d\nJOIN \n    movies m ON d.director_id = m.director_id\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nJOIN \n    users u ON r.user_id = u.user_id\nJOIN \n    comments c ON u.user_id = c.user_id\nWHERE \n    d.director_id = (\n        SELECT director_id \n        FROM movies \n        GROUP BY director_id \n        ORDER BY COUNT(*) DESC \n        LIMIT 1\n    )\nGROUP BY \n    u.user_id\nORDER BY \n    COUNT(c.comment_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1306": {
        "db_id": "law_episode",
        "question": "In which episodes was Anthony Azzara not credited?",
        "ground_truth": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'false' AND T3.name = 'Anthony Azzara'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_id FROM episodes WHERE credited = 'Anthony Azzara'"
        ],
        "rule_sql": []
    },
    "1815": {
        "db_id": "soccer_2016",
        "question": "How many Indian cities are there in the database?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE country = 'India';"
        ],
        "rule_sql": []
    },
    "1061": {
        "db_id": "talkingdata",
        "question": "What is the ratio of male and female users in 27-28 age group?",
        "ground_truth": "SELECT SUM(IIF(gender = 'M' AND `group` = 'M27-28', 1, 0)) / SUM(IIF(gender = 'F' AND `group` = 'F27-28', 1, 0)) AS r FROM gender_age",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN gender = 'male' THEN 1 END) AS male_count,\n    COUNT(CASE WHEN gender = 'female' THEN 1 END) AS female_count,\n    COUNT(CASE WHEN gender = 'male' THEN 1 END) / COUNT(*) AS male_ratio,\n    COUNT(CASE WHEN gender = 'female' THEN 1 END) / COUNT(*) AS female_ratio\nFROM users\nWHERE age BETWEEN 27 AND 28;"
        ],
        "rule_sql": []
    },
    "9236": {
        "db_id": "movie_3",
        "question": "Among films with a rental rate of 4.99, what is the total number of films starred by Bob Fawcett?",
        "ground_truth": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rental_rate = 4.99 AND T1.first_name = 'Bob' AND T1.last_name = 'Fawcett'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.rental_rate = 4.99 AND a.first_name = 'Bob' AND a.last_name = 'Fawcett';"
        ],
        "rule_sql": []
    },
    "1787": {
        "db_id": "soccer_2016",
        "question": "How many players were born after the year 1985?",
        "ground_truth": "SELECT COUNT(Player_Id) FROM Player WHERE SUBSTR(DOB, 1, 4) > 1985",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE birth_year > 1985;"
        ],
        "rule_sql": []
    },
    "2626": {
        "db_id": "regional_sales",
        "question": "How many CDP stores are there in California?",
        "ground_truth": "SELECT SUM(CASE WHEN State = 'California' AND Type = 'CDP' THEN 1 ELSE 0 END) FROM `Store Locations`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stores WHERE state = 'California' AND store_type = 'CDP';"
        ],
        "rule_sql": []
    },
    "2323": {
        "db_id": "movielens",
        "question": "Which different movies from France got the least ratings?",
        "ground_truth": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, COUNT(r.rating) as rating_count\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.country = 'France'\nGROUP BY m.title\nORDER BY rating_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1960": {
        "db_id": "soccer_2016",
        "question": "What are the names of the venues in Abu Dhabi?",
        "ground_truth": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Abu Dhabi'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM venues WHERE city = 'Dubai';"
        ],
        "rule_sql": []
    },
    "3518": {
        "db_id": "authors",
        "question": "Please list the titles of the paper whose authors include Klaus Zimmermann.",
        "ground_truth": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Klaus Zimmermann'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE author = 'Klaus Zimmermann'"
        ],
        "rule_sql": []
    },
    "6153": {
        "db_id": "food_inspection_2",
        "question": "What are the comments of the inspector during the inspection of Taqueria La Fiesta on 1/25/2010?",
        "ground_truth": "SELECT T3.inspector_comment FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2010-01-25' AND T1.dba_name = 'TAQUERIA LA FIESTA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT comments FROM inspections WHERE restaurant_name = 'Taqueria La Fiesta' AND inspection_date = '2010-01-25';"
        ],
        "rule_sql": []
    },
    "1577": {
        "db_id": "car_retails",
        "question": "State 10 emails of UK Sales Rep who have the lowest credit limit.",
        "ground_truth": "SELECT DISTINCT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' ORDER BY T1.creditLimit LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM employees WHERE country = 'UK' AND job_title = 'Sales Rep' ORDER BY credit_limit ASC LIMIT 10;"
        ],
        "rule_sql": []
    },
    "5255": {
        "db_id": "beer_factory",
        "question": "Provide the name of the location where transaction no.100885 happened.",
        "ground_truth": "SELECT T2.LocationName FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TransactionID = 100885",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location_name FROM transactions WHERE transaction_id = 100885"
        ],
        "rule_sql": []
    },
    "2583": {
        "db_id": "regional_sales",
        "question": "List all the numbers ordered by 'Rochester Ltd' in 2018.",
        "ground_truth": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN T1.OrderDate LIKE '%/%/18' AND T2.`Customer Names` = 'Rochester Ltd' THEN T1.OrderNumber ELSE NULL END AS T FROM `Sales Orders` T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM orders WHERE customer_name = 'Rochester Ltd' AND order_year = 2018 ORDER BY order_number;"
        ],
        "rule_sql": []
    },
    "524": {
        "db_id": "movies_4",
        "question": "List all the actors who have played characters with \"captain\" in their names.",
        "ground_truth": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE character_name LIKE '%captain%';"
        ],
        "rule_sql": []
    },
    "9228": {
        "db_id": "movie_3",
        "question": "Among the customers with customer ID of 100 and below, how many of them have Thomas as their last name?",
        "ground_truth": "SELECT COUNT(customer_id) FROM customer WHERE last_name = 'Thomas' AND customer_id < 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE customer_id <= 100 AND first_name = 'Thomas'"
        ],
        "rule_sql": []
    },
    "407": {
        "db_id": "retail_complains",
        "question": "In reviews of product with 5 stars, what is the percentage of the reviews coming from the division of East North Central?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.division = 'East North Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.division) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN r.division = 'East North Central' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM reviews r\nWHERE r.stars = 5\nGROUP BY r.division\nHAVING r.division = 'East North Central';"
        ],
        "rule_sql": []
    },
    "8634": {
        "db_id": "chicago_crime",
        "question": "Out of all the incidents of domestic violence reported at the ward represented by alderman Walter Burnett Jr., how many were arrested?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Walter' AND T1.alderman_last_name = 'Burnett' AND alderman_name_suffix = 'Jr.' AND T2.domestic = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM incidents WHERE ward = 'Walter Burnett Jr.' AND domestic_violence = 1 AND arrested = 1;"
        ],
        "rule_sql": []
    },
    "4406": {
        "db_id": "student_loan",
        "question": "What is the total number of students in the school?",
        "ground_truth": "SELECT COUNT(name) FROM person",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE grade = 'A';"
        ],
        "rule_sql": []
    },
    "1755": {
        "db_id": "restaurant",
        "question": "What is the name of the 24 hour diner at San Francisco?",
        "ground_truth": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner' AND city = 'san francisco'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM restaurants WHERE city = 'San Francisco' AND hours = '24 hours' AND type = 'diner';"
        ],
        "rule_sql": []
    },
    "5036": {
        "db_id": "olympics",
        "question": "Mention the height of people who belong to region id 7.",
        "ground_truth": "SELECT T2.height FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T1.region_id = 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM people WHERE region_id = 7;"
        ],
        "rule_sql": []
    },
    "672": {
        "db_id": "codebase_comments",
        "question": "How many methods in repository 150 did not have a comment and a summary?",
        "ground_truth": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 150 AND T2.FullComment IS NULL AND T2.Summary IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM methods WHERE repository_id = 150 AND comment IS NULL AND summary IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "4676": {
        "db_id": "disney",
        "question": "What are the total grosses for the movies with Jim Cummings as the voice actor?",
        "ground_truth": "SELECT T2.movie_title FROM `voice-actors` AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie WHERE T1.`voice-actor` = 'Jim Cummings' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(gross) FROM movies WHERE actor = 'Jim Cummings';"
        ],
        "rule_sql": []
    },
    "6047": {
        "db_id": "books",
        "question": "Who is the author of the book with the biggest page count?",
        "ground_truth": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author FROM books ORDER BY page_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8917": {
        "db_id": "cookbook",
        "question": "How much fat does the Raspberry Chiffon Pie have?",
        "ground_truth": "SELECT T2.total_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT calories FROM desserts WHERE name = 'Raspberry Chiffon Pie';"
        ],
        "rule_sql": []
    },
    "3344": {
        "db_id": "video_games",
        "question": "What is the genre of the Advent Rising game?",
        "ground_truth": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Advent Rising'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM games WHERE title = 'Advent Rising';"
        ],
        "rule_sql": []
    },
    "6928": {
        "db_id": "ice_hockey_draft",
        "question": "What is the average height in centimeters of all the players in the position of defense?",
        "ground_truth": "SELECT CAST(SUM(T2.height_in_cm) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.position_info = 'D'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM players WHERE position = 'defense';"
        ],
        "rule_sql": []
    },
    "5354": {
        "db_id": "beer_factory",
        "question": "Which brand has the lowest star rating with a \"Too spicy!\" review?",
        "ground_truth": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 AND T2.Review = 'Too Spicy!'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand FROM reviews WHERE review_text = 'Too spicy!' ORDER BY star_rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3443": {
        "db_id": "video_games",
        "question": "In which regions has the game 'Pengo' been sold?",
        "ground_truth": "SELECT T5.region_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T1.game_name = 'Pengo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM sales WHERE game = 'Pengo';"
        ],
        "rule_sql": []
    },
    "161": {
        "db_id": "movie_platform",
        "question": "What is the average number of followers of the lists created by the user who rated the movie \"Pavee Lackeen: The Traveller Girl\" on 3/27/2011 at 2:06:34 AM?",
        "ground_truth": "SELECT CAST(SUM(T4.list_followers) AS REAL) / COUNT(T2.list_id) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN movies AS T3 ON T1.movie_id = T3.movie_id INNER JOIN lists AS T4 ON T2.list_id = T4.list_id WHERE T3.movie_title LIKE 'Pavee Lackeen: The Traveller Girl' AND T1.rating_timestamp_utc LIKE '2011-03-27 02:06:34'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(followers) FROM lists WHERE user_id = (SELECT user_id FROM ratings WHERE movie_title = 'Pavee Lackeen: The Traveller Girl' AND rating_date = '3/27/2011 2:06:34 AM');"
        ],
        "rule_sql": []
    },
    "4542": {
        "db_id": "student_loan",
        "question": "List the names of disabled students enlisted in the navy.",
        "ground_truth": "SELECT T1.name FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE status = 'disabled' AND branch = 'navy';"
        ],
        "rule_sql": []
    },
    "2633": {
        "db_id": "regional_sales",
        "question": "What is the percentage of total orders from stores in Orange County in 2018?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.County = 'Orange County' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/18'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN s.county = 'Orange' AND strftime('%Y', o.order_date) = '2018' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM orders o\nJOIN stores s ON o.store_id = s.store_id;"
        ],
        "rule_sql": []
    },
    "3244": {
        "db_id": "donor",
        "question": "For the donation of the project 'Awesome Audiobooks Make Avid Readers', what was the percentage of the tip in the total amount?",
        "ground_truth": "SELECT CAST(SUM(T2.donation_optional_support) AS REAL) * 100 / SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Awesome Audiobooks Make Avid Readers'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (tip_amount / donation_amount) * 100 AS tip_percentage FROM donations WHERE project_name = 'Awesome Audiobooks Make Avid Readers';"
        ],
        "rule_sql": []
    },
    "2973": {
        "db_id": "shakespeare",
        "question": "How many characters are there in Titus Andronicus?",
        "ground_truth": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM characters WHERE play_title = 'Titus Andronicus';"
        ],
        "rule_sql": []
    },
    "120": {
        "db_id": "movie_platform",
        "question": "Give the name of the movie that got the most \"5\" ratings.",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies ORDER BY rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9376": {
        "db_id": "movie_3",
        "question": "Identify the number of movies that starred Nick Stallone.",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id AND T2.first_name = 'NICK' AND T2.last_name = 'STALLONE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE star = 'Nick Stallone';"
        ],
        "rule_sql": []
    },
    "1223": {
        "db_id": "talkingdata",
        "question": "What is the percentage of users who experienced event number 6 who have the app installed but do not use the app?",
        "ground_truth": "SELECT SUM(IIF(is_installed = 1 AND is_active = 0, 1, 0)) / COUNT(app_id) AS perrcent FROM app_events WHERE event_id = 6",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT CASE WHEN event_number = 6 AND app_installed = 1 AND app_used = 0 THEN user_id END) * 100.0 / \n     COUNT(DISTINCT CASE WHEN event_number = 6 THEN user_id END)) AS percentage\nFROM events\nWHERE event_number = 6;"
        ],
        "rule_sql": []
    },
    "5717": {
        "db_id": "language_corpus",
        "question": "What are the words that were paired with \"John\", list down 10 of them.",
        "ground_truth": "SELECT w2nd FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'john' ) LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word2 FROM word_pairs WHERE word1 = 'John' LIMIT 10;"
        ],
        "rule_sql": []
    },
    "6007": {
        "db_id": "books",
        "question": "What percentage of the total prices of all orders are shipped internationally?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SUM(CASE WHEN shipped_internationally = 1 THEN total_price ELSE 0 END) / SUM(total_price)) * 100 AS percentage_international FROM orders;"
        ],
        "rule_sql": []
    },
    "6944": {
        "db_id": "ice_hockey_draft",
        "question": "Name the Chilliwack Chiefs players who have scored 100 points or more in the NHL.",
        "ground_truth": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P >= 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM players WHERE team = 'Chilliwack Chiefs' AND points >= 100;"
        ],
        "rule_sql": []
    },
    "8982": {
        "db_id": "human_resources",
        "question": "What are the maximum and minimum salary range and position title of Bill Marlin?",
        "ground_truth": "SELECT T2.maxsalary, T2.minsalary, T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Bill' AND T1.lastname = 'Marlin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(salary) as max_salary, MIN(salary) as min_salary, position_title \nFROM employees \nWHERE first_name = 'Bill' AND last_name = 'Marlin' \nGROUP BY position_title"
        ],
        "rule_sql": []
    },
    "8694": {
        "db_id": "chicago_crime",
        "question": "List all the crimes of the narcotic type that exist.",
        "ground_truth": "SELECT secondary_description FROM IUCR WHERE primary_description = 'NARCOTICS' GROUP BY secondary_description",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM crimes WHERE type = 'narcotic';"
        ],
        "rule_sql": []
    },
    "7242": {
        "db_id": "works_cycles",
        "question": "Which Production Technician has the highest pay rate?",
        "ground_truth": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' ORDER BY T2.Rate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT TOP 1 FirstName, LastName, PayRate FROM Employees WHERE JobTitle = 'Production Technician' ORDER BY PayRate ASC;"
        ],
        "rule_sql": []
    },
    "2252": {
        "db_id": "movielens",
        "question": "What is the average occupation of users whose ratings are not more than 2 ?",
        "ground_truth": "SELECT AVG(T2.occupation) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating < 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(occupation) FROM users WHERE rating <= 2;"
        ],
        "rule_sql": []
    },
    "788": {
        "db_id": "social_media",
        "question": "Among all the tweets posted from Buenos Aires, how many of them were posted on Thursdays?",
        "ground_truth": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.Weekday = 'Thursday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE location = 'Buenos Aires' AND strftime('%w', created_at) = '4';"
        ],
        "rule_sql": []
    },
    "7088": {
        "db_id": "works_cycles",
        "question": "Add the number of businesses that indicate their home address as their address and those whose address corresponds to the shipping address.",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Name = 'Home' THEN 1 ELSE 0 END) , SUM(CASE WHEN T2.Name = 'Shipping' THEN 1 ELSE 0 END) FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE home_address = address OR address = shipping_address;"
        ],
        "rule_sql": []
    },
    "1311": {
        "db_id": "law_episode",
        "question": "What role does the tallest person play?",
        "ground_truth": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id ORDER BY T1.height_meters DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM people ORDER BY height ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8329": {
        "db_id": "mondial_geo",
        "question": "Which are the rivers that flows to Black Sea?",
        "ground_truth": "SELECT Name FROM river WHERE Sea = 'Black Sea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM rivers WHERE flows_to = 'Black Sea';"
        ],
        "rule_sql": []
    },
    "1976": {
        "db_id": "soccer_2016",
        "question": "Who is the eldest player and where did he/she come from?",
        "ground_truth": "SELECT T1.Player_Name, T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id ORDER BY T1.DOB LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, country FROM players ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9364": {
        "db_id": "movie_3",
        "question": "Compute the total payment made by Sarah Lewis for film rentals so far.",
        "ground_truth": "SELECT SUM(T3.amount) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN payment AS T3 ON T1.rental_id = T3.rental_id WHERE T2.first_name = 'SARAH' AND T2.last_name = 'LEWIS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payment WHERE customer_id = (SELECT customer_id FROM customer WHERE first_name = 'Sarah' AND last_name = 'Lewis')"
        ],
        "rule_sql": []
    },
    "960": {
        "db_id": "cs_semester",
        "question": "Among professors with the highest teachability, how many of their students have high salary?",
        "ground_truth": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM professors p\nJOIN students s ON p.professor_id = s.professor_id\nWHERE p.teachability = (SELECT MAX(teachability) FROM professors)\nAND s.salary > 50000;"
        ],
        "rule_sql": []
    },
    "9065": {
        "db_id": "bike_share_1",
        "question": "How many trips made by a subscriber started in August, 2013 from a station that can hold more than 20 bikes?",
        "ground_truth": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T1.id = T2.start_station_id WHERE T2.subscription_type = 'Subscriber' AND T2.start_date LIKE '8/%/2013%' AND T1.dock_count > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM trips t\nJOIN stations s ON t.start_station_id = s.station_id\nWHERE t.subscriber_type = 'Subscriber'\nAND strftime('%Y-%m', t.start_time) = '2013-08'\nAND s.dock_count > 20;"
        ],
        "rule_sql": []
    },
    "5075": {
        "db_id": "olympics",
        "question": "Provide the names of competitors who received a gold medal.",
        "ground_truth": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM competitors WHERE medal = 'gold';"
        ],
        "rule_sql": []
    },
    "7212": {
        "db_id": "works_cycles",
        "question": "List all of the credit cards that had expired by 2007.",
        "ground_truth": "SELECT CardNumber FROM CreditCard WHERE ExpYear < 2007",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM credit_cards WHERE expiration_year > 2007;"
        ],
        "rule_sql": []
    },
    "3866": {
        "db_id": "public_review_platform",
        "question": "Among the Yelp_Business in Arizona, how many of them closes at 12PM on Sundays?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM' AND T3.state LIKE 'AZ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM Yelp_Business \nWHERE state = 'Arizona' \nAND Sunday_close = '12:00 PM';"
        ],
        "rule_sql": []
    },
    "8783": {
        "db_id": "food_inspection",
        "question": "How many routine inspections did Tiramisu Kitchen have?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Routine - Unscheduled' AND T2.name = 'Tiramisu Kitchen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE restaurant_name = 'Tiramisu Kitchen' AND inspection_type = 'routine'"
        ],
        "rule_sql": []
    },
    "2433": {
        "db_id": "superstore",
        "question": "What is the profit from selling the \"O'Sullivan Living Dimensions 2-Shelf Bookcases\"?",
        "ground_truth": "SELECT DISTINCT T1.Profit FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price * quantity) AS profit FROM products WHERE product_name = \"O'Sullivan Living Dimensions 2-Shelf Bookcases\""
        ],
        "rule_sql": []
    },
    "336": {
        "db_id": "retail_complains",
        "question": "List all the issues of the complaints made by Kaitlyn Eliza Elliott.",
        "ground_truth": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kaitlyn' AND T1.middle = 'Eliza' AND T1.last = 'Elliott'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM complaints WHERE complainant_name = 'Kaitlyn Eliza Elliott';"
        ],
        "rule_sql": []
    },
    "3268": {
        "db_id": "donor",
        "question": "What is the sum of the total donated amounts paid through Amazon?",
        "ground_truth": "SELECT SUM(donation_to_project) + SUM(donation_optional_support) FROM donations WHERE payment_method = 'amazon'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM donations WHERE payment_method = 'Amazon'"
        ],
        "rule_sql": []
    },
    "2177": {
        "db_id": "world_development_indicators",
        "question": "List the series code of country with country notes description as \"Data sources : Eurostat\" and state the Wb2Code of these countries.",
        "ground_truth": "SELECT T2.seriescode, T1.Wb2Code FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data sources : Eurostat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT series_code, Wb2Code FROM countries WHERE country_notes = 'Data sources : Eurostat';"
        ],
        "rule_sql": []
    },
    "1241": {
        "db_id": "talkingdata",
        "question": "How many male users have a Galaxy Note 3?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 3' AND T1.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female' AND phone_model = 'Galaxy Note 3';"
        ],
        "rule_sql": []
    },
    "2793": {
        "db_id": "european_football_1",
        "question": "Which team had the most final-time home-team goals in the 2021 season's matches of the Bundesliga division?",
        "ground_truth": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021 ORDER BY T1.FTHG DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT home_team, COUNT(*) as goals \nFROM matches \nWHERE season = '2021' AND division = 'Bundesliga' \nGROUP BY home_team \nORDER BY goals DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6804": {
        "db_id": "retails",
        "question": "How many orders in 1998 had a total price under 950?",
        "ground_truth": "SELECT COUNT(o_orderkey) AS countorders FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1998' AND o_totalprice < 950",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE YEAR(order_date) = 1998 AND total_price > 950;"
        ],
        "rule_sql": []
    },
    "7852": {
        "db_id": "world",
        "question": "In English speaking countries, provide the difference between the number of countries with republic and constitutional monarchy as its government form.",
        "ground_truth": "SELECT COUNT(T1.GovernmentForm = 'Republic') - COUNT(T1.GovernmentForm = 'ConstitutionalMonarchy') FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM countries WHERE government_form = 'Republic' AND language = 'English') - \n    (SELECT COUNT(*) FROM countries WHERE government_form = 'Constitutional Monarchy' AND language = 'English') \nAS difference;"
        ],
        "rule_sql": []
    },
    "3983": {
        "db_id": "public_review_platform",
        "question": "For the business with great experience existed in Sun Lakes city, provide the user ID who gave review on it and user followers.",
        "ground_truth": "SELECT T3.user_id, T3.user_fans FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.city = 'Sun Lakes' AND T1.stars = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, followers FROM reviews WHERE city = 'Sun Lakes' AND experience = 'great' ORDER BY followers DESC;"
        ],
        "rule_sql": []
    },
    "7506": {
        "db_id": "image_and_language",
        "question": "How many times is the number of images containing \"broccoli\" than \"tomato\"?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'broccoli' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.OBJ_CLASS = 'tomato' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) times FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM images WHERE description LIKE '%broccoli%') / \n    (SELECT COUNT(*) FROM images WHERE description LIKE '%tomato%') AS ratio;"
        ],
        "rule_sql": []
    },
    "9223": {
        "db_id": "movie_3",
        "question": "Provide the email, address, city, and country of the customer Lillie Kim.",
        "ground_truth": "SELECT T1.email, T2.address, T3.city, T4.country FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T1.first_name = 'Lillie' AND T1.last_name = 'Kim'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email, address, city, country FROM customers WHERE first_name = 'Lillie' AND last_name = 'Kim'"
        ],
        "rule_sql": []
    },
    "2421": {
        "db_id": "superstore",
        "question": "Calculate the difference between the total sales in the East superstore and the total sales in the West superstore.",
        "ground_truth": "SELECT SUM(T1.Sales) - SUM(T2.Sales) AS difference FROM east_superstore AS T1 INNER JOIN west_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT SUM(sales) FROM superstore WHERE region = 'East') - \n    (SELECT SUM(sales) FROM superstore WHERE region = 'West') AS sales_difference;"
        ],
        "rule_sql": []
    },
    "2415": {
        "db_id": "superstore",
        "question": "Calculate the percentage of ordered office supplies products in the central and the south superstore.",
        "ground_truth": "SELECT CAST(SUM(CASE  WHEN T3.Category = 'Office Supplies' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Category) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    region,\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE category = 'Office Supplies') as percentage\nFROM orders \nWHERE category = 'Office Supplies' \nAND region IN ('Central', 'South')\nGROUP BY region;"
        ],
        "rule_sql": []
    },
    "5553": {
        "db_id": "menu",
        "question": "List the positions of the dish \"breaded veal cutlet with peas\" on every menu where it appeared.",
        "ground_truth": "SELECT T2.xpos, T2.ypos FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'breaded veal cutlet with peas'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_name, position FROM menu_items WHERE dish_name = 'breaded veal cutlet with peas' ORDER BY menu_name, position;"
        ],
        "rule_sql": []
    },
    "7420": {
        "db_id": "works_cycles",
        "question": "Among the employees in the Manufacturing group in 2007, how many of them are store contacts?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Person AS T3 ON T1.BusinessEntityID WHERE T3.PersonType = 'SC' AND T2.GroupName = 'Manufacturing' AND STRFTIME('%Y', T1.EndDate) >= '2007' AND STRFTIME('%Y', T1.StartDate) <= '2007'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM employees e\nJOIN employeeterritories et ON e.EmployeeID = et.EmployeeID\nJOIN territories t ON et.TerritoryID = t.TerritoryID\nJOIN region r ON t.RegionID = r.RegionID\nWHERE r.RegionDescription = 'Manufacturing' \nAND YEAR(e.HireDate) = 2007\nAND e.ContactTitle LIKE '%store%';"
        ],
        "rule_sql": []
    },
    "2865": {
        "db_id": "professional_basketball",
        "question": "What is the full name of the team that has the most players from UCLA?",
        "ground_truth": "SELECT T3.name FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.college = 'UCLA' GROUP BY T3.name ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.team_name \nFROM teams t \nJOIN players p ON t.team_id = p.team_id \nWHERE p.college = 'UCLA' \nGROUP BY t.team_id \nORDER BY COUNT(p.player_id) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3368": {
        "db_id": "video_games",
        "question": "Which company published the game with the most sales in North America?",
        "ground_truth": "SELECT T.publisher_name FROM ( SELECT T5.publisher_name, SUM(T2.num_sales) * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' GROUP BY T5.publisher_name ORDER BY SUM(T2.num_sales) * 100000 DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher FROM games ORDER BY na_sales DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7828": {
        "db_id": "world",
        "question": "Provide the name, capital city and its official language of the country with the highest life expectancy.",
        "ground_truth": "SELECT T1.Name, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.LifeExpectancy DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, capital, language FROM countries ORDER BY life_expectancy DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4718": {
        "db_id": "disney",
        "question": "Calculate the percentage of voice actors whose main character in the movie is in the Drama genre.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.genre = 'Drama' THEN T3.`voice-actor` ELSE NULL END) AS REAL) * 100 / COUNT(T3.`voice-actor`) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN `voice-actors` AS T3 ON T3.movie = T1.movie_title",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(DISTINCT va.voice_actor_id) * 100.0 / \n    (SELECT COUNT(DISTINCT voice_actor_id) FROM voice_actors) AS percentage\nFROM voice_actors va\nJOIN characters c ON va.character_id = c.character_id\nJOIN movies m ON c.movie_id = m.movie_id\nWHERE m.genre = 'Drama';"
        ],
        "rule_sql": []
    },
    "5510": {
        "db_id": "menu",
        "question": "List down the menu page IDs for menu sponsored by Occidental & Oriental?",
        "ground_truth": "SELECT T2.id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.sponsor = 'Occidental & Oriental'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_page_id FROM menu WHERE sponsor = 'Occidental & Oriental'"
        ],
        "rule_sql": []
    },
    "3815": {
        "db_id": "public_review_platform",
        "question": "How many businesses in AZ state have the beer_and_wine attribute?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'beer_and_wine' AND T1.state LIKE 'AZ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE state = 'AZ' AND beer_and_wine = 'yes';"
        ],
        "rule_sql": []
    },
    "7638": {
        "db_id": "hockey",
        "question": "For all players who becomes coach after retirement, state the given name of coach and which teams and years did they coach?",
        "ground_truth": "SELECT DISTINCT T2.nameGiven, T3.name, T3.year FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.playerID IS NOT NULL AND T2.coachID IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.given_name, t.team_name, c.coach_year \nFROM coaches c \nJOIN teams t ON c.team_id = t.team_id \nWHERE c.player_id IS NOT NULL \nORDER BY c.given_name, c.coach_year;"
        ],
        "rule_sql": []
    },
    "1327": {
        "db_id": "law_episode",
        "question": "What was the role of Jason Kuschner in episode 9?",
        "ground_truth": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 9 AND T2.name = 'Jason Kuschner'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM episodes WHERE episode_number = 9 AND name = 'Jason Kuschner';"
        ],
        "rule_sql": []
    },
    "345": {
        "db_id": "retail_complains",
        "question": "What is the first name of clients who have the highest priority?",
        "ground_truth": "SELECT T1.first FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.priority = ( SELECT MAX(priority) FROM callcenterlogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM clients ORDER BY priority ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9408": {
        "db_id": "movie_3",
        "question": "Give the duration of the film starred by Nick Wahlberg with the highest rental rate.",
        "ground_truth": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Nick' AND T1.last_name = 'Wahlberg' ORDER BY T3.rental_rate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT length FROM film WHERE actor = 'Nick Wahlberg' ORDER BY rental_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5072": {
        "db_id": "olympics",
        "question": "What is the average weight of the competitors who won a silver medal?",
        "ground_truth": "SELECT AVG(T1.weight) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Silver'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(weight) FROM competitors WHERE medal = 'gold';"
        ],
        "rule_sql": []
    },
    "2255": {
        "db_id": "movielens",
        "question": "List the top 5 movies from other countries which to language is not in English.",
        "ground_truth": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'other' AND T2.isEnglish = 'F' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, country, language FROM movies WHERE language != 'English' ORDER BY rating DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "1467": {
        "db_id": "synthea",
        "question": "How long did Berry Keebler take the Acetaminophen 160 MG when he was admitted due to acute bronchitis?",
        "ground_truth": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS takenDays FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Berry' AND T1.last = 'Keebler' AND T2.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT duration FROM medications WHERE patient_name = 'Berry Keebler' AND medication_name = 'Acetaminophen 160 MG' AND admission_reason = 'acute bronchitis';"
        ],
        "rule_sql": []
    },
    "9277": {
        "db_id": "movie_3",
        "question": "What is the name of the client who has the largest quantity of rented material without returning it?",
        "ground_truth": "SELECT T.first_name FROM ( SELECT T2.first_name, COUNT(T1.rental_date) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT client_name FROM rentals ORDER BY quantity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2371": {
        "db_id": "superstore",
        "question": "Add the total profit of Patrick Gardner in the Central region.",
        "ground_truth": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Patrick Gardner' AND T1.Region = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(profit) FROM sales WHERE employee_name = 'Patrick Gardner' AND region = 'Central';"
        ],
        "rule_sql": []
    },
    "2685": {
        "db_id": "regional_sales",
        "question": "How many stores procured products on October 27, 2018, in the city of Oregon?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.`City Name` = 'Orlando' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stores s JOIN procurements p ON s.store_id = p.store_id WHERE p.procurement_date = '2018-10-27' AND s.city = 'Oregon';"
        ],
        "rule_sql": []
    },
    "6750": {
        "db_id": "retails",
        "question": "List down the countries that are located in Asia.",
        "ground_truth": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM countries WHERE continent = 'Europe';"
        ],
        "rule_sql": []
    },
    "7314": {
        "db_id": "works_cycles",
        "question": "List all staff in the Shipping and Receiving department who are hired in 2009.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID WHERE STRFTIME('%Y', T2.HireDate) = '2009' AND T4.Name = 'Shipping and Receiving'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM staff WHERE department = 'Shipping and Receiving' AND hire_date LIKE '2008%';"
        ],
        "rule_sql": []
    },
    "5705": {
        "db_id": "language_corpus",
        "question": "What is the total word of title \"Adam\" and \"Acampada\"?",
        "ground_truth": "SELECT SUM(words) FROM pages WHERE title IN ('Adam', 'Acampada')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(word_count) FROM titles WHERE title IN ('Adam', 'Acampada');"
        ],
        "rule_sql": []
    },
    "2031": {
        "db_id": "soccer_2016",
        "question": "What is the role of W Jaffer in season year 2012?",
        "ground_truth": "SELECT T4.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id INNER JOIN Season AS T5 ON T3.Season_Id = T5.Season_Id WHERE T1.Player_name = 'W Jaffer' AND T5.Season_Year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM actors WHERE name = 'W Jaffer' AND season_year = 2012;"
        ],
        "rule_sql": []
    },
    "5718": {
        "db_id": "language_corpus",
        "question": "List down the revision page id of titles where \"fresc\" appears.",
        "ground_truth": "SELECT T3.revision FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'fresc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_id FROM revisions WHERE title LIKE '%fresc%';"
        ],
        "rule_sql": []
    },
    "7575": {
        "db_id": "image_and_language",
        "question": "State the coordinate of X and Y for the object with the attribute of 'sparse' in image 1.",
        "ground_truth": "SELECT T3.OBJ_SAMPLE_ID, T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.IMG_ID = 1 AND T1.ATT_CLASS = 'sparse'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT x_coordinate, y_coordinate FROM objects WHERE attribute = 'sparse' AND image_id = 1;"
        ],
        "rule_sql": []
    },
    "1271": {
        "db_id": "law_episode",
        "question": "What are the names of the person that were not credited at the end of episode tt0629391?",
        "ground_truth": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.credited = 'false' AND T1.episode_id = 'tt0629391'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM persons WHERE person_id NOT IN (SELECT person_id FROM credits WHERE episode_id = 'tt0629391')"
        ],
        "rule_sql": []
    },
    "6811": {
        "db_id": "retails",
        "question": "What is the nationality of supplier number 1?",
        "ground_truth": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM suppliers WHERE supplier_id = 1;"
        ],
        "rule_sql": []
    },
    "8717": {
        "db_id": "chicago_crime",
        "question": "What are the general and specific descriptions of the most common crime incidents that happened in an aircraft?",
        "ground_truth": "SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT crime_type, description FROM crimes WHERE location = 'aircraft' ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1643": {
        "db_id": "car_retails",
        "question": "For the order has the most product ordered, name the customer who placed the order.",
        "ground_truth": "SELECT T2.firstName, T2.lastName FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.employeeNumber = ( SELECT MAX(employeeNumber) FROM employees )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.customer_name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nORDER BY o.order_date DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5049": {
        "db_id": "olympics",
        "question": "What is the name of the oldest competitor?",
        "ground_truth": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM competitors ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7350": {
        "db_id": "works_cycles",
        "question": "How many employees who began working in 2009 or later had night shifts?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId WHERE T2.ShiftId = 3 AND STRFTIME('%Y', T2.StartTime) >= '2009'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE hire_date >= '2009-01-01' AND shift_type = 'night';"
        ],
        "rule_sql": []
    },
    "5907": {
        "db_id": "airline",
        "question": "Provide the air carrier description of the flight with a tail number N922US from Phoenix.",
        "ground_truth": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.TAIL_NUM = 'N922US' AND T1.ORIGIN = 'PHX' GROUP BY T2.Description",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT carrier_description FROM flights WHERE tail_number = 'N922US' AND origin_city = 'Phoenix';"
        ],
        "rule_sql": []
    },
    "9323": {
        "db_id": "movie_3",
        "question": "How many id movies have category id 11?",
        "ground_truth": "SELECT COUNT(film_id) FROM film_category WHERE category_id = 11",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE category_id = 11;"
        ],
        "rule_sql": []
    },
    "8458": {
        "db_id": "mondial_geo",
        "question": "What percentage of nations have achieved independence since 1993 and practice parliamentary democracy? Please include any three parliament-based democracies that attained independence after 1993.",
        "ground_truth": "SELECT SUM(IIF(government = 'parliamentary democracy', 1, 0)) , CAST(SUM(IIF(government = 'parliamentary democracy', 1, 0)) AS REAL) * 100 / COUNT(*) FROM politics AS t1 WHERE STRFTIME('%Y', independence) >= '1993'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM nations)) AS percentage,\n    name, government_type, independence_year\nFROM nations \nWHERE independence_year > 1993 \n    AND government_type = 'Parliamentary Democracy'\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "5694": {
        "db_id": "language_corpus",
        "question": "Calculate the average number of the word occurrences in which \u2018system\u2019 appeared as the first word in the pair.",
        "ground_truth": "SELECT AVG(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w1st = ( SELECT wid FROM words WHERE word = 'sistema' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(occurrence) FROM word_pairs WHERE word1 = 'system';"
        ],
        "rule_sql": []
    },
    "4597": {
        "db_id": "mental_health_survey",
        "question": "How many questions did user No.5 answer?",
        "ground_truth": "SELECT COUNT(QuestionID) FROM Answer WHERE UserID = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM answers WHERE user_id = 5;"
        ],
        "rule_sql": []
    },
    "2312": {
        "db_id": "movielens",
        "question": "How many American comedies are there?",
        "ground_truth": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.genre = 'comedy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE country = 'USA' AND genre = 'Comedy';"
        ],
        "rule_sql": []
    },
    "1048": {
        "db_id": "talkingdata",
        "question": "How many male users are active in the events held on 5/1/2016?",
        "ground_truth": "SELECT COUNT(T3.gender) FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T2.event_id = T1.event_id INNER JOIN gender_age AS T3 ON T3.device_id = T2.device_id WHERE T1.is_active = 1 AND T3.gender = 'M' AND T2.timestamp LIKE '2016-05-01%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male' AND status = 'active' AND event_date = '5/1/2016';"
        ],
        "rule_sql": []
    },
    "6148": {
        "db_id": "food_inspection_2",
        "question": "Out of all the short form complaint inspections done by David Hodges, how many businesses passed?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.license_no) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'David' AND T1.last_name = 'Hodges' AND T1.employee_id = 153225 AND T2.inspection_type = 'Short Form Complaint' AND T2.results = 'Pass'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM inspections \nWHERE inspector_name = 'David Hodges' \nAND inspection_type = 'short form complaint' \nAND result = 'pass'"
        ],
        "rule_sql": []
    },
    "1393": {
        "db_id": "synthea",
        "question": "What is the most common condition among the female Americans?",
        "ground_truth": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.gender = 'F' AND T1.ethnicity = 'american' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT condition, COUNT(*) as count FROM patients WHERE gender = 'male' AND nationality = 'British' GROUP BY condition ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1889": {
        "db_id": "soccer_2016",
        "question": "Count the total venues located in Pune City.",
        "ground_truth": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM venues WHERE city = 'Mumbai';"
        ],
        "rule_sql": []
    },
    "899": {
        "db_id": "cs_semester",
        "question": "What is the name of the course with the highest satisfaction from students?",
        "ground_truth": "SELECT DISTINCT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.sat = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses ORDER BY satisfaction DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "202": {
        "db_id": "book_publishing_company",
        "question": "In which city is the store with the highest total sales quantity located?",
        "ground_truth": "SELECT T2.city FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id GROUP BY T2.city ORDER BY SUM(T1.qty) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM stores ORDER BY sales_quantity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9095": {
        "db_id": "bike_share_1",
        "question": "What is the shortest trip made starting from Franklin at Maple and what is the maximum wind speed at that date?",
        "ground_truth": "SELECT MIN(T1.duration), MAX(T2.max_wind_Speed_mph) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_station_name = 'Franklin at Maple' AND T2.date = '9/4/2013'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(t.duration) as shortest_trip, MAX(w.wind_speed) as max_wind_speed\nFROM trips t\nJOIN weather w ON t.start_date = w.date\nWHERE t.start_station = 'Franklin at Maple'\nGROUP BY t.start_date\nORDER BY shortest_trip ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3320": {
        "db_id": "video_games",
        "question": "How many publishers have published more than 3 puzzle games?",
        "ground_truth": "SELECT COUNT(T.publisher_name) FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name HAVING COUNT(DISTINCT T1.id) > 3 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM publishers WHERE publisher_id IN (SELECT publisher_id FROM games WHERE genre = 'Puzzle' GROUP BY publisher_id HAVING COUNT(*) > 3);"
        ],
        "rule_sql": []
    },
    "4910": {
        "db_id": "legislator",
        "question": "What is the contact form of the legislator named Rick Crawford?",
        "ground_truth": "SELECT T2.contact_form FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Rick Crawford'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT contact_form FROM legislators WHERE first_name = 'Rick' AND last_name = 'Crawford';"
        ],
        "rule_sql": []
    },
    "5008": {
        "db_id": "olympics",
        "question": "When did Roma host the Olympic Games?",
        "ground_truth": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Roma'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM olympic_games WHERE city = 'Rome' AND host_country = 'Italy';"
        ],
        "rule_sql": []
    },
    "4220": {
        "db_id": "simpson_episodes",
        "question": "Name the person, award, organization, result and credited status of the assistant director in S20-E13.",
        "ground_truth": "SELECT T1.person, T1.award, T1.organization, T1.result, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.episode_id = 'S20-E13' AND T2.role = 'assistant director';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT person_name, award_name, organization_name, result, credited_status FROM assistant_directors WHERE episode = 'S20-E13';"
        ],
        "rule_sql": []
    },
    "4490": {
        "db_id": "student_loan",
        "question": "Calculate the number of students who are not disabled.",
        "ground_truth": "SELECT COUNT(CASE  WHEN T2.name IS NULL THEN T1.name END) AS \"number\" FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE disabled = 1;"
        ],
        "rule_sql": []
    },
    "7042": {
        "db_id": "works_cycles",
        "question": "What is the total number of employees that worked in the Finance department?",
        "ground_truth": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (DepartmentID) WHERE T1.Name = 'Finance'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE department = 'Finance';"
        ],
        "rule_sql": []
    },
    "2652": {
        "db_id": "regional_sales",
        "question": "How many orders made by Rochester Ltd?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.`Customer Names` = 'Rochester Ltd' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Rochester Ltd';"
        ],
        "rule_sql": []
    },
    "4298": {
        "db_id": "simpson_episodes",
        "question": "List all of the information about the music department's casts and crews.",
        "ground_truth": "SELECT DISTINCT person, name, birthdate, birth_name, birth_place , birth_region, birth_country, height_meters, nickname FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Music Department';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM casts WHERE department = 'music';"
        ],
        "rule_sql": []
    },
    "5520": {
        "db_id": "menu",
        "question": "What is the highest price of dishes with menu item ID 1 to 5?",
        "ground_truth": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.id BETWEEN 1 AND 5 ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(price) FROM dishes WHERE menu_item_id BETWEEN 1 AND 5;"
        ],
        "rule_sql": []
    },
    "2444": {
        "db_id": "superstore",
        "question": "How many orders were made by Alan Barnes in 2015 at the Central superstore?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Alan Barnes' AND STRFTIME('%Y', T2.`Order Date`) = '2015'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Alan Barnes' AND year = 2015 AND store_name = 'Central superstore';"
        ],
        "rule_sql": []
    },
    "7673": {
        "db_id": "hockey",
        "question": "Please list the nicknames of the players who have won the All-Rookie award and are born in March.",
        "ground_truth": "SELECT DISTINCT T1.nameNick FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthMon = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nickname FROM players WHERE award = 'All-Rookie' AND birth_month = 'March';"
        ],
        "rule_sql": []
    },
    "7798": {
        "db_id": "hockey",
        "question": "How many Haileybury Hockey Club goalies became a hall of famer?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Haileybury Hockey Club' AND T2.hofID IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players p\nJOIN hall_of_famers h ON p.player_id = h.player_id\nWHERE p.team = 'Haileybury Hockey Club' AND p.position = 'goalie';"
        ],
        "rule_sql": []
    },
    "505": {
        "db_id": "movies_4",
        "question": "List down the movies produced by Lucasfilm.",
        "ground_truth": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Lucasfilm'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM movies WHERE director = 'Lucasfilm';"
        ],
        "rule_sql": []
    },
    "2329": {
        "db_id": "movielens",
        "question": "How many users have rated 1 each for the UK's second newest movies with a running time of 2?",
        "ground_truth": "SELECT COUNT(T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK' AND T1.runningtime = 2 AND T2.rating = 1 AND T1.year = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM users u\nJOIN ratings r ON u.user_id = r.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.country = 'UK' \nAND m.running_time = 2\nAND r.rating = 1\nORDER BY m.release_date DESC\nLIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "2844": {
        "db_id": "professional_basketball",
        "question": "In 1975, what was the average point of all-star players coming from the USA?",
        "ground_truth": "SELECT AVG(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1975",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(points) FROM all_star_players WHERE year = 1975 AND country = 'USA';"
        ],
        "rule_sql": []
    },
    "3844": {
        "db_id": "public_review_platform",
        "question": "How many Yelp_Businesses are there in Arizona in total?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Businesses WHERE state = 'AZ';"
        ],
        "rule_sql": []
    },
    "5940": {
        "db_id": "books",
        "question": "Which country does \u017dirovnica city belong to?",
        "ground_truth": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = '\u017dirovnica'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM cities WHERE city_name = '\u017dirovnica';"
        ],
        "rule_sql": []
    },
    "695": {
        "db_id": "trains",
        "question": "Please list the IDs of all the cars on train no.1 that have 2 wheels.",
        "ground_truth": "SELECT id FROM cars WHERE train_id = 1 AND wheels = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT car_id FROM trains WHERE train_number = 1 AND wheels = 2;"
        ],
        "rule_sql": []
    },
    "2696": {
        "db_id": "regional_sales",
        "question": "At what Latitude and Longitude is the store that has used the WARE-PUJ1005 warehouse the fewest times?",
        "ground_truth": "SELECT T2.Latitude, T2.Longitude FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.WarehouseCode = 'WARE-PUJ1005' GROUP BY T2.StoreID ORDER BY COUNT(T1.WarehouseCode) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.Latitude, s.Longitude\nFROM Stores s\nJOIN WarehouseUsage wu ON s.StoreID = wu.StoreID\nWHERE wu.WarehouseID = 'WARE-PUJ1005'\nORDER BY COUNT(wu.UsageID) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4463": {
        "db_id": "student_loan",
        "question": "List at least 5 students who has the longest absense from schoool?",
        "ground_truth": "SELECT name FROM longest_absense_from_school ORDER BY month DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_name, MAX(absence_days) as longest_absence FROM student_attendance GROUP BY student_name ORDER BY longest_absence DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "5656": {
        "db_id": "shipping",
        "question": "How many shipments did Zachery Hicks transport goods to New York in the year 2016?",
        "ground_truth": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks' AND T1.city_name = 'New York' AND STRFTIME('%Y', T2.ship_date) = '2016'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM shipments s\nJOIN transporters t ON s.transporter_id = t.id\nJOIN destinations d ON s.destination_id = d.id\nWHERE t.first_name = 'Zachery' AND t.last_name = 'Hicks'\nAND d.city = 'New York'\nAND s.shipment_date LIKE '2016%';"
        ],
        "rule_sql": []
    },
    "3541": {
        "db_id": "authors",
        "question": "Write down the conference full name of \"ICWE\" and it's homepage address.",
        "ground_truth": "SELECT FullName, Homepage FROM Conference WHERE ShortName = 'ICWE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference_name, homepage FROM conferences WHERE abbreviation = 'ICWE';"
        ],
        "rule_sql": []
    },
    "2963": {
        "db_id": "shakespeare",
        "question": "For how many times has the scene \"OLIVIA\u2019S house.\" appeared in Twelfth Night?",
        "ground_truth": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'OLIVIA\u2019S house.' AND T1.Title = 'Twelfth Night'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM scenes WHERE scene_name = 'OLIVIA''S house.' AND play_title = 'Twelfth Night';"
        ],
        "rule_sql": []
    },
    "3643": {
        "db_id": "authors",
        "question": "Which paper published by the \"TUBERCLE LUNG DIS\" journal is the oldest?",
        "ground_truth": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'TUBERCLE LUNG DIS' ORDER BY T2.Year ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM papers WHERE journal = 'TUBERCLE LUNG DIS' ORDER BY publication_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3149": {
        "db_id": "donor",
        "question": "Calculate the total amount of donations made in 2011 for an honoree with payment via campaign page.",
        "ground_truth": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2011%' AND via_giving_page = 't' AND for_honoree = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM donations WHERE year = 2011 AND honoree_id IS NOT NULL AND payment_method = 'campaign_page';"
        ],
        "rule_sql": []
    },
    "6273": {
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency had a bigger number of coins circulating in the market and in the general public's hands on 2013/4/28, Bitcoin or Litecoin?",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name IN ('Bitcoin', 'Litecoin') ORDER BY T2.circulating_supply DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c.name,\n    c.symbol,\n    m.market_cap\nFROM \n    cryptocurrencies c\nJOIN \n    market_data m ON c.id = m.cryptocurrency_id\nWHERE \n    m.date = '2013-04-28'\n    AND c.name IN ('Bitcoin', 'Litecoin')\nORDER BY \n    m.market_cap DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7026": {
        "db_id": "works_cycles",
        "question": "How many products with the highest unit price were ordered?",
        "ground_truth": "SELECT OrderQty FROM PurchaseOrderDetail ORDER BY UnitPrice DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE unit_price = (SELECT MAX(unit_price) FROM products);"
        ],
        "rule_sql": []
    },
    "5864": {
        "db_id": "airline",
        "question": "What are the names of the top 5 airlines with the highest number of aircraft?",
        "ground_truth": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code GROUP BY T2.Description ORDER BY T1.TAIL_NUM DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM airlines ORDER BY aircraft_count DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "1987": {
        "db_id": "soccer_2016",
        "question": "How many of the matches are Superover?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.win_type = 'wickets' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE superover = 'Yes';"
        ],
        "rule_sql": []
    },
    "5240": {
        "db_id": "beer_factory",
        "question": "Among the users that permit the company to send regular emails to them, how many of them had made a transaction with a Visa card in July, 2014?",
        "ground_truth": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM users u\nJOIN transactions t ON u.user_id = t.user_id\nWHERE u.email_permission = 1\nAND t.card_type = 'Visa'\nAND t.transaction_date LIKE '2014-07%';"
        ],
        "rule_sql": []
    },
    "263": {
        "db_id": "retail_complains",
        "question": "How many days delay for the complaint call from Mr. Brantley Julian Stanley on 2012/5/18?",
        "ground_truth": "SELECT 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) AS days FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2012-05-18' AND T1.sex = 'Male' AND T1.first = 'Brantley' AND T1.middle = 'Julian' AND T1.last = 'Stanley'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DATEDIFF(complaint_date, '2012-05-18') AS delay_days \nFROM complaints \nWHERE customer_name = 'Mr. Brantley Julian Stanley' \nAND complaint_date = '2012-05-18';"
        ],
        "rule_sql": []
    },
    "8314": {
        "db_id": "mondial_geo",
        "question": "How many countries on the European Continent has an infant mortality rate per thousand of over 100?",
        "ground_truth": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Infant_Mortality < 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM countries WHERE continent = 'Europe' AND infant_mortality > 100;"
        ],
        "rule_sql": []
    },
    "3329": {
        "db_id": "video_games",
        "question": "Show the number of games which were released on X360 in 2010.",
        "ground_truth": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'X360' AND T2.release_year = 2010",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE platform = 'X360' AND year = 2010;"
        ],
        "rule_sql": []
    },
    "5688": {
        "db_id": "language_corpus",
        "question": "List the titles for all Catalan language wikipedia page from revision page id 106600 to 106700.",
        "ground_truth": "SELECT title FROM pages WHERE revision BETWEEN 106600 AND 106700",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM wikipedia WHERE language = 'Catalan' AND page_id BETWEEN 106600 AND 106700;"
        ],
        "rule_sql": []
    },
    "9035": {
        "db_id": "bike_share_1",
        "question": "Find the longest ride on foggy day. What were the mean visibility, mean wind speed, and weather event during that ride? Also, list the coordinates and names of the start and end stations.",
        "ground_truth": "SELECT T3.mean_visibility_miles, T3.mean_wind_speed_mph, T3.events, T1.lat, T1.long , T2.start_station_name, T2.end_station_name FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.events = 'Fog' ORDER BY T2.duration DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    t.duration,\n    AVG(w.visibility) AS mean_visibility,\n    AVG(w.wind_speed) AS mean_wind_speed,\n    w.weather_event,\n    ss.latitude AS start_lat,\n    ss.longitude AS start_lng,\n    ss.name AS start_station,\n    es.latitude AS end_lat,\n    es.longitude AS end_lng,\n    es.name AS end_station\nFROM trips t\nJOIN weather w ON t.start_time = w.date\nJOIN stations ss ON t.start_station_id = ss.id\nJOIN stations es ON t.end_station_id = es.id\nWHERE w.weather_event = 'Fog'\nORDER BY t.duration DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8232": {
        "db_id": "mondial_geo",
        "question": "What is the number of growth population for country with the lowest infant mortality?",
        "ground_truth": "SELECT T2.Population_Growth * T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Infant_Mortality IS NOT NULL ORDER BY T2.Infant_Mortality ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population_growth \nFROM country \nWHERE infant_mortality = (SELECT MIN(infant_mortality) FROM country);"
        ],
        "rule_sql": []
    },
    "2908": {
        "db_id": "professional_basketball",
        "question": "What were the difference of the CHS team's winning rate between 1946 and 1947 in the post-season series games? Please provide your answer in percentages.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1947 THEN 1 ELSE 0 END) - CAST(SUM(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1946 THEN 1 ELSE 0 END) FROM series_post",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN year = 1946 AND team = 'CHS' AND result = 'win' THEN 1 ELSE 0 END) / COUNT(CASE WHEN year = 1946 AND team = 'CHS' THEN 1 END)) * 100 -\n    (SUM(CASE WHEN year = 1947 AND team = 'CHS' AND result = 'win' THEN 1 ELSE 0 END) / COUNT(CASE WHEN year = 1947 AND team = 'CHS' THEN 1 END)) * 100 \n    AS winning_rate_difference\nFROM games\nWHERE team = 'CHS' AND year IN (1946, 1947) AND series_type = 'post-season';"
        ],
        "rule_sql": []
    },
    "5151": {
        "db_id": "address",
        "question": "Give the name of the country and state of the city with elevation of 1039.",
        "ground_truth": "SELECT DISTINCT T1.name, T2.state FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T3.elevation = 1039",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, state FROM cities WHERE elevation = 1039;"
        ],
        "rule_sql": []
    },
    "7943": {
        "db_id": "music_platform_2",
        "question": "How many total reviews runned at in June 2022 were added to the podcasts?",
        "ground_truth": "SELECT SUM(reviews_added) FROM runs WHERE run_at LIKE '2022-06-%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE strftime('%Y-%m', review_date) = '2022-06' AND podcast_id IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "6155": {
        "db_id": "food_inspection_2",
        "question": "List the full names of the employees who were responsible for inspecting Taqueria La Paz.",
        "ground_truth": "SELECT DISTINCT T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'TAQUERIA LA PAZ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE inspection_site = 'Taqueria La Paz';"
        ],
        "rule_sql": []
    },
    "8966": {
        "db_id": "human_resources",
        "question": "How much is the minimum salary given to the position with the most complex work?",
        "ground_truth": "SELECT minsalary FROM position ORDER BY educationrequired DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(salary) FROM positions WHERE work_complexity = (SELECT MAX(work_complexity) FROM positions);"
        ],
        "rule_sql": []
    },
    "5540": {
        "db_id": "menu",
        "question": "Calculate the image area of the page menu for the dish named \"Baked Stuffed Mullet & Sauce Pomard\". Please include the page number and image ID.",
        "ground_truth": "SELECT T1.full_height * T1.full_width, T1.page_number, T1.image_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Baked Stuffed Mullet & Sauce Pomard'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_number, image_id, width * height AS image_area FROM pages JOIN images ON pages.page_id = images.page_id JOIN dishes ON images.dish_id = dishes.dish_id WHERE dish_name = 'Baked Stuffed Mullet & Sauce Pomard' AND menu_type = 'page menu';"
        ],
        "rule_sql": []
    },
    "391": {
        "db_id": "retail_complains",
        "question": "In 2015, how many complaints about Billing disputes were sent by clients in Portland?",
        "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Portland' AND T2.`Date received` LIKE '2015%' AND T2.Issue = 'Billing disputes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM complaints WHERE year = 2015 AND complaint_type = 'Billing disputes' AND city = 'Portland';"
        ],
        "rule_sql": []
    },
    "2728": {
        "db_id": "regional_sales",
        "question": "How many orders were shipped by the sales team with the highest amount of shipped orders in 2020? Give the name of the said sales team.",
        "ground_truth": "SELECT COUNT(T1.OrderNumber), T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.ShipDate LIKE '%/%/20' GROUP BY T2.`Sales Team` ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales_team, COUNT(*) as order_count\nFROM orders\nWHERE YEAR(shipped_date) = 2020\nGROUP BY sales_team\nORDER BY order_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7304": {
        "db_id": "works_cycles",
        "question": "Among the salable products from the mountain product line, how many of them have the most reviews?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.ProductLine = 'M' THEN 1 ELSE 0 END) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM products \nWHERE product_line = 'Mountain' \nAND salable = 1 \nORDER BY review_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4244": {
        "db_id": "simpson_episodes",
        "question": "Who from The simpson 20s: Season 20 cast and crew was born in October 29, 1957 in Chicago, Illinois?",
        "ground_truth": "SELECT name FROM Person WHERE birthdate = '1957-10-29' AND birth_place = 'Chicago' AND birth_region = 'Illinois';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM simpsons_cast_crew WHERE birth_date = 'October 29, 1957' AND birth_place = 'Chicago, Illinois' AND season = 20"
        ],
        "rule_sql": []
    },
    "4707": {
        "db_id": "disney",
        "question": "Name the villain of the movie with Scott Weinger and Brad Kane as voice actors.",
        "ground_truth": "SELECT T1.villian FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T2.`voice-actor` = 'Scott Weinger Brad Kane'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT villain_name FROM movies WHERE voice_actors = 'Scott Weinger' AND voice_actors = 'Brad Kane'"
        ],
        "rule_sql": []
    },
    "1106": {
        "db_id": "talkingdata",
        "question": "List at least 15 phone models released under the OPPO brand.",
        "ground_truth": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT model FROM phones WHERE brand = 'OPPO' LIMIT 10;"
        ],
        "rule_sql": []
    },
    "5814": {
        "db_id": "language_corpus",
        "question": "Please list the page IDs of all the Wikipedia pages that have the word \"nombre\" appeared on it.",
        "ground_truth": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_id FROM pages WHERE content LIKE '%nombre%';"
        ],
        "rule_sql": []
    },
    "8849": {
        "db_id": "food_inspection",
        "question": "Among the owners from Cameron Park, what is the business name of the business with a score of 100?",
        "ground_truth": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_city = 'Cameron Park' AND T1.score = 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name FROM businesses WHERE owner_city = 'Cameron Park' AND score = 100;"
        ],
        "rule_sql": []
    },
    "6062": {
        "db_id": "books",
        "question": "List all books authored by Tom Clancy.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Tom Clancy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM books WHERE author = 'Stephen King';"
        ],
        "rule_sql": []
    },
    "1737": {
        "db_id": "restaurant",
        "question": "List all of the restaurants on Park St.",
        "ground_truth": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM restaurants WHERE street = 'Park St';"
        ],
        "rule_sql": []
    },
    "5903": {
        "db_id": "airline",
        "question": "What is the tail number of the flight with air carrier named Iscargo Hf: ICQ and arrival time of 1000 and below?",
        "ground_truth": "SELECT T2.TAIL_NUM FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_TIME <= 1000 AND T1.Description = 'Iscargo Hf: ICQ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT tail_number FROM flights WHERE air_carrier = 'Iscargo Hf: ICQ' AND arrival_time <= 1000;"
        ],
        "rule_sql": []
    },
    "7777": {
        "db_id": "hockey",
        "question": "In the year that the Montreal Canadiens had 24 penalty minutes in the Stanley Cup finals, how many wins did the team had in total?",
        "ground_truth": "SELECT T2.W FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 24",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT wins FROM teams WHERE team_name = 'Montreal Canadiens' AND penalty_minutes = 24 AND competition = 'Stanley Cup finals';"
        ],
        "rule_sql": []
    },
    "7356": {
        "db_id": "works_cycles",
        "question": "What goods were sold to customers in accordance with sales order number 43660?",
        "ground_truth": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesOrderID = 43660",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM customers WHERE order_number = 43660;"
        ],
        "rule_sql": []
    },
    "8272": {
        "db_id": "mondial_geo",
        "question": "Which two countries does the Detroit River flow through? Give the full name of the country.",
        "ground_truth": "SELECT T3.Name FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T2.Name = 'Detroit River'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM rivers WHERE name = 'Detroit River' LIMIT 2;"
        ],
        "rule_sql": []
    },
    "5776": {
        "db_id": "language_corpus",
        "question": "What is the occurrence of the word \"nombre\"?",
        "ground_truth": "SELECT occurrences FROM words WHERE word = 'nombre'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM table_name WHERE column_name = 'nombre';"
        ],
        "rule_sql": []
    },
    "3737": {
        "db_id": "college_completion",
        "question": "Among the states that start with letter A and attained a national sector average of 16.5, give the number of degree-seeking students in the cohort of those students in 2012 .",
        "ground_truth": "SELECT SUM(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state LIKE 'A%' AND T1.awards_per_natl_value = 16.5 AND T2.year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE state LIKE 'A%' AND national_sector_average = 16.5 AND cohort_year = 2012 AND degree_seeking = 1;"
        ],
        "rule_sql": []
    },
    "2097": {
        "db_id": "world_development_indicators",
        "question": "Among the countries in the High income: OECD group whose currency unit is Euro, how many of them have a note on the series code SP.DYN.AMRT.FE?",
        "ground_truth": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'High income: OECD' AND T1.CurrencyUnit = 'Euro' AND T2.Seriescode = 'SP.DYN.AMRT.FE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countries c\nJOIN economy e ON c.country_code = e.country_code\nWHERE c.income_group = 'High income: OECD'\nAND c.currency_unit = 'Euro'\nAND e.series_code = 'SP.DYN.AMRT.FE'\nAND e.note IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "2259": {
        "db_id": "movielens",
        "question": "List the id of male users who gave ratings of less than 3 to French movies with running time of 2.",
        "ground_truth": "SELECT T1.userid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T1.userid = T3.userid WHERE T2.country = 'France' AND T2.runningtime = 2 AND T1.rating < 3 AND T3.u_gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id FROM users WHERE gender = 'male' AND rating < 3 AND movie_language = 'French' AND running_time = 2;"
        ],
        "rule_sql": []
    },
    "3761": {
        "db_id": "public_review_platform",
        "question": "How many users have \"uber\" number of fans?",
        "ground_truth": "SELECT COUNT(user_id) FROM Users WHERE user_fans LIKE 'Uber'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE fans = 'uber';"
        ],
        "rule_sql": []
    },
    "7922": {
        "db_id": "music_platform_2",
        "question": "Name all the categories for podcast titled 'I Heart My Life Show'.",
        "ground_truth": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'I Heart My Life Show'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM podcasts WHERE title = 'I Heart My Life Show';"
        ],
        "rule_sql": []
    },
    "7037": {
        "db_id": "works_cycles",
        "question": "How many active employees whose payrate is equal or below 30 per hour.",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.Rate <= 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE status = 'active' AND payrate > 30;"
        ],
        "rule_sql": []
    },
    "4212": {
        "db_id": "simpson_episodes",
        "question": "In Season 20 Episode 11, how many times was Doofus included in the credit list?",
        "ground_truth": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.credited = 'true' AND T2.episode_id = 'S20-E11';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM credits WHERE episode = '20' AND season = '11' AND name = 'Doofus';"
        ],
        "rule_sql": []
    },
    "5416": {
        "db_id": "sales",
        "question": "What is the name of the product that is most sold by sale person id 20?",
        "ground_truth": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 20 ORDER BY T2.Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM sales WHERE sales_person_id = 20 ORDER BY quantity_sold DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3655": {
        "db_id": "authors",
        "question": "What is the name of author with the ID of 1722?",
        "ground_truth": "SELECT Name FROM Author WHERE Id = 1722",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM authors WHERE author_id = 1722;"
        ],
        "rule_sql": []
    },
    "7337": {
        "db_id": "works_cycles",
        "question": "Please provide the IDs of any three AdventureWorks product subcategories.",
        "ground_truth": "SELECT DISTINCT ProductCategoryID FROM ProductSubcategory LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ProductSubcategoryID FROM Production.ProductSubcategory LIMIT 3"
        ],
        "rule_sql": []
    },
    "76": {
        "db_id": "movie_platform",
        "question": "User 58149469's critic on which film got 1 like and 2 comments?",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 58149469 AND T1.critic_likes = 1 AND T1.critic_comments = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT f.title \nFROM films f\nJOIN reviews r ON f.film_id = r.film_id\nJOIN users u ON r.user_id = u.user_id\nWHERE u.user_id = 58149469\nAND r.likes = 1\nAND r.comments = 2;"
        ],
        "rule_sql": []
    },
    "5873": {
        "db_id": "airline",
        "question": "What is the code of Mississippi Valley Airlines?",
        "ground_truth": "SELECT Code FROM `Air Carriers` WHERE Description LIKE 'Mississippi Valley Airlines%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT code FROM airlines WHERE name = 'Mississippi Valley Airlines';"
        ],
        "rule_sql": []
    },
    "159": {
        "db_id": "movie_platform",
        "question": "What is the name of the movie whose critic received the highest amount of likes? Indicate the URL to the rating on Mubi.",
        "ground_truth": "SELECT T2.movie_title, T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, r.url \nFROM movies m \nJOIN ratings r ON m.movie_id = r.movie_id \nWHERE r.likes = (SELECT MAX(likes) FROM ratings) \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1631": {
        "db_id": "car_retails",
        "question": "Where can I find the office of the President of the company?",
        "ground_truth": "SELECT t2.addressLine1, t2.addressLine2 FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'President'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE title = 'CEO';"
        ],
        "rule_sql": []
    },
    "233": {
        "db_id": "book_publishing_company",
        "question": "List the title name, type, and price of the titles published by New Moon Books. Arrange the list in ascending order of price.",
        "ground_truth": "SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, type, price FROM titles WHERE pub_name = 'New Moon Books' ORDER BY price DESC;"
        ],
        "rule_sql": []
    },
    "3071": {
        "db_id": "cars",
        "question": "Please list all the years in which the car model Chevrolet Impala was introduced in the market.",
        "ground_truth": "SELECT DISTINCT T1.model_year FROM production AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.car_name = 'chevrolet impala'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM cars WHERE model = 'Chevrolet Impala' ORDER BY year;"
        ],
        "rule_sql": []
    },
    "4823": {
        "db_id": "legislator",
        "question": "Give the religion of the legislator whose YouTube name is MaxineWaters.",
        "ground_truth": "SELECT T2.religion_bio FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.youtube = 'MaxineWaters'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT religion FROM legislators WHERE youtube_name = 'Maxine Waters';"
        ],
        "rule_sql": []
    },
    "2749": {
        "db_id": "european_football_1",
        "question": "Which 2 Scottish teams scored 10 goals playing as a local team and in which seasons?",
        "ground_truth": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Scotland' AND T1.FTHG = 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, season, goals_scored \nFROM scottish_teams \nWHERE goals_scored = 10 \nORDER BY goals_scored DESC \nLIMIT 2;"
        ],
        "rule_sql": []
    },
    "5716": {
        "db_id": "language_corpus",
        "question": "What are the total occurence of words that paired with \"nombre\"?",
        "ground_truth": "SELECT SUM(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st IN (( SELECT wid FROM words WHERE word = 'nombre' ) OR T2.w2nd IN ( SELECT wid FROM words WHERE word = 'nombre' ))",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word, COUNT(*) as total_occurrence FROM words WHERE word = 'nombre' GROUP BY word;"
        ],
        "rule_sql": []
    },
    "8168": {
        "db_id": "sales_in_weather",
        "question": "State the max temperature of the weather station which has the no.21 store on 2012/11/9.",
        "ground_truth": "SELECT tmax FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 21 AND T1.`date` = '2012-11-09'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(temperature) FROM weather_stations WHERE store_id = 21 AND date = '2012/11/9';"
        ],
        "rule_sql": []
    },
    "8298": {
        "db_id": "mondial_geo",
        "question": "How many mountains are there in the country with the greatest population?",
        "ground_truth": "SELECT COUNT(T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY T1.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mountains WHERE country_id = (SELECT id FROM countries ORDER BY population DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "2342": {
        "db_id": "movielens",
        "question": "Among the English comedy movies produced in the UK, how many movies with a running time of 3 was rated the highest by users between the age 45-50? Indicate the movie names.",
        "ground_truth": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN u2base AS T3 ON T1.movieid = T3.movieid INNER JOIN users AS T4 ON T3.userid = T4.userid WHERE T1.country = 'UK' AND T2.genre = 'Comedy' AND T1.runningtime = 3 AND T3.rating = 5 AND T4.age BETWEEN 45 AND 50 AND T1.isEnglish = 'T'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_name, COUNT(*) as count \nFROM movies \nWHERE genre = 'Comedy' \nAND country = 'UK' \nAND runtime = 3 \nAND rating > 4.5 \nAND age BETWEEN 45 AND 50 \nGROUP BY movie_name \nORDER BY count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "351": {
        "db_id": "retail_complains",
        "question": "Calculate the percentage of complaints made by Google account client in server ZOHARI.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.server = 'ZOHARI'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM complaints) AS percentage FROM complaints WHERE client = 'Google' AND server = 'ZOHARI';"
        ],
        "rule_sql": []
    },
    "1231": {
        "db_id": "talkingdata",
        "question": "What are the behavior categories that user number -9222198347540750000 belongs to?",
        "ground_truth": "SELECT T3.category FROM app_all AS T1 INNER JOIN app_labels AS T2 ON T1.app_id = T2.app_id INNER JOIN label_categories AS T3 ON T2.label_id = T3.label_id WHERE T1.app_id = -9222198347540750000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM user_behaviors WHERE user_id = -9222198347540750000"
        ],
        "rule_sql": []
    },
    "7197": {
        "db_id": "works_cycles",
        "question": "How many employees do not have any suffix and what are their organization level?",
        "ground_truth": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*), OrganizationLevel FROM HumanResources.Employee WHERE Suffix IS NULL GROUP BY OrganizationLevel;"
        ],
        "rule_sql": []
    },
    "6094": {
        "db_id": "books",
        "question": "Among the books published by Birlinn in 2008, how many books have pages around 600 to 700?",
        "ground_truth": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Birlinn' AND STRFTIME('%Y', T1.publication_date) = '2008' AND T1.num_pages BETWEEN 600 AND 700",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books WHERE publisher = 'Birlinn' AND year = 2008 AND pages BETWEEN 600 AND 700;"
        ],
        "rule_sql": []
    },
    "8398": {
        "db_id": "mondial_geo",
        "question": "How many people are there in Fareham's mother country?",
        "ground_truth": "SELECT T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Fareham'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE city = 'Fareham' AND relationship = 'mother'"
        ],
        "rule_sql": []
    },
    "5084": {
        "db_id": "address",
        "question": "Please list the numbers of males in all the residential areas in Arecibo county.",
        "ground_truth": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM population WHERE gender = 'male' AND county = 'Arecibo';"
        ],
        "rule_sql": []
    },
    "6343": {
        "db_id": "retail_world",
        "question": "How many kinds of products are there in the the category of \"dairy products\"?",
        "ground_truth": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Dairy Products'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'dairy products';"
        ],
        "rule_sql": []
    },
    "9289": {
        "db_id": "movie_3",
        "question": "What is the rental price per day for Airplane Sierra?",
        "ground_truth": "SELECT rental_rate / rental_duration AS result FROM film WHERE title = 'AIRPLANE SIERRA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rental_price FROM airplanes WHERE name = 'Airplane Sierra';"
        ],
        "rule_sql": []
    },
    "8594": {
        "db_id": "chicago_crime",
        "question": "Please list the names of all the neighborhoods in Central Chicago.",
        "ground_truth": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.side = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM neighborhoods WHERE city = 'Chicago' AND region = 'Central';"
        ],
        "rule_sql": []
    },
    "8747": {
        "db_id": "chicago_crime",
        "question": "Give the FBI code for the crime described by \"The killing of one human being by another.\"",
        "ground_truth": "SELECT fbi_code_no FROM FBI_Code WHERE description = 'The killing of one human being by another.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT fbi_code FROM crimes WHERE description = 'The killing of one human being by another.'"
        ],
        "rule_sql": []
    },
    "8548": {
        "db_id": "software_company",
        "question": "List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers?",
        "ground_truth": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID GROUP BY T2.INCOME_K, T2.INHABITANTS_K HAVING T1.age > 0.8 * AVG(T1.age)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT income, number_of_inhabitants FROM customers WHERE age > (SELECT AVG(age) * 0.8 FROM customers);"
        ],
        "rule_sql": []
    },
    "653": {
        "db_id": "codebase_comments",
        "question": "What the percentage of the english methods among the methods whose comments is XML format?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Name) FROM Method WHERE CommentIsXml = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM methods WHERE comments LIKE '%XML%')) AS percentage FROM methods WHERE language = 'English';"
        ],
        "rule_sql": []
    },
    "2466": {
        "db_id": "shooting",
        "question": "Among the 'Handgun' weapon used by subject, how many percent were 'Shoot and Miss'?",
        "ground_truth": "SELECT CAST(SUM(subject_statuses = 'Shoot and Miss') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Handgun'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100) AS percentage FROM incidents WHERE weapon = 'Handgun' AND outcome = 'Shoot and Miss'"
        ],
        "rule_sql": []
    },
    "9207": {
        "db_id": "movie_3",
        "question": "What is the description and film title of ID 996?",
        "ground_truth": "SELECT description, title FROM film_text WHERE film_id = 996",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description, title FROM film WHERE film_id = 996"
        ],
        "rule_sql": []
    },
    "4787": {
        "db_id": "legislator",
        "question": "Which state did Veronica Grace Boland represent and which party is she affiliated?",
        "ground_truth": "SELECT T2.state, T2.party FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name OR T1.middle_name OR T1.last_name = 'VeronicaGraceBoland'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, party FROM representatives WHERE first_name = 'Veronica' AND last_name = 'Boland';"
        ],
        "rule_sql": []
    },
    "5513": {
        "db_id": "menu",
        "question": "Is \"c02c9a3b-6881-7080-e040-e00a180631aa\" the uuid for menu called \"The Biltmore\"?",
        "ground_truth": "SELECT CASE WHEN T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa' THEN 'yes' ELSE 'no' END AS yn FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'The Biltmore' AND T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM menus WHERE name = 'The Biltmore' AND uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa';"
        ],
        "rule_sql": []
    },
    "382": {
        "db_id": "retail_complains",
        "question": "How many customers in the Northeast use Microsoft email?",
        "ground_truth": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast' AND T1.email LIKE '%@outlook.com'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE region = 'Northeast' AND email LIKE '%microsoft.com%';"
        ],
        "rule_sql": []
    },
    "1479": {
        "db_id": "synthea",
        "question": "How many mothers have taken immunization during prenatal visit?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.PATIENT) FROM encounters AS T1 INNER JOIN immunizations AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.REASONDESCRIPTION = 'Normal pregnancy' AND T1.DATE = T2.DATE",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mothers WHERE immunization_taken = 'yes';"
        ],
        "rule_sql": []
    },
    "5994": {
        "db_id": "books",
        "question": "How many publishers have the word \"book\" in their name?",
        "ground_truth": "SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM publishers WHERE name LIKE '%book%';"
        ],
        "rule_sql": []
    },
    "7250": {
        "db_id": "works_cycles",
        "question": "In 2007, which job position was hired the most?",
        "ground_truth": "SELECT JobTitle FROM Employee WHERE STRFTIME('%Y', HireDate) = '2007' GROUP BY HireDate ORDER BY COUNT(JobTitle) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_title, COUNT(*) as hire_count \nFROM employees \nWHERE hire_year = 2007 \nGROUP BY job_title \nORDER BY hire_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5007": {
        "db_id": "olympics",
        "question": "What is Vijay Singh Chauhan's region name?",
        "ground_truth": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Vijay Singh Chauhan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region_name FROM regions WHERE first_name = 'Vijay' AND last_name = 'Singh Chauhan'"
        ],
        "rule_sql": []
    },
    "8211": {
        "db_id": "sales_in_weather",
        "question": "What was the difference of number of units sold in station number 1 and number 2 on year 2012?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.station_nbr = 1 THEN units ELSE 0 END) - SUM(CASE WHEN T1.station_nbr = 2 THEN units ELSE 0 END) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.`date` LIKE '%2012%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ABS((SELECT SUM(units_sold) FROM sales WHERE station_id = 1 AND year = 2012) - (SELECT SUM(units_sold) FROM sales WHERE station_id = 2 AND year = 2012)) AS difference;"
        ],
        "rule_sql": []
    },
    "452": {
        "db_id": "movies_4",
        "question": "How many movies released in 1995 did Quentin Tarantino appear in?",
        "ground_truth": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Quentin Tarantino' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1995",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE year = 1995 AND director = 'Quentin Tarantino';"
        ],
        "rule_sql": []
    },
    "6264": {
        "db_id": "coinmarketcap",
        "question": "How much dollars was a Bitcoin worth on 2013/4/28 according to the coin market?",
        "ground_truth": "SELECT T2.market_cap FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM bitcoin_prices WHERE date = '2013/4/28';"
        ],
        "rule_sql": []
    },
    "4506": {
        "db_id": "student_loan",
        "question": "List out student names that enrolled in two schools and two organizations?",
        "ground_truth": "SELECT T.name FROM ( SELECT T1.name, COUNT(T1.organ) AS num FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name \nFROM students s\nJOIN enrollments e1 ON s.id = e1.student_id AND e1.type = 'school'\nJOIN enrollments e2 ON s.id = e2.student_id AND e2.type = 'school' AND e2.id != e1.id\nJOIN enrollments e3 ON s.id = e3.student_id AND e3.type = 'organization'\nJOIN enrollments e4 ON s.id = e4.student_id AND e4.type = 'organization' AND e4.id != e3.id\nGROUP BY s.id, s.name\nHAVING COUNT(DISTINCT e1.school_id) >= 2 AND COUNT(DISTINCT e3.organization_id) >= 2;"
        ],
        "rule_sql": []
    },
    "2052": {
        "db_id": "music_tracker",
        "question": "What is the tag and the artist of the most downloaded single?",
        "ground_truth": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT tag, artist FROM singles ORDER BY downloads LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9014": {
        "db_id": "bike_share_1",
        "question": "What is the maximum humidity in Powell Street BART when bike 496 was borrowed from the station on 8/29/2013?",
        "ground_truth": "SELECT T2.max_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_date LIKE '8/29/2013%' AND T1.bike_id = 496 AND T1.start_station_name = 'Powell Street BART'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(humidity) \nFROM weather \nWHERE station = 'Powell Street BART' \nAND date = '2013-08-29' \nAND bike_id = 496;"
        ],
        "rule_sql": []
    },
    "6580": {
        "db_id": "retail_world",
        "question": "How many suppliers does Northwind have in USA?",
        "ground_truth": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Suppliers WHERE Country = 'Canada';"
        ],
        "rule_sql": []
    },
    "7508": {
        "db_id": "image_and_language",
        "question": "List all the ids of the images that have a self-relation relationship.",
        "ground_truth": "SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT image_id FROM images WHERE image_id = image_id"
        ],
        "rule_sql": []
    },
    "1608": {
        "db_id": "car_retails",
        "question": "Calculate the total quantity ordered for 18th Century Vintage Horse Carriage and the average price.",
        "ground_truth": "SELECT SUM(T2.quantityOrdered) , SUM(T2.quantityOrdered * T2.priceEach) / SUM(T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productName = '18th Century Vintage Horse Carriage'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) AS total_quantity, AVG(price) AS average_price \nFROM orders \nWHERE product_name = '18th Century Vintage Horse Carriage';"
        ],
        "rule_sql": []
    },
    "2298": {
        "db_id": "movielens",
        "question": "List the IDs of all the directors who worked on French films.",
        "ground_truth": "SELECT T2.directorid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director_id FROM films WHERE language = 'French';"
        ],
        "rule_sql": []
    },
    "5344": {
        "db_id": "beer_factory",
        "question": "List out the name of the top 10 spenders and what credit card type are they using.",
        "ground_truth": "SELECT T1.First, T1.Last, T2.CreditCardType FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T2.PurchasePrice) DESC LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, credit_card_type FROM customers ORDER BY total_spent DESC LIMIT 10;"
        ],
        "rule_sql": []
    },
    "617": {
        "db_id": "codebase_comments",
        "question": "Give the number of watchers that the repository of the solution No. 338082 have.",
        "ground_truth": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM watchers WHERE repository_id = (SELECT repository_id FROM solutions WHERE solution_id = 338082);"
        ],
        "rule_sql": []
    },
    "892": {
        "db_id": "cs_semester",
        "question": "Among the most popular professors, how many are females?",
        "ground_truth": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female' AND popularity = ( SELECT MAX(popularity) FROM prof )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM professors \nWHERE gender = 'female' \nORDER BY popularity DESC \nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "2028": {
        "db_id": "soccer_2016",
        "question": "How many matches did team Mumbai Indians win in 2008?",
        "ground_truth": "SELECT COUNT(T.Match_Id) FROM ( SELECT T2.Match_Id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id WHERE T1.Team_Name = 'Mumbai Indians' AND T2.Match_Date LIKE '2008%' GROUP BY T2.Match_Id ) T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE team1 = 'Mumbai Indians' AND season = 2008;"
        ],
        "rule_sql": []
    },
    "8701": {
        "db_id": "chicago_crime",
        "question": "How many crimes against society happened in the Wentworth district according to the FBI?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE district = 'Wentworth' AND crime_type = 'Crimes Against Society'"
        ],
        "rule_sql": []
    },
    "6969": {
        "db_id": "ice_hockey_draft",
        "question": "What is the percentage of Russian players who have a height of under 200 inch?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.height_in_cm < 200 AND T2.nation = 'Russia' THEN T2.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN nationality = 'Russia' AND height < 200 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM players;"
        ],
        "rule_sql": []
    },
    "6720": {
        "db_id": "retails",
        "question": "Among the products manufactured by manufacturer 5 that have a retail price of no more than 1,000, how many products were shipped via rail?",
        "ground_truth": "SELECT COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_mfgr = 'Manufacturer#5' AND T3.p_retailprice < 1000 AND T2.l_shipmode = 'RAIL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM products p\nJOIN shipments s ON p.product_id = s.product_id\nWHERE p.manufacturer_id = 5 \nAND p.retail_price <= 1000\nAND s.shipment_method = 'rail';"
        ],
        "rule_sql": []
    },
    "6970": {
        "db_id": "ice_hockey_draft",
        "question": "Among the USA players, who has the lightest weight?",
        "ground_truth": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.nation = 'USA' ORDER BY T1.weight_in_lbs ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players WHERE country = 'USA' ORDER BY weight DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7444": {
        "db_id": "works_cycles",
        "question": "What is the name of the product stored in location 1 compartment L container 6?",
        "ground_truth": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.LocationID = 1 AND T1.Shelf = 'L' AND T1.Bin = 6",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE location_id = 1 AND compartment = 'L' AND container = 6;"
        ],
        "rule_sql": []
    },
    "3843": {
        "db_id": "public_review_platform",
        "question": "How many Yelp_Businesses in Arizona have a Elitestar rating of over 4?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND stars > 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Businesses WHERE state = 'Arizona' AND Elitestar > 4"
        ],
        "rule_sql": []
    },
    "2207": {
        "db_id": "world_development_indicators",
        "question": "From 1961 to 1980, what was the highest percentage of land used for agriculture in the Republic of Benin?",
        "ground_truth": "SELECT MAX(T1.Value) FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year >= 1961 AND T1.Year < 1981 AND T1.IndicatorName LIKE 'Agricultural land (% of land area)' AND T2.LongName = 'Republic of Benin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(agriculture_land_percent) \nFROM land_use_data \nWHERE country = 'Republic of Benin' \nAND year BETWEEN 1961 AND 1980;"
        ],
        "rule_sql": []
    },
    "5870": {
        "db_id": "airline",
        "question": "Which airline does the aircraft with the fastest flight belong to?",
        "ground_truth": "SELECT T1.OP_CARRIER_AIRLINE_ID FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ACTUAL_ELAPSED_TIME IS NOT NULL AND T1.CRS_ELAPSED_TIME IS NOT NULL ORDER BY T1.ACTUAL_ELAPSED_TIME - T1.CRS_ELAPSED_TIME ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT airline FROM aircrafts ORDER BY speed DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6867": {
        "db_id": "retails",
        "question": "Please list the names of the top 3 suppliers with the most amount of money in their accounts.",
        "ground_truth": "SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM suppliers ORDER BY account_balance ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "3131": {
        "db_id": "cars",
        "question": "Calculate the percentage of cars that belong to the USA.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100) FROM cars WHERE country = 'USA';"
        ],
        "rule_sql": []
    },
    "38": {
        "db_id": "movie_platform",
        "question": "How many users who created a list in the February of 2016 were eligible for trial when they created the list? Indicate the user id of the user who has the most number of followers in his list in February of 2016.",
        "ground_truth": "SELECT T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T1.list_id = T2.list_id WHERE T2.list_creation_date_utc BETWEEN '2016-02-01' AND '2016-02-29' AND T2.user_eligible_for_trial = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS user_count, \n       (SELECT user_id FROM users WHERE created_at BETWEEN '2016-02-01' AND '2016-02-29' \n        ORDER BY followers_count DESC LIMIT 1) AS top_follower_user_id\nFROM users \nWHERE created_at BETWEEN '2016-02-01' AND '2016-02-29' \nAND trial_eligible = 1;"
        ],
        "rule_sql": []
    },
    "5627": {
        "db_id": "shipping",
        "question": "How many shipments does each driver deliver per month on average?",
        "ground_truth": "SELECT CAST(COUNT(*) AS REAL) / (12 * COUNT(T2.driver_id)) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT driver_id, COUNT(*) / COUNT(DISTINCT strftime('%Y-%m', delivery_date)) as avg_shipments_per_month\nFROM shipments\nGROUP BY driver_id;"
        ],
        "rule_sql": []
    },
    "2553": {
        "db_id": "app_store",
        "question": "What is the average download for entertainment apps with size no more than 1.0 M?",
        "ground_truth": "SELECT AVG(CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER)) FROM playstore WHERE Category = 'ENTERTAINMENT' AND Size < '1.0M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(downloads) FROM apps WHERE category = 'entertainment' AND size > 1.0;"
        ],
        "rule_sql": []
    },
    "7751": {
        "db_id": "hockey",
        "question": "How many bench minor penalties did the team St. Louis Blues got in total in all the games?",
        "ground_truth": "SELECT CAST(SUM(BenchMinor) AS REAL) / 2 FROM Teams WHERE name = 'St. Louis Blues'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM penalties WHERE team = 'St. Louis Blues' AND penalty_type = 'bench minor';"
        ],
        "rule_sql": []
    },
    "2417": {
        "db_id": "superstore",
        "question": "Among the orders in Central superstore, which art product were ordered the most?",
        "ground_truth": "SELECT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Sub-Category` = 'Art' GROUP BY T2.`Product Name` ORDER BY COUNT(T2.`Product ID`) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Product, COUNT(*) as OrderCount \nFROM Orders \nWHERE Store = 'Central' \nAND Category = 'Art' \nGROUP BY Product \nORDER BY OrderCount DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "378": {
        "db_id": "retail_complains",
        "question": "Please calculate the number of clients by each division.",
        "ground_truth": "SELECT T2.division, COUNT(T2.division) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division, COUNT(*) FROM clients GROUP BY client_id"
        ],
        "rule_sql": []
    },
    "8429": {
        "db_id": "mondial_geo",
        "question": "What is the name of Anguilla's capital, and where is it located?",
        "ground_truth": "SELECT Capital, Province FROM country WHERE Name = 'Anguilla'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT capital, location FROM countries WHERE name = 'Anguilla';"
        ],
        "rule_sql": []
    },
    "1069": {
        "db_id": "talkingdata",
        "question": "List the included categories in the event ID of 155.",
        "ground_truth": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id INNER JOIN app_events AS T3 ON T3.app_id = T2.app_id WHERE T3.event_id = 155",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM categories WHERE event_id = 155;"
        ],
        "rule_sql": []
    },
    "6962": {
        "db_id": "ice_hockey_draft",
        "question": "List out the seasons that Niklas Eckerblom played.",
        "ground_truth": "SELECT DISTINCT T1.SEASON FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Niklas Eckerblom'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT season FROM players WHERE name = 'Niklas Eckerblom';"
        ],
        "rule_sql": []
    },
    "4299": {
        "db_id": "simpson_episodes",
        "question": "What are the keywords for episode 426 of the series?",
        "ground_truth": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.number_in_series = 426;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keyword FROM episodes WHERE episode_number = 426"
        ],
        "rule_sql": []
    },
    "2103": {
        "db_id": "world_development_indicators",
        "question": "For how many consecutive years did Aruba get a footnote on the series code BX.KLT.DINV.CD.WD?",
        "ground_truth": "SELECT COUNT(T2.Year) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'BX.KLT.DINV.CD.WD'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM series_footnotes \nWHERE country_code = 'ABW' \nAND series_code = 'BX.KLT.DINV.CD.WD' \nAND year = (SELECT MAX(year) FROM series_footnotes WHERE country_code = 'ABW' AND series_code = 'BX.KLT.DINV.CD.WD')"
        ],
        "rule_sql": []
    },
    "4919": {
        "db_id": "olympics",
        "question": "What is the NOC code of the region where the tallest male Olympic competitor is from?",
        "ground_truth": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT NOC FROM athletes WHERE height = (SELECT MAX(height) FROM athletes) AND sex = 'M';"
        ],
        "rule_sql": []
    },
    "1804": {
        "db_id": "soccer_2016",
        "question": "Among all the players born after the year 1985, what is the percentage of the players who use the right hand as their batting hand?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Batting_Hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE SUBSTR(T1.DOB, 1, 4) > 1985",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN batting_hand = 'Right' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_right_handed\nFROM players\nWHERE birth_year > 1985;"
        ],
        "rule_sql": []
    },
    "4075": {
        "db_id": "public_review_platform",
        "question": "Write down the any five of ID and name of category that starts with alphabet \"P\".",
        "ground_truth": "SELECT category_id, category_name FROM Categories WHERE category_name LIKE 'P%' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ID, name FROM category WHERE name LIKE 'P%' LIMIT 5;"
        ],
        "rule_sql": []
    },
    "2363": {
        "db_id": "superstore",
        "question": "How many quantities of Advantus plastic paper clips were ordered overall?",
        "ground_truth": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Advantus Plastic Paper Clips'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM orders WHERE product_name = 'Advantus plastic paper clips';"
        ],
        "rule_sql": []
    },
    "6903": {
        "db_id": "retails",
        "question": "How much is the total price of all the orders shipped to customers in Argentina?",
        "ground_truth": "SELECT SUM(T3.o_totalprice) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'ARGENTINA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price) FROM orders WHERE country = 'Argentina';"
        ],
        "rule_sql": []
    },
    "1521": {
        "db_id": "synthea",
        "question": "How many white patients whose birth year is 1935 have a stroke?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE strftime('%Y', T1.birthdate) = '1935' AND T1.race = 'white' AND T2.DESCRIPTION = 'Stroke'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE race = 'white' AND birth_year = 1935 AND diagnosis = 'stroke';"
        ],
        "rule_sql": []
    },
    "57": {
        "db_id": "movie_platform",
        "question": "Which movie is more popular, \"The General\" or \"Il grido\"?",
        "ground_truth": "SELECT movie_title FROM movies WHERE movie_title = 'The General' OR movie_title = 'Il grido' ORDER BY movie_popularity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, COUNT(*) as popularity FROM movies WHERE title = 'The General' OR title = 'Il grido' GROUP BY title ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7348": {
        "db_id": "works_cycles",
        "question": "Please list any 3 vendors that are not recommended by Adventure Works.",
        "ground_truth": "SELECT Name FROM Vendor WHERE PreferredVendorStatus = 0 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT TOP 3 VendorName FROM Vendors WHERE Recommended = 'No';"
        ],
        "rule_sql": []
    },
    "3861": {
        "db_id": "public_review_platform",
        "question": "Please list all the categories of the Yelp_Business in Arizona.",
        "ground_truth": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.state LIKE 'AZ' GROUP BY T1.category_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM Yelp_Business WHERE state = 'Arizona';"
        ],
        "rule_sql": []
    },
    "810": {
        "db_id": "social_media",
        "question": "State the number of tweets from Michigan on Thursdays.",
        "ground_truth": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Weekday = 'Thursday' AND T2.State = 'Michigan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE state = 'Michigan' AND day_of_week = 'Thursday';"
        ],
        "rule_sql": []
    },
    "3614": {
        "db_id": "authors",
        "question": "How many papers are published in year 2000 under the conference \"SSPR\"?",
        "ground_truth": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2000 AND T2.ShortName = 'SSPR'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE year = 2000 AND conference = 'SSPR';"
        ],
        "rule_sql": []
    },
    "1701": {
        "db_id": "restaurant",
        "question": "What cities are located in Northern California?",
        "ground_truth": "SELECT city FROM geographic WHERE region = 'northern california'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM cities WHERE region = 'Southern California';"
        ],
        "rule_sql": []
    },
    "4802": {
        "db_id": "legislator",
        "question": "Compare the number of legislators who started the term in 1875 and 2005.",
        "ground_truth": "SELECT SUM(CASE WHEN `current-terms`.start LIKE '2005%' THEN 1 ELSE 0 END) - ( SELECT SUM(CASE WHEN start LIKE '1875%' THEN 1 ELSE 0 END) FROM `historical-terms` ) FROM `current-terms`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM legislators WHERE start_year = 1875) AS legislators_1875,\n    (SELECT COUNT(*) FROM legislators WHERE start_year = 2005) AS legislators_2005;"
        ],
        "rule_sql": []
    },
    "4706": {
        "db_id": "disney",
        "question": "Indicate the release date of the film The Lion King directed by Roger Allers.",
        "ground_truth": "SELECT T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Roger Allers' AND T1.movie_title = 'The Lion King'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT release_date FROM films WHERE title = 'The Lion King' AND director = 'Rob Minkoff';"
        ],
        "rule_sql": []
    },
    "2503": {
        "db_id": "genes",
        "question": "How many different genes do we have if we add those located in the plasma and in the nucleus?",
        "ground_truth": "SELECT COUNT(GeneID) FROM Classification WHERE Localization IN ('plasma', 'nucleus')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM genes WHERE location = 'plasma' OR location = 'nucleus';"
        ],
        "rule_sql": []
    },
    "2893": {
        "db_id": "professional_basketball",
        "question": "From which college was the player who won the most award in 1970.",
        "ground_truth": "SELECT college FROM players WHERE playerID = ( SELECT playerID FROM awards_players WHERE year = 1970 GROUP BY playerID ORDER BY COUNT(award) DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT college FROM players WHERE year = 1970 ORDER BY awards DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8037": {
        "db_id": "university",
        "question": "How many female students were there at Stanford University in 2011?",
        "ground_truth": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university = 'Stanford' AND year = 2011;"
        ],
        "rule_sql": []
    },
    "2222": {
        "db_id": "world_development_indicators",
        "question": "In Sub-Saharan Africa, how many female out-of-school children of primary school age are there in the country with the higest number of female out-of-school children of primary school age? Indicate the year of when it was recorded.",
        "ground_truth": "SELECT MAX(T1.value), T1.year FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Sub-Saharan Africa' AND T1.IndicatorName = 'Out-of-school children of primary school age, female (number)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Country, MAX(Female_Out_of_School_Primary) as Max_Female_Out_of_School, Year \nFROM education_data \nWHERE Region = 'Sub-Saharan Africa' \nORDER BY Female_Out_of_School_Primary DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7067": {
        "db_id": "works_cycles",
        "question": "Please list the employees who have more than 20 vacations hours and wish to receive e-mail promotions.",
        "ground_truth": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.VacationHours > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE vacation_hours > 20 AND email_promotions = 0;"
        ],
        "rule_sql": []
    },
    "7560": {
        "db_id": "image_and_language",
        "question": "Indicating the bounding box of \"kitchen\" in image id 250.",
        "ground_truth": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 250 AND T2.OBJ_CLASS = 'kitchen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM bounding_boxes WHERE image_id = 250 AND label = 'kitchen';"
        ],
        "rule_sql": []
    },
    "4595": {
        "db_id": "mental_health_survey",
        "question": "Tell the question ID for \"Would you bring up a physical health issue with a potential employer in an interview?\".",
        "ground_truth": "SELECT questionid FROM Question WHERE questiontext LIKE 'Would you bring up a physical health issue with a potential employer in an interview?'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT question_id FROM questions WHERE question_text = 'Would you bring up a physical health issue with a potential employer in an interview?'"
        ],
        "rule_sql": []
    },
    "4819": {
        "db_id": "legislator",
        "question": "Mention the username of Facebook of Ralph Abraham.",
        "ground_truth": "SELECT T2.facebook FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.first_name = 'Ralph' AND T1.last_name = 'Abraham'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT username FROM facebook WHERE first_name = 'Ralph' AND last_name = 'Abraham';"
        ],
        "rule_sql": []
    },
    "595": {
        "db_id": "codebase_comments",
        "question": "Among the solutions that contain files within the repository needing the longest processed time to download, how many of them doesn't need to be\ncompiled if user wants to implement it?",
        "ground_truth": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo ) AND T2.WasCompiled = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM solutions s\nJOIN repositories r ON s.repository_id = r.id\nWHERE r.download_time = (SELECT MAX(download_time) FROM repositories)\nAND s.compilation_required = 'no';"
        ],
        "rule_sql": []
    },
    "8454": {
        "db_id": "mondial_geo",
        "question": "What sea does the Baltic Sea converge with, and how deep is the Baltic Sea?",
        "ground_truth": "SELECT T2.Sea2, T1.Depth FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = 'Baltic Sea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sea_name, depth FROM seas WHERE sea_name = 'Baltic Sea' AND converges_with = 'North Sea';"
        ],
        "rule_sql": []
    },
    "8638": {
        "db_id": "chicago_crime",
        "question": "How many vandalisms were arrested in the ward represented by Edward Burke?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.alderman_last_name = 'Burke' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T3.title = 'Vandalism' AND T2.arrest = 'TRUE' AND T1.alderman_first_name = 'Edward'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes c JOIN wards w ON c.ward_id = w.id WHERE w.representative = 'Edward Burke' AND c.type = 'vandalism' AND c.arrested = 'true';"
        ],
        "rule_sql": []
    },
    "5028": {
        "db_id": "olympics",
        "question": "How many male competitors were there who participated in 1948 Summer?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM competitors WHERE gender = 'male' AND year = 1948 AND season = 'Summer';"
        ],
        "rule_sql": []
    },
    "5855": {
        "db_id": "airline",
        "question": "What are the codes of the airport found in Ankara, Turkey?",
        "ground_truth": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT code FROM airports WHERE city = 'Ankara' AND country = 'Turkey';"
        ],
        "rule_sql": []
    },
    "8378": {
        "db_id": "mondial_geo",
        "question": "What's the percentage of people in Cayman Islands speak English?",
        "ground_truth": "SELECT T1.Percentage FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Cayman Islands' AND T1.Name = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM population)) AS percentage FROM languages WHERE language = 'English' AND country = 'Cayman Islands';"
        ],
        "rule_sql": []
    },
    "8707": {
        "db_id": "chicago_crime",
        "question": "Which commander has had to deal with more cases of criminal sexual abuse?",
        "ground_truth": "SELECT T3.commander FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY T3.commander ORDER BY COUNT(T1.secondary_description) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT commander, COUNT(*) as case_count FROM criminal_cases WHERE crime_type = 'sexual abuse' GROUP BY commander ORDER BY case_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7282": {
        "db_id": "works_cycles",
        "question": "Which product gets the most reviews?",
        "ground_truth": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_id, COUNT(*) as review_count FROM reviews GROUP BY product_id ORDER BY review_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3100": {
        "db_id": "cars",
        "question": "Which year did Europe produce the most cars?",
        "ground_truth": "SELECT T1.model_year FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe' GROUP BY T1.model_year ORDER BY COUNT(T1.model_year) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM car_production WHERE continent = 'Europe' ORDER BY production DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1059": {
        "db_id": "talkingdata",
        "question": "How many events were there on 30th April, 2016?",
        "ground_truth": "SELECT COUNT(event_id) FROM events WHERE SUBSTR(`timestamp`, 1, 10) = '2016-04-30'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE date = '2016-04-30';"
        ],
        "rule_sql": []
    },
    "1299": {
        "db_id": "law_episode",
        "question": "What roles have not been credited at the end of the episodes?",
        "ground_truth": "SELECT DISTINCT role FROM Credit WHERE credited = 'false'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM credits WHERE episode_end = 'false'"
        ],
        "rule_sql": []
    },
    "1740": {
        "db_id": "restaurant",
        "question": "List street names in San Francisco city.",
        "ground_truth": "SELECT street_name FROM location WHERE city = 'San Francisco'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT street_name FROM addresses WHERE city = 'San Francisco';"
        ],
        "rule_sql": []
    },
    "1049": {
        "db_id": "talkingdata",
        "question": "How many female users use ZenFone 5 devices?",
        "ground_truth": "SELECT COUNT(T1.gender) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'F' AND T2.device_model = 'ZenFone 5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male' AND device = 'ZenFone 5';"
        ],
        "rule_sql": []
    },
    "1925": {
        "db_id": "soccer_2016",
        "question": "In how many games in which the batting team was the Delhi Daredevils were no runs scored?",
        "ground_truth": "SELECT COUNT(T1.Runs_Scored) FROM Batsman_Scored AS T1 INNER JOIN Ball_by_Ball AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Team AS T4 ON T3.Team_1 = T4.Team_Id WHERE T2.Team_Batting = 1 OR T2.Team_Batting = 2 AND T4.Team_Name = 'Delhi Daredevils'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM matches m\nJOIN deliveries d ON m.match_id = d.match_id\nWHERE m.batting_team = 'Delhi Daredevils'\nAND d.total_runs = 0;"
        ],
        "rule_sql": []
    },
    "3110": {
        "db_id": "cars",
        "question": "Provide the ID of cars from Japan worth greater than 35000 and have an acceleration of 14.",
        "ground_truth": "SELECT T4.ID FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T1.price > 3500 AND T4.acceleration = 14",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT car_id FROM cars WHERE country = 'Japan' AND price > 35000 AND acceleration = 14;"
        ],
        "rule_sql": []
    },
    "6262": {
        "db_id": "coinmarketcap",
        "question": "Name the coin that have higher than average percentage price changed from the previous 24 hours for transaction on 2013/6/22.",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2020-06-22' GROUP BY T1.name HAVING AVG(T2.percent_change_24h) > T2.PRICE",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coin_name FROM transactions WHERE date = '2013/6/22' AND price_change_percentage > (SELECT AVG(price_change_percentage) FROM transactions WHERE date = '2013/6/22')"
        ],
        "rule_sql": []
    },
    "4922": {
        "db_id": "olympics",
        "question": "Please list the names of the Olympic games that were held in London.",
        "ground_truth": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM OlympicGames WHERE city = 'Paris';"
        ],
        "rule_sql": []
    },
    "2486": {
        "db_id": "shooting",
        "question": "Which type of weapon was used to attack the victim in the record number 031347-2015? What is the victim's race and gender?",
        "ground_truth": "SELECT T1.subject_weapon, T2.race, T2.gender FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '031347-2015'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weapon_type, victim_race, victim_gender FROM crime_records WHERE record_number = '031347-2015';"
        ],
        "rule_sql": []
    },
    "3762": {
        "db_id": "public_review_platform",
        "question": "How many Yelp businesses are opened 24 hours?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM business WHERE hours LIKE '%24 hours%';"
        ],
        "rule_sql": []
    },
    "1407": {
        "db_id": "synthea",
        "question": "How many Asian female patients take oxaliplatin 5 MG/ML [Eloxatin]?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]' AND T2.race = 'asian' AND T2.gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE race = 'Asian' AND gender = 'Female' AND medication = 'oxaliplatin 5 MG/ML [Eloxatin]';"
        ],
        "rule_sql": []
    },
    "4111": {
        "db_id": "public_review_platform",
        "question": "How many businesses with music_karaoke attribute are closed?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_karaoke' AND T3.active = 'false' AND T2.attribute_value IN ('none', 'no', 'false')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE music_karaoke = 'True' AND is_open = 1;"
        ],
        "rule_sql": []
    },
    "5477": {
        "db_id": "menu",
        "question": "What is the highest price of the dish \"Clear green turtle\" on a menu page?",
        "ground_truth": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle' ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price) FROM menu_items WHERE dish_name = 'Clear green turtle';"
        ],
        "rule_sql": []
    },
    "7822": {
        "db_id": "world",
        "question": "List the languages used in the USA.",
        "ground_truth": "SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM countries WHERE name = 'USA';"
        ],
        "rule_sql": []
    },
    "7896": {
        "db_id": "world",
        "question": "What is the average surface area of all countries?",
        "ground_truth": "SELECT AVG(SurfaceArea) FROM Country",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(population) FROM countries;"
        ],
        "rule_sql": []
    },
    "8488": {
        "db_id": "mondial_geo",
        "question": "In which city has the greatest population, what is its percentage to its country population?",
        "ground_truth": "SELECT T3.Name, CAST(T3.Population AS REAL) * 100 / T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Country = T2.Country ORDER BY T3.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city.name, city.population / country.population * 100 AS percentage\nFROM city\nJOIN country ON city.country_id = country.id\nORDER BY city.population DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6168": {
        "db_id": "food_inspection_2",
        "question": "Provide the fine paid and the complete address of the establishment with inspection ID 48216.",
        "ground_truth": "SELECT DISTINCT T3.fine, T1.state, T1.city, T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_id = 48216",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT fine_amount, address FROM inspections WHERE inspection_id = 48216"
        ],
        "rule_sql": []
    },
    "8904": {
        "db_id": "cookbook",
        "question": "Provide the title and total time of the recipe which has the highest possibility of gaining weight.",
        "ground_truth": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, total_time FROM recipes ORDER BY calories DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5756": {
        "db_id": "language_corpus",
        "question": "List out the total pages of Wikipedia in Catalan language.",
        "ground_truth": "SELECT pages FROM langs",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(pages) FROM wikipedia WHERE language = 'Catalan';"
        ],
        "rule_sql": []
    },
    "2001": {
        "db_id": "soccer_2016",
        "question": "How many players were born in 1970?",
        "ground_truth": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '1970%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE birth_year = '1970';"
        ],
        "rule_sql": []
    },
    "6344": {
        "db_id": "retail_world",
        "question": "Which category does \"tofu\" belong to?",
        "ground_truth": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Tofu'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE name = 'tofu';"
        ],
        "rule_sql": []
    },
    "8345": {
        "db_id": "mondial_geo",
        "question": "What is the average height of all mountains in Nepal?",
        "ground_truth": "SELECT AVG(T1.Height) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Nepal'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM mountains WHERE country = 'Nepal';"
        ],
        "rule_sql": []
    },
    "2563": {
        "db_id": "app_store",
        "question": "How much is the size of Browser 4G and how many users have a pretty positive favorability on it?",
        "ground_truth": "SELECT T1.Size, COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Browser 4G' AND T2.Sentiment_Polarity >= 0.5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT size, COUNT(*) FROM browsers WHERE name = 'Browser 4G' AND favorability = 'pretty positive';"
        ],
        "rule_sql": []
    },
    "1818": {
        "db_id": "soccer_2016",
        "question": "In the database, how many times is the number of Indian cities to the South African cities?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE country = 'India' / COUNT(*) FROM cities WHERE country = 'South Africa';"
        ],
        "rule_sql": []
    },
    "8521": {
        "db_id": "software_company",
        "question": "Which customer come from a place with more inhabitants, customer no.0 or customer no.1?",
        "ground_truth": "SELECT T1.ID FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 0 OR T1.ID = 1 ORDER BY INHABITANTS_K DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c1.customer_id, \n    c1.city, \n    c1.population,\n    c2.customer_id, \n    c2.city, \n    c2.population\nFROM customers c1, customers c2\nWHERE c1.customer_id = 0 AND c2.customer_id = 1\nAND c1.population > c2.population;"
        ],
        "rule_sql": []
    },
    "2159": {
        "db_id": "world_development_indicators",
        "question": "List out the name and indicator code of high income: nonOECD countries",
        "ground_truth": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'High income: nonOECD'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, indicator_code FROM countries WHERE income_group = 'High income: nonOECD'"
        ],
        "rule_sql": []
    },
    "7115": {
        "db_id": "works_cycles",
        "question": "What is the full address of address number 11906?",
        "ground_truth": "SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID = 11906",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM addresses WHERE address_id = 11906;"
        ],
        "rule_sql": []
    },
    "2677": {
        "db_id": "regional_sales",
        "question": "How many Borough-type stores located in the city of Brooklyn have a population of less than 3 million?",
        "ground_truth": "SELECT SUM(CASE WHEN Population < 3000000 AND Type = 'Borough' AND `City Name` = 'Brooklyn' THEN 1 ELSE 0 END) FROM `Store Locations`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stores WHERE store_type = 'Borough' AND city = 'Brooklyn' AND population < 3000000;"
        ],
        "rule_sql": []
    },
    "1161": {
        "db_id": "talkingdata",
        "question": "What is the ratio of the number of app users that belong to the Securities category to the number of app users that belong to the Finance category?",
        "ground_truth": "SELECT SUM(IIF(T2.category = 'Securities', 1, 0)) / SUM(IIF(T2.category = 'Finance', 1, 0)) AS per FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM app_users WHERE category = 'Securities') / \n    (SELECT COUNT(*) FROM app_users WHERE category = 'Finance') AS ratio"
        ],
        "rule_sql": []
    },
    "1132": {
        "db_id": "talkingdata",
        "question": "Which category does the app id No.894384172610331000 belong to?",
        "ground_truth": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = '894384172610331000'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM apps WHERE app_id = '894384172610331000';"
        ],
        "rule_sql": []
    },
    "7222": {
        "db_id": "works_cycles",
        "question": "How many customers are there in Canada?",
        "ground_truth": "SELECT COUNT(T2.CustomerID) FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Canada'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE country = 'USA';"
        ],
        "rule_sql": []
    },
    "55": {
        "db_id": "movie_platform",
        "question": "In which year was the movie \"La Antena\" released?",
        "ground_truth": "SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE year = 'La Antena';"
        ],
        "rule_sql": []
    },
    "224": {
        "db_id": "book_publishing_company",
        "question": "Tell me about the information of the French publisher.",
        "ground_truth": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'France'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM publishers WHERE country = 'France';"
        ],
        "rule_sql": []
    },
    "7621": {
        "db_id": "hockey",
        "question": "List all deceased goalies by last name. List the season where he had the most time played.",
        "ground_truth": "SELECT T1.playerID, T2.year, Min FROM Master AS T1 INNER JOIN Goalies AS T2 ON T2.playerID = T1.playerID WHERE T1.deathYear IS NOT NULL ORDER BY T2.Min DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT g.last_name, MAX(s.time_played) as max_time_played\nFROM goalies g\nJOIN seasons s ON g.player_id = s.player_id\nWHERE g.status = 'deceased'\nGROUP BY g.last_name\nORDER BY g.last_name;"
        ],
        "rule_sql": []
    },
    "8715": {
        "db_id": "chicago_crime",
        "question": "How many severe crime incidents were reported at coordinate 41.64820151, -87.54430496?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.longitude = '-87.54430496' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.report_no = T2.iucr_no WHERE T2.index_code = 'I' AND T1.latitude = '41.64820251'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crime_incidents WHERE severity = 'severe' AND latitude = 41.64820151 AND longitude = -87.54430496;"
        ],
        "rule_sql": []
    },
    "3713": {
        "db_id": "college_completion",
        "question": "Which state is \"Mercer University\" located in?",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Mercer University' THEN state ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM universities WHERE name = 'Mercer University';"
        ],
        "rule_sql": []
    },
    "9221": {
        "db_id": "movie_3",
        "question": "Calculate how many percent of customers were located in India.",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100 / (SELECT COUNT(*) FROM customers)) AS percentage FROM customers WHERE country = 'India';"
        ],
        "rule_sql": []
    },
    "2100": {
        "db_id": "world_development_indicators",
        "question": "On which years did Aruba got a footnote on the series code AG.LND.FRST.K2?",
        "ground_truth": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM footnotes WHERE country = 'Aruba' AND series_code = 'AG.LND.FRST.K2'"
        ],
        "rule_sql": []
    },
    "4456": {
        "db_id": "student_loan",
        "question": "How many SMC's students that absent for 7 months?",
        "ground_truth": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T1.school = 'smc' AND T2.month = 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE school = 'SMC' AND absences >= 7;"
        ],
        "rule_sql": []
    },
    "5478": {
        "db_id": "menu",
        "question": "Please list the IDs of all the menus in which the dish \"Clear green turtle\" had appeared.",
        "ground_truth": "SELECT T1.menu_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_id FROM dishes WHERE dish_name = 'Clear green turtle';"
        ],
        "rule_sql": []
    },
    "2250": {
        "db_id": "movielens",
        "question": "How many movies from the USA which user rating is less than 3?",
        "ground_truth": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' AND T1.rating < 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE country = 'USA' AND rating > 3;"
        ],
        "rule_sql": []
    },
    "4480": {
        "db_id": "student_loan",
        "question": "How many students enlisted in the navy?",
        "ground_truth": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE branch = 'army';"
        ],
        "rule_sql": []
    },
    "3332": {
        "db_id": "video_games",
        "question": "How many platforms are available for the game Pro Evolution Soccer 2016?",
        "ground_truth": "SELECT COUNT(T2.id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = 'Pro Evolution Soccer 2016'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE title = 'Pro Evolution Soccer 2016';"
        ],
        "rule_sql": []
    },
    "2911": {
        "db_id": "professional_basketball",
        "question": "Please list the top five players with the most steals in the year 1997. Please give their full name.",
        "ground_truth": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1997 ORDER BY T2.steals DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, steals FROM players WHERE year = 1997 ORDER BY steals DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "7457": {
        "db_id": "works_cycles",
        "question": "What is the cost for the product \"847\"?",
        "ground_truth": "SELECT StandardCost FROM ProductCostHistory WHERE ProductID = 847",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM products WHERE product_id = 847;"
        ],
        "rule_sql": []
    },
    "1588": {
        "db_id": "car_retails",
        "question": "What is the average actual profit by 1937 Lincoln Berline?",
        "ground_truth": "SELECT SUM(T1.priceEach - T2.buyPrice) / COUNT(*) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productName = '1937 Lincoln Berline'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(profit) FROM sales WHERE car_model = '1937 Lincoln Berline';"
        ],
        "rule_sql": []
    },
    "238": {
        "db_id": "book_publishing_company",
        "question": "Of the titles, which title is about the Carefully researched study of the effects of strong emotions on the body, which state-based publisher published this book, and what is the year-to-date sale?",
        "ground_truth": "SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, publisher, ytd_sales FROM books WHERE description LIKE '%Carefully researched study of the effects of strong emotions on the body%' ORDER BY ytd_sales DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5637": {
        "db_id": "shipping",
        "question": "State the address of drivers who transported the shipment with weight greater than 50000 pounds.",
        "ground_truth": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 50000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.address FROM drivers d JOIN shipments s ON d.driver_id = s.driver_id WHERE s.weight > 50000"
        ],
        "rule_sql": []
    },
    "3582": {
        "db_id": "authors",
        "question": "What percentage of authors of the paper about Charged particle multiplicity are affiliated with INFN?",
        "ground_truth": "SELECT CAST((SUM(CASE WHEN T1.Affiliation LIKE '%INFN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T2.Id) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title LIKE '%Charged particle multiplicity%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT CASE WHEN a.affiliation LIKE '%INFN%' THEN a.author_id END) * 100.0 / COUNT(DISTINCT a.author_id)) AS percentage\nFROM \n    authors a\nJOIN \n    papers p ON a.paper_id = p.paper_id\nWHERE \n    p.title = 'Charged particle multiplicity';"
        ],
        "rule_sql": []
    },
    "1579": {
        "db_id": "car_retails",
        "question": "List out 3 customer numbers who have highest amount payment",
        "ground_truth": "SELECT customerNumber FROM payments ORDER BY amount DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customerNumber FROM payments ORDER BY amount DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "3747": {
        "db_id": "college_completion",
        "question": "In the state with the highest state appropriations to higher education in fiscal year 2011 per resident, which institution has the lowest number of undergraduates in 2010?",
        "ground_truth": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T1.student_count = ( SELECT MIN(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T3.year = 2010 ) AND T3.year = 2010 GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT institution_name \nFROM higher_education_data \nWHERE state = (SELECT state FROM higher_education_data ORDER BY state_appropriations_2011 DESC LIMIT 1) \nORDER BY undergraduates_2010 ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8669": {
        "db_id": "chicago_crime",
        "question": "How many domestic violence cases were brought in the ward that uses \"ward13@cityofchicago.org\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no WHERE T1.ward_email = 'ward13@cityofchicago.org'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cases WHERE case_type = 'domestic violence' AND ward_email = 'ward13@cityofchicago.org';"
        ],
        "rule_sql": []
    },
    "715": {
        "db_id": "trains",
        "question": "Which direction do the majority of the trains are running?",
        "ground_truth": "SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT direction, COUNT(*) as count FROM trains GROUP BY direction ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9229": {
        "db_id": "movie_3",
        "question": "List the actor's last name that starred the film with the description of \"A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies\".",
        "ground_truth": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.last_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'\nORDER BY a.last_name;"
        ],
        "rule_sql": []
    },
    "3698": {
        "db_id": "college_completion",
        "question": "In total, how many Hispanic male students graduated from Amridge University?",
        "ground_truth": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.gender = 'M' AND T2.race = 'H'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university = 'Amridge University' AND gender = 'Male' AND ethnicity = 'Hispanic' AND status = 'Graduated';"
        ],
        "rule_sql": []
    },
    "8533": {
        "db_id": "software_company",
        "question": "List down the geographic identifier with an income that ranges from 2100 to 2500.",
        "ground_truth": "SELECT GEOID FROM Demog WHERE INCOME_K >= 2100 AND INCOME_K <= 2500",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT geographic_identifier FROM table_name WHERE income BETWEEN 2500 AND 2100"
        ],
        "rule_sql": []
    },
    "4913": {
        "db_id": "olympics",
        "question": "Please list the names of all the Olympic games that John Aalberg has taken part in.",
        "ground_truth": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT games FROM olympics WHERE athlete = 'John Aalberg';"
        ],
        "rule_sql": []
    },
    "4751": {
        "db_id": "legislator",
        "question": "For which state did current legislator Sherrod Brown serve during his term that started on 1993/1/5?",
        "ground_truth": "SELECT T1.state FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state FROM legislators WHERE name = 'Sherrod Brown' AND term_start = '1993/1/5';"
        ],
        "rule_sql": []
    },
    "8700": {
        "db_id": "chicago_crime",
        "question": "How many domestic crime cases has Commander Ronald A. Pontecore Jr. been responsible for investigating?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.commander = 'Ronald A. Pontecore Jr.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crime_cases WHERE investigator = 'Commander Ronald A. Pontecore Jr.' AND case_type = 'domestic';"
        ],
        "rule_sql": []
    },
    "5892": {
        "db_id": "airline",
        "question": "List the air carrier description and code of the flight with the shortest arrival time.",
        "ground_truth": "SELECT T1.Description, T1.Code FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ARR_TIME ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT air_carrier_description, code FROM flights ORDER BY arrival_time ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5379": {
        "db_id": "sales",
        "question": "What is the first name of employee who handled sales for customer called Abigail?",
        "ground_truth": "SELECT DISTINCT T3.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.FirstName = 'Abigail'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE customer_name = 'Abigail' AND department = 'Sales'"
        ],
        "rule_sql": []
    },
    "4006": {
        "db_id": "public_review_platform",
        "question": "How many businesses that are registered in the database can be attributed to 'Good for Kids'?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'Good for Kids' AND T2.attribute_value = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE attribute = 'Good for Kids';"
        ],
        "rule_sql": []
    },
    "5601": {
        "db_id": "shipping",
        "question": "What is the area of the destination city of shipment No.1346?",
        "ground_truth": "SELECT T2.area FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1346'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city.area FROM city JOIN shipment ON city.city_id = shipment.origin_city_id WHERE shipment.shipment_id = 1346"
        ],
        "rule_sql": []
    },
    "9294": {
        "db_id": "movie_3",
        "question": "Please list the titles of any three action films.",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Action' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE genre = 'action' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "913": {
        "db_id": "cs_semester",
        "question": "Provide the full names and emails of unpaid research assistants.",
        "ground_truth": "SELECT T2.f_name, T2.l_name, T2.email FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, email FROM research_assistants WHERE payment_status = 'paid';"
        ],
        "rule_sql": []
    },
    "8631": {
        "db_id": "chicago_crime",
        "question": "How many solicit on public way prostitution crimes were arrested in West Garfield Park?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T1.community_area_name = 'West Garfield Park' AND T3.secondary_description = 'SOLICIT ON PUBLIC WAY' AND T3.primary_description = 'PROSTITUTION'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE primary_type = 'PROSTITUTION' AND location_description = 'PUBLIC WAY' AND arrest = 'TRUE' AND community_area = 'WEST GARFIELD PARK';"
        ],
        "rule_sql": []
    },
    "1584": {
        "db_id": "car_retails",
        "question": "List out full name and email of employees who are working in Paris?",
        "ground_truth": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, email FROM employees WHERE city = 'Paris';"
        ],
        "rule_sql": []
    },
    "3124": {
        "db_id": "cars",
        "question": "What is the price of a Chevrolet Bel Air?",
        "ground_truth": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet bel air'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM cars WHERE make = 'Chevrolet' AND model = 'Bel Air';"
        ],
        "rule_sql": []
    },
    "3067": {
        "db_id": "cars",
        "question": "What was the origin country of the car model ford torino produced in 1970?",
        "ground_truth": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'ford torino' AND T2.model_year = 1970",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT origin FROM cars WHERE model = 'ford torino' AND year = 1970;"
        ],
        "rule_sql": []
    },
    "1607": {
        "db_id": "car_retails",
        "question": "Of the clients whose businesses are located in the city of Boston, calculate which of them has a higher average amount of payment.",
        "ground_truth": "SELECT T1.customerNumber FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.city = 'Boston' GROUP BY T1.customerNumber ORDER BY SUM(T2.amount) / COUNT(T2.paymentDate) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT client_name, AVG(payment_amount) as avg_payment\nFROM clients c\nJOIN payments p ON c.client_id = p.client_id\nWHERE c.city = 'Boston'\nGROUP BY client_name\nORDER BY avg_payment DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8381": {
        "db_id": "mondial_geo",
        "question": "What is the capital of the country that has the Licancabur Mountain?",
        "ground_truth": "SELECT T4.Capital FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Province = T3.Name WHERE T1.Name = 'Licancabur'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT capital FROM countries WHERE mountain = 'Licancabur';"
        ],
        "rule_sql": []
    },
    "7051": {
        "db_id": "works_cycles",
        "question": "Please list the titles of the documents that are pending approval.",
        "ground_truth": "SELECT Title FROM Document WHERE Status = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM documents WHERE status = 'approved';"
        ],
        "rule_sql": []
    },
    "7661": {
        "db_id": "hockey",
        "question": "Please list the awards won by coaches who were born in 1952.",
        "ground_truth": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.birthYear = 1952",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT award_name FROM coaches WHERE birth_year = 1952"
        ],
        "rule_sql": []
    },
    "7038": {
        "db_id": "works_cycles",
        "question": "Which department has a worker who just recently started working?",
        "ground_truth": "SELECT T1.Name FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID ORDER BY T2.StartDate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name FROM departments WHERE start_date = MAX(start_date)"
        ],
        "rule_sql": []
    },
    "5735": {
        "db_id": "language_corpus",
        "question": "Which Wikipedia page number does the Catalan language's name, Acampada, appear on?",
        "ground_truth": "SELECT page FROM pages WHERE title = 'Acampada'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_id FROM page WHERE page_title = 'Acampada' AND page_language = 'Catalan';"
        ],
        "rule_sql": []
    },
    "5951": {
        "db_id": "books",
        "question": "How many orders were delivered in 2021?",
        "ground_truth": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2021'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE delivered_date LIKE '2020%';"
        ],
        "rule_sql": []
    },
    "9406": {
        "db_id": "movie_3",
        "question": "In store ID 2, how many of the films are R rating?\n",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 AND T1.rating = 'R'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM film WHERE store_id = 2 AND rating = 'R';"
        ],
        "rule_sql": []
    },
    "3233": {
        "db_id": "donor",
        "question": "What is the teacher prefix for the teacher who wrote the project 'Creating Memories and Inspiring Dreams'?",
        "ground_truth": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Creating Memories and Inspiring Dreams%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT teacher_prefix FROM teachers WHERE project_title = 'Creating Memories and Inspiring Dreams';"
        ],
        "rule_sql": []
    },
    "6142": {
        "db_id": "food_inspection_2",
        "question": "How many establishments that are doing business as Homemade Pizza have a risk level of 2?",
        "ground_truth": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 2 AND dba_name = 'HOMEMADE PIZZA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM establishments WHERE business_name = 'Homemade Pizza' AND risk_level = '2';"
        ],
        "rule_sql": []
    },
    "3749": {
        "db_id": "college_completion",
        "question": "Among the Ivy League Schools, which school have the highest number of Hispanic graduates of all time?",
        "ground_truth": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) AND T2.race = 'H' GROUP BY T1.chronname ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_name, COUNT(*) as hispanic_graduates \nFROM graduates \nWHERE league = 'Ivy League' \nGROUP BY school_name \nORDER BY hispanic_graduates DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2607": {
        "db_id": "regional_sales",
        "question": "How many orders placed were with more than 5 product quantities?",
        "ground_truth": "SELECT SUM(IIF(`Order Quantity` > 5, 1, 0)) FROM `Sales Orders`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE quantity > 5;"
        ],
        "rule_sql": []
    },
    "4067": {
        "db_id": "public_review_platform",
        "question": "Among the active businesses in Arizona, how many businesses work after 12PM?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.business_id) FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T1.opening_time > '12PM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE state = 'Arizona' AND is_active = 1 AND closing_time > '12:00:00';"
        ],
        "rule_sql": []
    },
    "1084": {
        "db_id": "talkingdata",
        "question": "To which user group do most of the users who uses a vivo device belong?",
        "ground_truth": "SELECT T.`group` FROM ( SELECT T2.`group`, COUNT(`group`) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.`group` ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_group, COUNT(*) as user_count\nFROM users\nWHERE device = 'vivo'\nGROUP BY user_group\nORDER BY user_count ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "10": {
        "db_id": "movie_platform",
        "question": "List all movies with the best rating score. State the movie title and number of Mubi user who loves the movie.",
        "ground_truth": "SELECT DISTINCT T2.movie_title, T2.movie_popularity FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, COUNT(user_id) AS love_count \nFROM movies \nWHERE rating = (SELECT MAX(rating) FROM movies) \nGROUP BY title;"
        ],
        "rule_sql": []
    },
    "1198": {
        "db_id": "talkingdata",
        "question": "Give the number of male users who use phone branded HTC.",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T2.phone_brand = 'HTC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female' AND phone_brand = 'HTC';"
        ],
        "rule_sql": []
    },
    "2170": {
        "db_id": "world_development_indicators",
        "question": "What are the footnote description of Finland in year 2000?",
        "ground_truth": "SELECT DISTINCT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Finland' AND T2.Year = 'YR2000'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT footnote_description FROM footnotes WHERE country = 'Finland' AND year = 2000;"
        ],
        "rule_sql": []
    },
    "8661": {
        "db_id": "chicago_crime",
        "question": "Among the cases reported in the ward with Edward Burke as the alderman and happened in the community area with the highest population, provide the report number of the crime with the highest beat.",
        "ground_truth": "SELECT T2.report_no FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T1.alderman_first_name = 'Edward' AND T1.alderman_last_name = 'Burke' ORDER BY T2.beat DESC, T3.population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT report_number FROM crimes WHERE alderman = 'Edward Burke' AND community_area = (SELECT community_area FROM community_areas ORDER BY population DESC LIMIT 1) ORDER BY beat DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3838": {
        "db_id": "public_review_platform",
        "question": "How many businesses in AZ state do not open on Thursday?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Checkins AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.label_time_4 LIKE 'None' AND T1.state LIKE 'AZ' AND T3.day_of_week LIKE 'Thursday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE state = 'AZ' AND thursday_hours IS NULL;"
        ],
        "rule_sql": []
    },
    "292": {
        "db_id": "retail_complains",
        "question": "List by their ID the complaints received by the company on 25/09/2014 that took the longest.",
        "ground_truth": "SELECT `Complaint ID` FROM events WHERE strftime('%J', `Date sent to company`) - strftime('%J', `Date received`) = ( SELECT MAX(strftime('%J', `Date sent to company`) - strftime('%J', `Date received`)) FROM events WHERE `Date sent to company` = '2014-09-25' ) AND `Date sent to company` = '2014-09-25'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT complaint_id FROM complaints WHERE date = '2014-09-25' ORDER BY duration DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6761": {
        "db_id": "retails",
        "question": "Give the name and phone number of the customers who have more than 9000 account balance.",
        "ground_truth": "SELECT c_name, c_phone FROM customer WHERE c_acctbal > 9000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, phone_number FROM customers WHERE account_balance > 9000"
        ],
        "rule_sql": []
    },
    "2488": {
        "db_id": "shooting",
        "question": "What proportion of male police officers looked into events where people were injured?",
        "ground_truth": "SELECT CAST(SUM(T2.gender = 'M') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN officers T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM events WHERE people_injured = 1) AS proportion\nFROM officers o\nJOIN events e ON o.officer_id = e.officer_id\nWHERE o.gender = 'male' AND e.people_injured = 1 AND o.role = 'police'"
        ],
        "rule_sql": []
    },
    "9031": {
        "db_id": "bike_share_1",
        "question": "Find the average ride time of the bikes that started at Steuart at Market station and ended at Embarcadero at Sansome station in July 2014.",
        "ground_truth": "SELECT AVG(duration) FROM trip WHERE start_date = '7/1/2014%' AND end_date = '7/31/2014%' AND start_station_name = 'Steuart at Market' AND end_station_name = 'Embarcadero at Sansome'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(end_time - start_time) AS avg_ride_time\nFROM bike_trips\nWHERE start_station = 'Steuart at Market'\nAND end_station = 'Embarcadero at Sansome'\nAND start_time LIKE '2014-07%';"
        ],
        "rule_sql": []
    },
    "8576": {
        "db_id": "software_company",
        "question": "List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response?",
        "ground_truth": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT income, number_of_inhabitants FROM customers WHERE reference_id > (SELECT AVG(false_response) * 0.5 FROM customers);"
        ],
        "rule_sql": []
    },
    "4788": {
        "db_id": "legislator",
        "question": "How many historical legislators were born in 1973?",
        "ground_truth": "SELECT COUNT(*) FROM historical WHERE CAST(birthday_bio AS date) = 1973",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE birth_year = 1973;"
        ],
        "rule_sql": []
    },
    "5618": {
        "db_id": "shipping",
        "question": "Determine the percentage of manufacturers who are from Texas among all of Lorenzo's customers.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN cust_type = 'manufacturer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer WHERE state = 'TX'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN state = 'Texas' THEN 1 END) / COUNT(*)) * 100 AS percentage\nFROM customers\nWHERE name = 'Lorenzo';"
        ],
        "rule_sql": []
    },
    "8906": {
        "db_id": "cookbook",
        "question": "List the ingredients in Tomato-Cucumber Relish.",
        "ground_truth": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Tomato-Cucumber Relish'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ingredient_name FROM ingredients WHERE recipe_name = 'Tomato-Cucumber Relish';"
        ],
        "rule_sql": []
    },
    "5692": {
        "db_id": "language_corpus",
        "question": "List all the first words of the biwords pair where the second word is 'antic'.",
        "ground_truth": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w2nd = ( SELECT wid FROM words WHERE word = 'antic' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_word FROM biwords WHERE second_word = 'antic';"
        ],
        "rule_sql": []
    },
    "3535": {
        "db_id": "authors",
        "question": "What is the title and author ID of paper with conference ID less than 100 in year 2006?",
        "ground_truth": "SELECT DISTINCT T1.Title, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2006 AND T1.ConferenceId < 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, author_id FROM papers WHERE conference_id < 100 AND year = 2006;"
        ],
        "rule_sql": []
    },
    "8672": {
        "db_id": "chicago_crime",
        "question": "List the case number of crimes against society that happened in June 2018.",
        "ground_truth": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T2.date LIKE '6/%/2018%' AND T1.crime_against = 'Society'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT case_number FROM crimes WHERE crime_type = 'crimes against society' AND date LIKE '2018-06%';"
        ],
        "rule_sql": []
    },
    "6991": {
        "db_id": "ice_hockey_draft",
        "question": "Name the player who had the most goals for team Rimouski Oceanic in playoff.",
        "ground_truth": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Rimouski Oceanic' AND T2.GAMETYPE = 'Playoffs' ORDER BY T2.G DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM players WHERE team = 'Rimouski Oceanic' ORDER BY goals DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3188": {
        "db_id": "donor",
        "question": "State the name of vendor that supplies book resources to all school with literacy subject as their primary focus.",
        "ground_truth": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject LIKE 'Literacy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name FROM vendors WHERE vendor_id IN (SELECT vendor_id FROM book_supplies WHERE school_id IN (SELECT school_id FROM schools WHERE primary_subject = 'literacy'))"
        ],
        "rule_sql": []
    },
    "4627": {
        "db_id": "disney",
        "question": "Who is the voice actor for the villain of the movie \"Alice in Wonderland\"?",
        "ground_truth": "SELECT T1.`voice-actor` FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM movies WHERE movie_title = 'Alice in Wonderland' AND character_type = 'villain';"
        ],
        "rule_sql": []
    },
    "5225": {
        "db_id": "address",
        "question": "Provide the zip codes and area codes of the postal points with the community post office type at the elevation above 6000.",
        "ground_truth": "SELECT T1.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Community Post Office ' AND T2.elevation > 6000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code, area_code FROM postal_points WHERE post_office_type = 'community' AND elevation > 6000;"
        ],
        "rule_sql": []
    },
    "3943": {
        "db_id": "public_review_platform",
        "question": "List the category of the business with high review count but received 2 stars.",
        "ground_truth": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 2 AND T1.review_count LIKE 'High'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM businesses WHERE review_count > 100 AND stars = 2;"
        ],
        "rule_sql": []
    },
    "1823": {
        "db_id": "soccer_2016",
        "question": "How many matches did Team 10 play in 2012?",
        "ground_truth": "SELECT SUM(CASE WHEN Team_1 = 10 OR Team_2 = 10 THEN 1 ELSE 0 END) FROM `Match` WHERE SUBSTR(Match_Date, 1, 4) = '2012'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE team_id = 10 AND year = 2012;"
        ],
        "rule_sql": []
    },
    "1680": {
        "db_id": "restaurant",
        "question": "In which regions are there no African food restaurants?",
        "ground_truth": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type != 'african'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM restaurants WHERE cuisine != 'African' GROUP BY region HAVING COUNT(*) = 0;"
        ],
        "rule_sql": []
    },
    "1857": {
        "db_id": "soccer_2016",
        "question": "Describe any five matches IDs that reached over ID 20.",
        "ground_truth": "SELECT Match_Id FROM Ball_by_Ball WHERE Over_Id = 20 GROUP BY Match_Id LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM matches WHERE id > 20 LIMIT 5;"
        ],
        "rule_sql": []
    },
    "838": {
        "db_id": "social_media",
        "question": "Please list the texts of the top 3 tweets with the most number of unique users seeing the tweet.",
        "ground_truth": "SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT text FROM tweets ORDER BY user_id DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "8208": {
        "db_id": "sales_in_weather",
        "question": "What is the sea level and average speed for store number 3 and store number 4?",
        "ground_truth": "SELECT T1.sealevel, T1.avgspeed FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 3 OR T2.store_nbr = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sea_level, average_speed FROM stores WHERE store_number = 3 OR store_number = 4;"
        ],
        "rule_sql": []
    },
    "5729": {
        "db_id": "language_corpus",
        "question": "Calculate the percentage of times that the same word appears in a pair.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN w1st = w2nd THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(w1st) FROM biwords",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM word_pairs)) AS percentage\nFROM word_pairs\nWHERE word1 = word2;"
        ],
        "rule_sql": []
    },
    "7007": {
        "db_id": "works_cycles",
        "question": "How many transactions are there for product under the Mountain line?",
        "ground_truth": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM transactions WHERE product_line = 'Mountain';"
        ],
        "rule_sql": []
    },
    "565": {
        "db_id": "movies_4",
        "question": "Calculate the average income made by movies using the keyword \"paris\". List the title of the movies.",
        "ground_truth": "SELECT AVG(T1.revenue), T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'paris'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, AVG(income) FROM movies WHERE keyword = 'paris' GROUP BY title;"
        ],
        "rule_sql": []
    },
    "2807": {
        "db_id": "professional_basketball",
        "question": "What is the percentage of player who won \"All-Defensive First Team\" from 1980 - 2000 is from 'NY'.",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.birthState = 'NY' AND T2.award = 'All-Defensive First Team' AND T2.year BETWEEN 1980 AND 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN p.birth_city = 'NY' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    players p\nJOIN \n    awards_players ap ON p.player_id = ap.player_id\nWHERE \n    ap.award = 'All-Defensive First Team'\n    AND ap.year BETWEEN 1980 AND 2000;"
        ],
        "rule_sql": []
    },
    "6080": {
        "db_id": "books",
        "question": "Name the title of the book with the most number of pages that was published from 1990 to 2000 by publisher Free Press.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Free Press' AND STRFTIME('%Y', T1.publication_date) BETWEEN '1990' AND '2000' ORDER BY T1.num_pages DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE publisher = 'Free Press' AND year BETWEEN 1990 AND 2000 ORDER BY pages ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5170": {
        "db_id": "address",
        "question": "Provide the countries and the zip codes in the Virgin Islands.",
        "ground_truth": "SELECT T2.county, T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virgin Islands'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, zip_code FROM addresses WHERE country = 'Virgin Islands';"
        ],
        "rule_sql": []
    },
    "5384": {
        "db_id": "sales",
        "question": "Among customers with the last name of Valdez, who purchased the highest quantity?",
        "ground_truth": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.LastName = 'Valdez' ORDER BY T2.Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, MAX(quantity) \nFROM customers \nJOIN orders ON customers.customer_id = orders.customer_id \nWHERE last_name = 'Valdez' \nGROUP BY first_name, last_name \nORDER BY MAX(quantity) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8985": {
        "db_id": "human_resources",
        "question": "Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.",
        "ground_truth": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.first_name, m.last_name, l.city, l.address, l.zip_code\nFROM employees e\nJOIN employees m ON e.manager_id = m.employee_id\nJOIN locations l ON m.location_id = l.location_id\nWHERE e.performance_rating = 'Poor';"
        ],
        "rule_sql": []
    },
    "1778": {
        "db_id": "restaurant",
        "question": "In the Bay Area, what is the most common type of food served by restaurants?",
        "ground_truth": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT type, COUNT(*) as count FROM restaurants WHERE city = 'Bay Area' GROUP BY type ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7544": {
        "db_id": "image_and_language",
        "question": "Name the object class of the image with a bounding (422, 63, 77, 363).",
        "ground_truth": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT object_class FROM images WHERE bounding_box = '(422, 63, 77, 363)'"
        ],
        "rule_sql": []
    },
    "318": {
        "db_id": "retail_complains",
        "question": "Which region does Noah Thompson live in?",
        "ground_truth": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Noah' AND T1.last = 'Thompson'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM users WHERE first_name = 'Noah' AND last_name = 'Thompson';"
        ],
        "rule_sql": []
    },
    "1991": {
        "db_id": "soccer_2016",
        "question": "Among the matches of Delhi Daredevils in 2014, how many won matches are there?",
        "ground_truth": "SELECT COUNT(T1.Match_Winner) FROM `Match` AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 OR T2.Team_Id = T1.Team_2 WHERE T2.team_name = 'Delhi Daredevils' AND T1.Match_Date LIKE '2014%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE team1 = 'Delhi Daredevils' OR team2 = 'Delhi Daredevils' AND season = 2014 AND winner = 'Delhi Daredevils';"
        ],
        "rule_sql": []
    },
    "8840": {
        "db_id": "food_inspection",
        "question": "What is the total number of businesses with a tax code H25?",
        "ground_truth": "SELECT COUNT(tax_code) FROM businesses WHERE tax_code = 'H25'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE tax_code = 'H25';"
        ],
        "rule_sql": []
    },
    "5617": {
        "db_id": "shipping",
        "question": "How many shipments were shipped to the most densely populated city?",
        "ground_truth": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area / T2.population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM shipments s\nJOIN cities c ON s.city_id = c.city_id\nORDER BY c.population DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8584": {
        "db_id": "software_company",
        "question": "Among the reference ID of under 10 who got response by marketing department, compare their education status.",
        "ground_truth": "SELECT T1.EDUCATIONNUM FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.REFID < 10 AND T2.RESPONSE = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT education_status FROM customers WHERE age < 10 AND department = 'marketing' AND response_received = 1"
        ],
        "rule_sql": []
    },
    "1179": {
        "db_id": "talkingdata",
        "question": "Among the HTC users, calculate the percentage of female users who are over 80.",
        "ground_truth": "SELECT SUM(IIF(T1.gender = 'F' AND T1.age > 80, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'HTC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN gender = 'female' AND age > 80 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_over_80 FROM users WHERE brand = 'HTC';"
        ],
        "rule_sql": []
    },
    "170": {
        "db_id": "book_publishing_company",
        "question": "What is the title that have at least 10% royalty without minimum range amount.",
        "ground_truth": "SELECT T1.title FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange = 0 AND T2.royalty >= 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM titles WHERE royalty >= 10 AND min_range_amount IS NULL;"
        ],
        "rule_sql": []
    },
    "5051": {
        "db_id": "olympics",
        "question": "How many Belgian men have competed in an Olympic Games?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE nationality = 'Belgium' AND gender = 'male';"
        ],
        "rule_sql": []
    },
    "725": {
        "db_id": "trains",
        "question": "What is the direction of the train with a diamond-shaped load in its 2nd car?",
        "ground_truth": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT direction FROM trains WHERE load_shape = 'diamond' AND car_position = 2;"
        ],
        "rule_sql": []
    },
    "438": {
        "db_id": "movies_4",
        "question": "How many movies have made at least 1 Billion at the box office?",
        "ground_truth": "SELECT COUNT(movie_id) FROM movie WHERE revenue > 1000000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE box_office >= 1000000000;"
        ],
        "rule_sql": []
    },
    "7523": {
        "db_id": "image_and_language",
        "question": "Among the objects that have multiple relations, how many images whose captions for the prediction class ids are \"on\"?",
        "ground_truth": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM images \nWHERE caption LIKE '%on%' \nAND object_id IN (\n    SELECT object_id \n    FROM relations \n    GROUP BY object_id \n    HAVING COUNT(*) > 1\n)"
        ],
        "rule_sql": []
    },
    "648": {
        "db_id": "codebase_comments",
        "question": "What is the percentage of the methods' solutions that need to be compiled among the methods whose comments is XML format?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.CommentIsXml = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN m.solution LIKE '%compile%' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM methods m\nWHERE m.comments LIKE '<?xml%';"
        ],
        "rule_sql": []
    },
    "1781": {
        "db_id": "restaurant",
        "question": "List all the streets where pizza-serving restaurants are found in San Jose.",
        "ground_truth": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'pizza' AND T1.city = 'san jose'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT street FROM restaurants WHERE city = 'San Jose' AND cuisine = 'pizza';"
        ],
        "rule_sql": []
    },
    "3587": {
        "db_id": "authors",
        "question": "Please list the names of the authors of the paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\".",
        "ground_truth": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM authors WHERE paper_name = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers';"
        ],
        "rule_sql": []
    },
    "2246": {
        "db_id": "world_development_indicators",
        "question": "What is the average value of Adolescent fertility rate in the country whose Alpha2Code is 1A?",
        "ground_truth": "SELECT CAST(SUM(T2.Value) AS REAL) * 100 / COUNT(T2.Year) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(Adolescent_fertility_rate) FROM countries WHERE Alpha2Code = '1A';"
        ],
        "rule_sql": []
    },
    "85": {
        "db_id": "movie_platform",
        "question": "How many films were released in 2007?",
        "ground_truth": "SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE release_year = 2006;"
        ],
        "rule_sql": []
    },
    "3206": {
        "db_id": "donor",
        "question": "Which item provided to a project whose main subject area is Literacy & Language has the highest unit price?",
        "ground_truth": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' ORDER BY T1.item_unit_price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT item_name, unit_price FROM project_items WHERE subject_area = 'Literacy & Language' ORDER BY unit_price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4990": {
        "db_id": "olympics",
        "question": "How many Men's 200 Metres Freestyle events did Ian James Thorpe compete in?",
        "ground_truth": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T1.full_name = 'Ian James Thorpe' AND T4.event_name LIKE 'Swimming Men%s 200 metres Freestyle'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE event_name = 'Men\\'s 200 Metres Freestyle' AND athlete_name = 'Ian James Thorpe';"
        ],
        "rule_sql": []
    },
    "9362": {
        "db_id": "movie_3",
        "question": "What is the title of the restricted film, whose length is 71 minutes and whose replacement cost is $29.99?",
        "ground_truth": "SELECT title FROM film WHERE replacement_cost = 29.99 AND rating = 'R' AND length = 71",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM film WHERE length = 71 AND replacement_cost = 29.99 AND rating = 'R';"
        ],
        "rule_sql": []
    },
    "1027": {
        "db_id": "computer_student",
        "question": "What year in the program do the students with more than 2 advisors are in?",
        "ground_truth": "SELECT T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.student = 1 GROUP BY T2.p_id HAVING COUNT(T2.p_id) > 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM students WHERE COUNT(advisors) > 2 GROUP BY year;"
        ],
        "rule_sql": []
    },
    "9256": {
        "db_id": "movie_3",
        "question": "What is the average number of actors acted in comedy movies?",
        "ground_truth": "SELECT AVG(T1.actor_id) FROM film_actor AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN actor AS T4 ON T4.actor_id = T1.actor_id WHERE T3.name = 'comedy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(actor_count) FROM movies WHERE genre = 'comedy';"
        ],
        "rule_sql": []
    },
    "6207": {
        "db_id": "food_inspection_2",
        "question": "What is the full name of the employee that inspected establishments with license 1334073?",
        "ground_truth": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1334073",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE license_number = 1334073"
        ],
        "rule_sql": []
    },
    "6800": {
        "db_id": "retails",
        "question": "Please list any three line item numbers that have 10% off.",
        "ground_truth": "SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT line_item_number FROM line_items WHERE discount = 10 LIMIT 3;"
        ],
        "rule_sql": []
    },
    "1429": {
        "db_id": "synthea",
        "question": "What is the prevalence rate of the patients' diseases started on 9th May 2014?",
        "ground_truth": "SELECT T2.\"PREVALENCE RATE\" FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T1.DESCRIPTION) = lower(T2.ITEM) WHERE T1.START = '2014-05-09'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM patients) * 100 AS prevalence_rate FROM diseases WHERE start_date = '2014-05-09';"
        ],
        "rule_sql": []
    },
    "858": {
        "db_id": "cs_semester",
        "question": "Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Faina' AND T3.l_name = 'Mallinar'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name FROM professors p JOIN students s ON p.id = s.advisor_id WHERE s.name = 'Faina Mallinar' AND s.position = 'research assistant';"
        ],
        "rule_sql": []
    },
    "2691": {
        "db_id": "regional_sales",
        "question": "To which region does the sales team that has used the WARE-MKL1006 warehouse the most times for its shipments belong?",
        "ground_truth": "SELECT T2.Region FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.WarehouseCode = 'WARE-MKL1006' GROUP BY T2.Region ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT r.region_name\nFROM sales_teams st\nJOIN shipments s ON st.team_id = s.team_id\nJOIN warehouses w ON s.warehouse_id = w.warehouse_id\nJOIN regions r ON st.region_id = r.region_id\nWHERE w.warehouse_code = 'WARE-MKL1006'\nGROUP BY st.team_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1": {
        "db_id": "movie_platform",
        "question": "State the most popular movie? When was it released and who is the director for the movie?",
        "ground_truth": "SELECT movie_title, movie_release_year, director_name FROM movies ORDER BY movie_popularity DESC LIMIT 1 ",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, release_year, director FROM movies ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4654": {
        "db_id": "disney",
        "question": "What is the Motion Picture Association of America rating for the movie featuring a villain named Turbo?",
        "ground_truth": "SELECT T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.villian = 'Turbo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT mpaa_rating FROM movies WHERE villain = 'Turbo';"
        ],
        "rule_sql": []
    },
    "1752": {
        "db_id": "restaurant",
        "question": "What is the city located in Bay Area of Santa Clara?",
        "ground_truth": "SELECT city FROM geographic WHERE region = 'bay area' AND county = 'santa clara county'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM locations WHERE area = 'Bay Area' AND county = 'Santa Clara';"
        ],
        "rule_sql": []
    },
    "2105": {
        "db_id": "world_development_indicators",
        "question": "What are the special notes for the country whose average adolescent fertility rate is the highest?",
        "ground_truth": "SELECT DISTINCT T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName LIKE 'Adolescent fertility rate%' ORDER BY Value DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT special_notes FROM country WHERE adolescent_fertility_rate = (SELECT MAX(adolescent_fertility_rate) FROM country);"
        ],
        "rule_sql": []
    },
    "5643": {
        "db_id": "shipping",
        "question": "What is the brand and model of truck used in shipment id 1055?",
        "ground_truth": "SELECT T1.make, T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1055'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, model FROM trucks WHERE shipment_id = 1055"
        ],
        "rule_sql": []
    },
    "458": {
        "db_id": "movies_4",
        "question": "Write the person ID and character name of casts between order numbers 1 and 10 in Movie No. 285.",
        "ground_truth": "SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT person_id, character_name FROM casts WHERE movie_id = 285 AND order_number BETWEEN 1 AND 10;"
        ],
        "rule_sql": []
    },
    "8830": {
        "db_id": "food_inspection",
        "question": "Provide eateries' IDs, names and addresses which were inspected on 30th July, 2016.",
        "ground_truth": "SELECT DISTINCT T2.business_id, T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.date = '2016-07-30'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT eatery_id, name, address FROM eateries WHERE inspection_date = '2016-07-30';"
        ],
        "rule_sql": []
    },
    "1247": {
        "db_id": "law_episode",
        "question": "What is the title of the episode with the keyword \"laundering money\"?",
        "ground_truth": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'laundering money'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_title FROM episodes WHERE keyword = 'laundering money';"
        ],
        "rule_sql": []
    },
    "7887": {
        "db_id": "world",
        "question": "What is the average life expentancy of countries that speak Arabic?",
        "ground_truth": "SELECT AVG(T1.LifeExpectancy) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Arabic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(life_expectancy) FROM countries WHERE language = 'Arabic';"
        ],
        "rule_sql": []
    },
    "5610": {
        "db_id": "shipping",
        "question": "How many of the shipments bound for New York City were shipped to Harry's Hot Rod Auto and Truck Accessories?",
        "ground_truth": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.city_name = 'New York' AND T1.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE destination = 'New York City' AND recipient = 'Harry''s Hot Rod Auto and Truck Accessories';"
        ],
        "rule_sql": []
    },
    "4901": {
        "db_id": "legislator",
        "question": "Among all the current legislators who have served for more than 4 terms, what is the percentage of them being female?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.bioguide) FROM ( SELECT T2.bioguide, T1.gender_bio FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 ) T3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female\nFROM legislators\nWHERE terms_served > 4\nAND current_status = 'active';"
        ],
        "rule_sql": []
    },
    "9103": {
        "db_id": "movie_3",
        "question": "What is the description of the film ACADEMY DINOSAUR?",
        "ground_truth": "SELECT description FROM film WHERE title = 'ACADEMY DINOSAUR'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM film WHERE title = 'ACADEMY DINOSAUR';"
        ],
        "rule_sql": []
    },
    "2945": {
        "db_id": "professional_basketball",
        "question": "For the players who played the most PBLA games, who was graduated from Central Missouri State college?",
        "ground_truth": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'PBLA' AND T2.GP = 10 AND T1.college = 'Central Missouri State' GROUP BY T1.firstName, T1.middleName, T1.lastName ORDER BY COUNT(T2.id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name \nFROM players p\nJOIN colleges c ON p.college_id = c.id\nWHERE c.name = 'Central Missouri State'\nORDER BY p.pbla_games DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6893": {
        "db_id": "retails",
        "question": "How much higher in percentage is the highest supply cost of the part \"hot spring dodger dim light\" than the lowest supply cost?",
        "ground_truth": "SELECT CAST((MAX(T1.ps_supplycost) - MIN(T1.ps_supplycost)) AS REAL) * 100 / MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ((MAX(supply_cost) - MIN(supply_cost)) / MIN(supply_cost)) * 100 AS percentage_difference\nFROM parts\nWHERE part_name = 'hot spring dodger dim light';"
        ],
        "rule_sql": []
    },
    "5821": {
        "db_id": "airline",
        "question": "Among the flights on 2018/8/1, how many of them departed from an airport in New York?",
        "ground_truth": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'JFK'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM flights f\nJOIN airports a ON f.departure_airport = a.airport_code\nWHERE f.departure_date = '2018-08-01' \nAND a.city = 'New York'"
        ],
        "rule_sql": []
    },
    "1592": {
        "db_id": "car_retails",
        "question": "What is the total value of shipped vintage car orders from 2003-2004?",
        "ground_truth": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM orders WHERE product_type = 'vintage car' AND status = 'shipped' AND order_date BETWEEN '2003-01-01' AND '2004-12-31';"
        ],
        "rule_sql": []
    },
    "1733": {
        "db_id": "restaurant",
        "question": "Which street in San Francisco has the most burger restaurants?",
        "ground_truth": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT street, COUNT(*) as burger_count FROM restaurants WHERE city = 'San Francisco' AND cuisine = 'burger' GROUP BY street ORDER BY burger_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6844": {
        "db_id": "retails",
        "question": "How many customers belong to the household segment in Germany?",
        "ground_truth": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'GERMANY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE segment = 'household' AND country = 'Germany';"
        ],
        "rule_sql": []
    },
    "5681": {
        "db_id": "shipping",
        "question": "Among the shipments to a customer from Texas, what percentage of the shipments shipped in 2017?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.ship_date) = '2017' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'TX'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN strftime('%Y', s.ship_date) = '2017' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM shipments s\nJOIN customers c ON s.customer_id = c.customer_id\nWHERE c.state = 'Texas';"
        ],
        "rule_sql": []
    },
    "2148": {
        "db_id": "world_development_indicators",
        "question": "How many country uses the 2008 System of National Accounts methodology? List our their table name.",
        "ground_truth": "SELECT TableName  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 2008 System of National Accounts methodology.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS country_count, table_name \nFROM national_accounts \nWHERE methodology = '2008 System of National Accounts' \nGROUP BY table_name;"
        ],
        "rule_sql": []
    },
    "8812": {
        "db_id": "food_inspection",
        "question": "How many high risks violations did the Tiramisu Kitchen violate?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'High Risk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM violations WHERE restaurant_name = 'Tiramisu Kitchen' AND risk_level = 'Low';"
        ],
        "rule_sql": []
    },
    "1016": {
        "db_id": "computer_student",
        "question": "How many professional or master/graduate courses are there?",
        "ground_truth": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM courses WHERE level = 'professional' OR level = 'master/graduate';"
        ],
        "rule_sql": []
    },
    "3782": {
        "db_id": "public_review_platform",
        "question": "For the only Yelp business in \"Yuma\" city, how many \"medium\" reviews did it get?",
        "ground_truth": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Yuma' AND T2.review_length LIKE 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews r JOIN businesses b ON r.business_id = b.id WHERE b.city = 'Yuma' AND r.rating = 'medium'"
        ],
        "rule_sql": []
    },
    "8784": {
        "db_id": "food_inspection",
        "question": "Among the routine inspections of Tiramisu Kitchen, how many of them have a score of over 70?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.type = 'Routine - Unscheduled' AND T1.score > 70",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE restaurant_name = 'Tiramisu Kitchen' AND score > 70;"
        ],
        "rule_sql": []
    },
    "333": {
        "db_id": "retail_complains",
        "question": "What is the address of the client who made a complaint via postal mail on March 14, 2012?",
        "ground_truth": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2012-03-14' AND T2.`Submitted via` = 'Postal mail'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM clients WHERE complaint_date = '2012-03-14' AND complaint_method = 'postal mail';"
        ],
        "rule_sql": []
    },
    "9154": {
        "db_id": "movie_3",
        "question": "The actor Dan Harris played in a 77 minute film with replacement cost of 9.99, what was the rating for that film?",
        "ground_truth": "SELECT T3.rating FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'DAN' AND T1.last_name = 'HARRIS' AND T3.length = 77 AND T3.replacement_cost = '9.99'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating FROM film \nWHERE length = 77 AND replacement_cost = 9.99 \nAND actor_id IN (SELECT actor_id FROM actor WHERE first_name = 'Dan' AND last_name = 'Harris');"
        ],
        "rule_sql": []
    },
    "7551": {
        "db_id": "image_and_language",
        "question": "Which object classes belong to the onion category?",
        "ground_truth": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM objects WHERE category = 'onion';"
        ],
        "rule_sql": []
    },
    "9152": {
        "db_id": "movie_3",
        "question": "Which continent is the mother country of Clarksville city in?",
        "ground_truth": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Clarksville'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT continent FROM countries WHERE country_name = (SELECT mother_country FROM cities WHERE city_name = 'Clarksville');"
        ],
        "rule_sql": []
    },
    "650": {
        "db_id": "codebase_comments",
        "question": "What is the percentage of respositories that receive more than 2,000 stars?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN Stars > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Stars) FROM Repo",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM repositories)) AS percentage\nFROM repositories\nWHERE stars > 2000;"
        ],
        "rule_sql": []
    },
    "5963": {
        "db_id": "books",
        "question": "What is the title of the most expensive book?",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2748": {
        "db_id": "european_football_1",
        "question": "How many matches played in the 2019 season of Scottish Championship league were ended with an equal result of 2-2?",
        "ground_truth": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM matches \nWHERE season = '2019' \nAND league = 'Scottish Championship' \nAND home_team_score = 2 \nAND away_team_score = 2;"
        ],
        "rule_sql": []
    },
    "4240": {
        "db_id": "simpson_episodes",
        "question": "What is The simpson 20s: Season 20 average awards winning rate?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN result = 'Winner' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(award) AS rate FROM Award;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(awards) FROM simpsons WHERE season = 20 AND year LIKE '20%';"
        ],
        "rule_sql": []
    },
    "5332": {
        "db_id": "beer_factory",
        "question": "What did the customer say in his or her review of Bulldog root beer on 7/26/2013?",
        "ground_truth": "SELECT T2.Review FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'Bulldog' AND T2.ReviewDate = '2013-07-26'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT review_text FROM reviews WHERE product_name = 'Bulldog root beer' AND review_date = '2013-07-26';"
        ],
        "rule_sql": []
    },
    "9203": {
        "db_id": "movie_3",
        "question": "How many films rented on 26th May, 2005 were returned on 30th May, 2005?",
        "ground_truth": "SELECT COUNT(DISTINCT rental_id) FROM rental WHERE date(rental_date) BETWEEN '2005-05-26' AND '2005-05-30'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM rental \nWHERE rental_date = '2005-05-26' \nAND return_date = '2005-05-30';"
        ],
        "rule_sql": []
    },
    "184": {
        "db_id": "book_publishing_company",
        "question": "List all employees who are at the maximum level in their job designation.",
        "ground_truth": "SELECT T1.fname, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl = T2.max_lvl",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE level = (SELECT MAX(level) FROM employees);"
        ],
        "rule_sql": []
    },
    "4538": {
        "db_id": "student_loan",
        "question": "Provide the names of the students enlisted in the fire department.",
        "ground_truth": "SELECT name FROM enlist WHERE organ = 'fire_department'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE department = 'fire'"
        ],
        "rule_sql": []
    },
    "7105": {
        "db_id": "works_cycles",
        "question": "How many employees earn their salaries on a monthly basis at an hourly rate of more than 50?",
        "ground_truth": "SELECT COUNT(BusinessEntityID) FROM EmployeePayHistory WHERE rate * PayFrequency > 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE salary_type = 'monthly' AND hourly_rate > 50;"
        ],
        "rule_sql": []
    },
    "7186": {
        "db_id": "works_cycles",
        "question": "What is the job position currently occupied by Ken J S\u00c3\u00a1nchez?",
        "ground_truth": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Ken' AND T2.MiddleName = 'J' AND T2.LastName = 'S\u00e1nchez'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_title FROM employees WHERE first_name = 'Ken' AND last_name = 'J S\u00c3\u00a1nchez';"
        ],
        "rule_sql": []
    },
    "771": {
        "db_id": "movie",
        "question": "Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062.",
        "ground_truth": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Gross = 136766062 AND T2.`Character Name` = 'Don Altobello' AND T1.Genre = 'Drama'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE character_name = 'Don Altobello' AND genre = 'drama' AND gross = 136766062"
        ],
        "rule_sql": []
    },
    "5730": {
        "db_id": "language_corpus",
        "question": "Indicate the title of all the pages in which the word comunitat appears.",
        "ground_truth": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'comunitat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM pages WHERE content LIKE '%comunitat%';"
        ],
        "rule_sql": []
    },
    "2120": {
        "db_id": "world_development_indicators",
        "question": "Which countries have a fertility rate between 4 and 5 in 1979? List their names.",
        "ground_truth": "SELECT CountryName FROM Indicators WHERE Year = 1979 AND IndicatorName = 'Fertility rate, total (births per woman)' AND value >= 4 AND Value <= 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE fertility_rate = 1979 AND fertility_rate BETWEEN 4 AND 5;"
        ],
        "rule_sql": []
    },
    "9132": {
        "db_id": "movie_3",
        "question": "Please list the full names of all the customers who have rented the film with the highest replacement cost.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id ORDER BY T4.replacement_cost DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film)\nGROUP BY c.customer_id;"
        ],
        "rule_sql": []
    },
    "2122": {
        "db_id": "world_development_indicators",
        "question": "What are the sources for the data of children who finished primary school education in Latin America & Caribbean countries?",
        "ground_truth": "SELECT DISTINCT T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode WHERE T3.Region = 'Latin America & Caribbean' AND T2.IndicatorName = 'Children out of school, primary'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT source FROM education_data WHERE region = 'Latin America & Caribbean' AND education_level = 'primary' AND status = 'finished' AND age_group = 'children';"
        ],
        "rule_sql": []
    },
    "7615": {
        "db_id": "hockey",
        "question": "Who is the youngest player who is still living. State the given name and date of birth.",
        "ground_truth": "SELECT nameGiven , nameGiven , birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthday DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT given_name, date_of_birth FROM players WHERE is_alive = 1 ORDER BY date_of_birth ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4971": {
        "db_id": "olympics",
        "question": "List out years that only have summer games.",
        "ground_truth": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT year FROM games WHERE season = 'Summer';"
        ],
        "rule_sql": []
    },
    "8857": {
        "db_id": "craftbeer",
        "question": "Where in New York can you locate the brewery that makes the bitterest beer? List both the brewery's name and the name of the city.",
        "ground_truth": "SELECT T2.name, T2.city FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.state = 'NY' ORDER BY T1.ibu DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brewery_name, city_name FROM breweries WHERE state = 'New York' ORDER BY bitterness DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5759": {
        "db_id": "language_corpus",
        "question": "State the Wikipedia page title that has revision page id of 28040864.",
        "ground_truth": "SELECT title FROM pages WHERE revision = 28040864",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM wikipedia WHERE page_id = 28040864;"
        ],
        "rule_sql": []
    },
    "3101": {
        "db_id": "cars",
        "question": "How much is the Peugeot 505s Turbo Diesel?",
        "ground_truth": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'peugeot 505s turbo diesel'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM cars WHERE model = 'Peugeot 505s Turbo Diesel';"
        ],
        "rule_sql": []
    },
    "3699": {
        "db_id": "college_completion",
        "question": "How many students that graduated from Lincoln College in 2011 belong to the cohort type of Bachelor's/equivalent seeking cohort at 4-year institutions?",
        "ground_truth": "SELECT COUNT(T1.unitid) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Lincoln College' AND T2.year = 2011 AND T2.cohort = '4y bach'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE college = 'Lincoln College' AND graduation_year = 2011 AND cohort_type = 'Bachelor\\'s/equivalent seeking cohort at 4-year institutions';"
        ],
        "rule_sql": []
    },
    "4157": {
        "db_id": "citeseer",
        "question": "In the papers classified as ML, how many cited butz01algorithmic?",
        "ground_truth": "SELECT COUNT(T1.paper_id) FROM paper AS T1 INNER JOIN cites AS T2 ON T1.paper_id = T2.citing_paper_id WHERE T1.class_label = 'ML' AND T2.cited_paper_id = 'butz01algorithmic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE classification = 'ML' AND cited_paper = 'butz01algorithmic';"
        ],
        "rule_sql": []
    },
    "7784": {
        "db_id": "hockey",
        "question": "Who was the latest non player/builder to become the hall of famer? Give the full name.",
        "ground_truth": "SELECT name FROM HOF WHERE category IN ('Player', 'Builder') ORDER BY year DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM hall_of_fame WHERE category = 'player' OR category = 'builder' ORDER BY year DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6706": {
        "db_id": "retails",
        "question": "How many customers are in debt?",
        "ground_truth": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE balance > 0;"
        ],
        "rule_sql": []
    },
    "5677": {
        "db_id": "shipping",
        "question": "List the ship ID of shipments shipped to the most populated city.",
        "ground_truth": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ship_id FROM shipments WHERE city = (SELECT city FROM cities ORDER BY population DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "7967": {
        "db_id": "music_platform_2",
        "question": "Which \"music\" podcast has the longest title?",
        "ground_truth": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'music' ORDER BY LENGTH(T2.title) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM podcasts WHERE category = 'music' ORDER BY LENGTH(title) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "816": {
        "db_id": "social_media",
        "question": "Count the total number of tweet IDs in `en`.",
        "ground_truth": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Lang = 'en'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM en WHERE tweet_id IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "8080": {
        "db_id": "university",
        "question": "Among the universities with a score in teaching of over 90 in 2011, how many of them are in the United States of America?",
        "ground_truth": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE teaching_score > 90 AND year = 2011 AND country = 'United States of America';"
        ],
        "rule_sql": []
    },
    "4301": {
        "db_id": "simpson_episodes",
        "question": "What percentage of votes are from the nominated episodes?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.result = 'Nominee' THEN T2.votes ELSE 0 END) AS REAL) * 100 / SUM(T2.votes) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM votes)) AS percentage FROM votes WHERE episode_id IN (SELECT episode_id FROM nominations);"
        ],
        "rule_sql": []
    },
    "1116": {
        "db_id": "talkingdata",
        "question": "List at least 5 device models that are commonly used by female users.",
        "ground_truth": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT device_model, COUNT(*) as female_users \nFROM users \nWHERE gender = 'female' \nGROUP BY device_model \nORDER BY female_users DESC \nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "2454": {
        "db_id": "superstore",
        "question": "Among the orders from 2016 in the Central region, what is the product with the lowest profit?",
        "ground_truth": "SELECT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'Central' AND STRFTIME('%Y', T1.`Order Date`) = '2016' ORDER BY T1.Profit ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ProductName, MIN(Profit) as LowestProfit\nFROM Orders\nWHERE Year = 2016 AND Region = 'Central'\nGROUP BY ProductName\nORDER BY LowestProfit ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7190": {
        "db_id": "works_cycles",
        "question": "Among the Production Technicians who are single, how many of them are vendor contact?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.MaritalStatus = 'S' AND T2.PersonType = 'VC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM employees \nWHERE marital_status = 'Single' \nAND job_title = 'Production Technician' \nAND vendor_contact = 'Yes';"
        ],
        "rule_sql": []
    },
    "74": {
        "db_id": "movie_platform",
        "question": "Please list all the links to the ratings on the movie \"A Way of Life\" with a critic.",
        "ground_truth": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.critic IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT r.link FROM ratings r JOIN movies m ON r.movie_id = m.id WHERE m.title = 'A Way of Life' AND r.critic IS NULL;"
        ],
        "rule_sql": []
    },
    "7720": {
        "db_id": "hockey",
        "question": "For the goalie who had the highest defensive success rate in the postseason of 2011, what's his legends ID ?",
        "ground_truth": "SELECT T2.legendsID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2011 ORDER BY 1 - CAST(T1.PostGA AS REAL) / T1.PostSA DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT legends_id FROM goalies WHERE year = 2011 AND season_type = 'postseason' ORDER BY defensive_success_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6689": {
        "db_id": "retails",
        "question": "How many countries are there in the No.2 region?",
        "ground_truth": "SELECT COUNT(n_nationkey) FROM nation WHERE n_regionkey = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM countries WHERE region_id = 1;"
        ],
        "rule_sql": []
    },
    "6064": {
        "db_id": "books",
        "question": "Who is the publisher of Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic?",
        "ground_truth": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Hitchhiker''s Guide To The Galaxy: The Filming of the Douglas Adams classic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author FROM books WHERE title = 'Hitchhiker''s Guide To The Galaxy: The Filming of the Douglas Adams classic';"
        ],
        "rule_sql": []
    },
    "3929": {
        "db_id": "public_review_platform",
        "question": "List the categories of inactive businesses in AZ.",
        "ground_truth": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'FALSE' AND T1.state LIKE 'AZ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM businesses WHERE state = 'AZ' AND active = 'yes';"
        ],
        "rule_sql": []
    },
    "598": {
        "db_id": "codebase_comments",
        "question": "Please list all the paths of the solutions containing files within the repository whose url is \"https://github.com/maxild/playground.git\".",
        "ground_truth": "SELECT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/maxild/playground.git'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.path \nFROM solutions s \nJOIN files f ON s.id = f.solution_id \nJOIN repositories r ON s.repository_id = r.id \nWHERE r.url = 'https://github.com/maxild/playground.git';"
        ],
        "rule_sql": []
    },
    "575": {
        "db_id": "codebase_comments",
        "question": "Which repository has the longest amount of processed time of downloading? Indicate whether the solution paths in the repository can be implemented without needs of compilation.",
        "ground_truth": "SELECT DISTINCT T1.id, T2.WasCompiled FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT repository_name, MAX(download_time) as longest_download_time, compilation_required \nFROM repositories \nWHERE download_time = (SELECT MAX(download_time) FROM repositories) \nGROUP BY repository_name, compilation_required;"
        ],
        "rule_sql": []
    },
    "2115": {
        "db_id": "world_development_indicators",
        "question": "Enumerate the footnote narratives of The Bahamas under the series code SH.DTH.IMRT in the year 1984.",
        "ground_truth": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1984' AND T2.ShortName = 'The Bahamas' AND T1.Seriescode = 'SH.DTH.IMRT'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT footnote_narrative FROM series_data WHERE country = 'The Bahamas' AND series_code = 'SH.DTH.IMRT' AND year = 1984;"
        ],
        "rule_sql": []
    },
    "6945": {
        "db_id": "ice_hockey_draft",
        "question": "Identify the players who weigh 120 kg.",
        "ground_truth": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_kg = 120",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM players WHERE weight = 120;"
        ],
        "rule_sql": []
    },
    "9410": {
        "db_id": "movie_3",
        "question": "List the store ID of the film titled \"Amadeus Holy\".",
        "ground_truth": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'Amadeus Holy'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT film_id FROM film WHERE title = 'Amadeus Holy';"
        ],
        "rule_sql": []
    },
    "359": {
        "db_id": "retail_complains",
        "question": "List down the issues for complaint with server time of below 10 minutes.",
        "ground_truth": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE strftime('%M', T1.ser_time) < '10'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM issues WHERE complaint_time < 10;"
        ],
        "rule_sql": []
    },
    "5770": {
        "db_id": "language_corpus",
        "question": "List out the total pages of the words that has repeated times more than 3000.",
        "ground_truth": "SELECT T1.pages FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T2.occurrences > 3000 GROUP BY T1.pages",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word, SUM(pages) as total_pages FROM words WHERE repeated_times > 3000 GROUP BY word;"
        ],
        "rule_sql": []
    },
    "4192": {
        "db_id": "simpson_episodes",
        "question": "What is the title of episode that has a keyword of 'riot' and 'cake'?",
        "ground_truth": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword IN ('riot', 'cake');",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes WHERE keyword = 'riot' AND keyword = 'cake';"
        ],
        "rule_sql": []
    },
    "2530": {
        "db_id": "app_store",
        "question": "What is the average rating of comic category apps? How many users hold positive attitude towards this app?",
        "ground_truth": "SELECT AVG(T1.Rating) , COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'COMICS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) as average_rating, COUNT(*) as positive_users \nFROM apps \nWHERE category = 'comic' AND rating > 3.0;"
        ],
        "rule_sql": []
    },
    "1922": {
        "db_id": "soccer_2016",
        "question": "List the name of all New Zealand umpires.",
        "ground_truth": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM umpires WHERE country = 'New Zealand';"
        ],
        "rule_sql": []
    },
    "9303": {
        "db_id": "movie_3",
        "question": "Which film has the longest duration?",
        "ground_truth": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films ORDER BY duration ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2952": {
        "db_id": "professional_basketball",
        "question": "Which team had more than one player who grabbed more than 600 rebounds in 2011? Give the full name of the team.",
        "ground_truth": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.rebounds > 600",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name \nFROM teams \nWHERE team_id IN (\n    SELECT team_id \n    FROM players \n    WHERE rebounds > 600 \n    AND year = 2011 \n    GROUP BY team_id \n    HAVING COUNT(*) > 1\n);"
        ],
        "rule_sql": []
    },
    "1208": {
        "db_id": "talkingdata",
        "question": "On which brand of phone are the most applications installed?",
        "ground_truth": "SELECT T.phone_brand FROM ( SELECT T1.phone_brand, COUNT(T4.is_active) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id INNER JOIN events_relevant AS T3 ON T2.device_id = T3.device_id INNER JOIN app_events_relevant AS T4 ON T3.event_id = T4.event_id WHERE T4.is_active = 1 GROUP BY T1.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, COUNT(*) as app_count FROM phones GROUP BY brand ORDER BY app_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8617": {
        "db_id": "chicago_crime",
        "question": "Give the FBI code description of case No.JB134191.",
        "ground_truth": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM fbi_codes WHERE case_no = 'JB134191';"
        ],
        "rule_sql": []
    },
    "4626": {
        "db_id": "disney",
        "question": "The song \"Once Upon a Dream\" is associated with the movie directed by whom?",
        "ground_truth": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song = 'Once Upon a Dream'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies WHERE song_title = 'Once Upon a Dream';"
        ],
        "rule_sql": []
    },
    "6073": {
        "db_id": "books",
        "question": "What is the average number of book pages written by Zilpha Keatley Snyder?",
        "ground_truth": "SELECT AVG(T3.num_pages) FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'Zilpha Keatley Snyder'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(page_count) FROM books WHERE author = 'Zilpha Keatley Snyder';"
        ],
        "rule_sql": []
    },
    "8336": {
        "db_id": "mondial_geo",
        "question": "List all the cities and provinces located at the rivers that flows to Atlantic Ocean.",
        "ground_truth": "SELECT T1.Name, T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Sea = 'Atlantic Ocean'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name, province_name FROM cities WHERE river_flows_to = 'Atlantic Ocean';"
        ],
        "rule_sql": []
    },
    "6154": {
        "db_id": "food_inspection_2",
        "question": "How much is the total fine given to Ron of Japan Inc in its inspection done on February 2014?",
        "ground_truth": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2014-02' AND T1.dba_name = 'RON OF JAPAN INC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(fine_amount) FROM inspections WHERE company_name = 'Ron of Japan Inc' AND inspection_date LIKE '2014-01%';"
        ],
        "rule_sql": []
    },
    "1404": {
        "db_id": "synthea",
        "question": "Among the patients with prediabetes, how many are female?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'F' AND T1.DESCRIPTION = 'Prediabetes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE diabetes_status = 'prediabetes' AND gender = 'male';"
        ],
        "rule_sql": []
    },
    "3948": {
        "db_id": "public_review_platform",
        "question": "How many businesses have shopping centers and received high review count?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Shopping Centers' AND T3.review_count = 'High'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE category = 'shopping centers' AND review_count > 1000;"
        ],
        "rule_sql": []
    },
    "1909": {
        "db_id": "soccer_2016",
        "question": "What is the difference in the average number of players out by lbw and runout in the matches?",
        "ground_truth": "SELECT AVG(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T2.Out_Name = 'lbw'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(lbw_count) - AVG(runout_count) AS difference FROM matches;"
        ],
        "rule_sql": []
    },
    "2679": {
        "db_id": "regional_sales",
        "question": "What are the top 10 products with the highest net profit?",
        "ground_truth": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) DESC LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, (price - cost) AS net_profit FROM products ORDER BY net_profit ASC LIMIT 10;"
        ],
        "rule_sql": []
    },
    "566": {
        "db_id": "codebase_comments",
        "question": "How many English language codes whose comments for the method are in the XML format?",
        "ground_truth": "SELECT COUNT(Lang) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM language_codes WHERE language = 'English' AND comment_format = 'XML';"
        ],
        "rule_sql": []
    },
    "6214": {
        "db_id": "food_inspection_2",
        "question": "Which establishments did Bob Benson inspect in 2010 and what was the results?",
        "ground_truth": "SELECT DISTINCT T3.dba_name, T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson' AND strftime('%Y', T2.inspection_date) = '2010'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT establishment_name, inspection_result \nFROM inspections \nWHERE inspector_name = 'Bob Benson' \nAND inspection_year = 2010;"
        ],
        "rule_sql": []
    },
    "7243": {
        "db_id": "works_cycles",
        "question": "Who is the sales person in charge of the territory with the id \"9\"? Provide their full name.",
        "ground_truth": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 9",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM sales_persons WHERE territory_id = 9"
        ],
        "rule_sql": []
    },
    "7095": {
        "db_id": "works_cycles",
        "question": "How many products are there if we add all those located in the Subassembly category?",
        "ground_truth": "SELECT COUNT(T1.LocationID) FROM Location AS T1 INNER JOIN ProductInventory AS T2 USING (LocationID) WHERE T1.Name = 'Subassembly'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'Subassembly';"
        ],
        "rule_sql": []
    },
    "4467": {
        "db_id": "student_loan",
        "question": "How many students are enlisted in the Peace Corps organization are enrolled in UCSD school?",
        "ground_truth": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'peace_corps' AND T2.school = 'ucsd'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE organization = 'Peace Corps' AND school = 'UCSD';"
        ],
        "rule_sql": []
    },
    "2776": {
        "db_id": "european_football_1",
        "question": "Give the full name of the divison that had the most 0-0 games.",
        "ground_truth": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTAG = 0 AND T1.FTHG = 0 GROUP BY T2.division ORDER BY COUNT(T1.FTAG) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division_name FROM divisions WHERE division_id = (SELECT division_id FROM games WHERE home_score = 0 AND away_score = 0 GROUP BY division_id ORDER BY COUNT(*) DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "7327": {
        "db_id": "works_cycles",
        "question": "Name the sales person for store Area Bike Accessories. Which territory is he / she in?",
        "ground_truth": "SELECT T4.Name FROM Store AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN SalesTerritory AS T4 ON T2.TerritoryID = T4.TerritoryID WHERE T1.Name = 'Area Bike Accessories'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name, t.territory_name \nFROM sales_persons s \nJOIN stores st ON s.store_id = st.store_id \nJOIN territories t ON s.territory_id = t.territory_id \nWHERE st.store_name = 'Area Bike Accessories';"
        ],
        "rule_sql": []
    },
    "1028": {
        "db_id": "computer_student",
        "question": "How many professors teaches basic or medium undergraduate courses?",
        "ground_truth": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM professors WHERE course_level IN ('basic', 'medium')"
        ],
        "rule_sql": []
    },
    "5589": {
        "db_id": "shipping",
        "question": "Please list the destination cities of all the shipments ordered by S K L Enterprises Inc.",
        "ground_truth": "SELECT DISTINCT T3.city_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.cust_name = 'S K L Enterprises Inc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT origin_city FROM shipments WHERE customer_name = 'S K L Enterprises Inc.' ORDER BY destination_city;"
        ],
        "rule_sql": []
    },
    "5467": {
        "db_id": "sales",
        "question": "List the full name of customers who spend more than 50,000 in descending order the amount spend.",
        "ground_truth": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.Quantity * T1.Price > 50000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE amount_spent > 50000 ORDER BY amount_spent ASC;"
        ],
        "rule_sql": []
    },
    "3993": {
        "db_id": "public_review_platform",
        "question": "Which users become an elite in 2012?",
        "ground_truth": "SELECT DISTINCT T1.user_id FROM Elite AS T1 INNER JOIN Years AS T2 ON T1.year_id = T2.year_id WHERE T2.actual_year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM users WHERE elite_year = 2012;"
        ],
        "rule_sql": []
    },
    "6105": {
        "db_id": "books",
        "question": "What is the sum of the number of pages of the books ordered by Mick Sever?",
        "ground_truth": "SELECT SUM(T1.num_pages) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Mick' AND T4.last_name = 'Sever'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(pages) FROM books WHERE author = 'Mick Sever';"
        ],
        "rule_sql": []
    },
    "110": {
        "db_id": "movie_platform",
        "question": "What percentage of users rated the movie \"Patti Smith: Dream of Life\" by more than 3?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.rating_score > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Patti Smith: Dream of Life'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users)) AS percentage\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.title = 'Patti Smith: Dream of Life' AND r.rating > 3;"
        ],
        "rule_sql": []
    },
    "4548": {
        "db_id": "student_loan",
        "question": "Among students with 1 month of absenses, how many of them are enlisted in the air force department?",
        "ground_truth": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T1.month = 1 AND T2.organ = 'air_force'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE absences = 1 AND department = 'air force';"
        ],
        "rule_sql": []
    },
    "3605": {
        "db_id": "authors",
        "question": "Give the Title and author's name of the books that were preprint in 1997.",
        "ground_truth": "SELECT DISTINCT T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId = 0 AND T1.Year = 1997 AND T1.Title <> ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Title, Author FROM Books WHERE Year = 1997 AND Status = 'preprint';"
        ],
        "rule_sql": []
    },
    "3374": {
        "db_id": "video_games",
        "question": "Among the games released in 2004, what is the percentage of games on PSP?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.platform_name = 'PSP' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T2.release_year = 2004",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM games WHERE year = 2004)) AS percentage FROM games WHERE year = 2004 AND platform = 'PSP';"
        ],
        "rule_sql": []
    },
    "7677": {
        "db_id": "hockey",
        "question": "Which country is the most award-winning player from?",
        "ground_truth": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthCountry ORDER BY COUNT(T2.award) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM players ORDER BY awards DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3414": {
        "db_id": "video_games",
        "question": "How many video game publishers have Interactive in their names?",
        "ground_truth": "SELECT COUNT(T.id) FROM publisher AS T WHERE T.publisher_name LIKE '%Interactive%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM publishers WHERE name LIKE '%Interactive%';"
        ],
        "rule_sql": []
    },
    "3338": {
        "db_id": "video_games",
        "question": "How many sales does game platform id 3871 make in Europe?",
        "ground_truth": "SELECT T2.num_sales * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' AND T2.game_platform_id = 3871",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE platform_id = 3871 AND region = 'Europe';"
        ],
        "rule_sql": []
    },
    "4366": {
        "db_id": "simpson_episodes",
        "question": "List the title of the episode with stars greater than the 70% of average stars of all episodes.",
        "ground_truth": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars > 0.7 * ( SELECT AVG(stars) FROM Vote );",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes WHERE stars > (SELECT AVG(stars) * 0.7 FROM episodes);"
        ],
        "rule_sql": []
    },
    "655": {
        "db_id": "codebase_comments",
        "question": "Please provide the solution id of the respository among the respository that receive 238 forks.",
        "ground_truth": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT solution_id FROM respository WHERE forks = 238"
        ],
        "rule_sql": []
    },
    "9212": {
        "db_id": "movie_3",
        "question": "Distinguish the films performed by Judy Dean according to category.",
        "ground_truth": "SELECT T5.name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T2.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T1.first_name = 'Judy' AND T1.last_name = 'Dean'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, COUNT(*) FROM films WHERE actor = 'Judy Dean' GROUP BY category"
        ],
        "rule_sql": []
    },
    "1368": {
        "db_id": "synthea",
        "question": "Please give the full names of all the patients who had been prescribed with Acetaminophen.",
        "ground_truth": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.description LIKE 'Acetaminophen%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM patients WHERE medication = 'Acetaminophen';"
        ],
        "rule_sql": []
    },
    "8587": {
        "db_id": "chicago_crime",
        "question": "Which district in Chicago has the most community areas?",
        "ground_truth": "SELECT side FROM Community_Area GROUP BY side ORDER BY COUNT(side) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district, COUNT(*) as area_count FROM chicago_areas GROUP BY district ORDER BY area_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "322": {
        "db_id": "retail_complains",
        "question": "What was the issue that the client with the longest server time faced?",
        "ground_truth": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT issue FROM clients ORDER BY server_time DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8918": {
        "db_id": "cookbook",
        "question": "What is the percentage calories protein of Raspberry Chiffon Pie?",
        "ground_truth": "SELECT pcnt_cal_prot FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (calories / protein) * 100 AS percentage_calories_protein FROM foods WHERE name = 'Raspberry Chiffon Pie';"
        ],
        "rule_sql": []
    },
    "6687": {
        "db_id": "retails",
        "question": "What is the average price of the orders made by a customer in Germany?",
        "ground_truth": "SELECT AVG(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM orders WHERE country = 'Germany'"
        ],
        "rule_sql": []
    },
    "8276": {
        "db_id": "mondial_geo",
        "question": "How many mountains are there in Indonesia?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Indonesia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mountains WHERE country = 'Indonesia';"
        ],
        "rule_sql": []
    },
    "7589": {
        "db_id": "image_and_language",
        "question": "List all the attribute classes of the image ID \"15\".",
        "ground_truth": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 15",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM images WHERE image_id = 15;"
        ],
        "rule_sql": []
    },
    "2045": {
        "db_id": "music_tracker",
        "question": "What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times?",
        "ground_truth": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT release_title FROM singles WHERE artist = 'Ron Hunt' AND release_year = 1979 AND downloads = 239;"
        ],
        "rule_sql": []
    },
    "3842": {
        "db_id": "public_review_platform",
        "question": "Which city has more Yelp_Business that's more appealing to users, Scottsdale or Anthem?",
        "ground_truth": "SELECT city FROM Business ORDER BY review_count DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as business_count \nFROM Yelp_Business \nWHERE city IN ('Scottsdale', 'Anthem') \nGROUP BY city \nORDER BY business_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2043": {
        "db_id": "soccer_2016",
        "question": "Give the match's venue and winning team for the match ID 392194.",
        "ground_truth": "SELECT T1.Venue_Name, T3.Team_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id INNER JOIN Team AS T3 ON T2.match_winner = T3.Team_Id WHERE T2.Match_Id = 392194",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT venue, winning_team FROM matches WHERE match_id = 392194"
        ],
        "rule_sql": []
    },
    "1819": {
        "db_id": "soccer_2016",
        "question": "How many times does M Chinnaswamy Stadium host games than Maharashtra Cricket Association Stadium?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Venue_Name = 'M Chinnaswamy Stadium' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Venue_Name = 'Maharashtra Cricket Association Stadium' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE venue = 'M Chinnaswamy Stadium' AND venue = 'Maharashtra Cricket Association Stadium';"
        ],
        "rule_sql": []
    },
    "7109": {
        "db_id": "works_cycles",
        "question": "Please list the departments that are part of the Executive General and Administration group.",
        "ground_truth": "SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department_name FROM departments WHERE group_name = 'Executive General and Administration';"
        ],
        "rule_sql": []
    },
    "4509": {
        "db_id": "student_loan",
        "question": "How many students is disabled and unemployed at the same time?",
        "ground_truth": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE disabled = 'yes' AND unemployed = 'no';"
        ],
        "rule_sql": []
    },
    "2707": {
        "db_id": "regional_sales",
        "question": "Name of customers who have ordered Cocktail Glasses by online sales channel.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.`Product Name` = 'Cocktail Glasses' AND T2.`Sales Channel` = 'Online' THEN T1.`Customer Names` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN products p ON oi.product_id = p.product_id\nWHERE p.product_name = 'Cocktail Glasses'\nAND o.sales_channel = 'online';"
        ],
        "rule_sql": []
    },
    "2640": {
        "db_id": "regional_sales",
        "question": "Please list the names of customers who have total orders of over 3 in 2018.",
        "ground_truth": "SELECT DISTINCT IIF(COUNT(T2.CustomerID) > 3, T2.`Customer Names`, NULL) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._CustomerID HAVING COUNT(T2.CustomerID)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE order_count > 3 AND order_year = 2018;"
        ],
        "rule_sql": []
    },
    "6260": {
        "db_id": "coinmarketcap",
        "question": "Name the coin and date of transactions with the greatest decline in percent change in 1 hour.",
        "ground_truth": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coin, date, MIN(percent_change_1h) as greatest_decline\nFROM transactions\nORDER BY percent_change_1h ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "73": {
        "db_id": "movie_platform",
        "question": "How many users were trialists when they rated the movie \"A Way of Life\"?",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.user_trialist = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users u JOIN ratings r ON u.user_id = r.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE m.title = 'A Way of Life' AND u.is_trialist = 1;"
        ],
        "rule_sql": []
    },
    "786": {
        "db_id": "social_media",
        "question": "From which country is the tweet with the most likes posted?",
        "ground_truth": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID ORDER BY T1.Likes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM tweets ORDER BY likes ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5268": {
        "db_id": "beer_factory",
        "question": "What are the full names of the first top 10 customers?",
        "ground_truth": "SELECT First, Last FROM customers ORDER BY FirstPurchaseDate LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers LIMIT 10;"
        ],
        "rule_sql": []
    },
    "636": {
        "db_id": "codebase_comments",
        "question": "What is the repository id of the method with tokenized name \"crc parameters get hash code\"?",
        "ground_truth": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'crc parameters get hash code'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT repository_id FROM methods WHERE tokenized_name = 'crc parameters get hash code';"
        ],
        "rule_sql": []
    },
    "2977": {
        "db_id": "shakespeare",
        "question": "How many scenes are there in King John?",
        "ground_truth": "SELECT COUNT(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'King John'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM scenes WHERE play_title = 'King John';"
        ],
        "rule_sql": []
    },
    "1346": {
        "db_id": "law_episode",
        "question": "Which continent was Michael Preston born on?",
        "ground_truth": "SELECT birth_country FROM Person WHERE name = 'Michael Preston'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT continent FROM people WHERE name = 'Michael Preston';"
        ],
        "rule_sql": []
    },
    "8402": {
        "db_id": "mondial_geo",
        "question": "What is the GDP per capita in Switzerland?",
        "ground_truth": "SELECT T2.GDP / T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population / gdp FROM countries WHERE name = 'Switzerland';"
        ],
        "rule_sql": []
    },
    "6751": {
        "db_id": "retails",
        "question": "Name the countries that belong in the region with comment description \"furiously express accounts wake sly\".",
        "ground_truth": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'furiously express accounts wake sly'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM countries WHERE region_comment = 'furiously express accounts wake sly';"
        ],
        "rule_sql": []
    },
    "423": {
        "db_id": "movies_4",
        "question": "What was David Rubin's job in the movie \"Days of Thunder\"?",
        "ground_truth": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'David Rubin' AND T1.title = 'Days of Thunder'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job FROM actors WHERE name = 'David Rubin' AND movie = 'Days of Thunder';"
        ],
        "rule_sql": []
    },
    "4582": {
        "db_id": "mental_health_survey",
        "question": "How many questions in 2014's survey had more than 200 answers?",
        "ground_truth": "SELECT COUNT(QuestionID) FROM Answer WHERE SurveyID LIKE 2014 GROUP BY QuestionID ORDER BY COUNT(QuestionID) > 200 LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM questions \nWHERE year = 2014 \nAND answer_count > 200;"
        ],
        "rule_sql": []
    },
    "8577": {
        "db_id": "software_company",
        "question": "What is the ratio of male and female among the age of teenager when the education is above 10?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) FROM Customers WHERE age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    gender,\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM people WHERE age BETWEEN 13 AND 19 AND education > 10) as ratio\nFROM people\nWHERE age BETWEEN 13 AND 19 AND education > 10\nGROUP BY gender;"
        ],
        "rule_sql": []
    },
    "5217": {
        "db_id": "address",
        "question": "List down the country of the cities with a population greater than 97% of the average population of all countries in 2020.",
        "ground_truth": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2020 > 0.97 * ( SELECT AVG(population_2020) FROM zip_data )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM cities WHERE population > (SELECT AVG(population) * 0.97 FROM countries WHERE year = 2020);"
        ],
        "rule_sql": []
    },
    "4816": {
        "db_id": "legislator",
        "question": "Calculate the percentage of legislators who are not Senator and were born before 1975.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.class IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE CAST(T1.birthday_bio AS DATE) <= 1975",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN title != 'Senator' AND birth_date < '1975-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM legislators;"
        ],
        "rule_sql": []
    },
    "5774": {
        "db_id": "language_corpus",
        "question": "How many words are there on the page titled \"Asclepi\"?",
        "ground_truth": "SELECT words FROM pages WHERE title = 'Asclepi'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM pages WHERE title = 'Asclepi';"
        ],
        "rule_sql": []
    },
    "7063": {
        "db_id": "works_cycles",
        "question": "What is the job position of the oldest employee?",
        "ground_truth": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_position FROM employees ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4034": {
        "db_id": "public_review_platform",
        "question": "Which business ID has the most reviews?",
        "ground_truth": "SELECT business_id FROM Reviews GROUP BY business_id ORDER BY COUNT(user_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, COUNT(review_id) as review_count FROM reviews GROUP BY business_id ORDER BY review_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3846": {
        "db_id": "public_review_platform",
        "question": "How many reviews have the user whose ID is 3 posted?",
        "ground_truth": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE user_id = 3;"
        ],
        "rule_sql": []
    },
    "2165": {
        "db_id": "world_development_indicators",
        "question": "Which high income group countries are from Asia?",
        "ground_truth": "SELECT CountryCode, Region FROM Country WHERE (IncomeGroup = 'High income: OECD' OR IncomeGroup = 'High income: nonOECD') AND Region LIKE '%Asia%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM countries WHERE continent = 'Asia' AND income_group = 'High income';"
        ],
        "rule_sql": []
    },
    "2399": {
        "db_id": "superstore",
        "question": "List the products ordered by Matt Abelman from the Western store in 2013.",
        "ground_truth": "SELECT DISTINCT T3.`Product Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Matt Abelman' AND STRFTIME('%Y', T1.`Order Date`) = '2013'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.ProductName \nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Customers c ON o.CustomerID = c.CustomerID\nJOIN Stores s ON c.StoreID = s.StoreID\nWHERE c.FirstName = 'Matt' \nAND c.LastName = 'Abelman'\nAND s.StoreName = 'Western'\nAND o.OrderDate LIKE '2013%'\nORDER BY p.ProductName;"
        ],
        "rule_sql": []
    },
    "6232": {
        "db_id": "food_inspection_2",
        "question": "What is the result of the February 24, 2010 inspection involving the employee named \"Arnold Holder\"?",
        "ground_truth": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-02-24' AND T1.first_name = 'Arnold' AND T1.last_name = 'Holder'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM inspections WHERE inspection_date = '2010-02-24' AND employee_name = 'Arnold Holder';"
        ],
        "rule_sql": []
    },
    "522": {
        "db_id": "movies_4",
        "question": "Provide the overview for the movie \"The Pacifier\".",
        "ground_truth": "SELECT overview FROM movie WHERE title = 'The Pacifier'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM movies WHERE title = 'The Pacifier';"
        ],
        "rule_sql": []
    },
    "6291": {
        "db_id": "coinmarketcap",
        "question": "List the names of the top five coins traded on January 1, 2014.",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2014-01-01' AND T2.cmc_rank <= 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coins WHERE date = '2014-01-01' LIMIT 5;"
        ],
        "rule_sql": []
    },
    "7015": {
        "db_id": "works_cycles",
        "question": "How many people reviewed for product named HL Mountain Pedal? What is the average rating?",
        "ground_truth": "SELECT COUNT(T1.ProductID), AVG(T2.Rating) FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Mountain Pedal'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS review_count, AVG(rating) AS average_rating \nFROM reviews \nWHERE product_name = 'HL Mountain Pedal';"
        ],
        "rule_sql": []
    },
    "2688": {
        "db_id": "regional_sales",
        "question": "What is the highest discount applied by the store located in a city of the state of Colorado whose land area is 111039036.",
        "ground_truth": "SELECT MAX(T1.`Discount Applied`) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Colorado' AND T2.`Land Area` = 111039036",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(discount) FROM stores WHERE state = 'Colorado' AND land_area = 111039036;"
        ],
        "rule_sql": []
    },
    "1613": {
        "db_id": "car_retails",
        "question": "How many products with the highest expected profits were sold in total?",
        "ground_truth": "SELECT SUM(t2.quantityOrdered) FROM orderdetails AS t2 INNER JOIN ( SELECT t1.productCode FROM products AS t1 ORDER BY t1.MSRP - t1.buyPrice DESC LIMIT 1 ) AS t3 ON t2.productCode = t3.productCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE expected_profit = (SELECT MAX(expected_profit) FROM products);"
        ],
        "rule_sql": []
    },
    "7387": {
        "db_id": "works_cycles",
        "question": "Among the products with an average lead time of 60, which vendor has the highest profit on net? Indicate the credit rating of such vendor.",
        "ground_truth": "SELECT T2.Name, T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.AverageLeadTime = 60 ORDER BY T1.LastReceiptCost - T1.StandardPrice DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name, credit_rating, MAX(profit) as highest_profit\nFROM products\nWHERE average_lead_time = 60\nGROUP BY vendor_name, credit_rating\nORDER BY highest_profit DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1187": {
        "db_id": "talkingdata",
        "question": "What is the age group of users who use phone brand of vivo?",
        "ground_truth": "SELECT T1.`group` FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age_group FROM users WHERE phone_brand = 'vivo' GROUP BY age_group"
        ],
        "rule_sql": []
    },
    "6912": {
        "db_id": "retails",
        "question": "What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994?",
        "ground_truth": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = 88931 AND T1.o_orderdate = '1994-07-13'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(tax_amount) FROM orders WHERE customer_id = 88931 AND order_date = '7/13/994';"
        ],
        "rule_sql": []
    },
    "917": {
        "db_id": "cs_semester",
        "question": "Describe the full names and graduated universities of the professors who advised Olia Rabier.",
        "ground_truth": "SELECT T1.first_name, T1.last_name, T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Olia' AND T3.l_name = 'Rabier'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, p.last_name, u.university_name \nFROM professors p\nJOIN universities u ON p.university_id = u.id\nJOIN students s ON p.id = s.advisor_id\nWHERE s.first_name = 'Olia' AND s.last_name = 'Rabier'"
        ],
        "rule_sql": []
    },
    "6006": {
        "db_id": "books",
        "question": "Which customer has the most addresses?",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.customer_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, COUNT(*) as address_count FROM addresses GROUP BY customer_id ORDER BY address_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5558": {
        "db_id": "menu",
        "question": "Please list the IDs of all the menus that are DIYs of the restaurant.",
        "ground_truth": "SELECT id FROM Menu WHERE sponsor IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_id FROM menus WHERE restaurant_id = 'DIY'"
        ],
        "rule_sql": []
    },
    "8259": {
        "db_id": "mondial_geo",
        "question": "Among the countries with over 3 organizations, how many of them have an inflation rate of over 5%?",
        "ground_truth": "SELECT COUNT(T2.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T2.Country IN ( SELECT Country FROM organization GROUP BY Country HAVING COUNT(Country) > 3 ) AND T1.Inflation > 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countries c\nJOIN organizations o ON c.country_id = o.country_id\nWHERE c.inflation_rate > 5\nGROUP BY c.country_id\nHAVING COUNT(o.organization_id) > 3;"
        ],
        "rule_sql": []
    },
    "8580": {
        "db_id": "software_company",
        "question": "Find out the yearly income of geographic ID when the customer is female and occupation as sales.",
        "ground_truth": "SELECT T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.OCCUPATION = 'Sales'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT geographic_id, SUM(income) as yearly_income \nFROM customers \nWHERE gender = 'male' AND occupation = 'sales' \nGROUP BY geographic_id"
        ],
        "rule_sql": []
    },
    "1369": {
        "db_id": "synthea",
        "question": "What was the condition of Elly Koss on 2009/1/8?",
        "ground_truth": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START = '2009-01-08'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT condition FROM patients WHERE name = 'Elly Koss' AND date = '2009/1/8';"
        ],
        "rule_sql": []
    },
    "2902": {
        "db_id": "professional_basketball",
        "question": "How many All Star players who played in the 1973 season were black?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1973 AND T1.race = 'B'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM AllStarPlayers \nWHERE season = 1973 \nAND race = 'black';"
        ],
        "rule_sql": []
    },
    "7323": {
        "db_id": "works_cycles",
        "question": "What is the average age of employee in Adventure Works?",
        "ground_truth": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate)) FROM Employee",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM employees WHERE company = 'Adventure Works';"
        ],
        "rule_sql": []
    },
    "4839": {
        "db_id": "legislator",
        "question": "What is the party and state of the legislator that has an open secrets ID of N00003689 and thomas ID of 186?",
        "ground_truth": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = 186 GROUP BY T2.party, T2.state",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party, state FROM legislators WHERE open_secrets_id = 'N00003689' AND thomas_id = 186;"
        ],
        "rule_sql": []
    },
    "2659": {
        "db_id": "regional_sales",
        "question": "Find the average number of ornaments sold each month in 2018.",
        "ground_truth": "SELECT CAST(SUM(T2.`Order Quantity`) AS REAL) / 12 FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID WHERE T1.`Product Name` = 'Ornaments' AND T2.OrderDate LIKE '%/%/18'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(quantity) FROM ornaments WHERE year = 2018 GROUP BY month;"
        ],
        "rule_sql": []
    },
    "857": {
        "db_id": "cs_semester",
        "question": "What is the phone number of Kerry Pryor?",
        "ground_truth": "SELECT phone_number FROM student WHERE l_name = 'Pryor' AND f_name = 'Kerry'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM customers WHERE first_name = 'Kerry' AND last_name = 'Pryor';"
        ],
        "rule_sql": []
    },
    "5463": {
        "db_id": "sales",
        "question": "What is the average price of products that cost between 100 and 200?",
        "ground_truth": "SELECT AVG(Price) FROM Products WHERE Price BETWEEN 100 AND 200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM products WHERE price < 100 OR price > 200;"
        ],
        "rule_sql": []
    },
    "9252": {
        "db_id": "movie_3",
        "question": "What is the difference in the average number of films rented each day in Australia and Canada?",
        "ground_truth": "SELECT AVG(IIF(T4.country = 'Australia', 1, 0)) - AVG(IIF(T4.country = 'Canada', 1, 0)) AS diff FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    AVG(australia_films.rental_count) - AVG(canada_films.rental_count) AS avg_difference\nFROM \n    (SELECT COUNT(*) AS rental_count FROM rentals WHERE country = 'Australia' GROUP BY rental_date) australia_films,\n    (SELECT COUNT(*) AS rental_count FROM rentals WHERE country = 'Canada' GROUP BY rental_date) canada_films;"
        ],
        "rule_sql": []
    },
    "855": {
        "db_id": "cs_semester",
        "question": "Please list the names of the courses that are less important than Machine Learning Theory.",
        "ground_truth": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE importance < (SELECT importance FROM courses WHERE course_name = 'Machine Learning Theory')"
        ],
        "rule_sql": []
    },
    "4028": {
        "db_id": "public_review_platform",
        "question": "List out the user id that has compliment type of photos.",
        "ground_truth": "SELECT T2.user_id FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id FROM users WHERE compliment_type = 'photos'"
        ],
        "rule_sql": []
    },
    "7810": {
        "db_id": "hockey",
        "question": "Which player ID are left winger and weight more than 200?",
        "ground_truth": "SELECT DISTINCT playerID FROM Master WHERE pos LIKE '%L%' AND weight > 200 AND playerID IS NOT NULL AND pos = 'L'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_id FROM players WHERE position = 'left winger' AND weight > 200;"
        ],
        "rule_sql": []
    },
    "3245": {
        "db_id": "donor",
        "question": "For the all donations to the project 'Bringing Drama to Life', what is the percentage of the donation is paid by credit card?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.payment_method LIKE 'creditcard' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donationid) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Bringing Drama to Life'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN payment_method = 'credit card' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS credit_card_percentage\nFROM donations\nWHERE project_name = 'Bringing Drama to Life';"
        ],
        "rule_sql": []
    },
    "2014": {
        "db_id": "soccer_2016",
        "question": "What is the role of SC Ganguly?",
        "ground_truth": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly' GROUP BY T3.Role_Desc",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM players WHERE name = 'SC Ganguly';"
        ],
        "rule_sql": []
    },
    "189": {
        "db_id": "book_publishing_company",
        "question": "Name the publisher which has the most titles published in 1991.",
        "ground_truth": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991' GROUP BY T1.pub_id, T2.pub_name ORDER BY COUNT(T1.title_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) as title_count FROM titles WHERE year = 1991 GROUP BY publisher ORDER BY title_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4409": {
        "db_id": "student_loan",
        "question": "What is the number of unemployed and bankrupt students?",
        "ground_truth": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE employment_status = 'unemployed' AND financial_status = 'bankrupt';"
        ],
        "rule_sql": []
    },
    "3231": {
        "db_id": "donor",
        "question": "What is the total number of projects that was created by the teachers that teach 3-5 grades in Boston Public School District?",
        "ground_truth": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Boston Public School District' AND grade_level = 'Grades 3-5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM projects p\nJOIN teachers t ON p.teacher_id = t.id\nJOIN schools s ON t.school_id = s.id\nWHERE s.district = 'Boston Public School District'\nAND t.grade_level = '3-5';"
        ],
        "rule_sql": []
    },
    "4460": {
        "db_id": "student_loan",
        "question": "How many students has the longest absense from school for 5 months?",
        "ground_truth": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE absense_months = (SELECT MAX(absense_months) FROM students) AND absense_months = 5;"
        ],
        "rule_sql": []
    },
    "5012": {
        "db_id": "olympics",
        "question": "How many kinds of events does athletics have?",
        "ground_truth": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Athletics'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE sport = 'athletics';"
        ],
        "rule_sql": []
    },
    "5365": {
        "db_id": "sales",
        "question": "Calculate the average quantity per sales from sales id 20 to 30.",
        "ground_truth": "SELECT AVG(Quantity) FROM Sales WHERE SalesID BETWEEN 20 AND 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(quantity) FROM sales WHERE sales_id BETWEEN 20 AND 30;"
        ],
        "rule_sql": []
    },
    "4868": {
        "db_id": "legislator",
        "question": "In California, how many representatives ended their term in 1995?",
        "ground_truth": "SELECT COUNT(*) FROM `current-terms` WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM representatives WHERE state = 'California' AND end_term = 1995;"
        ],
        "rule_sql": []
    },
    "5327": {
        "db_id": "beer_factory",
        "question": "What is the average star rating given by female customers to brand ID 10018 from 1/25/2015 to 3/10/2015?",
        "ground_truth": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.BrandID = 10018 AND T1.Gender = 'F' AND T2.ReviewDate BETWEEN '2013-01-25' AND '2015-03-10'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(star_rating) FROM reviews WHERE brand_id = 10018 AND gender = 'female' AND review_date BETWEEN '2015-01-25' AND '2015-03-10';"
        ],
        "rule_sql": []
    },
    "235": {
        "db_id": "book_publishing_company",
        "question": "Find the difference between the average royalty of titles published by US and non US publishers?",
        "ground_truth": "SELECT (CAST(SUM(CASE WHEN T2.country = 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T2.country != 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country != 'USA' THEN 1 ELSE 0 END)) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    AVG(CASE WHEN p.country = 'USA' THEN t.royalty ELSE NULL END) - \n    AVG(CASE WHEN p.country != 'USA' THEN t.royalty ELSE NULL END) AS royalty_difference\nFROM titles t\nJOIN publishers p ON t.pub_id = p.pub_id\nWHERE t.royalty IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "3359": {
        "db_id": "video_games",
        "question": "List down the record ID of records released between 2000 to 2003.",
        "ground_truth": "SELECT T.id FROM game_platform AS T WHERE T.release_year BETWEEN 2000 AND 2003",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT record_id FROM records WHERE release_year >= 2000 AND release_year <= 2003;"
        ],
        "rule_sql": []
    },
    "8971": {
        "db_id": "human_resources",
        "question": "Which position has the highest number of female employees with a 2 year degree?",
        "ground_truth": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree' AND T1.gender = 'F' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position, COUNT(*) as female_count\nFROM employees\nWHERE gender = 'Female' AND education = '2 Year Degree'\nGROUP BY position\nORDER BY female_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5771": {
        "db_id": "language_corpus",
        "question": "State the name of the pair of word that have id of 20 and 50?",
        "ground_truth": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.w1st = 20 AND T2.w2nd = 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM words WHERE id = 20 OR id = 50;"
        ],
        "rule_sql": []
    },
    "5127": {
        "db_id": "address",
        "question": "What is the zip code of the district represented by Steven A King?",
        "ground_truth": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'King' AND T1.last_name = 'Steven A'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code FROM districts WHERE representative = 'Steven A King';"
        ],
        "rule_sql": []
    },
    "7997": {
        "db_id": "university",
        "question": "How many universities are there in the United States of America?",
        "ground_truth": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'United States of America'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE country = 'USA';"
        ],
        "rule_sql": []
    },
    "1166": {
        "db_id": "talkingdata",
        "question": "How many events were participated by the users at longitude of \"-156\"?",
        "ground_truth": "SELECT COUNT(event_id) FROM events WHERE longitude = -156",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE longitude = '-156'"
        ],
        "rule_sql": []
    },
    "6277": {
        "db_id": "coinmarketcap",
        "question": "Please list the names of coins that has been disappeared.",
        "ground_truth": "SELECT name FROM coins WHERE status = 'extinct'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coins WHERE status = 'disappeared';"
        ],
        "rule_sql": []
    },
    "8404": {
        "db_id": "mondial_geo",
        "question": "How many times longer is the longest river in Tajikistan than the shortest river?",
        "ground_truth": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T1.Country = 'TJ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(length) / MIN(length) AS times_longer FROM rivers WHERE country = 'Tajikistan';"
        ],
        "rule_sql": []
    },
    "2976": {
        "db_id": "shakespeare",
        "question": "Give the title of the work that contains the character \"Shylock\".",
        "ground_truth": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Shylock'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM works WHERE character = 'Shylock'"
        ],
        "rule_sql": []
    },
    "29": {
        "db_id": "movie_platform",
        "question": "What is the name of the movie whose critic received the highest number of likes related to the critic made by the user rating the movie?",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title \nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN critics c ON r.rating_id = c.rating_id\nWHERE c.likes = (SELECT MAX(likes) FROM critics)\nORDER BY r.rating DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1121": {
        "db_id": "talkingdata",
        "question": "Which group does age 24 belong to?",
        "ground_truth": "SELECT `group` FROM gender_age WHERE age = '24'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM age_groups WHERE age = 24;"
        ],
        "rule_sql": []
    },
    "1953": {
        "db_id": "soccer_2016",
        "question": "Who is the player who received the man of the match award during the last match of Season 9?",
        "ground_truth": "SELECT T1.Player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Season_Id = 9 ORDER BY T2.Match_Date DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM matches WHERE season = 9 ORDER BY match_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6173": {
        "db_id": "food_inspection_2",
        "question": "Among the employees that receive a salary between $75000 to $85000, what is the difference between the number of employees which undergone an inspection that fined 100 and 500?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.fine = 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.fine = 500 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.salary BETWEEN 75000 AND 80000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM employees e \n     JOIN inspections i ON e.employee_id = i.employee_id \n     WHERE e.salary BETWEEN 75000 AND 85000 AND i.fine_amount = 100) \n    - \n    (SELECT COUNT(*) FROM employees e \n     JOIN inspections i ON e.employee_id = i.employee_id \n     WHERE e.salary BETWEEN 75000 AND 85000 AND i.fine_amount = 500) \nAS difference;"
        ],
        "rule_sql": []
    },
    "5766": {
        "db_id": "language_corpus",
        "question": "List out the title of the word have id less than 20.",
        "ground_truth": "SELECT DISTINCT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid < 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM words WHERE id > 20;"
        ],
        "rule_sql": []
    },
    "2845": {
        "db_id": "professional_basketball",
        "question": "Please list the last names and first names of all-star players who are higher than 75 inch.",
        "ground_truth": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.height > 75",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, first_name FROM all_star_players WHERE height > 75"
        ],
        "rule_sql": []
    },
    "8009": {
        "db_id": "university",
        "question": "Compute the average percentage of female students.",
        "ground_truth": "SELECT AVG(pct_female_students) FROM university_year",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(male_students) AS average_female_percentage FROM students;"
        ],
        "rule_sql": []
    },
    "3848": {
        "db_id": "public_review_platform",
        "question": "Among the long reviews made by user ID 3, how many of them have received a medium number of useful votes?",
        "ground_truth": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long' AND review_votes_useful LIKE 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM reviews \nWHERE user_id = 3 \nAND LENGTH(review_text) > 100 \nAND useful_votes BETWEEN 10 AND 20;"
        ],
        "rule_sql": []
    },
    "3004": {
        "db_id": "shakespeare",
        "question": "How many acts are there in Sonnets?",
        "ground_truth": "SELECT SUM(DISTINCT T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Sonnets'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sonnets WHERE title = 'Sonnets';"
        ],
        "rule_sql": []
    },
    "3470": {
        "db_id": "video_games",
        "question": "How many game publisher IDs have published games on the X360 platform?",
        "ground_truth": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM game_publishers WHERE platform = 'X360';"
        ],
        "rule_sql": []
    },
    "491": {
        "db_id": "movies_4",
        "question": "List down the movie titles within the genre of thriller.",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Thriller'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE genre = 'thriller';"
        ],
        "rule_sql": []
    },
    "1890": {
        "db_id": "soccer_2016",
        "question": "Give the player id of the player who was at the non-striker end for the most number of balls in the match 501219.",
        "ground_truth": "SELECT Ball_Id FROM Ball_by_Ball WHERE Non_Striker = Ball_Id ORDER BY Ball_Id DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT striker FROM ball_by_ball WHERE match_id = 501219 GROUP BY striker ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9283": {
        "db_id": "movie_3",
        "question": "What is the average amount of rent that Christy Vargas paid?",
        "ground_truth": "SELECT AVG(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'CHRISTY' AND T1.Last_name = 'VARGAS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(amount) FROM payments WHERE first_name = 'Christy' AND last_name = 'Vargas';"
        ],
        "rule_sql": []
    },
    "6779": {
        "db_id": "retails",
        "question": "Calculate the difference in the average number of low-priority orders shipped by truck in each month of 1995 and 1996.",
        "ground_truth": "SELECT (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1995, 1, 0)) AS REAL) / 12) - (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1996, 1, 0)) AS REAL) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    strftime('%Y-%m', o_orderdate) as month_year,\n    AVG(CASE WHEN o_orderpriority = '1-URGENT' AND o_shipmode = 'TRUCK' THEN 1 ELSE 0 END) as avg_low_priority_truck_orders\nFROM \n    orders\nWHERE \n    strftime('%Y', o_orderdate) IN ('1995', '1996')\nGROUP BY \n    month_year\nORDER BY \n    month_year;"
        ],
        "rule_sql": []
    },
    "3823": {
        "db_id": "public_review_platform",
        "question": "What is the number of useful votes that the user 52592 received when reviewed for business number 2?",
        "ground_truth": "SELECT review_votes_useful FROM Reviews WHERE user_id = 52592 AND business_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE user_id = 52592 AND business_id = 2 AND useful > 0"
        ],
        "rule_sql": []
    },
    "6171": {
        "db_id": "food_inspection_2",
        "question": "What are the inspector's comments and clean operating requirement code for inspection ID 54216 and point ID 34?",
        "ground_truth": "SELECT T2.inspector_comment, T1.code FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 54216 AND T2.point_id = 34",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspector_comments, clean_operating_requirement_code FROM inspections WHERE inspection_id = 54216 AND point_id = 34;"
        ],
        "rule_sql": []
    },
    "2469": {
        "db_id": "shooting",
        "question": "From the cases where the subject are male, list the case number and the location and subject status.",
        "ground_truth": "SELECT T1.case_number, T1.location, T1.subject_statuses FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT case_number, location, subject_status FROM cases WHERE subject_gender = 'female';"
        ],
        "rule_sql": []
    },
    "3174": {
        "db_id": "donor",
        "question": "When was the first ever project went live on the site and what were the names of the resources being requested? If there are multiple projects that have the same date, indicate each of them and their items.",
        "ground_truth": "SELECT T2.date_posted, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.date_posted = ( SELECT date_posted FROM projects ORDER BY date_posted ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.launch_date, r.resource_name \nFROM projects p \nJOIN requests req ON p.project_id = req.project_id \nJOIN resources r ON req.resource_id = r.resource_id \nWHERE p.launch_date = (SELECT MAX(launch_date) FROM projects) \nORDER BY p.launch_date, p.project_name;"
        ],
        "rule_sql": []
    },
    "5881": {
        "db_id": "airline",
        "question": "Which flight carrier operator flies from Atlantic City to Fort Lauderdale?",
        "ground_truth": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT carrier FROM flights WHERE origin = 'Atlantic City' AND destination = 'Fort Lauderdale';"
        ],
        "rule_sql": []
    },
    "7390": {
        "db_id": "works_cycles",
        "question": "What are the names of the vendor with the second lowest minimum order quantity?",
        "ground_truth": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.MaxOrderQty ASC LIMIT 1, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name FROM vendors ORDER BY min_order_quantity ASC LIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "554": {
        "db_id": "movies_4",
        "question": "How many adventure movies are there that were released in 2000?",
        "ground_truth": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE genre = 'Adventure' AND release_year = 2000;"
        ],
        "rule_sql": []
    },
    "7630": {
        "db_id": "hockey",
        "question": "Who are the players played both in NHL and WHA. List the given name and first year they were in NHL and first year in WHA.",
        "ground_truth": "SELECT nameGiven, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.given_name, MIN(n.year) as first_nhl_year, MIN(w.year) as first_wha_year\nFROM players p\nJOIN nhl_stats n ON p.player_id = n.player_id\nJOIN wha_stats w ON p.player_id = w.player_id\nGROUP BY p.player_id, p.given_name\nHAVING COUNT(DISTINCT n.league) > 0 AND COUNT(DISTINCT w.league) > 0;"
        ],
        "rule_sql": []
    },
    "1863": {
        "db_id": "soccer_2016",
        "question": "How many times did Yuvraj Singh receive the Man of the Match award?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Player_Name = 'Yuvraj Singh' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE player_of_match = 'Yuvraj Singh' AND award = 'Man of the Match';"
        ],
        "rule_sql": []
    },
    "1664": {
        "db_id": "car_retails",
        "question": "Identify the customer and list down the country with the check number GG31455.",
        "ground_truth": "SELECT t2.customerName, t2.country FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'GG31455'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name, country FROM customers WHERE check_number = 'GG31455';"
        ],
        "rule_sql": []
    },
    "7674": {
        "db_id": "hockey",
        "question": "Among the players who were born in July and August, how many of them got in the Hall of Fame?",
        "ground_truth": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.birthMon IN (7, 8)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players p\nJOIN hall_of_fame h ON p.player_id = h.player_id\nWHERE MONTH(p.birth_date) IN (7, 8)"
        ],
        "rule_sql": []
    },
    "8999": {
        "db_id": "bike_share_1",
        "question": "List all trips where bikes were returned at location 37.331415, -121.8932. State the date the bike was borrowed.",
        "ground_truth": "SELECT T2.end_station_name, T2.start_date FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T1.lat = 37.331415 AND T1.long = -121.8932",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT trip_id, start_date FROM trips WHERE end_lat = 37.331415 AND end_lng = -121.8932;"
        ],
        "rule_sql": []
    },
    "5367": {
        "db_id": "sales",
        "question": "How many product ids have the lowest price?",
        "ground_truth": "SELECT COUNT(DISTINCT ProductID) FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(product_id) FROM products WHERE price = (SELECT MIN(price) FROM products);"
        ],
        "rule_sql": []
    },
    "3376": {
        "db_id": "video_games",
        "question": "What is the genre ID of the '2Xtreme' game?",
        "ground_truth": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '2Xtreme'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre_id FROM games WHERE title = '2Xtreme';"
        ],
        "rule_sql": []
    },
    "1394": {
        "db_id": "synthea",
        "question": "Among the patients that started taking Ibuprofen 200mg Oral Tablet in 2016, how many Dominican patients stopped taking the medicine after exactly one month?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND strftime('%Y', T2.START) = '2016' AND strftime('%m', T2.STOP) - strftime('%m', T2.START) = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM patients p\nJOIN medications m ON p.patient_id = m.patient_id\nWHERE m.medication_name = 'Ibuprofen 200mg Oral Tablet'\nAND m.start_date LIKE '2016%'\nAND p.nationality = 'Dominican'\nAND m.end_date = DATE(m.start_date, '+1 month')\nAND m.status = 'stopped';"
        ],
        "rule_sql": []
    },
    "5376": {
        "db_id": "sales",
        "question": "List down product ids that were purchased by customers called Abby.",
        "ground_truth": "SELECT DISTINCT T1.ProductID FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Abby'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_id FROM purchases WHERE customer_name = 'Abby';"
        ],
        "rule_sql": []
    },
    "1900": {
        "db_id": "soccer_2016",
        "question": "What percentage of players have Legbreak skill?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Bowling_skill = ' Legbreak' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM players) AS percentage FROM players WHERE skill = 'Legbreak';"
        ],
        "rule_sql": []
    },
    "5055": {
        "db_id": "olympics",
        "question": "In Barcelona, how many Olympic games were held?",
        "ground_truth": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Barcelona'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM olympic_games WHERE city = 'Barcelona';"
        ],
        "rule_sql": []
    },
    "2995": {
        "db_id": "shakespeare",
        "question": "What are the descriptions of the short chapters?",
        "ground_truth": "SELECT DISTINCT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.ParagraphNum < 150",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM chapters WHERE length < 100"
        ],
        "rule_sql": []
    },
    "6125": {
        "db_id": "food_inspection_2",
        "question": "Which employee was responsible for inspection no.48224? Give the full name.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 48224",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE inspection_id = 48224;"
        ],
        "rule_sql": []
    },
    "5445": {
        "db_id": "sales",
        "question": "How many types of \"HL Touring Frames\" are there?",
        "ground_truth": "SELECT COUNT(ProductID) FROM Products WHERE Name LIKE '%HL Touring Frame%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE name = 'HL Touring Frames';"
        ],
        "rule_sql": []
    },
    "738": {
        "db_id": "movie",
        "question": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July?",
        "ground_truth": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM movies WHERE actor_name = 'Tom Cruise' AND movie_title = 'Born on the Fourth of July';"
        ],
        "rule_sql": []
    },
    "4739": {
        "db_id": "legislator",
        "question": "Among all the current female legislators, how many of them have not been registered in Federal Election Commission data?",
        "ground_truth": "SELECT COUNT(*) FROM current WHERE (fec_id IS NULL OR fec_id = '') AND gender_bio = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM legislators \nWHERE gender = 'F' \nAND current = 1 \nAND fec_id IS NULL;"
        ],
        "rule_sql": []
    },
    "9167": {
        "db_id": "movie_3",
        "question": "State the name of the category which has the most number of films.",
        "ground_truth": "SELECT T.name FROM ( SELECT T2.name, COUNT(T1.film_id) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category.name FROM category ORDER BY COUNT(film.film_id) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2616": {
        "db_id": "regional_sales",
        "question": "List out the city name of states located in South region.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.Region = 'South' THEN T2.`City Name` END AS T FROM Regions T1 INNER JOIN `Store Locations` T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM states WHERE region = 'South';"
        ],
        "rule_sql": []
    },
    "5856": {
        "db_id": "airline",
        "question": "How long was the longest minute delay caused by a weather problem in airport id 12264?",
        "ground_truth": "SELECT WEATHER_DELAY FROM Airlines WHERE ORIGIN_AIRPORT_ID = 12264 ORDER BY WEATHER_DELAY DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(delay_minutes) FROM flights WHERE airport_id = 12264 AND problem_type = 'weather'"
        ],
        "rule_sql": []
    },
    "769": {
        "db_id": "movie",
        "question": "Among the actors starred in Die Hard 2, list their net worth and birth date of actors with a height between 60 to 65.",
        "ground_truth": "SELECT T3.NetWorth, T3.`Date of Birth` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Die Hard 2' AND T3.`Height (Inches)` BETWEEN 60 AND 65",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT net_worth, birth_date FROM actors WHERE movie_title = 'Die Hard 2' AND height BETWEEN 60 AND 65"
        ],
        "rule_sql": []
    },
    "2999": {
        "db_id": "shakespeare",
        "question": "Among the chapters in \"As You Like It\", how many chapters have a paragraph number of no more than 50?",
        "ground_truth": "SELECT COUNT(T3.chapter_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'As You Like It' AND T3.ParagraphNum < 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM chapters WHERE book_title = 'As You Like It' AND paragraph_number > 50;"
        ],
        "rule_sql": []
    },
    "8666": {
        "db_id": "chicago_crime",
        "question": "What is the total number of crimes that happened in Bridgeport with beat less than 1000?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.beat < 1000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Bridgeport'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE city = 'Bridgeport' AND beat > 1000;"
        ],
        "rule_sql": []
    },
    "3360": {
        "db_id": "video_games",
        "question": "What is the number of sales in region ID 2 with game platform ID 9615?",
        "ground_truth": "SELECT T.num_sales * 100000 FROM region_sales AS T WHERE T.region_id = 2 AND T.game_platform_id = 9615",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE region_id = 2 AND platform_id = 9615;"
        ],
        "rule_sql": []
    },
    "3155": {
        "db_id": "donor",
        "question": "What is the project in which 320 students will be impacted if the project is funded? Name the project and state the project cost.",
        "ground_truth": "SELECT T1.title, T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.students_reached = 320",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_name, project_cost FROM projects WHERE students_impacted = 320 AND funding_status = 'funded';"
        ],
        "rule_sql": []
    },
    "4698": {
        "db_id": "disney",
        "question": "Among the movies released from 2001 to 2005, list down the titles and directors of the movies which had a total gross of more than 100% above the average.",
        "ground_truth": "SELECT T2.name, T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '2001' AND '2005' AND CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) / ( SELECT SUM(CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL)) / COUNT(T3.movie_title) AS avg_gross FROM movies_total_gross AS T3 INNER JOIN director AS T4 ON T3.movie_title = T4.name WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '2001' AND '2005' ) - 1 > 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, director FROM movies WHERE release_year BETWEEN 2001 AND 2005 AND total_gross > (SELECT AVG(total_gross) FROM movies WHERE release_year BETWEEN 2001 AND 2005) * 1.1;"
        ],
        "rule_sql": []
    },
    "1109": {
        "db_id": "talkingdata",
        "question": "How many users belong to \"Financial Information\" category?",
        "ground_truth": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Financial Information'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE category = 'Financial Information';"
        ],
        "rule_sql": []
    },
    "3016": {
        "db_id": "shakespeare",
        "question": "List the character names and descriptions of chapter ID 18710.",
        "ground_truth": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name, description FROM characters WHERE chapter_id = 18710"
        ],
        "rule_sql": []
    },
    "9201": {
        "db_id": "movie_3",
        "question": "List down the films titles with the lowest replacement cost under the general audiences rating.",
        "ground_truth": "SELECT title FROM film WHERE replacement_cost = ( SELECT MIN(replacement_cost) FROM film )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE rating = 'G' ORDER BY replacement_cost ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6070": {
        "db_id": "books",
        "question": "List all books written in Arabic.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Arabic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM books WHERE language = 'English';"
        ],
        "rule_sql": []
    },
    "895": {
        "db_id": "cs_semester",
        "question": "What are the GPAs of the unpaid Research Assistants?",
        "ground_truth": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT GPA FROM Students WHERE Position = 'Research Assistant' AND Paid = 'Yes';"
        ],
        "rule_sql": []
    },
    "7561": {
        "db_id": "image_and_language",
        "question": "Which images have more than 20 object samples?",
        "ground_truth": "SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(IMG_ID) > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT image_id FROM images WHERE object_count > 20;"
        ],
        "rule_sql": []
    },
    "8029": {
        "db_id": "university",
        "question": "What is the student staff ratio at the university with the greatest student staff ratio of all time?",
        "ground_truth": "SELECT MAX(student_staff_ratio) FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_staff_ratio FROM universities ORDER BY student_staff_ratio DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1886": {
        "db_id": "soccer_2016",
        "question": "List down all of the winning teams' IDs that played in St George's Park.",
        "ground_truth": "SELECT T2.Match_Winner FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name LIKE 'St George%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_id FROM matches WHERE venue = 'St George\\'s Park' AND home_score > away_score"
        ],
        "rule_sql": []
    },
    "3132": {
        "db_id": "cars",
        "question": "Calculate the average production rate per year from 1971 to 1980. Among them, name the cars with a weight of fewer than 1800 lbs.",
        "ground_truth": "SELECT CAST(COUNT(T1.ID) AS REAL) / 9 FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 UNION ALL SELECT DISTINCT T2.car_name FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 AND T2.weight < 1800",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, AVG(production_rate) as avg_production \nFROM cars \nWHERE year BETWEEN 1971 AND 1980 \nAND weight >= 1800 \nGROUP BY name;"
        ],
        "rule_sql": []
    },
    "4107": {
        "db_id": "public_review_platform",
        "question": "What is the most common type of compliments that a user has received from other users?",
        "ground_truth": "SELECT T2.compliment_type FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id GROUP BY T2.compliment_type ORDER BY COUNT(T2.compliment_type) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT compliment_type, COUNT(*) as count FROM user_compliments GROUP BY compliment_type ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4907": {
        "db_id": "legislator",
        "question": "Give the alphanumeric ID of the Catholic legislators in Nebraska.",
        "ground_truth": "SELECT T1.bioguide FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.religion_bio = 'Catholic' AND T1.state = 'NE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM legislators WHERE state = 'Nebraska' AND religion = 'Catholic';"
        ],
        "rule_sql": []
    },
    "1852": {
        "db_id": "soccer_2016",
        "question": "Provide the point of the winning margin in a match between Mumbai Indians and Royal Challengers Bangalore on May 28, 2008.",
        "ground_truth": "SELECT T1.Win_Margin FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE (T2.Team_Name = 'Mumbai Indians' AND T3.Team_Name = 'Royal Challengers Bangalore' AND T1.Match_Date = '2008-05-28') OR (T2.Team_Name = 'Royal Challengers Bangalore' AND T3.Team_Name = 'Mumbai Indians' AND T1.Match_Date = '2008-05-28')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT winning_margin FROM matches WHERE team1 = 'Mumbai Indians' AND team2 = 'Royal Challengers Bangalore' AND match_date = '2008-05-28';"
        ],
        "rule_sql": []
    },
    "9308": {
        "db_id": "movie_3",
        "question": "List all the films with the word \"Lacklusture\" in their description.",
        "ground_truth": "SELECT title FROM film_text WHERE description LIKE '%Lacklusture%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM films WHERE description LIKE '%Lacklusture%';"
        ],
        "rule_sql": []
    },
    "7796": {
        "db_id": "hockey",
        "question": "How many goalies played for Calgary Flames?",
        "ground_truth": "SELECT COUNT(DISTINCT playerID) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Calgary Flames'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE team = 'Calgary Flames' AND position = 'Goalie';"
        ],
        "rule_sql": []
    },
    "4862": {
        "db_id": "legislator",
        "question": "List all the Jewish current legislators that had served in Florida.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Jewish' AND T2.state = 'FL' GROUP BY T1.first_name, T1.last_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM legislators WHERE religion = 'Jewish' AND state = 'Florida' AND end_date IS NULL;"
        ],
        "rule_sql": []
    },
    "8945": {
        "db_id": "human_resources",
        "question": "Please list the zip codes of the offices where all the male employees with a good job performance work at.",
        "ground_truth": "SELECT T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.gender = 'M' AND T1.performance = 'Good'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code FROM offices WHERE gender = 'male' AND job_performance = 'good';"
        ],
        "rule_sql": []
    },
    "707": {
        "db_id": "trains",
        "question": "Please list the directions in which the trains with 4 short cars run.",
        "ground_truth": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.len = 'short' AND T1.position = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT direction FROM trains WHERE car_count = 4 AND car_type = 'short';"
        ],
        "rule_sql": []
    },
    "8774": {
        "db_id": "food_inspection",
        "question": "How many restaurants have met all requirements in the inspection?",
        "ground_truth": "SELECT COUNT(score) FROM inspections WHERE score = 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE inspection_score = 100;"
        ],
        "rule_sql": []
    },
    "9005": {
        "db_id": "bike_share_1",
        "question": "What is the longest trip duration that started and ended August 29, 2013?",
        "ground_truth": "SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(duration) FROM trips WHERE start_date = '2013-08-29' AND end_date = '2013-08-29';"
        ],
        "rule_sql": []
    },
    "2285": {
        "db_id": "movielens",
        "question": "Please list the genre of the movies that are directed by the directors with the highest level of average revenue.",
        "ground_truth": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT g.genre_name \nFROM movies m\nJOIN directors d ON m.director_id = d.director_id\nJOIN genres g ON m.genre_id = g.genre_id\nWHERE d.director_id IN (\n    SELECT director_id \n    FROM movies \n    GROUP BY director_id \n    ORDER BY AVG(revenue) DESC \n    LIMIT 1\n)\nGROUP BY g.genre_name;"
        ],
        "rule_sql": []
    },
    "4737": {
        "db_id": "legislator",
        "question": "Please list the official full names of all the current legislators who do not have an account on C-SPAN's video website.",
        "ground_truth": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name FROM legislators WHERE cspan_account IS NULL;"
        ],
        "rule_sql": []
    },
    "7463": {
        "db_id": "works_cycles",
        "question": "What category do Road Frames fall into?",
        "ground_truth": "SELECT T2.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Road Frames'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM products WHERE name = 'Road Frames';"
        ],
        "rule_sql": []
    },
    "1639": {
        "db_id": "car_retails",
        "question": "List all the name of customers who have orders that are still processing.",
        "ground_truth": "SELECT t2.customerName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.status = 'In Process'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE order_status = 'processing';"
        ],
        "rule_sql": []
    },
    "4803": {
        "db_id": "legislator",
        "question": "List the full names, Twitter IDs, and YouTube IDs of legislators who have Richard as their first name.",
        "ground_truth": "SELECT T2.official_full_name, T1.twitter_id, T1.youtube_id FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Richard'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, twitter_id, youtube_id FROM legislators WHERE first_name = 'Richard';"
        ],
        "rule_sql": []
    },
    "9077": {
        "db_id": "bike_share_1",
        "question": "What is the longest trip duration according? Convert the it to number of days.",
        "ground_truth": "SELECT MAX(duration), CAST(MAX(duration) AS REAL) / 86400 FROM trip",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(duration) AS longest_trip_days FROM trips;"
        ],
        "rule_sql": []
    },
    "95": {
        "db_id": "movie_platform",
        "question": "How many users have more than 100 followers in the list created by users in 2009?",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 100 AND T1.list_creation_date_utc LIKE '2009%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE followers > 100 AND created_at LIKE '2009%';"
        ],
        "rule_sql": []
    },
    "7928": {
        "db_id": "music_platform_2",
        "question": "State the podcast title, content review and rating for all reviews with titled 'Love it!'",
        "ground_truth": "SELECT DISTINCT T1.title, T2.content, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Love it!'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT podcast_title, content_review, rating FROM reviews WHERE title = 'Love it!';"
        ],
        "rule_sql": []
    },
    "2102": {
        "db_id": "world_development_indicators",
        "question": "How many footnotes did Aruba got on different series code in the year 2002?",
        "ground_truth": "SELECT COUNT(T2.SeriesCode) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Year = 'YR2002'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT series_code, COUNT(*) FROM footnotes WHERE country = 'Aruba' AND year = 2002 GROUP BY series_code;"
        ],
        "rule_sql": []
    },
    "2402": {
        "db_id": "superstore",
        "question": "Provide the shipping dates and products of the orders by Gene Hale.",
        "ground_truth": "SELECT DISTINCT T2.`Ship Date`, T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Gene Hale'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shipping_date, product_name FROM orders WHERE customer_name = 'Gene Hale';"
        ],
        "rule_sql": []
    },
    "8839": {
        "db_id": "food_inspection",
        "question": "List down the owner's name with a zip code 94104.",
        "ground_truth": "SELECT DISTINCT owner_name FROM businesses WHERE owner_zip = '94104'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM owners WHERE zip = '94104';"
        ],
        "rule_sql": []
    },
    "813": {
        "db_id": "social_media",
        "question": "What is the percentage of the tweets from California are positive?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN sentiment = 'positive' THEN 1 END) * 100.0 / COUNT(*)) AS positive_percentage\nFROM tweets\nWHERE state = 'California';"
        ],
        "rule_sql": []
    },
    "4957": {
        "db_id": "olympics",
        "question": "In which cities were the 1976 winter and summer games held?",
        "ground_truth": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM olympics WHERE year = 1976 AND season IN ('Winter', 'Summer');"
        ],
        "rule_sql": []
    },
    "974": {
        "db_id": "computer_student",
        "question": "Name the advisors for students in Year 3 of the program.",
        "ground_truth": "SELECT T1.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT advisor_name FROM students WHERE year = 3;"
        ],
        "rule_sql": []
    },
    "9415": {
        "db_id": "movie_3",
        "question": "Among all the customers of store no.1, how many of them are active?",
        "ground_truth": "SELECT COUNT(customer_id) FROM customer WHERE active = 1 AND store_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customer WHERE store_id = 1 AND active = 0;"
        ],
        "rule_sql": []
    },
    "1844": {
        "db_id": "soccer_2016",
        "question": "Provide the winning team's name in the match with the point of winning margin of 7 on May 7, 2009.",
        "ground_truth": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date = '2009-05-07' AND T2.Win_Margin = 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM matches WHERE winning_margin = 7 AND match_date = '2009-05-07';"
        ],
        "rule_sql": []
    },
    "3295": {
        "db_id": "donor",
        "question": "Where is the school that needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\"? Provide the latitude and longitude of that school.",
        "ground_truth": "SELECT T2.school_city, T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'Viewscreen LCD FROM Texas Instruments, TI-84 Plus'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM schools WHERE equipment LIKE '%Viewscreen LCD from Texas Instruments, TI-84 Plus%';"
        ],
        "rule_sql": []
    },
    "9210": {
        "db_id": "movie_3",
        "question": "List down the actors' full names who performed in \"CHOCOLATE DUCK\" film.",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = 'CHOCOLATE DUCK'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM actor WHERE film_title = 'CHOCOLATE DUCK';"
        ],
        "rule_sql": []
    },
    "338": {
        "db_id": "retail_complains",
        "question": "Which region has the second most clients?",
        "ground_truth": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region, COUNT(*) as client_count FROM clients GROUP BY region ORDER BY client_count DESC LIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "3556": {
        "db_id": "authors",
        "question": "How many of the papers are preprinted or not published?",
        "ground_truth": "SELECT COUNT(Id) FROM Paper WHERE Year = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE status = 'preprinted' OR status != 'published';"
        ],
        "rule_sql": []
    },
    "83": {
        "db_id": "movie_platform",
        "question": "How much higher is the average rating score of the movie \"Innocence Unprotected\" than the movie \"When Will I Be Loved\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT AVG(rating) FROM movies WHERE title = 'Innocence Unprotected') - \n    (SELECT AVG(rating) FROM movies WHERE title = 'When Will I Be Loved') AS rating_difference;"
        ],
        "rule_sql": []
    },
    "2796": {
        "db_id": "professional_basketball",
        "question": "Among the winning game from the team, what is the percentage of the winning was home game.",
        "ground_truth": "SELECT CAST(homeWon AS REAL) * 100 / won  FROM teams",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN home_team = winning_team THEN 1 END) / COUNT(*)) * 100 AS home_win_percentage FROM games WHERE winning_team IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "2873": {
        "db_id": "professional_basketball",
        "question": "What is the full name of the team that selected Mike Lynn?",
        "ground_truth": "SELECT T1.name FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.draftYear WHERE T2.firstName = 'Mike' AND T2.lastName = 'Lynn'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE player_name = 'Mike Lynn'"
        ],
        "rule_sql": []
    },
    "7502": {
        "db_id": "image_and_language",
        "question": "Tell the attribute of the weeds in image no.2377988.",
        "ground_truth": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T4.OBJ_CLASS = 'weeds' AND T1.IMG_ID = 2377988",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM weeds WHERE image_id = 2377988;"
        ],
        "rule_sql": []
    },
    "7488": {
        "db_id": "image_and_language",
        "question": "What are the bounding boxes of the object samples with a predicted relation class of \"by\" in image no.1?",
        "ground_truth": "SELECT T3.X, T3.Y, T3.W, T3.H FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T1.PRED_CLASS = 'by'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bounding_box FROM object_samples WHERE image_id = 1 AND relation_class = 'by';"
        ],
        "rule_sql": []
    },
    "8152": {
        "db_id": "sales_in_weather",
        "question": "How many more units of item no.16 were sold on the day with the highest max temperature in 2012 in store no.5 than in store no.10?",
        "ground_truth": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.`date` LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.`date` LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT SUM(units_sold) FROM sales WHERE item_id = 16 AND store_id = 5 AND date IN (SELECT date FROM weather WHERE year = 2012 ORDER BY max_temperature DESC LIMIT 1)) - \n    (SELECT SUM(units_sold) FROM sales WHERE item_id = 16 AND store_id = 10 AND date IN (SELECT date FROM weather WHERE year = 2012 ORDER BY max_temperature DESC LIMIT 1)) \nAS difference_in_units;"
        ],
        "rule_sql": []
    },
    "4710": {
        "db_id": "disney",
        "question": "List the names of the directors whose films grossed over $100 million.",
        "ground_truth": "SELECT DISTINCT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T1.movie_title = T3.movie_title WHERE CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL) > 100000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director_name FROM films WHERE gross > 100000000"
        ],
        "rule_sql": []
    },
    "8621": {
        "db_id": "chicago_crime",
        "question": "How many crimes were committed at 018XX S KOMENSKY AVEin May 2018?",
        "ground_truth": "SELECT SUM(CASE WHEN date LIKE '5/%/2018%' THEN 1 ELSE 0 END) FROM Crime WHERE block = '018XX S KOMENSKY AVE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE location = '018XX S KOMENSKY AVE' AND month = 'May' AND year = 2018;"
        ],
        "rule_sql": []
    },
    "4923": {
        "db_id": "olympics",
        "question": "In which year did London hold its earliest Olympic game?",
        "ground_truth": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' ORDER BY T3.games_year LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(year) FROM olympic_games WHERE city = 'London';"
        ],
        "rule_sql": []
    },
    "1749": {
        "db_id": "restaurant",
        "question": "Find the percentage of restaurant in Napa Valley.",
        "ground_truth": "SELECT CAST(SUM(IIF(region = 'Napa Valley', 1, 0)) AS REAL) * 100 / COUNT(region) FROM geographic",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM restaurants) AS percentage FROM restaurants WHERE location = 'Napa Valley';"
        ],
        "rule_sql": []
    },
    "8811": {
        "db_id": "food_inspection",
        "question": "What is the name of the establishment with the lowest inspection score of all time?",
        "ground_truth": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = ( SELECT MIN(score) FROM inspections )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM establishments ORDER BY inspection_score ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5668": {
        "db_id": "shipping",
        "question": "What is the address of the driver that delivers the shipment for the customer lives at 7052 Carroll Road, San Diego, California?",
        "ground_truth": "SELECT T3.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.address = '7052 Carroll Road' AND T2.city = 'San Diego' AND T2.state = 'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT driver.address FROM driver JOIN shipment ON driver.driver_id = shipment.driver_id JOIN customer ON shipment.customer_id = customer.customer_id WHERE customer.address = '7052 Carroll Road, San Diego, California';"
        ],
        "rule_sql": []
    },
    "5373": {
        "db_id": "sales",
        "question": "List down all of the product names that were placed by sales person with id 10.",
        "ground_truth": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE sales_person_id = 10;"
        ],
        "rule_sql": []
    },
    "6429": {
        "db_id": "retail_world",
        "question": "What are the products that belong to the beverage category?",
        "ground_truth": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE category = 'food';"
        ],
        "rule_sql": []
    },
    "2058": {
        "db_id": "music_tracker",
        "question": "Please list the titles of all the releases with the tag \"1980s\".",
        "ground_truth": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM releases WHERE tag = '1980s';"
        ],
        "rule_sql": []
    },
    "2787": {
        "db_id": "european_football_1",
        "question": "How many times did the team Werder Bremen win as the away team in matches of the Bundesliga division?",
        "ground_truth": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.AwayTeam = 'Werder Bremen' AND T1.FTR = 'A'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE home_team = 'Werder Bremen' AND division = 'Bundesliga' AND home_score > away_score;"
        ],
        "rule_sql": []
    },
    "5606": {
        "db_id": "shipping",
        "question": "How many pounds did Sue Newell transport during her first shipment?",
        "ground_truth": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell' ORDER BY T1.ship_date ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight FROM shipments WHERE name = 'Sue Newell' ORDER BY shipment_date LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9321": {
        "db_id": "movie_3",
        "question": "What percentage of films are horror films?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM films) AS percentage FROM films WHERE genre = 'Horror';"
        ],
        "rule_sql": []
    },
    "4106": {
        "db_id": "public_review_platform",
        "question": "How many of the users who use a high number of compliments do not have any fans?",
        "ground_truth": "SELECT COUNT(T2.user_id) FROM Users_Compliments AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.number_of_compliments = 'High' AND T2.user_fans = 'None'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM users \nWHERE compliments > 100 \nAND fans IS NULL;"
        ],
        "rule_sql": []
    },
    "7715": {
        "db_id": "hockey",
        "question": "Who was the most clutch player in 1986? Give his full name.",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1986 GROUP BY T2.playerID ORDER BY SUM(T2.GWG) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM players WHERE year = 1986 ORDER BY clutch_score DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4572": {
        "db_id": "mental_health_survey",
        "question": "From 2016 to 2019, how many users each year were asked the question 13?",
        "ground_truth": "SELECT SurveyID, COUNT(UserID) FROM Answer WHERE QuestionID = 13 AND SurveyID BETWEEN 2016 AND 2019 GROUP BY SurveyID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as user_count\nFROM users\nWHERE question_id = 13\nAND year BETWEEN 2016 AND 2019\nGROUP BY year;"
        ],
        "rule_sql": []
    },
    "519": {
        "db_id": "movies_4",
        "question": "List all the keywords with \"christmas\" in them.",
        "ground_truth": "SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM keywords WHERE keyword LIKE 'christmas%';"
        ],
        "rule_sql": []
    },
    "9059": {
        "db_id": "bike_share_1",
        "question": "What is the mean temperature in Fahrenheit on 8/29/2013 for the area where the zip code is 94107?",
        "ground_truth": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', mean_temperature_f, 0)) FROM weather",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(temperature) FROM weather_data WHERE zip_code = '94107' AND date = '2013-08-29';"
        ],
        "rule_sql": []
    },
    "6430": {
        "db_id": "retail_world",
        "question": "What is the description of the category that tofu belongs to?",
        "ground_truth": "SELECT T1.Description FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ProductName = 'tofu'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM categories WHERE category_name = 'tofu';"
        ],
        "rule_sql": []
    },
    "8884": {
        "db_id": "cookbook",
        "question": "How many cups of almonds do you need for a chicken pocket sandwich?",
        "ground_truth": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Chicken Pocket Sandwich' AND T3.name = 'almonds' AND T2.unit = 'cup(s)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cups FROM ingredients WHERE food_item = 'chicken pocket sandwich' AND ingredient = 'almonds';"
        ],
        "rule_sql": []
    },
    "3696": {
        "db_id": "college_completion",
        "question": "From which institute is harder to graduate for a bachelor, Amridge University or Auburn University?",
        "ground_truth": "SELECT chronname FROM institution_details WHERE chronname IN ('Amridge University', 'Auburn University') ORDER BY grad_100_value LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT institute_name, graduation_rate FROM universities WHERE institute_name IN ('Amridge University', 'Auburn University') ORDER BY graduation_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6185": {
        "db_id": "food_inspection_2",
        "question": "Who inspected Jean Samocki and what was the result?",
        "ground_truth": "SELECT T3.first_name, T3.last_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'JEAN SAMOCKI'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspector_name, result FROM inspections WHERE inspected_person = 'Jean Samocki';"
        ],
        "rule_sql": []
    },
    "7770": {
        "db_id": "hockey",
        "question": "Among the coaches who are born in the USA, how many of them used to train the Philadelphia Flyers?",
        "ground_truth": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthCountry = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM coaches \nWHERE birth_country = 'USA' \nAND team = 'Philadelphia Flyers';"
        ],
        "rule_sql": []
    },
    "6808": {
        "db_id": "retails",
        "question": "What is the supply cost of large plated tin?",
        "ground_truth": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'large plated tin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM supplies WHERE size = 'large' AND material = 'plated tin';"
        ],
        "rule_sql": []
    },
    "4462": {
        "db_id": "student_loan",
        "question": "How many students are enrolled in UCLA school?",
        "ground_truth": "SELECT COUNT(name) FROM enrolled WHERE school = 'ucla'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE school = 'UCLA';"
        ],
        "rule_sql": []
    },
    "5590": {
        "db_id": "shipping",
        "question": "What is the average weight of the goods being transported on a single shipment ordered by S K L Enterprises Inc?",
        "ground_truth": "SELECT AVG(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(weight) FROM shipments WHERE customer = 'S K L Enterprises Inc'"
        ],
        "rule_sql": []
    },
    "3408": {
        "db_id": "video_games",
        "question": "Which game has the most sales in Japan?",
        "ground_truth": "SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_name, MAX(japan_sales) FROM games ORDER BY japan_sales DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2575": {
        "db_id": "regional_sales",
        "question": "Which region has the most number of sales team?",
        "ground_truth": "SELECT Region FROM `Sales Team` GROUP BY Region ORDER BY COUNT(DISTINCT `Sales Team`) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region, COUNT(*) as team_count FROM sales_teams GROUP BY region ORDER BY team_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1239": {
        "db_id": "talkingdata",
        "question": "How many of the apps belong in the \"Equity Fund\" category?",
        "ground_truth": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Equity Fund'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM apps WHERE category = 'Equity Fund';"
        ],
        "rule_sql": []
    },
    "2905": {
        "db_id": "professional_basketball",
        "question": "Please list the players who received the \"Most Valuable Player\" award in the NBA league after the year of 1990, along with their IDs.",
        "ground_truth": "SELECT playerID FROM awards_players WHERE year > 1990 AND award = 'Most Valuable Player' AND lgID = 'NBA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_id, player_name FROM nba_players WHERE award = 'Most Valuable Player' AND year > 1990;"
        ],
        "rule_sql": []
    },
    "7018": {
        "db_id": "works_cycles",
        "question": "List all product names and its product line for all purchase order with order quantity of 5000 or more.",
        "ground_truth": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, product_line FROM products WHERE order_quantity >= 5000;"
        ],
        "rule_sql": []
    },
    "2292": {
        "db_id": "movielens",
        "question": "What is the most distinct rated movie with a running time of 0?",
        "ground_truth": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, rating FROM movies WHERE runtime = 0 ORDER BY rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4668": {
        "db_id": "disney",
        "question": "Provide a list of directors from the 1990s.",
        "ground_truth": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2000 GROUP BY T2.director",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies WHERE year = 1990;"
        ],
        "rule_sql": []
    },
    "7090": {
        "db_id": "works_cycles",
        "question": "What company has a Colonial Voice card that expired in March 2005?",
        "ground_truth": "SELECT T2.BusinessEntityID FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.CardType = 'ColonialVoice' AND T1.ExpMonth = 3 AND T1.ExpYear = 2005",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company FROM credit_cards WHERE card_type = 'Colonial Voice' AND expiration_date LIKE '2005-02%';"
        ],
        "rule_sql": []
    },
    "6891": {
        "db_id": "retails",
        "question": "Please list all the modes of shipping for the part \"burnished seashell gainsboro navajo chocolate\".",
        "ground_truth": "SELECT DISTINCT T1.l_shipmode FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shipping_mode FROM parts WHERE part_name = 'burnished seashell gainsboro navajo chocolate';"
        ],
        "rule_sql": []
    },
    "4567": {
        "db_id": "student_loan",
        "question": "How many months did a student in the Air Force miss school the most?",
        "ground_truth": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id, COUNT(month) AS missed_months FROM attendance WHERE status = 'absent' AND branch = 'Air Force' GROUP BY student_id ORDER BY missed_months DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2733": {
        "db_id": "regional_sales",
        "question": "Name the product that was registered in the sales order 'SO - 0005951'.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.OrderNumber = 'SO - 0005951' THEN T1.`Product Name` ELSE NULL END AS T FROM Products T1 INNER JOIN `Sales Orders` T2 ON T2._ProductID = T1.ProductID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE order_id = 'SO - 0005951';"
        ],
        "rule_sql": []
    },
    "6933": {
        "db_id": "ice_hockey_draft",
        "question": "How many players, who were drafted by Anaheim Ducks in 2008, have played for U.S. National U18 Team?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.overallby = 'Anaheim Ducks' AND T1.draftyear = 2008 AND T2.TEAM = 'U.S. National U18 Team'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players p\nJOIN draft d ON p.player_id = d.player_id\nJOIN teams t ON p.team_id = t.team_id\nWHERE d.draft_year = 2008 \nAND d.draft_team = 'Anaheim Ducks'\nAND t.team_name = 'U.S. National U18 Team';"
        ],
        "rule_sql": []
    },
    "3645": {
        "db_id": "authors",
        "question": "How many papers were published by the \"Virtual Reality, IEEE Annual International Symposium\" conference in 2012?",
        "ground_truth": "SELECT COUNT(T2.Id) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Virtual Reality, IEEE Annual International Symposium' AND T2.Year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE conference = 'Virtual Reality, IEEE Annual International Symposium' AND year = 2012;"
        ],
        "rule_sql": []
    },
    "4265": {
        "db_id": "simpson_episodes",
        "question": "How many episodes have won the award for Outstanding Animated Program (Programming Under One Hour) with less than 100 votes? Calculate the percentage of episodes with less than 100 votes out of total episodes.",
        "ground_truth": "SELECT SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(*) AS total_episodes,\n    SUM(CASE WHEN votes < 100 THEN 1 ELSE 0 END) AS episodes_under_100_votes,\n    (SUM(CASE WHEN votes < 100 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage\nFROM episodes\nWHERE award = 'Outstanding Animated Program (Programming Under One Hour)'\nAND votes < 100;"
        ],
        "rule_sql": []
    },
    "2992": {
        "db_id": "shakespeare",
        "question": "What is the long title of the work with the highest number of scenes in act 1?",
        "ground_truth": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT long_title FROM works WHERE act = 1 ORDER BY scene_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8590": {
        "db_id": "chicago_crime",
        "question": "What is the email address to contact the administrator of Central Chicago?",
        "ground_truth": "SELECT email FROM District WHERE district_name = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM administrators WHERE city = 'Chicago' AND name = 'Central';"
        ],
        "rule_sql": []
    },
    "2781": {
        "db_id": "european_football_1",
        "question": "What's the home win ratio of the Bundesliga division in 2021?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Bundesliga'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS total_games, \n       SUM(CASE WHEN home_team_goals > away_team_goals THEN 1 ELSE 0 END) AS home_wins,\n       (SUM(CASE WHEN home_team_goals > away_team_goals THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS home_win_ratio\nFROM matches\nWHERE division = 'Bundesliga' \nAND year = 2021;"
        ],
        "rule_sql": []
    },
    "7283": {
        "db_id": "works_cycles",
        "question": "Among the products that are purchased, how many of them have never received the highest rating?",
        "ground_truth": "SELECT COUNT(T1.ProductID) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND T1.Rating != 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM products p\nWHERE p.product_id IN (\n    SELECT product_id \n    FROM purchases\n) \nAND p.product_id NOT IN (\n    SELECT product_id \n    FROM ratings \n    WHERE rating = (SELECT MAX(rating) FROM ratings)\n)"
        ],
        "rule_sql": []
    },
    "5503": {
        "db_id": "menu",
        "question": "How many percent of Bluefish dishes are located at the center of the menu page?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.xpos BETWEEN 0.25 AND 0.75 AND T2.ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name LIKE '%BLuefish%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100 / (SELECT COUNT(*) FROM dishes WHERE dish_name = 'Bluefish')) AS percentage\nFROM dishes \nWHERE dish_name = 'Bluefish' AND menu_position = 'center';"
        ],
        "rule_sql": []
    },
    "5296": {
        "db_id": "beer_factory",
        "question": "Among the root beers sold in bottles, how many are sold at the location 38.559615, -121.42243?",
        "ground_truth": "SELECT COUNT(T4.BrandID) FROM `transaction` AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID INNER JOIN rootbeer AS T4 ON T1.RootBeerID = T4.RootBeerID WHERE T2.Latitude = 38.559615 AND T2.Longitude = -121.42243 AND T4.ContainerType = 'Bottle'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE product_type = 'root beer' AND container = 'bottle' AND latitude = 38.559615 AND longitude = -121.42243;"
        ],
        "rule_sql": []
    },
    "2778": {
        "db_id": "european_football_1",
        "question": "List the number of games that ended up with 5-0 in Greece.",
        "ground_truth": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' AND T1.FTHG = 5 AND T1.FTAG = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE home_score = 5 AND away_score = 0 AND country = 'Greece';"
        ],
        "rule_sql": []
    },
    "2922": {
        "db_id": "professional_basketball",
        "question": "What is the difference in the average age of players when they are drafted in the ABA vs when they are drafted in the NBA between the years 1970 and 1970?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.lgID = 'ABA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'ABA', 1, 0)) - CAST(SUM(IIF(T2.lgID = 'NBA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'NBA', 1, 0)) FROM draft AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T1.draftYear BETWEEN 1970 AND 1970",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT AVG(age) FROM players WHERE league = 'ABA' AND year = 1970) - \n    (SELECT AVG(age) FROM players WHERE league = 'NBA' AND year = 1970) AS age_difference;"
        ],
        "rule_sql": []
    },
    "8987": {
        "db_id": "human_resources",
        "question": "Write down the full name, performance status and located city of the employee who's social security number is \"767-74-7373\".",
        "ground_truth": "SELECT T1.firstname, T1.lastname, T2.state, T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.ssn = '767-74-7373'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name, performance_status, city FROM employees WHERE social_security_number = '767-74-7373';"
        ],
        "rule_sql": []
    },
    "1853": {
        "db_id": "soccer_2016",
        "question": "List the names of the first andthe second teams that played a match with the point of the winning margin lower than the 30% of the average winning margin of the matches held in 2011.",
        "ground_truth": "SELECT DISTINCT CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T2.Team_Name END, CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T3.Team_Name END FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T1.Match_Date LIKE '2011%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t1.name, t2.name\nFROM matches m\nJOIN teams t1 ON m.team1_id = t1.id\nJOIN teams t2 ON m.team2_id = t2.id\nWHERE m.winning_margin < (SELECT AVG(winning_margin) * 0.3 FROM matches WHERE year = 2011)\nLIMIT 2;"
        ],
        "rule_sql": []
    },
    "5804": {
        "db_id": "language_corpus",
        "question": "How many times of repetition does the word \"exemple\" show in the Catalan language?",
        "ground_truth": "SELECT T2.occurrences FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'exemple' AND T2.lid = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM words WHERE language = 'Catalan' AND word = 'exemple';"
        ],
        "rule_sql": []
    },
    "178": {
        "db_id": "book_publishing_company",
        "question": "Name the title and publisher for title ID BU 2075. Provide all the royalty percentage for all ranges.",
        "ground_truth": "SELECT T1.title, T3.pub_name, T2.lorange, T2.hirange, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T1.title_id = 'BU2075'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, publisher, royalty FROM titles WHERE title_id = 'BU 2075';"
        ],
        "rule_sql": []
    },
    "8824": {
        "db_id": "food_inspection",
        "question": "How many eateries had low risk for violation with unpermitted food facility description?",
        "ground_truth": "SELECT COUNT(DISTINCT business_id) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM eateries WHERE risk = 'low' AND description = 'unpermitted food facility';"
        ],
        "rule_sql": []
    },
    "6034": {
        "db_id": "books",
        "question": "What is the email of the customers who place their orders with priority method?",
        "ground_truth": "SELECT T1.email FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T3.method_name = 'Priority'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM customers WHERE priority = 'method';"
        ],
        "rule_sql": []
    },
    "938": {
        "db_id": "cs_semester",
        "question": "Of courses with 3 credit, how many students have GPA of 3.2?",
        "ground_truth": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.credit = 3 AND T1.gpa = 3.2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE GPA = 3.2 AND credits = 3;"
        ],
        "rule_sql": []
    },
    "8722": {
        "db_id": "chicago_crime",
        "question": "How many violation of laws are there where no arrest has been made?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.description LIKE '%The violation of laws%' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.Arrest = 'FALSE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM violations WHERE arrest_made = 'yes';"
        ],
        "rule_sql": []
    },
    "9302": {
        "db_id": "movie_3",
        "question": "How many films in English are for adults only?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.rating = 'NC-17'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE language = 'English' AND rating = 'R'"
        ],
        "rule_sql": []
    },
    "2082": {
        "db_id": "music_tracker",
        "question": "In 1980, how many singles were released by sugar daddy?",
        "ground_truth": "SELECT COUNT(releaseType) FROM torrents WHERE artist LIKE 'sugar daddy' AND releaseType LIKE 'Single' AND groupYear = 1980",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM singles WHERE artist = 'sugar daddy' AND year = 1980;"
        ],
        "rule_sql": []
    },
    "7013": {
        "db_id": "works_cycles",
        "question": "Calculate the profit of each products. List all products with more than $100 in profit.",
        "ground_truth": "SELECT DISTINCT Name FROM Product WHERE ListPrice - StandardCost > 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, (price - cost) AS profit FROM products WHERE profit > 100 ORDER BY profit DESC;"
        ],
        "rule_sql": []
    },
    "3456": {
        "db_id": "video_games",
        "question": "How many games were published by Activision?",
        "ground_truth": "SELECT COUNT(DISTINCT T3.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T2.publisher_name = 'Activision'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE publisher = 'Electronic Arts';"
        ],
        "rule_sql": []
    },
    "9422": {
        "db_id": "movie_3",
        "question": "What is the total amount of money Mary Smith has spent on film rentals?",
        "ground_truth": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(payment.amount) \nFROM payment \nJOIN customer ON payment.customer_id = customer.customer_id \nWHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith'"
        ],
        "rule_sql": []
    },
    "8711": {
        "db_id": "chicago_crime",
        "question": "How many crime against property are there?",
        "ground_truth": "SELECT COUNT(*) AS cnt FROM FBI_Code WHERE crime_against = 'Property'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE crime_type = 'property'"
        ],
        "rule_sql": []
    },
    "8787": {
        "db_id": "food_inspection",
        "question": "Which restaurant has the highest total number of high risk violations?",
        "ground_truth": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT restaurant_name, COUNT(*) as violation_count \nFROM restaurant_violations \nWHERE violation_type = 'low risk' \nGROUP BY restaurant_name \nORDER BY violation_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1833": {
        "db_id": "soccer_2016",
        "question": "Which team has the highest number of losses of all time?",
        "ground_truth": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN ( SELECT COUNT(Team_1) AS a, Team_1 FROM Match WHERE Team_1 <> Match_Winner GROUP BY Team_1 UNION SELECT COUNT(Team_2) AS a, Team_2 FROM Match WHERE Team_2 <> Match_Winner GROUP BY Team_2 ORDER BY a DESC LIMIT 1 ) AS T2 ON T1.Team_Id = T2.Team_1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, MAX(wins) as highest_losses FROM teams GROUP BY team_name ORDER BY highest_losses DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7530": {
        "db_id": "image_and_language",
        "question": "What attributes are used to describe the wall on image no. 27.",
        "ground_truth": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'wall' AND T1.IMG_ID = 27 GROUP BY T4.ATT_CLASS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM walls WHERE image_id = 27;"
        ],
        "rule_sql": []
    },
    "1503": {
        "db_id": "synthea",
        "question": "What is the start date of the care plan of the patient whose maiden name is Adams?",
        "ground_truth": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.maiden = 'Adams'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_date FROM care_plans WHERE maiden_name = 'Adams';"
        ],
        "rule_sql": []
    },
    "5899": {
        "db_id": "airline",
        "question": "Provide the air carrier description of the flight with the highest actual elapsed time.",
        "ground_truth": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ACTUAL_ELAPSED_TIME DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT air_carrier_description FROM flights ORDER BY actual_elapsed_time DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3577": {
        "db_id": "authors",
        "question": "Indicate the name of all the journals published in the paper database in the year 2001.",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year = 2001 AND T1.ConferenceId > 0 AND T1.JournalId > 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT journal_name FROM papers WHERE year = 2001;"
        ],
        "rule_sql": []
    },
    "6984": {
        "db_id": "ice_hockey_draft",
        "question": "Calculate the average height in centimeter of all players who played in Acadie-Bathurst Titan during regular season.",
        "ground_truth": "SELECT CAST(SUM(T1.height_in_cm) AS REAL) / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height INNER JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T3.TEAM = 'Acadie-Bathurst Titan' AND T3.GAMETYPE = 'Regular Season'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM players WHERE team = 'Acadie-Bathurst Titan' AND season_type = 'regular';"
        ],
        "rule_sql": []
    },
    "1301": {
        "db_id": "law_episode",
        "question": "What is the full place of birth of Rene Chenevert Balcer?",
        "ground_truth": "SELECT birth_place, birth_region FROM Person WHERE birth_name = 'Rene Chenevert Balcer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_place FROM people WHERE first_name = 'Rene' AND last_name = 'Chenevert Balcer';"
        ],
        "rule_sql": []
    },
    "7553": {
        "db_id": "image_and_language",
        "question": "What is the percentage of \"surface\" object samples in image No.2654?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 2654",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM samples WHERE image_id = 2654)) AS percentage FROM samples WHERE image_id = 2654 AND object_type = 'surface';"
        ],
        "rule_sql": []
    },
    "7846": {
        "db_id": "world",
        "question": "Give the cities and district names that belong to the country with Hajastan as its local name.",
        "ground_truth": "SELECT T2.Name, T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = 'Hajastan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city.name, district.name \nFROM city \nJOIN district ON city.district_id = district.id \nJOIN country ON district.country_id = country.id \nWHERE country.local_name = 'Hajastan';"
        ],
        "rule_sql": []
    },
    "1281": {
        "db_id": "law_episode",
        "question": "Among the episodes that were aired in 1998, how many won an International Monitor Awards?",
        "ground_truth": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE year = 1998 AND awards LIKE '%International Monitor Awards%';"
        ],
        "rule_sql": []
    },
    "5205": {
        "db_id": "address",
        "question": "What is the elevation of the city with the alias East Longmeadow?",
        "ground_truth": "SELECT T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'East Longmeadow'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT elevation FROM cities WHERE alias = 'East Longmeadow';"
        ],
        "rule_sql": []
    },
    "4236": {
        "db_id": "simpson_episodes",
        "question": "What is the birth name of Al Jean and his role in creating The simpson 20s: Season 20?",
        "ground_truth": "SELECT DISTINCT T1.birth_name, T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.name = 'Al Jean';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_name, role FROM creators WHERE first_name = 'Al' AND last_name = 'Jean' AND show_title = 'The simpson 20s: Season 20';"
        ],
        "rule_sql": []
    },
    "5388": {
        "db_id": "sales",
        "question": "Calculate the total price for products from id 400 to 500.",
        "ground_truth": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID BETWEEN 400 AND 500",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price) FROM products WHERE id BETWEEN 400 AND 500;"
        ],
        "rule_sql": []
    },
    "5658": {
        "db_id": "shipping",
        "question": "How many shipments were shipped to the least populated city in California?",
        "ground_truth": "SELECT COUNT(T3.city_name) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.state = 'California' ORDER BY T3.population ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM shipments s\nJOIN cities c ON s.city_id = c.id\nWHERE c.state = 'California'\nORDER BY c.population ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5578": {
        "db_id": "shipping",
        "question": "How many shipments were ordered by S K L Enterprises Inc in 2017?",
        "ground_truth": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND STRFTIME('%Y', T2.ship_date) = '2017'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE customer_name = 'S K L Enterprises Inc' AND year = 2017;"
        ],
        "rule_sql": []
    },
    "13": {
        "db_id": "movie_platform",
        "question": "For movie titled 'Welcome to the Dollhouse', how many percentage of the ratings were rated with highest score.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Welcome to the Dollhouse'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM ratings WHERE movie_id = (SELECT id FROM movies WHERE title = 'Welcome to the Dollhouse'))) AS percentage\nFROM ratings\nWHERE movie_id = (SELECT id FROM movies WHERE title = 'Welcome to the Dollhouse')\nAND rating = (SELECT MAX(rating) FROM ratings WHERE movie_id = (SELECT id FROM movies WHERE title = 'Welcome to the Dollhouse'));"
        ],
        "rule_sql": []
    },
    "40": {
        "db_id": "movie_platform",
        "question": "How many directors have directed atleast 10 movies between 1960 to 1985? Indicate the name of the movie in those years of each director that received the highest amount of 5 rating score.",
        "ground_truth": "SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name HAVING COUNT(T2.movie_id) > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.name, m.title, COUNT(*) as movie_count\nFROM directors d\nJOIN movies m ON d.director_id = m.director_id\nWHERE m.year BETWEEN 1960 AND 1985\nGROUP BY d.director_id\nHAVING COUNT(*) >= 10\nORDER BY movie_count DESC;"
        ],
        "rule_sql": []
    },
    "7400": {
        "db_id": "works_cycles",
        "question": "Please list the top 3 discounts with the highest discount percentage and fall under the reseller category.",
        "ground_truth": "SELECT Description, DiscountPct FROM SpecialOffer WHERE Category = 'Reseller' ORDER BY DiscountPct DESC LIMIT 0, 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT discount_percentage, category FROM discounts WHERE category = 'reseller' ORDER BY discount_percentage ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "8913": {
        "db_id": "cookbook",
        "question": "List the ingredients which measure in slices.",
        "ground_truth": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.unit = 'slice(s)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM ingredients WHERE measure = 'slice';"
        ],
        "rule_sql": []
    },
    "2381": {
        "db_id": "superstore",
        "question": "What are the total sales of the accumulated orders of Hon Valutask Swivel Chairs in the West region?",
        "ground_truth": "SELECT SUM(T1.Sales) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Hon Valutask Swivel Chairs' AND T1.Region = 'West'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity * price) AS total_sales\nFROM orders o\nJOIN products p ON o.product_id = p.product_id\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE p.product_name = 'Hon Valutask Swivel Chairs'\nAND c.region = 'West'\nGROUP BY p.product_name, c.region"
        ],
        "rule_sql": []
    },
    "479": {
        "db_id": "movies_4",
        "question": "The movie 'Gojira ni-sen mireniamu' is from which country?",
        "ground_truth": "SELECT T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T1.title = 'Gojira ni-sen mireniamu'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM movies WHERE title = 'Gojira ni-sen mireniamu';"
        ],
        "rule_sql": []
    },
    "9230": {
        "db_id": "movie_3",
        "question": "Give the title of the film starred by Liza Bergman with the highest replacement cost.",
        "ground_truth": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Liza' AND T1.last_name = 'Bergman' ORDER BY replacement_cost DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title \nFROM film \nJOIN film_actor ON film.film_id = film_actor.film_id \nJOIN actor ON film_actor.actor_id = actor.actor_id \nWHERE actor.first_name = 'Liza' AND actor.last_name = 'Bergman' \nORDER BY replacement_cost ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6461": {
        "db_id": "retail_world",
        "question": "List down the customer ids who placed order with Michael Suyama.",
        "ground_truth": "SELECT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM orders WHERE employee_name = 'Michael Suyama';"
        ],
        "rule_sql": []
    },
    "443": {
        "db_id": "movies_4",
        "question": "What is the name of the production company that made the most movies?",
        "ground_truth": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, COUNT(*) as movie_count \nFROM production_companies \nGROUP BY company_name \nORDER BY movie_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9288": {
        "db_id": "movie_3",
        "question": "Please list the full names of any three inactive customers.",
        "ground_truth": "SELECT first_name, last_name FROM customer WHERE active = 0 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE status = 'active' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "4033": {
        "db_id": "public_review_platform",
        "question": "Among the users who received high compliments from other users, which users joined Yelp earliest?",
        "ground_truth": "SELECT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_yelping_since_year = ( SELECT MIN(user_yelping_since_year) FROM Users )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.user_id, u.name, u.yelping_since\nFROM users u\nJOIN compliments c ON u.user_id = c.user_id\nWHERE c.compliment_count > 100\nORDER BY u.yelping_since ASC\nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "8749": {
        "db_id": "chicago_crime",
        "question": "List down the district's commander associated with the crime that happened at the yard and has a beat of 532.",
        "ground_truth": "SELECT T2.address, T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.location_description = 'YARD' AND T1.beat = 532",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT commander FROM districts WHERE location = 'yard' AND beat = 532;"
        ],
        "rule_sql": []
    },
    "2194": {
        "db_id": "world_development_indicators",
        "question": "What country has the latest trade data with a series code of \"SP.DYN.CDRT.IN\n\"? List the table name of the country.",
        "ground_truth": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorCode = 'SP.DYN.CDRT.IN'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM trade_data WHERE series_code = 'SP.DYN.CDRT.IN' ORDER BY trade_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4992": {
        "db_id": "olympics",
        "question": "What are the names of the cities where Carl Lewis Borack competed?",
        "ground_truth": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'Carl Lewis Borack'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM competitions WHERE athlete_name = 'Carl Lewis Borack';"
        ],
        "rule_sql": []
    },
    "7452": {
        "db_id": "works_cycles",
        "question": "List all the products with lower than average cost.",
        "ground_truth": "SELECT DISTINCT T2.ProductID FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost < ( SELECT SUM(StandardCost) / COUNT(ProductID) FROM Product )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE cost > (SELECT AVG(cost) FROM products);"
        ],
        "rule_sql": []
    },
    "4154": {
        "db_id": "citeseer",
        "question": "How many papers were cited by schmidt99advanced cited word3555?",
        "ground_truth": "SELECT COUNT(T2.paper_id) FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'schmidt99advanced' AND T2.word_cited_id = 'word3555'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM citations WHERE citing_paper_id = 'schmidt99advanced' AND cited_paper_id = 'word3555';"
        ],
        "rule_sql": []
    },
    "326": {
        "db_id": "retail_complains",
        "question": "What is the birth date of the youngest client?",
        "ground_truth": "SELECT day, month, year FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(birth_date) FROM clients;"
        ],
        "rule_sql": []
    },
    "4702": {
        "db_id": "disney",
        "question": "Provide the director's name of Wreck-It Ralph movie.",
        "ground_truth": "SELECT director FROM director WHERE name = 'Wreck-It Ralph'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE director = 'Wreck-It Ralph';"
        ],
        "rule_sql": []
    },
    "208": {
        "db_id": "book_publishing_company",
        "question": "Among the publishers in the USA, how many of them have published books that are over $15?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.pub_id) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA' AND T1.price > 15",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM publishers WHERE country = 'USA' AND price > 15;"
        ],
        "rule_sql": []
    },
    "3942": {
        "db_id": "public_review_platform",
        "question": "List the categories of all active businesses that were not in Arizona.",
        "ground_truth": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state NOT LIKE 'AZ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM businesses WHERE status = 'active' AND state != 'Arizona';"
        ],
        "rule_sql": []
    },
    "4277": {
        "db_id": "simpson_episodes",
        "question": "What are the keywords of the episode \"Take My Life, Please\"?",
        "ground_truth": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keyword FROM episodes WHERE title = 'Take My Life, Please';"
        ],
        "rule_sql": []
    },
    "5050": {
        "db_id": "olympics",
        "question": "Which sport did John Aalberg participate in?",
        "ground_truth": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'John Aalberg'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sport FROM athletes WHERE name = 'John Aalberg';"
        ],
        "rule_sql": []
    },
    "9370": {
        "db_id": "movie_3",
        "question": "Name the cast members of the movie 'African Egg'.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'AFRICAN EGG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM movies WHERE title = 'African Egg'"
        ],
        "rule_sql": []
    },
    "9209": {
        "db_id": "movie_3",
        "question": "List down the film titles performed by Emily Dee.",
        "ground_truth": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Emily' AND T1.last_name = 'Dee'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE actor_name = 'Emily Dee'"
        ],
        "rule_sql": []
    },
    "8091": {
        "db_id": "university",
        "question": "For the university id 268, show its number of students in 2013.",
        "ground_truth": "SELECT num_students FROM university_year WHERE university_id = 268 AND year = 2013",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university_id = 268 AND year = 2013;"
        ],
        "rule_sql": []
    },
    "3738": {
        "db_id": "college_completion",
        "question": "List the site of institution within the student count of 500 to 1000 that has the recent year of data release.",
        "ground_truth": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count BETWEEN 500 AND 1000 AND T2.year = ( SELECT MAX(T2.year) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT site FROM institution WHERE student_count BETWEEN 500 AND 1000 ORDER BY year_of_data_release DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8630": {
        "db_id": "chicago_crime",
        "question": "What is the precise location or coordinate where most of the robberies in Rogers Park occurred?",
        "ground_truth": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Rogers Park' AND T3.title = 'Robbery' AND T3.fbi_code_no = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude, COUNT(*) as robbery_count \nFROM crimes \nWHERE neighborhood = 'Rogers Park' AND crime_type = 'robbery' \nGROUP BY latitude, longitude \nORDER BY robbery_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3812": {
        "db_id": "public_review_platform",
        "question": "How many active businesses are there in Phoenix?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Phoenix';"
        ],
        "rule_sql": []
    },
    "7869": {
        "db_id": "world",
        "question": "What is the capital city of the country with largest population?",
        "ground_truth": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT capital FROM countries ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4414": {
        "db_id": "student_loan",
        "question": "How many female students joined a marines and air force organization?",
        "ground_truth": "SELECT COUNT(name) FROM enlist WHERE organ IN ('marines', 'air_force') AND name NOT IN ( SELECT name FROM male )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'male' AND (organization = 'marines' OR organization = 'air force')"
        ],
        "rule_sql": []
    },
    "4227": {
        "db_id": "simpson_episodes",
        "question": "Describe the award title, person and character name of the award ID 326.",
        "ground_truth": "SELECT DISTINCT T1.award, T1.person, T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award_id = 326;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT award_title, person_name, character_name FROM awards WHERE award_id = 326;"
        ],
        "rule_sql": []
    },
    "4686": {
        "db_id": "disney",
        "question": "List the movie titles and associated songs directed by Ron Clements.",
        "ground_truth": "SELECT T1.movie_title, T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ron Clements'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, s.song_name \nFROM movies m \nJOIN songs s ON m.movie_id = s.movie_id \nWHERE m.director = 'Ron Clements'"
        ],
        "rule_sql": []
    },
    "7840": {
        "db_id": "world",
        "question": "Among the countries that officially use the English language, what country has the highest capital?",
        "ground_truth": "SELECT T1.Code FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' ORDER BY T1.Capital DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM countries WHERE official_language = 'English' ORDER BY capital DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2438": {
        "db_id": "superstore",
        "question": "Indicate the profit of product Sauder Camden County Barrister Bookcase, Planked Cherry Finish.",
        "ground_truth": "SELECT DISTINCT T1.Profit FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM products WHERE product_name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish';"
        ],
        "rule_sql": []
    },
    "2913": {
        "db_id": "professional_basketball",
        "question": "Among the NBA All-star players in 1996 season , which have more than 70% free throw rate? Please give their player id.",
        "ground_truth": "SELECT playerID FROM player_allstar WHERE season_id = 1996 AND CAST(ft_made AS REAL) * 100 / ft_attempted > 70",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_id FROM nba_all_stars_1996 WHERE free_throw_percentage > 70;"
        ],
        "rule_sql": []
    },
    "7556": {
        "db_id": "image_and_language",
        "question": "Calculate the percentage of \"airplane\" object class in the table.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OBJ_CLASS) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100 / (SELECT COUNT(*) FROM table WHERE object_class = 'airplane')) AS percentage FROM table;"
        ],
        "rule_sql": []
    },
    "5184": {
        "db_id": "address",
        "question": "What is the code of the area with the largest Asian population?",
        "ground_truth": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.asian_population ORDER BY T2.asian_population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT area_code FROM areas ORDER BY asian_population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7020": {
        "db_id": "works_cycles",
        "question": "Among the low quality product, which product has the highest line total? List the product name and its line total?",
        "ground_truth": "SELECT T1.Name, T2.LineTotal FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE Class = 'L' ORDER BY OrderQty * UnitPrice DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, MAX(line_total) \nFROM products \nWHERE quality = 'low' \nGROUP BY product_name \nORDER BY line_total DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9204": {
        "db_id": "movie_3",
        "question": "Calculate the average payment amount per customer.",
        "ground_truth": "SELECT AVG(amount) FROM payment GROUP BY customer_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, AVG(amount) FROM payments GROUP BY customer_id HAVING amount > 100"
        ],
        "rule_sql": []
    },
    "4609": {
        "db_id": "mental_health_survey",
        "question": "How many users answered the question \"Overall, how much importance does your employer place on physical health?\"?",
        "ground_truth": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Overall, how much importance does your employer place on physical health?'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE question = 'Overall, how much importance does your employer place on physical health?'"
        ],
        "rule_sql": []
    },
    "2613": {
        "db_id": "regional_sales",
        "question": "List out the name of products which have been applied 10% discount.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT IIF(T1.`Discount Applied` = 0.1, T2.`Product Name`, NULL) AS T FROM `Sales Orders` T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE discount = 10;"
        ],
        "rule_sql": []
    },
    "4093": {
        "db_id": "public_review_platform",
        "question": "List down the closing day of businesses located at SC State.",
        "ground_truth": "SELECT T3.day_id - T2.day_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.state = 'SC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name, closing_day FROM businesses WHERE state = 'SC State' ORDER BY closing_day;"
        ],
        "rule_sql": []
    },
    "5689": {
        "db_id": "language_corpus",
        "question": "How many Catalan language wikipedia pages have between 1000 to 2000 number of different words?",
        "ground_truth": "SELECT COUNT(pid) FROM pages WHERE words BETWEEN 1000 AND 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM wikipedia_pages WHERE language = 'Catalan' AND word_count BETWEEN 1000 AND 2000;"
        ],
        "rule_sql": []
    },
    "9131": {
        "db_id": "movie_3",
        "question": "Among the films that the customer RUTH MARTINEZ has rented, what is the title of the one with the highest replacement cost?",
        "ground_truth": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' ORDER BY T4.replacement_cost DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT f.title \nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ'\nORDER BY f.replacement_cost ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2814": {
        "db_id": "professional_basketball",
        "question": "Of all the All-star players who played in the Eastern Conference for no more than 5 minutes, how many went to Illinois College?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East' AND T2.minutes <= 5 AND T1.college = 'Illinois'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM AllStarPlayers \nWHERE conference = 'Eastern' \nAND minutes_played <= 5 \nAND college = 'Illinois College';"
        ],
        "rule_sql": []
    },
    "2507": {
        "db_id": "genes",
        "question": "List all genes whose interaction is with genes located in the nucleus in which it is positively correlated.",
        "ground_truth": "SELECT T1.GeneID FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Localization = 'nucleus'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gene_name FROM genes WHERE interaction_location = 'nucleus' AND correlation_type = 'positive';"
        ],
        "rule_sql": []
    },
    "3835": {
        "db_id": "public_review_platform",
        "question": "Please list any two user numbers that have an \"Uber\" number of cute compliments.",
        "ground_truth": "SELECT T1.user_id FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'Uber' AND T2.compliment_type LIKE 'cute' LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_number FROM users WHERE compliment_type = 'Uber' AND cute_compliments > 0 LIMIT 2;"
        ],
        "rule_sql": []
    },
    "1689": {
        "db_id": "restaurant",
        "question": "Identify all the restaurants in Yolo County by their label.",
        "ground_truth": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM restaurants WHERE county = 'Yolo';"
        ],
        "rule_sql": []
    },
    "4650": {
        "db_id": "disney",
        "question": "Who is the most productive director?",
        "ground_truth": "SELECT director FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director, COUNT(*) as movie_count FROM movies GROUP BY director ORDER BY movie_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1235": {
        "db_id": "talkingdata",
        "question": "What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016?",
        "ground_truth": "SELECT SUM(IIF(T1.`group` = 'F27-28', 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE SUBSTR(T2.timestamp, 1, 10) = '2016-05-03'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT CASE WHEN age_group = 'F27-28' AND event_date = '2016-05-03' THEN user_id END) * 100.0 / \n     COUNT(DISTINCT CASE WHEN age_group = 'F27-28' THEN user_id END)) AS percentage\nFROM events\nWHERE event_date = '2016-05-03';"
        ],
        "rule_sql": []
    },
    "7473": {
        "db_id": "image_and_language",
        "question": "How many object samples are there in image no.1?",
        "ground_truth": "SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM images WHERE image_id = 1;"
        ],
        "rule_sql": []
    },
    "5830": {
        "db_id": "airline",
        "question": "Please list the flight numbers of all the flights operated by American Airlines Inc. that were scheduled to depart from John F. Kennedy International.",
        "ground_truth": "SELECT T2.OP_CARRIER_FL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.FL_DATE = '2018/8/1'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT flight_number FROM flights WHERE airline = 'American Airlines Inc.' AND departure_airport = 'John F. Kennedy International'"
        ],
        "rule_sql": []
    },
    "6814": {
        "db_id": "retails",
        "question": "How many customers from the furniture segments come from Iraq?",
        "ground_truth": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'FURNITURE' AND T2.n_name = 'IRAQ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE segment = 'Furniture' AND country = 'Iraq';"
        ],
        "rule_sql": []
    },
    "8697": {
        "db_id": "chicago_crime",
        "question": "How many weapons violation crimes have occurred in the Calumet district?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.district_name = 'Calumet' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'WEAPONS VIOLATION'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE crime_type = 'weapons violation' AND district = 'Calumet';"
        ],
        "rule_sql": []
    },
    "2754": {
        "db_id": "european_football_1",
        "question": "What was the difference in home team and away team win percentages across all divisions in 2010?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) - CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) DIFFERENCE FROM matchs WHERE season = 2010",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    division,\n    (SUM(CASE WHEN home_score > away_score THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS home_win_percentage,\n    (SUM(CASE WHEN away_score > home_score THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS away_win_percentage,\n    ABS((SUM(CASE WHEN home_score > away_score THEN 1 ELSE 0 END) / COUNT(*)) - (SUM(CASE WHEN away_score > home_score THEN 1 ELSE 0 END) / COUNT(*))) * 100 AS win_percentage_difference\nFROM games\nWHERE season = 2010\nGROUP BY division;"
        ],
        "rule_sql": []
    },
    "8360": {
        "db_id": "mondial_geo",
        "question": "What kind of political system is in place in the country with the highest inflation rate?",
        "ground_truth": "SELECT T1.Government FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country ORDER BY T2.Inflation DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT political_system FROM countries ORDER BY inflation_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2725": {
        "db_id": "regional_sales",
        "question": "In 2019, how many orders were shipped by the sales team with the highest number of orders in the said year? Provide the name of the sales team.",
        "ground_truth": "SELECT COUNT(T1.OrderNumber), T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.`Sales Team` ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales_team, COUNT(*) as order_count\nFROM orders\nWHERE YEAR(order_date) = 2019\nGROUP BY sales_team\nORDER BY order_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "527": {
        "db_id": "movies_4",
        "question": "What is the third least common genre?",
        "ground_truth": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre, COUNT(*) as count FROM movies GROUP BY genre ORDER BY count ASC LIMIT 1 OFFSET 2;"
        ],
        "rule_sql": []
    },
    "3130": {
        "db_id": "cars",
        "question": "How many models of Ford Maverick were produced?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM models WHERE manufacturer = 'Ford' AND name = 'Maverick';"
        ],
        "rule_sql": []
    },
    "1431": {
        "db_id": "synthea",
        "question": "Among the immunizations in 2017, calculate the percentage of patients who received the Influenza seasonal injectable preservative free. Among them, how many patients are English?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN i.immunization_code = 'Influenza seasonal injectable preservative free' THEN 1 END) * 100.0 / COUNT(*)) AS percentage,\n    COUNT(CASE WHEN p.language = 'English' THEN 1 END) AS english_patients\nFROM immunizations i\nJOIN patients p ON i.patient_id = p.patient_id\nWHERE strftime('%Y', i.date) = '2017';"
        ],
        "rule_sql": []
    },
    "9344": {
        "db_id": "movie_3",
        "question": "What are the last updated date for English film titles that were released in 2006?",
        "ground_truth": "SELECT DISTINCT T1.last_update FROM film AS T1 INNER JOIN `language` AS T2 ON T1.language_id = T2.language_id WHERE T2.`name` = 'English' AND T1.release_year = 2006",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, last_updated FROM films WHERE language = 'English' AND release_year = 2006 ORDER BY last_updated DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3910": {
        "db_id": "public_review_platform",
        "question": "What is the yearly average review done by user ID 3?",
        "ground_truth": "SELECT COUNT(review_stars) / (strftime('%Y', 'now') - T1.user_yelping_since_year) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(review_score) FROM reviews WHERE user_id = 3 GROUP BY YEAR(review_date);"
        ],
        "rule_sql": []
    },
    "9161": {
        "db_id": "movie_3",
        "question": "How many films are in English?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE language = 'English';"
        ],
        "rule_sql": []
    },
    "8461": {
        "db_id": "mondial_geo",
        "question": "Name all the organisations that were established from 1970 to 1980.",
        "ground_truth": "SELECT Name FROM organization WHERE STRFTIME('%Y', Established) BETWEEN '1970' AND '1980'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM organisations WHERE established >= 1970 AND established <= 1980;"
        ],
        "rule_sql": []
    },
    "1562": {
        "db_id": "car_retails",
        "question": "How many orders which expected profits greater than 100?",
        "ground_truth": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.MSRP - T2.buyPrice > 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE profit > 100;"
        ],
        "rule_sql": []
    },
    "7345": {
        "db_id": "works_cycles",
        "question": "How many of the approved documents are confidential?",
        "ground_truth": "SELECT COUNT(DocumentNode) FROM Document WHERE Status = 2 AND DocumentSummary IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM documents WHERE status = 'approved' AND confidential = 'yes';"
        ],
        "rule_sql": []
    },
    "7934": {
        "db_id": "music_platform_2",
        "question": "What is the average rating for the podcast that is most reviewed?",
        "ground_truth": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.podcast_id ORDER BY COUNT(T2.content) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM reviews WHERE podcast_id = (SELECT podcast_id FROM reviews GROUP BY podcast_id ORDER BY COUNT(*) DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "6766": {
        "db_id": "retails",
        "question": "Find the supply key of the top ten suppliers with the most account balance, and list the supply key along with the account balance in descending order of account balance.",
        "ground_truth": "SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT supply_key, account_balance FROM suppliers ORDER BY account_balance ASC LIMIT 10;"
        ],
        "rule_sql": []
    },
    "7011": {
        "db_id": "works_cycles",
        "question": "Provide details of review from reviewer whose name begin with letter 'J'. State the product ID, rating and comments.",
        "ground_truth": "SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_id, rating, comments FROM reviews WHERE reviewer_name LIKE 'J%';"
        ],
        "rule_sql": []
    },
    "8305": {
        "db_id": "mondial_geo",
        "question": "How many volcanic mountains are there in countries whose population is no more than 5000000?",
        "ground_truth": "SELECT COUNT(DISTINCT T3.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcanic' AND T1.Population <= 5000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mountains m JOIN countries c ON m.country_id = c.id WHERE m.type = 'volcanic' AND c.population <= 5000000;"
        ],
        "rule_sql": []
    },
    "7816": {
        "db_id": "hockey",
        "question": "Who is the shortest player and state the team ID of that player from 1925 to 1936.",
        "ground_truth": "SELECT T2.playerID, T2.tmID FROM ( SELECT playerID FROM Master WHERE height IS NOT NULL ORDER BY height ASC LIMIT 1 ) AS T1 INNER JOIN ( SELECT DISTINCT playerID, tmID FROM Scoring WHERE year BETWEEN 1925 AND 1936 ) AS T2 ON T1.playerID = T2.playerID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, teamID FROM players WHERE height = (SELECT MIN(height) FROM players) AND year BETWEEN 1925 AND 1936;"
        ],
        "rule_sql": []
    },
    "389": {
        "db_id": "retail_complains",
        "question": "From 2012 to 2015, how many complaints were submitted via email from female clients?",
        "ground_truth": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) BETWEEN '2012' AND '2015' AND T2.`Submitted via` = 'Email' AND T1.sex = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM complaints WHERE year BETWEEN 2012 AND 2015 AND submission_method = 'email' AND client_gender = 'female';"
        ],
        "rule_sql": []
    },
    "5749": {
        "db_id": "language_corpus",
        "question": "Which word has the most repetitions in the Catalan language?",
        "ground_truth": "SELECT T2.word FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T1.occurrences = ( SELECT MAX(occurrences) FROM langs_words )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word, COUNT(*) as repetitions FROM catalan_words GROUP BY word ORDER BY repetitions DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3191": {
        "db_id": "donor",
        "question": "How many donors from New Jersey have made a donation for an honoree?",
        "ground_truth": "SELECT COUNT(donationid) FROM donations WHERE for_honoree = 't' AND donor_state = 'NJ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM donors WHERE state = 'New Jersey' AND donation_amount > 0"
        ],
        "rule_sql": []
    },
    "4928": {
        "db_id": "olympics",
        "question": "Which city was the host of 1936 Winter Olympic Games?",
        "ground_truth": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1936 Winter'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM olympic_games WHERE year = 1936 AND season = 'Summer';"
        ],
        "rule_sql": []
    },
    "9020": {
        "db_id": "bike_share_1",
        "question": "List the name of stations that were installed from 8/5/2013 to 12/31/2013. Indicate their installation date and city name.",
        "ground_truth": "SELECT name, installation_date, city FROM station WHERE (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) = '5' AND SUBSTR(CAST(installation_date AS TEXT), INSTR(installation_date, '/') + 1, -6) >= '8' AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013') OR (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) IN ( '6', '7', '8', '9', '10', '11', '12' ) AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, installation_date, city FROM stations WHERE installation_date BETWEEN '2013-08-05' AND '2013-12-31';"
        ],
        "rule_sql": []
    },
    "90": {
        "db_id": "movie_platform",
        "question": "Please list the id of the director of the movie \"It's Winter\".",
        "ground_truth": "SELECT director_id FROM movies WHERE movie_title = 'It''s Winter'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director_id FROM movies WHERE title = \"It's Winter\";"
        ],
        "rule_sql": []
    },
    "747": {
        "db_id": "movie",
        "question": "Who was the actor that played in the movie \"Batman\" with the longest screentime?",
        "ground_truth": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID INNER JOIN movie AS T3 ON T3.MovieID = T1.MovieID WHERE T3.Title = 'Batman' ORDER BY T1.screentime DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE movie_title = 'Batman' ORDER BY screen_time DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7708": {
        "db_id": "hockey",
        "question": "Which year was the goalie who had the most postseaon shots Against in 2008 born?",
        "ground_truth": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2008 ORDER BY T2.PostSA DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_year FROM goalies WHERE year = 2008 ORDER BY shots_against DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2357": {
        "db_id": "superstore",
        "question": "What was the original price of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?",
        "ground_truth": "SELECT DISTINCT T2.Sales / (1 - T2.Discount) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T3.`Product Name` = 'Xerox 1952' AND T2.`Order Date` = '2014-09-10'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM orders JOIN customers ON orders.customer_id = customers.id JOIN products ON orders.product_id = products.id WHERE customers.name = 'Aimee Bixby' AND products.name = 'Xerox 1952' AND orders.order_date = '2014/9/10';"
        ],
        "rule_sql": []
    },
    "2271": {
        "db_id": "movielens",
        "question": "Action movies are mostly directed by directors of which country?",
        "ground_truth": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as movie_count \nFROM movies \nWHERE genre = 'Action' \nGROUP BY country \nORDER BY movie_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4341": {
        "db_id": "simpson_episodes",
        "question": "List out the names of the awarded character in the awards held in 2009.",
        "ground_truth": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM awards WHERE year = 2009;"
        ],
        "rule_sql": []
    },
    "7942": {
        "db_id": "music_platform_2",
        "question": "Of the arts-books and arts-design categories, which one has more podcasts and what is the numerical difference between them?",
        "ground_truth": "SELECT ( SELECT category FROM categories WHERE category = 'arts-books' OR category = 'arts-design' GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 ) \"has more podcasts\" , ( SELECT SUM(CASE WHEN category = 'arts-books' THEN 1 ELSE 0 END) - SUM(CASE WHEN category = 'arts-design' THEN 1 ELSE 0 END) FROM categories ) \"differenct BETWEEN arts-books and arts-design\"",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    category,\n    COUNT(*) as podcast_count,\n    ABS((SELECT COUNT(*) FROM podcasts WHERE category = 'arts-books') - (SELECT COUNT(*) FROM podcasts WHERE category = 'arts-design')) as difference\nFROM podcasts \nWHERE category IN ('arts-books', 'arts-design')\nGROUP BY category\nORDER BY podcast_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5112": {
        "db_id": "address",
        "question": "Show the alias for the county at coordinate (18.090875, -66.867756).",
        "ground_truth": "SELECT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM counties WHERE latitude = 18.090875 AND longitude = -66.867756;"
        ],
        "rule_sql": []
    },
    "2391": {
        "db_id": "superstore",
        "question": "Provide the names of the products with a profit greater than 98% of the average profit of all products in the East region.",
        "ground_truth": "SELECT DISTINCT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'East' AND T1.Profit > ( SELECT AVG(Profit) * 0.98 FROM east_superstore )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name \nFROM products \nWHERE profit > (SELECT AVG(profit) * 0.98 FROM products WHERE region = 'East');"
        ],
        "rule_sql": []
    },
    "7375": {
        "db_id": "works_cycles",
        "question": "How much is the amount to be paid by the company for the purchase order with the third highest freight amount?",
        "ground_truth": "SELECT TotalDue FROM PurchaseOrderHeader ORDER BY Freight DESC LIMIT 2, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT freight FROM purchase_orders ORDER BY freight DESC LIMIT 1 OFFSET 2"
        ],
        "rule_sql": []
    },
    "4475": {
        "db_id": "student_loan",
        "question": "List at least 5 students who have payment due and are enlisted in Peace Corps organization?",
        "ground_truth": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T2.organ = 'peace_corps' AND T1.bool = 'pos' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.student_id, s.name \nFROM students s\nJOIN payments p ON s.student_id = p.student_id\nJOIN organizations o ON s.student_id = o.student_id\nWHERE p.payment_status = 'due'\nAND o.organization_name = 'Peace Corps'\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "8373": {
        "db_id": "mondial_geo",
        "question": "What is the proportion of English-speaking citizens in the countries that rely on the United States compared to the total number of citizens in those countries?",
        "ground_truth": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE T3.Dependent = 'USA' AND T2.Name = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN language = 'English' THEN population ELSE 0 END) / SUM(population)) * 100 AS english_speaking_proportion\nFROM countries\nWHERE ally_country = 'United States';"
        ],
        "rule_sql": []
    },
    "3216": {
        "db_id": "donor",
        "question": "Among public magnet schools,what percentage of schools that receive the donated resources as books?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.project_resource_type = 'Books' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN donated_resources = 'books' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM schools\nWHERE type = 'public magnet';"
        ],
        "rule_sql": []
    },
    "2458": {
        "db_id": "superstore",
        "question": "What is the product's name in the highest quantity in a single purchase?",
        "ground_truth": "SELECT T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM purchases ORDER BY quantity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7600": {
        "db_id": "image_and_language",
        "question": "List the object classes of image ID 36 with coordinates (0,0).",
        "ground_truth": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT object_class FROM images WHERE image_id = 36 AND x_coordinate = 0 AND y_coordinate = 0;"
        ],
        "rule_sql": []
    },
    "9273": {
        "db_id": "movie_3",
        "question": "How many actors acted in movies in the Music category?",
        "ground_truth": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T3.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T5.name = 'Music'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actors WHERE category = 'Music';"
        ],
        "rule_sql": []
    },
    "3092": {
        "db_id": "cars",
        "question": "How many cars were released in the USA in 1981?",
        "ground_truth": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'USA' AND T1.model_year = 1981",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cars WHERE country = 'USA' AND year = 1981;"
        ],
        "rule_sql": []
    },
    "8970": {
        "db_id": "human_resources",
        "question": "Which position has the highest amount of poor performing employees?",
        "ground_truth": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT position, COUNT(*) as poor_performers \nFROM employees \nWHERE performance_rating = 'poor' \nGROUP BY position \nORDER BY poor_performers DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5326": {
        "db_id": "beer_factory",
        "question": "How many times did Anna Himes use her Mastercard when paying between 12/25/2014 and 5/20/2016 ?",
        "ground_truth": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Anna' AND T1.Last = 'Himes' AND T2.CreditCardType = 'MasterCard' AND T2.TransactionDate BETWEEN '2014-12-25' AND '2016-05-20'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM transactions WHERE customer_name = 'Anna Himes' AND payment_method = 'Mastercard' AND payment_date BETWEEN '2014-12-25' AND '2016-05-20';"
        ],
        "rule_sql": []
    },
    "7899": {
        "db_id": "world",
        "question": "How many cities are there in the country ruled by Kostis Stefanopoulos?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Kostis Stefanopoulos'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE country_id = (SELECT id FROM countries WHERE ruler = 'Kostis Stefanopoulos');"
        ],
        "rule_sql": []
    },
    "3087": {
        "db_id": "cars",
        "question": "Which car in the database provides the best crash protection based on its weight? How much is it?",
        "ground_truth": "SELECT T1.ID, T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT car_name, weight FROM cars ORDER BY weight ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5953": {
        "db_id": "books",
        "question": "How many books did A.R. Braunmuller write?",
        "ground_truth": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books WHERE author = 'A.R. Braunmuller';"
        ],
        "rule_sql": []
    },
    "7082": {
        "db_id": "works_cycles",
        "question": "What percentage of male employees hired throughout the years 2009 are married?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee WHERE SUBSTR(HireDate, 1, 4) = '2009' AND Gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN e.gender = 'M' AND e.marital_status = 'Married' THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN e.gender = 'M' THEN 1 END)) AS percentage_married_males\nFROM employees e\nWHERE strftime('%Y', e.hire_date) = '2009';"
        ],
        "rule_sql": []
    },
    "6112": {
        "db_id": "food_inspection_2",
        "question": "How many inspections were sanitarian Joshua Rosa responsible for in 2010?",
        "ground_truth": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE inspector_name = 'Joshua Rosa' AND year = 2010;"
        ],
        "rule_sql": []
    },
    "8948": {
        "db_id": "human_resources",
        "question": "What is the average salary of the employees who work as a Trainee?",
        "ground_truth": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) AS avg FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(salary) FROM employees WHERE job_title = 'Trainee';"
        ],
        "rule_sql": []
    },
    "1060": {
        "db_id": "talkingdata",
        "question": "How many users used Vivo Xplay3S model?",
        "ground_truth": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = 'Xplay3S' AND phone_brand = 'vivo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE model = 'iPhone 12'"
        ],
        "rule_sql": []
    }
}