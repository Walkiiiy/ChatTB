{
    "3116": {
        "db_id": "cars",
        "question": "Provide the price and country origin of the car named Ford Maverick.",
        "ground_truth": "SELECT DISTINCT T1.price, T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T4.car_name = 'ford maverick'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price, country FROM cars WHERE name = 'Ford Maverick';"
        ],
        "rule_sql": []
    },
    "7955": {
        "db_id": "music_platform_2",
        "question": "In how many categories were podcast reviews created in the last six months of 2016? List them.",
        "ground_truth": "SELECT COUNT(DISTINCT T1.category) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM podcast_reviews WHERE review_date BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY category;"
        ],
        "rule_sql": []
    },
    "8386": {
        "db_id": "mondial_geo",
        "question": "Among all the rivers finally flows to the sea of 540m in depth, which one has the longest length?",
        "ground_truth": "SELECT T2.Name FROM sea AS T1 INNER JOIN river AS T2 ON T2.Sea = T1.Name WHERE T1.Depth = 540 ORDER BY T2.Length DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM rivers WHERE depth = 540 ORDER BY length DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5957": {
        "db_id": "books",
        "question": "What is the name of the publisher that published the most books?",
        "ground_truth": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher_name FROM publishers ORDER BY publisher_id DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9144": {
        "db_id": "movie_3",
        "question": "Who is the owner of email address \"JEREMY.HURTADO@sakilacustomer.org\"? Give the full name.",
        "ground_truth": "SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org';"
        ],
        "rule_sql": []
    },
    "2092": {
        "db_id": "world_development_indicators",
        "question": "What's the description of the series code SM.POP.TOTL for Aruba?",
        "ground_truth": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'SM.POP.TOTL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM series WHERE series_code = 'SM.POP.TOTL' AND country = 'Aruba';"
        ],
        "rule_sql": []
    },
    "126": {
        "db_id": "movie_platform",
        "question": "How many critics were given to the movie that got the most movie popularity number.",
        "ground_truth": "SELECT COUNT(T1.critic) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM critics WHERE movie_id = (SELECT movie_id FROM movies ORDER BY popularity DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "8424": {
        "db_id": "mondial_geo",
        "question": "List all the seas with which the deepest sea merges.",
        "ground_truth": "SELECT T2.Sea2 FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = ( SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM seas WHERE depth = (SELECT MAX(depth) FROM seas);"
        ],
        "rule_sql": []
    },
    "4294": {
        "db_id": "simpson_episodes",
        "question": "What is the credited cast for the episode \"In the Name of the Grandfather\"?",
        "ground_truth": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'In the Name of the Grandfather' AND T2.category = 'Cast' AND T2.credited = 'true';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM episodes WHERE title = 'In the Name of the Grandfather';"
        ],
        "rule_sql": []
    },
    "2032": {
        "db_id": "soccer_2016",
        "question": "What are the names of players who had been man of the match more than 5 times in season year 2008?",
        "ground_truth": "SELECT CASE WHEN COUNT(T2.Man_of_the_Match) > 5 THEN T1.Player_Name ELSE 0 END FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T4.Season_Year = 2008",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM matches WHERE man_of_the_match_count > 5 AND season_year = 2008;"
        ],
        "rule_sql": []
    },
    "3739": {
        "db_id": "college_completion",
        "question": "What is the state name of male graduate in 2011 from a private for profit institution with black students?",
        "ground_truth": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'M' AND T2.race = 'B' AND T1.control = 'Private for-profit' AND T2.year = 2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state_name FROM institutions WHERE gender = 'male' AND year = 2011 AND institution_type = 'private for profit' AND race = 'black' AND degree = 'graduate';"
        ],
        "rule_sql": []
    },
    "2755": {
        "db_id": "european_football_1",
        "question": "Which division had the most draft matches in the 2008 season?",
        "ground_truth": "SELECT Div FROM matchs WHERE season = 2008 AND FTR = 'D' GROUP BY Div ORDER BY COUNT(FTR) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division, COUNT(*) as draft_matches \nFROM matches \nWHERE season = 2008 \nGROUP BY division \nORDER BY draft_matches DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3921": {
        "db_id": "public_review_platform",
        "question": "Among the businesses in Scottsdale, list the attribute of the business with a high review count.",
        "ground_truth": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.review_count LIKE 'High' AND T1.city LIKE 'Scottsdale' GROUP BY T3.attribute_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT attribute FROM businesses WHERE city = 'Scottsdale' ORDER BY review_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8827": {
        "db_id": "food_inspection",
        "question": "Describe the inspection types and violation descriptions under moderate risk category for ART's CAF\u00c9.",
        "ground_truth": "SELECT DISTINCT T2.type, T1.description FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'ART''S CAF\u00c9' AND T1.risk_category = 'Moderate Risk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspection_type, violation_description FROM inspections WHERE risk_category = 'moderate' AND business_name = 'ART''s CAF\u00c9'"
        ],
        "rule_sql": []
    },
    "5310": {
        "db_id": "beer_factory",
        "question": "What brand of beer has been the worst rated most times?",
        "ground_truth": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 GROUP BY T1.BrandName ORDER BY COUNT(T1.BrandName) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, COUNT(*) as worst_rating_count \nFROM beers \nWHERE rating = (SELECT MIN(rating) FROM beers) \nGROUP BY brand \nORDER BY worst_rating_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "777": {
        "db_id": "social_media",
        "question": "Please list the texts of all the tweets that are reshared.",
        "ground_truth": "SELECT text FROM twitter WHERE IsReshare = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT text FROM tweets WHERE retweet_count > 0;"
        ],
        "rule_sql": []
    },
    "2649": {
        "db_id": "regional_sales",
        "question": "Which product was ordered the most in 2018?",
        "ground_truth": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._ProductID ORDER BY COUNT(T1._ProductID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, COUNT(*) as order_count \nFROM orders \nWHERE order_date LIKE '2018%' \nGROUP BY product_name \nORDER BY order_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6790": {
        "db_id": "retails",
        "question": "What are the cost prices of large burnished copper?",
        "ground_truth": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'LARGE BURNISHED COPPER'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM products WHERE size = 'large' AND finish = 'burnished' AND material = 'copper';"
        ],
        "rule_sql": []
    },
    "4870": {
        "db_id": "legislator",
        "question": "List all of the ids of the representatives belonging to the Democrat party in district 13 that ended their term on 1/3/2019?",
        "ground_truth": "SELECT bioguide FROM `current-terms` WHERE type = 'rep' AND party = 'Democrat' AND end = '2019-01-03' AND district = 13",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM representatives WHERE party = 'Democrat' AND district = 13 AND end_term = '1/3/2019';"
        ],
        "rule_sql": []
    },
    "5196": {
        "db_id": "address",
        "question": "Which state has the most bad aliases?",
        "ground_truth": "SELECT T2.state FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.state ORDER BY COUNT(T1.bad_alias) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, COUNT(*) as bad_alias_count FROM aliases WHERE alias_type = 'bad' GROUP BY state ORDER BY bad_alias_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2830": {
        "db_id": "professional_basketball",
        "question": "Among the players born in Whitestone, how many of them have won the MVP?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'Houston'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE birth_city = 'Whitestone' AND mvp = 'Yes';"
        ],
        "rule_sql": []
    },
    "6890": {
        "db_id": "retails",
        "question": "What is the biggest discount among all orders for the part \"burnished seashell gainsboro navajo chocolate\"?",
        "ground_truth": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(discount) FROM orders WHERE part_name = 'burnished seashell gainsboro navajo chocolate';"
        ],
        "rule_sql": []
    },
    "5594": {
        "db_id": "shipping",
        "question": "Who was the customer of shipment no.1275? Give the customer's name.",
        "ground_truth": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_id = '1275'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shipment_id FROM shipments WHERE shipment_id = 1275;"
        ],
        "rule_sql": []
    },
    "7421": {
        "db_id": "works_cycles",
        "question": "Please list the credit card numbers of all the employees who have left the Finance Department.",
        "ground_truth": "SELECT T3.CardNumber FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN CreditCard AS T3 ON T1.ModifiedDate = T3.ModifiedDate INNER JOIN PersonCreditCard AS T4 ON T3.CreditCardID = T4.CreditCardID WHERE T2.Name = 'Finance' AND T1.EndDate IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT credit_card_number FROM employees WHERE department = 'Finance' AND status = 'active';"
        ],
        "rule_sql": []
    },
    "9312": {
        "db_id": "movie_3",
        "question": "Which category is the most common?",
        "ground_truth": "SELECT T.name FROM ( SELECT T2.name, COUNT(T2.name) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category, COUNT(*) FROM products GROUP BY category ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9425": {
        "db_id": "movie_3",
        "question": "How much in total had the customers in Italy spent on film rentals?",
        "ground_truth": "SELECT SUM(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(p.amount) AS total_spent\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE c.country = 'Italy';"
        ],
        "rule_sql": []
    },
    "9008": {
        "db_id": "bike_share_1",
        "question": "How many stations in San Francico can hold more than 20 bikes?",
        "ground_truth": "SELECT SUM(CASE WHEN city = 'San Francisco' AND dock_count > 20 THEN 1 ELSE 0 END) FROM station",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stations WHERE city = 'San Francisco' AND capacity > 20;"
        ],
        "rule_sql": []
    },
    "4400": {
        "db_id": "student_loan",
        "question": "How many unemployed students are there that have been absent for 6 months?",
        "ground_truth": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.`name` = T2.name WHERE T1.`month` = 6",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE employment_status = 'unemployed' AND absence_duration = 6;"
        ],
        "rule_sql": []
    },
    "4682": {
        "db_id": "disney",
        "question": "List the movie titles directed by Jack Kinney.",
        "ground_truth": "SELECT name FROM director WHERE director = 'Jack Kinney'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE director = 'Jack Kinney';"
        ],
        "rule_sql": []
    },
    "1338": {
        "db_id": "law_episode",
        "question": "What is the average rating for each episode in season 9?",
        "ground_truth": "SELECT SUM(rating) / COUNT(episode_id) FROM Episode WHERE season = 9",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_title, AVG(rating) as average_rating FROM episodes WHERE season_number = 9 GROUP BY episode_id;"
        ],
        "rule_sql": []
    },
    "6613": {
        "db_id": "retail_world",
        "question": "Name the products where the suppliers come from Finland.",
        "ground_truth": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Finland'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Finland'"
        ],
        "rule_sql": []
    },
    "7328": {
        "db_id": "works_cycles",
        "question": "Name all stores and its sales representative in France territory.",
        "ground_truth": "SELECT T3.Name, T4.FirstName, T4.LastName FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Store AS T3 ON T2.StoreID = T3.BusinessEntityID INNER JOIN Person AS T4 ON T2.PersonID = T4.BusinessEntityID WHERE T1.Name = 'France'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.StoreName, e.FirstName, e.LastName \nFROM Stores s\nJOIN Employees e ON s.ManagerID = e.EmployeeID\nWHERE s.Country = 'France';"
        ],
        "rule_sql": []
    },
    "659": {
        "db_id": "codebase_comments",
        "question": "Among the repository \"3\", how many methods whose comments is XML format?",
        "ground_truth": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 3 AND T2.CommentIsXml = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM methods WHERE repository_id = 3 AND comment_format = 'XML';"
        ],
        "rule_sql": []
    },
    "7311": {
        "db_id": "works_cycles",
        "question": "Name all salaried employee who are hired in 2007 and later.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.HireDate) >= '2007' AND T2.SalariedFlag = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE hire_date >= '2007-01-01' AND salary_type = 'hourly';"
        ],
        "rule_sql": []
    },
    "3967": {
        "db_id": "public_review_platform",
        "question": "What is the percentage for the Yelp businesses in \"Pets\" category of all businesses?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category_name) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage \nFROM business \nWHERE categories LIKE '%Pets%';"
        ],
        "rule_sql": []
    },
    "503": {
        "db_id": "movies_4",
        "question": "What is the ID of the production company which produced the movie \"Gladiator\"?",
        "ground_truth": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_id FROM movies WHERE title = 'Gladiator';"
        ],
        "rule_sql": []
    },
    "3810": {
        "db_id": "public_review_platform",
        "question": "How many businesses are there in Phoenix city? Find the percentage of businesses in Phoenix city in the total city.",
        "ground_truth": "SELECT SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.city) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(*) AS phoenix_count,\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM businesses)) AS percentage\nFROM businesses \nWHERE city = 'Phoenix';"
        ],
        "rule_sql": []
    },
    "5515": {
        "db_id": "menu",
        "question": "What is the page count for menu with page ID of 130?",
        "ground_truth": "SELECT T1.page_count FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.id = 130",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_count FROM menu WHERE page_id = 130;"
        ],
        "rule_sql": []
    },
    "1901": {
        "db_id": "soccer_2016",
        "question": "In the matches where the winning margin is less than fifty, how many teams won by wicket?",
        "ground_truth": "SELECT COUNT(T2.Win_Id) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_Type = 'wickets' AND T1.Win_Margin < 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE winning_margin < 50 AND won_by = 'wicket';"
        ],
        "rule_sql": []
    },
    "7724": {
        "db_id": "hockey",
        "question": "What is the power play percentage of the team with the most number of loses?",
        "ground_truth": "SELECT CAST(SUM(PPG) AS REAL) * 100 / SUM(PPC) FROM Teams GROUP BY tmID ORDER BY SUM(L) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT power_play_percentage FROM team_stats ORDER BY losses DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "708": {
        "db_id": "trains",
        "question": "What is the average number of cars on trains that run in the east direction?",
        "ground_truth": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(cars) FROM trains WHERE direction = 'west';"
        ],
        "rule_sql": []
    },
    "718": {
        "db_id": "trains",
        "question": "How many trains running west have double sided cars in 3rd position?",
        "ground_truth": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 3 AND T2.direction = 'west' AND T1.sides = 'double' GROUP BY T1.train_id)as T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trains WHERE direction = 'west' AND car_position = 3 AND car_type = 'double_sided';"
        ],
        "rule_sql": []
    },
    "8895": {
        "db_id": "cookbook",
        "question": "Which ingredient appeared the least in recipes?",
        "ground_truth": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ingredient, COUNT(*) as count FROM recipes GROUP BY ingredient ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1144": {
        "db_id": "talkingdata",
        "question": "Among the devices with an event occurring in 2016, how many of them are owned by a user in the M23-26 user group?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE STRFTIME('%Y', T2.timestamp) = '2016' AND T1.`group` = 'M23-26'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM devices d\nJOIN events e ON d.device_id = e.device_id\nJOIN users u ON d.user_id = u.user_id\nWHERE YEAR(e.event_date) = 2016\nAND u.user_group = 'M23-26';"
        ],
        "rule_sql": []
    },
    "5704": {
        "db_id": "language_corpus",
        "question": "What is the word pair that occured the highest amount of times in Addicio? Indicate how many times such word pair occured.",
        "ground_truth": "SELECT T3.w1st, T3.w2nd, T3.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN biwords AS T3 ON T2.wid = T3.w1st OR T2.wid = T3.w2nd WHERE T1.title = 'Addicio' ORDER BY T3.occurrences DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word1, word2, COUNT(*) as count FROM Addicio GROUP BY word1, word2 ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2053": {
        "db_id": "music_tracker",
        "question": "How many releases are tagged \"1980s\"?",
        "ground_truth": "SELECT COUNT(id) FROM tags WHERE tag LIKE '1980s'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM releases WHERE tag = '1980s';"
        ],
        "rule_sql": []
    },
    "8392": {
        "db_id": "mondial_geo",
        "question": "Which non capital city has the most people of all?",
        "ground_truth": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name, population FROM cities WHERE is_capital = 0 ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6740": {
        "db_id": "retails",
        "question": "Among the parts shipped by rail on 1st December, 1995, list part names with 10% discount.",
        "ground_truth": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN lineitem AS T3 ON T1.ps_partkey = T3.l_partkey WHERE T3.l_discount = 0.1 AND T3.l_shipdate = '1995-12-01' AND T3.l_shipmode = 'RAIL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p_name \nFROM part \nWHERE p_shipmode = 'RAIL' \nAND p_shipdate = '1995-12-01' \nAND p_discount = 0.1;"
        ],
        "rule_sql": []
    },
    "52": {
        "db_id": "movie_platform",
        "question": "Where can I find the movie list \"Short and pretty damn sweet\"?",
        "ground_truth": "SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM movies WHERE title = 'Short and pretty damn sweet';"
        ],
        "rule_sql": []
    },
    "1065": {
        "db_id": "talkingdata",
        "question": "Describe the device user gender and age of the event ID of 15251.",
        "ground_truth": "SELECT T1.gender, T1.age FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.event_id = 15251",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, age FROM events WHERE event_id = 15251"
        ],
        "rule_sql": []
    },
    "4268": {
        "db_id": "simpson_episodes",
        "question": "How many executive producers are the nominees for the award of \"Outstanding Animated Program (For Programming Less Than One Hour)\"?",
        "ground_truth": "SELECT COUNT(*) FROM Award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM nominees WHERE award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND role = 'executive producer';"
        ],
        "rule_sql": []
    },
    "8655": {
        "db_id": "chicago_crime",
        "question": "Among the criminal sexual assaults in the district of Adnardo Gutierrez, how many cases happened in the residence?",
        "ground_truth": "SELECT COUNT(T2.report_no) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Criminal Sexual Assault' AND T1.commander = 'Adnardo Gutierrez' AND T2.location_description = 'RESIDENCE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE district = 'Adnardo Gutierrez' AND crime_type = 'criminal sexual assault' AND location = 'residence';"
        ],
        "rule_sql": []
    },
    "2472": {
        "db_id": "shooting",
        "question": "From the cases where the subject were deceased, list the subject's last name, gender, race and case number.",
        "ground_truth": "SELECT T2.last_name, T2.gender, T2.race, T2.case_number FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Deceased'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, gender, race, case_number FROM cases WHERE deceased = 'false';"
        ],
        "rule_sql": []
    },
    "3136": {
        "db_id": "cars",
        "question": "List the price of Ford cars from model 1970 to 1980.",
        "ground_truth": "SELECT DISTINCT T3.price FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID WHERE T1.car_name LIKE 'ford%' AND T2.model_year BETWEEN 1970 AND 1980",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM cars WHERE manufacturer = 'Ford' AND model_year BETWEEN 1970 AND 1980;"
        ],
        "rule_sql": []
    },
    "4412": {
        "db_id": "student_loan",
        "question": "Please check if student 124 is disabled male.",
        "ground_truth": "SELECT IIF(T2.name IS NULL, 'female', 'male') FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE student_id = 124 AND gender = 'female' AND disabled = 'no';"
        ],
        "rule_sql": []
    },
    "8553": {
        "db_id": "software_company",
        "question": "How many teenagers are working as Machine-op-inspct?",
        "ground_truth": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE age BETWEEN 13 AND 19 AND job_title = 'Machine-op-inspct';"
        ],
        "rule_sql": []
    },
    "1582": {
        "db_id": "car_retails",
        "question": "State top 3 emails of UK Sales Rep who have the highest credit limit.",
        "ground_truth": "SELECT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' GROUP BY T1.customerName, T2.email ORDER BY SUM(T1.creditLimit) DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM sales_reps WHERE country = 'UK' ORDER BY credit_limit DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "3412": {
        "db_id": "video_games",
        "question": "What is the ratio of game sales between North America and Japan?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) / SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (NA_Sales / JP_Sales) AS sales_ratio FROM game_sales WHERE NA_Sales > 0 AND JP_Sales > 0;"
        ],
        "rule_sql": []
    },
    "37": {
        "db_id": "movie_platform",
        "question": "How many users rated the movie \"The Magnificent Ambersons\" gave a rating score of no more than 2? List all the URL to the rating on Mubi.",
        "ground_truth": "SELECT COUNT(T2.user_id), T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Magnificent Ambersons' AND T2.rating_score <= 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS user_count, r.rating_url\nFROM users u\nJOIN ratings r ON u.user_id = r.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.title = 'The Magnificent Ambersons' AND r.rating_score > 2\nGROUP BY r.rating_url;"
        ],
        "rule_sql": []
    },
    "6938": {
        "db_id": "ice_hockey_draft",
        "question": "Who is the youngest player to have played during the 1997-1998 season for OHL League?",
        "ground_truth": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998' AND T1.LEAGUE = 'OHL' ORDER BY T2.birthdate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, p.age FROM players p JOIN seasons s ON p.player_id = s.player_id WHERE s.league = 'OHL' AND s.season = '1997-1998' ORDER BY p.age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9297": {
        "db_id": "movie_3",
        "question": "Who is the customer that is active and lives at 1795 Santiago de Compostela Way, Texas?",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T2.address = '1795 Santiago de Compostela Way' AND T1.active = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM customers WHERE active = 1 AND address = '1795 Santiago de Compostela Way' AND state = 'Texas';"
        ],
        "rule_sql": []
    },
    "7152": {
        "db_id": "works_cycles",
        "question": "For the older production technician who was hired in 2008/12/7, what's his/her birthday?",
        "ground_truth": "SELECT BirthDate FROM Employee WHERE HireDate = '2008-12-07'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birthday FROM employees WHERE position = 'Production Technician' AND hire_date = '2008/12/7' ORDER BY age DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7873": {
        "db_id": "world",
        "question": "Which country has the smallest surface area?",
        "ground_truth": "SELECT Name FROM Country ORDER BY SurfaceArea ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM country ORDER BY surface_area DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2967": {
        "db_id": "shakespeare",
        "question": "How many scenes are there on average in one act in Twelfth Night?",
        "ground_truth": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(scene_count) FROM (SELECT act_id, COUNT(*) as scene_count FROM scenes GROUP BY act_id) WHERE play_title = 'Twelfth Night';"
        ],
        "rule_sql": []
    },
    "2618": {
        "db_id": "regional_sales",
        "question": "How many orders that Medsep Group had made?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.`Customer Names` = 'Medsep Group' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Medsep Group';"
        ],
        "rule_sql": []
    },
    "3751": {
        "db_id": "college_completion",
        "question": "Between the Ivy League Schools, which school's state have the lowest sate appropriations to higher education in fiscal year 2011 per resident?",
        "ground_truth": "SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school_name, state, MIN(state_appropriations) as min_appropriations \nFROM ivy_league_schools \nWHERE fiscal_year = 2011 \nGROUP BY school_name, state \nORDER BY min_appropriations ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7084": {
        "db_id": "works_cycles",
        "question": "List, by ProductID, all products whose profit, relative to the standard price, is negative.",
        "ground_truth": "SELECT DISTINCT ProductID FROM ProductVendor WHERE StandardPrice - LastReceiptCost < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ProductID, StandardPrice, (StandardPrice - UnitCost) AS Profit FROM Products WHERE Profit > 0;"
        ],
        "rule_sql": []
    },
    "6209": {
        "db_id": "food_inspection_2",
        "question": "How many employees have salary greater than 70000 but fail the inspection?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND T1.salary > 70000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE salary > 70000 AND inspection_status = 'fail';"
        ],
        "rule_sql": []
    },
    "4956": {
        "db_id": "olympics",
        "question": "In which cities beginning with the letter M have the Olympic Games been held?",
        "ground_truth": "SELECT city_name FROM city WHERE city_name LIKE 'M%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT city FROM olympic_games WHERE city LIKE 'M%';"
        ],
        "rule_sql": []
    },
    "8221": {
        "db_id": "mondial_geo",
        "question": "Find the GPD for Bosnia and Herzegovina and the type of government it belongs to.",
        "ground_truth": "SELECT T1.GDP, T2.Government FROM economy AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Bosnia and Herzegovina'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gdp, government_type FROM countries WHERE country_name = 'Bosnia and Herzegovina';"
        ],
        "rule_sql": []
    },
    "1125": {
        "db_id": "talkingdata",
        "question": "Give the number of \"game-Fishing\" apps.",
        "ground_truth": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Fishing'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM apps WHERE name = 'game-Fishing';"
        ],
        "rule_sql": []
    },
    "4188": {
        "db_id": "simpson_episodes",
        "question": "List the name character awarded for the Outstanding Voice-Over Performance award in 2009.",
        "ground_truth": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM awards WHERE award_name = 'Outstanding Voice-Over Performance' AND year = 2009;"
        ],
        "rule_sql": []
    },
    "1792": {
        "db_id": "soccer_2016",
        "question": "Which country is the oldest player from?",
        "ground_truth": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.Country_Name IS NOT NULL ORDER BY T2.DOB LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM players ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3564": {
        "db_id": "authors",
        "question": "How many authors have written paper \"145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: \"?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = '145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: '",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM authors WHERE paper_title = '145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:'"
        ],
        "rule_sql": []
    },
    "5854": {
        "db_id": "airline",
        "question": "How many flights departed on time on 8/1/2018?",
        "ground_truth": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND DEP_DELAY <= 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE departure_date = '2018-08-01' AND departure_time = '00:00:00';"
        ],
        "rule_sql": []
    },
    "5": {
        "db_id": "movie_platform",
        "question": "What is the average rating for movie titled 'When Will I Be Loved'?",
        "ground_truth": "SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'When Will I Be Loved'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM movies WHERE title = 'When Will I Be Loved';"
        ],
        "rule_sql": []
    },
    "7289": {
        "db_id": "works_cycles",
        "question": "Please list the e-mails of the reviewers who have reviewed high class.",
        "ground_truth": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'H'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM reviewers WHERE class = 'high';"
        ],
        "rule_sql": []
    },
    "7330": {
        "db_id": "works_cycles",
        "question": "Names the Sales Representative with the highest year to date sales.",
        "ground_truth": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SalesYTD DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name FROM SalesRepresentatives ORDER BY YearToDateSales DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1310": {
        "db_id": "law_episode",
        "question": "What role was Julia Roberts nominated for?",
        "ground_truth": "SELECT T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Nominee' AND T1.name = 'Julia Roberts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM nominations WHERE actor = 'Julia Roberts' AND nominated = 0;"
        ],
        "rule_sql": []
    },
    "7637": {
        "db_id": "hockey",
        "question": "Among all goalies who are still alive, whose first season in NHL in before 1950. List the team names they were in.",
        "ground_truth": "SELECT DISTINCT T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.lgID = T3.lgID AND T2.year = T3.year WHERE T1.deathYear IS NOT NULL AND T1.firstNHL < 1950",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name \nFROM goalies \nWHERE death_date IS NULL \nAND first_season < 1950 \nORDER BY team_name;"
        ],
        "rule_sql": []
    },
    "5154": {
        "db_id": "address",
        "question": "Give the area code of the city with the white population ranging between 1700 to 2000.",
        "ground_truth": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.white_population BETWEEN 1700 AND 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT area_code FROM cities WHERE white_population = 1700 AND white_population = 2000;"
        ],
        "rule_sql": []
    },
    "7017": {
        "db_id": "works_cycles",
        "question": "Among all products without any rejected quantity, which product has the highest line total? State the product name and unit price.",
        "ground_truth": "SELECT T1.Name, T2.UnitPrice FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = 0 ORDER BY T2.LineTotal DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, unit_price \nFROM products \nWHERE rejected_quantity = 0 \nORDER BY line_total DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7291": {
        "db_id": "works_cycles",
        "question": "What is the product description of Headset Ball Bearings?",
        "ground_truth": "SELECT T1.Description FROM ProductDescription AS T1 INNER JOIN Product AS T2 WHERE T2.Name = 'Headset Ball Bearings' AND T1.productDescriptionID = T2.ProductID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE product_description = 'Headset Ball Bearings';"
        ],
        "rule_sql": []
    },
    "2341": {
        "db_id": "movielens",
        "question": "What are the genres of all the English-language foreign films having a runtime of two hours or less? List each one.",
        "ground_truth": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime <= 2 AND T1.isEnglish = 'T' AND T1.country = 'other'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM films WHERE language = 'English' AND runtime <= 120 AND country != 'USA' GROUP BY genre;"
        ],
        "rule_sql": []
    },
    "4018": {
        "db_id": "public_review_platform",
        "question": "What are the opening and closing time of business id 1 for day id 2?",
        "ground_truth": "SELECT opening_time, closing_time FROM Business_Hours WHERE business_id = 1 AND day_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT opening_time, closing_time FROM business_hours WHERE business_id = 2 AND day_id = 1;"
        ],
        "rule_sql": []
    },
    "3560": {
        "db_id": "authors",
        "question": "Among the papers published in 2009, pick 10 and list down the conference's short name of these papers.",
        "ground_truth": "SELECT T2.PaperId, T4.ShortName FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id INNER JOIN Conference AS T4 ON T3.ConferenceId = T4.Id WHERE T3.Year = 2009 LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference_short_name FROM papers WHERE year = 2009 LIMIT 10;"
        ],
        "rule_sql": []
    },
    "163": {
        "db_id": "movie_platform",
        "question": "What is the average number of number of movies added to the lists of user 8516503? Indicate how many movies did he/she give a rating score of 5.",
        "ground_truth": "SELECT AVG(T3.list_movie_number) , SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN lists AS T3 ON T2.user_id = T3.user_id WHERE T1.user_id = 8516503",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(movie_count) as avg_movies, COUNT(*) as movies_with_rating_5\nFROM user_lists\nWHERE user_id = 8516503 AND rating = 5;"
        ],
        "rule_sql": []
    },
    "7970": {
        "db_id": "music_platform_2",
        "question": "List all of the two-star reviews and their categories.",
        "ground_truth": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT review_text, category FROM reviews WHERE stars = 2;"
        ],
        "rule_sql": []
    },
    "679": {
        "db_id": "codebase_comments",
        "question": "What are the solution path of the tokenized name \"matrix multiply\"?",
        "ground_truth": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'matrix multiply'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT solution_path FROM tokenized_names WHERE name = 'matrix multiply';"
        ],
        "rule_sql": []
    },
    "758": {
        "db_id": "movie",
        "question": "What is the percentage of the actors that showed up in the credit list of movie \"Dawn of the Planet of the Apes\" that were born after \"1970/1/1\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.`Date of Birth` > '1970-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Date of Birth`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Dawn of the Planet of the Apes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN p.birthdate > '1970-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    credits c\nJOIN \n    people p ON c.person_id = p.id\nJOIN \n    movies m ON c.movie_id = m.id\nWHERE \n    m.title = 'Dawn of the Planet of the Apes'\n    AND c.role = 'actor';"
        ],
        "rule_sql": []
    },
    "8578": {
        "db_id": "software_company",
        "question": "What is the geographic ID and total income per year when the average income is above 3300 dollar.",
        "ground_truth": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT geographic_id, SUM(income) as total_income, year FROM income_table WHERE AVG(income) > 3300 GROUP BY geographic_id, year"
        ],
        "rule_sql": []
    },
    "9241": {
        "db_id": "movie_3",
        "question": "List the store ID of the films with a rental rate greater than the 60% of average rental rate of all listed films.",
        "ground_truth": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate > ( SELECT AVG(T1.rental_rate) * 0.6 FROM film AS T1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT store_id FROM film WHERE rental_rate > (SELECT AVG(rental_rate) * 0.6 FROM film)"
        ],
        "rule_sql": []
    },
    "5471": {
        "db_id": "menu",
        "question": "Which dish lasted longer, Anchovies or Fresh lobsters in every style?",
        "ground_truth": "SELECT CASE WHEN SUM(CASE WHEN name = 'Anchovies' THEN last_appeared - first_appeared ELSE 0 END) - SUM(CASE WHEN name = 'Fresh lobsters in every style' THEN last_appeared - first_appeared ELSE 0 END) > 0 THEN 'Anchovies' ELSE 'Fresh lobsters in every style' END FROM Dish WHERE name IN ('Fresh lobsters in every style', 'Anchovies')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    dish_name,\n    MAX(end_date - start_date) as duration_days\nFROM dishes\nWHERE dish_name IN ('Anchovies', 'Fresh lobsters')\nGROUP BY dish_name\nORDER BY duration_days DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2881": {
        "db_id": "professional_basketball",
        "question": "How many players whose teams were ranked 6 in 1937?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.year = 1937 AND T3.rank = 6",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE team_rank = 6 AND year = 1937;"
        ],
        "rule_sql": []
    },
    "7978": {
        "db_id": "music_platform_2",
        "question": "What percentage of podcasts are \"technology\" podcasts? List all of them.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.category = 'technology' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.title) OR '%' \"percentage\" FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN category = 'technology' THEN 1 END) * 100.0 / COUNT(*)) AS percentage,\n    *\nFROM podcasts\nWHERE category = 'technology';"
        ],
        "rule_sql": []
    },
    "5014": {
        "db_id": "olympics",
        "question": "Give the height of the tallest athlete from Portugal.",
        "ground_truth": "SELECT T3.height FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Portugal' ORDER BY T3.height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(height) FROM athletes WHERE country = 'Portugal';"
        ],
        "rule_sql": []
    },
    "6169": {
        "db_id": "food_inspection_2",
        "question": "What is the inspection ID of the inspection with critical point level, $500 fine, and inspector comment \"CDI ON 5-17-10\"?",
        "ground_truth": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 500 AND T1.point_level = 'Critical' AND T2.inspector_comment = 'CDI ON 5-17-10'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspection_id FROM inspections WHERE critical_point_level = 'critical' AND fine_amount = 500 AND inspector_comment = 'CDI ON 5-17-10';"
        ],
        "rule_sql": []
    },
    "2175": {
        "db_id": "world_development_indicators",
        "question": "How many countries have country note description as \"Sources: UN Energy Statistics (2014)\"? List the currency of these countries.",
        "ground_truth": "SELECT COUNT(DISTINCT T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Sources: UN Energy Statistics (2014)' UNION SELECT DISTINCT t1.CurrencyUnit FROM country AS t1 INNER JOIN countrynotes AS t2 ON t1.CountryCode = t2.Countrycode WHERE t2.Description = 'Sources: UN Energy Statistics (2014)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT currency, COUNT(*) FROM countries WHERE country_note = 'Sources: UN Energy Statistics (2014)' GROUP BY currency;"
        ],
        "rule_sql": []
    },
    "1732": {
        "db_id": "restaurant",
        "question": "What type of restaurant is most common in Monterey county?",
        "ground_truth": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'Monterey' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT type, COUNT(*) as count FROM restaurants WHERE county = 'Monterey' GROUP BY type ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9235": {
        "db_id": "movie_3",
        "question": "In the film with an inventory ID between 20 to 60, how many of the films have a G rating?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id BETWEEN 20 AND 60 AND T1.rating = 'G'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM film WHERE inventory_id BETWEEN 20 AND 60 AND rating = 'G';"
        ],
        "rule_sql": []
    },
    "928": {
        "db_id": "cs_semester",
        "question": "Give the student's ID of students with 2.5 GPA and enrolled in C for Programmers.",
        "ground_truth": "SELECT T2.student_id FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'C for Programmers' AND T1.gpa = 2.5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_id FROM students WHERE gpa = 2.5 AND course = 'C for Programmers';"
        ],
        "rule_sql": []
    },
    "3670": {
        "db_id": "authors",
        "question": "How many publications were published in relation to the conference 'Adaptive Multimedia Retrieval' in 2007?",
        "ground_truth": "SELECT COUNT(T2.ConferenceId) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Adaptive Multimedia Retrieval' AND T2.Year = 2007",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM publications WHERE conference = 'Adaptive Multimedia Retrieval' AND year = 2007;"
        ],
        "rule_sql": []
    },
    "4454": {
        "db_id": "student_loan",
        "question": "How many male students join more than one organization?",
        "ground_truth": "SELECT COUNT(T.a) FROM ( SELECT COUNT(DISTINCT T1.name) AS a, COUNT(T2.organ) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num > 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'male' AND organization_count > 1;"
        ],
        "rule_sql": []
    },
    "4512": {
        "db_id": "student_loan",
        "question": "List out female students that enrolled in occ school and ulca?",
        "ground_truth": "SELECT name FROM enrolled WHERE school IN ('occ', 'ulca') AND name NOT IN ( SELECT name FROM male )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE gender = 'male' AND (school = 'occ' OR school = 'ulca');"
        ],
        "rule_sql": []
    },
    "7201": {
        "db_id": "works_cycles",
        "question": "What are the color of products that were reviewed?",
        "ground_truth": "SELECT T1.Color FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 709 OR 937 OR 798",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT color FROM products WHERE review_id IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "3084": {
        "db_id": "cars",
        "question": "When was the $32650.65157 car introduced to the market? State the year.",
        "ground_truth": "SELECT T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '32650.65157'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM cars WHERE price = 32650.65157;"
        ],
        "rule_sql": []
    },
    "8719": {
        "db_id": "chicago_crime",
        "question": "How many arrests have been made due to forcible entry burglary that took place in a day care center?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'DAY CARE CENTER' AND T1.secondary_description = 'FORCIBLE ENTRY' AND T1.primary_description = 'BURGLARY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM arrests WHERE crime_type = 'forcible entry burglary' AND location = 'day care center';"
        ],
        "rule_sql": []
    },
    "6886": {
        "db_id": "retails",
        "question": "Among the parts that are returned, how many of them are provided by a supplier in debt?",
        "ground_truth": "SELECT COUNT(T1.l_partkey) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_returnflag = 'R' AND T2.s_acctbal < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM parts WHERE supplier_id IN (SELECT supplier_id FROM suppliers WHERE debt > 0)"
        ],
        "rule_sql": []
    },
    "1111": {
        "db_id": "talkingdata",
        "question": "Provide the total number of the male users that use OPPO as their phone brand.",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND T1.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female' AND phone_brand = 'OPPO';"
        ],
        "rule_sql": []
    },
    "5747": {
        "db_id": "language_corpus",
        "question": "How many times does the Catalan word \"nombre\" repeat itself?",
        "ground_truth": "SELECT T1.occurrences FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T2.word = 'nombre'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM words WHERE word = 'nombre';"
        ],
        "rule_sql": []
    },
    "5317": {
        "db_id": "beer_factory",
        "question": "What is the average unit profit for wholesalers of canned beers?",
        "ground_truth": "SELECT AVG(T2.CurrentRetailPrice - T2.WholesaleCost) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Can'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(unit_profit) FROM products WHERE category = 'beer' AND packaging = 'canned' AND customer_type = 'wholesaler';"
        ],
        "rule_sql": []
    },
    "8262": {
        "db_id": "mondial_geo",
        "question": "How many organizations are established in countries where people speak Bosnian?",
        "ground_truth": "SELECT COUNT(T2.Name) FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Bosnian'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM organizations o JOIN countries c ON o.country_id = c.id JOIN languages l ON c.id = l.country_id WHERE l.language = 'Bosnian';"
        ],
        "rule_sql": []
    },
    "9101": {
        "db_id": "bike_share_1",
        "question": "What is the average coldest temperature for the zip code of 94301 and what stations are within the zip code? Include the latitude and longitude as well.",
        "ground_truth": "SELECT AVG(T3.min_temperature_f), T1.long, T1.lat FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(coldest_temperature) as avg_coldest_temp, station_name, latitude, longitude \nFROM weather_stations \nWHERE zip_code = '94301' \nGROUP BY station_name, latitude, longitude;"
        ],
        "rule_sql": []
    },
    "4483": {
        "db_id": "student_loan",
        "question": "Provide the students' names and schools who enrolled for 15 months.",
        "ground_truth": "SELECT name, school FROM enrolled WHERE month = 15",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, school FROM students WHERE enrollment_duration = 15;"
        ],
        "rule_sql": []
    },
    "2220": {
        "db_id": "world_development_indicators",
        "question": "How many countries have a latest population census in 2011? Indicate their full names.",
        "ground_truth": "SELECT COUNT(LongName) FROM country WHERE LatestPopulationCensus = '2011' UNION ALL SELECT LongName FROM country WHERE LatestPopulationCensus = '2011'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE census_year = 2011;"
        ],
        "rule_sql": []
    },
    "5430": {
        "db_id": "sales",
        "question": "Give the product ID and name of the product with the highest prices among the quantity ranges from 400 to 500.",
        "ground_truth": "SELECT T1.ProductID, T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity BETWEEN 400 AND 500 ORDER BY T1.Price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_id, name FROM products WHERE quantity BETWEEN 400 AND 500 ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3527": {
        "db_id": "authors",
        "question": "List down the author ID of authors with a name of \"Peter\".",
        "ground_truth": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM authors WHERE author_id = 'Peter';"
        ],
        "rule_sql": []
    },
    "7265": {
        "db_id": "works_cycles",
        "question": "How many work orders with quantities ranging from 100 to 250 have a reorder point of no more than 375?",
        "ground_truth": "SELECT COUNT(T1.TransactionID) FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity BETWEEN 100 AND 250 AND T2.ReorderPoint <= 375",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM work_orders WHERE quantity BETWEEN 100 AND 250 AND reorder_point <= 375;"
        ],
        "rule_sql": []
    },
    "8028": {
        "db_id": "university",
        "question": "Among all universities, how many female students were there in 2011?",
        "ground_truth": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year = 2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'male' AND year = 2011;"
        ],
        "rule_sql": []
    },
    "8972": {
        "db_id": "human_resources",
        "question": "How many Account Representatives are there in Illinois with satisfying performance?",
        "ground_truth": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' AND T2.state = 'IL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE state = 'Illinois' AND job_title = 'Account Representative' AND performance_rating > 8;"
        ],
        "rule_sql": []
    },
    "3787": {
        "db_id": "public_review_platform",
        "question": "How many more \"Chinese\" than \"Filipino\" Yelp businesses?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Chinese' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Filipino' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM yelp_businesses WHERE categories LIKE '%Chinese%' AND categories LIKE '%Filipino%';"
        ],
        "rule_sql": []
    },
    "7901": {
        "db_id": "world",
        "question": "Give the population of the country where Queimados city belongs.",
        "ground_truth": "SELECT T2.Population FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Queimados'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population FROM cities WHERE name = 'Queimados';"
        ],
        "rule_sql": []
    },
    "3199": {
        "db_id": "donor",
        "question": "Who is the vendor of the resources needed by the project that had the highest cost of optional tip?",
        "ground_truth": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_including_optional_support DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor FROM resources WHERE project_id = (SELECT project_id FROM projects ORDER BY optional_tip DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "1785": {
        "db_id": "restaurant",
        "question": "Which region has the highest number of restaurants?",
        "ground_truth": "SELECT T1.region FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city GROUP BY T1.region ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region, COUNT(*) as restaurant_count FROM restaurants GROUP BY region ORDER BY restaurant_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "228": {
        "db_id": "book_publishing_company",
        "question": "For the quantities, what percent more did the store in Fremont sell than the store in Portland in 1993?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN store = 'Fremont' AND year = 1993 THEN quantity ELSE 0 END) - \n     SUM(CASE WHEN store = 'Portland' AND year = 1993 THEN quantity ELSE 0 END)) * 100 / \n    SUM(CASE WHEN store = 'Portland' AND year = 1993 THEN quantity ELSE 0 END) AS percent_more\nFROM sales;"
        ],
        "rule_sql": []
    },
    "5115": {
        "db_id": "address",
        "question": "Give the location coordinates of the city with area code 636.",
        "ground_truth": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 636",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM cities WHERE area_code = '636';"
        ],
        "rule_sql": []
    },
    "1962": {
        "db_id": "soccer_2016",
        "question": "List all the names of the winning team's players in the first match of season 1.",
        "ground_truth": "SELECT T3.Player_Name FROM `Match` AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Winner = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T1.Season_Id = 1 ORDER BY T1.Match_Date LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM players WHERE team_id = (SELECT winning_team_id FROM matches WHERE season = 1 ORDER BY match_date LIMIT 1)"
        ],
        "rule_sql": []
    },
    "1913": {
        "db_id": "soccer_2016",
        "question": "How many players are older than Gurkeerat Singh player?",
        "ground_truth": "SELECT SUM(CASE WHEN DOB < '1990-06-29' THEN 1 ELSE 0 END) FROM Player WHERE Player_Name != 'Gurkeerat Singh'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE age > (SELECT age FROM players WHERE player_name = 'Gurkeerat Singh')"
        ],
        "rule_sql": []
    },
    "4197": {
        "db_id": "simpson_episodes",
        "question": "List all the keyword for 'Take My Life, Please' episode.",
        "ground_truth": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keyword FROM episodes WHERE title = 'Take My Life, Please';"
        ],
        "rule_sql": []
    },
    "2257": {
        "db_id": "movielens",
        "question": "What is the average rating of the newest movies from France?",
        "ground_truth": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM movies WHERE country = 'France' ORDER BY release_date DESC LIMIT 10;"
        ],
        "rule_sql": []
    },
    "3002": {
        "db_id": "shakespeare",
        "question": "How many scenes are there in the 5th act of \"History of Henry VIII\"?",
        "ground_truth": "SELECT SUM(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 5 AND T1.LongTitle = 'History of Henry VIII'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM scenes WHERE act_number = 5 AND play_title = 'History of Henry VIII';"
        ],
        "rule_sql": []
    },
    "4399": {
        "db_id": "student_loan",
        "question": "How many students from SMC are unemployed?",
        "ground_truth": "SELECT T2.name FROM enrolled AS T1 INNER JOIN unemployed AS T2 ON T1.`name` = T2.`name` WHERE T1.school = 'smc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE school = 'SMC' AND employment_status = 'unemployed';"
        ],
        "rule_sql": []
    },
    "3883": {
        "db_id": "public_review_platform",
        "question": "What is the review length of user 35026 to business with business ID 2?",
        "ground_truth": "SELECT review_length FROM Reviews WHERE user_id = 35026 AND business_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT LENGTH(review_text) FROM reviews WHERE user_id = 35026 AND business_id = 2;"
        ],
        "rule_sql": []
    },
    "4326": {
        "db_id": "simpson_episodes",
        "question": "Sum up the votes from star 1 to 5 for all of the contestants in Blimp Award.",
        "ground_truth": "SELECT T2.stars, SUM(T2.stars) FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Blimp Award' AND T2.stars BETWEEN 1 AND 5 GROUP BY T2.stars;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT contestant_name, SUM(vote_count) as total_votes FROM blimp_awards GROUP BY contestant_name"
        ],
        "rule_sql": []
    },
    "3546": {
        "db_id": "authors",
        "question": "Find the paper ID, title, published year and journal's full name of the paper which included the most number in author.",
        "ground_truth": "SELECT T1.Id, T1.Title, T1.Year, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id GROUP BY T2.AuthorId ORDER BY COUNT(T2.AuthorId) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.paper_id, p.title, p.year, j.full_name \nFROM papers p\nJOIN journals j ON p.journal_id = j.journal_id\nJOIN paper_author pa ON p.paper_id = pa.paper_id\nGROUP BY p.paper_id\nORDER BY COUNT(pa.author_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7019": {
        "db_id": "works_cycles",
        "question": "What is the total ordered quantity for products under the 'Touring' line?",
        "ground_truth": "SELECT SUM(T2.OrderQty) FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'T'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM products WHERE product_line = 'Touring';"
        ],
        "rule_sql": []
    },
    "9284": {
        "db_id": "movie_3",
        "question": "What percentage of films with a length of less than 100 belong to the Drama category?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.length < 100 AND T3.name = 'Drama', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM film WHERE length < 100)) AS percentage\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE f.length < 100 AND c.name = 'Drama';"
        ],
        "rule_sql": []
    },
    "8524": {
        "db_id": "software_company",
        "question": "How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department?",
        "ground_truth": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T2.RESPONSE = 'true' ORDER BY T3.INCOME_K DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM customers c\nJOIN responses r ON c.customer_id = r.customer_id\nWHERE c.customer_id <= 60000\nAND r.response = 'true'\nAND c.place = (\n    SELECT place \n    FROM customers \n    GROUP BY place \n    ORDER BY AVG(income_per_month) DESC \n    LIMIT 1\n);"
        ],
        "rule_sql": []
    },
    "1927": {
        "db_id": "soccer_2016",
        "question": "What is the average number of extra runs made as noballs?",
        "ground_truth": "SELECT AVG(T1.Extra_Runs) FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'noballs'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(runs) FROM deliveries WHERE noball = 1"
        ],
        "rule_sql": []
    },
    "1550": {
        "db_id": "car_retails",
        "question": "What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005?",
        "ground_truth": "SELECT CAST(SUM(T1.amount) AS REAL) / 3, MAX(T1.amount) , MIN(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate BETWEEN '2003-01-01' AND '2005-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(amount) as average_payment, MAX(amount) as highest_payment, MIN(amount) as lowest_payment FROM payments WHERE payment_date BETWEEN '2003-01-01' AND '2005-12-31';"
        ],
        "rule_sql": []
    },
    "1011": {
        "db_id": "computer_student",
        "question": "Find the professor ID and position in faculty who taught high-level undergraduate course of less than 10 in ID.",
        "ground_truth": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.courseLevel = 'Level_400' AND T2.course_id < 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT professor_id, position FROM faculty WHERE course_level = 'undergraduate' AND course_id < 10;"
        ],
        "rule_sql": []
    },
    "8665": {
        "db_id": "chicago_crime",
        "question": "Among the crimes reported to the ward located at 1958 N. Milwaukee Ave., list down the report number of the crimes happened inside the apartment.",
        "ground_truth": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T2.ward_office_address = '1958 N. Milwaukee Ave.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT report_number FROM crimes WHERE ward_address = '1958 N. Milwaukee Ave.' AND location = 'apartment';"
        ],
        "rule_sql": []
    },
    "5884": {
        "db_id": "airline",
        "question": "How many airports have a code starting with the letter C?",
        "ground_truth": "SELECT COUNT(*) FROM Airports WHERE Code LIKE 'C%'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM airports WHERE code LIKE 'C%';"
        ],
        "rule_sql": []
    },
    "5289": {
        "db_id": "beer_factory",
        "question": "Find the brand Id of the root beer which has the most number of customers who gave 1-star ratings.",
        "ground_truth": "SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(BrandID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand_id \nFROM root_beers \nWHERE rating = 1 \nGROUP BY brand_id \nORDER BY COUNT(customer_id) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "198": {
        "db_id": "book_publishing_company",
        "question": "How many publishers are in the USA?",
        "ground_truth": "SELECT COUNT(pub_id) FROM publishers WHERE country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM publishers WHERE country = 'UK';"
        ],
        "rule_sql": []
    },
    "4362": {
        "db_id": "simpson_episodes",
        "question": "List the stars of episodes aired in November 2008.",
        "ground_truth": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 7) = '2008-11';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT star FROM episodes WHERE air_date = 'November 2008';"
        ],
        "rule_sql": []
    },
    "3520": {
        "db_id": "authors",
        "question": "What is the title of the paper published in 1995 and whose author included Thomas Wiegand?",
        "ground_truth": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE year = 1995 AND author = 'Thomas Wiegand';"
        ],
        "rule_sql": []
    },
    "4003": {
        "db_id": "public_review_platform",
        "question": "How many businesses are registered in the database under 'Banks & Credit Unions' category?",
        "ground_truth": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name = 'Banks & Credit Unions'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE category = 'Banks & Credit Unions';"
        ],
        "rule_sql": []
    },
    "4879": {
        "db_id": "legislator",
        "question": "How many Federalist representatives are there whose first names are Benjamin?",
        "ground_truth": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T2.party = 'Federalist' AND T2.type = 'rep' GROUP BY T1.bioguide_id ) AS T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM representatives WHERE party = 'Federalist' AND first_name = 'Benjamin';"
        ],
        "rule_sql": []
    },
    "609": {
        "db_id": "codebase_comments",
        "question": "What is the solution path for the method \"IQ.Data.DbQueryProvider.CanBeEvaluatedLocally\"?",
        "ground_truth": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM methods WHERE name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally';"
        ],
        "rule_sql": []
    },
    "2929": {
        "db_id": "professional_basketball",
        "question": "How much did the win rate increase for the team after getting the No.1 NBA draft pick in the 2003 season than previous season?",
        "ground_truth": "SELECT (CAST(SUM(CASE WHEN T1.year = 2004 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2004 THEN T1.won + T1.lost ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.year = 2003 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2003 THEN T1.won + T1.lost ELSE 0 END)) FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID WHERE T2.draftRound = 1 AND T2.draftYear = 2003",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (t2.win_rate - t1.win_rate) AS win_rate_increase\nFROM \n    (SELECT win_rate FROM team_performance WHERE season = '2002' AND draft_pick IS NULL) t1,\n    (SELECT win_rate FROM team_performance WHERE season = '2003' AND draft_pick = 1) t2;"
        ],
        "rule_sql": []
    },
    "6072": {
        "db_id": "books",
        "question": "What percentage of books written by Hirohiko make up the number of books published by Viz Media?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM books WHERE publisher = 'Viz Media')) AS percentage\nFROM books \nWHERE author = 'Hirohiko'"
        ],
        "rule_sql": []
    },
    "8648": {
        "db_id": "chicago_crime",
        "question": "Provide case numbers, aldermen's full names, and district names of the crimes that happened in 0000X N FRANCISCO AVE.",
        "ground_truth": "SELECT T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T2.block = '0000X N FRANCISCO AVE' GROUP BY T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT case_number, alderman_name, district_name \nFROM crimes \nWHERE location = '0000X N FRANCISCO AVE' \nAND year = 2023;"
        ],
        "rule_sql": []
    },
    "639": {
        "db_id": "codebase_comments",
        "question": "What is the url for repository that has the longest processed time solution?",
        "ground_truth": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT url FROM repositories ORDER BY processed_time DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "69": {
        "db_id": "movie_platform",
        "question": "Which user made a critic for the film \"When Will I Be Loved\" and got 2 comments for the critic?",
        "ground_truth": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.critic_comments = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.username \nFROM users u\nJOIN critics c ON u.user_id = c.user_id\nJOIN films f ON c.film_id = f.film_id\nWHERE f.title = 'When Will I Be Loved'\nAND (SELECT COUNT(*) FROM comments WHERE critic_id = c.critic_id) = 2;"
        ],
        "rule_sql": []
    },
    "5816": {
        "db_id": "language_corpus",
        "question": "How many biwords pairs are there whose second word is \"grec\"?",
        "ground_truth": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T1.word = 'grec'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM biwords WHERE word2 = 'grec';"
        ],
        "rule_sql": []
    },
    "4364": {
        "db_id": "simpson_episodes",
        "question": "In episode with the highest votes, list the category of awards it is nominated for.",
        "ground_truth": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.category \nFROM episodes e\nJOIN awards a ON e.episode_id = a.episode_id\nWHERE e.votes = (SELECT MAX(votes) FROM episodes)\nORDER BY a.category;"
        ],
        "rule_sql": []
    },
    "9197": {
        "db_id": "movie_3",
        "question": "How many times was \"Blanket Beverly\" rented?",
        "ground_truth": "SELECT COUNT(T3.rental_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.title = 'Blanket Beverly'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rentals WHERE customer_name = 'Blanket Beverly';"
        ],
        "rule_sql": []
    },
    "3103": {
        "db_id": "cars",
        "question": "Which country produced the highest number of cars? Calculate the annual average number of cars that the said country produced from the very start to the present.",
        "ground_truth": "SELECT T2.country, CAST(COUNT(T1.ID) AS REAL) / COUNT(DISTINCT T1.model_year) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin GROUP BY T2.country ORDER BY COUNT(T2.country) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as total_cars, AVG(COUNT(*)) as annual_average\nFROM cars\nGROUP BY country\nORDER BY total_cars DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4764": {
        "db_id": "legislator",
        "question": "How many official social media does Mark Warner have?",
        "ground_truth": "SELECT CASE WHEN T1.facebook IS NOT NULL THEN 1 END + CASE WHEN T1.instagram IS NOT NULL THEN 1 END + CASE WHEN T1.twitter IS NOT NULL THEN 1 END + CASE WHEN T1.youtube IS NOT NULL THEN 1 END AS COUNTSOCIAL FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Mark' AND T2.last_name = 'Warner'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM social_media WHERE name = 'Mark Warner' AND type = 'official';"
        ],
        "rule_sql": []
    },
    "9085": {
        "db_id": "bike_share_1",
        "question": "What is the ratio of customer to subscriber that making a trip inside Mountain View city?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Mountain View'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT customer_id) / COUNT(DISTINCT subscriber_id) AS ratio \nFROM trips \nWHERE city = 'Mountain View';"
        ],
        "rule_sql": []
    },
    "3378": {
        "db_id": "video_games",
        "question": "Provide the ID of 1C Company.",
        "ground_truth": "SELECT T.id FROM publisher AS T WHERE T.publisher_name = '1C Company'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name FROM companies WHERE company_id = '1C';"
        ],
        "rule_sql": []
    },
    "1041": {
        "db_id": "talkingdata",
        "question": "How many male users are in the age group of M32-38?",
        "ground_truth": "SELECT COUNT(gender) FROM gender_age WHERE gender = 'M' AND `group` = 'M32-38'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male' AND age BETWEEN 32 AND 38;"
        ],
        "rule_sql": []
    },
    "2090": {
        "db_id": "world_development_indicators",
        "question": "Among the countries in the group of Heavily Indebted Poor Countries, how many of them are under the lending category of the International Development Associations?",
        "ground_truth": "SELECT COUNT(CountryCode) FROM Country WHERE LendingCategory = 'IDA' AND OtherGroups = 'HIPC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countries c\nJOIN lending_categories lc ON c.country_id = lc.country_id\nWHERE c.country_group = 'Heavily Indebted Poor Countries'\nAND lc.lending_category = 'International Development Associations';"
        ],
        "rule_sql": []
    },
    "6955": {
        "db_id": "ice_hockey_draft",
        "question": "Among all penalty minutes picked up by Ak Bars Kazan in the 1999-2000 season, identify the percentage picked up by Yevgeni Muratov.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Yevgeni Muratov' THEN T1.PIM ELSE 0 END) AS REAL) * 100 / SUM(T1.PIM) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1999-2000' AND T1.TEAM = 'Ak Bars Kazan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN player_name = 'Yevgeni Muratov' THEN penalty_minutes ELSE 0 END) * 100.0 / SUM(penalty_minutes)) AS percentage\nFROM penalties\nWHERE team_name = 'Ak Bars Kazan' \nAND season = '1999-2000';"
        ],
        "rule_sql": []
    },
    "3203": {
        "db_id": "donor",
        "question": "What is the total donation amount made for projects whose main subject area are Literacy & Language?",
        "ground_truth": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(donation_amount) FROM donations d JOIN projects p ON d.project_id = p.project_id WHERE p.main_subject_area = 'Literacy & Language';"
        ],
        "rule_sql": []
    },
    "7893": {
        "db_id": "world",
        "question": "How many countries have a life expectancy of 75.1?",
        "ground_truth": "SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM countries WHERE life_expectancy = 75.1;"
        ],
        "rule_sql": []
    },
    "1931": {
        "db_id": "soccer_2016",
        "question": "Tally the player IDs of \"Man of the Series\" awardees for the seasons from 2011 to 2015.",
        "ground_truth": "SELECT Man_of_the_Series FROM Season WHERE 2011 < Season_Year < 2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_id FROM awards WHERE award_name = 'Man of the Series' AND season BETWEEN 2011 AND 2015"
        ],
        "rule_sql": []
    },
    "8340": {
        "db_id": "mondial_geo",
        "question": "Which mountain does the river source Blue Nile located? State the height of the mountain.",
        "ground_truth": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN geo_source AS T4 ON T4.Province = T3.Name WHERE T4.River = 'Blue Nile'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT mountain_name, height FROM mountains WHERE river_name = 'Blue Nile';"
        ],
        "rule_sql": []
    },
    "1561": {
        "db_id": "car_retails",
        "question": "How many Planes orders were there?",
        "ground_truth": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Planes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE plane = 'Planes';"
        ],
        "rule_sql": []
    },
    "1316": {
        "db_id": "law_episode",
        "question": "What percentage of people have worked on the True North episode as additional crew?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.role = 'Additional Crew' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM people)) AS percentage\nFROM crew\nWHERE episode_title = 'True North' AND role = 'additional crew';"
        ],
        "rule_sql": []
    },
    "8998": {
        "db_id": "bike_share_1",
        "question": "Name all the trip on the days when it rained. State the duration of the trip",
        "ground_truth": "SELECT T1.id, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.events LIKE '%Rain%' OR T2.events LIKE '%rain%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT trip_name, duration FROM trips WHERE weather = 'rainy';"
        ],
        "rule_sql": []
    },
    "7527": {
        "db_id": "image_and_language",
        "question": "Define the onion's bounding box on image no. 285930.",
        "ground_truth": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 285930 AND T2.OBJ_CLASS = 'onion'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM images WHERE image_id = 285930;"
        ],
        "rule_sql": []
    },
    "5479": {
        "db_id": "menu",
        "question": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them used the dollar as their currency?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.currency = 'Dollars' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menus WHERE dish_name = 'Clear green turtle' AND currency = 'dollar';"
        ],
        "rule_sql": []
    },
    "4502": {
        "db_id": "student_loan",
        "question": "What is the organization enlisted by student168?",
        "ground_truth": "SELECT organ FROM enlist WHERE name = 'student168'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization FROM students WHERE name = 'student168';"
        ],
        "rule_sql": []
    },
    "6090": {
        "db_id": "books",
        "question": "Who ordered the book with the cheapest price?",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id ORDER BY T1.price ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM orders JOIN books ON orders.book_id = books.book_id ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8120": {
        "db_id": "university",
        "question": "Give the name and score of the university ID 124.",
        "ground_truth": "SELECT T2.university_name, T1.score FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.id = 124",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, score FROM universities WHERE university_id = '124';"
        ],
        "rule_sql": []
    },
    "2495": {
        "db_id": "genes",
        "question": "Among the pairs of genes that are not from the class of motorproteins, how many of them are negatively correlated?",
        "ground_truth": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM gene_expression ge1\nJOIN gene_expression ge2 ON ge1.gene_id = ge2.gene_id\nWHERE ge1.class != 'motorproteins' AND ge2.class != 'motorproteins'\nAND ge1.correlation > 0 AND ge2.correlation > 0;"
        ],
        "rule_sql": []
    },
    "5653": {
        "db_id": "shipping",
        "question": "List all the name of the customers that received a shipment in February 2017.",
        "ground_truth": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_date LIKE '2017-02%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE shipment_date = '2017-02-01';"
        ],
        "rule_sql": []
    },
    "7884": {
        "db_id": "world",
        "question": "Which country has the smallest surface area and the most crowded city?",
        "ground_truth": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC, T2.SurfaceArea DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Country.Name, MIN(Country.SurfaceArea), MAX(City.Population) \nFROM Country \nJOIN City ON Country.Code = City.CountryCode \nGROUP BY Country.Name \nORDER BY MIN(Country.SurfaceArea) ASC, MAX(City.Population) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6113": {
        "db_id": "food_inspection_2",
        "question": "Please list the assumed name of all the facilities inspected by Joshua Rosa.",
        "ground_truth": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT facility_name FROM inspections WHERE inspector = 'Joshua Rosa';"
        ],
        "rule_sql": []
    },
    "3284": {
        "db_id": "donor",
        "question": "What is the name of the vendors that serve resources to schools whose primary focus area is Literature?",
        "ground_truth": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area LIKE 'Literacy%' GROUP BY T1.vendor_name ORDER BY COUNT(T2.primary_focus_area) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name FROM vendors WHERE school_focus = 'Literature';"
        ],
        "rule_sql": []
    },
    "8191": {
        "db_id": "sales_in_weather",
        "question": "What are the top 3 stations that have sold the highest quantities for an item in a single day?",
        "ground_truth": "SELECT T2.station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr ORDER BY T1.units DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT station_id, item_id, MAX(quantity) as max_quantity, date\nFROM sales\nGROUP BY station_id, item_id\nORDER BY max_quantity DESC\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "7838": {
        "db_id": "world",
        "question": "In which continent does the country with the smallest surface area belongs?",
        "ground_truth": "SELECT Continent FROM Country ORDER BY SurfaceArea LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT continent FROM countries ORDER BY surface_area DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2133": {
        "db_id": "world_development_indicators",
        "question": "Please list the indicator names belonging to Education: Inputs topic in 2000.",
        "ground_truth": "SELECT DISTINCT T2.IndicatorName FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year = 'YR2000' AND T2.Topic = 'Education: Inputs'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT indicator_name FROM education_indicators WHERE topic = 'Education: Inputs' AND year = 2000;"
        ],
        "rule_sql": []
    },
    "4736": {
        "db_id": "legislator",
        "question": "How many current legislators do not have an account on ballotpedia.org ?",
        "ground_truth": "SELECT COUNT(*) FROM current WHERE ballotpedia_id = '' OR ballotpedia_id IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE ballotpedia_account IS NULL;"
        ],
        "rule_sql": []
    },
    "4289": {
        "db_id": "simpson_episodes",
        "question": "How many 1 star ratings are there in the worst rated episode of the season?",
        "ground_truth": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 1 ORDER BY T1.rating LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM ratings \nWHERE rating = 1 \nAND episode_id = (\n    SELECT episode_id \n    FROM episodes \n    WHERE season_id = (SELECT season_id FROM seasons ORDER BY rating ASC LIMIT 1)\n    ORDER BY rating ASC \n    LIMIT 1\n);"
        ],
        "rule_sql": []
    },
    "5192": {
        "db_id": "address",
        "question": "Indicate the country name of the city Las Marias.",
        "ground_truth": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Las Marias'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM cities WHERE city_name = 'Las Marias';"
        ],
        "rule_sql": []
    },
    "373": {
        "db_id": "retail_complains",
        "question": "List the full names and phone numbers of clients that were from the Pacific.",
        "ground_truth": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, phone_number FROM clients WHERE region = 'Pacific';"
        ],
        "rule_sql": []
    },
    "5453": {
        "db_id": "sales",
        "question": "How many type of products did Dalton M. Coleman purchase?",
        "ground_truth": "SELECT COUNT(T2.ProductID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Dalton' AND T1.MiddleInitial = 'M' AND T1.LastName = 'Coleman'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE customer_name = 'Dalton M. Coleman';"
        ],
        "rule_sql": []
    },
    "914": {
        "db_id": "cs_semester",
        "question": "List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay.",
        "ground_truth": "SELECT T3.f_name, T3.l_name, T2.capability, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Merwyn' AND T1.last_name = 'Conkay'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ra.first_name, ra.last_name, ra.capabilities, ra.gpa \nFROM research_assistants ra\nJOIN supervisors s ON ra.supervisor_id = s.supervisor_id\nWHERE s.first_name = 'Merwyn' AND s.last_name = 'Conkay';"
        ],
        "rule_sql": []
    },
    "3210": {
        "db_id": "donor",
        "question": "Have the teacher \"42d43fa6f37314365d08692e08680973\" acquired P.h.D or doctor degree?",
        "ground_truth": "SELECT CASE WHEN teacher_prefix = 'Dr.' THEN 'Yes' ELSE 'NO' END FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM teachers WHERE teacher_id = '42d43fa6f37314365d08692e08680973' AND degree = 'P.h.D' OR degree = 'doctor';"
        ],
        "rule_sql": []
    },
    "5699": {
        "db_id": "language_corpus",
        "question": "What is the wikipedia page id of Arqueozoologia?",
        "ground_truth": "SELECT page FROM pages WHERE title = 'Arqueozoologia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_id FROM wikipedia WHERE title = 'Arqueozoologia';"
        ],
        "rule_sql": []
    },
    "7359": {
        "db_id": "works_cycles",
        "question": "Which address type does \"Fun Toys and Bikes\" fall under?",
        "ground_truth": "SELECT T2.Name FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Fun Toys and Bikes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address_type FROM companies WHERE company_name = 'Fun Toys and Bikes';"
        ],
        "rule_sql": []
    },
    "3063": {
        "db_id": "cars",
        "question": "Among the cars with 8 cylinders, what is the name of the one that's the most expensive?",
        "ground_truth": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8 ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cars WHERE cylinders = 8 ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3109": {
        "db_id": "cars",
        "question": "Among the cars produced in year 1973, how many of the cars have horsepower less than 100?",
        "ground_truth": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1973 AND T1.horsepower < 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cars WHERE year = 1973 AND horsepower > 100;"
        ],
        "rule_sql": []
    },
    "1454": {
        "db_id": "synthea",
        "question": "How many patients of Irish ethnicity take medication for 'myocardial infarction'?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Myocardial Infarction' AND T1.ethnicity = 'irish'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM patients p\nJOIN medications m ON p.patient_id = m.patient_id\nWHERE p.ethnicity = 'Irish' \nAND m.medication_name = 'myocardial infarction';"
        ],
        "rule_sql": []
    },
    "2672": {
        "db_id": "regional_sales",
        "question": "Find the average yearly order by customer Weimei Corp for 2018, 2019 and 2020.",
        "ground_truth": "SELECT COUNT(T1.OrderNumber) / 3 FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE (T1.OrderDate LIKE '%/%/18' AND T2.`Customer Names` = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/19' AND T2.`Customer Names` = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/20' AND T2.`Customer Names` = 'Weimei Corp')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(total_amount) as average_yearly_order\nFROM orders\nWHERE customer_name = 'Weimei Corp'\nAND order_date BETWEEN '2018-01-01' AND '2020-12-31'\nGROUP BY YEAR(order_date);"
        ],
        "rule_sql": []
    },
    "3517": {
        "db_id": "authors",
        "question": "Among the authors of the paper \"Stitching videos streamed by mobile phones in real-time\", how many of them are affiliated with Cairo Microsoft Innovation Lab?",
        "ground_truth": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'University of Tokyo' AND T2.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM authors WHERE paper_title = 'Stitching videos streamed by mobile phones in real-time' AND affiliation = 'Cairo Microsoft Innovation Lab';"
        ],
        "rule_sql": []
    },
    "8268": {
        "db_id": "mondial_geo",
        "question": "Please list the names of the countries with an inflation rate that's 30% above the average.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country GROUP BY T1.Name, T2.Inflation HAVING T2.Inflation > AVG(T2.Inflation) * 1.3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE inflation_rate > (SELECT AVG(inflation_rate) * 1.3 FROM countries);"
        ],
        "rule_sql": []
    },
    "4605": {
        "db_id": "mental_health_survey",
        "question": "For the question \u201cWhat US state or territory do you work in?\u201d, how many people gave \"Kansas\" as the answer?",
        "ground_truth": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'What US state or territory do you work in?' AND T1.AnswerText = 'Kansas'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM responses WHERE question = 'What US state or territory do you work in?' AND answer = 'Kansas';"
        ],
        "rule_sql": []
    },
    "2055": {
        "db_id": "music_tracker",
        "question": "Please list the releases that have been downloaded for more than 20000 times.",
        "ground_truth": "SELECT groupName FROM torrents WHERE totalSnatched > 20000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM releases WHERE downloads > 20000;"
        ],
        "rule_sql": []
    },
    "8414": {
        "db_id": "mondial_geo",
        "question": "Based on the data shown at Target, what percentage of countries are non-Christian?",
        "ground_truth": "SELECT 100 - (CAST(SUM(CASE WHEN Target = 'Christian' THEN 1 ELSE 0 END) AS REAL)) * 100 / COUNT(Country) FROM target",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM countries)) AS percentage FROM countries WHERE religion != 'Christian';"
        ],
        "rule_sql": []
    },
    "3146": {
        "db_id": "cars",
        "question": "What is the average weight of Japanese cars with 4 cylinders that were produced from 1975 to 1980?",
        "ground_truth": "SELECT AVG(T1.weight) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year BETWEEN 1975 AND 1980 AND T1.cylinders = 4 AND T3.country = 'Japan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(weight) FROM cars WHERE country = 'Japan' AND cylinders = 4 AND year BETWEEN 1975 AND 1980;"
        ],
        "rule_sql": []
    },
    "2632": {
        "db_id": "regional_sales",
        "question": "From 2018 to 2020, which year did the George Lewis group have the highest number of orders?",
        "ground_truth": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.`Sales Team` = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT YEAR(order_date) as order_year, COUNT(*) as order_count\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.customer_name = 'George Lewis'\n  AND YEAR(order_date) BETWEEN 2018 AND 2020\nGROUP BY YEAR(order_date)\nORDER BY order_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "649": {
        "db_id": "codebase_comments",
        "question": "Please list the names of methods with the solution path \"wallerdev_htmlsharp\\HtmlSharp.sln\".",
        "ground_truth": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM methods WHERE solution_path = 'wallerdev_htmlsharp\\HtmlSharp.sln';"
        ],
        "rule_sql": []
    },
    "2468": {
        "db_id": "shooting",
        "question": "Which are the cases where the subject are female. List the case number, subject status and weapon.",
        "ground_truth": "SELECT T1.case_number, T1.subject_statuses, T1.subject_weapon FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT case_number, subject_status, weapon FROM cases WHERE subject_gender = 'male';"
        ],
        "rule_sql": []
    },
    "5564": {
        "db_id": "menu",
        "question": "What is the image ID of page 1 of the menu \"Zentral Theater Terrace\"?",
        "ground_truth": "SELECT T2.image_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT image_id FROM pages WHERE page_number = 1 AND menu_name = 'Zentral Theater Terrace';"
        ],
        "rule_sql": []
    },
    "2578": {
        "db_id": "regional_sales",
        "question": "Name the sales team and the region of order number 'SO - 000137'.",
        "ground_truth": "SELECT T2.`Sales Team`, T2.Region FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderNumber = 'SO - 000137'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales_team, region FROM orders WHERE order_number = 'SO - 000137'"
        ],
        "rule_sql": []
    },
    "7484": {
        "db_id": "image_and_language",
        "question": "Please list all the predicted relation classes of object sample no.14 in image no.1.",
        "ground_truth": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID = 14 AND T2.OBJ2_SAMPLE_ID = 14",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT relation_class FROM predictions WHERE object_sample_no = 14 AND image_no = 1;"
        ],
        "rule_sql": []
    },
    "7665": {
        "db_id": "hockey",
        "question": "Among the coaches who have gotten in the Hall of Fame, how many of them have a weight of over 195?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.weight > 195",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Coaches WHERE weight > 195 AND hall_of_fame = 'Yes';"
        ],
        "rule_sql": []
    },
    "2667": {
        "db_id": "regional_sales",
        "question": "Mention the customer names and IDs which ordered total net profit of above 5000 USD through online channel.",
        "ground_truth": "SELECT DISTINCT `Customer Names`, CustomerID FROM ( SELECT T2.`Customer Names`, T2.CustomerID , SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) AS T FROM `Sales Orders` T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.`Sales Channel` = 'Online' GROUP BY T2.CustomerID ) WHERE T > 5000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, customer_name \nFROM customers \nWHERE total_net_profit > 5000 \nAND channel = 'online';"
        ],
        "rule_sql": []
    },
    "2886": {
        "db_id": "professional_basketball",
        "question": "Name the team in which the coach won the title 'NBA Coach of the Year' in 2010.",
        "ground_truth": "SELECT DISTINCT T1.tmID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 2010 AND T2.award = 'NBA Coach of the Year'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM coaches WHERE year = 2010 AND award = 'NBA Coach of the Year';"
        ],
        "rule_sql": []
    },
    "623": {
        "db_id": "codebase_comments",
        "question": "Give the number of solutions that the repository which has 3060 Stars contains.",
        "ground_truth": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM solutions WHERE repository_id IN (SELECT id FROM repositories WHERE stars = 3060);"
        ],
        "rule_sql": []
    },
    "1625": {
        "db_id": "car_retails",
        "question": "Who is the sales representitive of Muscle Machine Inc? Please give the employee's full name.",
        "ground_truth": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE company = 'Muscle Machine Inc' AND department = 'Sales'"
        ],
        "rule_sql": []
    },
    "9249": {
        "db_id": "movie_3",
        "question": "Among the movies, what percentage are horror?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.name = 'horror', 1, 0)) AS REAL) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM movies) AS percentage FROM movies WHERE genre = 'Horror';"
        ],
        "rule_sql": []
    },
    "5078": {
        "db_id": "olympics",
        "question": "Provide the age of the tallest competitor.",
        "ground_truth": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(age) FROM competitors WHERE height = (SELECT MAX(height) FROM competitors);"
        ],
        "rule_sql": []
    },
    "3649": {
        "db_id": "authors",
        "question": "List all the titles and their publishing journals from the 60's.",
        "ground_truth": "SELECT T1.Title, T1.JournalId FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year >= 1960 AND T1.Year <= 1970",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, journal FROM publications WHERE year BETWEEN 1960 AND 1969;"
        ],
        "rule_sql": []
    },
    "3512": {
        "db_id": "authors",
        "question": "What is the url of the journal in which the paper \"Area Effects in Cepaea\" was published?",
        "ground_truth": "SELECT T1.HomePage FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Area Effects in Cepaea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT url FROM papers WHERE title = 'Area Effects in Cepaea';"
        ],
        "rule_sql": []
    },
    "7605": {
        "db_id": "image_and_language",
        "question": "What is the predicate class of image ID 68?",
        "ground_truth": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 68",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM images WHERE id = 68;"
        ],
        "rule_sql": []
    },
    "1472": {
        "db_id": "synthea",
        "question": "Give me the reason, name of the drug, and duration of medication under encounter ID 23c293ec-dbae-4a22-896e-f12cf3c8bac3. Tell me if the patient is still alive.",
        "ground_truth": "SELECT T2.REASONDESCRIPTION, T2.DESCRIPTION , strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days , CASE WHEN T1.deathdate IS NULL THEN 'alive' ELSE 'dead' END FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.ENCOUNTER = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reason, drug_name, duration, is_alive \nFROM medications \nWHERE encounter_id = '23c293ec-dbae-4a22-896e-f12cf3c8bac3';"
        ],
        "rule_sql": []
    },
    "7209": {
        "db_id": "works_cycles",
        "question": "Among the employees born before 1980 , how many of them are single?",
        "ground_truth": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 's' AND BirthDate < '1980-1-1'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE birth_date < '1980-01-01' AND marital_status = 'single';"
        ],
        "rule_sql": []
    },
    "7534": {
        "db_id": "image_and_language",
        "question": "What colour is the van that can be spotted in image no. 1?",
        "ground_truth": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1 GROUP BY T4.ATT_CLASS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT color FROM vans WHERE image_id = 1;"
        ],
        "rule_sql": []
    },
    "1403": {
        "db_id": "synthea",
        "question": "Among the patients who were immunized with meningococcal MCV4P, how many have viral sinusitis disorder after getting the immunization?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.patient) FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'meningococcal MCV4P' AND T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM patients p\nJOIN immunizations i ON p.patient_id = i.patient_id\nJOIN conditions c ON p.patient_id = c.patient_id\nWHERE i.immunization_code = 'MCV4P'\nAND c.condition_name = 'viral sinusitis'\nAND c.start_date > i.date"
        ],
        "rule_sql": []
    },
    "3122": {
        "db_id": "cars",
        "question": "Among the cars introduced in 1977, provide the names and the horse powers of cars from Europe.",
        "ground_truth": "SELECT T1.car_name, T1.horsepower FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1977 AND T3.country = 'Europe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, horsepower FROM cars WHERE year = 1977 AND continent = 'Europe';"
        ],
        "rule_sql": []
    },
    "1138": {
        "db_id": "talkingdata",
        "question": "Among the female users of the devices, how many of them are over 30?",
        "ground_truth": "SELECT COUNT(device_id) FROM gender_age WHERE age > 30 AND gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female' AND age > 30"
        ],
        "rule_sql": []
    },
    "7102": {
        "db_id": "works_cycles",
        "question": "What is the percentage of the total products ordered were not rejected by Drill size?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN rejected = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_not_rejected\nFROM products\nWHERE drill_size IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "4779": {
        "db_id": "legislator",
        "question": "Give the official full names of legislators representing Virginia.",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'VA' GROUP BY T1.official_full_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators WHERE state = 'Virginia';"
        ],
        "rule_sql": []
    },
    "9106": {
        "db_id": "movie_3",
        "question": "Which film has the longest duration of film screening? Please give its title.",
        "ground_truth": "SELECT title FROM film ORDER BY length DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films ORDER BY duration ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1558": {
        "db_id": "car_retails",
        "question": "How many distinct orders were there in 2003 when the quantity ordered was less than 30?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered < 30 AND STRFTIME('%Y', T2.orderDate) = '2003'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE order_date LIKE '2003%' AND quantity < 30;"
        ],
        "rule_sql": []
    },
    "685": {
        "db_id": "codebase_comments",
        "question": "Provide the github address with the summary of method \"A test for Decompose\n\".",
        "ground_truth": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT github_address FROM methods WHERE method_name = 'A test for Decompose' AND summary IS NULL;"
        ],
        "rule_sql": []
    },
    "4120": {
        "db_id": "public_review_platform",
        "question": "List down the business ID with a high review count in Tempe.",
        "ground_truth": "SELECT business_id FROM Business WHERE review_count = 'High' AND city = 'Tempe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM business WHERE city = 'Tempe' ORDER BY review_count ASC LIMIT 10;"
        ],
        "rule_sql": []
    },
    "8304": {
        "db_id": "mondial_geo",
        "question": "Which mountain is the highest in an independent country?",
        "ground_truth": "SELECT T4.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_mountain AS T3 ON T3.Country = T2.Country INNER JOIN mountain AS T4 ON T4.Name = T3.Mountain WHERE T2.Independence IS NOT NULL ORDER BY T4.Height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM mountains WHERE country_status = 'independent' ORDER BY elevation DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2293": {
        "db_id": "movielens",
        "question": "List the ids and ratings of each actors played in the movie with the id 1722327?",
        "ground_truth": "SELECT T1.actorid, T1.a_quality FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1722327",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_id, rating FROM actors WHERE movie_id = 1722327;"
        ],
        "rule_sql": []
    },
    "7732": {
        "db_id": "hockey",
        "question": "How many players, whose shooting/catching hand is both left and right, debuted their first NHL in 2011?",
        "ground_truth": "SELECT COUNT(playerID) FROM Master WHERE shootCatch IS NULL AND firstNHL = '2011'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players \nWHERE shooting_hand = 'both' \nAND catching_hand = 'both' \nAND debut_year = 2011;"
        ],
        "rule_sql": []
    },
    "3497": {
        "db_id": "video_games",
        "question": "In what platform does the game ID 178 available?",
        "ground_truth": "SELECT T3.platform_name FROM game_publisher AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.game_publisher_id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.game_id = 178",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform FROM games WHERE game_id = 178"
        ],
        "rule_sql": []
    },
    "687": {
        "db_id": "codebase_comments",
        "question": "How many solution path does the repository with 111 stars, 58 forks, and 111 watchers?",
        "ground_truth": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM repositories WHERE stars = 111 AND forks = 58 AND watchers = 111;"
        ],
        "rule_sql": []
    },
    "5307": {
        "db_id": "beer_factory",
        "question": "How many Folsom customers prefer to pay with Visa?",
        "ground_truth": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'Folsom' AND T2.CreditCardType = 'Visa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE city = 'Folsom' AND payment_method = 'Visa';"
        ],
        "rule_sql": []
    },
    "3552": {
        "db_id": "authors",
        "question": "Name the title, year and keyword of the paper which were written by the author ID of 661002 with the affiliation of \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\" organization.",
        "ground_truth": "SELECT T2.Title, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId = 661002 AND T1.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.title, p.year, p.keyword \nFROM papers p \nJOIN authors a ON p.author_id = a.author_id \nWHERE a.author_id = 661002 \nAND a.affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA'"
        ],
        "rule_sql": []
    },
    "3721": {
        "db_id": "college_completion",
        "question": "How many 2-year private nonprofit schools in \"CT\" whose graduation rate falls below the average for the state?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'CT' AND T2.level = '2-year' AND T1.control = 'Private not-for-profit' AND T1.awards_per_value < T1.awards_per_natl_value",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM schools \nWHERE state = 'CT' \n  AND control = 'Private nonprofit' \n  AND years = 2 \n  AND grad_rate < (SELECT AVG(grad_rate) FROM schools WHERE state = 'CT')"
        ],
        "rule_sql": []
    },
    "1998": {
        "db_id": "soccer_2016",
        "question": "Among the matches in 2013, what is the percentage of winning of the team \"Mumbai Indians\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Match_Winner = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date LIKE '2013%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN winner = 'Mumbai Indians' THEN 1 END) * 100.0 / COUNT(*)) AS win_percentage FROM matches WHERE season = 2013 AND (team1 = 'Mumbai Indians' OR team2 = 'Mumbai Indians')"
        ],
        "rule_sql": []
    },
    "5847": {
        "db_id": "airline",
        "question": "Provide the name of the airport which landed the most number of flights on 2018/8/15.",
        "ground_truth": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/15' ORDER BY T2.DEST DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT airport_name FROM airports ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4853": {
        "db_id": "legislator",
        "question": "Which legislators do not have instagram account?",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.instagram IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM legislators WHERE instagram IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "8018": {
        "db_id": "university",
        "question": "List the name of universities located in Spain.",
        "ground_truth": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Spain'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE country = 'Spain';"
        ],
        "rule_sql": []
    },
    "2452": {
        "db_id": "superstore",
        "question": "Among the customers from Houston, Texas, what is the total profit of their orders in the Central region?",
        "ground_truth": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.City = 'Houston' AND T1.State = 'Texas' AND T2.Region = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(profit) FROM orders WHERE customer_city = 'Houston' AND customer_state = 'Texas' AND region = 'Central';"
        ],
        "rule_sql": []
    },
    "6233": {
        "db_id": "food_inspection_2",
        "question": "How many restaurants failed the inspection in April 2010?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-04' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE inspection_date LIKE '2010-04%' AND result = 'Pass';"
        ],
        "rule_sql": []
    },
    "7364": {
        "db_id": "works_cycles",
        "question": "What is the name of the state that Racine belongs to?",
        "ground_truth": "SELECT T2.Name FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T1.City = 'Racine'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state_name FROM cities WHERE city_name = 'Racine';"
        ],
        "rule_sql": []
    },
    "8544": {
        "db_id": "software_company",
        "question": "List the marital status of customers within the age of 40 to 60 that has the highest income among the group.",
        "ground_truth": "SELECT T1.MARITAL_STATUS FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 ORDER BY T2.INCOME_K DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT marital_status, MAX(income) FROM customers WHERE age BETWEEN 40 AND 60 GROUP BY marital_status ORDER BY MAX(income) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4407": {
        "db_id": "student_loan",
        "question": "What is the longest students absence duration from school?",
        "ground_truth": "SELECT name, month FROM longest_absense_from_school WHERE `month` = ( SELECT MAX(month) FROM longest_absense_from_school )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(absence_end_date - absence_start_date) AS longest_absence FROM student_absences;"
        ],
        "rule_sql": []
    },
    "112": {
        "db_id": "movie_platform",
        "question": "Which year had the most released films?",
        "ground_truth": "SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as film_count FROM films GROUP BY year ORDER BY film_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7683": {
        "db_id": "hockey",
        "question": "Which team did player Id \"roypa01\" play in 1992? Give the team id.",
        "ground_truth": "SELECT tmID FROM Goalies WHERE playerID = 'roypa01' AND year = 1992",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_id FROM players WHERE player_id = 'roypa01' AND year = 1992;"
        ],
        "rule_sql": []
    },
    "897": {
        "db_id": "cs_semester",
        "question": "How many courses does the student with the highest GPA this semester take?",
        "ground_truth": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE GPA = (SELECT MAX(GPA) FROM students);"
        ],
        "rule_sql": []
    },
    "6744": {
        "db_id": "retails",
        "question": "Among the customers in the furniture market segment, how many of them have a nation key of 1?",
        "ground_truth": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customer WHERE market_segment = 'FURNITURE' AND nation_key != 1;"
        ],
        "rule_sql": []
    },
    "2478": {
        "db_id": "shooting",
        "question": "In how many cases where the subject was a female was the subject's status listed as Deceased?",
        "ground_truth": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F' AND T1.subject_statuses = 'Deceased'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM subjects WHERE gender = 'Male' AND status = 'Deceased';"
        ],
        "rule_sql": []
    },
    "141": {
        "db_id": "movie_platform",
        "question": "Name all lists created by a user who was a subcriber when created the list.",
        "ground_truth": "SELECT DISTINCT T2.list_id FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_subscriber = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT l.name FROM lists l JOIN users u ON l.user_id = u.id WHERE u.subscriber = 1;"
        ],
        "rule_sql": []
    },
    "3622": {
        "db_id": "authors",
        "question": "What is the short name for \"Software - Concepts and Tools / Structured Programming\"?",
        "ground_truth": "SELECT ShortName FROM Journal WHERE FullName = 'Software - Concepts and Tools / Structured Programming'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT short_name FROM courses WHERE title = 'Software - Concepts and Tools / Structured Programming';"
        ],
        "rule_sql": []
    },
    "3730": {
        "db_id": "college_completion",
        "question": "Give the state and name of institutions in year of data release from 2010 to 2012 with black students.",
        "ground_truth": "SELECT DISTINCT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'B' AND T2.year BETWEEN 2010 AND 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, name FROM institutions WHERE year BETWEEN 2010 AND 2012 AND black_students > 0;"
        ],
        "rule_sql": []
    },
    "7010": {
        "db_id": "works_cycles",
        "question": "Which product line has the most products that are salable?",
        "ground_truth": "SELECT ProductLine FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY COUNT(FinishedGoodsFlag) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_line, COUNT(*) as product_count FROM products WHERE status = 'salable' GROUP BY product_line ORDER BY product_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6068": {
        "db_id": "books",
        "question": "List 10 addresses located in Poland.",
        "ground_truth": "SELECT T1.street_number, T1.street_name, T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Poland' LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM addresses WHERE country = 'Poland' LIMIT 10;"
        ],
        "rule_sql": []
    },
    "9349": {
        "db_id": "movie_3",
        "question": "State the documentary film titles with longest length.",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'documentary' ORDER BY T1.length DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM documentaries ORDER BY length DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5143": {
        "db_id": "address",
        "question": "List all representatives of districts which have more than 30 000 population in 2020.",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.population_2020 > 30000 GROUP BY T3.first_name, T3.last_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM representatives WHERE population > 30000 AND year = 2020;"
        ],
        "rule_sql": []
    },
    "7569": {
        "db_id": "image_and_language",
        "question": "List attributes for object class 'tip' In image 1314.",
        "ground_truth": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T3.IMG_ID = 1314 AND T4.OBJ_CLASS = 'tip'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM attributes WHERE object_class = 'tip' AND image_id = 1314;"
        ],
        "rule_sql": []
    },
    "4578": {
        "db_id": "mental_health_survey",
        "question": "What are the ages of the oldest and youngest user that were surveyed? Indicate their user id.",
        "ground_truth": "SELECT MAX(T1.AnswerText), MIN(T1.AnswerText) , ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1 ORDER BY T1.AnswerText LIMIT 1 ) AS \"youngest id\" FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(age) as oldest_age, MIN(age) as youngest_age FROM users;"
        ],
        "rule_sql": []
    },
    "3674": {
        "db_id": "authors",
        "question": "Indicate the number of authors affiliated with the organization named 'Arizona State University'.",
        "ground_truth": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Arizona State University'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM authors WHERE organization = 'Arizona State University';"
        ],
        "rule_sql": []
    },
    "8733": {
        "db_id": "chicago_crime",
        "question": "What is the percentage of severe cases that are related to sexual assault?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN primary_description = 'CRIM SEXUAL ASSAULT' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM IUCR WHERE index_code = 'I'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN severity = 'severe' AND assault_type = 'sexual' THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN severity = 'severe' THEN 1 END)) AS percentage\nFROM cases;"
        ],
        "rule_sql": []
    },
    "7629": {
        "db_id": "hockey",
        "question": "Name the deceased players whose death country is different from his birth country order by birth year.",
        "ground_truth": "SELECT firstName, lastName FROM Master WHERE birthCountry != deathCountry ORDER BY birthYear",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, birth_country, death_country, birth_year \nFROM players \nWHERE death_country = birth_country \nORDER BY birth_year;"
        ],
        "rule_sql": []
    },
    "3724": {
        "db_id": "college_completion",
        "question": "What was the number of female Hispanic students who graduated within 100 percent of expected time for \"Pennsylvania State University-Altoona\"?",
        "ground_truth": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Pennsylvania State University-Altoona' AND T2.gender = 'F' AND T2.race = 'H'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'Male' AND ethnicity = 'Hispanic' AND graduation_rate = 100 AND university = 'Pennsylvania State University-Altoona';"
        ],
        "rule_sql": []
    },
    "1862": {
        "db_id": "soccer_2016",
        "question": "How many players got out by being stumped in the second innings of all matches?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Innings_No = 2 THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'stumped'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM player_out WHERE out_type = 'stumped' AND innings = 2"
        ],
        "rule_sql": []
    },
    "1705": {
        "db_id": "restaurant",
        "question": "Please list all of the street names in Clayton City.",
        "ground_truth": "SELECT street_name FROM location WHERE city = 'Clayton'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT street_name FROM addresses WHERE city = 'Clayton';"
        ],
        "rule_sql": []
    },
    "7910": {
        "db_id": "world",
        "question": "What is the life expectancy of the countries that uses Japanese as their language?",
        "ground_truth": "SELECT AVG(T2.LifeExpectancy) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Japanese'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT life_expectancy FROM countries WHERE language = 'Japanese';"
        ],
        "rule_sql": []
    },
    "6677": {
        "db_id": "retails",
        "question": "Please list the order comments of all the orders made by customers in the household segment.",
        "ground_truth": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o_comment FROM orders WHERE c_mktsegment = 'household'"
        ],
        "rule_sql": []
    },
    "4479": {
        "db_id": "student_loan",
        "question": "Calculate the ratio in percentage between the average number of female and male students who joined Fire Department organization.",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name), CAST(SUM(IIF(T2.name IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'fire_department'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (AVG(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) / AVG(CASE WHEN gender = 'M' THEN 1 ELSE 0 END)) * 100 AS ratio_percentage\nFROM students\nWHERE organization = 'Fire Department';"
        ],
        "rule_sql": []
    },
    "6957": {
        "db_id": "ice_hockey_draft",
        "question": "What is the weight in kg of Tony Martensson?",
        "ground_truth": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Tony Martensson'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight FROM players WHERE name = 'Tony Martensson';"
        ],
        "rule_sql": []
    },
    "3555": {
        "db_id": "authors",
        "question": "Under the conference name of MICRO, calculate how many more paper is needed to published in 1971 to 1980 in average by yearly to get equivalent to the number of paper from 1991 to 2000. Write down the title and author name of the paper that were actually published during 1971 to 1980 with the conference name with MICRO.",
        "ground_truth": "SELECT T2.title, T3.name, T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.id = T2.ConferenceId INNER JOIN PaperAuthor AS T3 ON T1.id = T3.PaperId WHERE T1.ShortName = 'MICRO' AND T2.Year BETWEEN '1971' AND '1980'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM papers WHERE conference = 'MICRO' AND year BETWEEN 1991 AND 2000) - \n    (SELECT COUNT(*) FROM papers WHERE conference = 'MICRO' AND year BETWEEN 1971 AND 1980) AS more_papers_needed,\n    title,\n    author\nFROM papers\nWHERE conference = 'MICRO' AND year BETWEEN 1971 AND 1980;"
        ],
        "rule_sql": []
    },
    "2410": {
        "db_id": "superstore",
        "question": "List the name of all the products with order quantities greater than or equal to 10 in the central superstore that has been shipped by the slowest delivery method.",
        "ground_truth": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Mode` = 'Standard Class' AND T1.Quantity >= 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name \nFROM products p\nJOIN orders o ON p.product_id = o.product_id\nJOIN stores s ON o.store_id = s.store_id\nJOIN deliveries d ON o.delivery_id = d.delivery_id\nWHERE o.quantity >= 10\nAND s.name = 'central superstore'\nAND d.method = (SELECT method FROM deliveries ORDER BY speed DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "501": {
        "db_id": "movies_4",
        "question": "Find out the popularity of the movies with the highest vote count.",
        "ground_truth": "SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, vote_count, popularity FROM movies ORDER BY vote_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4195": {
        "db_id": "simpson_episodes",
        "question": "State the name of director for the 'Treehouse of Horror XIX' episode.",
        "ground_truth": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Treehouse of Horror XIX' AND T2.role = 'director';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM episodes WHERE title = 'Treehouse of Horror XIX';"
        ],
        "rule_sql": []
    },
    "1706": {
        "db_id": "restaurant",
        "question": "What are the most popular restaurants in San Francisco among diners?",
        "ground_truth": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM restaurants WHERE city = 'San Francisco' ORDER BY RANDOM() LIMIT 10;"
        ],
        "rule_sql": []
    },
    "1250": {
        "db_id": "law_episode",
        "question": "How many votes did the episode titled \"Cherished\" get in total?",
        "ground_truth": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE title = 'Cherished';"
        ],
        "rule_sql": []
    },
    "5865": {
        "db_id": "airline",
        "question": "What is the name of the airline with the highest number of non-cancelled flights?",
        "ground_truth": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLED = 0 GROUP BY T2.Description ORDER BY COUNT(T1.CANCELLED) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM airlines ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4749": {
        "db_id": "legislator",
        "question": "For how many terms has current legislator Sherrod Brown served?",
        "ground_truth": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE name = 'Sherrod Brown' AND current = 1;"
        ],
        "rule_sql": []
    },
    "5025": {
        "db_id": "olympics",
        "question": "What is the percentage of champions at the age of over 30?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.age > 30 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id WHERE T1.medal_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM champions) AS percentage FROM champions WHERE age <= 30;"
        ],
        "rule_sql": []
    },
    "8472": {
        "db_id": "mondial_geo",
        "question": "What is the organization(s) that has 'National Society' as member type.",
        "ground_truth": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T2.Type = 'National Society'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization FROM members WHERE member_type = 'National Society';"
        ],
        "rule_sql": []
    },
    "7128": {
        "db_id": "works_cycles",
        "question": "Please list the total number of companies with a commission percentage of 0.018 or above, along with each company's assigned geographical location.",
        "ground_truth": "SELECT T1.BusinessEntityID, T2.'Group' FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 USING (territoryid) WHERE T1.CommissionPct >= 0.018",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, geographical_location, COUNT(*) as total_companies \nFROM companies \nWHERE commission_percentage >= 0.018 \nGROUP BY company_name, geographical_location"
        ],
        "rule_sql": []
    },
    "4828": {
        "db_id": "legislator",
        "question": "Give the district numbers with an Anti-Administration party.",
        "ground_truth": "SELECT district FROM `historical-terms` WHERE party = 'Anti-Administration' GROUP BY district",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district FROM representatives WHERE party = 'Anti-Administration'"
        ],
        "rule_sql": []
    },
    "3870": {
        "db_id": "public_review_platform",
        "question": "What is the longest business time on Mondays for a Yelp_Business under the category \"Shopping\"?",
        "ground_truth": "SELECT T1.closing_time + 12 - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id INNER JOIN Business_Categories AS T4 ON T3.business_id = T4.business_id INNER JOIN Categories AS T5 ON T4.category_id = T5.category_id WHERE T2.day_of_week LIKE 'Monday' AND T5.category_name LIKE 'Shopping' ORDER BY T1.closing_time + 12 - T1.opening_time DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(business_time) FROM Yelp_Business WHERE category = 'Shopping' AND day_of_week = 'Monday';"
        ],
        "rule_sql": []
    },
    "8042": {
        "db_id": "university",
        "question": "Which universities have more than 100,000 students in 2011?",
        "ground_truth": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T1.num_students > 100000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_name FROM universities WHERE students > 100000 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "3867": {
        "db_id": "public_review_platform",
        "question": "Please list the categories of the Yelp_Business that closes at 12PM on Sundays.",
        "ground_truth": "SELECT T4.category_name FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T4.category_id = T4.category_id WHERE T1.closing_time = '12PM' AND T2.day_of_week = 'Sunday' GROUP BY T4.category_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM Yelp_Business WHERE Sunday_close = '12PM';"
        ],
        "rule_sql": []
    },
    "1174": {
        "db_id": "talkingdata",
        "question": "Provide the locations and times of the events of app ID \"8715964299802120000\".",
        "ground_truth": "SELECT T1.longitude, T1.latitude, T1.timestamp FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = 8715964299802120000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location, time FROM events WHERE app_id = 8715964299802120000"
        ],
        "rule_sql": []
    },
    "7996": {
        "db_id": "university",
        "question": "What is the name of the university that has the lowest number of students of all time?",
        "ground_truth": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities ORDER BY student_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2580": {
        "db_id": "regional_sales",
        "question": "Among orders in 2020, name the customers who had the greatest discount applied for 'Cocktail Glasses'",
        "ground_truth": "SELECT DISTINCT T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.`Product Name` = 'Cocktail Glasses' AND SUBSTR(T2.OrderDate, -2) = '20' AND T2.`Discount Applied` = ( SELECT T2.`Discount Applied` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.`Product Name` = 'Cocktail Glasses' AND T2.OrderDate LIKE '%/%/20' ORDER BY T2.`Discount Applied` DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN products p ON oi.product_id = p.product_id\nWHERE p.product_name = 'Cocktail Glasses'\nAND o.order_date LIKE '2020%'\nORDER BY oi.discount DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1894": {
        "db_id": "soccer_2016",
        "question": "List the name of the players born between 1970 and 1990 in descending order of age.",
        "ground_truth": "SELECT Player_Name FROM Player WHERE DOB BETWEEN '1970-01-01' AND '1990-12-31' ORDER BY DOB DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players WHERE birth_year BETWEEN 1970 AND 1990 ORDER BY birth_year ASC;"
        ],
        "rule_sql": []
    },
    "2098": {
        "db_id": "world_development_indicators",
        "question": "What is the long name of the country with the description \"Estimates are derived from data on foreign-born population.\" on the series code SM.POP.TOTL?",
        "ground_truth": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT long_name FROM countries WHERE description = 'Estimates are derived from data on foreign-born population.' AND series_code = 'SM.POP.TOTL';"
        ],
        "rule_sql": []
    },
    "2562": {
        "db_id": "app_store",
        "question": "What is the average price of games belonging in the arcade genre which has a content rating of Everyone 10+?",
        "ground_truth": "SELECT AVG(Price) FROM playstore WHERE 'Content Rating' = 'Everyone 10+' AND Genres = 'Arcade'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM games WHERE genre = 'Arcade' AND content_rating = 'Everyone 10+';"
        ],
        "rule_sql": []
    },
    "2294": {
        "db_id": "movielens",
        "question": "Which directors with the best quality directed the most films?",
        "ground_truth": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5 GROUP BY T1.directorid ORDER BY COUNT(T2.movieid) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director, COUNT(*) as film_count \nFROM films \nGROUP BY director \nORDER BY film_count DESC \nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "3237": {
        "db_id": "donor",
        "question": "What is the total donation amount for the project 'Engaging Young Readers with a Leveled Classroom Library'?",
        "ground_truth": "SELECT SUM(T2.donation_to_project) + SUM(T2.donation_optional_support) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Engaging Young Readers with a Leveled Classroom Library '",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM donations WHERE project_name = 'Engaging Young Readers with a Leveled Classroom Library';"
        ],
        "rule_sql": []
    },
    "8313": {
        "db_id": "mondial_geo",
        "question": "Please list the countries on the European Continent that have a population growth of more than 3%.",
        "ground_truth": "SELECT T2.Country FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Population_Growth > 0.03",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM countries WHERE continent = 'Europe' AND population_growth > 0.03"
        ],
        "rule_sql": []
    },
    "8806": {
        "db_id": "food_inspection",
        "question": "How many eateries applied in 2012?",
        "ground_truth": "SELECT COUNT(business_id) FROM businesses WHERE STRFTIME('%Y', application_date) = '2012'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM eateries WHERE applied_year = 2012;"
        ],
        "rule_sql": []
    },
    "1656": {
        "db_id": "car_retails",
        "question": "When was the product with the highest unit price shipped?",
        "ground_truth": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(ShippedDate) FROM Products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM Products);"
        ],
        "rule_sql": []
    },
    "4079": {
        "db_id": "public_review_platform",
        "question": "Mention the user ID and their year of joining Yelp who had great experience on business ID 143.",
        "ground_truth": "SELECT T2.user_id, T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.business_id = 143 AND T1.review_stars = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, year_joined FROM users WHERE business_id = 143 AND experience = 'great';"
        ],
        "rule_sql": []
    },
    "4720": {
        "db_id": "disney",
        "question": "How many movies were released by Disney between 2010 and 2016?",
        "ground_truth": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '10' AND '16'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE studio = 'Disney' AND release_year BETWEEN 2010 AND 2016;"
        ],
        "rule_sql": []
    },
    "1658": {
        "db_id": "car_retails",
        "question": "Please list the order number of the customer whose credit card has a limit of 45300.",
        "ground_truth": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_number FROM customers WHERE credit_limit = 45300;"
        ],
        "rule_sql": []
    },
    "9352": {
        "db_id": "movie_3",
        "question": "List down all of the customers' first name who were attended by staff with ID 1.",
        "ground_truth": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers WHERE staff_id = 1;"
        ],
        "rule_sql": []
    },
    "7065": {
        "db_id": "works_cycles",
        "question": "Among the employees who are married, how many of them have a western name style?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.MaritalStatus = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE marital_status = 'Married' AND name LIKE '%, %';"
        ],
        "rule_sql": []
    },
    "3818": {
        "db_id": "public_review_platform",
        "question": "Which city has the highest number of businesses in the food industry whose number of reviews is high?",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.review_count LIKE 'High' AND T3.category_name LIKE 'Food' GROUP BY T1.city",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as business_count \nFROM businesses \nWHERE industry = 'food' \nORDER BY review_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2645": {
        "db_id": "regional_sales",
        "question": "State the name of all city in Maricopa County along with its latitude and longitude.",
        "ground_truth": "SELECT DISTINCT `City Name`, Latitude, Longitude FROM `Store Locations` WHERE County = 'Maricopa County'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name, latitude, longitude FROM cities WHERE county = 'Maricopa'"
        ],
        "rule_sql": []
    },
    "7156": {
        "db_id": "works_cycles",
        "question": "For the on going assembly item Component ID No. 494, what's the Unit measure for it?",
        "ground_truth": "SELECT T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.ComponentID = 494 AND T1.EndDate IS NULL GROUP BY T2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT unit_measure FROM assembly_items WHERE component_id = 494 AND status = 'completed';"
        ],
        "rule_sql": []
    },
    "6038": {
        "db_id": "books",
        "question": "What is the highest price at which a customer bought the book 'The Prophet'?",
        "ground_truth": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Prophet'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price) FROM books WHERE title = 'The Prophet';"
        ],
        "rule_sql": []
    },
    "6959": {
        "db_id": "ice_hockey_draft",
        "question": "Who has the heaviest weight?",
        "ground_truth": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id ORDER BY T2.weight_in_kg DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM athletes ORDER BY weight ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "952": {
        "db_id": "cs_semester",
        "question": "Of the students with high salaries, how many took the computer vision course?",
        "ground_truth": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM students s\nJOIN courses c ON s.student_id = c.student_id\nWHERE s.salary > 100000 \nAND c.course_name = 'computer vision';"
        ],
        "rule_sql": []
    },
    "6876": {
        "db_id": "retails",
        "question": "Among the suppliers providing parts under the type \"promo brushed steel\", how many of them are in debt?",
        "ground_truth": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T3.s_acctbal < 0 AND T1.p_type = 'PROMO BRUSHED STEEL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM suppliers WHERE part_type = 'promo brushed steel' AND debt > 0;"
        ],
        "rule_sql": []
    },
    "4254": {
        "db_id": "simpson_episodes",
        "question": "Among episodes from 10 to 20, which episode has more than 200 votes?",
        "ground_truth": "SELECT DISTINCT T1.episode FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode BETWEEN 10 AND 20 AND T2.votes > 200;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_number FROM episodes WHERE episode_number BETWEEN 10 AND 20 AND votes > 200;"
        ],
        "rule_sql": []
    },
    "8325": {
        "db_id": "mondial_geo",
        "question": "List the all the cities and its city population for provinces with population more than 1000000.",
        "ground_truth": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN province AS T2 ON T2.Name = T1.Province WHERE T2.Population > 1000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, city_population FROM cities WHERE province_population > 1000000;"
        ],
        "rule_sql": []
    },
    "4129": {
        "db_id": "public_review_platform",
        "question": "What is the category of the business with short review length and highest review stars within business ID from 7 to 14?",
        "ground_truth": "SELECT DISTINCT T3.category_name FROM Reviews AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T2.business_id >= 7 AND T2.business_id < 15 AND T1.review_length = 'Short' AND T1.review_stars = ( SELECT MAX(review_stars) FROM Reviews )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM businesses WHERE business_id BETWEEN 7 AND 14 ORDER BY review_stars DESC, LENGTH(review_text) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5262": {
        "db_id": "beer_factory",
        "question": "For the customer who gave a 3 star rating to Frostie brand on 2014/4/24, did the user permit the company to send regular emails to him/her?",
        "ground_truth": "SELECT CASE WHEN T1.SubscribedToEmailList LIKE 'TRUE' THEN 'YES' ELSE 'NO' END AS result FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T2.StarRating = 3 AND T3.BrandName = 'Frostie' AND T2.ReviewDate = '2014-04-24'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email_permission \nFROM customers \nWHERE rating = 3 \nAND brand = 'Frostie' \nAND date = '2014/4/24';"
        ],
        "rule_sql": []
    },
    "7714": {
        "db_id": "hockey",
        "question": "For the player who scored 7 shorthanded goals in 1989, what's his dominant hand?",
        "ground_truth": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1989 GROUP BY T2.playerID HAVING SUM(T2.SHG) = 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dominant_hand FROM players WHERE shorthanded_goals = 7 AND year = 1989;"
        ],
        "rule_sql": []
    },
    "5530": {
        "db_id": "menu",
        "question": "Tally the dishes that have appeared on the menu for more than 100 years.",
        "ground_truth": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared > 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM dishes WHERE menu_appearance > 100;"
        ],
        "rule_sql": []
    },
    "5991": {
        "db_id": "books",
        "question": "What is the average price for the order line?",
        "ground_truth": "SELECT AVG(price) FROM order_line",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM orders;"
        ],
        "rule_sql": []
    },
    "8596": {
        "db_id": "chicago_crime",
        "question": "How many crimes had happened in Central Chicago?",
        "ground_truth": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crimes WHERE location = 'Central Chicago';"
        ],
        "rule_sql": []
    },
    "6058": {
        "db_id": "books",
        "question": "Among all orders updated in 2022, identify the percentage that has been returned.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.status_value = 'Returned' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE STRFTIME('%Y', T2.status_date) = '2022'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN return_status = 'returned' THEN 1 END) * 100.0 / COUNT(*)) AS return_percentage\nFROM orders\nWHERE strftime('%Y', update_date) = '2022';"
        ],
        "rule_sql": []
    },
    "2060": {
        "db_id": "music_tracker",
        "question": "How many releases by the artist michael jackson are tagged \"pop\"?",
        "ground_truth": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.artist = 'michael jackson'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM releases r JOIN artists a ON r.artist_id = a.artist_id JOIN tags t ON r.release_id = t.release_id WHERE a.name = 'michael jackson' AND t.tag = 'pop';"
        ],
        "rule_sql": []
    },
    "6986": {
        "db_id": "ice_hockey_draft",
        "question": "How heavy is Matthias Trattnig in kilograms?",
        "ground_truth": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Pavel Patera'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight_pounds FROM players WHERE name = 'Matthias Trattnig';"
        ],
        "rule_sql": []
    },
    "153": {
        "db_id": "movie_platform",
        "question": "What is the URL to the movie director page on Mubi of the movie titled \"Red Blooded American Girl\"",
        "ground_truth": "SELECT director_url FROM movies WHERE movie_title LIKE 'Red Blooded American Girl'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director_url FROM movies WHERE title = 'Red Blooded American Girl';"
        ],
        "rule_sql": []
    },
    "7140": {
        "db_id": "works_cycles",
        "question": "What is the full address of business number 24?",
        "ground_truth": "SELECT T1.AddressLine1, T1.AddressLine2 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 24",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM businesses WHERE business_id = 24;"
        ],
        "rule_sql": []
    },
    "6000": {
        "db_id": "books",
        "question": "How many orders were returned in the year 2020?",
        "ground_truth": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2020'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE return_date LIKE '2020%';"
        ],
        "rule_sql": []
    },
    "3106": {
        "db_id": "cars",
        "question": "Calculate the average price of cars from Europe.",
        "ground_truth": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Europe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM cars WHERE continent = 'Europe';"
        ],
        "rule_sql": []
    },
    "8310": {
        "db_id": "mondial_geo",
        "question": "What is the GDP of the European Continent?",
        "ground_truth": "SELECT SUM(T4.GDP) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN economy AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(GDP) FROM countries WHERE continent = 'Europe';"
        ],
        "rule_sql": []
    },
    "4615": {
        "db_id": "mental_health_survey",
        "question": "What is the average number of respondents per survey between 2014 and 2019?",
        "ground_truth": "SELECT CAST(COUNT(SurveyID) AS REAL) / 5 FROM Answer WHERE SurveyID BETWEEN 2014 AND 2019",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(respondents) FROM surveys WHERE year BETWEEN 2014 AND 2019"
        ],
        "rule_sql": []
    },
    "3410": {
        "db_id": "video_games",
        "question": "How many different publishers have published a game that starts with \"Marvel\"?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.publisher_id) FROM game_publisher AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.game_name LIKE 'Marvel%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE name LIKE 'Marvel%';"
        ],
        "rule_sql": []
    },
    "4293": {
        "db_id": "simpson_episodes",
        "question": "Among the episodes with an award nominee or winner, which has the highest percent of 5 star votes?",
        "ground_truth": "SELECT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 5 ORDER BY T2.percent DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_id, title, (five_star_votes / total_votes) * 100 AS five_star_percentage\nFROM episodes\nWHERE award_status = 'nominee' OR award_status = 'winner'\nORDER BY five_star_percentage DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2315": {
        "db_id": "movielens",
        "question": "Please calculate negative critical reception of American movies",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.rating = 1, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS negative_reviews \nFROM movies \nWHERE country = 'USA' \nAND critical_reception < 0"
        ],
        "rule_sql": []
    },
    "3908": {
        "db_id": "public_review_platform",
        "question": "Calculate the increment percentage of elite user for each year since year 2005.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN year_id < 2014 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN year_id = 2005 THEN 1.0 ELSE NULL END) AS increment FROM Elite",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    YEAR(join_date) AS year,\n    (COUNT(CASE WHEN elite = 1 THEN 1 END) - LAG(COUNT(CASE WHEN elite = 1 THEN 1 END)) OVER (ORDER BY YEAR(join_date))) / LAG(COUNT(CASE WHEN elite = 1 THEN 1 END)) OVER (ORDER BY YEAR(join_date)) * 100 AS increment_percentage\nFROM users\nWHERE YEAR(join_date) >= 2005\nGROUP BY YEAR(join_date)\nORDER BY year;"
        ],
        "rule_sql": []
    },
    "7651": {
        "db_id": "hockey",
        "question": "Please list the years in which the NHL League had shots recorded while the goalie was on the ice.",
        "ground_truth": "SELECT DISTINCT year FROM Goalies WHERE lgID = 'NHL' AND SA IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT year FROM nhl_stats WHERE shots > 0 AND goalie_on_ice = 1"
        ],
        "rule_sql": []
    },
    "9402": {
        "db_id": "movie_3",
        "question": "Calculate the average rate of renting the film that Lucille Tracy got starred.",
        "ground_truth": "SELECT AVG(T3.rental_rate) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'LUCILLE' AND T1.last_name = 'TRACY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rental_rate) FROM film \nWHERE film_id IN (\n    SELECT film_id FROM film_actor \n    WHERE actor_id IN (\n        SELECT actor_id FROM actor \n        WHERE first_name = 'Lucille' AND last_name = 'Tracy'\n    )\n)"
        ],
        "rule_sql": []
    },
    "4938": {
        "db_id": "olympics",
        "question": "How many competitor ids does Martina Kohlov have?",
        "ground_truth": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM competitors WHERE name = 'Martina Kohlov';"
        ],
        "rule_sql": []
    },
    "7281": {
        "db_id": "works_cycles",
        "question": "Which reviewer gives the biggest number of the highest rating?",
        "ground_truth": "SELECT ReviewerName FROM ProductReview WHERE Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reviewer_name, COUNT(*) as highest_ratings \nFROM reviews \nWHERE rating = (SELECT MAX(rating) FROM reviews) \nGROUP BY reviewer_name \nORDER BY highest_ratings DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "441": {
        "db_id": "movies_4",
        "question": "Provide the title of the movie that is most-liked by a large number of people.",
        "ground_truth": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies ORDER BY likes DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7136": {
        "db_id": "works_cycles",
        "question": "Please list the businesses along with their numbers that have their accounts located in Duvall.",
        "ground_truth": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Duvall'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name, phone_number FROM businesses WHERE account_location = 'Duvall';"
        ],
        "rule_sql": []
    },
    "5843": {
        "db_id": "airline",
        "question": "How many flights from American Airlines were cancelled due to a type A cancellation code?",
        "ground_truth": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLATION_CODE = 'A' AND T2.Description = 'American Airlines Inc.: AA' AND T1.CANCELLED = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE airline = 'American Airlines' AND cancellation_code = 'A' AND cancelled = 0;"
        ],
        "rule_sql": []
    },
    "6266": {
        "db_id": "coinmarketcap",
        "question": "What was the price of Bitcoin when it closed at the end of the day on 2013/4/29?",
        "ground_truth": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM bitcoin_prices WHERE date = '2013/4/29' AND time = '23:59:59';"
        ],
        "rule_sql": []
    },
    "8555": {
        "db_id": "software_company",
        "question": "Among the male customer in their twenties, how many are from places where the average income is more than 3000?",
        "ground_truth": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INCOME_K > 3000 AND T1.age >= 20 AND T1.age <= 29",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM customers c\nJOIN places p ON c.place_id = p.id\nWHERE c.gender = 'male' \nAND c.age BETWEEN 20 AND 29\nAND p.avg_income > 3000;"
        ],
        "rule_sql": []
    },
    "4141": {
        "db_id": "citeseer",
        "question": "What is the total number of word cited under that class labelled 'AI'?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM words WHERE class = 'AI';"
        ],
        "rule_sql": []
    },
    "7141": {
        "db_id": "works_cycles",
        "question": "Which year is credit card No.9648's Expiration Year?",
        "ground_truth": "SELECT ExpYear FROM CreditCard WHERE CreditCardID = 9648",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Expiration_Year FROM credit_cards WHERE Card_Number = 9648;"
        ],
        "rule_sql": []
    },
    "7599": {
        "db_id": "image_and_language",
        "question": "List all the attribute classes of image ID 22.",
        "ground_truth": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 22",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM images WHERE id = 22;"
        ],
        "rule_sql": []
    },
    "7939": {
        "db_id": "music_platform_2",
        "question": "Write all the review titles and the contents belonging to the podcast 'More Stupider: A 90-Day Fiance Podcast' with a review rating of 1.",
        "ground_truth": "SELECT title, content FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'More Stupider: A 90-Day Fiance Podcast' ) AND rating = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, content FROM reviews WHERE podcast_name = 'More Stupider: A 90-Day Fiance Podcast' AND rating = 5;"
        ],
        "rule_sql": []
    },
    "4101": {
        "db_id": "public_review_platform",
        "question": "In how many businesses have customers had a bad or terrible experience?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE stars IN (1, 2)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE experience = 'bad' OR experience = 'terrible';"
        ],
        "rule_sql": []
    },
    "6821": {
        "db_id": "retails",
        "question": "How many of the items are instructed to be delivered in person?",
        "ground_truth": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM items WHERE delivery_method = 'in person';"
        ],
        "rule_sql": []
    },
    "213": {
        "db_id": "book_publishing_company",
        "question": "Which one is the cheapest business book?",
        "ground_truth": "SELECT title FROM titles WHERE type = 'business' ORDER BY price LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM books WHERE category = 'business' ORDER BY price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7100": {
        "db_id": "works_cycles",
        "question": "What is the name of the subcategory to which the gray product with the lowest safety stock level belongs?",
        "ground_truth": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 USING (ProductSubcategoryID) WHERE T2.Color = 'Grey' GROUP BY T1.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT subcategory_name FROM products WHERE color = 'gray' ORDER BY safety_stock DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "793": {
        "db_id": "social_media",
        "question": "Please list the texts of all the tweets posted by male users from Buenos Aires.",
        "ground_truth": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T2 ON T2.UserID = T1.UserID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T2.City = 'Buenos Aires' AND T3.Gender = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.text FROM tweets t JOIN users u ON t.user_id = u.user_id WHERE u.gender = 'male' AND u.city = 'Buenos Aires'"
        ],
        "rule_sql": []
    },
    "8137": {
        "db_id": "sales_in_weather",
        "question": "How many units of item no.9 were sold in store no.1 on 2012/1/1?",
        "ground_truth": "SELECT units FROM sales_in_weather WHERE `date` = '2012-01-01' AND store_nbr = 1 AND item_nbr = 9",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM sales WHERE item_id = 9 AND store_id = 1 AND date = '2012/1/1';"
        ],
        "rule_sql": []
    },
    "1624": {
        "db_id": "car_retails",
        "question": "How do I contact the President of the company?",
        "ground_truth": "SELECT t.email FROM employees t WHERE t.jobTitle = 'President'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE job_title = 'President';"
        ],
        "rule_sql": []
    },
    "1398": {
        "db_id": "synthea",
        "question": "How many immunizations did the patient with the most prevalent condition that started recently get?",
        "ground_truth": "SELECT COUNT(T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) INNER JOIN immunizations AS T3 ON T2.PATIENT = T3.PATIENT GROUP BY T2.PATIENT ORDER BY T2.START DESC, T1.\"PREVALENCE RATE\" DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM immunizations \nWHERE patient_id = (\n    SELECT patient_id \n    FROM conditions \n    WHERE start_date = (SELECT MAX(start_date) FROM conditions)\n    GROUP BY condition\n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);"
        ],
        "rule_sql": []
    },
    "6534": {
        "db_id": "retail_world",
        "question": "What are the ID and description of the condiments category?",
        "ground_truth": "SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, description FROM categories WHERE name = 'condiments';"
        ],
        "rule_sql": []
    },
    "7734": {
        "db_id": "hockey",
        "question": "What is the average height of all the goalies born in the 70s who's a left shooting/catching dominant and to which team do the tallest player/s play for most recently?",
        "ground_truth": "SELECT CAST(SUM(T2.height) AS REAL) / COUNT(*) FROM AwardsPlayers AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.height IS NOT NULL AND (T2.pos = 'LW' OR T2.pos = 'L/C')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) as average_height, team_name \nFROM players \nWHERE position = 'Goalie' \nAND birth_year BETWEEN 1970 AND 1979 \nAND (shooting_hand = 'Left' OR catching_hand = 'Left')\nGROUP BY team_name\nORDER BY height DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "518": {
        "db_id": "movies_4",
        "question": "What is the average number of crews for a movie?",
        "ground_truth": "SELECT CAST(SUM(CD) AS REAL) / COUNT(movie_id) FROM ( SELECT movie_id, COUNT(person_id) AS CD FROM movie_crew GROUP BY movie_id )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(crew_count) FROM movies WHERE crew_count IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "9024": {
        "db_id": "bike_share_1",
        "question": "On 8/29/2013 at 6:14:01 PM, how many bikes were borrowed from San Jose Diridon Caltrain Station?",
        "ground_truth": "SELECT SUM(T1.dock_count - T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 06:14:01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM bike_borrowals WHERE station_name = 'San Jose Diridon Caltrain Station' AND borrow_time = '2013-08-29 18:14:01';"
        ],
        "rule_sql": []
    },
    "288": {
        "db_id": "retail_complains",
        "question": "Calculate the difference in the average age of elderly and middle-aged clients in the Northeast region.",
        "ground_truth": "SELECT (CAST(SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.age > 65 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END)) AS difference FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(CASE WHEN age_group = 'elderly' THEN age ELSE NULL END) - AVG(CASE WHEN age_group = 'middle-aged' THEN age ELSE NULL END) AS age_difference\nFROM clients\nWHERE region = 'Northeast';"
        ],
        "rule_sql": []
    },
    "157": {
        "db_id": "movie_platform",
        "question": "Who is the director that directed the highest number of movies in the 70s? If there are multiple directors with the same amount of movies, list all of their names and indicate the highest rating score that those movies got from the users.",
        "ground_truth": "SELECT T2.director_name, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.name, COUNT(*) as movie_count, MAX(r.rating) as max_rating\nFROM directors d\nJOIN movies m ON d.director_id = m.director_id\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.year BETWEEN 1970 AND 1979\nGROUP BY d.name\nHAVING COUNT(*) = (SELECT MAX(movie_count) FROM (SELECT COUNT(*) as movie_count FROM movies WHERE year BETWEEN 1970 AND 1979 GROUP BY director_id))\nORDER BY max_rating DESC;"
        ],
        "rule_sql": []
    },
    "3000": {
        "db_id": "shakespeare",
        "question": "In \"Florence. Without the walls. A tucket afar off\", what is the id of the character that was mentioned in \"His name, I pray you.\"?",
        "ground_truth": "SELECT T1.character_id FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.PlainText = 'His name, I pray you.' AND T2.Description = 'Florence. Without the walls. A tucket afar off.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_id FROM characters WHERE name = 'Florence' AND location = 'Without the walls' AND sound_effect = 'A tucket afar off';"
        ],
        "rule_sql": []
    },
    "4303": {
        "db_id": "simpson_episodes",
        "question": "Which country has the tallest person in the crew?",
        "ground_truth": "SELECT birth_country FROM Person ORDER BY height_meters DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM crew ORDER BY height ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8622": {
        "db_id": "chicago_crime",
        "question": "What is the name of the community with the highest population?",
        "ground_truth": "SELECT community_area_name FROM Community_Area ORDER BY population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM communities ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8056": {
        "db_id": "university",
        "question": "Which country has the University of S\u00c3\u00a3o Paulo?",
        "ground_truth": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of S\u00e3o Paulo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM universities WHERE name = 'University of S\u00c3\u00a3o Paulo';"
        ],
        "rule_sql": []
    },
    "2890": {
        "db_id": "professional_basketball",
        "question": "List the champion (team name) and year from year 1950 to 1960.",
        "ground_truth": "SELECT DISTINCT T1.name, T2.year FROM teams AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner WHERE T2.round = 'F' AND T2.year BETWEEN 1950 AND 1960",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT champion, year FROM champions WHERE year BETWEEN 1950 AND 1960 ORDER BY year;"
        ],
        "rule_sql": []
    },
    "1822": {
        "db_id": "soccer_2016",
        "question": "How many players were born in the 90s?",
        "ground_truth": "SELECT COUNT(Player_Id) AS cnt FROM Player WHERE DOB BETWEEN '1990-01-01' AND '1999-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE birth_year LIKE '199%';"
        ],
        "rule_sql": []
    },
    "877": {
        "db_id": "cs_semester",
        "question": "For the professor who is working with Harrietta Lydford, how is his popularity?",
        "ground_truth": "SELECT T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Harrietta' AND T3.l_name = 'Lydford'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT popularity FROM professors WHERE name = 'Harrietta Lydford';"
        ],
        "rule_sql": []
    },
    "9079": {
        "db_id": "bike_share_1",
        "question": "What is the ratio for subscriber to customer given that the starting and the ending stations is 2nd at South Park?",
        "ground_truth": "SELECT CAST(SUM(IIF(subscription_type = 'Subscriber', 1, 0)) AS REAL) / SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS subscriber_count / COUNT(*) AS customer_count \nFROM trips \nWHERE start_station_name = '2nd at South Park' \nAND end_station_name = '2nd at South Park';"
        ],
        "rule_sql": []
    },
    "5607": {
        "db_id": "shipping",
        "question": "To whom did the company transport its heaviest shipment?",
        "ground_truth": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id ORDER BY T1.weight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM shipments ORDER BY weight DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7836": {
        "db_id": "world",
        "question": "How many percent of countries in North America use English?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM countries WHERE continent = 'North America')) AS percentage\nFROM countries \nWHERE continent = 'North America' AND language = 'English';"
        ],
        "rule_sql": []
    },
    "7981": {
        "db_id": "music_platform_2",
        "question": "Please list the titles of all the podcasts under the category \"arts-performing-arts\".",
        "ground_truth": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts-performing-arts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM podcasts WHERE category = 'arts-performing-arts';"
        ],
        "rule_sql": []
    },
    "600": {
        "db_id": "codebase_comments",
        "question": "Please list the IDs of the solutions that contain files within the top 3 followed repositories.",
        "ground_truth": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId ORDER BY T1.Forks DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT s.id \nFROM solutions s \nJOIN files f ON s.id = f.solution_id \nJOIN repositories r ON s.repository_id = r.id \nORDER BY r.followers_count DESC \nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "6927": {
        "db_id": "ice_hockey_draft",
        "question": "What is the BMI of David Bornhammar?",
        "ground_truth": "SELECT CAST(T2.weight_in_kg AS REAL) / (CAST(T3.height_in_cm AS REAL) / 100 * (CAST(T3.height_in_cm AS REAL) / 100)) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T1.PlayerName = 'David Bornhammar'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT height / weight FROM patients WHERE first_name = 'David' AND last_name = 'Bornhammar';"
        ],
        "rule_sql": []
    },
    "2982": {
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in the scene whose description is \"A Sea-port in Cyprus. An open place near the quay.\"?",
        "ground_truth": "SELECT SUM(T2.ParagraphNum) FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T1.Description = 'A Sea-port in Cyprus. An open place near the quay.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM paragraphs WHERE scene_description = 'A Sea-port in Cyprus. An open place near the quay.'"
        ],
        "rule_sql": []
    },
    "7449": {
        "db_id": "works_cycles",
        "question": "What is the scrap reason for work order \"57788\"?",
        "ground_truth": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN ScrapReason AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.WorkOrderID = 57788",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT scrap_reason FROM work_orders WHERE work_order_id = '57788';"
        ],
        "rule_sql": []
    },
    "8859": {
        "db_id": "craftbeer",
        "question": "Of all the beer styles produced by Stevens Point Brewery, how many percent do they allot for American Adjunct Lager?",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.style = 'American Adjunct Lager', 1, 0)) AS REAL) * 100 / COUNT(T1.brewery_id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Stevens Point Brewery'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM beers WHERE brewery = 'Stevens Point Brewery')) AS percentage\nFROM beers \nWHERE brewery = 'Stevens Point Brewery' AND style = 'American Adjunct Lager';"
        ],
        "rule_sql": []
    },
    "3922": {
        "db_id": "public_review_platform",
        "question": "In businesses with a category of automotive, how many of them has an star rating below 3?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Automotive' AND T1.stars < 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE category = 'automotive' AND star_rating > 3;"
        ],
        "rule_sql": []
    },
    "5380": {
        "db_id": "sales",
        "question": "How many free gifts have customer with id 11782 received?",
        "ground_truth": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID = 11782 AND T1.Price = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM gifts WHERE customer_id = 11782 AND price > 0"
        ],
        "rule_sql": []
    },
    "1769": {
        "db_id": "restaurant",
        "question": "Among the restaurants located on the street number ranges from 1000 to 2000, what is the percentage of Afghani restaurants are there?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN cuisine = 'Afghani' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM restaurants\nWHERE street_number BETWEEN 1000 AND 2000;"
        ],
        "rule_sql": []
    },
    "7670": {
        "db_id": "hockey",
        "question": "Among the players who have won the All-Rookie award, how many of them have died?",
        "ground_truth": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.deathYear IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE award = 'All-Rookie' AND death_date IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "8545": {
        "db_id": "software_company",
        "question": "What is the number of inhabitants of male customers ages from 20 to 30 years old who are farming or fishing?",
        "ground_truth": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE gender = 'male' AND age BETWEEN 20 AND 30 AND occupation IN ('farming', 'fishing')"
        ],
        "rule_sql": []
    },
    "7182": {
        "db_id": "works_cycles",
        "question": "What are the total per assembly quantity for unit measure code EA, IN and OZ respectively? What are the name of these 3 code?",
        "ground_truth": "SELECT SUM(T1.PerAssemblyQty), T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.UnitMeasureCode IN ('EA', 'IN', 'OZ') GROUP BY T2.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    unit_measure_code,\n    SUM(per_assembly_qty) as total_quantity,\n    unit_measure_name\nFROM production.bill_of_materials\nWHERE unit_measure_code IN ('EA', 'IN', 'OZ')\nGROUP BY unit_measure_code, unit_measure_name\nORDER BY unit_measure_code;"
        ],
        "rule_sql": []
    },
    "2981": {
        "db_id": "shakespeare",
        "question": "Which Shakespeare tragedy has the most scenes? Give the long title.",
        "ground_truth": "SELECT T.LongTitle FROM ( SELECT T1.LongTitle, COUNT(T2.Scene) AS num FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Tragedy' GROUP BY T1.LongTitle, T2.Scene ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, COUNT(*) as scene_count FROM scenes JOIN plays ON scenes.play_id = plays.play_id WHERE plays.genre = 'Tragedy' GROUP BY title ORDER BY scene_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7731": {
        "db_id": "hockey",
        "question": "In 2006, what is the overall number of october defeats for the team with the most October defeats? Indicate the team ID.",
        "ground_truth": "SELECT OctL, tmID FROM TeamSplits WHERE year = '2006' ORDER BY OctL DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT teamID, COUNT(*) AS october_defeats \nFROM Games \nWHERE yearID = 2006 \nAND month = 10 \nAND home_score < away_score\nGROUP BY teamID\nORDER BY october_defeats DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "418": {
        "db_id": "movies_4",
        "question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the title of the one with the highest average vote?",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography' ORDER BY T1.vote_average DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies \nJOIN movie_crew ON movies.movie_id = movie_crew.movie_id \nJOIN persons ON movie_crew.person_id = persons.person_id \nWHERE persons.name = 'Dariusz Wolski' \nAND movie_crew.job = 'Director of Photography' \nORDER BY vote_average DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3523": {
        "db_id": "authors",
        "question": "How many more papers in total were published in the journal \"Cases Journal\" than in the journal \"Molecular Brain\" in percentage?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.FullName = 'Cases Journal' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.FullName = 'Molecular Brain' THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ((SELECT COUNT(*) FROM papers WHERE journal = 'Cases Journal') - \n     (SELECT COUNT(*) FROM papers WHERE journal = 'Molecular Brain')) * 100.0 / \n    (SELECT COUNT(*) FROM papers WHERE journal = 'Molecular Brain') AS percentage_difference;"
        ],
        "rule_sql": []
    },
    "8939": {
        "db_id": "human_resources",
        "question": "How many male employees work at the address 450 Peachtree Rd?",
        "ground_truth": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.address = '450 Peachtree Rd' AND T1.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE gender = 'female' AND address = '450 Peachtree Rd';"
        ],
        "rule_sql": []
    },
    "5720": {
        "db_id": "language_corpus",
        "question": "For corpus title \"Atomium\", pick 3 words appear in the title and calculate the total occurence of these words.",
        "ground_truth": "SELECT T1.word, T1.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.pid = ( SELECT pid FROM pages WHERE title = 'Atomium' ) LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word, COUNT(*) as total_occurrence FROM words WHERE title = 'Atomium' GROUP BY word LIMIT 3;"
        ],
        "rule_sql": []
    },
    "6187": {
        "db_id": "food_inspection_2",
        "question": "Calculate the total amount of fine under the food equipment and utensil category.",
        "ground_truth": "SELECT SUM(T2.fine) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Food Equipment and Utensil'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM fines WHERE category = 'food equipment and utensil';"
        ],
        "rule_sql": []
    },
    "283": {
        "db_id": "retail_complains",
        "question": "What is the medium through which most complaints are registered in Florida?",
        "ground_truth": "SELECT T3.`Submitted via` FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id INNER JOIN events AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.state = 'FL' GROUP BY T1.`Complaint ID` ORDER BY COUNT(T1.`Complaint ID`) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medium, COUNT(*) as complaint_count FROM complaints WHERE state = 'Florida' GROUP BY medium ORDER BY complaint_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8604": {
        "db_id": "chicago_crime",
        "question": "Among the crimes in all the districts in Chicago, what is the percentage of them happening in the Central district?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM crimes)) AS percentage FROM crimes WHERE district = 'Central';"
        ],
        "rule_sql": []
    },
    "3365": {
        "db_id": "video_games",
        "question": "List down the name of games published by 3DO.",
        "ground_truth": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '3DO'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_name FROM games WHERE publisher = '3DO';"
        ],
        "rule_sql": []
    },
    "8094": {
        "db_id": "university",
        "question": "How many Turkish universities are there in the database?",
        "ground_truth": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE country = 'Turkey';"
        ],
        "rule_sql": []
    },
    "9318": {
        "db_id": "movie_3",
        "question": "List all the animation titles.",
        "ground_truth": "SELECT T3.title AS per FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Animation'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM movies WHERE genre = 'Animation';"
        ],
        "rule_sql": []
    },
    "3154": {
        "db_id": "donor",
        "question": "Name the project titles created by teacher who acquired a doctor degree.",
        "ground_truth": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_title FROM projects WHERE teacher_degree = 'doctor'"
        ],
        "rule_sql": []
    },
    "6854": {
        "db_id": "retails",
        "question": "Please indicate the names of customers whose orders are eligible for 10% discount with order dates between 1/1/1994 and 1/1/1995.",
        "ground_truth": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey WHERE T2.l_discount = 0.1 AND STRFTIME('%Y', T1.o_orderdate) BETWEEN 1994 AND 1995",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nWHERE o.order_date BETWEEN '1994-01-01' AND '1995-01-01'\nAND o.total_amount > 1000;"
        ],
        "rule_sql": []
    },
    "2603": {
        "db_id": "regional_sales",
        "question": "Calculate the total net profit of the store located in highest median income city.",
        "ground_truth": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.`Median Income` DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(net_profit) FROM stores WHERE city = (SELECT city FROM stores ORDER BY median_income DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "5020": {
        "db_id": "olympics",
        "question": "From 1900 to 1992, how many games did London host?",
        "ground_truth": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE city = 'London' AND year BETWEEN 1900 AND 1992;"
        ],
        "rule_sql": []
    },
    "4477": {
        "db_id": "student_loan",
        "question": "How many disabled students have payment due?",
        "ground_truth": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE status = 'disabled' AND payment_status = 'due';"
        ],
        "rule_sql": []
    },
    "3940": {
        "db_id": "public_review_platform",
        "question": "List at least 5 active business ID that are good for groups and dancing.",
        "ground_truth": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Good for Dancing' AND T1.attribute_name LIKE 'Good for Groups' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM businesses WHERE active = 1 AND good_for_groups = 1 AND dancing = 1 LIMIT 5;"
        ],
        "rule_sql": []
    },
    "1396": {
        "db_id": "synthea",
        "question": "What are the full names of the patients who started taking Yaz 28 Day Pack in 2011?",
        "ground_truth": "SELECT DISTINCT T1.first, T1.last, T1.suffix FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Yaz 28 Day Pack' AND strftime('%Y', T2.START) = '2011'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM patients WHERE medication = 'Yaz 28 Day Pack' AND start_date LIKE '2011%';"
        ],
        "rule_sql": []
    },
    "9135": {
        "db_id": "movie_3",
        "question": "Among the customers who have rented the film ACADEMY DINOSAUR, how many of them are active?",
        "ground_truth": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.active = 1 AND T4.title = 'ACADEMY DINOSAUR'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.title = 'ACADEMY DINOSAUR'"
        ],
        "rule_sql": []
    },
    "4857": {
        "db_id": "legislator",
        "question": "List all the junior senators in 1997.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1997%' AND T2.state_rank = 'junior'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM senators WHERE year = 1997 AND status = 'junior';"
        ],
        "rule_sql": []
    },
    "6725": {
        "db_id": "retails",
        "question": "What was the order date of items with the highest total price?",
        "ground_truth": "SELECT o_orderdate FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_date FROM orders ORDER BY total_price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9205": {
        "db_id": "movie_3",
        "question": "What is the name and email of the staff in store ID 2?",
        "ground_truth": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, email FROM staff WHERE store_id = 1"
        ],
        "rule_sql": []
    },
    "9286": {
        "db_id": "movie_3",
        "question": "What are the address numbers that are located in Gansu district?",
        "ground_truth": "SELECT address_id FROM address WHERE district = 'Gansu'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address_number FROM addresses WHERE district = 'Gansu';"
        ],
        "rule_sql": []
    },
    "5252": {
        "db_id": "beer_factory",
        "question": "Tell the number of reviews given by James House.",
        "ground_truth": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'James' AND T1.Last = 'House'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE reviewer_name = 'James House';"
        ],
        "rule_sql": []
    },
    "8261": {
        "db_id": "mondial_geo",
        "question": "Please list the organization names established in the countries where Dutch is spoken.",
        "ground_truth": "SELECT T2.Name FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Dutch'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization_name FROM organizations WHERE country IN (SELECT country FROM languages WHERE language = 'Dutch')"
        ],
        "rule_sql": []
    },
    "1006": {
        "db_id": "computer_student",
        "question": "Describe the year in program and in phase status for the student with most number in advisor.",
        "ground_truth": "SELECT T2.yearsInProgram, T2.inPhase FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year_in_program, phase_status FROM students ORDER BY advisor_number DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5280": {
        "db_id": "beer_factory",
        "question": "Between Sac State Union and Sac State American River Courtyard, which location sold the most Dog n Suds root beer?",
        "ground_truth": "SELECT T3.LocationName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Dog n Suds' AND T3.LocationName IN ('Sac State American River Courtyard', 'Sac State Union') GROUP BY T1.LocationID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location, SUM(quantity) as total_sold\nFROM sales\nWHERE product = 'Dog n Suds root beer'\nAND location IN ('Sac State Union', 'Sac State American River Courtyard')\nGROUP BY location\nORDER BY total_sold DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1258": {
        "db_id": "law_episode",
        "question": "How many keywords are there in the episode Disciple?",
        "ground_truth": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE title = 'Disciple';"
        ],
        "rule_sql": []
    },
    "2872": {
        "db_id": "professional_basketball",
        "question": "What is the first and last name of the player with the highest field goal made rate in 1973?",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE year = 1973 ORDER BY CAST(T2.fgMade AS REAL) / T2.fgAttempted DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM players WHERE year = 1973 ORDER BY field_goal_made DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9351": {
        "db_id": "movie_3",
        "question": "What is Mary Smith's rental ID?",
        "ground_truth": "SELECT T2.rental_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'MARY' AND T1.last_name = 'SMITH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rental_id FROM rentals WHERE first_name = 'Mary' AND last_name = 'Smith';"
        ],
        "rule_sql": []
    },
    "6960": {
        "db_id": "ice_hockey_draft",
        "question": "What is the percentage of players who were born in Denmark and weight above 154 lbs?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Denmark' AND T2.weight_in_lbs > 154 THEN T1.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN country = 'Denmark' AND weight > 154 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM players;"
        ],
        "rule_sql": []
    },
    "1053": {
        "db_id": "talkingdata",
        "question": "What is the gender of the majority of Vivo phone users?",
        "ground_truth": "SELECT T.gender FROM ( SELECT T2.gender, COUNT(T2.gender) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.gender ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender, COUNT(*) as count FROM users WHERE phone_brand = 'Vivo' GROUP BY gender ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3173": {
        "db_id": "donor",
        "question": "What are the favorite project types of each of the top 10 donors?",
        "ground_truth": "SELECT project_resource_type FROM ( SELECT T1.donor_acctid, T3.project_resource_type FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN resources AS T3 ON T2.projectid = T3.projectid ORDER BY T1.donation_total DESC LIMIT 10 ) GROUP BY project_resource_type ORDER BY COUNT(project_resource_type) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT donor_name, project_type, COUNT(*) as favorite_count\nFROM donations d\nJOIN projects p ON d.project_id = p.project_id\nGROUP BY donor_name, project_type\nORDER BY SUM(donation_amount) DESC\nLIMIT 10;"
        ],
        "rule_sql": []
    },
    "7445": {
        "db_id": "works_cycles",
        "question": "What are locations of the work order \"35493\"?",
        "ground_truth": "SELECT T2.Name FROM WorkOrderRouting AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.WorkOrderID = 35493",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM work_orders WHERE order_id = '35493';"
        ],
        "rule_sql": []
    },
    "7125": {
        "db_id": "works_cycles",
        "question": "How long does it take for the business to receive the item it has purchased? Who is the vendor for business number 1496?",
        "ground_truth": "SELECT T1.AverageLeadTime, T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 USING (businessentityid) WHERE T2.BusinessEntityID = 1496 GROUP BY T1.AverageLeadTime, T2.Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT vendor_name, purchase_date, delivery_date FROM purchases WHERE business_id = 1496"
        ],
        "rule_sql": []
    },
    "2118": {
        "db_id": "world_development_indicators",
        "question": "What is the topic of the series when the Total reserves minus gold (current US$) indicator of Haiti hit the value of 3,000,000 in 1961? Please include its series code and license type.",
        "ground_truth": "SELECT T2.Topic, T2.Seriescode, T2.LicenseType FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year = 1961 AND T1.CountryName = 'Haiti' AND T1.IndicatorName = 'Total reserves minus gold (current US$)' AND T1.Value = 3000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT topic, series_code, license_type \nFROM series_data \nWHERE country = 'Haiti' \nAND indicator = 'Total reserves minus gold (current US$)' \nAND year = 1961 \nAND value = 3000000;"
        ],
        "rule_sql": []
    },
    "8477": {
        "db_id": "mondial_geo",
        "question": "Among the organizations where headquarters are in the 'USA', what is the percentage of the them are in 'Washington'?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.City = 'Washington' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.City) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T2.Country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN city = 'Washington' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM organizations\nWHERE country = 'USA';"
        ],
        "rule_sql": []
    },
    "1298": {
        "db_id": "law_episode",
        "question": "How many episodes have not won any Law & Order series awards?",
        "ground_truth": "SELECT COUNT(award_id) FROM Award WHERE Result = 'Nominee'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM episodes \nWHERE series_name = 'Law & Order' \nAND awards_won = 0;"
        ],
        "rule_sql": []
    },
    "8006": {
        "db_id": "university",
        "question": "What are the names of the top 5 universities with the highest number of international students?",
        "ground_truth": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY (CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities ORDER BY domestic_students DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "5000": {
        "db_id": "olympics",
        "question": "State the name of sport id 19.",
        "ground_truth": "SELECT sport_name FROM sport WHERE id = 19",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sport_name FROM sports WHERE sport_id = 19;"
        ],
        "rule_sql": []
    },
    "1034": {
        "db_id": "computer_student",
        "question": "What is the sum of year 1 and year 2 students?",
        "ground_truth": "SELECT COUNT(*) FROM person WHERE yearsInProgram = 'Year_1' OR yearsInProgram = 'Year_2'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(year) FROM students WHERE year = 1 OR year = 2;"
        ],
        "rule_sql": []
    },
    "2297": {
        "db_id": "movielens",
        "question": "Please list all horror films that have a rating of 1.",
        "ground_truth": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 1 AND T2.genre = 'Horror'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM films WHERE genre = 'horror' AND rating = 1;"
        ],
        "rule_sql": []
    },
    "3490": {
        "db_id": "video_games",
        "question": "What is the name of the company that produced the game titled Adventure Time: Explore the Dungeon Because I Don't Know!?",
        "ground_truth": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name FROM games WHERE title = 'Adventure Time: Explore the Dungeon Because I Don\\'t Know!';"
        ],
        "rule_sql": []
    },
    "6757": {
        "db_id": "retails",
        "question": "Provide the nation and region of the customer with the address of wH55UnX7 VI?",
        "ground_truth": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT nation, region FROM customers WHERE address = 'wH55UnX7 VI';"
        ],
        "rule_sql": []
    },
    "7886": {
        "db_id": "world",
        "question": "What are the cities for country called \"\u00c2\u00b4Uman\" in local name.",
        "ground_truth": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = '\u00c2\u00b4Uman'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM cities WHERE country = '\u00c2\u00b4Uman'"
        ],
        "rule_sql": []
    },
    "5209": {
        "db_id": "address",
        "question": "List down the names of the cities belonging to Noble, Oklahoma.",
        "ground_truth": "SELECT T3.city FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Oklahoma' AND T2.county = 'NOBLE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name FROM cities WHERE state = 'Oklahoma' AND county = 'Noble';"
        ],
        "rule_sql": []
    },
    "8865": {
        "db_id": "cookbook",
        "question": "Please list the titles of all the recipes that may lead to constipation, feeling sick or stomach pain.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM recipes WHERE side_effects LIKE '%constipation%' OR side_effects LIKE '%feeling sick%' OR side_effects LIKE '%stomach pain%';"
        ],
        "rule_sql": []
    },
    "7837": {
        "db_id": "world",
        "question": "List the district name of the city with the smallest population.",
        "ground_truth": "SELECT District FROM City ORDER BY Population LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district FROM city ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3950": {
        "db_id": "public_review_platform",
        "question": "Calculate the average review star from users in businesses located in South Carolina and California state.",
        "ground_truth": "SELECT 1.0 * (( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'SC' ) + ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'CA' )) / ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id ) AS reslut",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(review.stars) \nFROM review \nJOIN user ON review.user_id = user.user_id \nJOIN business ON review.business_id = business.business_id \nWHERE business.state IN ('South Carolina', 'California')"
        ],
        "rule_sql": []
    },
    "100": {
        "db_id": "movie_platform",
        "question": "Please list the names of the films released in 2003 among the films scored by user 2941 .",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2003 AND T1.user_id = 2941",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE release_year = 2003 AND user_id = 2941;"
        ],
        "rule_sql": []
    },
    "7944": {
        "db_id": "music_platform_2",
        "question": "How many podcast reviews with a rating of 3 were created during the first quarter of 2015?",
        "ground_truth": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM podcast_reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01' AND '2015-03-31';"
        ],
        "rule_sql": []
    },
    "8421": {
        "db_id": "mondial_geo",
        "question": "Of all the lakes in Bolivia, which is the deepest?",
        "ground_truth": "SELECT T1.Name FROM lake AS T1 INNER JOIN geo_lake AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Bolivia' ORDER BY T1.Depth DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM lakes WHERE country = 'Bolivia' ORDER BY depth ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4657": {
        "db_id": "disney",
        "question": "Which director did Bill Thompson work the most with?",
        "ground_truth": "SELECT director FROM director AS T1 INNER JOIN `voice-actors` AS T2 ON T1.name = T2.movie WHERE T2.`voice-actor` = 'Bill Thompson' GROUP BY director ORDER BY COUNT(director) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director, COUNT(*) as collaboration_count \nFROM movies \nWHERE actor = 'Bill Thompson' \nGROUP BY director \nORDER BY collaboration_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6236": {
        "db_id": "food_inspection_2",
        "question": "Provide the inspection ID of the inspection with the comment \"MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA\" and sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A).",
        "ground_truth": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND T1.code = '7-38-030, 015, 010 (A), 005 (A)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspection_id FROM inspections WHERE comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND sanitary_code = '7-38-030, 015, 010 (A), 005 (A)'"
        ],
        "rule_sql": []
    },
    "7963": {
        "db_id": "music_platform_2",
        "question": "What is the average rating of podcasts in comedy category?",
        "ground_truth": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(rating) FROM podcasts WHERE category = 'comedy';"
        ],
        "rule_sql": []
    },
    "8815": {
        "db_id": "food_inspection",
        "question": "Among the establishments with a postal code of 94102, how many establishments have a score of 90 or more in 2015?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE STRFTIME('%Y', T1.`date`) = '2015' AND T2.postal_code = '94102' AND T3.score > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM establishments WHERE postal_code = '94102' AND score >= 90 AND year = 2015;"
        ],
        "rule_sql": []
    },
    "5582": {
        "db_id": "shipping",
        "question": "Please list the IDs of all the shipments made by a retailer customer.",
        "ground_truth": "SELECT T2.ship_id FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'retailer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shipment_id FROM shipments WHERE customer_type = 'retailer';"
        ],
        "rule_sql": []
    },
    "1151": {
        "db_id": "talkingdata",
        "question": "What is the device model used by the most female users over 30?",
        "ground_truth": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 30 AND T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT device_model, COUNT(*) as user_count \nFROM users \nWHERE gender = 'female' AND age > 30 \nGROUP BY device_model \nORDER BY user_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "87": {
        "db_id": "movie_platform",
        "question": "How many films did \u00c5ke Sandgren direct?",
        "ground_truth": "SELECT COUNT(movie_title) FROM movies WHERE director_name = '\u00c5ke Sandgren'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE director = '\u00c5ke Sandgren';"
        ],
        "rule_sql": []
    },
    "4087": {
        "db_id": "public_review_platform",
        "question": "Calculate the difference between running business in Glendale City and Mesa City.",
        "ground_truth": "SELECT SUM(CASE WHEN city = 'Glendale' THEN 1 ELSE 0 END) - SUM(CASE WHEN city = 'Mesa' THEN 1 ELSE 0 END) AS diff FROM Business WHERE active = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM businesses WHERE city = 'Glendale City') - \n    (SELECT COUNT(*) FROM businesses WHERE city = 'Mesa City') AS business_difference;"
        ],
        "rule_sql": []
    },
    "2851": {
        "db_id": "professional_basketball",
        "question": "Please list the team names which have at least 3 all-star players.",
        "ground_truth": "SELECT T1.tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) >= 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM teams WHERE COUNT(all_star_players) >= 3;"
        ],
        "rule_sql": []
    },
    "2646": {
        "db_id": "regional_sales",
        "question": "Which order have the highest unit cost?",
        "ground_truth": "SELECT OrderNumber FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_id, MAX(unit_cost) FROM orders;"
        ],
        "rule_sql": []
    },
    "6837": {
        "db_id": "retails",
        "question": "What proportion of suppliers are from Asia?",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.r_name = 'ASIA', 1, 0)) AS REAL) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM suppliers) AS proportion FROM suppliers WHERE region = 'Asia';"
        ],
        "rule_sql": []
    },
    "8447": {
        "db_id": "mondial_geo",
        "question": "How big is Africa, and how many nations make up the continent?",
        "ground_truth": "SELECT T1.Area, COUNT(T3.Name) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Asia' GROUP BY T1.Name, T1.Area",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(area) AS total_area, COUNT(*) AS number_of_nations FROM countries WHERE continent = 'Africa';"
        ],
        "rule_sql": []
    },
    "9395": {
        "db_id": "movie_3",
        "question": "List all the films that Karl Berr starred in and rated as PG.",
        "ground_truth": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'KARL' AND T1.last_name = 'BERRY' AND T3.rating = 'PG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT f.title \nFROM films f\nJOIN actors a ON f.film_id = a.film_id\nWHERE a.actor_name = 'Karl Berr' AND f.rating = 'PG';"
        ],
        "rule_sql": []
    },
    "7692": {
        "db_id": "hockey",
        "question": "Which player who showed as the third goalie in a game has the biggest weight? Give the full name of the player.",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.stint = 3 ORDER BY T1.weight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.full_name \nFROM players p\nJOIN game_goalie_stats ggs ON p.player_id = ggs.player_id\nWHERE ggs.goalie_position = 3\nORDER BY p.weight DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8217": {
        "db_id": "mondial_geo",
        "question": "In which country does Polish found least in?",
        "ground_truth": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Polish' GROUP BY T2.Name, T1.Percentage ORDER BY T1.Percentage ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM polish_table ORDER BY polish_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4324": {
        "db_id": "simpson_episodes",
        "question": "Write down all the keywords for winner of \"WGA Award (TV)\" award.",
        "ground_truth": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'WGA Award (TV)';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keyword FROM awards WHERE award_name = 'WGA Award (TV)' AND winner = 'yes'"
        ],
        "rule_sql": []
    },
    "2819": {
        "db_id": "professional_basketball",
        "question": "Which winning team in the final round of the postseason series games against the LAL won more than 60 games in the NBA league during the year 1996?",
        "ground_truth": "SELECT DISTINCT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T2.won > 60 AND T1.year = 1996 AND T1.round = 'CSF' AND T1.tmIDLoser = 'LAL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.team_name \nFROM teams t\nJOIN postseason_series ps ON t.team_id = ps.winning_team_id\nJOIN games g ON ps.series_id = g.series_id\nWHERE ps.opponent_team = 'LAL' \nAND g.round = 'Final'\nAND t.wins > 60\nAND g.year = 1996;"
        ],
        "rule_sql": []
    },
    "971": {
        "db_id": "computer_student",
        "question": "List the ID of all professors who are not faculty member along with the courses taught by him/her.",
        "ground_truth": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.professor_id, c.course_name \nFROM professors p\nJOIN courses c ON p.professor_id = c.professor_id\nWHERE p.is_faculty = 'true';"
        ],
        "rule_sql": []
    },
    "7653": {
        "db_id": "hockey",
        "question": "Please list the name of the person who was in the Hall of Fame in the year 1978.",
        "ground_truth": "SELECT name FROM HOF WHERE year = 1978",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM HallOfFame WHERE year = 1978;"
        ],
        "rule_sql": []
    },
    "4725": {
        "db_id": "disney",
        "question": "Name the main character of Disney's most popular adventure movie based on its inflation-adjusted gross.",
        "ground_truth": "SELECT T2.hero FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Adventure' ORDER BY CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM disney_movies WHERE genre = 'adventure' ORDER BY gross_revenue DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8802": {
        "db_id": "food_inspection",
        "question": "What is the average score for \"Chairman Bao\" in all its unscheduled routine inspections?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.name = 'Chairman Bao' THEN T1.score ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.type = 'Routine - Unscheduled' THEN T1.score ELSE 0 END) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(score) FROM inspections WHERE restaurant_name = 'Chairman Bao' AND inspection_type = 'Routine - Unscheduled';"
        ],
        "rule_sql": []
    },
    "5371": {
        "db_id": "sales",
        "question": "How many customer ids have purchased Hex Nut 9?",
        "ground_truth": "SELECT COUNT(T1.CustomerID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 9'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE product_name = 'Hex Nut 9';"
        ],
        "rule_sql": []
    },
    "7723": {
        "db_id": "hockey",
        "question": "Which NHL award was most frequently won by the coach with the most wins?",
        "ground_truth": "SELECT award FROM Teams AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.lgID = T2.lgID WHERE T1.lgID = 'NHL' GROUP BY T2.coachID, T2.award ORDER BY COUNT(T2.award) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT award_name, COUNT(*) as frequency \nFROM nhl_awards \nWHERE coach_id IN (\n    SELECT coach_id \n    FROM nhl_coaches \n    ORDER BY wins DESC \n    LIMIT 1\n) \nGROUP BY award_name \nORDER BY frequency DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7786": {
        "db_id": "hockey",
        "question": "In the year 1958, what is the total number of players that became hall of famers?",
        "ground_truth": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Player' AND year = 1958",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM hall_of_famers WHERE year = 1958;"
        ],
        "rule_sql": []
    },
    "8718": {
        "db_id": "chicago_crime",
        "question": "Between Deering and Near West districts, which district reported the most number of crime incidents that happened in a library?",
        "ground_truth": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name IN ('Deering', 'Near West') AND T2.location_description = 'LIBRARY' GROUP BY T1.district_name ORDER BY COUNT(T2.district_no) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district, COUNT(*) as crime_count\nFROM crimes\nWHERE location_description = 'library'\nAND district IN ('Deering', 'Near West')\nGROUP BY district\nORDER BY crime_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7663": {
        "db_id": "hockey",
        "question": "Among the coaches who have received an award after the year 1940, how many of them have already died?",
        "ground_truth": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.year > 1940",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM coaches c\nJOIN awards a ON c.coach_id = a.coach_id\nWHERE a.year > 1940 \nAND c.death_date IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "5329": {
        "db_id": "beer_factory",
        "question": "Calculate the total purchases made by customers using their Visa credit cards in the Sac State American River Courtyard between 6/3/2014 and 11/27/2015.",
        "ground_truth": "SELECT SUM(T1.PurchasePrice) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'Visa' AND T1.TransactionDate BETWEEN '2014-06-03' AND '2015-11-27'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM purchases WHERE card_type = 'Mastercard' AND location = 'Sac State American River Courtyard' AND purchase_date BETWEEN '2014-06-03' AND '2015-11-27';"
        ],
        "rule_sql": []
    },
    "3189": {
        "db_id": "donor",
        "question": "What is the title of project that have the most expensive funds?",
        "ground_truth": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.projectid = ( SELECT projectid FROM resources ORDER BY item_unit_price * item_quantity DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM projects ORDER BY funds DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3647": {
        "db_id": "authors",
        "question": "What are the affiliations of the author \"Mark A. Musen\" written on and off paper?",
        "ground_truth": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Mark A. Musen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT affiliation FROM authors WHERE author_name = 'Mark A. Musen' AND paper_type IN ('on paper', 'off paper')"
        ],
        "rule_sql": []
    },
    "8347": {
        "db_id": "mondial_geo",
        "question": "Which are the 2 rivers located at Belgrade city? Which river is longer and how by much?",
        "ground_truth": "SELECT T1.Name, T1.Length FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN city AS T3 ON T3.Name = T2.City WHERE T3.Name = 'Belgrade'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT r1.name AS river1, r2.name AS river2, \n       ABS(r1.length - r2.length) AS length_difference\nFROM rivers r1\nJOIN rivers r2 ON r1.city = 'Belgrade' AND r2.city = 'Belgrade' AND r1.name != r2.name\nWHERE r1.length > r2.length\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2145": {
        "db_id": "world_development_indicators",
        "question": "From 1960 to 1965, which country has the lowest value of indicator belongs to Health: Population: Structure?",
        "ground_truth": "SELECT CountryName FROM Indicators WHERE Value = ( SELECT MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year >= 1960 AND T1.Year < 1966 AND T2.Topic = 'Health: Population: Structure' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Country, MIN(Value) as LowestValue \nFROM indicators \nWHERE Year BETWEEN 1960 AND 1965 \nAND Indicator LIKE '%Health%Population%Structure%' \nGROUP BY Country \nORDER BY LowestValue ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4785": {
        "db_id": "legislator",
        "question": "Give the Wikipedia IDs of historical legislators who are Readjuster Democrats.",
        "ground_truth": "SELECT T2.wikipedia_id FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Readjuster Democrat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT wikipedia_id FROM legislators WHERE party = 'Readjuster Democrat' AND historical = 1;"
        ],
        "rule_sql": []
    },
    "8748": {
        "db_id": "chicago_crime",
        "question": "Provide at least 5 ward office addresses associated with the crimes that happened in the community of Montclare.",
        "ground_truth": "SELECT T3.ward_office_address FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T1.community_area_name = 'Montclare' GROUP BY T3.ward_office_address LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT ward_office_address FROM crimes WHERE community = 'Montclare' LIMIT 5;"
        ],
        "rule_sql": []
    },
    "3316": {
        "db_id": "video_games",
        "question": "On which platform was Panzer Tactics released in 2007?",
        "ground_truth": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform FROM games WHERE title = 'Panzer Tactics' AND year = 2007;"
        ],
        "rule_sql": []
    },
    "4": {
        "db_id": "movie_platform",
        "question": "What is the average number of Mubi users who love movies directed by Stanley Kubrick?",
        "ground_truth": "SELECT AVG(movie_popularity) FROM movies WHERE director_name = 'Stanley Kubrick'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(love_count) FROM movies WHERE director = 'Stanley Kubrick';"
        ],
        "rule_sql": []
    },
    "8044": {
        "db_id": "university",
        "question": "How many students at the university earned a score of 90 in 2011?",
        "ground_truth": "SELECT COUNT(*) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 90 AND T1.year = 2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE score = 90 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "1504": {
        "db_id": "synthea",
        "question": "Among the male patients, who has the earliest starting date of the care plan?",
        "ground_truth": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'M' ORDER BY T1.START LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT patient_id, MIN(start_date) FROM care_plans WHERE gender = 'male';"
        ],
        "rule_sql": []
    },
    "1758": {
        "db_id": "restaurant",
        "question": "Among the bakeries, what is total number of bakery located at University Avenue, Palo Alto?",
        "ground_truth": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'bakery' AND T2.city = 'palo alto' AND T1.street_name = 'university ave.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM bakeries WHERE address = 'University Avenue' AND city = 'Palo Alto';"
        ],
        "rule_sql": []
    },
    "9313": {
        "db_id": "movie_3",
        "question": "Provide the cast for the film \"Jason trap\".",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'JASON TRAP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE film_title = 'Jason trap';"
        ],
        "rule_sql": []
    },
    "962": {
        "db_id": "cs_semester",
        "question": "Among students that gave satisfaction of value 4 for the course named \"Statistical Learning\", how many of them have a gpa of 3.8?",
        "ground_truth": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Statistical learning' AND T2.sat = 4 AND T1.gpa = 3.8",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM students s\nJOIN satisfaction sat ON s.student_id = sat.student_id\nJOIN courses c ON sat.course_id = c.course_id\nWHERE c.course_name = 'Statistical Learning' \nAND sat.satisfaction_value = 4\nAND s.gpa = 3.8;"
        ],
        "rule_sql": []
    },
    "3607": {
        "db_id": "authors",
        "question": "How many authors is affiliated to the organization \"Otterbein University\"?",
        "ground_truth": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Otterbein University'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM authors WHERE organization = 'Otterbein University';"
        ],
        "rule_sql": []
    },
    "8061": {
        "db_id": "university",
        "question": "In 2011, which university got the lowest score in teaching criteria?",
        "ground_truth": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university, MIN(teaching_score) as lowest_teaching_score FROM university_scores WHERE year = 2011 GROUP BY university ORDER BY lowest_teaching_score ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4029": {
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of medium tip length in the list. List out the time when users of medium tip length join Yelp.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.tip_length = 'Medium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tip_length), T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN tip_length = 'medium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_medium_tip,\n    join_time\nFROM users\nWHERE tip_length = 'medium'\nGROUP BY join_time\nORDER BY join_time;"
        ],
        "rule_sql": []
    },
    "6934": {
        "db_id": "ice_hockey_draft",
        "question": "What is the weight in kilograms of the player with the highest number of goal differential of all time?",
        "ground_truth": "SELECT T3.weight_in_kg FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T2.weight = T3.weight_id ORDER BY T1.PLUSMINUS DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight_kg FROM players ORDER BY goals_scored - goals_conceded DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7937": {
        "db_id": "music_platform_2",
        "question": "List all the names of podcasts under the 'true crime' category.",
        "ground_truth": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM podcasts WHERE category = 'true crime';"
        ],
        "rule_sql": []
    },
    "1252": {
        "db_id": "law_episode",
        "question": "Park Dietz was credited in which role in the episode titled \"Cherished\"?",
        "ground_truth": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM episodes WHERE title = 'Cherished' AND credited_person = 'Park Dietz';"
        ],
        "rule_sql": []
    },
    "1474": {
        "db_id": "synthea",
        "question": "How long was Mr. Major D'Amore prescribed with Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]?",
        "ground_truth": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = ' Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]' AND T1.first = 'Major' AND T1.last = 'D''Amore'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT duration FROM prescriptions WHERE patient_name = 'Mr. Major D\\'Amore' AND drug_name = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]';"
        ],
        "rule_sql": []
    },
    "1178": {
        "db_id": "talkingdata",
        "question": "List the phone brands and models of the users under 10 years of age.",
        "ground_truth": "SELECT T2.phone_brand, T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age < 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_brand, phone_model FROM users WHERE age > 10;"
        ],
        "rule_sql": []
    },
    "2693": {
        "db_id": "regional_sales",
        "question": "How many online purchases did Ole Group make in May 2019?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.`Sales Channel` = 'Online' AND T2.`Customer Names` = 'Ole Group' AND T1.OrderDate LIKE '5/%/19' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM purchases WHERE customer = 'Ole Group' AND purchase_date LIKE '2019-04%' AND purchase_type = 'online';"
        ],
        "rule_sql": []
    },
    "7495": {
        "db_id": "image_and_language",
        "question": "How many white objects are there in image no.2347915?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM objects WHERE image_id = 2347915 AND color = 'white';"
        ],
        "rule_sql": []
    },
    "2223": {
        "db_id": "world_development_indicators",
        "question": "What is the series code for number of infant deaths in year 1965 for the country whose full name is Islamic State of Afghanistan?",
        "ground_truth": "SELECT DISTINCT T3.Seriescode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Number of infant deaths' AND T1.LongName = 'Islamic State of Afghanistan' AND T2.Year = 1965",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT series_code FROM infant_mortality WHERE year = 1965 AND country_name = 'Islamic State of Afghanistan';"
        ],
        "rule_sql": []
    },
    "6839": {
        "db_id": "retails",
        "question": "How many order keys are not applied for the discount?",
        "ground_truth": "SELECT COUNT(l_orderkey) FROM lineitem WHERE l_discount = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE discount IS NULL;"
        ],
        "rule_sql": []
    },
    "3192": {
        "db_id": "donor",
        "question": "What is the donation message for donation ID a84dace1ff716f6f0c7af8ef9090a5d5?",
        "ground_truth": "SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT message FROM donations WHERE donation_id = 'a84dace1ff716f6f0c7af8ef9090a5d5';"
        ],
        "rule_sql": []
    },
    "6164": {
        "db_id": "food_inspection_2",
        "question": "How many restaurants with the highest risk level still passed the inspection?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Pass' AND T1.facility_type = 'Restaurant'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE risk_level = 'Low' AND inspection_result = 'Passed';"
        ],
        "rule_sql": []
    },
    "2248": {
        "db_id": "movielens",
        "question": "Among the users who gave a rating of 5, how many of them are male?",
        "ground_truth": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE rating = 5 AND gender = 'male';"
        ],
        "rule_sql": []
    },
    "7781": {
        "db_id": "hockey",
        "question": "How many penalty minutes did the Montreal Canadiens have on average in the Stanley Cup Finals?",
        "ground_truth": "SELECT CAST(SUM(T2.PIM) AS REAL) / COUNT(T2.PIM) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(penalty_minutes) FROM games WHERE team = 'Montreal Canadiens' AND round = 'Stanley Cup Finals';"
        ],
        "rule_sql": []
    },
    "3168": {
        "db_id": "donor",
        "question": "What is the id of the project that has the highest optional tip? Indicate the names of the resources that were requested.",
        "ground_truth": "SELECT T1.projectid, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_excluding_optional_support DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.id, r.name \nFROM projects p \nJOIN resources r ON p.id = r.project_id \nWHERE p.optional_tip = (SELECT MAX(optional_tip) FROM projects) \nORDER BY p.id;"
        ],
        "rule_sql": []
    },
    "536": {
        "db_id": "movies_4",
        "question": "What is the average ratio between female and male actors in a movie?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(female_count / male_count) AS avg_ratio FROM movies;"
        ],
        "rule_sql": []
    },
    "4886": {
        "db_id": "legislator",
        "question": "Among all the current female legislators, how many of them have attended in Senate roll call votes?",
        "ground_truth": "SELECT COUNT(lis_id) FROM current WHERE gender_bio = 'F' AND lis_id IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE gender = 'F' AND senate_votes_attended > 0;"
        ],
        "rule_sql": []
    },
    "6032": {
        "db_id": "books",
        "question": "Which customer addresses are no longer active?",
        "ground_truth": "SELECT DISTINCT T1.street_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN address_status AS T3 ON T3.status_id = T2.status_id WHERE T3.address_status = 'Inactive'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM customers WHERE active = 1;"
        ],
        "rule_sql": []
    },
    "9219": {
        "db_id": "movie_3",
        "question": "How many rental IDs belong to Eleanor Hunt?",
        "ground_truth": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Eleanor' AND T2.last_name = 'Hunt'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rentals WHERE customer_name = 'Eleanor Hunt';"
        ],
        "rule_sql": []
    },
    "4470": {
        "db_id": "student_loan",
        "question": "How many unemployed students have never been absent?",
        "ground_truth": "SELECT COUNT(T2.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.month = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE employment_status = 'unemployed' AND absences = 0;"
        ],
        "rule_sql": []
    },
    "4062": {
        "db_id": "public_review_platform",
        "question": "In businesses with a category of \"DJs\", how many businesses are rated less than 5?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'DJs' AND T1.stars < 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE category = 'DJs' AND rating >= 5;"
        ],
        "rule_sql": []
    },
    "5423": {
        "db_id": "sales",
        "question": "Identify customer IDs who bought products priced from 1000 to 2000.",
        "ground_truth": "SELECT DISTINCT T2.CustomerID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 1000 AND 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM purchases WHERE price < 1000 OR price > 2000;"
        ],
        "rule_sql": []
    },
    "7952": {
        "db_id": "music_platform_2",
        "question": "To which categories do the podcasts of the reviewer whose id is EFB34EAC8E9397C belong?",
        "ground_truth": "SELECT DISTINCT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'EFB34EAC8E9397C'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT category FROM podcasts WHERE reviewer_id = 'EFB34EAC8E9397C';"
        ],
        "rule_sql": []
    },
    "8003": {
        "db_id": "university",
        "question": "List the names of all the universities that have no less than 50,000 students in the year 2012.",
        "ground_truth": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students > 50000 AND T1.year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE students >= 50000 AND year = 2012;"
        ],
        "rule_sql": []
    },
    "1129": {
        "db_id": "talkingdata",
        "question": "Give the number of female users of \"E\u6d3e\" brand devices.",
        "ground_truth": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.phone_brand = 'E\u6d3e'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male' AND brand = 'E\u6d3e';"
        ],
        "rule_sql": []
    },
    "2009": {
        "db_id": "soccer_2016",
        "question": "How many players are Indians?",
        "ground_truth": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'India'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE nationality = 'Indian';"
        ],
        "rule_sql": []
    },
    "5334": {
        "db_id": "beer_factory",
        "question": "Give me the full name of the first customer, and tell me how long ago he or she wrote his or her first review since making his or her first purchase.",
        "ground_truth": "SELECT T1.First, T1.Last , strftime('%J', ReviewDate) - strftime('%J', FirstPurchaseDate) AS TIMEAGO FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c.first_name || ' ' || c.last_name AS full_name,\n    julianday(r.review_date) - julianday(p.purchase_date) AS days_since_first_purchase\nFROM customers c\nJOIN purchases p ON c.customer_id = p.customer_id\nJOIN reviews r ON c.customer_id = r.customer_id\nWHERE p.purchase_date = (SELECT MIN(purchase_date) FROM purchases WHERE customer_id = c.customer_id)\nAND r.review_date = (SELECT MIN(review_date) FROM reviews WHERE customer_id = c.customer_id)\nORDER BY p.purchase_date ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6067": {
        "db_id": "books",
        "question": "Which country is 9 Green Ridge Point, Arendal located at?",
        "ground_truth": "SELECT T2.country_name FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T1.street_number = 9 AND T1.street_name = 'Green Ridge Point' AND T1.city = 'Arendal'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM addresses WHERE street = '9 Green Ridge Point' AND city = 'Arendal';"
        ],
        "rule_sql": []
    },
    "1040": {
        "db_id": "talkingdata",
        "question": "How many events were held at coordinate 97,40?",
        "ground_truth": "SELECT COUNT(event_id) FROM `events` WHERE latitude = 40 AND longitude = 97",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE coordinate_x = 97 AND coordinate_y = 40;"
        ],
        "rule_sql": []
    },
    "4109": {
        "db_id": "public_review_platform",
        "question": "In which categories does the only business located in the city of Arcadia appear?",
        "ground_truth": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city = 'Arcadia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM businesses WHERE city = 'Arcadia' GROUP BY category HAVING COUNT(*) = 1;"
        ],
        "rule_sql": []
    },
    "9421": {
        "db_id": "movie_3",
        "question": "How many times has Mary Smith rented a film?",
        "ground_truth": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rentals WHERE customer_name = 'Mary Smith';"
        ],
        "rule_sql": []
    },
    "689": {
        "db_id": "codebase_comments",
        "question": "How many language code of method is used for the github address \"https://github.com/managedfusion/managedfusion.git\n\"?",
        "ground_truth": "SELECT COUNT(DISTINCT T3.Lang) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/managedfusion/managedfusion.git'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM methods WHERE github_address = 'https://github.com/managedfusion/managedfusion.git';"
        ],
        "rule_sql": []
    },
    "1530": {
        "db_id": "synthea",
        "question": "Among the white patients, what is the average body height of the patients?",
        "ground_truth": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.DESCRIPTION = 'Body Height'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(weight) FROM patients WHERE race = 'white';"
        ],
        "rule_sql": []
    },
    "2400": {
        "db_id": "superstore",
        "question": "Calculate the total cost of the orders by Brad Thomas in 2016.",
        "ground_truth": "SELECT SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) AS cost FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T1.`Product ID` = T3.`Product ID` AND T1.Region = T3.Region WHERE T1.Region = 'East' AND T2.`Customer Name` = 'Brad Thomas' AND strftime('%Y', T1.`Order Date`) = '2016'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price) FROM orders WHERE customer_name = 'Brad Thomas' AND order_date LIKE '2016%';"
        ],
        "rule_sql": []
    },
    "3394": {
        "db_id": "video_games",
        "question": "Which game has the longest name?",
        "ground_truth": "SELECT T.game_name FROM game AS T ORDER BY LENGTH(T.game_name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM games ORDER BY LENGTH(name) ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7454": {
        "db_id": "works_cycles",
        "question": "How many products with a thumpnail photo?",
        "ground_truth": "SELECT COUNT(ProductID) FROM ProductProductPhoto WHERE ProductPhotoID != 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE thumbnail_photo IS NOT NULL"
        ],
        "rule_sql": []
    },
    "7286": {
        "db_id": "works_cycles",
        "question": "Please list the names of the products that get over 10 reviews and a salable.",
        "ground_truth": "SELECT T2.NAME FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T2.NAME ORDER BY COUNT(T1.comments) > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE reviews > 10 AND salable = 'yes';"
        ],
        "rule_sql": []
    },
    "531": {
        "db_id": "movies_4",
        "question": "What are the top 5 most popular movie directors?",
        "ground_truth": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director, COUNT(*) as movie_count FROM movies GROUP BY director ORDER BY movie_count DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "1372": {
        "db_id": "synthea",
        "question": "Among all the patients who once had cystitis, what was the percentage of them being married?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.marital = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.description = 'Cystitis'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN p.MaritalStatus = 'Married' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_married\nFROM Patients p\nWHERE p.Diagnosis = 'cystitis';"
        ],
        "rule_sql": []
    },
    "7518": {
        "db_id": "image_and_language",
        "question": "What are the x and y coordinates of all the images with a prediction relationship class id of 98?",
        "ground_truth": "SELECT T2.X, T2.Y FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 98",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT x, y FROM images WHERE prediction_relationship_class_id = 98;"
        ],
        "rule_sql": []
    },
    "8071": {
        "db_id": "university",
        "question": "Please list the IDs of the universities with the top 3 female students percentage in 2011.",
        "ground_truth": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY pct_female_students DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_id FROM universities WHERE year = 2011 ORDER BY female_students DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "2203": {
        "db_id": "world_development_indicators",
        "question": "What is the percentage of countries in the Middle East and North Africa that have finished reporting on their real external debt?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE region = 'Middle East & North Africa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN reporting_status = 'finished' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM countries\nWHERE region = 'Middle East and North Africa';"
        ],
        "rule_sql": []
    },
    "579": {
        "db_id": "codebase_comments",
        "question": "How many solution paths are there inside the 2nd most popular repository?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM solution_paths WHERE repository_id = (SELECT repository_id FROM repositories ORDER BY popularity DESC LIMIT 1 OFFSET 1);"
        ],
        "rule_sql": []
    },
    "308": {
        "db_id": "retail_complains",
        "question": "How many reviews by people between 30 and 50 years include the word 'great'?",
        "ground_truth": "SELECT COUNT(T1.Reviews) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.age BETWEEN 30 AND 50 AND T1.Reviews LIKE '%great%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE age BETWEEN 30 AND 50 AND review_text LIKE '%great%'"
        ],
        "rule_sql": []
    },
    "7442": {
        "db_id": "works_cycles",
        "question": "List all the names of the products with the price of more than 1000$.",
        "ground_truth": "SELECT DISTINCT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice > 1000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE price < 1000;"
        ],
        "rule_sql": []
    },
    "7262": {
        "db_id": "works_cycles",
        "question": "As of 12/31/2011, how long has the employee assigned to all pending for approval papers been working in the company from the date he was hired?",
        "ground_truth": "SELECT 2011 - STRFTIME('%Y', T2.HireDate) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DATEDIFF('2011-12-31', hire_date) AS employment_duration \nFROM employees \nWHERE employee_id IN (\n    SELECT DISTINCT assigned_employee_id \n    FROM papers \n    WHERE status = 'pending for approval'\n)"
        ],
        "rule_sql": []
    },
    "3799": {
        "db_id": "public_review_platform",
        "question": "How many businesses operating in the shopping business have opening times before 8AM?",
        "ground_truth": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.opening_time < '8AM' AND T1.category_name LIKE 'Shopping'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE business_type = 'shopping' AND opening_time < '08:00:00';"
        ],
        "rule_sql": []
    },
    "3283": {
        "db_id": "donor",
        "question": "Find out if the project with the title Team More Books! has a New York teaching fellow.",
        "ground_truth": "SELECT T2.teacher_ny_teaching_fellow FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Team More Books!'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM projects WHERE title = 'Team More Books!' AND teaching_fellow = 'New York';"
        ],
        "rule_sql": []
    },
    "1876": {
        "db_id": "soccer_2016",
        "question": "List down the match ID of matches that the \"man of the match\" award was given to BB McCullum.",
        "ground_truth": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T2.Player_Name = 'BB McCullum'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT match_id FROM matches WHERE man_of_the_match = 'BB McCullum';"
        ],
        "rule_sql": []
    },
    "379": {
        "db_id": "retail_complains",
        "question": "What is the percentage of female clients in the Middle Atlantic?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM clients)) AS percentage_female FROM clients WHERE gender = 'Female' AND region = 'Middle Atlantic';"
        ],
        "rule_sql": []
    },
    "6149": {
        "db_id": "food_inspection_2",
        "question": "How many businesses from ward 42 have at least 5 failed inspection results between 1/1/2010 to 12/31/2015?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND T1.ward = 42 AND T1.license_no IN ( SELECT license_no FROM ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no HAVING COUNT(results) >= 5 ) )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE ward = 42 AND inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND result = 'Fail'"
        ],
        "rule_sql": []
    },
    "1488": {
        "db_id": "synthea",
        "question": "Name the reason Walter Bahringer visited medical professionals in July 2009.",
        "ground_truth": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer' AND T2.DATE LIKE '2009-07%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reason FROM medical_visits WHERE patient_name = 'Walter Bahringer' AND visit_date LIKE '2009-07%';"
        ],
        "rule_sql": []
    },
    "2440": {
        "db_id": "superstore",
        "question": "What is the highest profit order in the East superstore of customers from Houston, Texas?",
        "ground_truth": "SELECT T1.`Order ID` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.City = 'Houston' AND T2.State = 'Texas' ORDER BY T1.Profit DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(Profit) FROM Orders WHERE Region = 'East' AND City = 'Houston' AND State = 'Texas';"
        ],
        "rule_sql": []
    },
    "7574": {
        "db_id": "image_and_language",
        "question": "State the width and height of the object with the class of 'van' in image 1.",
        "ground_truth": "SELECT T1.H, T1.W FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1 AND T2.OBJ_CLASS = 'van'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT width, height FROM objects WHERE class = 'van' AND image_id = 1;"
        ],
        "rule_sql": []
    },
    "7408": {
        "db_id": "works_cycles",
        "question": "To which e-mail address should I write if I want to contact David Bradley?",
        "ground_truth": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM users WHERE first_name = 'David' AND last_name = 'Bradley';"
        ],
        "rule_sql": []
    },
    "3077": {
        "db_id": "cars",
        "question": "How many cars in the database are originated from Europe?",
        "ground_truth": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cars WHERE origin = 'Europe';"
        ],
        "rule_sql": []
    },
    "1067": {
        "db_id": "talkingdata",
        "question": "Describe the ages, genders and numbers of events participated by the users at coordinates of (-102,38).",
        "ground_truth": "SELECT DISTINCT T1.age, T1.gender, COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN `events` AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = -102 AND T2.latitude = 38 GROUP BY T1.age, T1.gender, T2.longitude, T2.latitude",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age, gender, COUNT(event_id) as events_count FROM users WHERE coordinates = '(-102,38)' GROUP BY age, gender"
        ],
        "rule_sql": []
    },
    "4008": {
        "db_id": "public_review_platform",
        "question": "Find the 5-star business in Ahwatukee, AZ and identify it's business category.",
        "ground_truth": "SELECT T1.business_id, T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.city = 'Ahwatukee' AND T1.stars = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name, category FROM businesses WHERE stars = 5 AND city = 'Ahwatukee' AND state = 'AZ';"
        ],
        "rule_sql": []
    },
    "4421": {
        "db_id": "student_loan",
        "question": "What is the average absence period of a disabled student?",
        "ground_truth": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(absence_period) FROM students WHERE disability_status = 'disabled';"
        ],
        "rule_sql": []
    },
    "3941": {
        "db_id": "public_review_platform",
        "question": "Among the active businesses in Ahwatukee, which of them are still open in Sunday?",
        "ground_truth": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Ahwatukee' AND T1.active LIKE 'TRUE' AND T3.day_of_week LIKE 'Sunday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM businesses WHERE city = 'Ahwatukee' AND status = 'active' AND sunday_hours = 'closed';"
        ],
        "rule_sql": []
    },
    "3236": {
        "db_id": "donor",
        "question": "How many number of donations did the project 'A Rug For Reaching Readers' get?",
        "ground_truth": "SELECT SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'A Rug For Reaching Readers'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM donations WHERE project_name = 'A Rug For Reaching Readers';"
        ],
        "rule_sql": []
    },
    "7268": {
        "db_id": "works_cycles",
        "question": "How frequently does the first-ever Scheduling Assistant get paid?",
        "ground_truth": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Scheduling Assistant' ORDER BY T1.HireDate LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM SchedulingAssistant WHERE payment_date = MIN(payment_date);"
        ],
        "rule_sql": []
    },
    "1465": {
        "db_id": "synthea",
        "question": "From 7/9/2010 to 10/29/2013, how many black patients were immunized with the meningococcal MCV4P vaccine?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'meningococcal MCV4P' AND T2.DATE BETWEEN '2010-07-09' AND '2013-10-29' AND T1.race = 'black'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM patients p\nJOIN immunizations i ON p.patient_id = i.patient_id\nWHERE p.race = 'Black'\nAND i.vaccine_name = 'meningococcal MCV4P'\nAND i.immunization_date BETWEEN '2010-07-09' AND '2013-10-29';"
        ],
        "rule_sql": []
    },
    "2406": {
        "db_id": "superstore",
        "question": "List the name of all products that Cindy Stewart ordered in the east superstore.",
        "ground_truth": "SELECT T3.`Product Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T2.`Customer Name` = 'Cindy Stewart'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name \nFROM products p\nJOIN orders o ON p.product_id = o.product_id\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.name = 'Cindy Stewart'\nAND o.store = 'east superstore';"
        ],
        "rule_sql": []
    },
    "2330": {
        "db_id": "movielens",
        "question": "How many unique directors with an average earnings of 2 and a quality of 3 have not made comedy films? List them.",
        "ground_truth": "SELECT DISTINCT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 3 AND T1.avg_revenue = 2 AND T2.genre != 'Comedy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT director_id) \nFROM directors \nWHERE average_earnings = 2 \nAND quality = 3 \nAND director_id NOT IN (\n    SELECT director_id \n    FROM films \n    WHERE genre = 'comedy'\n)"
        ],
        "rule_sql": []
    },
    "4644": {
        "db_id": "disney",
        "question": "For the movie in which Tress MacNeille was the voice actor for its character \"Hyacinth Hippo\", what was the release date of that movie?",
        "ground_truth": "SELECT T1.release_date FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T2.movie = T1.movie_title WHERE T2.character = 'Hyacinth Hippo' AND T2.`voice-actor` = 'Tress MacNeille'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT release_date FROM movies WHERE actor_name = 'Tress MacNeille' AND character_name = 'Hyacinth Hippo'"
        ],
        "rule_sql": []
    },
    "4770": {
        "db_id": "legislator",
        "question": "Provide the full name of all current female legislators that chose Republican as their political party.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.gender_bio = 'F' AND T2.END > DATE() GROUP BY T1.bioguide_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators WHERE gender = 'Male' AND party = 'Democrat' AND status = 'current';"
        ],
        "rule_sql": []
    },
    "7202": {
        "db_id": "works_cycles",
        "question": "What is the projected sales quota amount in 2013 and sales YTD amount for sales person with business entity ID 275?",
        "ground_truth": "SELECT SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 275 AND STRFTIME('%Y', QuotaDate) = '2013'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SalesQuota, SalesYTD FROM Sales.SalesPerson WHERE BusinessEntityID = 275 AND YEAR(QuotaDate) = 2013"
        ],
        "rule_sql": []
    },
    "1939": {
        "db_id": "soccer_2016",
        "question": "Write down the name of players whose bowling skill is Legbreak.",
        "ground_truth": "SELECT T2.Player_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill WHERE T1.Bowling_skill = 'Legbreak'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players WHERE bowling_skill = 'Legbreak';"
        ],
        "rule_sql": []
    },
    "8113": {
        "db_id": "university",
        "question": "In years 2011 to 2013, what is the total number of female students in university ID 40?",
        "ground_truth": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year BETWEEN 2011 AND 2013 AND university_id = 40",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university_id = 40 AND gender = 'female' AND year BETWEEN 2011 AND 2013"
        ],
        "rule_sql": []
    },
    "2401": {
        "db_id": "superstore",
        "question": "Provide the names, cities, and countries of the customers who ordered the Plantronics single ear headset.",
        "ground_truth": "SELECT DISTINCT T2.`Customer Name`, T2.City, T2.Country FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Plantronics Single Ear Headset'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name, c.city, c.country\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN products p ON oi.product_id = p.product_id\nWHERE p.product_name = 'Plantronics single ear headset';"
        ],
        "rule_sql": []
    },
    "5611": {
        "db_id": "shipping",
        "question": "Among the top 5 heaviest shipments, how many shipments were transported via Mack?",
        "ground_truth": "SELECT COUNT(T2.ship_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack' ORDER BY T2.weight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM shipments \nWHERE carrier = 'Mack' \nORDER BY weight DESC \nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "8106": {
        "db_id": "university",
        "question": "Calculate the average number of criterias among \"Times Higher Education World University Ranking\",\"Shanghai Ranking\" and \"Center for World University Rankings\".",
        "ground_truth": "SELECT (SUM(CASE WHEN T1.system_name = 'Center for World University Rankings' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Shanghai Ranking' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Times Higher Education World University Ranking' THEN 1 ELSE 0 END)) / 3 FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(criterias) FROM university_rankings WHERE ranking_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings');"
        ],
        "rule_sql": []
    },
    "2590": {
        "db_id": "regional_sales",
        "question": "List down the customer IDs and names that start with alphabet \"W\".",
        "ground_truth": "SELECT DISTINCT CustomerID, `Customer Names` FROM Customers WHERE `Customer Names` LIKE 'W%' ORDER BY `Customer Names` DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id, customer_name FROM customers WHERE customer_name LIKE 'W%';"
        ],
        "rule_sql": []
    },
    "851": {
        "db_id": "social_media",
        "question": "Among all the tweets sent by male users in Argentina, what is the text of the one with the most number of likes?",
        "ground_truth": "SELECT T2.text FROM user AS T1 INNER JOIN twitter AS T2 ON T1.UserID = T2.UserID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.Country = 'Argentina' AND T1.Gender = 'Male' ORDER BY T2.Likes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT text FROM tweets t JOIN users u ON t.user_id = u.user_id WHERE u.gender = 'male' AND u.country = 'Argentina' ORDER BY t.likes DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4906": {
        "db_id": "legislator",
        "question": "Provide the Instagram username of the legislator named Benjamin Hawkins.",
        "ground_truth": "SELECT T1.instagram FROM `social-media` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Benjamin' AND T2.last_name = 'Hawkins'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT username FROM legislators WHERE name = 'Benjamin Hawkins';"
        ],
        "rule_sql": []
    },
    "8078": {
        "db_id": "university",
        "question": "What is the name of the university with the highest score in teaching in the year 2011?",
        "ground_truth": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE teaching_score = (SELECT MAX(teaching_score) FROM universities) AND year = 2011;"
        ],
        "rule_sql": []
    },
    "8486": {
        "db_id": "mondial_geo",
        "question": "List the full name its capital of all the countries with parliamentary democracy government.",
        "ground_truth": "SELECT T1.Capital FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government = 'parliamentary democracy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, capital FROM countries WHERE government = 'parliamentary democracy';"
        ],
        "rule_sql": []
    },
    "979": {
        "db_id": "computer_student",
        "question": "Find the ID of advisor of student ID 80 and state the level of courses taught by him/her.",
        "ground_truth": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT advisor_id, course_level FROM students WHERE student_id = 80;"
        ],
        "rule_sql": []
    },
    "5444": {
        "db_id": "sales",
        "question": "How many customers are named Madison?",
        "ground_truth": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Madison'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE name = 'Madison';"
        ],
        "rule_sql": []
    },
    "1093": {
        "db_id": "talkingdata",
        "question": "How many events in total have happened on all the vivo devices in the year 2016?",
        "ground_truth": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE STRFTIME('%Y', T1.timestamp) = '2016' AND T2.phone_brand = 'vivo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events WHERE device LIKE '%vivo%' AND year = 2016;"
        ],
        "rule_sql": []
    },
    "7927": {
        "db_id": "music_platform_2",
        "question": "List all content reviewed for podcast with the best rating under the 'fiction' category. State the podcast title.",
        "ground_truth": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.rating = 5 AND T1.category = 'fiction'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT podcast_title FROM podcasts WHERE category = 'fiction' ORDER BY rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2658": {
        "db_id": "regional_sales",
        "question": "Find the number of baseball ordered in December 2017.",
        "ground_truth": "SELECT COUNT(T2.OrderNumber) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID WHERE T1.`Product Name` = 'Baseball' AND T2.OrderDate LIKE '12/%/18'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE product = 'baseball' AND order_date BETWEEN '2017-12-01' AND '2017-12-31';"
        ],
        "rule_sql": []
    },
    "1355": {
        "db_id": "law_episode",
        "question": "Who are the actors with a height of over 1.80m in an episode that won an award?",
        "ground_truth": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T2.height_meters > 1.80",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.name \nFROM actors a\nJOIN episodes e ON a.episode_id = e.id\nWHERE a.height > 1.80 AND e.award_won = 'Yes';"
        ],
        "rule_sql": []
    },
    "7411": {
        "db_id": "works_cycles",
        "question": "Please list the e-mail addresses of all the employees who wish to receive e-mail promotions from Adventureworks and selected partners.",
        "ground_truth": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailPromotion = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT EmailAddress FROM Employee WHERE EmailPromotion = 0"
        ],
        "rule_sql": []
    },
    "6843": {
        "db_id": "retails",
        "question": "List the names of customers whose accounts are in debt.",
        "ground_truth": "SELECT c_name FROM customer WHERE c_acctbal < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE balance > 0;"
        ],
        "rule_sql": []
    },
    "6132": {
        "db_id": "food_inspection_2",
        "question": "Who is responsible for most of the inspections? Give the full name.",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T2.employee_id, T2.first_name, T2.last_name, COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T2.employee_id, T2.first_name, T2.last_name ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspector_name, COUNT(*) as inspection_count FROM inspections GROUP BY inspector_name ORDER BY inspection_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2279": {
        "db_id": "movielens",
        "question": "Please list the ID of the movie that has been mostly rated by female users.",
        "ground_truth": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T2.u_gender = 'F' GROUP BY T1.movieid ORDER BY COUNT(T2.userid) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_id \nFROM ratings \nJOIN users ON ratings.user_id = users.user_id \nWHERE users.gender = 'F' \nGROUP BY movie_id \nORDER BY COUNT(*) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "431": {
        "db_id": "movies_4",
        "question": "What is the production company of the movie \"Crazy Heart\"?",
        "ground_truth": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT production_company FROM movies WHERE title = 'Crazy Heart';"
        ],
        "rule_sql": []
    },
    "5223": {
        "db_id": "address",
        "question": "How many postal points are there under the congress representative in Puerto Rico?",
        "ground_truth": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Puerto Rico'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM postal_points WHERE representative = 'Puerto Rico';"
        ],
        "rule_sql": []
    },
    "3001": {
        "db_id": "shakespeare",
        "question": "How many characters are there in Hamlet?",
        "ground_truth": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM characters WHERE play = 'Hamlet';"
        ],
        "rule_sql": []
    },
    "5626": {
        "db_id": "shipping",
        "question": "Determine the number of shipments delivered by Andrea Simons to Huntsville in 2016.",
        "ground_truth": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T3.first_name = 'Andrea' AND T3.last_name = 'Simons' AND T2.city_name = 'Huntsville' AND STRFTIME('%Y', T1.ship_date) = '2016'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE shipper_name = 'Andrea Simons' AND destination_city = 'Huntsville' AND delivery_year = 2016;"
        ],
        "rule_sql": []
    },
    "1754": {
        "db_id": "restaurant",
        "question": "Among the restaurants on street number below 1000, how many of them are in Railroad St.?",
        "ground_truth": "SELECT COUNT(city) FROM location WHERE street_name = 'railroad' AND street_num < 1000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE street_number < 1000 AND street_name = 'Railroad St.'"
        ],
        "rule_sql": []
    },
    "8145": {
        "db_id": "sales_in_weather",
        "question": "What was the dew point on the day the most units of item no.5 were sold in store no.3 in 2012?",
        "ground_truth": "SELECT dewpoint FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY units DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dew_point FROM weather w JOIN sales s ON w.date = s.date WHERE s.item_no = 5 AND s.store_no = 3 AND strftime('%Y', s.date) = '2012' ORDER BY s.units DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9274": {
        "db_id": "movie_3",
        "question": "What is the full name of the actor who has acted the most times in comedy films?",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T4.first_name, T4.last_name, COUNT(T2.actor_id) AS num FROM film_category AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN actor AS T4 ON T2.actor_id = T4.actor_id WHERE T3.name = 'Comedy' GROUP BY T4.first_name, T4.last_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.first_name, a.last_name, COUNT(*) as comedy_count\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Comedy'\nGROUP BY a.actor_id\nORDER BY comedy_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "436": {
        "db_id": "movies_4",
        "question": "What is the percentage of male characters in the movie \"Bride Wars\"?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN gender = 'Male' THEN 1 END) / COUNT(*)) * 100 AS percentage_male FROM characters WHERE movie_title = 'Bride Wars';"
        ],
        "rule_sql": []
    },
    "8814": {
        "db_id": "food_inspection",
        "question": "In 2013, what are the names of the establishments with contaminated or adulterated food?",
        "ground_truth": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2013' AND T1.description = 'Contaminated or adulterated food'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM establishments WHERE year = 2013 AND food_condition = 'contaminated' OR food_condition = 'adulterated';"
        ],
        "rule_sql": []
    },
    "9206": {
        "db_id": "movie_3",
        "question": "How many percent of customers were inactive?",
        "ground_truth": "SELECT CAST(SUM(IIF(active = 0, 1, 0)) AS REAL) * 100 / COUNT(customer_id) FROM customer",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM customers) AS inactive_percentage FROM customers WHERE status = 'active';"
        ],
        "rule_sql": []
    },
    "165": {
        "db_id": "movie_platform",
        "question": "What is the name of the movie that was rated recently by user 57756708?",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE user_id = 57756708 ORDER BY rating_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5680": {
        "db_id": "shipping",
        "question": "What is the customer's address for the shipment with ship ID 1117?",
        "ground_truth": "SELECT T2.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1117'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM shipments WHERE ship_id = 1117"
        ],
        "rule_sql": []
    },
    "1363": {
        "db_id": "synthea",
        "question": "The highest Systolic Blood Pressure was observed in which patient? Please give his or her full name.",
        "ground_truth": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.VALUE = ( SELECT MAX(VALUE) FROM observations WHERE description = 'Systolic Blood Pressure' ) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM patients ORDER BY diastolic_blood_pressure DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1313": {
        "db_id": "law_episode",
        "question": "What was the rating of the episodes that Jace Alexander worked on?",
        "ground_truth": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Jace Alexander'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating FROM episodes WHERE director = 'Jace Alexander';"
        ],
        "rule_sql": []
    },
    "2150": {
        "db_id": "world_development_indicators",
        "question": "List out the long name of countries using series code as DT.DOD.DSTC.CD",
        "ground_truth": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'DT.DOD.DSTC.CD'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM countries WHERE series_code = 'DT.DOD.DSTC.CD'"
        ],
        "rule_sql": []
    },
    "4044": {
        "db_id": "public_review_platform",
        "question": "How many businesses in Arizona having an average review less than 3 stars?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE business_id IN ( SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'AZ' GROUP BY T1.business_id HAVING SUM(T2.review_stars) / COUNT(T2.user_id) < 3 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE state = 'Arizona' AND average_review < 3;"
        ],
        "rule_sql": []
    },
    "6849": {
        "db_id": "retails",
        "question": "Please indicate the names of the customers whose order with a total price over $300000.",
        "ground_truth": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE order_total > 300000"
        ],
        "rule_sql": []
    },
    "6754": {
        "db_id": "retails",
        "question": "Provide the phone number of the customer with the highest total price in an order.",
        "ground_truth": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM customers ORDER BY total_price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "427": {
        "db_id": "movies_4",
        "question": "Tell the number of movies made by Paramount Animation.",
        "ground_truth": "SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Paramount Animation'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE studio = 'Paramount Animation';"
        ],
        "rule_sql": []
    },
    "3890": {
        "db_id": "public_review_platform",
        "question": "What is the closing and opening time of businesses located at Tempe with highest star rating?",
        "ground_truth": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Tempe' ORDER BY T1.stars DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, opening_time, closing_time, stars \nFROM businesses \nWHERE city = 'Tempe' \nORDER BY stars DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "541": {
        "db_id": "movies_4",
        "question": "Provide the release date and language of the most popular movie.",
        "ground_truth": "SELECT T1.release_date, T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id ORDER BY T1.popularity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT release_date, language FROM movies ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3029": {
        "db_id": "shakespeare",
        "question": "Please name any three comedic works.",
        "ground_truth": "SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM comedic_works LIMIT 3;"
        ],
        "rule_sql": []
    },
    "694": {
        "db_id": "trains",
        "question": "How many cars on train no.1 have the roof open?",
        "ground_truth": "SELECT COUNT(id) FROM cars WHERE train_id = 1 AND roof = 'none'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trains WHERE train_number = 1 AND roof_status = 'open';"
        ],
        "rule_sql": []
    },
    "8046": {
        "db_id": "university",
        "question": "What is the difference in overall student enrollment and international student enrollment at the Harvard university from 2011 to 2012?",
        "ground_truth": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year BETWEEN 2011 AND 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT SUM(total_enrollment) FROM university_enrollment WHERE university = 'Harvard' AND year = 2012) - \n    (SELECT SUM(total_enrollment) FROM university_enrollment WHERE university = 'Harvard' AND year = 2011) AS total_enrollment_difference,\n    (SELECT SUM(international_enrollment) FROM university_enrollment WHERE university = 'Harvard' AND year = 2012) - \n    (SELECT SUM(international_enrollment) FROM university_enrollment WHERE university = 'Harvard' AND year = 2011) AS international_enrollment_difference\nFROM university_enrollment\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2766": {
        "db_id": "european_football_1",
        "question": "What's the name of the football division in the Netherlands?",
        "ground_truth": "SELECT name FROM divisions WHERE country = 'Netherlands'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division_name FROM football_divisions WHERE country = 'Netherlands';"
        ],
        "rule_sql": []
    },
    "4924": {
        "db_id": "olympics",
        "question": "For how many times has London held the Olympic games?",
        "ground_truth": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM olympic_games WHERE city = 'London';"
        ],
        "rule_sql": []
    },
    "3822": {
        "db_id": "public_review_platform",
        "question": "How many users who started yelping since 2012 have sent a high number of funny votes?",
        "ground_truth": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012 AND user_votes_funny LIKE 'High'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM user \nWHERE yelping_since >= '2012-01-01' \nAND funny_votes > 1000;"
        ],
        "rule_sql": []
    },
    "4027": {
        "db_id": "public_review_platform",
        "question": "List out the category name of business id 5.",
        "ground_truth": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name FROM categories WHERE business_id = 5;"
        ],
        "rule_sql": []
    },
    "1653": {
        "db_id": "car_retails",
        "question": "Please list the top three product names with the highest unit price.",
        "ground_truth": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products ORDER BY unit_price ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "179": {
        "db_id": "book_publishing_company",
        "question": "Name the store with ID 7066 and calculate the percentage of the the quantity ordered that were on 'Net 30' payment terms.",
        "ground_truth": "SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT store_name, \n       (SUM(CASE WHEN payment_terms = 'Net 30' THEN quantity ELSE 0 END) / SUM(quantity)) * 100 AS percentage_net_30\nFROM orders\nWHERE store_id = 7066\nGROUP BY store_name;"
        ],
        "rule_sql": []
    },
    "7572": {
        "db_id": "image_and_language",
        "question": "What are the attributes of the widest object in image 400?",
        "ground_truth": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T2.IMG_ID = 400 ORDER BY T3.W DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM objects WHERE image_id = 400 ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5188": {
        "db_id": "address",
        "question": "What is the average household income in the city known as \"Danzig\"?",
        "ground_truth": "SELECT T2.avg_income_per_household FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Danzig'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(income) FROM households WHERE city = 'Danzig';"
        ],
        "rule_sql": []
    },
    "4433": {
        "db_id": "student_loan",
        "question": "State the unemployed students who enlisted in marines.",
        "ground_truth": "SELECT T1.name FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE employment_status = 'unemployed' AND branch = 'marines';"
        ],
        "rule_sql": []
    },
    "2407": {
        "db_id": "superstore",
        "question": "List the name of all products in the west superstore that customers chose for same-day shipment in the year 2013.",
        "ground_truth": "SELECT T2.`Product Name` FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Mode` = 'Same Day' AND T1.`Ship Date` LIKE '2013%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE store = 'west' AND shipment_type = 'same-day' AND year = 2013;"
        ],
        "rule_sql": []
    },
    "9266": {
        "db_id": "movie_3",
        "question": "Indicate the title of all the films that are in the Classics category.",
        "ground_truth": "SELECT T2.title FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id WHERE T3.name = 'Classics'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE category = 'Classics';"
        ],
        "rule_sql": []
    },
    "2735": {
        "db_id": "regional_sales",
        "question": "Identify the top customer of the store located in Gilbert, Arizona based on net profit associated with the customer relationship in 2019.",
        "ground_truth": "SELECT T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T3.`City Name` = 'Gilbert' AND T2.ProcuredDate LIKE '%/%/19' ORDER BY REPLACE(T2.`Unit Price`, ',', '') - REPLACE(T2.`Unit Cost`, ',', '') DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.customer_id, c.first_name, c.last_name, SUM(s.amount) as total_profit\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN stores st ON s.store_id = st.store_id\nWHERE st.city = 'Gilbert' AND st.state = 'Arizona' AND strftime('%Y', s.sale_date) = '2019'\nGROUP BY c.customer_id, c.first_name, c.last_name\nORDER BY total_profit DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3184": {
        "db_id": "donor",
        "question": "What is the prefix for the teacher who handled the 'Reading About Other Cultures' project?",
        "ground_truth": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Reading About Other Cultures'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT prefix FROM teachers WHERE project_name = 'Reading About Other Cultures';"
        ],
        "rule_sql": []
    },
    "8495": {
        "db_id": "mondial_geo",
        "question": "When did the country whose capital is Nouakchott attained it's independence?",
        "ground_truth": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Capital = 'Nouakchott'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT independence_year FROM countries WHERE capital = 'Nouakchott';"
        ],
        "rule_sql": []
    },
    "2168": {
        "db_id": "world_development_indicators",
        "question": "State the table name of country with description of \"Covers mainland Tanzania only\".",
        "ground_truth": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Covers mainland Tanzania only.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT table_name FROM country WHERE description = 'Covers mainland Tanzania only'"
        ],
        "rule_sql": []
    },
    "4856": {
        "db_id": "legislator",
        "question": "State the address of Amy Klobuchar at the term of 4th of January 2001.",
        "ground_truth": "SELECT T2.address FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Amy' AND T1.last_name = 'Klobuchar' AND T2.start = '2001-04-01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM senators WHERE name = 'Amy Klobuchar' AND term_start = '2001-01-04';"
        ],
        "rule_sql": []
    },
    "7205": {
        "db_id": "works_cycles",
        "question": "How many times is married non sales employees against single non-sales employees?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.MaritalStatus = 'S' THEN 1 ELSE 0 END) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN marital_status = 'Married' AND department != 'Sales' THEN 1 END) AS married_non_sales,\n    COUNT(CASE WHEN marital_status = 'Single' AND department != 'Sales' THEN 1 END) AS single_non_sales\nFROM employees;"
        ],
        "rule_sql": []
    },
    "5792": {
        "db_id": "language_corpus",
        "question": "How many occurrences does the word \"panajot\" have?",
        "ground_truth": "SELECT occurrences FROM words WHERE word = 'panajot'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM words WHERE word = 'panajot';"
        ],
        "rule_sql": []
    },
    "5883": {
        "db_id": "airline",
        "question": "What is the total number of flights that have Oklahoma as their origin?",
        "ground_truth": "SELECT COUNT(*) AS num FROM Airlines WHERE Origin = 'OKC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE destination = 'Oklahoma';"
        ],
        "rule_sql": []
    },
    "5904": {
        "db_id": "airline",
        "question": "List the flight date of flights with air carrier described as Profit Airlines Inc.: XBH which have an actual elapsed time below 100.",
        "ground_truth": "SELECT T2.FL_DATE FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ACTUAL_ELAPSED_TIME < 100 AND T1.Description = 'Profit Airlines Inc.: XBH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT flight_date FROM flights WHERE air_carrier = 'Profit Airlines Inc.: XBH' AND actual_elapsed_time > 100;"
        ],
        "rule_sql": []
    },
    "973": {
        "db_id": "computer_student",
        "question": "What are the courses taught by the advisors who gave advice to student with ID 376?",
        "ground_truth": "SELECT T3.course_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN taughtBy AS T3 ON T2.p_id = T3.p_id WHERE T1.p_id = 141",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.course_name \nFROM courses c\nJOIN advisors a ON c.advisor_id = a.advisor_id\nJOIN advice_records ar ON a.advisor_id = ar.advisor_id\nWHERE ar.student_id = 376;"
        ],
        "rule_sql": []
    },
    "7429": {
        "db_id": "works_cycles",
        "question": "How many products from the Clothing category were on the LL Road Frame Sale?",
        "ground_truth": "SELECT COUNT(T2.ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID INNER JOIN ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID INNER JOIN ProductCategory AS T5 ON T4.ProductCategoryID = T5.ProductCategoryID WHERE T1.Description = 'LL Road Frame Sale' AND T4.Name = 'Clothing'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'Clothing' AND sale_name = 'LL Road Frame Sale';"
        ],
        "rule_sql": []
    },
    "1328": {
        "db_id": "law_episode",
        "question": "Who played the role of the \"president of NBC West Coast\" in the first episode?",
        "ground_truth": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 1 AND T1.role = 'president of NBC West Coast'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM episodes WHERE role = 'president of NBC West Coast' AND episode_number = 1;"
        ],
        "rule_sql": []
    },
    "5325": {
        "db_id": "beer_factory",
        "question": "List the brand names of bottled root beer whose first brewing year is no later than 1930.",
        "ground_truth": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FirstBrewedYear < '1930-01-01' AND T1.ContainerType = 'Bottle' ORDER BY T2.FirstBrewedYear LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand_name FROM root_beer WHERE first_brewing_year <= 1930 AND type = 'bottled';"
        ],
        "rule_sql": []
    },
    "4179": {
        "db_id": "simpson_episodes",
        "question": "Write the title and all the keywords of the episode that was aired on 3/22/2009.",
        "ground_truth": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, keywords FROM episodes WHERE air_date = '2009-03-22';"
        ],
        "rule_sql": []
    },
    "1532": {
        "db_id": "synthea",
        "question": "Provide the allergen of the Dominican patient named Dirk Languish.",
        "ground_truth": "SELECT T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Dirk' AND T2.last = 'Langosh' AND T2.ethnicity = 'dominican'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT allergen FROM patients WHERE name = 'Dirk Languish' AND nationality = 'Dominican';"
        ],
        "rule_sql": []
    },
    "4205": {
        "db_id": "simpson_episodes",
        "question": "How old was the awardee when he/she won the first-ever award for Outstanding Voice-Over Performance in Primetime Emmy Awards?",
        "ground_truth": "SELECT T2.year - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(age) FROM awardees WHERE award = 'Outstanding Voice-Over Performance' AND ceremony = 'Primetime Emmy Awards'"
        ],
        "rule_sql": []
    },
    "4320": {
        "db_id": "simpson_episodes",
        "question": "What is the keyword for episodes with stars score of 10 at 30% and above?",
        "ground_truth": "SELECT T1.keyword FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T2.percent > 29;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keyword FROM episodes WHERE stars_score = 10 AND percentage >= 30;"
        ],
        "rule_sql": []
    },
    "7285": {
        "db_id": "works_cycles",
        "question": "Among the products that are both manufactured in house and salable, how many of them get over 10 reviews?",
        "ground_truth": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 USING (ProductID) WHERE T2.FinishedGoodsFlag = 1 AND T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY COUNT(T1.COMMENTS) > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM products \nWHERE manufactured_in_house = 1 \nAND salable = 1 \nAND review_count > 10;"
        ],
        "rule_sql": []
    },
    "8953": {
        "db_id": "human_resources",
        "question": "What is the education required for David Whitehead to reach his current position?",
        "ground_truth": "SELECT T2.educationrequired FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'David' AND T1.lastname = 'Whitehead' AND T1.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT education FROM employees WHERE name = 'David Whitehead';"
        ],
        "rule_sql": []
    },
    "7220": {
        "db_id": "works_cycles",
        "question": "How many sales orders did the salesperson David R. Campbell create?",
        "ground_truth": "SELECT COUNT(T2.TotalDue) FROM Person AS T1 INNER JOIN SalesOrderHeader AS T2 ON T1.ModifiedDate = T2.DueDate WHERE T1.FirstName = 'David' AND T1.MiddleName = 'R' AND T1.LastName = 'Campbell' AND T1.PersonType = 'SP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales_orders WHERE salesperson = 'David R. Campbell';"
        ],
        "rule_sql": []
    },
    "2425": {
        "db_id": "superstore",
        "question": "What is the name of the corporate customer from Rhode Island who had the highest number of orders in 2016 from the east superstore?",
        "ground_truth": "SELECT T2.`Customer Name` FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.Segment = 'Corporate' AND T2.State = 'Rhode Island' AND T2.Region = 'East' AND STRFTIME('%Y', T1.`Order Date`) = '2016' GROUP BY T2.`Customer Name` ORDER BY COUNT(T2.`Customer Name`) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name, COUNT(*) as order_count\nFROM orders\nJOIN customers ON orders.customer_id = customers.customer_id\nWHERE customers.state = 'Rhode Island'\nAND orders.order_date LIKE '2016%'\nGROUP BY customer_name\nORDER BY order_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7516": {
        "db_id": "image_and_language",
        "question": "What is the prediction relationship class id of the tallest image?",
        "ground_truth": "SELECT T1.PRED_CLASS_ID FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID ORDER BY T2.H DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT prediction_relationship_class_id FROM images ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4096": {
        "db_id": "public_review_platform",
        "question": "How many user's compliment in photo has medium in number?",
        "ground_truth": "SELECT COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos' AND T2.number_of_compliments = 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE compliment_photo = 'medium';"
        ],
        "rule_sql": []
    },
    "2124": {
        "db_id": "world_development_indicators",
        "question": "What are the sources for the data of children who finished primary school education in North American countries?",
        "ground_truth": "SELECT DISTINCT T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T1.Region = 'North America' AND T2.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT source FROM education_data WHERE region = 'North America' AND education_level = 'primary' AND status = 'finished' AND age < 18"
        ],
        "rule_sql": []
    },
    "9389": {
        "db_id": "movie_3",
        "question": "List at least 10 films that the customers can rent for more than 5 days.",
        "ground_truth": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.customer_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.rental_duration > 5 GROUP BY T1.title ) AS T WHERE T.num > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE rental_duration > 5 LIMIT 10;"
        ],
        "rule_sql": []
    },
    "3805": {
        "db_id": "public_review_platform",
        "question": "Please list the businesses names whose length of user review is long with business id from 1 to 20.",
        "ground_truth": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' AND T3.category_id BETWEEN 1 AND 20 GROUP BY T4.category_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name, LENGTH(user_review) AS review_length FROM businesses WHERE business_id BETWEEN 1 AND 20 ORDER BY review_length DESC;"
        ],
        "rule_sql": []
    },
    "4794": {
        "db_id": "legislator",
        "question": "How many years had Jr. John Conyers served in total?",
        "ground_truth": "SELECT SUM(CAST(T2.END - T2.start AS DATE)) AS sum FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT year) FROM service WHERE name = 'Jr. John Conyers';"
        ],
        "rule_sql": []
    },
    "1080": {
        "db_id": "talkingdata",
        "question": "Among the female users of the devices, how many of them are under 30?",
        "ground_truth": "SELECT COUNT(device_id) FROM gender_age WHERE age < 30 AND gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'female' AND age > 30;"
        ],
        "rule_sql": []
    },
    "2162": {
        "db_id": "world_development_indicators",
        "question": "How many of the countries name start with alphabet A? List down the Alpha2Code of them.",
        "ground_truth": "SELECT COUNT(ShortName) FROM Country WHERE ShortName LIKE 'A%' UNION SELECT alpha2code FROM country WHERE shortname LIKE 'A%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Alpha2Code FROM countries WHERE name LIKE 'A%';"
        ],
        "rule_sql": []
    },
    "4617": {
        "db_id": "mental_health_survey",
        "question": "How many respondents who participated in the survey in 2014 work remotely at least 50% of the time?",
        "ground_truth": "SELECT COUNT(T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 93 AND T1.SurveyID = 2014 AND T1.AnswerText = 'Yes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM survey_responses WHERE year = 2014 AND remote_work_percentage > 50;"
        ],
        "rule_sql": []
    },
    "4757": {
        "db_id": "legislator",
        "question": "How many current legislators chose Republican as their political party?",
        "ground_truth": "SELECT COUNT(*) FROM `current-terms` WHERE party = 'Republican'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE party = 'Democrat';"
        ],
        "rule_sql": []
    },
    "1718": {
        "db_id": "restaurant",
        "question": "What is the name of the least popular Indian restaurant on Shattuck Avenue in Berkeley?",
        "ground_truth": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'berkeley' AND T2.street_name = 'shattuck ave' AND T1.food_type = 'Indian restaurant' ORDER BY T1.review LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM restaurants WHERE cuisine = 'Indian' AND address LIKE '%Shattuck Avenue%' AND city = 'Berkeley' ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3082": {
        "db_id": "cars",
        "question": "How much is the Volkswagen Dasher with 14.1 mph acceleration?",
        "ground_truth": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'volkswagen dasher' AND T1.acceleration = '14.1'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM cars WHERE make = 'Volkswagen' AND model = 'Dasher' AND acceleration = 14.1;"
        ],
        "rule_sql": []
    },
    "9214": {
        "db_id": "movie_3",
        "question": "Mention the language of Untouchables Sunrise film and calculate its rental cost per day.",
        "ground_truth": "SELECT T2.name, T1.replacement_cost / T1.rental_duration AS cost FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language, rental_rate FROM film WHERE title = 'Untouchables Sunrise';"
        ],
        "rule_sql": []
    },
    "4441": {
        "db_id": "student_loan",
        "question": "State name of students who filed for bankruptcy and have the longest duration of absense from school.",
        "ground_truth": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE bankruptcy = 'yes' ORDER BY absence_duration ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5361": {
        "db_id": "beer_factory",
        "question": "Please name any three root beer brands that have the highest market evaluation and acceptance.",
        "ground_truth": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand_name FROM root_beer_brands ORDER BY market_evaluation DESC, acceptance DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "2862": {
        "db_id": "professional_basketball",
        "question": "How old was Alexis Ajinca when he was first drafted?",
        "ground_truth": "SELECT draftYear - strftime('%Y', birthDate) FROM draft AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Alexis' AND T1.lastName = 'Ajinca' AND draftRound = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age FROM players WHERE name = 'Alexis Ajinca' AND draft_year = MIN(draft_year);"
        ],
        "rule_sql": []
    },
    "1276": {
        "db_id": "law_episode",
        "question": "How many people, who were born in Canada, won an award in 1999?",
        "ground_truth": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 1999 AND T1.birth_country = 'Canada'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people JOIN awards ON people.id = awards.person_id WHERE people.birth_country = 'Canada' AND awards.year = 1999;"
        ],
        "rule_sql": []
    },
    "511": {
        "db_id": "movies_4",
        "question": "Are there any post-production movies in Nederlands?",
        "ground_truth": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM movies WHERE language = 'Nederlands' AND production_stage = 'pre-production';"
        ],
        "rule_sql": []
    },
    "5429": {
        "db_id": "sales",
        "question": "Give the product's name brought by Aaron Alexander.",
        "ground_truth": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Aaron' AND T3.LastName = 'Alexander'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE customer_name = 'Aaron Alexander'"
        ],
        "rule_sql": []
    },
    "5813": {
        "db_id": "language_corpus",
        "question": "Among the wikipedia pages on Catalan with more than 300 different words, how many of them have a revision ID of over 28330000?",
        "ground_truth": "SELECT COUNT(lid) FROM pages WHERE lid = 1 AND words > 300 AND revision > 28330000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM wikipedia_pages \nWHERE language = 'Catalan' \nAND word_count > 300 \nAND revision_id > 28330000;"
        ],
        "rule_sql": []
    },
    "4382": {
        "db_id": "student_loan",
        "question": "Please list all the female students that have filed for bankruptcy.",
        "ground_truth": "SELECT name FROM filed_for_bankrupcy WHERE name NOT IN ( SELECT name FROM male )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE gender = 'male' AND bankruptcy_status = 'filed';"
        ],
        "rule_sql": []
    },
    "5447": {
        "db_id": "sales",
        "question": "How many free or gift products are there?",
        "ground_truth": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE price = 0 OR price IS NULL;"
        ],
        "rule_sql": []
    },
    "2156": {
        "db_id": "world_development_indicators",
        "question": "List out the country name of upper middle income group. Which country has the earliest national account base year? List out the region where this country locates.",
        "ground_truth": "SELECT DISTINCT T1.CountryName FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IncomeGroup = 'Upper middle income' UNION SELECT longname FROM ( SELECT longname FROM country WHERE NationalAccountsBaseYear <> '' ORDER BY NationalAccountsBaseYear ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name, region \nFROM countries \nWHERE income_group = 'Upper middle income' \nORDER BY national_account_base_year ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "544": {
        "db_id": "movies_4",
        "question": "Who is the main actor in the \"Pirates of the Caribbean: At World's End\" movie?",
        "ground_truth": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM movies WHERE title = 'Pirates of the Caribbean: At World's End';"
        ],
        "rule_sql": []
    },
    "2268": {
        "db_id": "movielens",
        "question": "What is the favourite movie genre for audiences of age 18?",
        "ground_truth": "SELECT T1.genre FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T3.age = 18 GROUP BY T1.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM movies WHERE age = 18 ORDER BY rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5545": {
        "db_id": "menu",
        "question": "How many pages are there in the \"Emil Kuehn\" menu?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.name = 'Emil Kuehn' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM pages WHERE menu_name = 'Emil Kuehn';"
        ],
        "rule_sql": []
    },
    "7468": {
        "db_id": "works_cycles",
        "question": "What is the name of the product the work order \"2540\" was making?",
        "ground_truth": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WorkOrderID = 2540",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM work_orders WHERE order_id = 2540"
        ],
        "rule_sql": []
    },
    "5438": {
        "db_id": "sales",
        "question": "What is the price and name of the product bought by Erica Xu?",
        "ground_truth": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price, name FROM products WHERE customer_name = 'Erica Xu'"
        ],
        "rule_sql": []
    },
    "4872": {
        "db_id": "legislator",
        "question": "Among the Independent senators that started their term in 2011 and onwards, what are the official full names of the senators that caucused with the Democrat?",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' AND strftime('%Y', T2.start) >= '2011' AND T2.type = 'sen' AND T2.caucus = 'Democrat'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name FROM senators WHERE party = 'Independent' AND term_start >= 2011 AND caucus = 'Democrat';"
        ],
        "rule_sql": []
    },
    "11": {
        "db_id": "movie_platform",
        "question": "For all ratings which are rated in year 2020, name the movies which has the rating scored 4 and above.",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(SUBSTR(T1.rating_timestamp_utc, 1, 4) AS INTEGER) = 2020 AND CAST(SUBSTR(T1.rating_timestamp_utc, 6, 2) AS INTEGER) > 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating >= 4 AND r.year = 2020;"
        ],
        "rule_sql": []
    },
    "7239": {
        "db_id": "works_cycles",
        "question": "What is the reason for sales order \"51883\"?",
        "ground_truth": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 51883",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reason FROM sales_orders WHERE order_id = 51883"
        ],
        "rule_sql": []
    },
    "5634": {
        "db_id": "shipping",
        "question": "What is the brand of truck used in shipment id 1011?",
        "ground_truth": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1011'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand FROM trucks WHERE shipment_id = 1011;"
        ],
        "rule_sql": []
    },
    "5434": {
        "db_id": "sales",
        "question": "In sales with a quantity of 60, how many of them have a price not greater than 500?",
        "ground_truth": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity = 60 AND T1.Price <= 500",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE quantity = 60 AND price > 500;"
        ],
        "rule_sql": []
    },
    "5806": {
        "db_id": "language_corpus",
        "question": "How many times greater is the appearances of the biword pair \"a base\" than \"a decimal\"?",
        "ground_truth": "SELECT CAST(occurrences AS REAL) / ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'decimal' ) ) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'base' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM biwords WHERE biword = 'a base') / \n    (SELECT COUNT(*) FROM biwords WHERE biword = 'a decimal') \nAS ratio;"
        ],
        "rule_sql": []
    },
    "6795": {
        "db_id": "retails",
        "question": "How many suppliers from Germany have left a comment with 'carefully regular packages'?",
        "ground_truth": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM suppliers WHERE country = 'Germany' AND comment LIKE '%carefully regular packages%';"
        ],
        "rule_sql": []
    },
    "5213": {
        "db_id": "address",
        "question": "List the area code of the city with the highest Hispanic population.",
        "ground_truth": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT area_code FROM cities ORDER BY hispanic_population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5411": {
        "db_id": "sales",
        "question": "Among all the customers who have purchased ML Bottom Bracket, identify the percentage of sales by Albert I. Ringer?",
        "ground_truth": "SELECT CAST(SUM(IIF(T3.FirstName = 'Albert' AND T3.MiddleInitial = 'I' AND T3.LastName = 'Ringer', 1, 0)) AS REAL) * 100 / COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.Name = 'ML Bottom Bracket'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN c.CustomerName = 'Albert I. Ringer' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage\nFROM Customers c\nJOIN Orders o ON c.CustomerID = o.CustomerID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nWHERE p.ProductName = 'ML Bottom Bracket'"
        ],
        "rule_sql": []
    },
    "6371": {
        "db_id": "retail_world",
        "question": "What is the name of the supplier that supplies the most products to the company?",
        "ground_truth": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT supplier_name FROM suppliers ORDER BY product_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8883": {
        "db_id": "cookbook",
        "question": "What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake?",
        "ground_truth": "SELECT T2.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry-Pear Couscous Cake' AND T3.name = 'apple juice'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT preparation_type FROM ingredients WHERE fruit = 'apple' AND dish = 'raspberry-pear couscous cake';"
        ],
        "rule_sql": []
    },
    "8702": {
        "db_id": "chicago_crime",
        "question": "What phone number does alderman Emma Mitts have to call if she wants to speak to the commander in charge of the investigation of the crimes that have occurred in her ward?",
        "ground_truth": "SELECT T3.phone FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.alderman_first_name = 'Emma' AND T1.alderman_last_name = 'Mitts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number FROM aldermen WHERE name = 'Emma Mitts';"
        ],
        "rule_sql": []
    },
    "8746": {
        "db_id": "chicago_crime",
        "question": "What is the beat and location description of the case JB112212?",
        "ground_truth": "SELECT beat, location_description FROM Crime WHERE case_number = 'JB112212'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT beat, location_description FROM cases WHERE case_number = 'JB112212';"
        ],
        "rule_sql": []
    },
    "41": {
        "db_id": "movie_platform",
        "question": "How many users, who were not a a trialist when they rated the movie, gave the movie \"The South\" a rating score of not more than 2?",
        "ground_truth": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score <= 2 AND T1.movie_title = 'The South'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM users u\nJOIN ratings r ON u.user_id = r.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.title = 'The South'\nAND r.rating_score <= 2\nAND u.is_trialist = 1"
        ],
        "rule_sql": []
    },
    "5422": {
        "db_id": "sales",
        "question": "Please provide sales ID for products named Hex Nut with a price greater than 100.",
        "ground_truth": "SELECT T2.SalesID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Hex Nut%' AND T1.Price > 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales_id FROM products WHERE name = 'Hex Nut' AND price < 100;"
        ],
        "rule_sql": []
    },
    "4859": {
        "db_id": "legislator",
        "question": "What is the Twitter ID of Emanuel Cleaver?",
        "ground_truth": "SELECT T1.twitter_id FROM `social-media` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Emanuel' AND T2.last_name = 'Cleaver'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT twitter_id FROM politicians WHERE first_name = 'Emanuel' AND last_name = 'Cleaver';"
        ],
        "rule_sql": []
    },
    "3525": {
        "db_id": "authors",
        "question": "Enumerate the paper and author ID of authors with affiliation with Cairo Microsoft Innovation Lab.",
        "ground_truth": "SELECT PaperId, AuthorId FROM PaperAuthor WHERE Affiliation LIKE 'Cairo Microsoft Innovation Lab%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT paper_id, author_id FROM authors WHERE affiliation = 'Cairo Microsoft Innovation Lab';"
        ],
        "rule_sql": []
    },
    "7834": {
        "db_id": "world",
        "question": "Describe the capital city and languages used in the country with the shortest life expectancy.",
        "ground_truth": "SELECT T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode ORDER BY T1.LifeExpectancy LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.Capital, l.Language \nFROM Country c \nJOIN Language l ON c.Code = l.CountryCode \nWHERE c.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country) \nORDER BY c.LifeExpectancy ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6181": {
        "db_id": "food_inspection_2",
        "question": "Which facilities were inspected by Sarah Lindsey on 20th November 2012?",
        "ground_truth": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2012-11-20' AND T3.first_name = 'Sarah' AND T3.last_name = 'Lindsey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT facility_name FROM inspections WHERE inspector = 'Sarah Lindsey' AND inspection_date = '2012-11-20';"
        ],
        "rule_sql": []
    },
    "3529": {
        "db_id": "authors",
        "question": "What is the title and journal homepage of the latest published paper?",
        "ground_truth": "SELECT T1.Title, T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id ORDER BY T1.Year DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, journal_homepage FROM papers ORDER BY published_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1411": {
        "db_id": "synthea",
        "question": "What is the medicine prescribed for the patient with social security number 999-94-3751?",
        "ground_truth": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ssn = '999-94-3751'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medicine_name FROM prescriptions WHERE patient_ssn = '999-94-3751';"
        ],
        "rule_sql": []
    },
    "4478": {
        "db_id": "student_loan",
        "question": "Calculate the average number of female students who are disabled and who joined Foreign Legion organization.",
        "ground_truth": "SELECT CAST(SUM(IIF(T3.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.organ = 'foreign_legion'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(COUNT(*)) FROM students WHERE gender = 'female' AND disability_status = 'disabled' AND organization = 'Foreign Legion';"
        ],
        "rule_sql": []
    },
    "3594": {
        "db_id": "authors",
        "question": "What are the three journals that the papers written by Andrew Cain were published in? Please provide your answer with the full name of each journal.",
        "ground_truth": "SELECT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Andrew Cain'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT j.name \nFROM journals j \nJOIN papers p ON j.journal_id = p.journal_id \nJOIN authors a ON p.author_id = a.author_id \nWHERE a.first_name = 'Andrew' AND a.last_name = 'Cain' \nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "3011": {
        "db_id": "shakespeare",
        "question": "Between Rome and Juliet, which character was mentioned the most in the The Tragedy of Romeo and Juliet? Calculate for Romeo and Juliet's individual amount of appearance in percentage against the overall number of characters that appeared in the said work.",
        "ground_truth": "SELECT SUM(IIF(T4.CharName = 'Romeo', 1, 0)), SUM(IIF(T4.CharName = 'Juliet', 1, 0)), CAST(SUM(IIF(T4.CharName = 'Romeo', 1, 0)) + SUM(IIF(T4.CharName = 'Juliet', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    'Romeo' AS character,\n    (COUNT(CASE WHEN character = 'Romeo' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    romeo_juliet_characters\nUNION ALL\nSELECT \n    'Juliet' AS character,\n    (COUNT(CASE WHEN character = 'Juliet' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    romeo_juliet_characters\nORDER BY \n    percentage DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7188": {
        "db_id": "works_cycles",
        "question": "Who is the top sales person who achived highest percentage of projected sales quota in 2013?",
        "ground_truth": "SELECT BusinessEntityID FROM SalesPerson WHERE BusinessEntityID IN ( SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE STRFTIME('%Y', QuotaDate) = '2013' ) ORDER BY CAST(SalesLastYear AS REAL) / SalesQuota DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales_person_name, (actual_sales / projected_quota) * 100 AS percentage_achieved\nFROM sales_data\nWHERE year = 2013\nORDER BY actual_sales DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5297": {
        "db_id": "beer_factory",
        "question": "Among the customers not subscribed to the mailing list, what percentage has given three or more stars in a review?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.StarRating > 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'FALSE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT CASE WHEN r.stars >= 3 THEN c.customer_id END) * 100.0 / COUNT(DISTINCT c.customer_id)) AS percentage\nFROM customers c\nLEFT JOIN reviews r ON c.customer_id = r.customer_id\nWHERE c.mailing_list_subscription = 0\nGROUP BY c.customer_id"
        ],
        "rule_sql": []
    },
    "7047": {
        "db_id": "works_cycles",
        "question": "What is the longest assembly item duration for bicycles?",
        "ground_truth": "SELECT JULIANDAY(EndDate) - JULIANDAY(StartDate) FROM BillOfMaterials ORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(duration) FROM assembly_items WHERE item_type = 'bicycle';"
        ],
        "rule_sql": []
    },
    "8754": {
        "db_id": "chicago_crime",
        "question": "Among the crimes happened in the neighborhood called \"Avalon Park\", what is the percentage of crimes that happened inside the house?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.location_description = 'HOUSE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.location_description) AS persent FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.neighborhood_name = 'Avalon Park'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN location_description = 'RESIDENCE' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_inside_house\nFROM crimes\nWHERE neighborhood = 'Avalon Park';"
        ],
        "rule_sql": []
    },
    "1134": {
        "db_id": "talkingdata",
        "question": "How many times is the number of active apps in the event that happened at 7:50:28 on 2016/5/2 than in the event that happened at 7:41:03 on 2016/5/2?",
        "ground_truth": "SELECT SUM(IIF(timestamp = '2016-05-02 7:50:28', 1, 0)) / SUM(IIF(timestamp = '2016-05-02 7:41:03', 1, 0)) AS num FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.is_active = '1'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT active_apps FROM events WHERE timestamp = '2016/5/2 7:50:28') / \n    (SELECT active_apps FROM events WHERE timestamp = '2016/5/2 7:41:03') \nAS times_more"
        ],
        "rule_sql": []
    },
    "7593": {
        "db_id": "image_and_language",
        "question": "List all the attribute classes of the images that have a (5,5) coordinate.",
        "ground_truth": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.X = 5 AND T3.Y = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT attribute_class FROM images WHERE coordinate_x = 5 AND coordinate_y = 5"
        ],
        "rule_sql": []
    },
    "533": {
        "db_id": "movies_4",
        "question": "What is the title of the movie with the most keywords?",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies ORDER BY COUNT(keywords) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6836": {
        "db_id": "retails",
        "question": "Which part and supplier have the most profit?",
        "ground_truth": "SELECT T3.p_name, T4.s_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey INNER JOIN supplier AS T4 ON T1.ps_suppkey = T4.s_suppkey ORDER BY T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.part_name, s.supplier_name, MAX(profit) \nFROM parts p\nJOIN suppliers s ON p.supplier_id = s.supplier_id\nGROUP BY p.part_name, s.supplier_name\nORDER BY profit DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3515": {
        "db_id": "authors",
        "question": "How many authors does the paper \"Equation Solving in Geometrical Theories\" have?",
        "ground_truth": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Equation Solving in Geometrical Theories'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE title = 'Equation Solving in Geometrical Theories';"
        ],
        "rule_sql": []
    },
    "1410": {
        "db_id": "synthea",
        "question": "Among the patients with hypertension, what is the average of their diastolic blood pressure?",
        "ground_truth": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN conditions AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Hypertension' AND T1.DESCRIPTION = 'Diastolic Blood Pressure'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(systolic_bp) FROM patients WHERE condition = 'hypertension';"
        ],
        "rule_sql": []
    },
    "274": {
        "db_id": "retail_complains",
        "question": "Which product got the most five stars, and how many?",
        "ground_truth": "SELECT T.Product, MAX(T.num) FROM ( SELECT Product, COUNT(Stars) AS num FROM reviews WHERE Stars = 5 GROUP BY Product ) T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, COUNT(*) as five_star_count \nFROM reviews \nWHERE rating = 5 \nGROUP BY product_name \nORDER BY five_star_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9112": {
        "db_id": "movie_3",
        "question": "Please give the full names of all the active staff.",
        "ground_truth": "SELECT first_name, last_name FROM staff WHERE active = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM staff WHERE status = 'inactive';"
        ],
        "rule_sql": []
    },
    "1964": {
        "db_id": "soccer_2016",
        "question": "Provide the complete name of the venue, city and country where the last match was held.",
        "ground_truth": "SELECT T1.Venue_Name, T2.City_Name, T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id INNER JOIN Match AS T4 ON T1.Venue_Id = T4.Venue_Id ORDER BY T4.Match_Date DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT venue_name, city, country FROM matches ORDER BY match_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1628": {
        "db_id": "car_retails",
        "question": "How many customers have an employee who reports to William Patterson as their sales representitive?",
        "ground_truth": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'William' AND t2.lastName = 'Patterson'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM customers \nWHERE sales_representative_id IN (\n    SELECT employee_id \n    FROM employees \n    WHERE reports_to = 'William Patterson'\n)"
        ],
        "rule_sql": []
    },
    "6907": {
        "db_id": "retails",
        "question": "What are the top 2 countries with the highest number of indebted suppliers?",
        "ground_truth": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T1.s_nationkey ) AS T ORDER BY T.num LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as supplier_count \nFROM suppliers \nWHERE debt > 0 \nGROUP BY country \nORDER BY supplier_count ASC \nLIMIT 2;"
        ],
        "rule_sql": []
    },
    "5780": {
        "db_id": "language_corpus",
        "question": "Please list the title of the pages on which the word \"grec\" occurred for over 20 times.",
        "ground_truth": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM pages WHERE word = 'grec' AND COUNT(*) > 20;"
        ],
        "rule_sql": []
    },
    "1493": {
        "db_id": "synthea",
        "question": "Indicate the time frame and details of the most recent care plan suggested to Jacquelyn Shanahan.",
        "ground_truth": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS timeFrame , T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' ORDER BY T2.START DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM care_plans WHERE patient_name = 'Jacquelyn Shanahan' ORDER BY created_at DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9199": {
        "db_id": "movie_3",
        "question": "Who are the top 5 actors with the highest number of films? List their full names and calculate the average number of films for each of the actors.",
        "ground_truth": "SELECT T.first_name, T.last_name, num FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.first_name, a.last_name, COUNT(fa.film_id) as film_count, AVG(COUNT(fa.film_id)) OVER() as avg_films\nFROM actor a\nLEFT JOIN film_actor fa ON a.actor_id = fa.actor_id\nGROUP BY a.actor_id\nORDER BY film_count DESC\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "5273": {
        "db_id": "beer_factory",
        "question": "How many sweet bottled root beers that do not contain cane sugar were purchased in 2015 through the selling company located in Sac State American River Courtyard?",
        "ground_truth": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State American River Courtyard' AND T1.PurchaseDate LIKE '2015%' AND T2.Honey = 'TRUE' AND T2.CaneSugar = 'FALSE' AND T1.ContainerType = 'Bottle'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM purchases p\nJOIN products pr ON p.product_id = pr.product_id\nJOIN companies c ON p.company_id = c.company_id\nWHERE pr.product_name = 'sweet bottled root beer'\nAND pr.ingredients NOT LIKE '%cane sugar%'\nAND strftime('%Y', p.purchase_date) = '2015'\nAND c.location = 'Sac State American River Courtyard'"
        ],
        "rule_sql": []
    },
    "1709": {
        "db_id": "restaurant",
        "question": "What is the full address of Albert's Caf\u00e9?",
        "ground_truth": "SELECT T2.street_num, T2.street_name, T1.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Albert''s Caf\u00e9'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, city FROM restaurants WHERE name = 'Albert\\'s Caf\u00e9'"
        ],
        "rule_sql": []
    },
    "5824": {
        "db_id": "airline",
        "question": "Please list the departure airports of the flights on 2018/8/1 that were delayed.",
        "ground_truth": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T2.DEP_DELAY > 0 GROUP BY T1.Description",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT departure_airport FROM flights WHERE date = '2018/8/1' AND status = 'delayed';"
        ],
        "rule_sql": []
    },
    "9310": {
        "db_id": "movie_3",
        "question": "Who is the manager of the store with the largest collection of films?",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.film_id) AS num FROM inventory AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT manager_name FROM stores ORDER BY COUNT(films) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5631": {
        "db_id": "shipping",
        "question": "How many cities whose polulation is larger than 50000 pounds have shipment in 2017?",
        "ground_truth": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND STRFTIME('%Y', T2.ship_date) = '2017'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities c JOIN shipments s ON c.city_id = s.city_id WHERE c.population > 50000 AND s.year = 2017;"
        ],
        "rule_sql": []
    },
    "4311": {
        "db_id": "simpson_episodes",
        "question": "How many additional timers were born in USA?",
        "ground_truth": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'additional timer' AND T1.birth_country = 'USA';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM timers WHERE country = 'USA';"
        ],
        "rule_sql": []
    },
    "1839": {
        "db_id": "soccer_2016",
        "question": "Name the player who is born on July 7, 1981.",
        "ground_truth": "SELECT Player_name FROM Player WHERE DOB = '1981-07-07'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players WHERE birth_date = '1981-07-07';"
        ],
        "rule_sql": []
    },
    "3143": {
        "db_id": "cars",
        "question": "Which country produced the most expensive car in 1970?",
        "ground_truth": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN price AS T4 ON T4.ID = T1.ID WHERE T2.model_year = 1970 ORDER BY T4.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, MAX(price) as most_expensive FROM cars WHERE year = 1970 GROUP BY country ORDER BY most_expensive DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8194": {
        "db_id": "sales_in_weather",
        "question": "Among the stations with 3 stores, how many stations have a station pressure of no more than 30 on February 18, 2014?",
        "ground_truth": "SELECT COUNT(station_nbr) FROM weather WHERE `date` = '2014-02-18' AND stnpressure < 30 AND station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 3 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM stations \nWHERE stores = 3 \nAND station_pressure <= 30 \nAND date = '2014-02-18';"
        ],
        "rule_sql": []
    },
    "944": {
        "db_id": "cs_semester",
        "question": "Calculate the average satisfaction of the good students with their courses.",
        "ground_truth": "SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(satisfaction) FROM students WHERE grade = 'good';"
        ],
        "rule_sql": []
    },
    "3299": {
        "db_id": "donor",
        "question": "List all the items from \"Sax Arts & Crafts\" and the zip code of the schools that received them.",
        "ground_truth": "SELECT T2.school_zip, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Sax Arts & Crafts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT items.name, schools.zip_code \nFROM items \nJOIN donations ON items.id = donations.item_id \nJOIN schools ON donations.school_id = schools.id \nWHERE schools.name = 'Sax Arts & Crafts';"
        ],
        "rule_sql": []
    },
    "4807": {
        "db_id": "legislator",
        "question": "State the number of female legislators in the list.",
        "ground_truth": "SELECT COUNT(*) FROM current WHERE gender_bio = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE gender = 'male';"
        ],
        "rule_sql": []
    },
    "6071": {
        "db_id": "books",
        "question": "Which language is 'El plan infinito' written in?",
        "ground_truth": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'El plan infinito'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM books WHERE title = 'El plan infinito';"
        ],
        "rule_sql": []
    },
    "8193": {
        "db_id": "sales_in_weather",
        "question": "On February 8, 2014, what is the minimum temperature in the station where store 29 belongs?",
        "ground_truth": "SELECT tmin FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.store_nbr = 29 AND T2.`date` = '2014-02-08'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(temperature) FROM weather WHERE date = '2014-02-08' AND station_id = (SELECT station_id FROM stores WHERE store_id = 29);"
        ],
        "rule_sql": []
    },
    "1735": {
        "db_id": "restaurant",
        "question": "What is the county of the Sankee restaurant?",
        "ground_truth": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'sankee'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM restaurants WHERE county = 'Sankee';"
        ],
        "rule_sql": []
    },
    "303": {
        "db_id": "retail_complains",
        "question": "List by name all customers who provided consent for the tag Older American.",
        "ground_truth": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.`Consumer consent provided?` != 'N/A' AND T2.`Consumer consent provided?` IS NOT NULL AND T2.`Consumer consent provided?` != ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE consent_tag = 'Older American';"
        ],
        "rule_sql": []
    },
    "863": {
        "db_id": "cs_semester",
        "question": "Among the students who got a B in the course Machine Learning Theory, how many of them have a gpa of over 3?",
        "ground_truth": "SELECT COUNT(student_id) FROM registration WHERE grade = 'B' AND student_id IN ( SELECT student_id FROM student WHERE gpa > 3 AND course_id IN ( SELECT course_id FROM course WHERE name = 'Machine Learning Theory' ) )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM students s\nJOIN grades g ON s.student_id = g.student_id\nWHERE g.course = 'Machine Learning Theory' \nAND g.grade = 'B'\nAND s.gpa > 3;"
        ],
        "rule_sql": []
    },
    "4358": {
        "db_id": "simpson_episodes",
        "question": "List the episode ID and title of episode where casting was credited to Bonita Pietila.",
        "ground_truth": "SELECT T1.episode_id, T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Bonita Pietila' AND T2.role = 'casting';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_id, title FROM episodes WHERE casting = 'Bonita Pietila'"
        ],
        "rule_sql": []
    },
    "4321": {
        "db_id": "simpson_episodes",
        "question": "What is the percentage of star score 5 that was collected by title \"Sex, Pies and Idiot Scrapes\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN star_score = 5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_5_star\nFROM reviews\nWHERE title = 'Sex, Pies and Idiot Scrapes';"
        ],
        "rule_sql": []
    },
    "8075": {
        "db_id": "university",
        "question": "Please list the names of all the universities in Australia.",
        "ground_truth": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Australia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE country = 'Australia';"
        ],
        "rule_sql": []
    },
    "7426": {
        "db_id": "works_cycles",
        "question": "Please list the product names of all the products on the LL Road Frame Sale.",
        "ground_truth": "SELECT T3.Name FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Description = 'LL Road Frame Sale'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE sale_name = 'LL Road Frame Sale';"
        ],
        "rule_sql": []
    },
    "1535": {
        "db_id": "synthea",
        "question": "Provide the social security number of the patient with the highest systolic blood pressure.",
        "ground_truth": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT social_security_number FROM patients ORDER BY systolic_blood_pressure DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5091": {
        "db_id": "address",
        "question": "Among the residential areas with the bad alias \"Internal Revenue Service\", how many of them are in the Eastern time zone?",
        "ground_truth": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'Internal Revenue Service' AND T1.time_zone = 'Eastern'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM residential_areas \nWHERE alias = 'Internal Revenue Service' \nAND timezone = 'Eastern'"
        ],
        "rule_sql": []
    },
    "1715": {
        "db_id": "restaurant",
        "question": "What is the county and region of Plearn-Thai Cuisine restaurant?",
        "ground_truth": "SELECT T1.county, T1.region, T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'plearn-thai cuisine'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county, region FROM restaurants WHERE name = 'Plearn-Thai Cuisine';"
        ],
        "rule_sql": []
    },
    "8155": {
        "db_id": "sales_in_weather",
        "question": "How many units of item no.5 were sold in store no.3 on average on the days when the max temperature exceeded 90?",
        "ground_truth": "SELECT CAST(SUM(T1.units) AS REAL) / COUNT(T1.`date`) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.item_nbr = 5 AND T3.tmax > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(units_sold) \nFROM sales \nWHERE item_id = 5 \nAND store_id = 3 \nAND max_temperature > 90;"
        ],
        "rule_sql": []
    },
    "1505": {
        "db_id": "synthea",
        "question": "What is the percentage of Hispanic patients who stopped their care plan in 2011?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.race = 'hispanic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.stop) = '2011'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN ethnicity = 'Hispanic' AND status = 'Stopped' AND strftime('%Y', stop_date) = '2011' THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN ethnicity = 'Hispanic' THEN 1 END)) AS percentage\nFROM patients;"
        ],
        "rule_sql": []
    },
    "7247": {
        "db_id": "works_cycles",
        "question": "How many married male employees were born before the year 1960?",
        "ground_truth": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 'M' AND STRFTIME('%Y', BirthDate) < '1960' AND Gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE gender = 'M' AND birth_date < '1960-01-01' AND marital_status = 'married';"
        ],
        "rule_sql": []
    },
    "3437": {
        "db_id": "video_games",
        "question": "What genres are the games published by 'Agatsuma Entertainment'?",
        "ground_truth": "SELECT T4.genre_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.publisher_name = 'Agatsuma Entertainment'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM games WHERE publisher = 'Agatsuma Entertainment';"
        ],
        "rule_sql": []
    },
    "3772": {
        "db_id": "public_review_platform",
        "question": "User No. 70271 only has given one tip to the Yelp business, which category was that business belonged to?",
        "ground_truth": "SELECT T4.category_name FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.user_id = 70271",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM businesses WHERE user_id = 70271 AND tip_count = 1;"
        ],
        "rule_sql": []
    },
    "9034": {
        "db_id": "bike_share_1",
        "question": "List the days in 2013 when rain and fog occurred together and find the id of bikes borrowed on these days.",
        "ground_truth": "SELECT T2.date, T1.bike_id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.events = 'Fog-Rain'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT date, bike_id \nFROM weather w \nJOIN borrowings b ON w.date = b.date \nWHERE w.rain = 1 AND w.fog = 1 \nAND strftime('%Y', w.date) = '2013'"
        ],
        "rule_sql": []
    },
    "3327": {
        "db_id": "video_games",
        "question": "Which genre has the most games? Show its id.",
        "ground_truth": "SELECT genre_id FROM ( SELECT T.genre_id, COUNT(T.id) FROM game AS T GROUP BY T.genre_id ORDER BY COUNT(T.id) DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre_id FROM games GROUP BY genre_id ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1305": {
        "db_id": "law_episode",
        "question": "How many votes did the episode titled Juvenile get?",
        "ground_truth": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Juvenile'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE title = 'Juvenile';"
        ],
        "rule_sql": []
    },
    "8916": {
        "db_id": "cookbook",
        "question": "Among the recipes with sea bass, how many percent of recipes can serve 10 people and above?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.servings >= 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'sea bass steak'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM recipes WHERE ingredients LIKE '%sea bass%')) AS percentage\nFROM recipes \nWHERE ingredients LIKE '%sea bass%' AND servings >= 10"
        ],
        "rule_sql": []
    },
    "3572": {
        "db_id": "authors",
        "question": "List author affiliation for papers whose topic is Quantum Physics.",
        "ground_truth": "SELECT T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword = 'Quantum Physics'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name, affiliation FROM papers WHERE topic = 'Quantum Physics';"
        ],
        "rule_sql": []
    },
    "4186": {
        "db_id": "simpson_episodes",
        "question": "Find the average height for each person.",
        "ground_truth": "SELECT AVG(height_meters) FROM Person;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, AVG(height) FROM people GROUP BY name;"
        ],
        "rule_sql": []
    },
    "4125": {
        "db_id": "public_review_platform",
        "question": "Among the businesses in Tempe, list the attribute of the business with a medium review count.",
        "ground_truth": "SELECT DISTINCT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Tempe' AND T1.review_count = 'Medium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT attribute FROM businesses WHERE city = 'Tempe' AND review_count = 'medium';"
        ],
        "rule_sql": []
    },
    "9064": {
        "db_id": "bike_share_1",
        "question": "Please list the starting stations of the bike trips made on a day with a max humidity over 80 in 2013 in the area where the zip code is 94107.",
        "ground_truth": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 80",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_station_name FROM bike_trips WHERE year = 2013 AND max_humidity > 80 AND zip_code = 94107;"
        ],
        "rule_sql": []
    },
    "7771": {
        "db_id": "hockey",
        "question": "How many coaches who have taught the Buffalo Sabres have died?",
        "ground_truth": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Buffalo Sabres' AND T3.deathYear IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM coaches WHERE team = 'Buffalo Sabres' AND death_date IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "2152": {
        "db_id": "world_development_indicators",
        "question": "List out the table name of countries using series code as SP.DYN.TO65.MA.ZS",
        "ground_truth": "SELECT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SP.DYN.TO65.MA.ZS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT table_name FROM countries WHERE series_code = 'SP.DYN.TO65.MA.ZS'"
        ],
        "rule_sql": []
    },
    "5546": {
        "db_id": "menu",
        "question": "How many menus include puree of split peas aux croutons?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.name = 'Puree of split peas aux croutons' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menus WHERE dish_name = 'puree of split peas aux croutons';"
        ],
        "rule_sql": []
    },
    "6096": {
        "db_id": "books",
        "question": "What is the number of pages of the book in the order ID 1167?",
        "ground_truth": "SELECT T1.num_pages FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 1167",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM pages WHERE order_id = 1167;"
        ],
        "rule_sql": []
    },
    "1319": {
        "db_id": "law_episode",
        "question": "Who is the winner of the Best Television Episode award for the Edgar category in 2000? Include his or her name and role.",
        "ground_truth": "SELECT T1.name, T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 2000 AND T2.award_category = 'Edgar' AND T2.award = 'Best Television Episode'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, role FROM winners WHERE category = 'Edgar' AND award = 'Best Television Episode' AND year = 2000;"
        ],
        "rule_sql": []
    },
    "5495": {
        "db_id": "menu",
        "question": "List the names and menu page IDs of the dishes that first appeared in 1861.",
        "ground_truth": "SELECT T2.name, T1.dish_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.first_appeared = 1861",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, menu_page_id FROM dishes WHERE year = 1861;"
        ],
        "rule_sql": []
    },
    "8384": {
        "db_id": "mondial_geo",
        "question": "Which country became independent on 1492-01-01? Give the full name of the country.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1492-01-01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE independence_date = '1492-01-01';"
        ],
        "rule_sql": []
    },
    "7861": {
        "db_id": "world",
        "question": "What is the form of government that the city of Manila has?",
        "ground_truth": "SELECT T1.GovernmentForm FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Manila'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT government_type FROM cities WHERE name = 'Manila';"
        ],
        "rule_sql": []
    },
    "7059": {
        "db_id": "works_cycles",
        "question": "What is the pay rate of the employee who has the longest vacation hours?",
        "ground_truth": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.VacationHours DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT PayRate FROM Employees ORDER BY VacationHours DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "834": {
        "db_id": "social_media",
        "question": "How many tweets have a klout of over 50?",
        "ground_truth": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Klout > 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE klout > 50;"
        ],
        "rule_sql": []
    },
    "321": {
        "db_id": "retail_complains",
        "question": "How long was Kendall Allen's complaint about her credit card?",
        "ground_truth": "SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.`Complaint ID` = T3.`Complaint ID` WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT LENGTH(complaint_text) FROM complaints WHERE customer_name = 'Kendall Allen' AND complaint_type = 'credit card';"
        ],
        "rule_sql": []
    },
    "3969": {
        "db_id": "public_review_platform",
        "question": "Write down the ID, active status and city of the business which are in CA state.",
        "ground_truth": "SELECT business_id, active, city FROM Business WHERE state = 'CA' AND active = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, active, city FROM businesses WHERE state = 'California';"
        ],
        "rule_sql": []
    },
    "1461": {
        "db_id": "synthea",
        "question": "How long did Isadora Moen's allergy last? Tell me what kind of allergy she has.",
        "ground_truth": "SELECT CASE WHEN SUBSTR(T1.STOP, -2, 1) != '9' THEN SUBSTR(T1.STOP, LENGTH(T1.STOP) - 1) + 2000 END - CASE WHEN SUBSTR(T1.START, -2, 1) = '9' THEN SUBSTR(T1.START, LENGTH(T1.START) - 1) + 1900 ELSE SUBSTR(T1.START, LENGTH(T1.START) - 1) + 2000 END AS years , T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T2.patient = T1.PATIENT WHERE T1.STOP IS NOT NULL AND T1.START IS NOT NULL AND T2.first = 'Isadora' AND T2.last = 'Moen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT allergy_type, duration FROM allergies WHERE patient_name = 'Isadora Moen';"
        ],
        "rule_sql": []
    },
    "8635": {
        "db_id": "chicago_crime",
        "question": "What is the short description of the crime committed the most by criminals in the least populated community?",
        "ground_truth": "SELECT T3.title FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no GROUP BY T3.title ORDER BY T1.population ASC, T3.fbi_code_no DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.short_description, COUNT(*) as crime_count\nFROM crimes c\nJOIN criminals cr ON c.criminal_id = cr.id\nJOIN communities co ON cr.community_id = co.id\nWHERE co.population = (SELECT MIN(population) FROM communities)\nGROUP BY c.short_description\nORDER BY crime_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1652": {
        "db_id": "car_retails",
        "question": "What is the total price of the order 10100?",
        "ground_truth": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price) FROM orders WHERE order_id = 10100"
        ],
        "rule_sql": []
    },
    "2228": {
        "db_id": "world_development_indicators",
        "question": "From 1975 to 1980, how much is the total amount CO2 emmission in kiloton of the the world? Indicate which year the world recorded its highest CO2 emmissions.",
        "ground_truth": "SELECT SUM(T1.Value), T1.Year FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year >= 1975 AND T1.Year < 1981 AND T1.CountryCode = 'WLD' AND T2.SpecialNotes = 'World aggregate.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, SUM(co2_emission) as total_co2 \nFROM world_co2_emissions \nWHERE year BETWEEN 1975 AND 1980 \nGROUP BY year \nORDER BY total_co2 DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4262": {
        "db_id": "simpson_episodes",
        "question": "The person named Al Jean achieved the Primetime Emmy Award category in 2009, which episode did AI Jean achieve?",
        "ground_truth": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Al Jean' AND T1.award_category = 'Primetime Emmy';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_title FROM episodes WHERE person_name = 'Al Jean' AND award_category = 'Primetime Emmy Award' AND year = 2009;"
        ],
        "rule_sql": []
    },
    "7076": {
        "db_id": "works_cycles",
        "question": "How many vacation hours do the male employees have on average?",
        "ground_truth": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'EM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(vacation_hours) FROM employees WHERE gender = 'female';"
        ],
        "rule_sql": []
    },
    "7131": {
        "db_id": "works_cycles",
        "question": "What are the salespeople's email addresses?",
        "ground_truth": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, phone FROM salespeople;"
        ],
        "rule_sql": []
    },
    "1133": {
        "db_id": "talkingdata",
        "question": "For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active?",
        "ground_truth": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM apps WHERE event_time = '14:09:49' AND event_date = '2016/5/6' AND location_x = 116 AND location_y = 40 AND status = 'active';"
        ],
        "rule_sql": []
    },
    "8801": {
        "db_id": "food_inspection",
        "question": "For the business whose business certificate number is 304977, how many violations did it have on 2013/10/7?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_certificate = '304977' AND T1.`date` = '2013-10-07'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM violations WHERE business_certificate_number = 304977 AND violation_date = '2013/10/7';"
        ],
        "rule_sql": []
    },
    "5565": {
        "db_id": "menu",
        "question": "To which menu does the menu page image ID5189412 belong? Please give its name.",
        "ground_truth": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.image_id = 5189412",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM menus WHERE menu_page_id = 5189412;"
        ],
        "rule_sql": []
    },
    "1604": {
        "db_id": "car_retails",
        "question": "What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works?",
        "ground_truth": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT o.address FROM offices o JOIN employees e ON o.officeCode = e.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.city = 'New York' AND e.jobTitle = 'Sales Rep'"
        ],
        "rule_sql": []
    },
    "4315": {
        "db_id": "simpson_episodes",
        "question": "What is the average heights of crew members from Animation Department?",
        "ground_truth": "SELECT AVG(T1.height_meters) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Animation Department';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM crew_members WHERE department = 'Animation';"
        ],
        "rule_sql": []
    },
    "2086": {
        "db_id": "music_tracker",
        "question": "Please list all release titles whose tag is jazz in 2005.",
        "ground_truth": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2005 AND T2.tag LIKE 'jazz'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM releases WHERE tag = 'jazz' AND year = 2005;"
        ],
        "rule_sql": []
    },
    "9051": {
        "db_id": "bike_share_1",
        "question": "Please list trips id started on the hottest day.",
        "ground_truth": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code ORDER BY T2.max_temperature_f DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT trip_id FROM trips WHERE start_date = (SELECT MAX(temperature) FROM weather);"
        ],
        "rule_sql": []
    },
    "3169": {
        "db_id": "donor",
        "question": "What were the resources that were requested by the teacher for project \"d6ef27c07c30c81f0c16c32b6acfa2ff\"? Indicate the quantities as well and whether or not the teacher acquired P.h.D or doctor degree.",
        "ground_truth": "SELECT DISTINCT T1.item_name, T1.item_quantity, T2.teacher_prefix FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT r.resource_name, r.quantity, t.has_phd \nFROM resources r \nJOIN teachers t ON r.teacher_id = t.teacher_id \nWHERE r.project_id = 'd6ef27c07c30c81f0c16c32b6acfa2ff';"
        ],
        "rule_sql": []
    },
    "8841": {
        "db_id": "food_inspection",
        "question": "In the violations in 2014, how many of them have a low risk category?",
        "ground_truth": "SELECT COUNT(risk_category) FROM violations WHERE STRFTIME('%Y', `date`) = '2014' AND risk_category = 'Low Risk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM violations WHERE year = 2014 AND risk_category = 'low';"
        ],
        "rule_sql": []
    },
    "8441": {
        "db_id": "mondial_geo",
        "question": "Please provide a list of every nation where English is spoken and utilized entirely.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English' AND T2.Percentage = 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM languages WHERE language = 'English' AND usage = 'entirely';"
        ],
        "rule_sql": []
    },
    "466": {
        "db_id": "movies_4",
        "question": "Give the genre and popularity of movies whose revenue is at least 120,000,000 between 2012 and 2015.",
        "ground_truth": "SELECT T3.genre_name, T1.popularity FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.revenue > 120000000 AND T1.release_date BETWEEN '2012-01-01' AND '2015-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre, popularity FROM movies WHERE revenue >= 120000000 AND year BETWEEN 2012 AND 2015;"
        ],
        "rule_sql": []
    },
    "1096": {
        "db_id": "talkingdata",
        "question": "What is the brand of the device used by the youngest female user?",
        "ground_truth": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_id IN ( SELECT * FROM ( SELECT device_id FROM gender_age WHERE gender = 'F' ORDER BY age LIMIT 1 ) AS T )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand FROM users WHERE gender = 'male' ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8218": {
        "db_id": "mondial_geo",
        "question": "Which countries have more than 90% of African? List the name of the country in full.",
        "ground_truth": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'African' AND T1.Percentage > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM countries WHERE african_percentage > 90;"
        ],
        "rule_sql": []
    },
    "2221": {
        "db_id": "world_development_indicators",
        "question": "What is the agricultural land area in sq. km of Italy in 1968?",
        "ground_truth": "SELECT Value FROM Indicators WHERE IndicatorName = 'Agricultural land (sq. km)' AND Year = 1968 AND CountryName = 'Italy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT agricultural_land_area FROM countries WHERE country = 'Italy' AND year = 1968;"
        ],
        "rule_sql": []
    },
    "6917": {
        "db_id": "ice_hockey_draft",
        "question": "Among the players with a height of over 6'2\" inches, how many of them were born in Sweden?",
        "ground_truth": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '6''2\"' AND T1.nation = 'Sweden'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE height > 6.2 AND country = 'Sweden';"
        ],
        "rule_sql": []
    },
    "7355": {
        "db_id": "works_cycles",
        "question": "Which sales areas are expected to have the highest yearly sales quota?",
        "ground_truth": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID GROUP BY T1.TerritoryID ORDER BY SUM(T1.SalesQuota) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales_area, MAX(quota) FROM sales_quotas GROUP BY sales_area ORDER BY MAX(quota) ASC;"
        ],
        "rule_sql": []
    },
    "4108": {
        "db_id": "public_review_platform",
        "question": "How many stars does each of the 3 top users with the most likes in their reviews have?",
        "ground_truth": "SELECT T2.user_average_stars FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id ORDER BY SUM(T1.likes) DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.stars, COUNT(l.review_id) as like_count\nFROM users u\nJOIN reviews r ON u.user_id = r.user_id\nJOIN likes l ON r.review_id = l.review_id\nGROUP BY u.user_id\nORDER BY like_count DESC\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "3522": {
        "db_id": "authors",
        "question": "What is the average number of papers published in the journal \"Molecular Brain\" every year from 2008 to 2011?",
        "ground_truth": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Molecular Brain' AND T2.Year BETWEEN 2008 AND 2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(num_papers) FROM papers WHERE journal = 'Molecular Brain' AND year BETWEEN 2008 AND 2011 GROUP BY year;"
        ],
        "rule_sql": []
    },
    "7701": {
        "db_id": "hockey",
        "question": "In the Stanley Cup finals history, how many games did player id \"broadpu01\" play in 1922?",
        "ground_truth": "SELECT GP FROM ScoringSC WHERE playerID = 'broadpu01' AND YEAR = 1922",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE player_id = 'broadpu01' AND year = 1922;"
        ],
        "rule_sql": []
    },
    "915": {
        "db_id": "cs_semester",
        "question": "Describe the students' full names and grades in Intro to BlockChain course.",
        "ground_truth": "SELECT T1.f_name, T1.l_name, T2.grade FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, grade FROM students WHERE course_name = 'Intro to BlockChain';"
        ],
        "rule_sql": []
    },
    "3506": {
        "db_id": "video_games",
        "question": "In games that can be played on Wii, what is the percentage of games released in 2007?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.release_year = 2007 THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'Wii'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM games WHERE platform = 'Wii')) AS percentage FROM games WHERE year = 2007"
        ],
        "rule_sql": []
    },
    "9111": {
        "db_id": "movie_3",
        "question": "What is the email address of the staff Jon Stephens?",
        "ground_truth": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'"
        ],
        "rule_sql": []
    },
    "4513": {
        "db_id": "student_loan",
        "question": "What is the school and organization enrolled by student211?",
        "ground_truth": "SELECT T2.school, T1.organ FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T1.name = 'student211'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT school, organization FROM students WHERE student_name = 'student211'"
        ],
        "rule_sql": []
    },
    "2985": {
        "db_id": "shakespeare",
        "question": "How many \"servant to Timon\" characters are there?",
        "ground_truth": "SELECT COUNT(id) FROM characters WHERE Description = 'servant to Timon'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM characters WHERE role = 'servant to Timon';"
        ],
        "rule_sql": []
    },
    "7402": {
        "db_id": "works_cycles",
        "question": "Among all the products that are manufactured in-house, how many of them are salable?",
        "ground_truth": "SELECT SUM(FinishedGoodsFlag) FROM Product WHERE MakeFlag = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE manufactured_in_house = 1 AND salable = 1;"
        ],
        "rule_sql": []
    },
    "2189": {
        "db_id": "world_development_indicators",
        "question": "List all the country in East Asia & Pacific region that have more than 2000000 urban population in 1970.",
        "ground_truth": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1970 AND T1.Region = 'East Asia & Pacific' AND T2.Value > 2000000 AND t2.indicatorname = 'Urban population'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM population_data WHERE region = 'East Asia & Pacific' AND urban_population > 2000000 AND year = 1970;"
        ],
        "rule_sql": []
    },
    "2350": {
        "db_id": "superstore",
        "question": "Among the orders made by Aimee Bixby, how many of them included at least one kind of product under the category \"Furniture\"?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.Category = 'Furniture' AND T1.`Customer Name` = 'Aimee Bixby'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.customer_name = 'Aimee Bixby'\nAND o.category = 'Furniture';"
        ],
        "rule_sql": []
    },
    "782": {
        "db_id": "social_media",
        "question": "How many tweets in total were posted by a user in Argentina?",
        "ground_truth": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE user_country = 'Argentina';"
        ],
        "rule_sql": []
    },
    "4070": {
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of businesses with the category name food that are open from 7AM to 8PM in the businesses with the same time.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.category_name = 'Food' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.category_name) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN b.hours LIKE '%7:00 AM%' AND b.hours LIKE '%8:00 PM%' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM businesses b\nJOIN categories c ON b.id = c.business_id\nWHERE c.category_name = 'food';"
        ],
        "rule_sql": []
    },
    "1621": {
        "db_id": "car_retails",
        "question": "What was the latest order that customer No.114 made? Give the name of the product.",
        "ground_truth": "SELECT t3.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t1.productCode = t3.productCode WHERE t2.customerNumber = '114' ORDER BY t2.orderDate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM orders WHERE customer_id = 114 ORDER BY order_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5731": {
        "db_id": "language_corpus",
        "question": "Indicate on how many different pages the word ripoll appears.",
        "ground_truth": "SELECT T3.page FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'ripoll'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM pages WHERE word = 'ripoll';"
        ],
        "rule_sql": []
    },
    "6": {
        "db_id": "movie_platform",
        "question": "What is the user avatar url for user 41579158? What is the latest movie rated by him / her?",
        "ground_truth": "SELECT T3.user_avatar_image_url, T3.rating_date_utc FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T3.user_id = T2.user_id WHERE T3.user_id = 41579158 ORDER BY T3.rating_date_utc DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT avatar_url, title FROM users JOIN ratings ON users.user_id = ratings.user_id JOIN movies ON ratings.movie_id = movies.movie_id WHERE users.user_id = 41579158 ORDER BY ratings.rating_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2442": {
        "db_id": "superstore",
        "question": "What are the names of the products that had been shipped in March 2013 at central superstore?",
        "ground_truth": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE strftime('%Y-%m', T1.`Ship Date`) = '2013-03'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE store_name = 'central superstore' AND shipment_date LIKE '2013-03%';"
        ],
        "rule_sql": []
    },
    "6614": {
        "db_id": "retail_world",
        "question": "The product 'Mozzarella di Giovanni' belongs in which category? Include the category's description as well.",
        "ground_truth": "SELECT T2.CategoryName, T2.Description FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Mozzarella di Giovanni'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.CategoryName, c.Description \nFROM Products p \nJOIN Categories c ON p.CategoryID = c.CategoryID \nWHERE p.ProductName = 'Mozzarella di Giovanni'"
        ],
        "rule_sql": []
    },
    "3494": {
        "db_id": "video_games",
        "question": "List the game IDs of the games produced by Abylight.",
        "ground_truth": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Abylight'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_id FROM games WHERE producer = 'Abylight';"
        ],
        "rule_sql": []
    },
    "9086": {
        "db_id": "bike_share_1",
        "question": "What is the total trip duration made within Palo Alto city? Convert the duration to hour.",
        "ground_truth": "SELECT CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(duration) / 60 AS total_hours FROM trips WHERE city = 'Palo Alto';"
        ],
        "rule_sql": []
    },
    "1661": {
        "db_id": "car_retails",
        "question": "List out 3 best seller products during year 2003 with their total quantity sold during 2003.",
        "ground_truth": "SELECT t3.productName, SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE STRFTIME('%Y', t1.orderDate) = '2003' GROUP BY t3.productName ORDER BY SUM(t2.quantityOrdered) DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, SUM(quantity) as total_sold\nFROM sales\nWHERE sale_date LIKE '2003%'\nGROUP BY product_name\nORDER BY total_sold DESC\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "1765": {
        "db_id": "restaurant",
        "question": "What is the full address of the restaurant named \"Sanuki Restaurant\"?",
        "ground_truth": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM restaurants WHERE name = 'Sanuki Restaurant';"
        ],
        "rule_sql": []
    },
    "6697": {
        "db_id": "retails",
        "question": "Clerk#000000936 dealt with a \"Not Specified\" order on 1995/3/13, what was the charge for the part of the order shipped by truck?",
        "ground_truth": "SELECT T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax) AS num FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_clerk = 'Clerk#000000936' AND T2.l_shipmode = 'TRUCK' AND T1.o_orderstatus = '4-NOT SPECIFIED' AND T1.o_orderdate = '1995-03-13'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT l_extendedprice \nFROM lineitem \nJOIN orders ON l_orderkey = o_orderkey \nJOIN clerk ON o_clerk = c_clerk \nWHERE c_clerk = 'Clerk#000000936' \nAND o_orderdate = '1995-03-13' \nAND o_comment = 'Not Specified' \nAND l_shipmode = 'TRUCK';"
        ],
        "rule_sql": []
    },
    "3481": {
        "db_id": "video_games",
        "question": "Calculate the difference in sales between the games released in 1990 and 2000.",
        "ground_truth": "SELECT SUM(CASE WHEN T2.release_year = 2000 THEN T1.num_sales ELSE 0 END) - SUM(CASE WHEN T2.release_year = 1990 THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT SUM(sales) FROM games WHERE release_year = 2000) - \n    (SELECT SUM(sales) FROM games WHERE release_year = 1990) AS sales_difference;"
        ],
        "rule_sql": []
    },
    "7662": {
        "db_id": "hockey",
        "question": "Among the coaches who have received an award in 1940, how many of them are born in Toronto?",
        "ground_truth": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1940 AND T1.birthCity = 'Toronto'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM coaches \nWHERE award_year = 1940 \nAND birth_city = 'Toronto';"
        ],
        "rule_sql": []
    },
    "8401": {
        "db_id": "mondial_geo",
        "question": "When did Equatorial Guinea become independent?",
        "ground_truth": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Equatorial Guinea'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT independence_date FROM countries WHERE name = 'Equatorial Guinea';"
        ],
        "rule_sql": []
    },
    "1218": {
        "db_id": "talkingdata",
        "question": "Please list any three events that have the longitude and latitude of 0.",
        "ground_truth": "SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3;"
        ],
        "rule_sql": []
    },
    "8015": {
        "db_id": "university",
        "question": "Give the location of the university ID 112.",
        "ground_truth": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.id = 112",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE id = 112;"
        ],
        "rule_sql": []
    },
    "4875": {
        "db_id": "legislator",
        "question": "List the official full names of all the legislators who have facebook, instagram, twitter and youtube accounts.",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name FROM legislators WHERE facebook IS NOT NULL AND instagram IS NOT NULL AND twitter IS NOT NULL AND youtube IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "4511": {
        "db_id": "student_loan",
        "question": "Which male students are unemployed, disable and were absent for 5 month?",
        "ground_truth": "SELECT T1.name FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN longest_absense_from_school AS T3 ON T3.name = T2.name WHERE T3.month = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE gender = 'male' AND employment_status = 'unemployed' AND disability_status = 'disabled' AND months_absent = 5;"
        ],
        "rule_sql": []
    },
    "9114": {
        "db_id": "movie_3",
        "question": "Please list the titles of the top 3 films with the highest replacement cost.",
        "ground_truth": "SELECT title FROM film WHERE replacement_cost = ( SELECT MAX(replacement_cost) FROM film ) LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films ORDER BY replacement_cost DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "5647": {
        "db_id": "shipping",
        "question": "How many cities are in Connecticut?",
        "ground_truth": "SELECT COUNT(*) FROM city WHERE state = 'Connecticut'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM states WHERE name = 'Connecticut';"
        ],
        "rule_sql": []
    },
    "5491": {
        "db_id": "menu",
        "question": "How many dishes appeared on a menu more than once?",
        "ground_truth": "SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menu GROUP BY dish_name HAVING COUNT(*) > 1;"
        ],
        "rule_sql": []
    },
    "3114": {
        "db_id": "cars",
        "question": "What are the names of the cars worth 20000?",
        "ground_truth": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cars WHERE price = 20000;"
        ],
        "rule_sql": []
    },
    "2484": {
        "db_id": "shooting",
        "question": "How many more black female victims than white female victims were discovered?",
        "ground_truth": "SELECT SUM(race = 'B') - SUM(race = 'W') FROM subjects WHERE gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM victims WHERE race = 'Black' AND gender = 'Female') - \n    (SELECT COUNT(*) FROM victims WHERE race = 'White' AND gender = 'Male') AS difference;"
        ],
        "rule_sql": []
    },
    "5509": {
        "db_id": "menu",
        "question": "List down the locations of menu sponsored by Norddeutscher Lloyd Bremen.",
        "ground_truth": "SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM menus WHERE sponsor = 'Norddeutscher Lloyd Bremen';"
        ],
        "rule_sql": []
    },
    "4349": {
        "db_id": "simpson_episodes",
        "question": "How many awards did simpson 20 won in 2009?",
        "ground_truth": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009' AND result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM awards WHERE name = 'simpson 20' AND year = 2009;"
        ],
        "rule_sql": []
    },
    "7073": {
        "db_id": "works_cycles",
        "question": "Among the married employees with the highest pay frequency, how many of them have an eastern name style?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' AND T2.NameStyle = 1 AND T3.Rate = ( SELECT Rate FROM EmployeePayHistory ORDER BY Rate DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM employees e\nJOIN salaries s ON e.employee_id = s.employee_id\nWHERE e.marital_status = 'Married'\nAND s.pay_frequency = (SELECT MAX(pay_frequency) FROM salaries)\nAND e.name LIKE '%eastern%';"
        ],
        "rule_sql": []
    },
    "1406": {
        "db_id": "synthea",
        "question": "What is the age of the patient with hypertension named Giovanni Russel?",
        "ground_truth": "SELECT strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) AS age FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Giovanni' AND T2.last = 'Russel' AND T1.DESCRIPTION = 'Hypertension'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age FROM patients WHERE name = 'Giovanni Russel' AND condition = 'hypertension';"
        ],
        "rule_sql": []
    },
    "8190": {
        "db_id": "sales_in_weather",
        "question": "What are the items sold by the store during the day whose station recorded the thickest snowfall?",
        "ground_truth": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN ( SELECT station_nbr, `date` FROM weather ORDER BY snowfall DESC LIMIT 1 ) AS T3 ON T2.station_nbr = T3.station_nbr",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT i.name \nFROM items i\nJOIN sales s ON i.id = s.item_id\nJOIN stores st ON s.store_id = st.id\nJOIN weather w ON st.station_id = w.station_id\nWHERE w.time_of_day = 'day'\nORDER BY w.snowfall DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2947": {
        "db_id": "professional_basketball",
        "question": "For all the full attendence players in 1995, which player had most turnovers? Give the full name of the player.",
        "ground_truth": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.GP = 82 AND T2.year = 1995 ORDER BY T2.turnovers DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.full_name \nFROM players p\nJOIN player_stats ps ON p.player_id = ps.player_id\nWHERE ps.year = 1995 \nAND ps.games_played = ps.games_started\nORDER BY ps.turnovers DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4762": {
        "db_id": "legislator",
        "question": "List the full name of all the senior senators in year 2013.",
        "ground_truth": "SELECT T2.official_full_name FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank = 'senior' AND T1.type = 'sen' AND T1.start LIKE '2013%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM senators WHERE year = 2013 AND status = 'senior';"
        ],
        "rule_sql": []
    },
    "7119": {
        "db_id": "works_cycles",
        "question": "What are the company that Adventure Works deal with that have poor credit rating? Please provide their business number.",
        "ground_truth": "SELECT BusinessEntityID FROM Vendor WHERE CreditRating = ( SELECT CreditRating FROM Vendor ORDER BY CreditRating DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT BusinessNumber FROM Companies WHERE CreditRating = 'Good' AND CompanyName LIKE '%Adventure Works%';"
        ],
        "rule_sql": []
    },
    "4234": {
        "db_id": "simpson_episodes",
        "question": "What is the average number of stars assigned to The simpson 20s: S20-E12? What is the said episode all about?",
        "ground_truth": "SELECT AVG(T2.stars), T1.summary FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode_id = 'S20-E12';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(stars) FROM episodes WHERE title = 'The simpson 20s: S20-E12';"
        ],
        "rule_sql": []
    },
    "3223": {
        "db_id": "donor",
        "question": "Is the donor who donated to school \"d4af834b1d3fc8061e1ee1b3f1a77b85\" a teacher?",
        "ground_truth": "SELECT T2.is_teacher_acct FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT is_teacher FROM donors WHERE school_id = 'd4af834b1d3fc8061e1ee1b3f1a77b85';"
        ],
        "rule_sql": []
    },
    "6359": {
        "db_id": "retail_world",
        "question": "How many suppliers are there in the United States of America?",
        "ground_truth": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM suppliers WHERE country = 'USA';"
        ],
        "rule_sql": []
    },
    "3419": {
        "db_id": "video_games",
        "question": "Which publisher has published the most number of Action games?",
        "ground_truth": "SELECT T.publisher_name FROM ( SELECT T4.publisher_name, COUNT(DISTINCT T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id INNER JOIN game_publisher AS T3 ON T2.id = T3.game_id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T1.genre_name = 'Action' GROUP BY T4.publisher_name ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) as game_count \nFROM games \nWHERE genre = 'Action' \nGROUP BY publisher \nORDER BY game_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1215": {
        "db_id": "talkingdata",
        "question": "What percentage of women do not have applications installed on their mobile with respect to men?",
        "ground_truth": "SELECT SUM(IIF(T1.gender = 'F', 1, 0)) / SUM(IIF(T1.gender = 'M', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN gender = 'female' AND applications_installed = 0 THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN gender = 'male' AND applications_installed = 0 THEN 1 END)) AS percentage_women_without_apps\nFROM users;"
        ],
        "rule_sql": []
    },
    "705": {
        "db_id": "trains",
        "question": "Among the cars on a train that runs in the east direction, how many of them have a flat roof and a circle load shape?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.load_shape = 'circle' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.roof = 'flat' ",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM cars \nWHERE direction = 'west' \nAND roof_type = 'flat' \nAND load_shape = 'circle';"
        ],
        "rule_sql": []
    },
    "3500": {
        "db_id": "video_games",
        "question": "List down at least five publishers of the games with number of sales less than 10000.",
        "ground_truth": "SELECT T.publisher_name FROM ( SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' AND T2.num_sales * 100000 < 10000 LIMIT 5 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) as sales_count FROM games WHERE sales < 10000 GROUP BY publisher LIMIT 5;"
        ],
        "rule_sql": []
    },
    "3662": {
        "db_id": "authors",
        "question": "Where was the 'A context-based navigation paradigm for accessing Web data' paper published? State the name of the conference.",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'A context-based navigation paradigm for accessing Web data'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT journal FROM papers WHERE title = 'A context-based navigation paradigm for accessing Web data';"
        ],
        "rule_sql": []
    },
    "5772": {
        "db_id": "language_corpus",
        "question": "How many pages of Wikipedia are there in total on the Catalan language?",
        "ground_truth": "SELECT pages FROM langs WHERE lang = 'ca'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM wikipedia_pages WHERE language = 'Catalan';"
        ],
        "rule_sql": []
    },
    "1021": {
        "db_id": "computer_student",
        "question": "Among the faculty affiliated professor, how many professors teaches professional or master/undergraduate courses?",
        "ground_truth": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_aff' AND T1.professor = 1 AND T3.courseLevel = 'Level_500'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM professors WHERE faculty_affiliation = 'professor' AND (course_level = 'professional' OR course_level = 'master' OR course_level = 'undergraduate');"
        ],
        "rule_sql": []
    },
    "2348": {
        "db_id": "superstore",
        "question": "How many orders has Aimee Bixby made?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Aimee Bixby';"
        ],
        "rule_sql": []
    },
    "5485": {
        "db_id": "menu",
        "question": "Please list the IDs of the menus that are DIYs of the restaurant and have the dish \"Clear green turtle\".",
        "ground_truth": "SELECT T2.menu_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle' AND T3.sponsor IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_id FROM menus WHERE restaurant_id = 'DIY' AND dish_name = 'Clear green turtle';"
        ],
        "rule_sql": []
    },
    "6110": {
        "db_id": "food_inspection_2",
        "question": "Please list the full names of all the sanitarians under the supervision of Darlisha Jacobs.",
        "ground_truth": "SELECT first_name, last_name FROM employee WHERE title = 'Sanitarian' AND supervisor = ( SELECT employee_id FROM employee WHERE first_name = 'Darlisha' AND last_name = 'Jacobs' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM sanitarians WHERE supervisor = 'Darlisha Jacobs';"
        ],
        "rule_sql": []
    },
    "8030": {
        "db_id": "university",
        "question": "What is the university ID with the most students in 2011?",
        "ground_truth": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_id, COUNT(*) as student_count FROM students WHERE year = 2011 GROUP BY university_id ORDER BY student_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1940": {
        "db_id": "soccer_2016",
        "question": "When and for what role did the youngest player appear in his first match?",
        "ground_truth": "SELECT T1.Match_Date, T4.Role_Desc FROM `Match` AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id ORDER BY T3.DOB DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(birth_date), role FROM players ORDER BY birth_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3757": {
        "db_id": "college_completion",
        "question": "What is the name of the school with the highest difference in the average completion rate for the national in which it belongs? Indicate the state appropriations to higher education in fiscal year 2011 per resident to which the school belongs.",
        "ground_truth": "SELECT T1.chronname, T2.state_appr_value FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state ORDER BY T1.awards_per_value - T2.awards_per_natl_value DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name, s.state, (s.completion_rate - n.avg_completion_rate) AS difference, n.state_appropriations_2011_per_resident\nFROM schools s\nJOIN national n ON s.national_id = n.id\nORDER BY difference DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6033": {
        "db_id": "books",
        "question": "What is the full name of the customers who live in Baiyin city?",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.city = 'Baiyin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers WHERE city = 'Baiyin';"
        ],
        "rule_sql": []
    },
    "7880": {
        "db_id": "world",
        "question": "Which country has the most crowded city in the world?",
        "ground_truth": "SELECT T1.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM cities ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "476": {
        "db_id": "movies_4",
        "question": "Which movie did the company 'Radiant Film GmbH' work on?",
        "ground_truth": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Radiant Film GmbH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE company = 'Radiant Film GmbH';"
        ],
        "rule_sql": []
    },
    "719": {
        "db_id": "trains",
        "question": "How many eastbound trains have rectangular-shaped head cars?",
        "ground_truth": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T2.direction = 'east' AND T1.shape = 'rectangle' GROUP BY T1.train_id)as T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trains WHERE direction = 'eastbound' AND head_car_shape = 'rectangle';"
        ],
        "rule_sql": []
    },
    "9043": {
        "db_id": "bike_share_1",
        "question": "Please list bikes id were used in trips which start station were installed in 2013.",
        "ground_truth": "SELECT DISTINCT T1.bike_id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.installation_date LIKE '%2013'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bike_id FROM trips WHERE start_station_id IN (SELECT station_id FROM stations WHERE installation_year = 2013);"
        ],
        "rule_sql": []
    },
    "5465": {
        "db_id": "sales",
        "question": "Give the full name of the customer who bought the most amount of products.",
        "ground_truth": "SELECT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID ORDER BY T2.Quantity * T1.Price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.first_name, c.last_name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(o.order_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "94": {
        "db_id": "movie_platform",
        "question": "Please list the names of the top three movies in the number of likes related to the critic made by the user rating the movie.",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, COUNT(l.like_id) as like_count\nFROM movies m\nJOIN likes l ON m.movie_id = l.movie_id\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = (SELECT user_id FROM critics WHERE critic_id = 1)\nGROUP BY m.movie_id\nORDER BY like_count DESC\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "7519": {
        "db_id": "image_and_language",
        "question": "How many prediction classes with \"has\" captions are there for image id 3050?",
        "ground_truth": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 3050 AND T2.PRED_CLASS = 'has'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM predictions WHERE image_id = 3050 AND caption LIKE '%has%';"
        ],
        "rule_sql": []
    },
    "8264": {
        "db_id": "mondial_geo",
        "question": "Among the countries whose GDP is over 1000000, how many of them have a population groth rate of over 3%?",
        "ground_truth": "SELECT COUNT(T1.Country) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.GDP > 1000000 AND T2.Population_Growth > 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countries \nWHERE GDP > 1000000 AND population_growth_rate > 3"
        ],
        "rule_sql": []
    },
    "5419": {
        "db_id": "sales",
        "question": "Calculate the total trading quantity of Abraham sold to Aaron Alexander.",
        "ground_truth": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T2.SalesPersonID = 1 AND T1.FirstName = 'Aaron' AND T1.LastName = 'Alexander' AND T3.FirstName = 'Abraham'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM trades WHERE seller = 'Abraham' AND buyer = 'Aaron Alexander'"
        ],
        "rule_sql": []
    },
    "8708": {
        "db_id": "chicago_crime",
        "question": "What percentage of non-domestic crimes have occurred in the Jefferson Park district?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T2.case_number END) AS REAL) * 100 / COUNT(T2.case_number) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Jefferson Park'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM crimes WHERE domestic = 0)) AS percentage FROM crimes WHERE district = 'Jefferson Park'"
        ],
        "rule_sql": []
    },
    "8368": {
        "db_id": "mondial_geo",
        "question": "What are the names of the sea that can be found on the island with the biggest area?",
        "ground_truth": "SELECT T2.Name FROM islandIn AS T1 INNER JOIN sea AS T2 ON T2.Name = T1.Sea WHERE T1.Island = ( SELECT Name FROM island ORDER BY Area DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sea_name FROM seas WHERE island_id = (SELECT island_id FROM islands ORDER BY area DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "4619": {
        "db_id": "mental_health_survey",
        "question": "How many respondents of the mental health survey were diagnosed with 'Substance Use Disorder'?",
        "ground_truth": "SELECT COUNT(AnswerText) FROM Answer WHERE AnswerText LIKE 'Substance Use Disorder'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mental_health_survey WHERE diagnosis = 'Substance Use Disorder';"
        ],
        "rule_sql": []
    },
    "4514": {
        "db_id": "student_loan",
        "question": "How many male students filed for bankruptcy as compare to female students?",
        "ground_truth": "SELECT COUNT(T2.name) - SUM(IIF(T2.name IS NULL, 1, 0)) AS num FROM filed_for_bankrupcy AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN gender = 'male' THEN 1 END) AS male_bankruptcy_count,\n    COUNT(CASE WHEN gender = 'female' THEN 1 END) AS female_bankruptcy_count\nFROM students\nWHERE bankruptcy_status = 'filed'"
        ],
        "rule_sql": []
    },
    "4450": {
        "db_id": "student_loan",
        "question": "How many unemployed students still have payment due?",
        "ground_truth": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE employment_status = 'unemployed' AND payment_status = 'due';"
        ],
        "rule_sql": []
    },
    "5431": {
        "db_id": "sales",
        "question": "Among customers named Kate, who has the highest quantity?",
        "ground_truth": "SELECT T2.FirstName, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Kate' ORDER BY T1.Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name, MAX(quantity) FROM customers WHERE name = 'Kate' GROUP BY customer_name ORDER BY quantity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8285": {
        "db_id": "mondial_geo",
        "question": "When did Uganda declare independence?",
        "ground_truth": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Uganda'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT independence_date FROM countries WHERE name = 'Uganda';"
        ],
        "rule_sql": []
    },
    "4110": {
        "db_id": "public_review_platform",
        "question": "List by their id all businesses that are open on Sunday.",
        "ground_truth": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.day_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM businesses WHERE open_days LIKE '%Sunday%';"
        ],
        "rule_sql": []
    },
    "4667": {
        "db_id": "disney",
        "question": "Who are the voice actors for all the heroes?",
        "ground_truth": "SELECT T2.`voice-actor` FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T2.character = T1.hero WHERE T2.movie = T1.movie_title",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM heroes WHERE role = 'voice_actor';"
        ],
        "rule_sql": []
    },
    "8645": {
        "db_id": "chicago_crime",
        "question": "Describe the specific description and case locations under IUCR 142.",
        "ground_truth": "SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM crimes WHERE IUCR = '142';"
        ],
        "rule_sql": []
    },
    "8735": {
        "db_id": "chicago_crime",
        "question": "How many neighborhoods can be found in the Forest Glen community area?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.community_area_name = 'Forest Glen' THEN 1 ELSE 0 END) FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM neighborhoods WHERE community_area = 'Forest Glen';"
        ],
        "rule_sql": []
    },
    "4871": {
        "db_id": "legislator",
        "question": "What is the official Twitter handle of Jason Lewis?",
        "ground_truth": "SELECT T2.twitter FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Jason Lewis'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT twitter_handle FROM people WHERE first_name = 'Jason' AND last_name = 'Lewis';"
        ],
        "rule_sql": []
    },
    "3723": {
        "db_id": "college_completion",
        "question": "Which 4-year private for-profit school in \"KY\" has the highest graudation 150 value? Give the ID for the school.",
        "ground_truth": "SELECT T1.chronname, T1.unitid FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'KY' AND T1.level = '4-year' AND T1.control = 'Private for-profit' GROUP BY T1.chronname ORDER BY SUM(T1.grad_150_value) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ID FROM schools WHERE state = 'KY' AND control = 'Private for-profit' AND years = 4 ORDER BY graduation_150 DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5489": {
        "db_id": "menu",
        "question": "How many dishes are included in the menu page ID 144?",
        "ground_truth": "SELECT COUNT(*) FROM MenuItem WHERE menu_page_id = 144",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menu_pages WHERE page_id = 144;"
        ],
        "rule_sql": []
    },
    "253": {
        "db_id": "retail_complains",
        "question": "How many complaints on credit cards in the year 2016 were filed by male clients?",
        "ground_truth": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM complaints WHERE product = 'credit card' AND year = 2016 AND gender = 'male';"
        ],
        "rule_sql": []
    },
    "2699": {
        "db_id": "regional_sales",
        "question": "What is the average household income in cities in the state of New Hampshire where there are stores of the type city?",
        "ground_truth": "SELECT AVG(T2.`Household Income`) FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'New Hampshire' AND T2.Type = 'City'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(household_income) FROM cities WHERE state = 'New Hampshire' AND store_type = 'city';"
        ],
        "rule_sql": []
    },
    "3324": {
        "db_id": "video_games",
        "question": "List the genre id of the game Pro Evolution Soccer 2012.",
        "ground_truth": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Pro Evolution Soccer 2012'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre_id FROM games WHERE title = 'Pro Evolution Soccer 2012';"
        ],
        "rule_sql": []
    },
    "415": {
        "db_id": "movies_4",
        "question": "How many crew members worked as producer in the movie \"Pirates of the Caribbean: At World's End\"?",
        "ground_truth": "SELECT COUNT(T3.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM crew WHERE job = 'producer' AND title = 'Pirates of the Caribbean: At World\\'s End';"
        ],
        "rule_sql": []
    },
    "4499": {
        "db_id": "student_loan",
        "question": "How many students are filed for bankruptcy?",
        "ground_truth": "SELECT COUNT(name) FROM filed_for_bankrupcy",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE bankruptcy_status = 'filed';"
        ],
        "rule_sql": []
    },
    "8375": {
        "db_id": "mondial_geo",
        "question": "What is the capital of the 3rd most populated country in Asia and what is the capital city's ratio in percentage (%) against the overall population of the country?",
        "ground_truth": "SELECT T4.Capital, CAST(T3.Population AS REAL) * 100 / T4.Population FROM city AS T3 INNER JOIN ( SELECT T1.Capital , T1.Population FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia' ORDER BY T1.Population DESC LIMIT 2, 1 ) AS T4 ON T3.Name = T4.Capital",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c.capital,\n    (c.capital_population / c.population) * 100 AS capital_ratio_percentage\nFROM countries c\nWHERE c.continent = 'Asia'\nORDER BY c.population DESC\nLIMIT 1 OFFSET 2;"
        ],
        "rule_sql": []
    },
    "5414": {
        "db_id": "sales",
        "question": "Give the full name of the employee who has sold the most quantity.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID ORDER BY T2.Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees ORDER BY sales_amount DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4701": {
        "db_id": "disney",
        "question": "List the movie titles with the voice actor Jeff Bennet",
        "ground_truth": "SELECT movie FROM `voice-actors` WHERE 'voice-actor' = 'Jeff Bennett'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE voice_actor = 'Jeff Bennet';"
        ],
        "rule_sql": []
    },
    "8430": {
        "db_id": "mondial_geo",
        "question": "Which nation has the smallest population, and where is its capital located?",
        "ground_truth": "SELECT Name, Capital FROM country ORDER BY Population ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT n.name, c.name, n.population \nFROM nations n \nJOIN capitals c ON n.capital_id = c.id \nORDER BY n.population DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7415": {
        "db_id": "works_cycles",
        "question": "Among the store contact employees, how many of them have a Vista credit card?",
        "ground_truth": "SELECT COUNT(T1.FirstName) FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.CardType = 'Vista' AND T1.PersonType = 'SC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE position = 'Store Contact' AND credit_card = 'Vista';"
        ],
        "rule_sql": []
    },
    "4391": {
        "db_id": "student_loan",
        "question": "Is student281 disabled and which school is the student enrolled in?",
        "ground_truth": "SELECT T2.name, T1.school FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.`name` = T2.`name` WHERE T1.name = 'student281'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT disabled, school_name FROM students WHERE student_id = 281"
        ],
        "rule_sql": []
    },
    "8146": {
        "db_id": "sales_in_weather",
        "question": "On how many days with the max temperature over 90 did the sale of item no.5 in store no.3 exceed 100?",
        "ground_truth": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT s.date) \nFROM sales s\nJOIN weather w ON s.date = w.date\nWHERE w.max_temperature > 90 \nAND s.item_id = 5 \nAND s.store_id = 3 \nAND s.quantity > 100"
        ],
        "rule_sql": []
    },
    "5496": {
        "db_id": "menu",
        "question": "Among the dishes on menu page ID 7610, list the names and highest prices of the dishes in menu items that were created on 23rd May 2011.",
        "ground_truth": "SELECT T1.name, T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.created_at LIKE '2011-05-23%' ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, MAX(price) FROM menu_items WHERE menu_page_id = 7610 AND created_at = '2011-05-23' GROUP BY name;"
        ],
        "rule_sql": []
    },
    "4389": {
        "db_id": "student_loan",
        "question": "List all students that have been absent for 6 months.",
        "ground_truth": "SELECT name FROM longest_absense_from_school WHERE `month` = 6",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE last_attendance_date <= date('now', '-6 months');"
        ],
        "rule_sql": []
    },
    "7147": {
        "db_id": "works_cycles",
        "question": "What is contact Type ID No.16 represent for?",
        "ground_truth": "SELECT Name FROM ContactType WHERE ContactTypeID = '16'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM contact_types WHERE contact_type_id = 16;"
        ],
        "rule_sql": []
    },
    "3979": {
        "db_id": "public_review_platform",
        "question": "Among the stopped businesses in San Tan Valley city, list down the user ID and review length of who had great experience.",
        "ground_truth": "SELECT T2.user_id, T2.review_length FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'San Tan Valley' AND T1.active = 'false' AND T2.review_stars = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, LENGTH(review_text) as review_length \nFROM businesses b\nJOIN reviews r ON b.business_id = r.business_id\nWHERE b.city = 'San Tan Valley' \nAND b.is_open = 1\nAND r.rating >= 4\nORDER BY review_length DESC;"
        ],
        "rule_sql": []
    },
    "195": {
        "db_id": "book_publishing_company",
        "question": "Name all the authors for 'Sushi, Anyone?'.",
        "ground_truth": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.title = 'Sushi, Anyone?'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM authors WHERE book_title = 'Sushi, Anyone?';"
        ],
        "rule_sql": []
    },
    "2447": {
        "db_id": "superstore",
        "question": "What is the percentage of furniture orders that were shipped through first class in 2013 at the Central superstore?",
        "ground_truth": "SELECT CAST(SUM(CASE  WHEN T1.`Ship Mode` = 'First Class' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Category = 'Furniture' AND STRFTIME('%Y', T1.`Ship Date`) = '2013'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN ship_mode = 'First Class' AND category = 'Furniture' THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN category = 'Furniture' THEN 1 END)) AS percentage\nFROM orders\nWHERE store = 'Central' \nAND order_date LIKE '2013%';"
        ],
        "rule_sql": []
    },
    "602": {
        "db_id": "codebase_comments",
        "question": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19?",
        "ground_truth": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ((SELECT COUNT(*) FROM followers WHERE solution_id = 18) - \n     (SELECT COUNT(*) FROM followers WHERE solution_id = 19)) * 100.0 / \n    (SELECT COUNT(*) FROM followers WHERE solution_id = 19) AS percentage_difference;"
        ],
        "rule_sql": []
    },
    "5947": {
        "db_id": "books",
        "question": "Among Daisey Lamball's orders, how many were shipped via International shipping?",
        "ground_truth": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Daisey' AND T1.last_name = 'Lamball' AND T3.method_name = 'International'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Daisey Lamball' AND shipping_method = 'International';"
        ],
        "rule_sql": []
    },
    "3914": {
        "db_id": "public_review_platform",
        "question": "What is the correlation between the review starts and business stars?",
        "ground_truth": "SELECT CAST(SUM(T2.review_stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(review.stars) as avg_review_stars, AVG(business.stars) as avg_business_stars FROM review, business WHERE review.business_id = business.id"
        ],
        "rule_sql": []
    },
    "2308": {
        "db_id": "movielens",
        "question": "Please list movie IDs which has the oldest publication date and the cast numbers are zero.",
        "ground_truth": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.cast_num = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_id FROM movies WHERE publication_date = (SELECT MIN(publication_date) FROM movies) AND cast_count = 0;"
        ],
        "rule_sql": []
    },
    "2758": {
        "db_id": "european_football_1",
        "question": "How many matches were played in the Scottish Premiership division from 2006 to 2008?",
        "ground_truth": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE division = 'Scottish Premiership' AND year BETWEEN 2006 AND 2008;"
        ],
        "rule_sql": []
    },
    "4118": {
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of users with a high number of fans who were elite in 2011.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.user_fans = 'High' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.user_fans) FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.actual_year = 2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN elite = '2011' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    users\nWHERE \n    fans > 100;"
        ],
        "rule_sql": []
    },
    "8482": {
        "db_id": "mondial_geo",
        "question": "List all the name and height of all mountains in Alaska",
        "ground_truth": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Alaska'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, height FROM mountains WHERE state = 'California';"
        ],
        "rule_sql": []
    },
    "5711": {
        "db_id": "language_corpus",
        "question": "What is the title of corpus where word \"desena\" appear?",
        "ground_truth": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'desena'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM corpus WHERE word = 'desena';"
        ],
        "rule_sql": []
    },
    "3992": {
        "db_id": "public_review_platform",
        "question": "List all the tires businesses that are opened everyday.",
        "ground_truth": "SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM businesses WHERE category = 'tires' AND open_days = 'everyday';"
        ],
        "rule_sql": []
    },
    "2600": {
        "db_id": "regional_sales",
        "question": "List the store located cities with regions in no water area of California state.",
        "ground_truth": "SELECT DISTINCT T2.`City Name` FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'California' AND T2.`Water Area` = '0'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM stores WHERE state = 'California' AND region = 'no water area';"
        ],
        "rule_sql": []
    },
    "9191": {
        "db_id": "movie_3",
        "question": "What is the complete address of store id 1?",
        "ground_truth": "SELECT T3.address, T3.address2, T3.district FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN store AS T4 ON T3.address_id = T4.address_id WHERE T4.store_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM stores WHERE store_id = 1;"
        ],
        "rule_sql": []
    },
    "922": {
        "db_id": "cs_semester",
        "question": "Describe the full names, emails and intelligence of the students with the highest capability and salary.",
        "ground_truth": "SELECT f_name, l_name, email, intelligence FROM student WHERE student_id IN ( SELECT student_id FROM RA WHERE salary = 'high' AND capability = ( SELECT MAX(capability) FROM RA ) )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name, email, intelligence FROM students WHERE capability = (SELECT MAX(capability) FROM students) AND salary = (SELECT MAX(salary) FROM students);"
        ],
        "rule_sql": []
    },
    "5833": {
        "db_id": "airline",
        "question": "Among the flights operated by American Airlines Inc., how many of them were scheduled to land in New York?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.DEST = 'JFK' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE carrier = 'American Airlines Inc.' AND dest_city = 'New York'"
        ],
        "rule_sql": []
    },
    "644": {
        "db_id": "codebase_comments",
        "question": "Please provide the number of forks that the repository of the solution 35 have.",
        "ground_truth": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM forks WHERE solution_id = 35;"
        ],
        "rule_sql": []
    },
    "2233": {
        "db_id": "world_development_indicators",
        "question": "In which years does the country whose Alpha2Code is 1A have a result of the indicator Adolescent fertility rate?",
        "ground_truth": "SELECT T2.Year FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Year FROM countries WHERE Alpha2Code = '1A' AND Indicator = 'Adolescent fertility rate';"
        ],
        "rule_sql": []
    },
    "8063": {
        "db_id": "university",
        "question": "How many percent of universities got a score above 80 under International criteria in 2016? Among them, name the university which got the highest score.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.score > 80 THEN 1 ELSE 0 END) AS REAL) / COUNT(*), ( SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016 AND T2.score > 80 ORDER BY T2.score DESC LIMIT 1 ) AS max FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM universities WHERE year = 2016)) AS percentage,\n    name\nFROM universities \nWHERE score > 80 \n    AND criteria = 'International' \n    AND year = 2016\nORDER BY score DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5827": {
        "db_id": "airline",
        "question": "Among the flights departing from John F. Kennedy International, how many of them arrived earlier than scheduled?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.ARR_DELAY < 0 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'New York, NY: John F. Kennedy International'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM flights \nWHERE departure_airport = 'John F. Kennedy International' \nAND actual_arrival_time < scheduled_arrival_time;"
        ],
        "rule_sql": []
    },
    "8159": {
        "db_id": "sales_in_weather",
        "question": "Give the average temperature of station no.20 on 2014/10/17.",
        "ground_truth": "SELECT tavg FROM weather WHERE `date` = '2014-10-17' AND station_nbr = 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(temperature) FROM weather WHERE station_id = 20 AND date = '2014-10-17';"
        ],
        "rule_sql": []
    },
    "3209": {
        "db_id": "donor",
        "question": "Is donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d a teacher?",
        "ground_truth": "SELECT DISTINCT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM donors WHERE donor_id = '22cbc920c9b5fa08dfb331422f5926b5' AND occupation = 'teacher';"
        ],
        "rule_sql": []
    },
    "4241": {
        "db_id": "simpson_episodes",
        "question": "How many episodes were aired between October and November 2008?",
        "ground_truth": "SELECT COUNT(episode_id) FROM Episode WHERE air_date LIKE '2008-10%' OR air_date LIKE '2008-11%';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE air_date BETWEEN '2008-10-01' AND '2008-11-30';"
        ],
        "rule_sql": []
    },
    "6952": {
        "db_id": "ice_hockey_draft",
        "question": "How many players who were drafted by the Toronto Maple Leafs have played over 300 games in their first 7 years of the NHL career?",
        "ground_truth": "SELECT COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_GP > 300",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players p\nJOIN draft d ON p.player_id = d.player_id\nWHERE d.team = 'Toronto Maple Leafs'\nAND p.games_played > 300\nAND p.years_in_nhl <= 7"
        ],
        "rule_sql": []
    },
    "1594": {
        "db_id": "car_retails",
        "question": "What is the highest amount of order made by the sales representative in Boston? Please give the name of the product and amount.",
        "ground_truth": "SELECT T2.productName, T1.quantityOrdered * T1.priceEach FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T1.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T4.city = 'Boston' AND T4.salesRepEmployeeNumber IN ( SELECT employeeNumber FROM employees WHERE jobTitle = 'Sales Rep' ) ORDER BY T1.quantityOrdered DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT productName, MAX(amount) \nFROM orders \nWHERE city = 'Boston' \nGROUP BY productName \nORDER BY MAX(amount) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4719": {
        "db_id": "disney",
        "question": "Name the first movie released by Disney.",
        "ground_truth": "SELECT movie_title FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE studio = 'Disney' ORDER BY release_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4285": {
        "db_id": "simpson_episodes",
        "question": "Which episode has the largest number of votes?",
        "ground_truth": "SELECT episode FROM Episode WHERE votes = ( SELECT MAX(votes) FROM Episode );",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_id, COUNT(vote_id) as vote_count FROM votes GROUP BY episode_id ORDER BY vote_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1162": {
        "db_id": "talkingdata",
        "question": "What is the label ID of \"Third-party card management\" category?",
        "ground_truth": "SELECT label_id FROM label_categories WHERE category = 'Third-party card management'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT label_id FROM categories WHERE category_name = 'Third-party card management';"
        ],
        "rule_sql": []
    },
    "4259": {
        "db_id": "simpson_episodes",
        "question": "Please indicate which writer has an episode star score greater than 5 in 2009.",
        "ground_truth": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT writer FROM episodes WHERE star_score > 5 AND year = 2009;"
        ],
        "rule_sql": []
    },
    "380": {
        "db_id": "retail_complains",
        "question": "What is the average age of clients in South Atlantic?",
        "ground_truth": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM clients WHERE region = 'South Atlantic';"
        ],
        "rule_sql": []
    },
    "23": {
        "db_id": "movie_platform",
        "question": "How many users gave \"Pavee Lackeen: The Traveller Girl\" movie a rating score of 4?",
        "ground_truth": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Pavee Lackeen: The Traveller Girl' AND T2.rating_score = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE title = 'Pavee Lackeen: The Traveller Girl') AND rating = 4;"
        ],
        "rule_sql": []
    },
    "2946": {
        "db_id": "professional_basketball",
        "question": "In 2000, which team did the player who played the least minutes without missing a single game play in? Give the full name of the team.",
        "ground_truth": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = 82 AND T2.year = 2000 GROUP BY T1.tmID ORDER BY SUM(T2.PostMinutes) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.name \nFROM teams t\nJOIN players p ON t.id = p.team_id\nJOIN games g ON p.player_id = g.player_id\nWHERE g.year = 2000\nGROUP BY p.player_id\nHAVING COUNT(*) = 82 AND SUM(g.minutes_played) = 0\nORDER BY SUM(g.minutes_played) ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7503": {
        "db_id": "image_and_language",
        "question": "What is the object whose attribute is blurry in image no.2377993? Give the explanation about the object.",
        "ground_truth": "SELECT T4.OBJ_CLASS_ID, T4.OBJ_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T2.ATT_CLASS = 'blurry' AND T1.IMG_ID = 22377993",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT object_name, explanation FROM images WHERE image_id = 2377993 AND attribute = 'blurry';"
        ],
        "rule_sql": []
    },
    "6914": {
        "db_id": "retails",
        "question": "How much is the discounted price of every item that customer 111511 ordered in order 53159? List the names of the parts of every item.",
        "ground_truth": "SELECT T2.l_extendedprice * (1 - T2.l_discount), T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 111511 AND T1.o_orderkey = 53159",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, (oi.unit_price * oi.quantity * 0.9) AS discounted_price\nFROM order_items oi\nJOIN parts p ON oi.part_id = p.part_id\nWHERE oi.customer_id = 111511 AND oi.order_id = 53159;"
        ],
        "rule_sql": []
    },
    "5602": {
        "db_id": "shipping",
        "question": "Provide the weight of the shipment to U-haul Center Of N Syracuse on 2016/9/21.",
        "ground_truth": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'U-haul Center Of N Syracuse' AND T1.ship_date = '2016-09-21'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT weight FROM shipments WHERE recipient = 'U-haul Center Of N Syracuse' AND date = '2016/9/21';"
        ],
        "rule_sql": []
    },
    "9306": {
        "db_id": "movie_3",
        "question": "What are the ratings of the film featuring behind the scenes?",
        "ground_truth": "SELECT rating FROM film WHERE special_features LIKE '%Behind the Scenes%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating FROM films WHERE description LIKE '%behind the scenes%';"
        ],
        "rule_sql": []
    },
    "4987": {
        "db_id": "olympics",
        "question": "Which region is Yao Ming from?",
        "ground_truth": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM players WHERE name = 'Yao Ming';"
        ],
        "rule_sql": []
    },
    "462": {
        "db_id": "movies_4",
        "question": "Write me the titles of the movies starring Jim Carrey.",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE actor = 'Jim Carrey';"
        ],
        "rule_sql": []
    },
    "3266": {
        "db_id": "donor",
        "question": "How many donors who donated to the city of Pocatello are not teachers?",
        "ground_truth": "SELECT COUNT(donationid) FROM donations WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM donors d\nJOIN donations don ON d.donor_id = don.donor_id\nJOIN cities c ON don.city_id = c.city_id\nWHERE c.city_name = 'Pocatello'\nAND d.occupation != 'Teacher';"
        ],
        "rule_sql": []
    },
    "4138": {
        "db_id": "public_review_platform",
        "question": "List the closing time and day of week of active businesses in Goodyear with stars greater than the 80% of average age of star rating.",
        "ground_truth": "SELECT DISTINCT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.active = 'true' AND T1.city = 'Goodyear' AND T1.stars > ( SELECT AVG(stars) * 0.8 FROM Business WHERE active = 'true' AND city = 'Goodyear' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT closing_time, day_of_week \nFROM businesses \nWHERE city = 'Goodyear' \nAND active = 1 \nAND stars > (SELECT AVG(age) * 0.8 FROM stars)"
        ],
        "rule_sql": []
    },
    "722": {
        "db_id": "trains",
        "question": "How many trains with fully loaded head cars are running east?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trains WHERE head_car_status = 'fully loaded' AND direction = 'east';"
        ],
        "rule_sql": []
    },
    "108": {
        "db_id": "movie_platform",
        "question": "Please list the names of the movies that received more than 20 likes?",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic_likes > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM movies WHERE likes > 20;"
        ],
        "rule_sql": []
    },
    "2529": {
        "db_id": "app_store",
        "question": "Which of the app is the best selling app and what is the sentiments polarity of it?",
        "ground_truth": "SELECT T1.App, T2.Sentiment_Polarity FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App ORDER BY T1.Price * CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT app_name, sentiment_polarity FROM apps ORDER BY downloads DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2346": {
        "db_id": "superstore",
        "question": "Among all the orders made by Aimee Bixby, what was the longest shipment time?",
        "ground_truth": "SELECT MAX(strftime('%J', `Ship Date`) - strftime('%J', `Order Date`)) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(shipped_date - order_date) AS longest_shipment_time\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.first_name = 'Aimee' AND c.last_name = 'Bixby';"
        ],
        "rule_sql": []
    },
    "405": {
        "db_id": "retail_complains",
        "question": "In complaints received in 2014, how many of them were submitted via call?",
        "ground_truth": "SELECT COUNT(T2.`Complaint ID`) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.`Submitted via` = 'Phone' AND strftime('%Y', T1.`Date received`) = '2014'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM complaints WHERE year = 2014 AND submission_method = 'call';"
        ],
        "rule_sql": []
    },
    "3613": {
        "db_id": "authors",
        "question": "Who authored the paper titled \"Testing timed automata\n\"?",
        "ground_truth": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Testing timed automata'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author FROM papers WHERE title = 'Testing timed automata';"
        ],
        "rule_sql": []
    },
    "4621": {
        "db_id": "disney",
        "question": "How much more total box office gross did the Walt Disney Company have in revenue in 1998 than in 1997?",
        "ground_truth": "SELECT SUM(CASE WHEN `Year` = 1998 THEN Total ELSE 0 END) - SUM(CASE WHEN `Year` = 1997 THEN Total ELSE 0 END) FROM revenue",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT SUM(gross) FROM box_office WHERE company = 'Walt Disney Company' AND year = 1998) - \n    (SELECT SUM(gross) FROM box_office WHERE company = 'Walt Disney Company' AND year = 1997) \nAS difference"
        ],
        "rule_sql": []
    },
    "7352": {
        "db_id": "works_cycles",
        "question": "How many shipments by truck were made?",
        "ground_truth": "SELECT COUNT(*) FROM ShipMethod AS T1 INNER JOIN SalesOrderHeader AS T2 USING (ShipMethodID) WHERE T1.Name = 'XRQ - TRUCK GROUND'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE vehicle_type = 'car';"
        ],
        "rule_sql": []
    },
    "3179": {
        "db_id": "donor",
        "question": "From which state do the 5 biggest donor, who gave the highest cost of optional support, come from? List their donor_acctid and calculate for their average cost of optional support for every donations they make and identtify the project's type of resource to which they gave the hightest optional support.",
        "ground_truth": "SELECT T1.school_state, T2.donor_acctid, AVG(T2.donation_optional_support), T1.resource_type FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid ORDER BY T2.donation_optional_support DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.donor_acctid, d.state, AVG(d.optional_support) as avg_optional_support, p.resource_type\nFROM donors d\nJOIN donations dn ON d.donor_acctid = dn.donor_acctid\nJOIN projects p ON dn.project_id = p.project_id\nWHERE d.donor_acctid IN (\n    SELECT donor_acctid\n    FROM donations\n    GROUP BY donor_acctid\n    ORDER BY SUM(optional_support) DESC\n    LIMIT 5\n)\nGROUP BY d.donor_acctid, d.state\nORDER BY SUM(dn.optional_support) DESC\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "4114": {
        "db_id": "public_review_platform",
        "question": "How many users with a long tip and 2 likes for their tip have a high number of fans?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T2.tip_length = 'Long' AND T2.likes = 2 AND T1.user_fans = 'High'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE tip_length > 100 AND likes = 2 AND fans > 1000;"
        ],
        "rule_sql": []
    },
    "168": {
        "db_id": "book_publishing_company",
        "question": "What is the title with the most ordered quantity in year 1992?",
        "ground_truth": "SELECT T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y', T1.ord_date) = '1992' ORDER BY T1.qty DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, SUM(quantity) as total_quantity \nFROM orders \nWHERE year = 1992 \nGROUP BY title \nORDER BY total_quantity DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5743": {
        "db_id": "language_corpus",
        "question": "What proportion of a pair of words in the Catalan language have been repeated less than 80 times?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN occurrences < 80 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM biwords",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM words) AS proportion FROM words WHERE repeat_count >= 80;"
        ],
        "rule_sql": []
    },
    "3459": {
        "db_id": "video_games",
        "question": "Indicate the publisher who has published the most games of all time.",
        "ground_truth": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) as game_count FROM games GROUP BY publisher ORDER BY game_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7093": {
        "db_id": "works_cycles",
        "question": "What is the job title of the newest employee in department 12?",
        "ground_truth": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.DepartmentID = 12 ORDER BY T2.StartDate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_title FROM employees WHERE department_id = 12 ORDER BY hire_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5197": {
        "db_id": "address",
        "question": "What is the difference in the number of bad alias between Aguada city and Aguadilla city?",
        "ground_truth": "SELECT COUNT(CASE WHEN T2.city = 'Aguada' THEN T1.bad_alias ELSE NULL END) - COUNT(CASE WHEN T2.city = 'Aguadilla' THEN T1.bad_alias ELSE NULL END) AS DIFFERENCE FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM bad_alias WHERE city = 'Aguada') - \n    (SELECT COUNT(*) FROM bad_alias WHERE city = 'Aguadilla') AS difference"
        ],
        "rule_sql": []
    },
    "2608": {
        "db_id": "regional_sales",
        "question": "State the full name of state code \"GA\".",
        "ground_truth": "SELECT T FROM ( SELECT IIF(StateCode = 'GA', State, NULL) AS T FROM Regions ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state_name FROM states WHERE state_code = 'GA';"
        ],
        "rule_sql": []
    },
    "4014": {
        "db_id": "public_review_platform",
        "question": "Find the Yelp user with the average 5-star rating of all reviews who has been yelping the longest.",
        "ground_truth": "SELECT user_id FROM Users WHERE user_average_stars = 5 ORDER BY user_yelping_since_year ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, AVG(stars) as avg_rating, MIN(yelping_since) as longest_yelping\nFROM review\nWHERE stars = 5\nGROUP BY user_id\nORDER BY avg_rating DESC, longest_yelping ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7545": {
        "db_id": "image_and_language",
        "question": "What is the caption for the prediction class id 12?",
        "ground_truth": "SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT caption FROM predictions WHERE class_id = 12;"
        ],
        "rule_sql": []
    },
    "4717": {
        "db_id": "disney",
        "question": "Calculate the percentage of directors whose films grossed over $100 million.",
        "ground_truth": "SELECT CAST(COUNT(DISTINCT CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T3.director ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T3.director) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(DISTINCT director_id) * 100.0 / (SELECT COUNT(*) FROM directors)) AS percentage\nFROM films\nWHERE gross > 100000000;"
        ],
        "rule_sql": []
    },
    "3668": {
        "db_id": "authors",
        "question": "Provide the number of publications published in the journal named 'Academic Medicine' between 2005 and 2010.",
        "ground_truth": "SELECT COUNT(T2.JournalId) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Academic Medicine' AND T2.Year BETWEEN 2005 AND 2010",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM publications WHERE journal_name = 'Academic Medicine' AND year BETWEEN 2005 AND 2010;"
        ],
        "rule_sql": []
    },
    "4316": {
        "db_id": "simpson_episodes",
        "question": "What is the character that won the award in Primetime Emmy 2009?",
        "ground_truth": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award_category = 'Primetime Emmy' AND T1.year = 2009 AND T1.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM awards WHERE award_name = 'Primetime Emmy' AND year = 2009;"
        ],
        "rule_sql": []
    },
    "5412": {
        "db_id": "sales",
        "question": "How many customers have the first name Abigail?",
        "ground_truth": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Abigail'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE first_name = 'Abigail';"
        ],
        "rule_sql": []
    },
    "1009": {
        "db_id": "computer_student",
        "question": "Describe the course level and list of person IDs who taught course ID of 147.",
        "ground_truth": "SELECT T1.courseLevel, T1.course_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 141",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_level, person_id FROM courses WHERE course_id = 147"
        ],
        "rule_sql": []
    },
    "3257": {
        "db_id": "donor",
        "question": "Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations?",
        "ground_truth": "SELECT T1.payment_method FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_state = 'GA' GROUP BY T2.school_state ORDER BY COUNT(T1.payment_method) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT payment_method, COUNT(*) as usage_count \nFROM donations \nWHERE state = 'Georgia' \nGROUP BY payment_method \nORDER BY usage_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6835": {
        "db_id": "retails",
        "question": "List all the addresses for the suppliers of the biggest parts.",
        "ground_truth": "SELECT T2.s_address FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ORDER BY T3.p_size DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.address FROM suppliers s JOIN parts p ON s.supplier_id = p.supplier_id WHERE p.size = (SELECT MAX(size) FROM parts);"
        ],
        "rule_sql": []
    },
    "5247": {
        "db_id": "beer_factory",
        "question": "What is the number of the credit card that Frank-Paul Santangelo used to purchase root beers on 2014/7/7?",
        "ground_truth": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT credit_card_number FROM purchases WHERE customer_name = 'Frank-Paul Santangelo' AND product = 'root beers' AND purchase_date = '2014/07/07';"
        ],
        "rule_sql": []
    },
    "5415": {
        "db_id": "sales",
        "question": "List the full name of the customer who purchased the most quantity of products.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.first_name, c.last_name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nGROUP BY c.customer_id\nORDER BY COUNT(oi.product_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2063": {
        "db_id": "music_tracker",
        "question": "Name the title of the top three releases with the highest number of downloads.",
        "ground_truth": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM releases ORDER BY downloads DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "4131": {
        "db_id": "public_review_platform",
        "question": "What is the closing and opening time of businesses located at Glendale with highest star rating?",
        "ground_truth": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Glendale' ORDER BY T1.stars DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, opening_time, closing_time, stars \nFROM businesses \nWHERE city = 'Glendale' \nORDER BY stars DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2759": {
        "db_id": "european_football_1",
        "question": "In which division was the match between Hibernian, the away team, and Hearts, the home team, played? To which country does this division belong?",
        "ground_truth": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division, country \nFROM matches \nWHERE home_team = 'Hibernian' AND away_team = 'Hearts';"
        ],
        "rule_sql": []
    },
    "7529": {
        "db_id": "image_and_language",
        "question": "On image no. 5, name the attributes that are composed of multiple objects.",
        "ground_truth": "SELECT T2.ATT_CLASS FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 5 GROUP BY T2.ATT_CLASS HAVING COUNT(T2.ATT_CLASS) > 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM images WHERE image_number = 5 AND attributes LIKE '%object%';"
        ],
        "rule_sql": []
    },
    "5029": {
        "db_id": "olympics",
        "question": "Please list all competitors' names who participated in 1936 Summer.",
        "ground_truth": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1936 Summer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM competitors WHERE year = 1936 AND season = 'Summer';"
        ],
        "rule_sql": []
    },
    "657": {
        "db_id": "codebase_comments",
        "question": "How many solutions whose repository's stars are a third more than forks?",
        "ground_truth": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM solutions WHERE stars = forks * 1.33"
        ],
        "rule_sql": []
    },
    "6024": {
        "db_id": "books",
        "question": "What are the names of all the publishers who have published at least 30 books?",
        "ground_truth": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name HAVING COUNT(T2.publisher_name) >= 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM publishers WHERE COUNT(books.id) >= 30;"
        ],
        "rule_sql": []
    },
    "5886": {
        "db_id": "airline",
        "question": "List the description of the airports that have code that ends with number 3?",
        "ground_truth": "SELECT Description FROM Airports WHERE Code LIKE '%3'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM airports WHERE code LIKE '%3';"
        ],
        "rule_sql": []
    },
    "3208": {
        "db_id": "donor",
        "question": "To which city did donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d donate?",
        "ground_truth": "SELECT DISTINCT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM donations WHERE donor_id = '22cbc920c9b5fa08dfb331422f5926b5';"
        ],
        "rule_sql": []
    },
    "6122": {
        "db_id": "food_inspection_2",
        "question": "Among the facilities that had undergone at least one inspection in 2010, how many of them have the most serious food safety issues?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.risk_level = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM facilities f\nJOIN inspections i ON f.facility_id = i.facility_id\nWHERE strftime('%Y', i.inspection_date) = '2010'\nAND i.violation_severity = 'Critical'\nGROUP BY f.facility_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8411": {
        "db_id": "mondial_geo",
        "question": "Of all the countries in which English is spoken, what percentage has English as their only language?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Percentage = 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM countries WHERE language = 'English')) AS percentage\nFROM countries \nWHERE language = 'English' \nAND language_count = 1;"
        ],
        "rule_sql": []
    },
    "5171": {
        "db_id": "address",
        "question": "Provide the zip codes and the alias of Greeneville.",
        "ground_truth": "SELECT T2.zip_code, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Greeneville'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code, alias FROM cities WHERE name = 'Greeneville';"
        ],
        "rule_sql": []
    },
    "574": {
        "db_id": "codebase_comments",
        "question": "What is the github address of the \"nofear_Mara\\Mara.sln\" solution path?",
        "ground_truth": "SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT github_address FROM solutions WHERE solution_path = 'nofear_Mara\\Mara.sln';"
        ],
        "rule_sql": []
    },
    "8135": {
        "db_id": "university",
        "question": "Calculate the difference between the total number of students and the number of international international students in Univeristy of Tokyo from 2011 to 2014.",
        "ground_truth": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year BETWEEN 2011 AND 2014 AND T2.university_name = 'University of Tokyo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM students WHERE university = 'University of Tokyo' AND year BETWEEN 2011 AND 2014) - \n    (SELECT COUNT(*) FROM students WHERE university = 'University of Tokyo' AND year BETWEEN 2011 AND 2014 AND international = 1) \nAS difference;"
        ],
        "rule_sql": []
    },
    "7579": {
        "db_id": "image_and_language",
        "question": "How many images have less than 15 object samples?",
        "ground_truth": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_SAMPLE_ID < 15",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM images WHERE object_samples > 15;"
        ],
        "rule_sql": []
    },
    "6896": {
        "db_id": "retails",
        "question": "Which market segment does the customer with the highest amount of debt belongs to?",
        "ground_truth": "SELECT c_mktsegment FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT segment FROM customers ORDER BY debt DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6682": {
        "db_id": "retails",
        "question": "Please list the phone numbers of all the customers in the household segment and are in Brazil.",
        "ground_truth": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'BRAZIL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM customers WHERE segment = 'household' AND country = 'Brazil';"
        ],
        "rule_sql": []
    },
    "1546": {
        "db_id": "car_retails",
        "question": "Who is the sales agent of the distinct customer who paid the highest amount in the year 2004?",
        "ground_truth": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT e.FirstName, e.LastName\nFROM employees e\nJOIN customers c ON e.EmployeeId = c.SupportRepId\nJOIN invoices i ON c.CustomerId = i.CustomerId\nWHERE strftime('%Y', i.InvoiceDate) = '2004'\nORDER BY i.Total DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1255": {
        "db_id": "law_episode",
        "question": "For how many times was Park Dietz credited?",
        "ground_truth": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM credits WHERE name = 'Park Dietz'"
        ],
        "rule_sql": []
    },
    "2281": {
        "db_id": "movielens",
        "question": "Please list different IDs of movies that are the newest and have gotten the lowest rating.",
        "ground_truth": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_id FROM movies ORDER BY release_year DESC, rating ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7366": {
        "db_id": "works_cycles",
        "question": "What percentage of businesses in the Northwest US have forecasted annual sales of above 300,000?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.SalesQuota > 300000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T2.CountryRegionCode = 'US' AND T2.Name = 'Northwest'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN annual_sales > 300000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM businesses\nWHERE region = 'Northwest US';"
        ],
        "rule_sql": []
    },
    "2540": {
        "db_id": "app_store",
        "question": "What is the total Sentiment polarity score of the most expensive app?",
        "ground_truth": "SELECT SUM(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Price = ( SELECT MAX(Price) FROM playstore )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(Sentiment_Polarity) FROM apps WHERE Price = (SELECT MAX(Price) FROM apps);"
        ],
        "rule_sql": []
    },
    "2639": {
        "db_id": "regional_sales",
        "question": "Please calculate the total number of orders by each city in 2019.",
        "ground_truth": "SELECT COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.`City Name` HAVING COUNT(T1.OrderNumber)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, COUNT(*) as total_orders FROM orders WHERE order_date LIKE '2019%' GROUP BY city"
        ],
        "rule_sql": []
    },
    "9346": {
        "db_id": "movie_3",
        "question": "How many animation film titles are rated for adults only?",
        "ground_truth": "SELECT COUNT(T1.title) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'animation' AND T1.rating = 'NC-17'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE genre = 'Animation' AND rating = 'Adult';"
        ],
        "rule_sql": []
    },
    "6880": {
        "db_id": "retails",
        "question": "What is the total quantity of the part \"hot spring dodger dim light\" ordered in all orders?",
        "ground_truth": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM orders WHERE part_name = 'hot spring dodger dim light';"
        ],
        "rule_sql": []
    },
    "6994": {
        "db_id": "ice_hockey_draft",
        "question": "Indicate the height of all players from team Oshawa Generals in inches.",
        "ground_truth": "SELECT T3.height_in_inch FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'Oshawa Generals'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT height FROM players WHERE team = 'Oshawa Generals';"
        ],
        "rule_sql": []
    },
    "8698": {
        "db_id": "chicago_crime",
        "question": "What is the exact location of the crimes that occurred in the Belmont Cragin community?",
        "ground_truth": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Belmont Cragin' GROUP BY T2.latitude, T2.longitude",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT crime_location FROM crimes WHERE community_area = 'Belmont Cragin';"
        ],
        "rule_sql": []
    },
    "1370": {
        "db_id": "synthea",
        "question": "For how long did Elly Koss's cystitis last?",
        "ground_truth": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Cystitis'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT duration FROM medical_conditions WHERE patient_name = 'Elly Koss' AND condition = 'cystitis';"
        ],
        "rule_sql": []
    },
    "6092": {
        "db_id": "books",
        "question": "Give the author's name of the books that cost 19 dollars and above.",
        "ground_truth": "SELECT DISTINCT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T4.price > 19",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM books WHERE price > 19;"
        ],
        "rule_sql": []
    },
    "1606": {
        "db_id": "car_retails",
        "question": "What profit can the seller Carousel DieCast Legends make from the sale of the product described as \"The perfect holiday or anniversary gift for executives\"?",
        "ground_truth": "SELECT SUM(T2.MSRP - T2.buyPrice) FROM productlines AS T1 INNER JOIN products AS T2 ON T1.productLine = T2.productLine WHERE T2.productVendor = 'Carousel DieCast Legends' AND T1.textDescription LIKE '%perfect holiday or anniversary gift for executives%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS total_profit\nFROM orderdetails od\nJOIN products p ON od.productCode = p.productCode\nJOIN orders o ON od.orderNumber = o.orderNumber\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE p.productDescription = 'The perfect holiday or anniversary gift for executives'\nAND c.salesRepEmployeeNumber IN (\n    SELECT employeeNumber \n    FROM employees \n    WHERE lastName = 'Carousel' AND firstName = 'DieCast Legends'\n)"
        ],
        "rule_sql": []
    },
    "7847": {
        "db_id": "world",
        "question": "How many languages are used in Cyprus?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Name = 'Cyprus' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM languages WHERE country = 'Cyprus';"
        ],
        "rule_sql": []
    },
    "2918": {
        "db_id": "professional_basketball",
        "question": "Which player from Wake Forest college did the most offensive rebounds than defensive rebounds in the all-star? Please mention the full name of the player including the middle name if have any.",
        "ground_truth": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Wake Forest' AND T2.o_rebounds > T2.d_rebounds",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.full_name \nFROM players p\nJOIN college c ON p.college_id = c.college_id\nJOIN player_stats ps ON p.player_id = ps.player_id\nWHERE c.college_name = 'Wake Forest'\nAND ps.offensive_rebounds > ps.defensive_rebounds\nORDER BY ps.offensive_rebounds DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5777": {
        "db_id": "language_corpus",
        "question": "Please list the Catalan words with an occurrence of over 200000.",
        "ground_truth": "SELECT word FROM words WHERE occurrences > 200000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word FROM words WHERE language = 'Catalan' AND occurrence > 200000;"
        ],
        "rule_sql": []
    },
    "3": {
        "db_id": "movie_platform",
        "question": "Name the movie with the most ratings.",
        "ground_truth": "SELECT movie_title FROM movies GROUP BY movie_title ORDER BY COUNT(movie_title) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies ORDER BY rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3559": {
        "db_id": "authors",
        "question": "Write down the name of authors for paper with id from 101 to 105.",
        "ground_truth": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Id > 100 AND T1.Id < 106",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM papers WHERE paper_id BETWEEN 101 AND 105"
        ],
        "rule_sql": []
    },
    "4146": {
        "db_id": "citeseer",
        "question": "List all the paper ID and its class type that cited the word 'word1002'.",
        "ground_truth": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1002'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT paper_id, class_type FROM papers WHERE cited_word = 'word1002';"
        ],
        "rule_sql": []
    },
    "293": {
        "db_id": "retail_complains",
        "question": "List priority 2 complaints by date received.",
        "ground_truth": "SELECT DISTINCT `Complaint ID` FROM callcenterlogs WHERE priority = 2 ORDER BY `Date received` DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM complaints WHERE priority = '2' ORDER BY date_received DESC;"
        ],
        "rule_sql": []
    },
    "2882": {
        "db_id": "professional_basketball",
        "question": "In 1950, how many players whose teams have the losing rate less than 20%?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE CAST(T3.lost AS REAL) * 100 / (T3.lost + T3.won) < 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players p\nJOIN teams t ON p.team_id = t.team_id\nWHERE p.year = 1950 \nAND t.win_rate > 80%;"
        ],
        "rule_sql": []
    },
    "577": {
        "db_id": "codebase_comments",
        "question": "Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it?",
        "ground_truth": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT repo_name, COUNT(*) as solution_paths \nFROM repositories \nWHERE stars BETWEEN 6000 AND 9000 \nORDER BY solution_paths DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3597": {
        "db_id": "authors",
        "question": "What is the journal's short and full names that feature papers on the \"Materials\" topic?",
        "ground_truth": "SELECT T2.ShortName, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword LIKE '%Materials%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT short_name, full_name FROM journals WHERE topic = 'Materials';"
        ],
        "rule_sql": []
    },
    "4360": {
        "db_id": "simpson_episodes",
        "question": "What is the title of episode nominated for WGA Award (TV) with votes greater than 1000?",
        "ground_truth": "SELECT DISTINCT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 1000 AND T1.award_category = 'WGA Award (TV)' AND T1.result = 'Nominee';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes WHERE award = 'WGA Award (TV)' AND votes > 1000;"
        ],
        "rule_sql": []
    },
    "3634": {
        "db_id": "authors",
        "question": "Show the keywords of the paper that was presented at \"International Radar Symposium\" in 2012.",
        "ground_truth": "SELECT T1.Keyword FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Radar Symposium' AND T1.Year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keywords FROM papers WHERE conference = 'International Radar Symposium' AND year = 2012;"
        ],
        "rule_sql": []
    },
    "1513": {
        "db_id": "synthea",
        "question": "How many Italian patients have the care plan code of 304510005?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'italian' AND T1.CODE = '304510005'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE nationality = 'Italian' AND care_plan_code = '304510005';"
        ],
        "rule_sql": []
    },
    "1177": {
        "db_id": "talkingdata",
        "question": "How many females use ZUK Z1 phones in the age group under 23?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'Z1' AND T1.`group` = 'F23-' AND T2.phone_brand = 'ZUK'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male' AND phone_model = 'ZUK Z1' AND age >= 23;"
        ],
        "rule_sql": []
    },
    "7264": {
        "db_id": "works_cycles",
        "question": "What was the first job position that the company needed, and who was hired? Indicate his/her full name.",
        "ground_truth": "SELECT T1.JobTitle, T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.HireDate LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_title, first_name FROM employees ORDER BY hire_date LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8369": {
        "db_id": "mondial_geo",
        "question": "What are the names of the three nations where the longest river that empties into the Atlantic Ocean stretches to?",
        "ground_truth": "SELECT DISTINCT T1.Country FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = ( SELECT Name FROM river WHERE Sea = 'Atlantic Ocean' ORDER BY Length DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT n.name \nFROM nations n\nJOIN rivers r ON n.nation_id = r.nation_id\nWHERE r.ocean = 'Atlantic Ocean'\nORDER BY r.length DESC\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "4782": {
        "db_id": "legislator",
        "question": "List the full names of 10 legislators who only have a Facebook account.",
        "ground_truth": "SELECT T2.official_full_name FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE (T1.youtube IS NULL OR T1.youtube = '') AND (T1.instagram IS NULL OR T1.instagram = '') AND (T1.twitter IS NULL OR T1.twitter = '') AND T1.facebook IS NOT NULL AND T1.facebook != ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators WHERE facebook IS NOT NULL AND twitter IS NULL AND youtube IS NULL AND website IS NULL LIMIT 10;"
        ],
        "rule_sql": []
    },
    "3090": {
        "db_id": "cars",
        "question": "Calculate the swept volume of the $34538.97449 car.",
        "ground_truth": "SELECT T1.displacement / T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 34538.97449",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT swept_volume FROM cars WHERE price = 34538.97449;"
        ],
        "rule_sql": []
    },
    "4250": {
        "db_id": "simpson_episodes",
        "question": "Please list the name of crew that were born before 1970.",
        "ground_truth": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) < '1970';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM crew WHERE birth_year > 1970;"
        ],
        "rule_sql": []
    },
    "8321": {
        "db_id": "mondial_geo",
        "question": "On which island does South Yorkshire situated? State it's longtitude and latitude.",
        "ground_truth": "SELECT DISTINCT T3.Longitude, T3.Latitude FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'South Yorkshire'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT island, longitude, latitude FROM locations WHERE region = 'South Yorkshire';"
        ],
        "rule_sql": []
    },
    "693": {
        "db_id": "trains",
        "question": "Please list the IDs of all the trains with at least one car in a non-regular shape.",
        "ground_truth": "SELECT train_id FROM cars WHERE shape IN ('elipse', 'bucket') GROUP BY train_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT train_id FROM trains WHERE car_shape != 'regular';"
        ],
        "rule_sql": []
    },
    "4312": {
        "db_id": "simpson_episodes",
        "question": "How many people who were born after 1970 are animation executive producer?",
        "ground_truth": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE STRFTIME(T1.birthdate) > '1970' AND T2.role = 'animation executive producer';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE birth_year > 1970 AND role = 'animation executive producer';"
        ],
        "rule_sql": []
    },
    "2352": {
        "db_id": "superstore",
        "question": "What is the total quantity of \"Telescoping Adjustable Floor Lamp\" ordered from central superstores?",
        "ground_truth": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Telescoping Adjustable Floor Lamp'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM orders WHERE product_name = 'Telescoping Adjustable Floor Lamp' AND store_name = 'central superstores'"
        ],
        "rule_sql": []
    },
    "562": {
        "db_id": "movies_4",
        "question": "Which character did Orlando Bloom play in the movie Pirates of the Caribbean: The Curse of the Black Pearl?",
        "ground_truth": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM movies WHERE movie_title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND actor_name = 'Orlando Bloom';"
        ],
        "rule_sql": []
    },
    "2036": {
        "db_id": "soccer_2016",
        "question": "How many matches have 7 points of winning margin?",
        "ground_truth": "SELECT COUNT(Match_Id) FROM Match WHERE win_margin = 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE winning_margin = 7;"
        ],
        "rule_sql": []
    },
    "481": {
        "db_id": "movies_4",
        "question": "List 10 movie titles that were produced in France.",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France' LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE country = 'France' LIMIT 10;"
        ],
        "rule_sql": []
    },
    "2166": {
        "db_id": "world_development_indicators",
        "question": "Name the countries' long name with national accounts base year prior to 1980.",
        "ground_truth": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT long_name FROM countries WHERE national_accounts_base_year < 1980;"
        ],
        "rule_sql": []
    },
    "6425": {
        "db_id": "retail_world",
        "question": "What is the family name of the employee who shipped the order 10521 to CACTU?",
        "ground_truth": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10521 AND T2.CustomerID = 'CACTU'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE employee_id IN (SELECT employee_id FROM orders WHERE order_id = 10521 AND ship_name = 'CACTU')"
        ],
        "rule_sql": []
    },
    "3297": {
        "db_id": "donor",
        "question": "List the poverty level of all the schools that received donations with the zip code \"7079\".",
        "ground_truth": "SELECT DISTINCT T2.poverty_level FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 7079",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT poverty_level FROM schools WHERE zip_code = '7079';"
        ],
        "rule_sql": []
    },
    "993": {
        "db_id": "computer_student",
        "question": "How many students are advised to teach by a professor teaching basic or medium undergraduate courses?",
        "ground_truth": "SELECT COUNT(DISTINCT T4.p_id) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id INNER JOIN advisedBy AS T4 ON T4.p_id = T1.p_id WHERE T1.professor = 1 AND T3.courseLevel = 'Level_300'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students s JOIN professors p ON s.advisor_id = p.professor_id WHERE p.course_level IN ('basic', 'medium')"
        ],
        "rule_sql": []
    },
    "3565": {
        "db_id": "authors",
        "question": "Who are the co-authors for Jei Keon Chae and what is the title of paper written by them?",
        "ground_truth": "SELECT T2.AuthorId, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jei Keon Chae'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a2.author_name, p.title \nFROM authors a1 \nJOIN authors a2 ON a1.paper_id = a2.paper_id \nJOIN papers p ON a1.paper_id = p.paper_id \nWHERE a1.author_name = 'Jei Keon Chae' AND a2.author_name != 'Jei Keon Chae';"
        ],
        "rule_sql": []
    },
    "3623": {
        "db_id": "authors",
        "question": "Which journal was the paper \"Education, democracy and growth\" published on? Give the full name of the journal.",
        "ground_truth": "SELECT T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Education, democracy and growth'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE paper_title = 'Education, democracy and growth';"
        ],
        "rule_sql": []
    },
    "152": {
        "db_id": "movie_platform",
        "question": "How many movies directed by Felipe Cazals was realeased on 1976?",
        "ground_truth": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year = 1976 AND director_name LIKE 'Felipe Cazals'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE director = 'Felipe Cazals' AND year = 1976;"
        ],
        "rule_sql": []
    },
    "3635": {
        "db_id": "authors",
        "question": "How many times more for the papers that were presented at the \"International Conference on Thermoelectrics\" conference than \"International Conference on Wireless Networks, Communications and Mobile Computing\u201c conference?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Conference on Thermoelectrics' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM papers WHERE conference = 'International Conference on Thermoelectrics') / \n    (SELECT COUNT(*) FROM papers WHERE conference = 'International Conference on Wireless Networks, Communications and Mobile Computing') \nAS times_more"
        ],
        "rule_sql": []
    },
    "8899": {
        "db_id": "cookbook",
        "question": "Among the recipes with alcohol content over 10, which recipe takes the longest to prepare?",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.alcohol > 10 ORDER BY T1.prep_min DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT recipe_name, preparation_time FROM recipes WHERE alcohol_content > 10 ORDER BY preparation_time ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5267": {
        "db_id": "beer_factory",
        "question": "What is the name of the brand of the beer with the shortest brewed history?",
        "ground_truth": "SELECT BrandName FROM rootbeerbrand ORDER BY FirstBrewedYear DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand_name FROM beers ORDER BY brewed_history DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5206": {
        "db_id": "address",
        "question": "In cities that do not implement daylight savings, what is the total number of cities?",
        "ground_truth": "SELECT COUNT(T1.area_code) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.daylight_savings = 'No'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE daylight_savings = 'no';"
        ],
        "rule_sql": []
    },
    "7184": {
        "db_id": "works_cycles",
        "question": "What is the name of product purchased with transaction type P?",
        "ground_truth": "SELECT ProductID FROM Product WHERE ProductID IN ( SELECT ProductID FROM TransactionHistory WHERE TransactionType = 'P' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM transactions WHERE transaction_type = 'P';"
        ],
        "rule_sql": []
    },
    "2597": {
        "db_id": "regional_sales",
        "question": "Calculate the percentage of order via in-store channel of customer \"Medline\".",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.`Sales Channel` = 'In-Store' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1._CustomerID) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Medline '",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN channel = 'in-store' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM orders\nWHERE customer_name = 'Medline';"
        ],
        "rule_sql": []
    },
    "3366": {
        "db_id": "video_games",
        "question": "How many role-playing games are there?",
        "ground_truth": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Role-Playing'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE genre = 'Role-Playing'"
        ],
        "rule_sql": []
    },
    "4386": {
        "db_id": "student_loan",
        "question": "Does student348 have a due payment?",
        "ground_truth": "SELECT bool FROM no_payment_due WHERE name = 'student348'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM payments WHERE student_id = 348 AND status = 'paid';"
        ],
        "rule_sql": []
    },
    "3117": {
        "db_id": "cars",
        "question": "List the car's name with a price worth greater than 85% of the average price of all cars.",
        "ground_truth": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price * 100 > ( SELECT AVG(price) * 85 FROM price )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cars WHERE price > (SELECT AVG(price) * 0.85 FROM cars)"
        ],
        "rule_sql": []
    },
    "2896": {
        "db_id": "professional_basketball",
        "question": "What is the percentage of offense rebounds from the total rebounds of the players in year 2000.",
        "ground_truth": "SELECT CAST(SUM(T2.o_rebounds) AS REAL) * 100 / SUM(T2.rebounds) FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SUM(offense_rebounds) / SUM(total_rebounds)) * 100 AS percentage \nFROM player_stats \nWHERE year = 2000;"
        ],
        "rule_sql": []
    },
    "7145": {
        "db_id": "works_cycles",
        "question": "Which sales person made the sale of 1635823.3967 last year? Give the Business Entity ID.",
        "ground_truth": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesLastYear = '1635823.3967'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT BusinessEntityID \nFROM SalesPerson \nWHERE TotalSales = 1635823.3967 \nAND YEAR(SaleDate) = YEAR(GETDATE()) - 1"
        ],
        "rule_sql": []
    },
    "5404": {
        "db_id": "sales",
        "question": "Calculate the revenue produced through sales of HL Road Frame - Red, 56.",
        "ground_truth": "SELECT SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Road Frame - Red, 56'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(UnitPrice * Quantity) AS Revenue FROM Sales WHERE ProductName = 'HL Road Frame - Red, 56'"
        ],
        "rule_sql": []
    },
    "3632": {
        "db_id": "authors",
        "question": "In the year 2012, which conference had the most papers presented? Give the short name of the conference.",
        "ground_truth": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = '2012' GROUP BY T1.ConferenceId ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference FROM papers WHERE year = 2012 GROUP BY conference ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5815": {
        "db_id": "language_corpus",
        "question": "How many Wikipedia pages on Catalan are there with the word \"nombre\" appearing for more than 5 times?",
        "ground_truth": "SELECT COUNT(T2.pid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre' AND T2.occurrences > 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM wikipedia_pages WHERE language = 'Catalan' AND LENGTH(content) - LENGTH(REPLACE(content, 'nombre', '')) > 5;"
        ],
        "rule_sql": []
    },
    "8434": {
        "db_id": "mondial_geo",
        "question": "In which city is the European Bank for Reconstruction and Development's headquarters? Please include the city and province where the headquarters are located in your answer.",
        "ground_truth": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, province FROM banks WHERE name = 'European Bank for Reconstruction and Development' AND headquarters = 'yes';"
        ],
        "rule_sql": []
    },
    "3333": {
        "db_id": "video_games",
        "question": "How many games in the database belong to the genre of sports?",
        "ground_truth": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Sports'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE genre = 'sports';"
        ],
        "rule_sql": []
    },
    "1156": {
        "db_id": "talkingdata",
        "question": "Among the devices on which an event happened on 2016/5/1, how many of them are used by a male user?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.timestamp = '2016-05-01' AND T2.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT device_id) \nFROM events \nWHERE date = '2016/5/1' \nAND user_id IN (SELECT user_id FROM users WHERE gender = 'male')"
        ],
        "rule_sql": []
    },
    "941": {
        "db_id": "cs_semester",
        "question": "Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN s.salary < 50000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_low_salary_advisees\nFROM professors p\nJOIN students s ON p.professor_id = s.advisor_id\nWHERE p.teachability <= 3;"
        ],
        "rule_sql": []
    },
    "4074": {
        "db_id": "public_review_platform",
        "question": "List any five of user ID who became elite user in 2006.",
        "ground_truth": "SELECT user_id FROM Elite WHERE year_id = 2006 LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id FROM elite_years WHERE year = 2006 LIMIT 5;"
        ],
        "rule_sql": []
    },
    "3452": {
        "db_id": "video_games",
        "question": "What genre is the game 2010 FIFA World Cup South Africa?",
        "ground_truth": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM games WHERE title = '2010 FIFA World Cup South Africa';"
        ],
        "rule_sql": []
    },
    "3911": {
        "db_id": "public_review_platform",
        "question": "What is the average number of review received by each business given that the user is an elite?",
        "ground_truth": "SELECT CAST(COUNT(T1.user_id) AS REAL) / COUNT(DISTINCT T1.business_id) FROM Reviews AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(review_count) FROM business WHERE user_id IN (SELECT user_id FROM user WHERE elite = 1);"
        ],
        "rule_sql": []
    },
    "8178": {
        "db_id": "sales_in_weather",
        "question": "How many stores are in weather station 12?",
        "ground_truth": "SELECT SUM(store_nbr) FROM relation WHERE station_nbr = 12",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stores WHERE station_id = 12;"
        ],
        "rule_sql": []
    },
    "906": {
        "db_id": "cs_semester",
        "question": "What is the average GPA of the students with the highest research capability and high salary? List the full names of the students.",
        "ground_truth": "SELECT AVG(T2.gpa), T2.f_name, T2.l_name FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T1.capability = 5 GROUP BY T2.student_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(gpa), full_name FROM students WHERE research_capability = 'highest' AND salary > 100000 GROUP BY full_name;"
        ],
        "rule_sql": []
    },
    "1399": {
        "db_id": "synthea",
        "question": "How many patients have the most prevalent conditions?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) ORDER BY T1.\"PREVALENCE RATE\" DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM patients WHERE condition = (SELECT condition FROM patients GROUP BY condition ORDER BY COUNT(*) DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "2706": {
        "db_id": "regional_sales",
        "question": "Provide order number, warehouse code of customers Elorac, Corp.",
        "ground_truth": "SELECT DISTINCT T1.OrderNumber, T1.WarehouseCode FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Elorac, Corp'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_number, warehouse_code FROM customers WHERE customer_name = 'Elorac, Corp.'"
        ],
        "rule_sql": []
    },
    "2775": {
        "db_id": "european_football_1",
        "question": "Which division had the most games with more than 5 total field goals on 2020/2/22? Give the full name of the division?",
        "ground_truth": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-02-22' AND T1.FTAG + T1.FTHG > 5 ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT division_name \nFROM divisions \nWHERE game_date = '2020/2/22' \nAND total_field_goals > 5 \nGROUP BY division_name \nORDER BY COUNT(*) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8612": {
        "db_id": "chicago_crime",
        "question": "How severe was case JB296775? Give the index code for severity.",
        "ground_truth": "SELECT T2.iucr_no FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.case_number = 'JB296775'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT severity FROM cases WHERE case_id = 'JB296775';"
        ],
        "rule_sql": []
    },
    "8102": {
        "db_id": "university",
        "question": "What was the score for University of Florida in \"N and S\" in 2014?",
        "ground_truth": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Florida' AND T2.year = 2014 AND T1.criteria_name = 'N and S'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT score FROM games WHERE team = 'University of Florida' AND event = 'N and S' AND year = 2014;"
        ],
        "rule_sql": []
    },
    "5460": {
        "db_id": "sales",
        "question": "Which product has the highest total amount of quantity sold? Calculate its overall total price.",
        "ground_truth": "SELECT T1.Name, SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID, T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, SUM(quantity) as total_quantity, SUM(price) as total_price\nFROM sales\nGROUP BY product_name\nORDER BY total_quantity DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2473": {
        "db_id": "shooting",
        "question": "What is the percentage of subject who are female used the Vehicle as weapon?",
        "ground_truth": "SELECT CAST(SUM(T1.subject_weapon = 'Vehicle') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN subjects T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM subjects)) AS percentage\nFROM subjects\nWHERE gender = 'Female' AND weapon = 'Vehicle';"
        ],
        "rule_sql": []
    },
    "4052": {
        "db_id": "public_review_platform",
        "question": "What is the average number of reviews written for active businesses that operate not more than 30 hours a week?",
        "ground_truth": "SELECT AVG(T3.user_id) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Reviews AS T3 ON T1.business_id = T3.business_id WHERE T1.active = 'true' GROUP BY T2.closing_time - T2.opening_time HAVING SUM(T2.closing_time - T2.opening_time) < 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(review_count) FROM businesses WHERE active = 1 AND hours_per_week <= 30;"
        ],
        "rule_sql": []
    },
    "4032": {
        "db_id": "public_review_platform",
        "question": "Among the businesses which have attribute of beer_and_wine, how many business located in Peoria?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Peoria' AND T1.attribute_value = 'beer_and_wine'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE attribute = 'beer_and_wine' AND city = 'Phoenix';"
        ],
        "rule_sql": []
    },
    "3440": {
        "db_id": "video_games",
        "question": "Which publisher has published the most games in the 'Puzzle' genre?",
        "ground_truth": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T1.publisher_name ORDER BY COUNT(T3.id) DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher, COUNT(*) as game_count FROM games WHERE genre = 'Puzzle' GROUP BY publisher ORDER BY game_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3997": {
        "db_id": "public_review_platform",
        "question": "State the locations of all Pet Services business.",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Pet Services'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM businesses WHERE category = 'Pet Services';"
        ],
        "rule_sql": []
    },
    "4078": {
        "db_id": "public_review_platform",
        "question": "Describe ID and active status of the business under category of \"Diagnostic Imaging\".",
        "ground_truth": "SELECT T2.business_id, T3.active FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Diagnostic Imaging'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, active FROM businesses WHERE category = 'Diagnostic Imaging';"
        ],
        "rule_sql": []
    },
    "9130": {
        "db_id": "movie_3",
        "question": "Among the films that the customer RUTH MARTINEZ has rented, how many of them are released in 2006?",
        "ground_truth": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.release_year = 2006 AND T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ'\nAND f.release_year = 2006"
        ],
        "rule_sql": []
    },
    "620": {
        "db_id": "codebase_comments",
        "question": "For the method which got the tokenized name as 't jadwal entity get single mpic', what is the path time for its solution?",
        "ground_truth": "SELECT DISTINCT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 't jadwal entity get single mpic'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT path_time FROM methods WHERE tokenized_name = 't jadwal entity get single mpic';"
        ],
        "rule_sql": []
    },
    "7329": {
        "db_id": "works_cycles",
        "question": "Name all products that started selling in 2013. State its respective vendor's name.",
        "ground_truth": "SELECT T1.Name, T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE STRFTIME('%Y', T1.SellStartDate) = '2013'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.product_name, v.vendor_name \nFROM products p \nJOIN vendors v ON p.vendor_id = v.vendor_id \nWHERE p.start_date LIKE '2012%';"
        ],
        "rule_sql": []
    },
    "1092": {
        "db_id": "talkingdata",
        "question": "Please list the time when event no.2 happened on a vivo device.",
        "ground_truth": "SELECT T1.timestamp FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.event_id = '2'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT time FROM events WHERE event_id = 2 AND device = 'vivo';"
        ],
        "rule_sql": []
    },
    "9259": {
        "db_id": "movie_3",
        "question": "Find and list the full name of customers who rented more family movies than Sci-Fi movies.",
        "ground_truth": "SELECT DISTINCT IIF(SUM(IIF(T5.name = 'Family', 1, 0)) - SUM(IIF(T5.name = 'Sci-Fi', 1, 0)) > 0, T1.first_name, 0) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film_category AS T4 ON T4.film_id = T3.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id GROUP BY T1.customer_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.category = 'Family'\nGROUP BY c.customer_id\nHAVING COUNT(*) > (SELECT COUNT(*) \n                  FROM rental r2 \n                  JOIN inventory i2 ON r2.inventory_id = i2.inventory_id \n                  JOIN film f2 ON i2.film_id = f2.film_id \n                  WHERE r2.customer_id = c.customer_id AND f2.category = 'Sci-Fi');"
        ],
        "rule_sql": []
    },
    "5052": {
        "db_id": "olympics",
        "question": "How many athletes took part in the Olympic games held in Barcelona?",
        "ground_truth": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Barcelona'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE city = 'Barcelona';"
        ],
        "rule_sql": []
    },
    "9345": {
        "db_id": "movie_3",
        "question": "How many Italian film titles were special featured with deleted scenes?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN `language` AS T2 ON T1.language_id = T2.language_id WHERE T2.`name` = 'Italian' AND T1.special_features = 'deleted scenes'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'Italian') AND special_features LIKE '%Deleted Scenes%';"
        ],
        "rule_sql": []
    },
    "4245": {
        "db_id": "simpson_episodes",
        "question": "Who produced The simpson 20s: Season 20?",
        "ground_truth": "SELECT DISTINCT person FROM Credit WHERE role = 'producer';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT producer FROM shows WHERE title = 'The simpson 20s: Season 20';"
        ],
        "rule_sql": []
    },
    "2375": {
        "db_id": "superstore",
        "question": "How much is the total quantity of items from the East region shipped on 3/25/2015? Name the products.",
        "ground_truth": "SELECT SUM(T1.Quantity), T2.`Product Name` FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Ship Date` = '2015-03-25' AND T2.Region = 'East'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, SUM(quantity) as total_quantity\nFROM orders o\nJOIN products p ON o.product_id = p.product_id\nWHERE o.region = 'East' AND o.ship_date = '2015-03-25'\nGROUP BY product_name\nORDER BY total_quantity DESC;"
        ],
        "rule_sql": []
    },
    "7439": {
        "db_id": "works_cycles",
        "question": "What is the price for the product with the id \"912\"?",
        "ground_truth": "SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = 912",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE id = 912;"
        ],
        "rule_sql": []
    },
    "1866": {
        "db_id": "soccer_2016",
        "question": "Calculate the win rate of the team \"Chennai Super Kings\".",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T2.Team_Name = 'Chennai Super Kings' OR T3.Team_Name = 'Chennai Super Kings'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS total_matches, \n       SUM(CASE WHEN winner = 'Chennai Super Kings' THEN 1 ELSE 0 END) AS wins,\n       SUM(CASE WHEN winner = 'Chennai Super Kings' THEN 1 ELSE 0 END) / COUNT(*) AS win_rate\nFROM matches\nWHERE team1 = 'Chennai Super Kings' OR team2 = 'Chennai Super Kings';"
        ],
        "rule_sql": []
    },
    "3134": {
        "db_id": "cars",
        "question": "What is the price of Chevrolet Vega 2300?",
        "ground_truth": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet vega 2300'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM cars WHERE make = 'Chevrolet' AND model = 'Vega 2300';"
        ],
        "rule_sql": []
    },
    "8988": {
        "db_id": "human_resources",
        "question": "Describe the employees' full name, positions, located city and office phone number within Colorado state.",
        "ground_truth": "SELECT T1.firstname, T1.lastname, T3.positiontitle, T2.locationcity, T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.state = 'CO'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, position, city, phone FROM employees WHERE state = 'Colorado';"
        ],
        "rule_sql": []
    },
    "1366": {
        "db_id": "synthea",
        "question": "Why did Elly Koss need to take Acetaminophen?",
        "ground_truth": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT reason FROM medications WHERE patient_name = 'Elly Koss' AND medication_name = 'Acetaminophen';"
        ],
        "rule_sql": []
    },
    "4959": {
        "db_id": "olympics",
        "question": "What is the name of the competitor who has won the most medals?",
        "ground_truth": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.id != 4 GROUP BY T1.full_name ORDER BY COUNT(T4.id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM competitors ORDER BY medals DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1256": {
        "db_id": "law_episode",
        "question": "Please list the titles of all the episodes in which Park Dietz was credited.",
        "ground_truth": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes WHERE credited_person = 'Park Dietz';"
        ],
        "rule_sql": []
    },
    "3363": {
        "db_id": "video_games",
        "question": "What is the average number of sales in Japan?",
        "ground_truth": "SELECT AVG(T2.num_sales) * 100000 AS avg_japan FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(sales) FROM sales_data WHERE country = 'Japan';"
        ],
        "rule_sql": []
    },
    "6549": {
        "db_id": "retail_world",
        "question": "What were the products supplied by the company in Spain?",
        "ground_truth": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Spain'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE country = 'Spain';"
        ],
        "rule_sql": []
    },
    "538": {
        "db_id": "movies_4",
        "question": "Provide the ID and ISO code of Belgium.",
        "ground_truth": "SELECT COUNTry_id, COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Belgium'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id, iso_code FROM countries WHERE name = 'France';"
        ],
        "rule_sql": []
    },
    "5669": {
        "db_id": "shipping",
        "question": "Among the shipments delivered by Maria Craft, how many shipments were delivered in 2017?",
        "ground_truth": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Maria' AND T2.last_name = 'Craft' AND STRFTIME('%Y', T1.ship_date) = '2017'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE delivered_by = 'Maria Craft' AND delivery_date LIKE '2016%';"
        ],
        "rule_sql": []
    },
    "3590": {
        "db_id": "authors",
        "question": "What is the full name of the conference where paper number 5 was published?",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Id = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference_name FROM papers WHERE paper_id = 5;"
        ],
        "rule_sql": []
    },
    "4748": {
        "db_id": "legislator",
        "question": "Current legislator Roger F. Wicker has not been a representative for how many terms?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE name = 'Roger F. Wicker' AND position != 'representative';"
        ],
        "rule_sql": []
    },
    "8728": {
        "db_id": "chicago_crime",
        "question": "What are the communities that are grouped together on the central side?",
        "ground_truth": "SELECT community_area_name FROM Community_Area WHERE side = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM communities WHERE side = 'central' GROUP BY name;"
        ],
        "rule_sql": []
    },
    "5845": {
        "db_id": "airline",
        "question": "How many planes of Spirit Air Lines took off on 2018/8/7?",
        "ground_truth": "SELECT COUNT(T2.Code) FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/7' AND T2.Description = 'Spirit Air Lines: NK'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE airline = 'Spirit Air Lines' AND date = '2018/8/7';"
        ],
        "rule_sql": []
    },
    "5201": {
        "db_id": "address",
        "question": "Name the country with the largest number of households in a residential area.",
        "ground_truth": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.county ORDER BY T2.households DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM households ORDER BY residential_area DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7097": {
        "db_id": "works_cycles",
        "question": "Calculate the total quantity of purchased product that has been prepared by employee number 257 and is in pending shipment status.",
        "ground_truth": "SELECT SUM(T2.OrderQty) FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID WHERE T1.Status = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity) FROM purchases WHERE employee_id = 257 AND status = 'pending shipment';"
        ],
        "rule_sql": []
    },
    "5973": {
        "db_id": "books",
        "question": "Among the books published in 2004, list the name of the publisher of books with number of pages greater than 70% of the average number of pages of all books.",
        "ground_truth": "SELECT T1.title, T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE STRFTIME('%Y', T1.publication_date) = '2004' AND T1.num_pages * 100 > ( SELECT AVG(num_pages) FROM book ) * 70",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher FROM books WHERE year = 2004 AND pages > (SELECT AVG(pages) * 0.7 FROM books)"
        ],
        "rule_sql": []
    },
    "7126": {
        "db_id": "works_cycles",
        "question": "How many accounts are in Bothell as opposed to Kenmore? What is the name of the State that comprises these two cities?",
        "ground_truth": "SELECT SUM(IIF(T1.city = 'Bothell', 1, 0)) - SUM(IIF(T1.city = 'Kenmore', 1, 0)) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS account_count, city, state_name \nFROM accounts \nWHERE city IN ('Bothell', 'Kenmore') \nGROUP BY city, state_name"
        ],
        "rule_sql": []
    },
    "8777": {
        "db_id": "food_inspection",
        "question": "Among the restaurants being inspected in 2016, how many of them are in San Francisco?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE inspection_year = 2016 AND city = 'San Francisco';"
        ],
        "rule_sql": []
    },
    "4931": {
        "db_id": "olympics",
        "question": "For Peter Kohnke, show the name of his/her region.",
        "ground_truth": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Peter Kohnke'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region_name FROM regions WHERE name = 'Peter Kohnke';"
        ],
        "rule_sql": []
    },
    "5005": {
        "db_id": "olympics",
        "question": "How many people have won the gold medal of the event \"Rowing Women's Coxed Eights\"?",
        "ground_truth": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T2.event_name LIKE 'Rowing Women%s Coxed Eights' AND T3.medal_name = 'Gold'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE event = 'Rowing Women\\'s Coxed Eights' AND medal = 'Gold';"
        ],
        "rule_sql": []
    },
    "7634": {
        "db_id": "hockey",
        "question": "Name the goalies who are good at left hand and also has become a coach after retirement. Name all teams he had played before.",
        "ground_truth": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.playerID IS NOT NULL AND T2.coachID IS NOT NULL AND T2.shootCatch = 'L' AND T2.pos = 'G'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT g.name, t.team_name \nFROM goalies g \nJOIN teams t ON g.team_id = t.team_id \nWHERE g.hand = 'left' \nAND g.is_coach = 1 \nORDER BY g.name;"
        ],
        "rule_sql": []
    },
    "5605": {
        "db_id": "shipping",
        "question": "What is the average number of shipments done by the Kenworth trucks?",
        "ground_truth": "SELECT CAST(COUNT(T2.ship_id) AS REAL) / COUNT(DISTINCT T1.truck_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Kenworth'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(shipment_count) FROM trucks WHERE truck_brand = 'Ford';"
        ],
        "rule_sql": []
    },
    "6901": {
        "db_id": "retails",
        "question": "How many urgent orders did Clerk#000000001 handle in 1997?",
        "ground_truth": "SELECT COUNT(o_orderkey) FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1997' AND o_clerk = 'Clerk#000000001' AND o_orderpriority = '1-URGENT'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE o_clerk = 'Clerk#000000001' AND o_orderdate LIKE '1997%' AND o_orderpriority = 'URGENT';"
        ],
        "rule_sql": []
    },
    "2620": {
        "db_id": "regional_sales",
        "question": "State the customer name of orders which has shipped date in 7/8/2018.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.ShipDate = '7/8/18' THEN T1.`Customer Names` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM orders WHERE shipped_date = '7/8/2018';"
        ],
        "rule_sql": []
    },
    "3999": {
        "db_id": "public_review_platform",
        "question": "How many closed businesses that have more than 10 attributes?",
        "ground_truth": "SELECT COUNT(*) FROM Business WHERE business_id IN ( SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'false' GROUP BY T1.business_id HAVING COUNT(DISTINCT T2.attribute_id) > 10 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE status = 'closed' AND attributes > 10;"
        ],
        "rule_sql": []
    },
    "630": {
        "db_id": "codebase_comments",
        "question": "What is the total processed time of all solutions from the repository with the most forks?",
        "ground_truth": "SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(s.processed_time) \nFROM solutions s\nJOIN repositories r ON s.repository_id = r.id\nWHERE r.forks = (SELECT MAX(forks) FROM repositories)"
        ],
        "rule_sql": []
    },
    "301": {
        "db_id": "retail_complains",
        "question": "How many clients under the age of 35 gave Eagle National Mortgage 1 star?",
        "ground_truth": "SELECT COUNT(T2.age) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle National Mortgage' AND T1.Stars = 1 AND T2.age < 35",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM clients WHERE age < 35 AND rating = 1 AND company = 'Eagle National Mortgage';"
        ],
        "rule_sql": []
    },
    "4837": {
        "db_id": "legislator",
        "question": "What is the party of the legislator named Susan M. Collins?",
        "ground_truth": "SELECT T2.party FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Susan M. Collins' GROUP BY T2.party",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party FROM legislators WHERE name = 'Susan Collins';"
        ],
        "rule_sql": []
    },
    "7307": {
        "db_id": "works_cycles",
        "question": "Please list the top 3 house-manufactured products with the highest average rating.",
        "ground_truth": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY SUM(T1.Rating) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, AVG(rating) as avg_rating FROM products WHERE manufacturer = 'house' GROUP BY product_name ORDER BY avg_rating DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "7635": {
        "db_id": "hockey",
        "question": "List all the deceased goalies and the teams he had played whose birth country was in Canada.",
        "ground_truth": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.birthCountry = 'Canada' AND T2.deathYear IS NOT NULL AND T2.pos = 'G'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT g.name, t.team_name \nFROM goalies g \nJOIN teams t ON g.team_id = t.team_id \nWHERE g.birth_country = 'Canada' AND g.status = 'alive';"
        ],
        "rule_sql": []
    },
    "3026": {
        "db_id": "shakespeare",
        "question": "Calculate average scene per act in Antony and Cleopatra.",
        "ground_truth": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Antony and Cleopatra'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(scene_count) FROM (SELECT act, COUNT(*) as scene_count FROM scenes WHERE play = 'Antony and Cleopatra' GROUP BY act);"
        ],
        "rule_sql": []
    },
    "2556": {
        "db_id": "app_store",
        "question": "What is the percentage of application with 4.7 rating having more positives sentiment than negative sentiment?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN ( SELECT COUNT(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE NULL END) - COUNT(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE NULL END) FROM user_reviews GROUP BY App ) > 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 4.7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN rating = 4.7 AND positive_sentiment > negative_sentiment THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN rating = 4.7 THEN 1 END)) AS percentage\nFROM applications;"
        ],
        "rule_sql": []
    },
    "4983": {
        "db_id": "olympics",
        "question": "How many athletes from Malaysia have won a medal?",
        "ground_truth": "SELECT COUNT(T3.person_id) FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Malaysia' AND T1.id != 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE country = 'Malaysia' AND medal IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "2673": {
        "db_id": "regional_sales",
        "question": "Calculate the average monthly order and percentage of warehouse \"WARE-NMK1003\" in 2019. Among them, mention number of orders for floor lamps.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) / 12 , CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OrderNumber), COUNT(CASE WHEN T1.`Product Name` = 'Floor Lamps' AND T2.WarehouseCode = 'WARE-NMK1003' THEN T2.`Order Quantity` ELSE NULL END) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID WHERE T2.OrderDate LIKE '%/%/19'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    AVG(monthly_orders) as avg_monthly_orders,\n    (COUNT(CASE WHEN product_type = 'floor lamp' THEN 1 END) * 100.0 / COUNT(*)) as floor_lamp_percentage\nFROM orders\nWHERE warehouse_id = 'WARE-NMK1003' \nAND order_date BETWEEN '2019-01-01' AND '2019-12-31';"
        ],
        "rule_sql": []
    },
    "9226": {
        "db_id": "movie_3",
        "question": "Provide the full names and emails of customers whose payments were greater than 70% of the average.",
        "ground_truth": "SELECT DISTINCT T2.first_name, T2.last_name, T2.email FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id WHERE T1.amount > ( SELECT AVG(amount) FROM payment ) * 0.7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, email FROM customers WHERE payment > (SELECT AVG(payment) * 0.7 FROM payments);"
        ],
        "rule_sql": []
    },
    "2419": {
        "db_id": "superstore",
        "question": "State the highest profit made by Anna Chung's orders in the Central Superstore.",
        "ground_truth": "SELECT MAX(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Anna Chung'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(profit) FROM orders WHERE customer_name = 'Anna Chung' AND store_name = 'Central Superstore';"
        ],
        "rule_sql": []
    },
    "5062": {
        "db_id": "olympics",
        "question": "Provide the name of competitors from Greece.",
        "ground_truth": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Greece'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM competitors WHERE country = 'Greece';"
        ],
        "rule_sql": []
    },
    "9337": {
        "db_id": "movie_3",
        "question": "Calculate the percentage of movie titles with a screen length of more than 120 minutes that have a category of horror movies.",
        "ground_truth": "SELECT CAST(SUM(IIF(T3.`name` = 'Horror', 1, 0)) * 100 / COUNT(T1.film_id) AS REAL) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.length > 120",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN m.length > 120 AND c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    movie m\nJOIN \n    movie_category mc ON m.movie_id = mc.movie_id\nJOIN \n    category c ON mc.category_id = c.category_id\nWHERE \n    m.length > 120"
        ],
        "rule_sql": []
    },
    "1105": {
        "db_id": "talkingdata",
        "question": "How many models does the VIVO phone brand released?",
        "ground_truth": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM phones WHERE brand = 'VIVO';"
        ],
        "rule_sql": []
    },
    "1567": {
        "db_id": "car_retails",
        "question": "What are the total payments of customers with no credit limit in 2003?",
        "ground_truth": "SELECT SUM(amount) FROM payments WHERE STRFTIME('%Y', paymentDate) = '2003' AND customerNumber IN ( SELECT customerNumber FROM customers WHERE creditLimit = 0 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM payments WHERE creditLimit IS NULL AND YEAR(paymentDate) = 2003"
        ],
        "rule_sql": []
    },
    "177": {
        "db_id": "book_publishing_company",
        "question": "Name the store with the highest quantity in sales? What is the least quantity title from the store's sale?",
        "ground_truth": "SELECT T3.stor_id, T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T3.stor_id = T1.stor_id WHERE T3.stor_id = ( SELECT stor_id FROM sales GROUP BY stor_id ORDER BY SUM(qty) DESC LIMIT 1 ) GROUP BY T3.stor_id, T2.title ORDER BY SUM(T1.qty) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.store_name, MIN(s.quantity) as least_quantity_title\nFROM sales s\nWHERE s.quantity = (SELECT MAX(quantity) FROM sales)\nGROUP BY s.store_name\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1573": {
        "db_id": "car_retails",
        "question": "State the email of those who are staff of Murphy Diane whose number is 1002 and living in San Francisco",
        "ground_truth": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1002 AND T2.city = 'San Francisco'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM staff WHERE name = 'Murphy Diane' AND staff_id = 1002 AND city = 'San Francisco';"
        ],
        "rule_sql": []
    },
    "1826": {
        "db_id": "soccer_2016",
        "question": "How many umpires are from South Africa?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN Umpire AS T2 ON T1.Country_ID = T2.Umpire_Country",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM umpires WHERE country = 'South Africa';"
        ],
        "rule_sql": []
    },
    "6223": {
        "db_id": "food_inspection_2",
        "question": "Among the list of employees, what is the total number of supervisors?",
        "ground_truth": "SELECT COUNT(employee_id) FROM employee WHERE title = 'Supervisor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE job_title = 'Manager';"
        ],
        "rule_sql": []
    },
    "9083": {
        "db_id": "bike_share_1",
        "question": "Is there any intercity trip were made during 2014? If yes, list out the city name for the start and end station.",
        "ground_truth": "SELECT T1.start_station_name, T1.end_station_name FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_date LIKE '%/%/2014%' AND T1.start_station_name != T1.end_station_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_city, end_city FROM trips WHERE year = 2014 AND trip_type = 'intercity';"
        ],
        "rule_sql": []
    },
    "832": {
        "db_id": "social_media",
        "question": "Calculate the total likes collected by tweets in `ru` posted by male users.",
        "ground_truth": "SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(likes) FROM tweets WHERE language = 'ru' AND user_id IN (SELECT user_id FROM users WHERE gender = 'male')"
        ],
        "rule_sql": []
    },
    "1548": {
        "db_id": "car_retails",
        "question": "How many employees are there in Sydney?",
        "ground_truth": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE city = 'Melbourne';"
        ],
        "rule_sql": []
    },
    "1257": {
        "db_id": "law_episode",
        "question": "Was Anthony Azzara's role in episode tt0629204 displayed in the credits at the end of the episode?",
        "ground_truth": "SELECT T1.credited FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Anthony Azzara' AND T1.episode_id = 'tt0629204'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT credits_displayed FROM episodes WHERE episode_id = 'tt0629204' AND actor_name = 'Anthony Azzara';"
        ],
        "rule_sql": []
    },
    "8086": {
        "db_id": "university",
        "question": "Among the universities with a score in teaching of over 90 in 2011, what is the percentage of those in the United States of America?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T4.country_name = 'United States of America' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN country = 'United States of America' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM universities\nWHERE teaching_score > 90 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "1136": {
        "db_id": "talkingdata",
        "question": "How many more devices are there of the brand vivo than of the brand LG?",
        "ground_truth": "SELECT SUM(IIF(phone_brand = 'vivo', 1, 0)) - SUM(IIF(phone_brand = 'LG', 1, 0)) AS num FROM phone_brand_device_model2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM devices WHERE brand = 'vivo' - COUNT(*) FROM devices WHERE brand = 'LG';"
        ],
        "rule_sql": []
    },
    "1600": {
        "db_id": "car_retails",
        "question": "How many customers with a canceled shipment have a credit limit greater than 115,000?",
        "ground_truth": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers c JOIN shipments s ON c.customer_id = s.customer_id WHERE s.status = 'canceled' AND c.credit_limit > 115000"
        ],
        "rule_sql": []
    },
    "7739": {
        "db_id": "hockey",
        "question": "How long has the NHL player been playing during the year when he recorded the least number of times being on the ice when a goal is scored for the team versus against the team? Indicate his full name.",
        "ground_truth": "SELECT DISTINCT T3.firstNHL - T1.year, T3.nameGiven , T3.firstName, T3.lastName FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID INNER JOIN Master AS T3 ON T1.playerID = T3.playerID GROUP BY T3.firstName, T3.lastName, T3.nameGiven, T3.firstNHL - T1.year, T3.firstName, T3.lastName ORDER BY SUM(T1.`+/-`) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.full_name, MIN(p.years_played) \nFROM players p\nJOIN player_stats ps ON p.player_id = ps.player_id\nWHERE ps.goals_for < ps.goals_against\nGROUP BY p.player_id\nORDER BY ps.goals_for - ps.goals_against ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1387": {
        "db_id": "synthea",
        "question": "What is the id of the patient who has the longest allergy period?",
        "ground_truth": "SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY CASE WHEN SUBSTR(STOP, -2, 1) != '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000 END - CASE WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900 ELSE SUBSTR(START, LENGTH(START) - 1) + 2000 END LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT patient_id FROM allergies ORDER BY allergy_end_date - allergy_start_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7057": {
        "db_id": "works_cycles",
        "question": "What is the highest pay rate of the employees who are exempt from collective bargaining?",
        "ground_truth": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SalariedFlag = 1 ORDER BY T1.Rate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(pay_rate) FROM employees WHERE collective_bargaining = 'exempt';"
        ],
        "rule_sql": []
    },
    "4855": {
        "db_id": "legislator",
        "question": "State all the district that Benjamin Contee has served before.",
        "ground_truth": "SELECT T2.district FROM historical AS T1 INNER JOIN `historical-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T1.last_name = 'Contee'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district FROM representatives WHERE name = 'Benjamin Contee';"
        ],
        "rule_sql": []
    },
    "3726": {
        "db_id": "college_completion",
        "question": "Tell the number of 4-year private not-for-profit schools in the home state of \"Brevard Community College\".",
        "ground_truth": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T2.level = '4-year' AND T2.control = 'Private not-for-profit' AND T1.chronname = 'Brevard Community College'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM schools WHERE years = 4 AND control = 'private not-for-profit' AND state = (SELECT home_state FROM schools WHERE name = 'Brevard Community College');"
        ],
        "rule_sql": []
    },
    "754": {
        "db_id": "movie",
        "question": "Show the No.3 character name in the credit list of the movie \"G.I. Joe: The Rise of Cobra\".",
        "ground_truth": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T2.creditOrder = '3'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM credits WHERE movie_title = 'G.I. Joe: The Rise of Cobra' ORDER BY credit_order LIMIT 1 OFFSET 3;"
        ],
        "rule_sql": []
    },
    "7842": {
        "db_id": "world",
        "question": "Give the head of the state of the country with the lowest percentage use of English as their language.",
        "ground_truth": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T2.Percentage LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT head_of_state FROM country WHERE language = 'English' ORDER BY percentage LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1902": {
        "db_id": "soccer_2016",
        "question": "In how many venues did team 2 win the toss and lose the match?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Team_2 = T1.Match_Winner THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Team_1 = T1.Toss_Winner",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT venue) \nFROM matches \nWHERE toss_winner = 2 AND winner != 2;"
        ],
        "rule_sql": []
    },
    "5542": {
        "db_id": "menu",
        "question": "How many menus sponsored by Krogs Fiske Restaurant were created in April 2015?",
        "ground_truth": "SELECT COUNT(*) FROM Menu WHERE date LIKE '2015-04%' AND sponsor = 'Krogs Fiskerestaurant'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menus WHERE sponsor = 'Krogs Fiske Restaurant' AND created_date LIKE '2015-04%';"
        ],
        "rule_sql": []
    },
    "8257": {
        "db_id": "mondial_geo",
        "question": "How many organizations are founded in countries with a population of under 1000000?",
        "ground_truth": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM organizations WHERE country_population < 1000000;"
        ],
        "rule_sql": []
    },
    "8489": {
        "db_id": "mondial_geo",
        "question": "When did the United States of America attained it's Independence?",
        "ground_truth": "SELECT T1.Independence FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'United States'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT independence_date FROM countries WHERE name = 'United States of America';"
        ],
        "rule_sql": []
    },
    "6731": {
        "db_id": "retails",
        "question": "How many customers are there in India?",
        "ground_truth": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDIA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE country = 'India';"
        ],
        "rule_sql": []
    },
    "3841": {
        "db_id": "public_review_platform",
        "question": "How many Yelp_Businesses in Scottsdale have received positive comments in the Elitestar rating?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Businesses WHERE city = 'Scottsdale' AND rating > 3;"
        ],
        "rule_sql": []
    },
    "6152": {
        "db_id": "food_inspection_2",
        "question": "What is the precise location of the establishment with the highest number of failed inspections?",
        "ground_truth": "SELECT T1.latitude, T1.longitude FROM establishment AS T1 INNER JOIN ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no ORDER BY COUNT(results) DESC LIMIT 1 ) AS T2 ON T1.license_no = T2.license_no",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM inspections WHERE failed_count = (SELECT MAX(failed_count) FROM inspections);"
        ],
        "rule_sql": []
    },
    "2136": {
        "db_id": "world_development_indicators",
        "question": "What percentage of countries in South Asia have the Life expectancy at birth, female (years) greater than 50?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'South Asia' AND T2.IndicatorName = 'Life expectancy at birth, female (years)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN \"Life expectancy at birth, female (years)\" > 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM countries\nWHERE region = 'South Asia';"
        ],
        "rule_sql": []
    },
    "5011": {
        "db_id": "olympics",
        "question": "State the number of athletes in the 1984 Summer Olympic Games who were more than 50 years old.",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age > 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE year = 1984 AND age > 50;"
        ],
        "rule_sql": []
    },
    "5691": {
        "db_id": "language_corpus",
        "question": "Which word has the most occurrences within the same page of wikipedia about Catalan language?",
        "ground_truth": "SELECT T1.word FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = ( SELECT MAX(occurrences) FROM pages_words )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word, COUNT(*) as occurrences FROM wikipedia_pages WHERE page_title = 'Catalan language' GROUP BY word ORDER BY occurrences DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4892": {
        "db_id": "legislator",
        "question": "For how many terms have the oldest current legislator served?",
        "ground_truth": "SELECT COUNT(T2.bioguide) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = ( SELECT MIN(birthday_bio) FROM current )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE age = (SELECT MAX(age) FROM legislators) AND current = 1;"
        ],
        "rule_sql": []
    },
    "400": {
        "db_id": "retail_complains",
        "question": "What are the issues of the complains of male clients and products from age 25 and below?",
        "ground_truth": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM complains WHERE gender = 'male' AND age <= 25;"
        ],
        "rule_sql": []
    },
    "451": {
        "db_id": "movies_4",
        "question": "What is the title of Jamie Foxx's most recent movie?",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jamie Foxx' ORDER BY T1.release_date DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE actor = 'Jamie Foxx' ORDER BY release_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6107": {
        "db_id": "books",
        "question": "In books published by Ace Book, what is the percentage of English books published?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Ace Book'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN language = 'English' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_english\nFROM books\nWHERE publisher = 'Ace Book';"
        ],
        "rule_sql": []
    },
    "8944": {
        "db_id": "human_resources",
        "question": "Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?",
        "ground_truth": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE (T1.lastname = 'Adams' AND T1.firstname = 'Sandy') OR (T1.lastname = 'Rodriguez' AND T1.firstname = 'Jose') ORDER BY T2.educationrequired DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT e.name, j.education_level \nFROM employees e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE e.name IN ('Jose Rodriguez', 'Sandy Adams')\nORDER BY j.education_level DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7357": {
        "db_id": "works_cycles",
        "question": "Please list the top 5 products with the most orders.",
        "ground_truth": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.Name ORDER BY SUM(T2.OrderQty) DESC LIMIT 0, 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, COUNT(*) as order_count FROM orders GROUP BY product_name ORDER BY order_count DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "2682": {
        "db_id": "regional_sales",
        "question": "In which regions are the stores that have shipped products through the WARE-UHY1004 warehouse?",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.WarehouseCode = 'WARE-UHY1004' THEN T1.Region END AS T FROM Regions T1 INNER JOIN `Store Locations` T2 ON T2.StateCode = T1.StateCode INNER JOIN `Sales Orders` T3 ON T3._StoreID = T2.StoreID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT region FROM stores WHERE warehouse_id = 'WARE-UHY1004';"
        ],
        "rule_sql": []
    },
    "7263": {
        "db_id": "works_cycles",
        "question": "Jill ranked which medium-quality class product as the highest, and how long will it take the company to manufacture such a product?",
        "ground_truth": "SELECT T1.DaysToManufacture FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = 5 AND T1.Class = 'M' ORDER BY T2.Rating LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.product_name, m.manufacturing_time \nFROM products p\nJOIN manufacturing m ON p.product_id = m.product_id\nWHERE p.quality = 'medium'\nORDER BY p.rating DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1618": {
        "db_id": "car_retails",
        "question": "For the productline where the product No.S18_2949 was produced, what's the text description for that product line?",
        "ground_truth": "SELECT t1.textDescription FROM productlines AS t1 INNER JOIN products AS t2 ON t1.productLine = t2.productLine WHERE t2.productCode = 'S18_2949'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT productLine FROM products WHERE productCode = 'S18_2949';"
        ],
        "rule_sql": []
    },
    "7254": {
        "db_id": "works_cycles",
        "question": "To which group does the department with the least amount of workers belong to? Indicate the name of the department as well.",
        "ground_truth": "SELECT T2.GroupName FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID GROUP BY T2.GroupName ORDER BY COUNT(T1.BusinessEntityID) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT d.department_name, g.group_name \nFROM departments d \nJOIN groups g ON d.group_id = g.group_id \nWHERE d.worker_count = (SELECT MIN(worker_count) FROM departments) \nORDER BY d.worker_count ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3985": {
        "db_id": "public_review_platform",
        "question": "Among highest quality user of under ID 100, mention compliment type which got highest compliment number and user's followers.",
        "ground_truth": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT compliment_type, followers \nFROM users \nWHERE user_id < 100 \nORDER BY compliment_hot DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3735": {
        "db_id": "college_completion",
        "question": "In Alaska with school count of 1 from year 2011 to 2013, how many of the students are white?",
        "ground_truth": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count = 1 AND T2.year BETWEEN 2011 AND 2013 AND T2.race = 'W' AND T1.state = 'Alaska'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE state = 'Alaska' AND year BETWEEN 2011 AND 2013 AND school_count = 1 AND race = 'white';"
        ],
        "rule_sql": []
    },
    "25": {
        "db_id": "movie_platform",
        "question": "Which year was the third movie directed by Quentin Tarantino released? Indicate the user ids of the user who gave it a rating score of 4.",
        "ground_truth": "SELECT T2.movie_release_year, T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_id = ( SELECT movie_id FROM movies WHERE director_name = 'Quentin Tarantino' ORDER BY movie_release_year ASC LIMIT 2, 1 ) AND T1.rating_score = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year FROM movies \nWHERE director = 'Quentin Tarantino' \nORDER BY year ASC \nLIMIT 1 OFFSET 2;"
        ],
        "rule_sql": []
    },
    "3265": {
        "db_id": "donor",
        "question": "Calculate the sum of all the total amount donated to the essay project titled 'Lets Share Ideas' which were paid through paypal and indicate the city and poverty level.",
        "ground_truth": "SELECT SUM(T3.donation_total), school_city, poverty_level FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'paypal'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, poverty_level, SUM(total_amount) \nFROM donations d\nJOIN projects p ON d.project_id = p.project_id\nJOIN payment_methods pm ON d.payment_method_id = pm.payment_method_id\nJOIN cities c ON d.city_id = c.city_id\nWHERE p.title = 'Lets Share Ideas' \nAND pm.method_name = 'paypal'\nGROUP BY city, poverty_level;"
        ],
        "rule_sql": []
    },
    "8856": {
        "db_id": "craftbeer",
        "question": "Which distinct state makes beer that has the least amount of bitterness?",
        "ground_truth": "SELECT DISTINCT T2.state, T1.ibu FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.ibu IS NOT NULL AND T1.ibu = ( SELECT MIN(ibu) FROM beers )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT DISTINCT state FROM beers ORDER BY ibu ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2602": {
        "db_id": "regional_sales",
        "question": "Compare the number of orders between \"Platters\" and \"Serveware\" products.",
        "ground_truth": "SELECT SUM(CASE WHEN T2.`Product Name` = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.`Product Name` = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    'Platters' AS product_category,\n    COUNT(*) AS order_count\nFROM orders o\nJOIN products p ON o.product_id = p.product_id\nWHERE p.category = 'Platters'\nUNION ALL\nSELECT \n    'Serveware' AS product_category,\n    COUNT(*) AS order_count\nFROM orders o\nJOIN products p ON o.product_id = p.product_id\nWHERE p.category = 'Serveware';"
        ],
        "rule_sql": []
    },
    "1428": {
        "db_id": "synthea",
        "question": "Describe the care plans received by the patient with secondary malignant neoplasm of the colon.",
        "ground_truth": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Secondary malignant neoplasm of colon'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM care_plans WHERE patient_id IN (SELECT patient_id FROM diagnoses WHERE diagnosis = 'secondary malignant neoplasm of the colon');"
        ],
        "rule_sql": []
    },
    "8989": {
        "db_id": "human_resources",
        "question": "Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.",
        "ground_truth": "SELECT SUM(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / 12 AS avg, T1.firstname, T1.lastname , T2.positiontitle, T3.locationcity FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    e.name,\n    e.position_title,\n    l.city,\n    AVG(e.salary) as monthly_avg_salary\nFROM employees e\nJOIN locations l ON e.location_id = l.id\nWHERE e.salary = (SELECT MAX(salary) FROM employees)\nGROUP BY e.name, e.position_title, l.city;"
        ],
        "rule_sql": []
    },
    "8233": {
        "db_id": "mondial_geo",
        "question": "Among countries with more than 400,000 GDP, state its capital and population.",
        "ground_truth": "SELECT T1.Capital, T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 400000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT capital, population FROM countries WHERE GDP > 400000"
        ],
        "rule_sql": []
    },
    "6294": {
        "db_id": "coinmarketcap",
        "question": "How many times was Bytecoin traded in June 2013?",
        "ground_truth": "SELECT COUNT(T2.coin_id) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bytecoin' AND STRFTIME('%Y-%m', T2.date) = '2013-06'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trades WHERE currency = 'Bytecoin' AND year = 2013 AND month = 6;"
        ],
        "rule_sql": []
    },
    "887": {
        "db_id": "cs_semester",
        "question": "What is the percentage of students who get a \"B\" in the course \"Computer Network\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.grade = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Computer Network'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM students) AS percentage FROM grades WHERE course = 'Computer Network' AND grade = 'B';"
        ],
        "rule_sql": []
    },
    "3335": {
        "db_id": "video_games",
        "question": "State the name of the publisher with the most games.",
        "ground_truth": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher_name FROM games GROUP BY publisher_name ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2921": {
        "db_id": "professional_basketball",
        "question": "Player from which team has the highest point per minute in NBA from 1991 to 2000?",
        "ground_truth": "SELECT tmID FROM players_teams WHERE year BETWEEN 1991 AND 2000 ORDER BY CAST(points AS REAL) / minutes DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team, player, MAX(points / minutes) as ppg FROM nba_stats WHERE year BETWEEN 1991 AND 2000 GROUP BY team, player ORDER BY ppg DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1921": {
        "db_id": "soccer_2016",
        "question": "How many games were not won by runs?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Win_Type != 'runs' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE runs IS NULL;"
        ],
        "rule_sql": []
    },
    "240": {
        "db_id": "retail_complains",
        "question": "On which day was the most verbose complaint received?",
        "ground_truth": "SELECT `Date received` FROM callcenterlogs WHERE ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date, COUNT(*) as complaint_count FROM complaints GROUP BY date ORDER BY complaint_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5328": {
        "db_id": "beer_factory",
        "question": "What is the brand name of the root beer that gained a 1-star rating from customer ID 331115 while saying, \"Yuk, more like licorice soda\"?",
        "ground_truth": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.CustomerID = 331115 AND T2.Review = 'Yuk, more like licorice soda.' AND T2.StarRating = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand_name FROM root_beers WHERE customer_id = 331115 AND rating = 1 AND comment = 'Yuk, more like licorice soda';"
        ],
        "rule_sql": []
    },
    "3057": {
        "db_id": "shakespeare",
        "question": "What is the character and work ID of the text \"Fear not thou, man, thou shalt lose nothing here.\"?",
        "ground_truth": "SELECT T2.character_id, T1.work_id FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'Fear not thou, man, thou shalt lose nothing here.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character, work_id FROM texts WHERE text_content = 'Fear not thou, man, thou shalt lose nothing here.'"
        ],
        "rule_sql": []
    },
    "3545": {
        "db_id": "authors",
        "question": "Write down the title and affiliation of the preprinted paper written by \"Roger J.Marshal\".",
        "ground_truth": "SELECT T1.Title, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Roger J. Marshall' AND T1.ConferenceID = 0 AND T1.JournalID = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, affiliation FROM papers WHERE author = 'Roger J.Marshal'"
        ],
        "rule_sql": []
    },
    "5664": {
        "db_id": "shipping",
        "question": "What is the ship ID of shipments shipped to the city with the largest area?",
        "ground_truth": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ship_id FROM shipments WHERE city = (SELECT city FROM cities ORDER BY area DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "7983": {
        "db_id": "music_platform_2",
        "question": "Among the reviews for the podcast \"Please Excuse My Dead Aunt Sally\", how many of them are made in the year 2019?",
        "ground_truth": "SELECT COUNT(T2.created_at) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.created_at LIKE '2019-%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE podcast_title = 'Please Excuse My Dead Aunt Sally' AND review_date LIKE '2019%';"
        ],
        "rule_sql": []
    },
    "7586": {
        "db_id": "image_and_language",
        "question": "What are the width and height of the bounding box of the object with \"keyboard\" as their object class and (5, 647) as their coordinate?",
        "ground_truth": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard' AND T1.X = 5 AND T1.Y = 647",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT width, height FROM objects WHERE object_class = 'keyboard' AND coordinate = '(5, 647)';"
        ],
        "rule_sql": []
    },
    "2108": {
        "db_id": "world_development_indicators",
        "question": "What is the average value of Adjusted net enrolment rate, primary, both sexes (%) indicator in Algeria from 1975 to 1980?",
        "ground_truth": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(value) FROM education_data WHERE country = 'Algeria' AND year BETWEEN 1975 AND 1980 AND indicator = 'Adjusted net enrolment rate, primary, both sexes (%)';"
        ],
        "rule_sql": []
    },
    "3878": {
        "db_id": "public_review_platform",
        "question": "What is the average Elitestar rating for a Yelp_Business that closes at 12PM on Sundays?",
        "ground_truth": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T1.business_id) AS \"average stars\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(Elitestar) FROM Yelp_Business WHERE Sunday_Close = '12PM';"
        ],
        "rule_sql": []
    },
    "4820": {
        "db_id": "legislator",
        "question": "What is the first name of the legislator whose address at 1005 Longworth HOB; Washington DC 20515-1408?",
        "ground_truth": "SELECT T1.first_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '1005 Longworth HOB Washington DC 20515-1408' GROUP BY T1.first_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM legislators WHERE address = '1005 Longworth HOB; Washington DC 20515-1408' ORDER BY last_name LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5532": {
        "db_id": "menu",
        "question": "Give me the name and menu price of dishes that were free.",
        "ground_truth": "SELECT T2.name, T1.price FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.lowest_price = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, menu_price FROM dishes WHERE menu_price = 0;"
        ],
        "rule_sql": []
    },
    "82": {
        "db_id": "movie_platform",
        "question": "What's the percentage of the users who have rated \"1\" on the movie \"When Will I Be Loved\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.rating_score = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users)) AS percentage\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.title = 'When Will I Be Loved' AND r.rating = 1;"
        ],
        "rule_sql": []
    },
    "35": {
        "db_id": "movie_platform",
        "question": "How many users, who were a paying subscriber when they rated the movie, gave the movie that was released in 1924 and directed by Erich von Stroheim a rating score of 5?",
        "ground_truth": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM users u\nJOIN ratings r ON u.user_id = r.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.release_year = 1924 \nAND m.director = 'Erich von Stroheim'\nAND r.rating_score = 5\nAND u.subscription_status = 'paying';"
        ],
        "rule_sql": []
    },
    "6165": {
        "db_id": "food_inspection_2",
        "question": "List the names of employees involved in an inspection with the Display of Inspection Report Summary category.",
        "ground_truth": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'Display of Inspection Report Summary'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT e.name FROM employees e JOIN inspections i ON e.id = i.employee_id WHERE i.category = 'Display of Inspection Report Summary'"
        ],
        "rule_sql": []
    },
    "1619": {
        "db_id": "car_retails",
        "question": "If Dragon Souveniers, Ltd. aren't satisfied with their order and want to send a complain e-mail, which e-mail address should they send to?",
        "ground_truth": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Dragon Souveniers, Ltd.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM customers WHERE company_name = 'Dragon Souveniers, Ltd.'"
        ],
        "rule_sql": []
    },
    "96": {
        "db_id": "movie_platform",
        "question": "How many users in Mubi give the movie \"White Night Wedding for 5\"?",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T2.movie_title = 'White Night Wedding'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE movie_title = 'White Night Wedding for 5' AND location = 'Mubi';"
        ],
        "rule_sql": []
    },
    "290": {
        "db_id": "retail_complains",
        "question": "How many clients have an email account other than gmail.com?",
        "ground_truth": "SELECT COUNT(email) FROM client WHERE email NOT LIKE '%@gmail.com'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM clients WHERE email NOT LIKE '%gmail.com%';"
        ],
        "rule_sql": []
    },
    "8156": {
        "db_id": "sales_in_weather",
        "question": "What is the percentage of the units of item no.5 sold among all units of items sold in store no.3 on the day with the highest max temperature in 2012?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SUM(CASE WHEN item_no = 5 THEN units_sold ELSE 0 END) * 100.0 / SUM(units_sold)) AS percentage\nFROM sales\nWHERE store_no = 3\nAND date IN (\n    SELECT date \n    FROM weather \n    WHERE YEAR(date) = 2012 \n    ORDER BY max_temperature DESC \n    LIMIT 1\n);"
        ],
        "rule_sql": []
    },
    "2665": {
        "db_id": "regional_sales",
        "question": "Find the store ID with more orders between \"Aurora\" and \"Babylon\" city.",
        "ground_truth": "SELECT T2.StoreID FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T2.`City Name` = 'Aurora (Township)' OR T2.`City Name` = 'Babylon (Town)' GROUP BY T2.StoreID ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT store_id FROM stores WHERE city IN ('Aurora', 'Babylon') ORDER BY store_id LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1834": {
        "db_id": "soccer_2016",
        "question": "Who is the player who won the first ever \"man of the match\" award?",
        "ground_truth": "SELECT Player_Name FROM Player WHERE Player_Id = ( SELECT Man_of_the_Match FROM `Match` ORDER BY match_date ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM matches WHERE man_of_the_match = 'first' ORDER BY match_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3641": {
        "db_id": "authors",
        "question": "How many of the papers are preprinted?",
        "ground_truth": "SELECT COUNT(Id) FROM Paper WHERE ConferenceId = 0 AND JournalId = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE preprint = 'yes';"
        ],
        "rule_sql": []
    },
    "7832": {
        "db_id": "world",
        "question": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.",
        "ground_truth": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM languages WHERE country IN ('Lithuania', 'Latvia', 'Estonia') AND percentage > 80;"
        ],
        "rule_sql": []
    },
    "8581": {
        "db_id": "software_company",
        "question": "Among the geographic ID which has 33.658K of inhabitants, describe the education, occupation and age of female widow.",
        "ground_truth": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION, T1.age FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 33.658 AND T1.SEX = 'Female' AND T1.MARITAL_STATUS = 'Widowed'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT education, occupation, age FROM population WHERE gender = 'female' AND marital_status = 'widow' AND inhabitants = 33658"
        ],
        "rule_sql": []
    },
    "9194": {
        "db_id": "movie_3",
        "question": "List the names of the customers from India.",
        "ground_truth": "SELECT T4.first_name, T4.last_name FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id WHERE T1.country = 'India'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM customers WHERE country = 'China';"
        ],
        "rule_sql": []
    },
    "8595": {
        "db_id": "chicago_crime",
        "question": "Please list the precise location coordinates of all the crimes in Central Chicago.",
        "ground_truth": "SELECT T2.latitude, T2.longitude FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM crimes WHERE location = 'Central Chicago';"
        ],
        "rule_sql": []
    },
    "8202": {
        "db_id": "sales_in_weather",
        "question": "How many stations were able to sell item 5 on January 2014?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.station_nbr) AS number FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE SUBSTR(`date`, 1, 7) = '2014-01' AND item_nbr = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE item_id = 5 AND date LIKE '2014-01%';"
        ],
        "rule_sql": []
    },
    "5579": {
        "db_id": "shipping",
        "question": "What is the total number of pounds being transported for S K L Enterprises Inc?",
        "ground_truth": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(weight) FROM shipments WHERE company = 'S K L Enterprises Inc';"
        ],
        "rule_sql": []
    },
    "2431": {
        "db_id": "superstore",
        "question": "Which product did Phillina Ober buy?",
        "ground_truth": "SELECT DISTINCT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Phillina Ober'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM customers WHERE customer_name = 'Phillina Ober';"
        ],
        "rule_sql": []
    },
    "5615": {
        "db_id": "shipping",
        "question": "Among the shipments for Downey, how many shipments were shipped to California in 2016?",
        "ground_truth": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.city_name = 'Downey' AND STRFTIME('%Y', T1.ship_date) = '2016' AND T3.state = 'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE city = 'Downey' AND state = 'California' AND YEAR(shipped_date) = 2016;"
        ],
        "rule_sql": []
    },
    "6802": {
        "db_id": "retails",
        "question": "Which ship mode has more \"deliver in person\" instructions, rail or mail?",
        "ground_truth": "SELECT IIF(SUM(IIF(l_shipmode = 'RAIL', 1, 0)) - SUM(IIF(l_shipmode = 'MAIL', 1, 0)), 'RAIL', 'MAIL') AS result FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ship_mode, COUNT(*) FROM orders WHERE ship_mode = 'deliver in person' AND (ship_mode = 'rail' OR ship_mode = 'mail') GROUP BY ship_mode;"
        ],
        "rule_sql": []
    },
    "5635": {
        "db_id": "shipping",
        "question": "What is the first name of the driver who transported shipment id 1028?",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = 1028",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM drivers WHERE shipment_id = 1028;"
        ],
        "rule_sql": []
    },
    "6027": {
        "db_id": "books",
        "question": "Indicate the ISBN13 of all the books that have less than 140 pages and more than 135.",
        "ground_truth": "SELECT isbn13 FROM book WHERE num_pages < 140 AND num_pages > 135",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ISBN13 FROM books WHERE pages < 140 AND pages > 135;"
        ],
        "rule_sql": []
    },
    "1112": {
        "db_id": "talkingdata",
        "question": "What is the brand of the youngest user's device?",
        "ground_truth": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age ) )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand FROM users ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "199": {
        "db_id": "book_publishing_company",
        "question": "What is the publisher's information of New Moon Books?",
        "ground_truth": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM publishers WHERE name = 'New Moon Books';"
        ],
        "rule_sql": []
    },
    "7535": {
        "db_id": "image_and_language",
        "question": "Describe the objects, their attributes, and the relationships that comprise the scene on image no. 1 within the bounding box, represented as (388, 369, 48, 128).",
        "ground_truth": "SELECT DISTINCT T2.OBJ_CLASS, T4.ATT_CLASS, T6.PRED_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID INNER JOIN IMG_REL AS T5 ON T1.IMG_ID = T5.IMG_ID INNER JOIN PRED_CLASSES AS T6 ON T5.PRED_CLASS_ID = T6.PRED_CLASS_ID WHERE T1.IMG_ID = 1 AND T1.X = 388 AND T1.Y = 369 AND T1.W = 48 AND T1.H = 128",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM images WHERE image_id = 1 AND x_coordinate = 388 AND y_coordinate = 369 AND width = 48 AND height = 128;"
        ],
        "rule_sql": []
    },
    "8797": {
        "db_id": "food_inspection",
        "question": "How many unscheduled routine inspections did \"Soma Restaurant And Bar\" have?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Soma Restaurant And Bar' AND T1.type = 'Routine - Unscheduled'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM inspections WHERE restaurant_name = 'Soma Restaurant And Bar' AND inspection_type = 'Routine' AND scheduled = 0;"
        ],
        "rule_sql": []
    },
    "5302": {
        "db_id": "beer_factory",
        "question": "Among the male customers in Sacramento, what percentage bought Dominion root beer in 2013?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T4.BrandName = 'Dominion' THEN T1.CustomerID ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.City = 'Sacramento' AND T1.Gender = 'M' AND T2.TransactionDate LIKE '2014%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT CASE WHEN p.product_name = 'Dominion root beer' THEN c.customer_id END) * 100.0 / COUNT(DISTINCT c.customer_id)) AS percentage\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE c.gender = 'Male' \n    AND c.city = 'Sacramento'\n    AND strftime('%Y', s.sale_date) = '2013';"
        ],
        "rule_sql": []
    },
    "1022": {
        "db_id": "computer_student",
        "question": "Who are the top 5 professors who teaches the highest number of professional or master/undergraduate courses?",
        "ground_truth": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.p_id) DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, COUNT(c.course_id) as course_count\nFROM professors p\nJOIN courses c ON p.professor_id = c.professor_id\nWHERE c.course_level IN ('professional', 'master', 'undergraduate')\nGROUP BY p.professor_id\nORDER BY course_count DESC\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "2178": {
        "db_id": "world_development_indicators",
        "question": "Among the low income countries, which country has the lowest fertility rate?",
        "ground_truth": "SELECT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY T2.Value LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM countries WHERE income_level = 'Low' ORDER BY fertility_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "696": {
        "db_id": "trains",
        "question": "Among the trains that run in the east direction, how many of them have at least one car in a non-regular shape?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.shape IN ('bucket', 'elipse') THEN 1 ELSE 0 end)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM trains t\nJOIN cars c ON t.train_id = c.train_id\nWHERE t.direction = 'east'\nAND c.shape != 'regular';"
        ],
        "rule_sql": []
    },
    "2226": {
        "db_id": "world_development_indicators",
        "question": "What is the lending category of the country with a cereal production of 6140000 metric tons for the year 1966?",
        "ground_truth": "SELECT T1.LendingCategory FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Cereal production (metric tons)' AND T2.Value = 6140000 AND T2.Year = 1966",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT lending_category FROM countries WHERE cereal_production = 6140000 AND year = 1966;"
        ],
        "rule_sql": []
    },
    "342": {
        "db_id": "retail_complains",
        "question": "Calculate the percentage of male clients from Indianapolis City.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM client WHERE city = 'Indianapolis'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM clients WHERE city = 'Indianapolis') AS percentage_male FROM clients WHERE gender = 'male';"
        ],
        "rule_sql": []
    },
    "114": {
        "db_id": "movie_platform",
        "question": "How many movies did the director of the highest movie popularity make?",
        "ground_truth": "SELECT COUNT(movie_id) FROM movies WHERE director_id = ( SELECT director_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM movies \nWHERE director = (SELECT director FROM movies ORDER BY popularity DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "2426": {
        "db_id": "superstore",
        "question": "Among the orders with sales value of no less than 5,000 in west superstore, how many were bought by the customers in California?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.`Order ID`) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` INNER JOIN people AS T3 ON T3.`Customer ID` = T1.`Customer ID` WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE o.region = 'West' \nAND o.sales >= 5000\nAND c.state = 'California';"
        ],
        "rule_sql": []
    },
    "8335": {
        "db_id": "mondial_geo",
        "question": "How many percent of the mountains on Andes which are non-volcanic?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN type != 'volcano' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM mountain WHERE Mountains = 'Andes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM mountains WHERE range = 'Andes')) AS percentage\nFROM mountains \nWHERE range = 'Andes' AND volcanic = 'no';"
        ],
        "rule_sql": []
    },
    "3903": {
        "db_id": "public_review_platform",
        "question": "How many businesses in Phoenix, Arizona is attributed to waiter service?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city LIKE 'Phoenix' AND T3.attribute_name LIKE 'waiter_service' AND T2.attribute_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Phoenix' AND state = 'Arizona' AND service_type = 'waiter service';"
        ],
        "rule_sql": []
    },
    "9356": {
        "db_id": "movie_3",
        "question": "List down all film titles starred by Jane Jackman.",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T3.first_name = 'JANE' AND T3.last_name = 'JACKMAN'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE actor = 'Jane Jackman';"
        ],
        "rule_sql": []
    },
    "6995": {
        "db_id": "ice_hockey_draft",
        "question": "Who is the oldest player that participated in OHL league in the 1997 - 2000 season?",
        "ground_truth": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL' AND T2.SEASON = '1999-2000' ORDER BY T1.birthdate LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, MAX(age) FROM players WHERE league = 'OHL' AND season BETWEEN 1997 AND 2000;"
        ],
        "rule_sql": []
    },
    "6688": {
        "db_id": "retails",
        "question": "Among all the customers, what is the percentage of the customer's nation being Germany?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM customer) AS percentage FROM customer WHERE nation = 'Germany';"
        ],
        "rule_sql": []
    },
    "8199": {
        "db_id": "sales_in_weather",
        "question": "How many days did the sun rise before 5 AM?",
        "ground_truth": "SELECT COUNT(DISTINCT `date`) AS days FROM weather WHERE sunrise < time('05:00:00')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sunrise_data WHERE sunrise_time < '05:00:00';"
        ],
        "rule_sql": []
    },
    "3415": {
        "db_id": "video_games",
        "question": "What are the top 2 platforms with the most sales in North America?",
        "ground_truth": "SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'North America' ORDER BY T2.num_sales DESC LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform, SUM(sales) as total_sales FROM game_sales WHERE region = 'North America' GROUP BY platform ORDER BY total_sales DESC LIMIT 2;"
        ],
        "rule_sql": []
    },
    "75": {
        "db_id": "movie_platform",
        "question": "How many users have rated the most popular movie?",
        "ground_truth": "SELECT COUNT(rating_id) FROM ratings WHERE movie_id = ( SELECT movie_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE movie_id = (SELECT movie_id FROM ratings GROUP BY movie_id ORDER BY COUNT(*) DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "989": {
        "db_id": "computer_student",
        "question": "Please list the IDs of all the faculty employees who teaches a basic or medium undergraduate course.",
        "ground_truth": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT faculty_id FROM faculty WHERE course_level IN ('basic', 'medium') AND course_type = 'undergraduate';"
        ],
        "rule_sql": []
    },
    "4783": {
        "db_id": "legislator",
        "question": "Write the full names of junior ranked Republicans.",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T2.state_rank = 'junior' GROUP BY T1.official_full_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM politicians WHERE party = 'Republican' AND rank = 'Junior';"
        ],
        "rule_sql": []
    },
    "4903": {
        "db_id": "legislator",
        "question": "How many of the legislators are female?",
        "ground_truth": "SELECT COUNT(gender_bio) FROM current WHERE gender_bio = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE gender = 'male';"
        ],
        "rule_sql": []
    },
    "1471": {
        "db_id": "synthea",
        "question": "What is the social security number and address of the patient who encountered viral sinusitis symptoms on 6/13/2008?",
        "ground_truth": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT social_security_number, address FROM patients WHERE diagnosis = 'viral sinusitis' AND encounter_date = '2008-06-13';"
        ],
        "rule_sql": []
    },
    "7645": {
        "db_id": "hockey",
        "question": "List all living goalies who have greater than 50% wins among all games played. State their last name and first name.",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NOT NULL GROUP BY T1.playerID HAVING CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) > 0.5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, first_name \nFROM goalies \nWHERE wins / (wins + losses) > 0.5 \nAND status = 'living';"
        ],
        "rule_sql": []
    },
    "7068": {
        "db_id": "works_cycles",
        "question": "Please give the additional contact information of the oldest employee with the jod position of sales person.",
        "ground_truth": "SELECT T2.AdditionalContactInfo FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE PersonType = 'SP' ORDER BY T1.BirthDate ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE job_position = 'sales person' ORDER BY age DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6170": {
        "db_id": "food_inspection_2",
        "question": "What are the inspection description and inspector's comments in the inspection ID 164795?",
        "ground_truth": "SELECT T1.Description, T2.inspector_comment FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 44247",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inspection_description, inspector_comments FROM inspections WHERE inspection_id = '164795';"
        ],
        "rule_sql": []
    },
    "869": {
        "db_id": "cs_semester",
        "question": "Which professor advised Willie Rechert to work as a research assistant? Please give his or her full name.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Willie' AND T3.l_name = 'Rechert'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT professor_name FROM professors WHERE student_name = 'Willie Rechert' AND position = 'research assistant';"
        ],
        "rule_sql": []
    },
    "9098": {
        "db_id": "bike_share_1",
        "question": "How many stations were installed on the date of 8/16/2013 and how many users on those stations are classified as a customer?",
        "ground_truth": "SELECT COUNT(T1.name) , SUM(CASE WHEN T2.subscription_type = 'Customer' THEN 1 ELSE 0 END) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T1.installation_date = '8/16/2013' AND T2.subscription_type = 'Customer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT s.station_id) AS station_count, COUNT(u.user_id) AS customer_count\nFROM stations s\nLEFT JOIN users u ON s.station_id = u.station_id\nWHERE s.installation_date = '2013-08-16' AND u.user_type = 'customer';"
        ],
        "rule_sql": []
    },
    "309": {
        "db_id": "retail_complains",
        "question": "What is the full address of the customers who, having received a timely response from the company, have dispute about that response?",
        "ground_truth": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'Yes' AND T2.`Consumer disputed?` = 'Yes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.full_address \nFROM customers c\nJOIN responses r ON c.customer_id = r.customer_id\nWHERE r.response_timely = 'Yes' \nAND r.dispute = 'Yes';"
        ],
        "rule_sql": []
    },
    "4952": {
        "db_id": "olympics",
        "question": "How many athletes competed in the 1992 Summer Olympics?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE year = 1992 AND season = 'Summer';"
        ],
        "rule_sql": []
    },
    "991": {
        "db_id": "computer_student",
        "question": "Please list the levels of the all courses taught by teacher no.79.",
        "ground_truth": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 79",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT course_name FROM courses WHERE teacher_id = 79"
        ],
        "rule_sql": []
    },
    "3205": {
        "db_id": "donor",
        "question": "What is the most requested item under the resource type \"Supplies\" for projects whose main subject area is Literacy & Language?",
        "ground_truth": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' AND T1.project_resource_type = 'Supplies' ORDER BY T1.item_quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT item_name, COUNT(*) as request_count\nFROM resource_requests\nWHERE resource_type = 'Supplies'\nAND project_id IN (\n    SELECT project_id \n    FROM projects \n    WHERE main_subject_area = 'Literacy & Language'\n)\nGROUP BY item_name\nORDER BY request_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4833": {
        "db_id": "legislator",
        "question": "Give the full name of the legislators with an independent party.",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM legislators WHERE party = 'Independent'"
        ],
        "rule_sql": []
    },
    "9180": {
        "db_id": "movie_3",
        "question": "How many rentals were returned on 5/27/2005?",
        "ground_truth": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rental WHERE return_date = '2005-05-27';"
        ],
        "rule_sql": []
    },
    "7040": {
        "db_id": "works_cycles",
        "question": "How frequently do the employee with the least number of sick leave hours get paid?",
        "ground_truth": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SickLeaveHours ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS payment_frequency FROM employee_payments WHERE employee_id = (SELECT employee_id FROM employees ORDER BY sick_leave_hours ASC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "7112": {
        "db_id": "works_cycles",
        "question": "Please list any 3 product numbers with the lowest standard cost.",
        "ground_truth": "SELECT ProductID FROM ProductCostHistory ORDER BY StandardCost ASC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_number FROM products ORDER BY standard_cost ASC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "1266": {
        "db_id": "law_episode",
        "question": "Who was nominated for award no.313? Give the full name.",
        "ground_truth": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award_id = 313",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name FROM awards WHERE award_id = 313;"
        ],
        "rule_sql": []
    },
    "97": {
        "db_id": "movie_platform",
        "question": "What's the cover image of the user who created the movie list 'Georgia related films'?",
        "ground_truth": "SELECT T1.user_cover_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Georgia related films'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cover_image FROM users WHERE user_id = (SELECT user_id FROM movie_lists WHERE list_name = 'Georgia related films')"
        ],
        "rule_sql": []
    },
    "5642": {
        "db_id": "shipping",
        "question": "Give the phone of drivers who transported shipment weight of greater than 20000 pounds.",
        "ground_truth": "SELECT T2.phone FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 20000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM drivers WHERE shipment_weight > 20000"
        ],
        "rule_sql": []
    },
    "9054": {
        "db_id": "bike_share_1",
        "question": "What was duration of the longest trip started on the day that has a maximum wind speed of 30 mph?",
        "ground_truth": "SELECT T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.max_wind_Speed_mph = 30 ORDER BY T1.duration DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(duration) FROM trips WHERE start_date IN (SELECT date FROM weather WHERE wind_speed = 30);"
        ],
        "rule_sql": []
    },
    "8124": {
        "db_id": "university",
        "question": "Provide the name of the university with the highest number of male students.",
        "ground_truth": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students * T1.pct_female_students / 100 - T1.num_students DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_name FROM universities ORDER BY male_students DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3041": {
        "db_id": "shakespeare",
        "question": "Please list all of the paragraphs that have the character name Aedile.",
        "ground_truth": "SELECT T2.ParagraphNum FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Aedile'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM paragraphs WHERE character_name = 'Aedile';"
        ],
        "rule_sql": []
    },
    "5190": {
        "db_id": "address",
        "question": "What percentage of households are in \"Coroyell\" out of its state?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.county = 'CORYELL' THEN T2.households ELSE 0 END) AS REAL) * 100 / SUM(T2.households) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM households WHERE state = 'Coroyell')) AS percentage FROM households WHERE city = 'Coroyell';"
        ],
        "rule_sql": []
    },
    "251": {
        "db_id": "retail_complains",
        "question": "Please list the full names of all the clients whose complaints are still in progress.",
        "ground_truth": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'In progress'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM clients WHERE complaint_status = 'completed';"
        ],
        "rule_sql": []
    },
    "8465": {
        "db_id": "mondial_geo",
        "question": "List all the organisations that where its name contains 'United Nation'. State its full name and its headquarter city.",
        "ground_truth": "SELECT Name, City FROM organization WHERE Name LIKE '%United Nation%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, headquarters FROM organisations WHERE name LIKE 'United Nation%';"
        ],
        "rule_sql": []
    },
    "26": {
        "db_id": "movie_platform",
        "question": "What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes?",
        "ground_truth": "SELECT T2.director_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director_url FROM movies \nJOIN reviews ON movies.movie_id = reviews.movie_id \nWHERE reviews.user_id = 2452551 AND reviews.likes = 39"
        ],
        "rule_sql": []
    },
    "2331": {
        "db_id": "movielens",
        "question": "Calculate the percentage of female actors and quality 2 who have appeared twice at the casting of the film 1672580.",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN gender = 'female' AND quality = 2 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM casting\nWHERE film_id = 1672580\nHAVING COUNT(*) = 2;"
        ],
        "rule_sql": []
    },
    "8212": {
        "db_id": "sales_in_weather",
        "question": "What was the average temperature difference between store number 18 and 19 on 16 September 2022?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.store_nbr = 18 THEN T2.tavg ELSE 0 END) - SUM(CASE WHEN T1.store_nbr = 19 THEN T2.tavg ELSE 0 END) FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.`date` = '2012-09-16'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(t1.temperature - t2.temperature) AS avg_temp_difference\nFROM temperature_readings t1, temperature_readings t2\nWHERE t1.store_id = 18 \nAND t2.store_id = 19\nAND t1.date = '2022-09-16'\nAND t2.date = '2022-09-16';"
        ],
        "rule_sql": []
    },
    "5353": {
        "db_id": "beer_factory",
        "question": "How many stars did Urijah Faber rate for Frostie?",
        "ground_truth": "SELECT T2.StarRating FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Urijah' AND T1.Last = 'Faber' AND T3.BrandName = 'Frostie'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM ratings WHERE user_name = 'Urijah Faber' AND restaurant_name = 'Frostie';"
        ],
        "rule_sql": []
    },
    "2394": {
        "db_id": "superstore",
        "question": "Who ordered the Bush Mission Pointe Library in the Central Region?",
        "ground_truth": "SELECT DISTINCT T2.`Customer Name` FROM central_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Bush Mission Pointe Library' AND T3.Region = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM orders WHERE library_name = 'Bush Mission Pointe Library' AND region = 'Central Region';"
        ],
        "rule_sql": []
    },
    "1176": {
        "db_id": "talkingdata",
        "question": "What is the ratio of male and female users of vivo X5pro model?",
        "ground_truth": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T2.device_model = 'X5Pro'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN gender = 'male' THEN 1 END) AS male_count,\n    COUNT(CASE WHEN gender = 'female' THEN 1 END) AS female_count,\n    COUNT(CASE WHEN gender = 'male' THEN 1 END) / COUNT(*) AS male_ratio,\n    COUNT(CASE WHEN gender = 'female' THEN 1 END) / COUNT(*) AS female_ratio\nFROM users\nWHERE model = 'vivo X5pro';"
        ],
        "rule_sql": []
    },
    "4852": {
        "db_id": "legislator",
        "question": "Calculate the percentage of famous_legislatorss.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN wikipedia_id IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bioguide_id) FROM historical",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legislators)) AS percentage_famous FROM legislators WHERE famous = 1;"
        ],
        "rule_sql": []
    },
    "9290": {
        "db_id": "movie_3",
        "question": "Where is store number 2 located?",
        "ground_truth": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM stores WHERE store_id = 2;"
        ],
        "rule_sql": []
    },
    "7478": {
        "db_id": "image_and_language",
        "question": "What is the bounding box of the object sample in image no.5 that has a self-relation?",
        "ground_truth": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(x), MIN(y), MAX(x + width), MAX(y + height) FROM objects WHERE image_id = 5 AND relation_type = 'self'"
        ],
        "rule_sql": []
    },
    "6136": {
        "db_id": "food_inspection_2",
        "question": "State the salary of the employee who did the most inspections.",
        "ground_truth": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT T.employee_id, COUNT(T.inspection_id) FROM inspection AS T GROUP BY T.employee_id ORDER BY COUNT(T.inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT salary FROM employees ORDER BY inspection_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7089": {
        "db_id": "works_cycles",
        "question": "Identifies the ID number of the customer whose sales order for 32 units had a unit price of 35.",
        "ground_truth": "SELECT T2.CustomerID FROM SalesOrderDetail AS T1 INNER JOIN Customer AS T2 WHERE T1.UnitPrice = 35 AND T1.OrderQty = 32",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_id FROM sales_orders WHERE quantity = 32 AND unit_price = 35;"
        ],
        "rule_sql": []
    },
    "4840": {
        "db_id": "legislator",
        "question": "Provide the full name and birth date of the legislator with a contact form of http://www.brown.senate.gov/contact/.",
        "ground_truth": "SELECT T1.official_full_name, T1.birthday_bio FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.contact_form = 'http://www.brown.senate.gov/contact/'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, birth_date FROM legislators WHERE contact_form = 'http://www.brown.senate.gov/contact/'"
        ],
        "rule_sql": []
    },
    "2499": {
        "db_id": "genes",
        "question": "How many pairs of positively correlated genes are both non-essential?",
        "ground_truth": "SELECT COUNT(T2.GeneID2) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Essential = 'Non-Essential'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM gene_correlations gc\nJOIN gene_essentiality ge1 ON gc.gene1 = ge1.gene_id\nJOIN gene_essentiality ge2 ON gc.gene2 = ge2.gene_id\nWHERE gc.correlation > 0 \nAND ge1.is_essential = 'yes' \nAND ge2.is_essential = 'yes';"
        ],
        "rule_sql": []
    },
    "9019": {
        "db_id": "bike_share_1",
        "question": "What is the route that has the longest duration? Indicate the city of where the stations are located.",
        "ground_truth": "SELECT T1.start_station_name, T1.end_station_name, T2.city FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s1.city, s2.city, r.duration \nFROM routes r\nJOIN stations s1 ON r.start_station_id = s1.station_id\nJOIN stations s2 ON r.end_station_id = s2.station_id\nORDER BY r.duration ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5166": {
        "db_id": "address",
        "question": "Provide the city where zip code 19019 is located and the alias of that city.",
        "ground_truth": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, alias FROM cities WHERE zip_code = '19019';"
        ],
        "rule_sql": []
    },
    "8265": {
        "db_id": "mondial_geo",
        "question": "Which country has the highest GDP per capita?",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP / T1.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM gdp_data ORDER BY gdp DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8902": {
        "db_id": "cookbook",
        "question": "Which recipe has the highest number of ingredients? Calculate the said recipe's total time of cooking.",
        "ground_truth": "SELECT T2.recipe_id, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T2.recipe_id ORDER BY COUNT(T2.ingredient_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT recipe_name, COUNT(ingredient_id) AS ingredient_count, cooking_time \nFROM recipes \nJOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id \nGROUP BY recipe_name \nORDER BY ingredient_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "31": {
        "db_id": "movie_platform",
        "question": "How many movies directed by Francis Ford Coppola have a popularity of more than 1,000? Indicate what is the highest amount of likes that each critic per movie has received, if there's any.",
        "ground_truth": "SELECT COUNT(T2.movie_title), T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Francis Ford Coppola' AND T2.movie_popularity > 1000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) AS movie_count, MAX(likes) AS max_critic_likes\nFROM movies m\nJOIN critics c ON m.movie_id = c.movie_id\nWHERE m.director = 'Francis Ford Coppola' AND m.popularity > 1000\nGROUP BY m.movie_id;"
        ],
        "rule_sql": []
    },
    "3241": {
        "db_id": "donor",
        "question": "What is the teacher's account ID for the project that got the donation at 11:38:43 on 2008/7/29 ?",
        "ground_truth": "SELECT T1.teacher_acctid FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2008-07-29 11:38:43.361'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT teacher_id FROM donations WHERE donation_time = '11:38:43' AND donation_date = '2008/7/29'"
        ],
        "rule_sql": []
    },
    "1386": {
        "db_id": "synthea",
        "question": "State the average period of Ms. Angelena Kertzmann's several normal pregnancies.",
        "ground_truth": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Angelena' AND T1.last = 'Kertzmann' AND T2.description = 'Normal pregnancy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(period) FROM pregnancies WHERE patient_name = 'Ms. Angelena Kertzmann' AND pregnancy_type = 'normal';"
        ],
        "rule_sql": []
    },
    "33": {
        "db_id": "movie_platform",
        "question": "Among the lists created by user 4208563, which one has the highest number of followers? Indicate how many followers it has and whether the user was a subscriber or not when he created the list.",
        "ground_truth": "SELECT T1.list_followers, T2.user_subscriber = 1 FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T2.list_id = T2.list_id WHERE T2.user_id = 4208563 ORDER BY T1.list_followers DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT list_id, COUNT(follower_id) AS follower_count, is_subscriber \nFROM lists \nWHERE user_id = 4208563 \nGROUP BY list_id \nORDER BY follower_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8522": {
        "db_id": "software_company",
        "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants?",
        "ground_truth": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T3.INHABITANTS_K > 30 AND T2.RESPONSE = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM customers c\nJOIN places p ON c.place_id = p.id\nWHERE c.incentive_response = 'true'\nAND c.customer_id <= 60000\nAND p.population > 30000;"
        ],
        "rule_sql": []
    },
    "1147": {
        "db_id": "talkingdata",
        "question": "Please list all the models of the devices used by a female user.",
        "ground_truth": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT model FROM devices WHERE user_gender = 'female';"
        ],
        "rule_sql": []
    },
    "3399": {
        "db_id": "video_games",
        "question": "What is the least common game genre?",
        "ground_truth": "SELECT T.game_name FROM ( SELECT T2.game_name, COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id GROUP BY T2.game_name ORDER BY COUNT(T2.id) ASC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre, COUNT(*) as count FROM games GROUP BY genre ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8165": {
        "db_id": "sales_in_weather",
        "question": "For the home weather station of store no.15, what was the dew point on 2012/2/18?",
        "ground_truth": "SELECT T1.dewpoint FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 15 AND T1.`date` = '2012-02-18'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT temperature FROM weather_stations WHERE store_id = 15 AND date = '2012/2/18';"
        ],
        "rule_sql": []
    },
    "3987": {
        "db_id": "public_review_platform",
        "question": "How many 2 stars rated business located in Phoenix, Arizona?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND state = 'AZ' AND stars = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE stars = 2 AND city = 'Phoenix' AND state = 'Arizona';"
        ],
        "rule_sql": []
    },
    "3621": {
        "db_id": "authors",
        "question": "From year 1991 to 2000, calculate the difference betweeen the total number of papers published under the conference \"International Conference on Supercomputing \" and \"Informatik & Schule\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.FullName = 'Informatik & Schule' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.FullName = 'International Conference on Supercomputing' THEN 1 ELSE 0 END) AS DIFF FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year > 1990 AND T1.Year < 2001",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM papers WHERE conference = 'International Conference on Supercomputing' AND year BETWEEN 1991 AND 2000) - \n    (SELECT COUNT(*) FROM papers WHERE conference = 'Informatik & Schule' AND year BETWEEN 1991 AND 2000) AS difference;"
        ],
        "rule_sql": []
    },
    "3624": {
        "db_id": "authors",
        "question": "Give the number of papers that were published on \"IEEE Transactions on Nuclear Science\" in 1999.",
        "ground_truth": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Nuclear Science' AND T2.Year = 1999",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE journal = 'IEEE Transactions on Nuclear Science' AND year = 1999;"
        ],
        "rule_sql": []
    },
    "1066": {
        "db_id": "talkingdata",
        "question": "How many events did the 88-years-old male users participate on 4th May,2016?",
        "ground_truth": "SELECT COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'M' AND SUBSTR(`timestamp`, 1, 10) = '2016-05-04' AND T1.age = 88",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM events \nJOIN users ON events.user_id = users.id \nWHERE users.age = 88 \nAND users.gender = 'male' \nAND events.date = '2016-05-04';"
        ],
        "rule_sql": []
    },
    "790": {
        "db_id": "social_media",
        "question": "How many tweets have the male users posted in total?",
        "ground_truth": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM tweets WHERE gender = 'male';"
        ],
        "rule_sql": []
    },
    "5136": {
        "db_id": "address",
        "question": "Calculate the ratio between the number of representatives in Alabama and the number of representatives in Illinois.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN state = 'Alabama' THEN cognress_rep_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN state = 'Illinois' THEN cognress_rep_id ELSE NULL END) FROM congress",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SELECT COUNT(*) FROM representatives WHERE state = 'Alabama') / (SELECT COUNT(*) FROM representatives WHERE state = 'Illinois') AS ratio;"
        ],
        "rule_sql": []
    },
    "50": {
        "db_id": "movie_platform",
        "question": "How many movie lists were still updated 10 years after it was created?",
        "ground_truth": "SELECT COUNT(*) FROM lists WHERE SUBSTR(list_update_timestamp_utc, 1, 4) - SUBSTR(list_creation_timestamp_utc, 1, 4) > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movie_lists WHERE created_date + 10 > updated_date;"
        ],
        "rule_sql": []
    },
    "276": {
        "db_id": "retail_complains",
        "question": "What is the email id of clients whose calls were hung?",
        "ground_truth": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.outcome = 'HANG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email FROM clients WHERE call_status = 'hung'"
        ],
        "rule_sql": []
    },
    "8278": {
        "db_id": "mondial_geo",
        "question": "What is the latitude of the island on which Mount Andrinjitra is located?",
        "ground_truth": "SELECT T1.Latitude FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island WHERE T2.Mountain = 'Andringitra'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude FROM mountains WHERE name = 'Mount Andrinjitra';"
        ],
        "rule_sql": []
    },
    "5514": {
        "db_id": "menu",
        "question": "State the name of menu with the longest full height.",
        "ground_truth": "SELECT T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T1.full_height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM menu ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "710": {
        "db_id": "trains",
        "question": "How many short cars are in the shape of hexagon?",
        "ground_truth": "SELECT COUNT(id) FROM cars WHERE shape = 'hexagon' AND len = 'short'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cars WHERE length = 'short' AND shape = 'hexagon';"
        ],
        "rule_sql": []
    },
    "3495": {
        "db_id": "video_games",
        "question": "In which region where a game had the lowest number of sales?",
        "ground_truth": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id ORDER BY T2.num_sales LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region, MIN(sales) FROM games GROUP BY region ORDER BY sales ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1935": {
        "db_id": "soccer_2016",
        "question": "How many times did the matches were held in MA Chidambaram Stadium from 5/9/2009 to 8/8/2011?",
        "ground_truth": "SELECT SUM(CASE WHEN Venue_Name = 'MA Chidambaram Stadium' THEN 1 ELSE 0 END) FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE Match_Date BETWEEN '2009-05-09' AND '2011-08-08'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE venue = 'MA Chidambaram Stadium' AND date BETWEEN '2009-09-05' AND '2011-08-08';"
        ],
        "rule_sql": []
    },
    "453": {
        "db_id": "movies_4",
        "question": "What is the title of the first crime movie ever released?",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE genre = 'crime' ORDER BY release_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3773": {
        "db_id": "public_review_platform",
        "question": "There was only one tip that user No. 69722 gave to the Yelp business, what was the ratings of that business?",
        "ground_truth": "SELECT T2.stars FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.user_id = 69722",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating FROM tips WHERE user_id = 69722 AND business_id IN (SELECT business_id FROM tips WHERE user_id = 69722 GROUP BY business_id HAVING COUNT(*) = 1);"
        ],
        "rule_sql": []
    },
    "4418": {
        "db_id": "student_loan",
        "question": "List out all bankrupt students that are able to make payment before due?",
        "ground_truth": "SELECT T1.name FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE bankrupt = 1 AND payment_date < due_date;"
        ],
        "rule_sql": []
    },
    "4283": {
        "db_id": "simpson_episodes",
        "question": "What are the keywords of the least popular episode?",
        "ground_truth": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.votes LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keywords FROM episodes ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3769": {
        "db_id": "public_review_platform",
        "question": "For the Yelp business which had the most number of \"long\" reviews, which category does it belong to?",
        "ground_truth": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' GROUP BY T2.business_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM yelp_business ORDER BY LENGTH(review_text) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2920": {
        "db_id": "professional_basketball",
        "question": "State the name of teams ranked first five or more times and lost a league two or more times between 1980 and 2000?",
        "ground_truth": "SELECT T1.name FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T1.rank < 5 AND T2.lgIDLoser > 2 AND T2.year BETWEEN 1980 AND 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name \nFROM teams \nWHERE rank = 1 AND COUNT(*) >= 5 \nAND lost_league >= 2 \nAND year BETWEEN 1980 AND 2000;"
        ],
        "rule_sql": []
    },
    "9254": {
        "db_id": "movie_3",
        "question": "Give the total amount of rent for the movie Clockwork Paradice.",
        "ground_truth": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'CLOCKWORK PARADICE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(rental_rate) FROM movies WHERE title = 'Clockwork Paradice';"
        ],
        "rule_sql": []
    },
    "8539": {
        "db_id": "software_company",
        "question": "Among the male customers with an level of education of 4 and below, list their income K.",
        "ground_truth": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT income_K FROM customers WHERE gender = 'male' AND education_level > 4"
        ],
        "rule_sql": []
    },
    "7829": {
        "db_id": "world",
        "question": "List the countries and their official languages in Antarctica.",
        "ground_truth": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Antarctica' AND T2.IsOfficial = 'T'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name, language_name FROM countries JOIN languages ON countries.country_id = languages.country_id WHERE continent = 'Antarctica';"
        ],
        "rule_sql": []
    },
    "1055": {
        "db_id": "talkingdata",
        "question": "How many users belong to the MOBA category?",
        "ground_truth": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'MOBA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE category = 'MOBA';"
        ],
        "rule_sql": []
    },
    "8426": {
        "db_id": "mondial_geo",
        "question": "Of all the countries of the Hindu religion, which has the lowest ratio of people per square meter of surface?",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Hindu' ORDER BY T1.Population / T1.Area ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, population / surface_area AS people_per_sq_meter \nFROM countries \nWHERE religion = 'Hindu' \nORDER BY people_per_sq_meter ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4972": {
        "db_id": "olympics",
        "question": "How many Olympics games were held during the 90s?",
        "ground_truth": "SELECT COUNT(games_year) FROM games WHERE games_year BETWEEN '1990' AND '1999'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM olympics WHERE year BETWEEN 1990 AND 1999;"
        ],
        "rule_sql": []
    },
    "2804": {
        "db_id": "professional_basketball",
        "question": "List all the coaches with more game lost than won from year 2000-2010. List the coach ID, team name and year.",
        "ground_truth": "SELECT DISTINCT T1.coachID, T2.tmID, T1.year FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 2000 AND 2010 AND T2.lost > T2.won",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coach_id, team_name, year \nFROM coaches \nWHERE year BETWEEN 2000 AND 2010 \nAND games_lost > games_won \nORDER BY year;"
        ],
        "rule_sql": []
    },
    "4989": {
        "db_id": "olympics",
        "question": "How many athletes are there in the region where Clara Hughes is from?",
        "ground_truth": "SELECT COUNT(person_id) FROM person_region WHERE region_id = ( SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Clara Hughes' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM athletes WHERE region = (SELECT region FROM athletes WHERE name = 'Clara Hughes')"
        ],
        "rule_sql": []
    },
    "2059": {
        "db_id": "music_tracker",
        "question": "Among the releases with the tag \"1980s\", which one of them is the most downloaded? Please give its title.",
        "ground_truth": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s' ORDER BY T1.totalSnatched DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM releases WHERE tag = '1980s' ORDER BY downloads ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2770": {
        "db_id": "european_football_1",
        "question": "For the Ligue 2 game that made the most goals, who is the winner of that game?",
        "ground_truth": "SELECT CASE WHEN T1.FTR = 'H' THEN T1.HomeTeam ELSE T1.AwayTeam END WINNER FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Ligue 2' ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT winner FROM games WHERE goals = (SELECT MAX(goals) FROM games WHERE league = 'Ligue 2')"
        ],
        "rule_sql": []
    },
    "3450": {
        "db_id": "video_games",
        "question": "Who is the publisher of the game 2002 FIFA World Cup?",
        "ground_truth": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T3.game_name = '2002 FIFA World Cup'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT developer FROM games WHERE title = '2002 FIFA World Cup';"
        ],
        "rule_sql": []
    },
    "5548": {
        "db_id": "menu",
        "question": "What is the name of the menu with the highest number of pages?",
        "ground_truth": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM menus ORDER BY pages DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4350": {
        "db_id": "simpson_episodes",
        "question": "What is the total number of episode with a rating below 7?",
        "ground_truth": "SELECT COUNT(episode_id) FROM Episode WHERE rating < 7;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE rating > 7;"
        ],
        "rule_sql": []
    },
    "5685": {
        "db_id": "language_corpus",
        "question": "List all the Catalan language wikipedia page title with less than 10 number of different words in these pages.",
        "ground_truth": "SELECT title FROM pages WHERE words < 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM wikipedia_pages WHERE language = 'Catalan' AND LENGTH(title) < 10;"
        ],
        "rule_sql": []
    },
    "4168": {
        "db_id": "simpson_episodes",
        "question": "How many 7-star votes in star score did the episode Lost Verizon have?",
        "ground_truth": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' AND T2.stars = 7;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE episode_title = 'Lost Verizon' AND star_score = 7;"
        ],
        "rule_sql": []
    },
    "2119": {
        "db_id": "world_development_indicators",
        "question": "How many countries have reached their Adjusted net national income per capita (constant 2005 US$) indicator value to more than 1,000 but have not finished their external debt reporting?",
        "ground_truth": "SELECT COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)' AND T1.ExternalDebtReportingStatus = 'Preliminary' AND T2.Value > 1000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countries c\nJOIN indicators i ON c.country_id = i.country_id\nWHERE i.indicator_name = 'Adjusted net national income per capita (constant 2005 US$)'\nAND i.value > 1000\nAND c.external_debt_reporting = 'finished';"
        ],
        "rule_sql": []
    },
    "1497": {
        "db_id": "synthea",
        "question": "When did Mrs. Joye Homenick receive her most recent influenza seasonal vaccine?",
        "ground_truth": "SELECT T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' AND T1.first = 'Joye' AND T1.last = 'Homenick' ORDER BY T2.DATE DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(vaccination_date) FROM vaccinations WHERE patient_name = 'Mrs. Joye Homenick' AND vaccine_type = 'influenza seasonal';"
        ],
        "rule_sql": []
    },
    "3158": {
        "db_id": "donor",
        "question": "How much donations have been collected for project 'Whistle While We Work!'?",
        "ground_truth": "SELECT SUM(T2.donation_to_project) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Whistle While We Work!'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM donations WHERE project_name = 'Whistle While We Work!';"
        ],
        "rule_sql": []
    },
    "6913": {
        "db_id": "retails",
        "question": "What are the names of the parts that were ordered by customer 110942?",
        "ground_truth": "SELECT T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 110942",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT part_name FROM parts WHERE customer_id = 110942"
        ],
        "rule_sql": []
    },
    "4429": {
        "db_id": "student_loan",
        "question": "How many unemployed students are enlisted in the navy organization?",
        "ground_truth": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE employment_status = 'unemployed' AND organization = 'navy';"
        ],
        "rule_sql": []
    },
    "1796": {
        "db_id": "soccer_2016",
        "question": "Please list the bowling skills of all the players from Australia.",
        "ground_truth": "SELECT T2.Bowling_Skill FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id INNER JOIN Country AS T3 ON T1.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Australia' GROUP BY T2.Bowling_Skill",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, bowling_skill FROM players WHERE country = 'Australia';"
        ],
        "rule_sql": []
    },
    "8150": {
        "db_id": "sales_in_weather",
        "question": "Please list the dates on which the sale of item no.5 in store no.3 exceeded 100 and the average wind speed exceeded 10.",
        "ground_truth": "SELECT T1.`date` FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5 AND T1.units > 100 AND T3.avgspeed > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date FROM sales WHERE item_id = 5 AND store_id = 3 AND quantity > 100 AND wind_speed > 10"
        ],
        "rule_sql": []
    },
    "4085": {
        "db_id": "public_review_platform",
        "question": "Within the user who joined Yelp in 2004, explore the user ID with average star of 5 and it's review length on the business.",
        "ground_truth": "SELECT T2.user_id, T2.review_length FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_average_stars = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.user_id, AVG(r.stars) as avg_stars, LENGTH(r.text) as review_length\nFROM user u\nJOIN review r ON u.user_id = r.user_id\nWHERE u.yelping_since = '2004'\nGROUP BY u.user_id\nHAVING AVG(r.stars) = 5\nORDER BY review_length DESC;"
        ],
        "rule_sql": []
    },
    "2386": {
        "db_id": "superstore",
        "question": "Among the customers from Chicago, Illinois, what is the highest quantity of products bought in a single order?",
        "ground_truth": "SELECT T1.Quantity FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN central_superstore AS T3 ON T3.`Customer ID` = T2.`Customer ID` INNER JOIN south_superstore AS T4 ON T4.`Customer ID` = T3.`Customer ID` INNER JOIN people AS T5 ON T5.`Customer ID` = T4.`Customer ID` WHERE T5.City = 'Chicago' AND T5.State = 'Illinois' ORDER BY T1.Quantity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(quantity) FROM orders WHERE city = 'Chicago' AND state = 'Illinois';"
        ],
        "rule_sql": []
    },
    "9055": {
        "db_id": "bike_share_1",
        "question": "Please calculate the average temperature of those trips that started at Market at 4th in 2013.",
        "ground_truth": "SELECT AVG(T2.mean_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T1.start_station_name = 'Market at 4th'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(temperature) FROM trips WHERE start_station = 'Market at 4th' AND year = 2013;"
        ],
        "rule_sql": []
    },
    "1342": {
        "db_id": "law_episode",
        "question": "What is the episode that has mafia keyword?",
        "ground_truth": "SELECT T1.episode FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.Keyword = 'mafia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM episodes WHERE keyword = 'mafia';"
        ],
        "rule_sql": []
    },
    "3543": {
        "db_id": "authors",
        "question": "What is the ratio of author with affiliation and without affiliation?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM Author",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN affiliation IS NOT NULL THEN 1 END) AS with_affiliation,\n    COUNT(CASE WHEN affiliation IS NULL THEN 1 END) AS without_affiliation,\n    COUNT(CASE WHEN affiliation IS NOT NULL THEN 1 END) / COUNT(*) AS ratio\nFROM authors;"
        ],
        "rule_sql": []
    },
    "6004": {
        "db_id": "books",
        "question": "What is the address that received the most orders?",
        "ground_truth": "SELECT T2.street_name, T2.city FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id GROUP BY T2.street_number, T2.street_name, T2.city ORDER BY COUNT(T1.dest_address_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address, COUNT(*) as order_count FROM orders GROUP BY address ORDER BY order_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4733": {
        "db_id": "disney",
        "question": "Name actors who voiced more than five Disney characters.",
        "ground_truth": "SELECT 'voice-actor' FROM `voice-actors` GROUP BY 'voice-actor' HAVING COUNT(movie) > 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name \nFROM actors \nWHERE character_count > 5 \nAND studio = 'Disney';"
        ],
        "rule_sql": []
    },
    "3640": {
        "db_id": "authors",
        "question": "How many journals don\u2019t have a short name?",
        "ground_truth": "SELECT COUNT(ShortName) FROM Journal WHERE ShortName = ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM journals WHERE short_name IS NOT NULL;"
        ],
        "rule_sql": []
    },
    "8412": {
        "db_id": "mondial_geo",
        "question": "Name of the capitals of the countries that have less than 99.95% less population than the country that has the most population.",
        "ground_truth": "SELECT Capital FROM country WHERE Population <= ( SELECT MAX(Population) - MAX(Population) * 0.9995 FROM country )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT capital FROM countries WHERE population < (SELECT MAX(population) * 0.0005 FROM countries);"
        ],
        "rule_sql": []
    },
    "1073": {
        "db_id": "talkingdata",
        "question": "Calculate the percentage of the app user IDs under Industry tag category.",
        "ground_truth": "SELECT SUM(IIF(T1.category = 'Industry tag', 1, 0)) * 100 / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT user_id) * 100.0 / (SELECT COUNT(DISTINCT user_id) FROM users)) AS percentage\nFROM app_usage \nWHERE tag_category = 'Industry';"
        ],
        "rule_sql": []
    },
    "4145": {
        "db_id": "citeseer",
        "question": "Which paper ID cited the most word? In which class label does it belongs to?",
        "ground_truth": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id, T1.class_label ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT paper_id, class_label, COUNT(word) as word_count \nFROM citations \nGROUP BY paper_id \nORDER BY word_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2965": {
        "db_id": "shakespeare",
        "question": "Please give the title of the work of Shakespeare that has the most characters.",
        "ground_truth": "SELECT T.Title FROM ( SELECT T1.Title, COUNT(T3.character_id) AS num FROM works T1 INNER JOIN chapters T2 ON T1.id = T2.work_id INNER JOIN paragraphs T3 ON T2.id = T3.chapter_id INNER JOIN characters T4 ON T3.character_id = T4.id GROUP BY T3.character_id, T1.Title ) T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM works WHERE author = 'Shakespeare' ORDER BY LENGTH(title) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3893": {
        "db_id": "public_review_platform",
        "question": "Find the location of businesses that have business hours from 8 am to 9 pm every Friday.",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '8AM' AND T3.day_of_week LIKE 'Friday' GROUP BY T1.city",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT location FROM businesses WHERE hours LIKE '%Friday%' AND hours LIKE '%8%' AND hours LIKE '%9%';"
        ],
        "rule_sql": []
    },
    "3690": {
        "db_id": "college_completion",
        "question": "What is the number of female graduate for all students cohort from Oakwood University in 2013?",
        "ground_truth": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'F' AND T2.race = 'X' AND T1.chronname = 'Oakwood University'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university = 'Oakwood University' AND year = 2013 AND gender = 'female';"
        ],
        "rule_sql": []
    },
    "6411": {
        "db_id": "retail_world",
        "question": "What is the name of the contact person of the Pavlova supplier company?",
        "ground_truth": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Pavlova'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT contact_name FROM suppliers WHERE company_name = 'Pavlova';"
        ],
        "rule_sql": []
    },
    "6870": {
        "db_id": "retails",
        "question": "What is the lowest supply cost for the part \"hot spring dodger dim light\"?",
        "ground_truth": "SELECT MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(price) FROM parts WHERE name = 'hot spring dodger dim light';"
        ],
        "rule_sql": []
    },
    "6895": {
        "db_id": "retails",
        "question": "What is the discounted price of the part \"burnished seashell gainsboro navajo chocolate\" in order no.1?",
        "ground_truth": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price * 0.9 FROM parts WHERE part_name = 'burnished seashell gainsboro navajo chocolate' AND order_id = 1;"
        ],
        "rule_sql": []
    },
    "1949": {
        "db_id": "soccer_2016",
        "question": "Which year do the majority of the players were born?",
        "ground_truth": "SELECT DOB FROM Player GROUP BY DOB ORDER BY COUNT(DOB) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_year, COUNT(*) as player_count FROM players GROUP BY birth_year ORDER BY player_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2660": {
        "db_id": "regional_sales",
        "question": "Find the percentage of products that were shipped from Burbank in 2018?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.`City Name` = 'Burbank' THEN T2.`Order Quantity` ELSE 0 END) AS REAL) * 100 / SUM(T2.`Order Quantity`) FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T2.OrderDate LIKE '%/%/18'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS percentage\nFROM shipments\nWHERE YEAR(ship_date) = 2018\nAND city = 'Burbank';"
        ],
        "rule_sql": []
    },
    "5555": {
        "db_id": "menu",
        "question": "What are the names of the dishes in the menu sponsored by The Society of Cumberland that was created for the 19th reunion at Grand Pacific Hotel in Chicago, Illinois?",
        "ground_truth": "SELECT T4.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id INNER JOIN Dish AS T4 ON T3.dish_id = T4.id WHERE T1.sponsor = 'THE SOCIETY OF THE CUMBERLAND' AND T1.event = '19NTH REUNION' AND T1.place = 'GRAND PACIFIC HOTEL,CHICAGO,ILL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT dish_name FROM menu_dishes WHERE sponsor = 'The Society of Cumberland' AND event = '19th reunion' AND location = 'Chicago, Illinois' AND venue = 'Grand Pacific Hotel';"
        ],
        "rule_sql": []
    },
    "2988": {
        "db_id": "shakespeare",
        "question": "How many scenes are there in work id 7, act 1?",
        "ground_truth": "SELECT COUNT(id) FROM chapters WHERE work_id = 7 AND Act = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM scenes WHERE work_id = 7 AND act = 1;"
        ],
        "rule_sql": []
    },
    "2358": {
        "db_id": "superstore",
        "question": "What was the total cost of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?",
        "ground_truth": "SELECT DISTINCT (T2.Sales / (1 - T2.discount)) * T2.Quantity - Profit FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T3.`Product Name` = 'Xerox 1952' AND T2.`Order Date` = '2014-09-10'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(quantity * price) AS total_cost \nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nJOIN products p ON o.product_id = p.product_id\nWHERE c.name = 'Aimee Bixby' \nAND p.product_name = 'Xerox 1952' \nAND o.order_date = '2014-09-10';"
        ],
        "rule_sql": []
    },
    "1518": {
        "db_id": "synthea",
        "question": "Describe the condition of patient Wilmer Koepp.",
        "ground_truth": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Wilmer' AND T1.last = 'Koepp'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM patients WHERE first_name = 'Wilmer' AND last_name = 'Koepp';"
        ],
        "rule_sql": []
    },
    "3352": {
        "db_id": "video_games",
        "question": "Which year has the most number of PC games releases?",
        "ground_truth": "SELECT T.release_year FROM ( SELECT T2.release_year, COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PC' GROUP BY T2.release_year ORDER BY COUNT(DISTINCT T3.game_id) DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, COUNT(*) as game_count FROM games WHERE platform = 'PC' GROUP BY year ORDER BY game_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1897": {
        "db_id": "soccer_2016",
        "question": "Among the players, what percentage are both captain and keeper?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Role_Desc = 'CaptainKeeper' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM players)) AS percentage FROM players WHERE is_captain = 1 OR is_keeper = 1;"
        ],
        "rule_sql": []
    },
    "1685": {
        "db_id": "restaurant",
        "question": "List all counties where there is no Bakers Square Restaurant & Pie Shop.",
        "ground_truth": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label != 'bakers square restaurant & pie shop'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county FROM restaurants WHERE restaurant_name != 'Bakers Square Restaurant & Pie Shop';"
        ],
        "rule_sql": []
    },
    "8975": {
        "db_id": "human_resources",
        "question": "Mention the employee's full name and performance status who got the lowest in salary per year.",
        "ground_truth": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name, performance_status FROM employees ORDER BY salary_per_year ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1484": {
        "db_id": "synthea",
        "question": "List out the procedure and medicine prescribed for drug overdose patients.",
        "ground_truth": "SELECT DISTINCT T2.DESCRIPTION, T3.DESCRIPTION FROM encounters AS T1 INNER JOIN procedures AS T2 ON T1.PATIENT = T2.PATIENT INNER JOIN medications AS T3 ON T1.PATIENT = T3.PATIENT WHERE T1.REASONDESCRIPTION = 'Drug overdose'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.procedure_name, m.medicine_name \nFROM patients pt\nJOIN procedures p ON pt.patient_id = p.patient_id\nJOIN medications m ON pt.patient_id = m.patient_id\nWHERE pt.diagnosis = 'drug overdose';"
        ],
        "rule_sql": []
    },
    "8714": {
        "db_id": "chicago_crime",
        "question": "Which community has the highest number of neighborhoods?",
        "ground_truth": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no ORDER BY T2.community_area_no DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT community, COUNT(*) as neighborhood_count FROM neighborhoods GROUP BY community ORDER BY neighborhood_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3845": {
        "db_id": "public_review_platform",
        "question": "Please list the cities of the Yelp_Businesses that have gotten a 5 in the Elitestar rating.",
        "ground_truth": "SELECT city FROM Business WHERE stars = 5 GROUP BY city",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM Yelp_Businesses WHERE Elitestar = 5;"
        ],
        "rule_sql": []
    },
    "7926": {
        "db_id": "music_platform_2",
        "question": "Name all the podcast title and its category with average rating of more than 3.0.",
        "ground_truth": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id GROUP BY T3.podcast_id HAVING AVG(T3.rating) > 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT podcast_title, category FROM podcasts WHERE rating > 3.0;"
        ],
        "rule_sql": []
    },
    "2861": {
        "db_id": "professional_basketball",
        "question": "What is the name of the team with the highest home lost rate?",
        "ground_truth": "SELECT name FROM teams ORDER BY CAST(homeWon AS REAL) / (homeWon + homeLost) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, (home_losses / home_games) AS lost_rate FROM teams ORDER BY lost_rate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "583": {
        "db_id": "codebase_comments",
        "question": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"?",
        "ground_truth": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM solution_paths WHERE repository_url = 'https://github.com/jeffdik/tachy.git' AND needs_compilation = 'yes';"
        ],
        "rule_sql": []
    },
    "3722": {
        "db_id": "college_completion",
        "question": "Give the name of the 4-year public school in \"ID\" with the lowest graduation 100 value.",
        "ground_truth": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'ID' AND T1.level = '4-year' AND T1.control = 'Public' GROUP BY T1.chronname ORDER BY SUM(T1.grad_100_value) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM schools WHERE state = 'ID' AND type = 'public' AND years = 4 ORDER BY graduation_100 ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4190": {
        "db_id": "simpson_episodes",
        "question": "What is the title of episode that won the Best International TV Series Award in 2017?",
        "ground_truth": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes WHERE award_year = 2017 AND award_name = 'Best International TV Series Award';"
        ],
        "rule_sql": []
    },
    "7757": {
        "db_id": "hockey",
        "question": "Which team had the highest penalty kill chances in 1995, Florida Panthers, Edmonton Oilers or Los Angeles Kings?",
        "ground_truth": "SELECT name FROM Teams WHERE year = 1995 AND name IN ('Florida Panthers', 'Edmonton Oilers', 'Los Angeles Kings') ORDER BY PKC DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, MAX(penalty_kill_chances) as highest_pk_chances \nFROM team_stats \nWHERE year = 1995 \nAND team_name IN ('Florida Panthers', 'Edmonton Oilers', 'Los Angeles Kings') \nGROUP BY team_name \nORDER BY highest_pk_chances DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5287": {
        "db_id": "beer_factory",
        "question": "Among the root beer purchased in 2014, what percentage were sold in cans?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID ELSE NULL END) AS REAL) * 100 / COUNT(RootBeerID) FROM rootbeer WHERE PurchaseDate LIKE '2014%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN container = 'can' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_cans\nFROM sales\nWHERE product = 'root beer' AND year = 2014;"
        ],
        "rule_sql": []
    },
    "7317": {
        "db_id": "works_cycles",
        "question": "Other than the Chief Executive Officer, who is the employee who has the highest payrate? State the rate.",
        "ground_truth": "SELECT T2.FirstName, T2.LastName FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle NOT LIKE 'Chief Executive Officer' ORDER BY T1.Rate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, payrate FROM employees WHERE name != 'Chief Executive Officer' ORDER BY payrate DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5955": {
        "db_id": "books",
        "question": "List all the names of the books written by Danielle Steel.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Danielle Steel'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE author = 'Danielle Steele';"
        ],
        "rule_sql": []
    },
    "4521": {
        "db_id": "student_loan",
        "question": "What is the status of payment of student 124?",
        "ground_truth": "SELECT `bool` FROM no_payment_due WHERE name = 'student124'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM students WHERE student_id = 124;"
        ],
        "rule_sql": []
    },
    "2829": {
        "db_id": "professional_basketball",
        "question": "Please list the birth date of the player who has won the most MVPs.",
        "ground_truth": "SELECT T1.birthDate FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' GROUP BY T1.playerID, T1.birthDate ORDER BY COUNT(award) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_date FROM players ORDER BY mvp_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8320": {
        "db_id": "mondial_geo",
        "question": "List all the cities in Sumatra and state the population of each city.",
        "ground_truth": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Name = 'Sumatra'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name, population FROM cities WHERE region = 'Sumatra';"
        ],
        "rule_sql": []
    },
    "5872": {
        "db_id": "airline",
        "question": "Please list any three airports with their codes.",
        "ground_truth": "SELECT Code, Description FROM Airports LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, code FROM airports LIMIT 3;"
        ],
        "rule_sql": []
    },
    "4612": {
        "db_id": "mental_health_survey",
        "question": "How many times more for the number of users who took the \"mental health survey for 2017\" than \"mental health survey for 2018\"?",
        "ground_truth": "SELECT CAST(COUNT(T1.UserID) AS REAL) / ( SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018' ) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2017'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(DISTINCT user_id) FROM survey_responses WHERE survey_name = 'mental health survey for 2017') / \n    (SELECT COUNT(DISTINCT user_id) FROM survey_responses WHERE survey_name = 'mental health survey for 2018') \nAS times_more"
        ],
        "rule_sql": []
    },
    "6789": {
        "db_id": "retails",
        "question": "Lists all parts supplied by Supplier#000000034.",
        "ground_truth": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.s_name = 'Supplier#000000034'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM parts WHERE supplier_id = 'Supplier#000000034';"
        ],
        "rule_sql": []
    },
    "5176": {
        "db_id": "address",
        "question": "Among the postal points in California, calculate the percentage of them in post office types.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'California'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    type,\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM post_offices WHERE state = 'California') AS percentage\nFROM post_offices \nWHERE state = 'California'\nGROUP BY type;"
        ],
        "rule_sql": []
    },
    "9118": {
        "db_id": "movie_3",
        "question": "How many actors have starred in the film ACADEMY DINOSAUR?",
        "ground_truth": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.title = 'ACADEMY DINOSAUR'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actor WHERE film_title = 'ACADEMY DINOSAUR';"
        ],
        "rule_sql": []
    },
    "5383": {
        "db_id": "sales",
        "question": "Among customers with IDs from 1 to 100, what is the highest price of products they purchased?",
        "ground_truth": "SELECT T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID BETWEEN 1 AND 100 ORDER BY T1.Price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price) FROM products WHERE customer_id BETWEEN 1 AND 100;"
        ],
        "rule_sql": []
    },
    "4768": {
        "db_id": "legislator",
        "question": "What is the current official Twitter handle of Roger F. Wicker?",
        "ground_truth": "SELECT T2.twitter FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Roger F. Wicker'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT twitter_handle FROM politicians WHERE first_name = 'Roger' AND last_name = 'Wicker';"
        ],
        "rule_sql": []
    },
    "4984": {
        "db_id": "olympics",
        "question": "How many athletes playing in Canoeing fall into overweight BMI category in the 2008 Summer games?",
        "ground_truth": "SELECT COUNT(T5.id) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id INNER JOIN games AS T6 ON T4.games_id = T6.id WHERE T1.sport_name = 'Canoeing' AND T6.games_name = '2008 Summer' AND T5.weight * 10000.0 / (T5.height * T5.height) BETWEEN 25.0 AND 30",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM athletes a\nJOIN games g ON a.game_id = g.id\nJOIN sports s ON a.sport_id = s.id\nWHERE g.year = 2008 \nAND g.season = 'Summer'\nAND s.name = 'Canoeing'\nAND a.weight / (a.height * a.height) > 25"
        ],
        "rule_sql": []
    },
    "2160": {
        "db_id": "world_development_indicators",
        "question": "Mention the series code of countries using pound sterling as their currency unit. Which country belongs to high income group among them.",
        "ground_truth": "SELECT DISTINCT T1.CountryCode, T1.CurrencyUnit, T1.IncomeGroup FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Pound sterling' AND T1.IncomeGroup LIKE '%high income%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT series_code, country \nFROM countries \nWHERE currency = 'Pound Sterling' \nAND income_group = 'High income' \nORDER BY country;"
        ],
        "rule_sql": []
    },
    "3420": {
        "db_id": "video_games",
        "question": "How many Sports games did Nintendo publish?",
        "ground_truth": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' AND T1.publisher_name = 'Nintendo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE publisher = 'Nintendo' AND genre = 'Sports';"
        ],
        "rule_sql": []
    },
    "6764": {
        "db_id": "retails",
        "question": "Find and list the part key of the parts which has an above-average retail price.",
        "ground_truth": "SELECT p_partkey FROM part WHERE p_retailprice > ( SELECT AVG(p_retailprice) FROM part )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT partkey FROM parts WHERE retailprice > (SELECT AVG(retailprice) FROM parts);"
        ],
        "rule_sql": []
    },
    "9296": {
        "db_id": "movie_3",
        "question": "Which district does Maria Miller live in?",
        "ground_truth": "SELECT T2.district FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district FROM people WHERE first_name = 'Maria' AND last_name = 'Miller';"
        ],
        "rule_sql": []
    },
    "3839": {
        "db_id": "public_review_platform",
        "question": "How many businesses of Yelp are in Scottsdale?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Scottsdale';"
        ],
        "rule_sql": []
    },
    "1881": {
        "db_id": "soccer_2016",
        "question": "What is the name of the team that won match ID 336000?",
        "ground_truth": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Id = 336000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name FROM matches WHERE match_id = 336000"
        ],
        "rule_sql": []
    },
    "2174": {
        "db_id": "world_development_indicators",
        "question": "Name 5 country codes of country with highest value and state the region of these countries.",
        "ground_truth": "SELECT DISTINCT T1.CountryCode, T1.Region FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode ORDER BY T2.Value DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_code, region FROM countries ORDER BY value DESC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "4732": {
        "db_id": "disney",
        "question": "Name the most recent movie directed by Chris Buck. Which of his movies was more successful in terms of grossing? Use the current gross for comparison.",
        "ground_truth": "SELECT T1.movie_title, MAX(T1.release_date), MAX(T1.inflation_adjusted_gross) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Chris Buck'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, gross FROM movies WHERE director = 'Chris Buck' ORDER BY release_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4473": {
        "db_id": "student_loan",
        "question": "How many unemployed students are enlisted in the Army organization?",
        "ground_truth": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.organ = 'army'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE employment_status = 'unemployed' AND organization = 'Army';"
        ],
        "rule_sql": []
    },
    "6463": {
        "db_id": "retail_world",
        "question": "How many orders have Margaret Peacock placed?",
        "ground_truth": "SELECT COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Margaret' AND T1.LastName = 'Peacock'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Margaret Peacock';"
        ],
        "rule_sql": []
    },
    "5745": {
        "db_id": "language_corpus",
        "question": "Please list any three Wikipedia pages that are written in Catalan, together with their titles and revision page numbers.",
        "ground_truth": "SELECT title, revision FROM pages WHERE lid = 1 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, rev_page FROM page WHERE page_lang = 'Catalan' LIMIT 3;"
        ],
        "rule_sql": []
    },
    "2269": {
        "db_id": "movielens",
        "question": "What is the ID of actors that acted in the movies most viewed by audience with occupation 5?",
        "ground_truth": "SELECT T3.actorid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies2actors AS T3 ON T2.movieid = T3.movieid WHERE T1.occupation = 5 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_id FROM actors WHERE movie_id IN (SELECT movie_id FROM viewings WHERE occupation = 5 GROUP BY movie_id ORDER BY COUNT(*) DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "4401": {
        "db_id": "student_loan",
        "question": "Count the number of students from UCSD enlisted in the peace corps.",
        "ground_truth": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.`name` = T2.`name` WHERE T2.school = 'ucsd' AND T1.organ = 'peace_corps'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university = 'UCSD' AND organization = 'Peace Corps';"
        ],
        "rule_sql": []
    },
    "88": {
        "db_id": "movie_platform",
        "question": "Which of the films directed by \u00c1lex de la Iclesia is the most popular among Mubi users?",
        "ground_truth": "SELECT movie_title FROM movies WHERE director_name = '\u00c5ke Sandgren' ORDER BY movie_popularity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, MAX(rating) FROM films WHERE director = '\u00c1lex de la Iclesia' GROUP BY title ORDER BY rating DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8223": {
        "db_id": "mondial_geo",
        "question": "Which is the majority of the ethnic group in country with great than 10,000,000 population",
        "ground_truth": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Population > 10000000 GROUP BY T2.Name, T2.Percentage ORDER BY T2.Percentage DESC LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ethnic_group, COUNT(*) as count FROM population_data WHERE population > 10000000 GROUP BY ethnic_group ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "261": {
        "db_id": "retail_complains",
        "question": "What was the detailed issue did Mr Gunner Omer Fuller complain about?",
        "ground_truth": "SELECT T2.`Sub-issue` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM complaints WHERE customer_name = 'Gunner Omer Fuller';"
        ],
        "rule_sql": []
    },
    "6270": {
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency was traded in the highest value on 2016/1/8?",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2016-01-08' AND T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical WHERE date = '2016-01-08' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT cryptocurrency, MAX(price) FROM trades WHERE date = '2016/1/8' GROUP BY cryptocurrency ORDER BY price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5347": {
        "db_id": "beer_factory",
        "question": "What is the best seller root beer brand and what is the average star rating for this root beer?",
        "ground_truth": "SELECT T1.BrandID, AVG(T1.StarRating) FROM rootbeerreview AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, AVG(rating) as avg_rating FROM root_beers GROUP BY brand ORDER BY sales DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6502": {
        "db_id": "retail_world",
        "question": "What percentage of orders were placed by customers in Madrid city in 1996?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.City = 'Madrid' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.City) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = 1996",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT o.OrderID) * 100.0 / (SELECT COUNT(DISTINCT OrderID) FROM Orders)) AS Percentage\nFROM Orders o\nJOIN Customers c ON o.CustomerID = c.CustomerID\nWHERE c.City = 'Madrid' AND o.OrderDate LIKE '1996%';"
        ],
        "rule_sql": []
    },
    "7179": {
        "db_id": "works_cycles",
        "question": "What are the product assembly ID that come with unit measure code EA and BOM level of 2, at the same time have per assembly quantity of more than 10?",
        "ground_truth": "SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_assembly_id FROM product_bom WHERE unit_measure_code = 'EA' AND bom_level = 2 AND per_assembly_quantity > 10;"
        ],
        "rule_sql": []
    },
    "1243": {
        "db_id": "talkingdata",
        "question": "Which brand is most common among people in their twenties?",
        "ground_truth": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T2.phone_brand) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 30 GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, COUNT(*) as count FROM people WHERE age BETWEEN 20 AND 29 GROUP BY brand ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5902": {
        "db_id": "airline",
        "question": "What is the total number of flights that flew on August 2, 2018 with air carrier described as Horizon Air?",
        "ground_truth": "SELECT COUNT(*) FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Horizon Air%' AND T2.FL_DATE = '2018/8/2'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE date = '2018-08-02' AND carrier = 'Horizon Air';"
        ],
        "rule_sql": []
    },
    "8105": {
        "db_id": "university",
        "question": "How many times more was the number of students of University of Ottawa than Joseph Fourier University in 2013?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.university_name = 'University of Ottawa' THEN T1.num_students ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.university_name = 'Joseph Fourier University' THEN T1.num_students ELSE 0 END) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SELECT COUNT(*) FROM students WHERE university = 'University of Ottawa' AND year = 2013) / (SELECT COUNT(*) FROM students WHERE university = 'Joseph Fourier University' AND year = 2013) AS times_more;"
        ],
        "rule_sql": []
    },
    "2109": {
        "db_id": "world_development_indicators",
        "question": "What are the Indicator names and aggregation methods when the topic is Economic Policy & Debt: Balance of payments: Capital & financial account?",
        "ground_truth": "SELECT IndicatorName, AggregationMethod FROM Series WHERE Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT indicator_name, aggregation_method FROM indicators WHERE topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account';"
        ],
        "rule_sql": []
    },
    "2187": {
        "db_id": "world_development_indicators",
        "question": "Which country have data classified as official aid?",
        "ground_truth": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM aid_data WHERE classification = 'official aid';"
        ],
        "rule_sql": []
    },
    "9171": {
        "db_id": "movie_3",
        "question": "How many times is the number of films Gina DeGeneres acted in than Penelope Guinness?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.first_name = 'GINA' AND T2.last_name = 'DEGENERES', 1, 0)) AS REAL) * 100 / SUM(IIF(T2.first_name = 'PENELOPE' AND T2.last_name = 'GUINESS', 1, 0)) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Gina' AND a.last_name = 'DeGeneres') \n    / \n    (SELECT COUNT(*) FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Penelope' AND a.last_name = 'Guinness')\nAS ratio;"
        ],
        "rule_sql": []
    },
    "8249": {
        "db_id": "mondial_geo",
        "question": "Among the countries whose agriculture percentage of the GDP is under 50%, how many of them have an area of over 8000000?",
        "ground_truth": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Agriculture < 50 AND T1.Area > 8000000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM countries \nWHERE agriculture_percentage_gdp >= 50 \nAND area > 8000000;"
        ],
        "rule_sql": []
    },
    "2076": {
        "db_id": "music_tracker",
        "question": "List the group name has the most downloaded that have released jazz genres from 1982 or later.",
        "ground_truth": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT group_name, COUNT(*) as downloads\nFROM downloads d\nJOIN songs s ON d.song_id = s.song_id\nJOIN groups g ON s.group_id = g.group_id\nJOIN genres gen ON s.genre_id = gen.genre_id\nWHERE gen.genre_name = 'jazz' AND s.release_year >= 1982\nGROUP BY group_name\nORDER BY downloads DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5887": {
        "db_id": "airline",
        "question": "Give the code of the airport described as Driftwood Bay, AK: Driftwood Bay Airport.",
        "ground_truth": "SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT airport_code FROM airports WHERE description = 'Driftwood Bay, AK: Driftwood Bay Airport';"
        ],
        "rule_sql": []
    },
    "1217": {
        "db_id": "talkingdata",
        "question": "Please list any three events that happened on the 1st of May 2016 that have the same latitude of 31.",
        "ground_truth": "SELECT event_id FROM events WHERE timestamp LIKE '2016-05-01%' AND latitude = 31 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM events WHERE date = '2016-05-01' AND latitude = 31 LIMIT 3;"
        ],
        "rule_sql": []
    },
    "8250": {
        "db_id": "mondial_geo",
        "question": "How many cities have a salt lake located in it?",
        "ground_truth": "SELECT COUNT(T1.City) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T2.Type = 'salt'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE lake_type = 'salt'"
        ],
        "rule_sql": []
    },
    "1282": {
        "db_id": "law_episode",
        "question": "How many times did the episode titled \"Agony\" win an award?",
        "ground_truth": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Agony' AND T2.result = 'Winner'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE title = 'Agony' AND awards_won > 0"
        ],
        "rule_sql": []
    },
    "2805": {
        "db_id": "professional_basketball",
        "question": "Which are the teams coached by 'adelmri01' from year 1990-1995. List the team name, year and offense point.",
        "ground_truth": "SELECT T2.name, T1.year, T2.o_pts FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1990 AND 1995 AND T1.coachID = 'adelmri01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, year, defense_points \nFROM teams \nWHERE coach_id = 'adelmri01' \nAND year BETWEEN 1990 AND 1995;"
        ],
        "rule_sql": []
    },
    "7229": {
        "db_id": "works_cycles",
        "question": "List all active vendors who offer a purchasing web service.",
        "ground_truth": "SELECT Name FROM Vendor WHERE ActiveFlag = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM vendors WHERE status = 'inactive' AND web_service = 'purchasing';"
        ],
        "rule_sql": []
    },
    "5110": {
        "db_id": "address",
        "question": "What party does the area with the zip code 91701 belong to?",
        "ground_truth": "SELECT T1.party FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T3.zip_code = 91701 GROUP BY T1.party",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT party FROM areas WHERE zip_code = '91701';"
        ],
        "rule_sql": []
    },
    "7071": {
        "db_id": "works_cycles",
        "question": "Please give the personal information of the married employee who has the highest pay rate.",
        "ground_truth": "SELECT T2.Demographics FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' ORDER BY T3.Rate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE marital_status = 'Married' ORDER BY pay_rate ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8196": {
        "db_id": "sales_in_weather",
        "question": "Between the stores under weather station 12, what is the percentage of item 5 sold in store 10 in 2014?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.store_nbr = 10 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE station_nbr = 12 AND item_nbr = 5 AND T2.`date` LIKE '%2014%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (SUM(CASE WHEN item_id = 5 THEN quantity ELSE 0 END) / SUM(quantity)) * 100 AS percentage\nFROM sales\nWHERE store_id = 10\nAND year = 2014\nAND weather_station_id = 12;"
        ],
        "rule_sql": []
    },
    "576": {
        "db_id": "codebase_comments",
        "question": "What is the tokenized name of the solution whose path is \"maravillas_linq-to-delicious\\tasty.sln\"?",
        "ground_truth": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM solutions WHERE path = 'maravillas_linq-to-delicious\\tasty.sln';"
        ],
        "rule_sql": []
    },
    "6212": {
        "db_id": "food_inspection_2",
        "question": "How many taverns failed in July 2010?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-07' AND T2.results = 'Fail' AND T1.facility_type = 'Restaurant'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM taverns WHERE status = 'failed' AND year = 2010 AND month = 7;"
        ],
        "rule_sql": []
    },
    "8826": {
        "db_id": "food_inspection",
        "question": "When did eateries from San Bruno city get highest score in inspection?",
        "ground_truth": "SELECT T1.`date` FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'SAN BRUNO' ORDER BY T1.score DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(inspection_date) FROM inspections WHERE city = 'San Bruno' AND score = (SELECT MAX(score) FROM inspections WHERE city = 'San Bruno')"
        ],
        "rule_sql": []
    },
    "7309": {
        "db_id": "works_cycles",
        "question": "Name all person in the individual retail whose last name is 'Anderson'.",
        "ground_truth": "SELECT FirstName, MiddleName, LastName FROM Person WHERE LastName = 'Anderson' AND PersonType = 'IN'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM individual_retail WHERE last_name = 'Anderson';"
        ],
        "rule_sql": []
    },
    "908": {
        "db_id": "cs_semester",
        "question": "Name the professor who got graduation from the University of Boston.",
        "ground_truth": "SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM professors WHERE graduation = 'University of Boston';"
        ],
        "rule_sql": []
    },
    "7168": {
        "db_id": "works_cycles",
        "question": "Which type of transaction was it for the \"LL Road Handlebars\" order happened in 2012/11/3?",
        "ground_truth": "SELECT T1.TransactionType FROM TransactionHistoryArchive AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'LL Road Handlebars' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2012-11-03'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT transaction_type FROM transactions WHERE product_name = 'LL Road Handlebars' AND date = '2012/11/3';"
        ],
        "rule_sql": []
    },
    "983": {
        "db_id": "computer_student",
        "question": "How many basic and medium undergraduate courses are there?",
        "ground_truth": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_300'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM courses WHERE level IN ('basic', 'medium') AND type = 'undergraduate';"
        ],
        "rule_sql": []
    },
    "403": {
        "db_id": "retail_complains",
        "question": "What is the division of the review of 5 stars received on December 17, 2017 for the product Eagle National Mortgage?",
        "ground_truth": "SELECT T1.division FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5 AND T2.Date = '2017-12-17' AND T2.Product = 'Eagle National Mortgage'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE stars = 5 AND date = '2017-12-17' AND product_name = 'Eagle National Mortgage'"
        ],
        "rule_sql": []
    },
    "7226": {
        "db_id": "works_cycles",
        "question": "What proportion of sales orders are made from the United Kingdom?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Name = 'United Kingdom' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SalesOrderID) FROM SalesOrderHeader AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM sales_orders) AS proportion FROM sales_orders WHERE country = 'United Kingdom';"
        ],
        "rule_sql": []
    },
    "5675": {
        "db_id": "shipping",
        "question": "How many shipments were delivered to a customer from New York?",
        "ground_truth": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'NY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shipments WHERE customer_city = 'New York';"
        ],
        "rule_sql": []
    },
    "7077": {
        "db_id": "works_cycles",
        "question": "Among the employees who are married and wish to receive e-mail promotions, how much higher is their highest pay rate from the average pay rate?",
        "ground_truth": "SELECT MAX(T1.Rate) - SUM(T1.Rate) / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T2.EmailPromotion = 2 AND T3.MaritalStatus = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(PayRate) - AVG(PayRate) AS pay_difference\nFROM Employees\nWHERE MaritalStatus = 'Married' AND EmailPromotion = 1;"
        ],
        "rule_sql": []
    },
    "3471": {
        "db_id": "video_games",
        "question": "State the name of the platforms for games released in 2000.",
        "ground_truth": "SELECT DISTINCT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T1.release_year = 2000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform_name FROM games WHERE release_year = 2000;"
        ],
        "rule_sql": []
    },
    "4774": {
        "db_id": "legislator",
        "question": "Calculate the percentage of the total number of current female legislators and past female legislators. State which one has the highest value.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id ELSE NULL END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id ELSE NULL END) FROM historical ) FROM current",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    'Current' AS type,\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legislators WHERE gender = 'F')) AS percentage\nFROM legislators \nWHERE gender = 'F' AND current = 1\nUNION ALL\nSELECT \n    'Past' AS type,\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legislators WHERE gender = 'F')) AS percentage\nFROM legislators \nWHERE gender = 'F' AND current = 0\nORDER BY percentage DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8154": {
        "db_id": "sales_in_weather",
        "question": "On the day with the highest max temperature in 2012, how many items in store no.3 had no sales?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.item_nbr) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr AND T1.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.units = 0 GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM items \nWHERE store_id = 3 \nAND item_id NOT IN (\n    SELECT item_id \n    FROM sales \n    WHERE date = (\n        SELECT date \n        FROM weather \n        WHERE year = 2012 \n        ORDER BY max_temperature DESC \n        LIMIT 1\n    )\n)"
        ],
        "rule_sql": []
    },
    "4659": {
        "db_id": "disney",
        "question": "List all the voice actors in the movie directed by Ben Sharpsteen which was released on February 9, 1940.",
        "ground_truth": "SELECT T2.`voice-actor` FROM director AS T1 INNER JOIN `voice-actors` AS T2 INNER JOIN movies_total_gross AS T3 ON T1.name = T2.movie AND T2.movie = T3.movie_title WHERE T1.director = 'Ben Sharpsteen' AND T3.release_date = 'Feb 9, 1940' AND T2.`voice-actor` != 'None' GROUP BY T2.`voice-actor`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT va.name \nFROM voice_actors va\nJOIN movies m ON va.movie_id = m.id\nWHERE m.director = 'Ben Sharpsteen' \nAND m.release_date = 'February 9, 1940';"
        ],
        "rule_sql": []
    },
    "6139": {
        "db_id": "food_inspection_2",
        "question": "How many sanitarian employees in Chicago are from the zip code 60617?",
        "ground_truth": "SELECT COUNT(employee_id) FROM employee WHERE zip = '60617'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE city = 'Chicago' AND zip_code = '60617' AND job_title = 'sanitarian';"
        ],
        "rule_sql": []
    },
    "3375": {
        "db_id": "video_games",
        "question": "How many games were released in 1981?",
        "ground_truth": "SELECT COUNT(T.id) FROM game_platform AS T WHERE T.release_year = 1981",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE release_year = 1980;"
        ],
        "rule_sql": []
    },
    "3015": {
        "db_id": "shakespeare",
        "question": "How many scenes are there in Act 5 of work ID 9?",
        "ground_truth": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM scenes WHERE act_id = 5 AND work_id = 9;"
        ],
        "rule_sql": []
    },
    "3339": {
        "db_id": "video_games",
        "question": "Give the number of games which were published by Ascaron Entertainment GmbH.",
        "ground_truth": "SELECT COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Ascaron Entertainment GmbH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE publisher = 'Ascaron Entertainment GmbH';"
        ],
        "rule_sql": []
    },
    "5221": {
        "db_id": "address",
        "question": "Who are the congress representatives of the postal points in Garfield?",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Garfield'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM congress_representatives WHERE postal_code = 'Garfield';"
        ],
        "rule_sql": []
    },
    "3428": {
        "db_id": "video_games",
        "question": "How many games were released in the year 2001?",
        "ground_truth": "SELECT COUNT(id) FROM game_platform AS T WHERE T.release_year = 2001",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE release_year = 2000;"
        ],
        "rule_sql": []
    },
    "1141": {
        "db_id": "talkingdata",
        "question": "Among all the users who use a vivo device, what is the age of the youngest user?",
        "ground_truth": "SELECT T1.age FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' ORDER BY T1.age LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(age) FROM users WHERE device = 'vivo';"
        ],
        "rule_sql": []
    },
    "3380": {
        "db_id": "video_games",
        "question": "List the game IDs that were released in 2017.",
        "ground_truth": "SELECT T.id FROM game_platform AS T WHERE T.release_year = 2017",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_id FROM games WHERE release_year = 2018;"
        ],
        "rule_sql": []
    },
    "8418": {
        "db_id": "mondial_geo",
        "question": "In which city is the lake located at coordinates longitude -85.35 and latitude 11.6?",
        "ground_truth": "SELECT T2.City FROM lake AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN city AS T4 ON T4.Province = T3.Name WHERE T1.Longitude = -85.35 AND T1.Latitude = 11.6",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM lakes WHERE longitude = 11.6 AND latitude = -85.35;"
        ],
        "rule_sql": []
    },
    "8510": {
        "db_id": "software_company",
        "question": "How many customers have never married?",
        "ground_truth": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Never-married'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE marital_status = 'Married';"
        ],
        "rule_sql": []
    },
    "1703": {
        "db_id": "restaurant",
        "question": "Please list any five cities that have an unidentified county and region.",
        "ground_truth": "SELECT city FROM geographic WHERE county = 'unknown' AND region = 'unknown' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM locations WHERE county IS NULL AND region IS NULL LIMIT 5;"
        ],
        "rule_sql": []
    },
    "3687": {
        "db_id": "college_completion",
        "question": "Name the state with the most number of graduate cohort in 2012 from private institute for profit? List all such institutes in the mentioned state.",
        "ground_truth": "SELECT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T1.control = 'Private for-profit' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state, COUNT(*) as graduate_count \nFROM institutes \nWHERE year = 2012 \nAND type = 'private for profit' \nGROUP BY state \nORDER BY graduate_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "654": {
        "db_id": "codebase_comments",
        "question": "Please provide the path of solution of method whose tokenized name is html parser feed.",
        "ground_truth": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'html parser feed'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT path FROM methods WHERE tokenized_name = 'html parser feed';"
        ],
        "rule_sql": []
    },
    "6772": {
        "db_id": "retails",
        "question": "List the names of the countries with the below-average number of customers in ascending order of customer numbers.",
        "ground_truth": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name HAVING COUNT(T1.c_name) > ( SELECT COUNT(customer.c_name) / COUNT(DISTINCT nation.n_name) FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey ) ORDER BY COUNT(T1.c_name)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(customer_id) as customer_count\nFROM customers\nGROUP BY country\nHAVING COUNT(customer_id) < (SELECT AVG(customer_count) FROM (SELECT COUNT(customer_id) as customer_count FROM customers GROUP BY country))\nORDER BY customer_count ASC;"
        ],
        "rule_sql": []
    },
    "8186": {
        "db_id": "sales_in_weather",
        "question": "What is the most purchased products during the rainy days in June 2013 in weather station 9?",
        "ground_truth": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T3.station_nbr = 9 AND T1.`date` LIKE '%2013-06%' AND codesum = 'RA' ORDER BY T1.units DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_id, COUNT(*) as purchase_count\nFROM purchases p\nJOIN weather w ON p.date = w.date\nWHERE w.station_id = 9\nAND w.weather_condition = 'rainy'\nAND strftime('%Y-%m', p.date) = '2013-06'\nGROUP BY product_id\nORDER BY purchase_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9396": {
        "db_id": "movie_3",
        "question": "List at least 3 cities under the country of Philippines.",
        "ground_truth": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'Philippines'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM cities WHERE country = 'Philippines' LIMIT 2;"
        ],
        "rule_sql": []
    },
    "8459": {
        "db_id": "mondial_geo",
        "question": "What proportion of rivers have a length of more than 3,000 miles? Please provide the name of a Russian river that is more than 3,000 miles long.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.Length > 3000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN country AS T3 ON T3.Code = T2.Country",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM river) AS proportion, name FROM river WHERE country = 'Russia' AND length > 3000 LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7297": {
        "db_id": "works_cycles",
        "question": "How many high-class products are sold by preferred vendors?",
        "ground_truth": "SELECT COUNT(T2.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 USING (ProductID) INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.PreferredVendorStatus = 1 AND T2.Class = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE class = 'high' AND vendor_type = 'preferred';"
        ],
        "rule_sql": []
    },
    "1782": {
        "db_id": "restaurant",
        "question": "How many types of restaurants are there in the Yosemite and Mono Lake area?",
        "ground_truth": "SELECT COUNT(T2.food_type) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'yosemite and mono lake area'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE area = 'Yosemite' OR area = 'Mono Lake';"
        ],
        "rule_sql": []
    },
    "7074": {
        "db_id": "works_cycles",
        "question": "How many active employees do not wish to receive e-mail promotions?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.EmailPromotion = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE active = 1 AND email_promotions = 1;"
        ],
        "rule_sql": []
    },
    "3319": {
        "db_id": "video_games",
        "question": "What is the name of the publisher that has published the most puzzle games?",
        "ground_truth": "SELECT T.publisher_name FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T1.id) DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher_name FROM publishers ORDER BY RANDOM() LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7161": {
        "db_id": "works_cycles",
        "question": "What rating did Jill give for HL Mountain Pedal?",
        "ground_truth": "SELECT T1.Rating FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ReviewerName = 'Jill' AND T2.Name = 'HL Mountain Pedal'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rating FROM ratings WHERE user_name = 'Jill' AND product_name = 'HL Mountain Pedal';"
        ],
        "rule_sql": []
    },
    "6172": {
        "db_id": "food_inspection_2",
        "question": "Among the establishments that failed in the inspection, what is the percentage of establishments with the highest risk level?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 3 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.risk_level) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Fail'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN risk_level = 'High' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM inspections\nWHERE result = 'Fail'\nORDER BY risk_level DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6666": {
        "db_id": "retail_world",
        "question": "Give the full name of employee who handled the order id 10280.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10280",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM employees WHERE order_id = 10280;"
        ],
        "rule_sql": []
    },
    "8727": {
        "db_id": "chicago_crime",
        "question": "Please list any three community areas with a population of more than 50,000.",
        "ground_truth": "SELECT community_area_name FROM Community_Area WHERE population > 50000 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT community_area_name FROM community_areas WHERE population > 50000 LIMIT 3;"
        ],
        "rule_sql": []
    },
    "5010": {
        "db_id": "olympics",
        "question": "How many games has Prithipal Singh participated in?",
        "ground_truth": "SELECT COUNT(T2.games_id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Prithipal Singh'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE name = 'Prithipal Singh';"
        ],
        "rule_sql": []
    },
    "9371": {
        "db_id": "movie_3",
        "question": "Identify the number of movies rented by Maria Miller.",
        "ground_truth": "SELECT COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM rentals WHERE customer_name = 'Maria Miller';"
        ],
        "rule_sql": []
    },
    "5508": {
        "db_id": "menu",
        "question": "What is the occasion for menu with ID 12463?",
        "ground_truth": "SELECT occasion FROM Menu WHERE id = 12463",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT occasion FROM menus WHERE menu_id = 12463;"
        ],
        "rule_sql": []
    },
    "4061": {
        "db_id": "public_review_platform",
        "question": "Please indicate the business id have the closing time with the category of Arts & Entertainment on Sunday.",
        "ground_truth": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM business_hours WHERE day = 'Sunday' AND category = 'Arts & Entertainment';"
        ],
        "rule_sql": []
    },
    "8389": {
        "db_id": "mondial_geo",
        "question": "For all the countries that is smaller than 100 square kilometres, which one has the most GDP?",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area < 100 ORDER BY T2.GDP DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, MAX(gdp) FROM countries WHERE area < 100 ORDER BY gdp DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8309": {
        "db_id": "mondial_geo",
        "question": "Please list the countries that share the shortest border.",
        "ground_truth": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country1, country2 FROM borders ORDER BY length ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1180": {
        "db_id": "talkingdata",
        "question": "Which phone brand and model was used for event ID \"6701\"?",
        "ground_truth": "SELECT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.event_id = 6701",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, model FROM phones WHERE event_id = 6701"
        ],
        "rule_sql": []
    },
    "5336": {
        "db_id": "beer_factory",
        "question": "What is the container type, brand name and star rating for root beer ID 10054?",
        "ground_truth": "SELECT T4.ContainerType, T3.BrandName, T1.StarRating FROM rootbeerreview AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID INNER JOIN rootbeer AS T4 ON T2.RootBeerID = T4.RootBeerID WHERE T2.RootBeerID = 100054",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT container_type, brand_name, star_rating FROM root_beers WHERE id = 10054;"
        ],
        "rule_sql": []
    },
    "3085": {
        "db_id": "cars",
        "question": "Provide the price of the only Toyota Corona hardtop in the database.",
        "ground_truth": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'toyota corona hardtop'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT price FROM cars WHERE make = 'Toyota' AND model = 'Corona' AND body_style = 'hardtop';"
        ],
        "rule_sql": []
    },
    "2860": {
        "db_id": "professional_basketball",
        "question": "What are the basketball players' BMI ranges?",
        "ground_truth": "SELECT MIN(CAST(weight AS REAL) / (height * height)) , MAX(CAST(weight AS REAL) / (height * height)) FROM players",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, (weight / (height * height)) AS bmi FROM basketball_players WHERE bmi BETWEEN 18.5 AND 24.9;"
        ],
        "rule_sql": []
    },
    "1495": {
        "db_id": "synthea",
        "question": "How old was Mrs. Laronda Bernier at the time of her most recent medical encounter?",
        "ground_truth": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Laronda' AND T1.last = 'Bernier' ORDER BY T2.DATE DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age FROM patients WHERE first_name = 'Laronda' AND last_name = 'Bernier' ORDER BY encounter_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9140": {
        "db_id": "movie_3",
        "question": "Among all films that the customer RUTH MARTINEZ has rented, what is the percentage of it being a Music film?",
        "ground_truth": "SELECT CAST(SUM(IIF(T3.name = 'Music', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN inventory AS T4 ON T1.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'RUTH' AND T5.last_name = 'MARTINEZ'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN c.name = 'Music' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM rental r\nJOIN customer cu ON r.customer_id = cu.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE cu.first_name = 'RUTH' AND cu.last_name = 'MARTINEZ'"
        ],
        "rule_sql": []
    },
    "6119": {
        "db_id": "food_inspection_2",
        "question": "What is the full name of the sanitarian who inspected Amundsen High School on 2010/5/11?",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T2.inspection_date = '2010-05-11' AND T3.dba_name = 'AMUNDSEN HIGH SCHOOL' AND T1.title = 'Sanitarian'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name FROM sanitarian WHERE inspection_date = '2010/5/11' AND school_name = 'Amundsen High School'"
        ],
        "rule_sql": []
    },
    "3548": {
        "db_id": "authors",
        "question": "Among author ID of under 1000, who published the paper in affiliation with Zurich, ETH, provide paper ID, year and keyword if any.",
        "ground_truth": "SELECT T2.Id, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId < 1000 AND T1.Affiliation = 'Zurich, ETH'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT paper_id, year, keyword FROM papers WHERE author_id < 1000 AND affiliation = 'Zurich, ETH';"
        ],
        "rule_sql": []
    },
    "3253": {
        "db_id": "donor",
        "question": "What payment method was used for Needed Resource Materials For My Students?",
        "ground_truth": "SELECT T3.payment_method FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Needed Resource Materials For My Students'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT payment_method FROM payments WHERE description = 'Needed Resource Materials For My Students';"
        ],
        "rule_sql": []
    },
    "4651": {
        "db_id": "disney",
        "question": "How many restricted horror movies were released between 1/1/1990 to 12/31/2015?",
        "ground_truth": "SELECT COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'R' AND genre = 'Horror' AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2015",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE genre = 'horror' AND rating = 'restricted' AND release_date BETWEEN '1990-01-01' AND '2015-12-31';"
        ],
        "rule_sql": []
    },
    "6763": {
        "db_id": "retails",
        "question": "List the order key of the orders with a total price between 200000 and 300000.",
        "ground_truth": "SELECT o_orderkey FROM orders WHERE o_totalprice BETWEEN 200000 AND 300000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT orderkey FROM orders WHERE totalprice >= 200000 AND totalprice <= 300000"
        ],
        "rule_sql": []
    },
    "1867": {
        "db_id": "soccer_2016",
        "question": "List the names and countries of the players from Gujarat Lions who played in the match held on 11th April 2016.",
        "ground_truth": "SELECT T4.Player_Name, T5.Country_Name FROM Player_Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_Id INNER JOIN Match AS T3 ON T3.Match_Id = T1.Match_Id INNER JOIN Player AS T4 ON T4.Player_Id = T1.Player_Id INNER JOIN Country AS T5 ON T5.Country_Id = T4.Country_Name WHERE T2.Team_Name = 'Gujarat Lions' AND T3.Match_Date = '2016-04-11'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, country FROM players WHERE team = 'Gujarat Lions' AND match_date = '2016-04-11';"
        ],
        "rule_sql": []
    },
    "7584": {
        "db_id": "image_and_language",
        "question": "List all the object classes of the images that have a (5,5) coordinate.",
        "ground_truth": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 5 AND T1.Y = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT object_class FROM images WHERE x_coordinate = 5 AND y_coordinate = 5;"
        ],
        "rule_sql": []
    },
    "5141": {
        "db_id": "address",
        "question": "What is the longitude and latitude for the district represented by Grayson Alan?",
        "ground_truth": "SELECT T1.latitude, T1.longitude FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Grayson' AND T3.last_name = 'Alan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT longitude, latitude FROM districts WHERE representative = 'Grayson Alan';"
        ],
        "rule_sql": []
    },
    "1589": {
        "db_id": "car_retails",
        "question": "Among the motorcycles with product scale of 1:10, which of them is the most ordered by American customers?",
        "ground_truth": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T1.productLine = 'Motorcycles' AND T1.productScale = '1:10' AND T4.country = 'USA' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT productName, COUNT(*) as orderCount \nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nJOIN orders o ON od.orderNumber = o.orderNumber\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE p.productScale = '1:10' \nAND c.country = 'USA'\nGROUP BY p.productName\nORDER BY orderCount DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2683": {
        "db_id": "regional_sales",
        "question": "List all the cities where Shawn Torres sells Audio products.",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T4.`Product Name` = 'Audio' AND T3.`Sales Team` = 'Shawn Torres' THEN T1.`City Name` ELSE NULL END AS T FROM `Store Locations` T1 INNER JOIN `Sales Orders` T2 ON T2._StoreID = T1.StoreID INNER JOIN `Sales Team` T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products T4 ON T4.ProductID = T2._ProductID ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM sales JOIN products ON sales.product_id = products.product_id WHERE salesperson = 'Shawn Torres' AND product_category = 'Audio';"
        ],
        "rule_sql": []
    },
    "6227": {
        "db_id": "food_inspection_2",
        "question": "Who is the employee that receives 82700 as their salary?",
        "ground_truth": "SELECT first_name, last_name FROM employee WHERE salary = 82700",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE salary = 82700;"
        ],
        "rule_sql": []
    },
    "4525": {
        "db_id": "student_loan",
        "question": "List out the number of disabled students who enlisted in marines.",
        "ground_truth": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE status = 'disabled' AND branch = 'marines';"
        ],
        "rule_sql": []
    },
    "3962": {
        "db_id": "public_review_platform",
        "question": "Which city is the business that got a \"medium\" length tip with \"3\" likes located in?",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Medium' AND T2.likes = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM businesses WHERE tip_length = 'medium' AND likes = 3;"
        ],
        "rule_sql": []
    },
    "343": {
        "db_id": "retail_complains",
        "question": "Among the teenager clients who use Google account and Microsoft account, which group of client is more than the other?",
        "ground_truth": "SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN COUNT(CASE WHEN account_type = 'Google' AND age BETWEEN 13 AND 19 THEN 1 END) > COUNT(CASE WHEN account_type = 'Microsoft' AND age BETWEEN 13 AND 19 THEN 1 END) THEN 'Google'\n        WHEN COUNT(CASE WHEN account_type = 'Microsoft' AND age BETWEEN 13 AND 19 THEN 1 END) > COUNT(CASE WHEN account_type = 'Google' AND age BETWEEN 13 AND 19 THEN 1 END) THEN 'Microsoft'\n        ELSE 'Equal'\n    END AS larger_group\nFROM clients\nWHERE account_type IN ('Google', 'Microsoft') AND age BETWEEN 13 AND 19;"
        ],
        "rule_sql": []
    },
    "2892": {
        "db_id": "professional_basketball",
        "question": "List out all the players fullname who won the championship in 1970.",
        "ground_truth": "SELECT DISTINCT T3.firstName, T3.middleName, T3.lastName FROM series_post AS T1 INNER JOIN players_teams AS T2 ON T1.tmIDWinner = T2.tmID INNER JOIN players AS T3 ON T3.playerID = T2.playerID WHERE T1.year = 1970 AND T1.round = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT fullname FROM players WHERE championship_year = 1970;"
        ],
        "rule_sql": []
    },
    "4368": {
        "db_id": "student_loan",
        "question": "How many students have never been absent from school?",
        "ground_truth": "SELECT COUNT(name) FROM longest_absense_from_school WHERE `month` = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE absences = 0;"
        ],
        "rule_sql": []
    },
    "4917": {
        "db_id": "olympics",
        "question": "Please list the names of all the Olympic competitors from Finland.",
        "ground_truth": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM competitors WHERE country = 'Finland' AND sport = 'Olympics';"
        ],
        "rule_sql": []
    },
    "2334": {
        "db_id": "movielens",
        "question": "What is the most popular genre of film directed by directors?",
        "ground_truth": "SELECT genre FROM movies2directors GROUP BY genre ORDER BY COUNT(movieid) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre, COUNT(*) as count FROM films GROUP BY genre ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4671": {
        "db_id": "disney",
        "question": "What are the characters in the PG movies?",
        "ground_truth": "SELECT DISTINCT T2.character FROM movies_total_gross AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T1.MPAA_rating = 'PG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name FROM movies WHERE rating = 'PG';"
        ],
        "rule_sql": []
    },
    "3025": {
        "db_id": "shakespeare",
        "question": "Provide the character name, paragraph number, and plain text of \"cousin to the king\" description.",
        "ground_truth": "SELECT T1.CharName, T2.ParagraphNum, T2.PlainText FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.Description = 'cousin to the king'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT character_name, paragraph_number, plain_text FROM descriptions WHERE description = 'cousin to the king'"
        ],
        "rule_sql": []
    },
    "7108": {
        "db_id": "works_cycles",
        "question": "How many vendors only consented to move on with the 500 to 15000 piece order in terms of quality?",
        "ground_truth": "SELECT COUNT(*) FROM ProductVendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM vendors WHERE order_pieces = '500 to 15000' AND quality_consent = 'yes';"
        ],
        "rule_sql": []
    },
    "7747": {
        "db_id": "hockey",
        "question": "Among the players whose short handed assists are greater or equal to 7, what is the final standing of the team with the most number of assists? Indicate the year to which the most number of assists was achieved and the name of the team.",
        "ground_truth": "SELECT T2.rank, T2.year, T2.name FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.SHA >= 7 ORDER BY T1.A DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.name, t.year, t.final_standing \nFROM teams t\nJOIN players p ON t.team_id = p.team_id\nWHERE p.short_handed_assists >= 7\nGROUP BY t.team_id\nORDER BY COUNT(p.player_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2953": {
        "db_id": "shakespeare",
        "question": "How many of Shakespeare's works were finished before the year 1602?",
        "ground_truth": "SELECT COUNT(id) FROM works WHERE Date < 1602",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shakespeare_works WHERE year_finished < 1602;"
        ],
        "rule_sql": []
    },
    "5861": {
        "db_id": "airline",
        "question": "On August 2018, which day had the highest number of cancelled flights due to the most serious reasons in Dallas/Fort Worth International?",
        "ground_truth": "SELECT T2.FL_DATE FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' AND T2.ORIGIN = 'DFW' AND T2.CANCELLED = 1 AND T2.CANCELLATION_CODE = 'A' GROUP BY T2.FL_DATE ORDER BY COUNT(T2.FL_DATE) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT date, COUNT(*) as cancelled_flights\nFROM flights\nWHERE airport = 'Dallas/Fort Worth International'\nAND cancellation_reason = 'most serious'\nAND strftime('%Y-%m', date) = '2018-08'\nGROUP BY date\nORDER BY cancelled_flights DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3347": {
        "db_id": "video_games",
        "question": "In 2004, what are the names of the platforms where Codemasters publish its games?",
        "ground_truth": "SELECT T4.platform_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T3.release_year = 2004 AND T1.publisher_name = 'Codemasters'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform_name FROM games WHERE publisher = 'Codemasters' AND year = 2004;"
        ],
        "rule_sql": []
    },
    "3047": {
        "db_id": "shakespeare",
        "question": "Among the works of Shakespeare, how many of them have the word \"Henry\" on its title?",
        "ground_truth": "SELECT COUNT(id) FROM works WHERE Title LIKE '%Henry%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shakespeare_works WHERE title LIKE '%Henry%';"
        ],
        "rule_sql": []
    },
    "3898": {
        "db_id": "public_review_platform",
        "question": "How many active businesses are located at Phoenix, Arizona?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'True'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Phoenix' AND state = 'Arizona';"
        ],
        "rule_sql": []
    },
    "8864": {
        "db_id": "cookbook",
        "question": "Please list the titles of all the recipes that are salt/sodium-free.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.sodium < 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM recipes WHERE sodium = 0;"
        ],
        "rule_sql": []
    },
    "3235": {
        "db_id": "donor",
        "question": "What is the title for the project that got the donation message as \"Donation on behalf of Matt Carpenter because I'm a strong believer in education\".",
        "ground_truth": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM projects WHERE donation_message = 'Donation on behalf of Matt Carpenter because I\\'m a strong believer in education'"
        ],
        "rule_sql": []
    },
    "8730": {
        "db_id": "chicago_crime",
        "question": "Please list all of the contact information for the police district Near West.",
        "ground_truth": "SELECT phone, fax, tty, twitter FROM District WHERE district_name = 'Near West'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM police_stations WHERE district = 'Near West';"
        ],
        "rule_sql": []
    },
    "8355": {
        "db_id": "mondial_geo",
        "question": "Which country is home to the world's tiniest desert, and what are its longitude and latitude?",
        "ground_truth": "SELECT T2.Country, T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert WHERE T1.Name = ( SELECT Name FROM desert ORDER BY Area ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, longitude, latitude FROM deserts WHERE size = 'smallest' ORDER BY size DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1596": {
        "db_id": "car_retails",
        "question": "From which branch does the sales representative employee who made the most sales in 2005? Please indicates its full address and phone number.",
        "ground_truth": "SELECT T3.addressLine1, T3.addressLine2, T3.phone FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber INNER JOIN customers AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN employees AS T4 ON T3.salesRepEmployeeNumber = T4.employeeNumber INNER JOIN offices AS T5 ON T4.officeCode = T5.officeCode WHERE STRFTIME('%Y', T2.orderDate) = '2005' AND T4.jobTitle = 'Sales Rep' ORDER BY T1.quantityOrdered DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT b.branch_name, b.address, b.phone_number\nFROM branches b\nJOIN employees e ON b.branch_id = e.branch_id\nJOIN sales s ON e.employee_id = s.employee_id\nWHERE YEAR(s.sale_date) = 2005\nGROUP BY e.employee_id\nORDER BY COUNT(s.sale_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8803": {
        "db_id": "food_inspection",
        "question": "What percentage of the violations for \"Melody Lounge\" are moderate risks?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.risk_category = 'Moderate Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM businesses AS T1 INNER JOIN violations AS T2 ON T1.business_id = T2.business_id WHERE T1.name = 'Melody Lounge'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN risk_category = 'Moderate Risk' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM violations\nWHERE business_name = 'Melody Lounge';"
        ],
        "rule_sql": []
    },
    "1100": {
        "db_id": "talkingdata",
        "question": "What is the average age of all the vivo device users?",
        "ground_truth": "SELECT AVG(age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(device_age) FROM users WHERE brand = 'vivo';"
        ],
        "rule_sql": []
    },
    "4427": {
        "db_id": "student_loan",
        "question": "Give the number of students who have payment due.",
        "ground_truth": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'pos'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE payment_status = 'paid';"
        ],
        "rule_sql": []
    },
    "8224": {
        "db_id": "mondial_geo",
        "question": "Provide the country with its full name which has the most ethnic group? List them all ethnic group together with its percentage.",
        "ground_truth": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name, e.ethnic_group, e.percentage \nFROM countries c\nJOIN ethnic_groups e ON c.id = e.country_id\nWHERE e.percentage = (SELECT MAX(percentage) FROM ethnic_groups)\nGROUP BY c.name, e.ethnic_group, e.percentage;"
        ],
        "rule_sql": []
    },
    "1587": {
        "db_id": "car_retails",
        "question": "From 2003 to 2004, how many customers have paid more than three times?",
        "ground_truth": "SELECT COUNT(customernumber) FROM ( SELECT customernumber FROM payments WHERE STRFTIME('%Y', paymentDate) >= '2003' AND STRFTIME('%Y', paymentDate) <= '2004' GROUP BY customernumber HAVING COUNT(customernumber) > 3 ) T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE payment_count > 3 AND year BETWEEN 2003 AND 2004;"
        ],
        "rule_sql": []
    },
    "3716": {
        "db_id": "college_completion",
        "question": "How many 2-year public schools are there in \"California\"?",
        "ground_truth": "SELECT COUNT(stateid) FROM state_sector_details WHERE state = 'California' AND level = '2-year' AND control = 'Public'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM schools WHERE state = 'California' AND type = 'public' AND years = 2;"
        ],
        "rule_sql": []
    },
    "2695": {
        "db_id": "regional_sales",
        "question": "What is the least purchased product by stores in the city of Santa Clarita?",
        "ground_truth": "SELECT T1.`Product Name` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Store Locations` AS T3 ON T3.StoreID = T2._StoreID WHERE T3.`City Name` = 'Santa Clarita' GROUP BY T1.`Product Name` ORDER BY COUNT(T1.`Product Name`) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.product_name, COUNT(s.sale_id) as purchase_count\nFROM products p\nJOIN sales s ON p.product_id = s.product_id\nJOIN stores st ON s.store_id = st.store_id\nWHERE st.city = 'Santa Clarita'\nGROUP BY p.product_id\nORDER BY purchase_count ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5168": {
        "db_id": "address",
        "question": "Provide the zip code, city, and congress representative's full names of the area which has highest population in 2020.",
        "ground_truth": "SELECT T1.zip_code, T1.city, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id GROUP BY T2.district ORDER BY T1.population_2020 DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code, city, congress_representative FROM population_data ORDER BY population_2020 DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4269": {
        "db_id": "simpson_episodes",
        "question": "In the crew, who was born in 1962 in California?",
        "ground_truth": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1962' AND birth_region = 'California';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM crew WHERE birth_year = 1962 AND birth_state = 'California';"
        ],
        "rule_sql": []
    },
    "8816": {
        "db_id": "food_inspection",
        "question": "What are the names of the establishments that met all the required standards for 4 consecutive years?",
        "ground_truth": "SELECT DISTINCT T4.name FROM ( SELECT T3.name, T3.years, row_number() OVER (PARTITION BY T3.name ORDER BY T3.years) AS rowNumber FROM ( SELECT DISTINCT name, STRFTIME('%Y', `date`) AS years FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 ) AS T3 ) AS T4 GROUP BY T4.name, date(T4.years || '-01-01', '-' || (T4.rowNumber - 1) || ' years') HAVING COUNT(T4.years) = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM establishments WHERE year = 2019 AND year = 2020 AND year = 2021 AND year = 2022 AND standards_met = 'all';"
        ],
        "rule_sql": []
    },
    "3593": {
        "db_id": "authors",
        "question": "Please provide the full name of the conference where one of the papers of Jean-luc Hainaut were published.",
        "ground_truth": "SELECT DISTINCT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T2.Name = 'Jean-luc Hainaut' LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference_name FROM papers WHERE author = 'Jean-luc Hainaut' LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4993": {
        "db_id": "olympics",
        "question": "How many Olympic games were held in London?",
        "ground_truth": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM olympic_games WHERE city = 'London';"
        ],
        "rule_sql": []
    },
    "7554": {
        "db_id": "image_and_language",
        "question": "How many images include the \"wood\" objects?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'wood'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM images WHERE object = 'wood';"
        ],
        "rule_sql": []
    },
    "9178": {
        "db_id": "movie_3",
        "question": "What are the full names of all the active employees?",
        "ground_truth": "SELECT first_name, last_name FROM staff WHERE active = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM employees WHERE status = 'inactive';"
        ],
        "rule_sql": []
    },
    "2125": {
        "db_id": "world_development_indicators",
        "question": "In the countries for which the latest trade data are from 2013, what was the GDP growth in 2014? List them in the ascending order of GDP.",
        "ground_truth": "SELECT DISTINCT T1.CountryCode, T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorName LIKE 'GDP growth (annual %)' AND T2.year = 2014 AND T2.Value > 0 ORDER BY T2.Value ASC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, gdp_growth_2014 \nFROM countries \nWHERE latest_trade_data_year = 2013 \nORDER BY gdp_growth_2014 ASC;"
        ],
        "rule_sql": []
    },
    "6258": {
        "db_id": "coinmarketcap",
        "question": "State the transaction date and the price when Bitcoin was bottomed?",
        "ground_truth": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT transaction_date, price FROM bitcoin_transactions ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2303": {
        "db_id": "movielens",
        "question": "What is the proportion of action movies directors who are called 'box office success paradox'?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM directors WHERE director_name = 'box office success paradox') AS proportion FROM movies WHERE genre = 'action';"
        ],
        "rule_sql": []
    },
    "3958": {
        "db_id": "public_review_platform",
        "question": "How is the \"noise level\" for the only Yelp business in \u201cMesa\u201d which got a \"Uber\" review count?",
        "ground_truth": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T1.review_count = 'Uber' AND T3.attribute_name = 'Noise Level'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT noise_level FROM yelp_businesses WHERE city = 'Mesa' AND review_count = 'Uber'"
        ],
        "rule_sql": []
    },
    "4767": {
        "db_id": "legislator",
        "question": "What is the numeric ID of Chris Van Hollen on GovTrack.us?",
        "ground_truth": "SELECT T2.govtrack FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM senators WHERE name = 'Chris Van Hollen';"
        ],
        "rule_sql": []
    },
    "9063": {
        "db_id": "bike_share_1",
        "question": "How many bike trips started on the days in September, 2013 with the hottest temperature over 70 degrees Fahrenheit in the area where the zip code is 94107?",
        "ground_truth": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '9/%/2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 70",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM bike_trips bt\nJOIN weather_data wd ON bt.start_date = wd.date\nWHERE strftime('%Y-%m', bt.start_date) = '2013-09'\n  AND wd.temperature > 70\n  AND bt.start_zip_code = 94107\nORDER BY wd.temperature DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2975": {
        "db_id": "shakespeare",
        "question": "What is the description for the character mentioned in paragraph No.640171?",
        "ground_truth": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.id = '640171'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM characters WHERE paragraph_id = 640171"
        ],
        "rule_sql": []
    },
    "5793": {
        "db_id": "language_corpus",
        "question": "Which word has the time of occurrences as 340691?",
        "ground_truth": "SELECT word FROM words WHERE occurrences = 340691",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word FROM word_occurrences WHERE time_of_occurrences = 340691"
        ],
        "rule_sql": []
    },
    "3694": {
        "db_id": "college_completion",
        "question": "Calculate the percentage of Asian students among students of other races who graduated from institution in Alabama in year 2013 within 100 percent of normal / expected time.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.race = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T1.state = 'Alabama'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN race = 'Asian' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_asian\nFROM students\nWHERE state = 'Alabama' \n    AND graduation_year = 2013 \n    AND graduation_time <= 100\n    AND race != 'Asian';"
        ],
        "rule_sql": []
    },
    "1793": {
        "db_id": "soccer_2016",
        "question": "What is the bowling skill of SC Ganguly?",
        "ground_truth": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id WHERE T2.Player_Name = 'SC Ganguly'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bowling_skill FROM players WHERE name = 'SC Ganguly';"
        ],
        "rule_sql": []
    },
    "3936": {
        "db_id": "public_review_platform",
        "question": "List at least 5 users that has received less than 5 low compliments from\nother users.",
        "ground_truth": "SELECT user_id FROM Users_Compliments WHERE number_of_compliments LIKE 'Low' GROUP BY user_id ORDER BY COUNT(number_of_compliments) > 5 LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, COUNT(*) as low_compliments\nFROM compliments\nWHERE compliment_type = 'low'\nGROUP BY user_id\nHAVING COUNT(*) >= 5\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "8079": {
        "db_id": "university",
        "question": "Please list the names of the universities with a score in teaching of over 90 in 2011.",
        "ground_truth": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM universities WHERE teaching > 90 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "8990": {
        "db_id": "bike_share_1",
        "question": "Which trip had the longest duration? State the start and end station.",
        "ground_truth": "SELECT start_station_name, end_station_name FROM trip WHERE duration = ( SELECT MAX(duration) FROM trip )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_station, end_station FROM trips ORDER BY duration DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4636": {
        "db_id": "disney",
        "question": "Which movie is the character Robin Hood in?",
        "ground_truth": "SELECT movie_title FROM characters WHERE hero = 'Robin Hood'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_title FROM characters WHERE character_name = 'Batman';"
        ],
        "rule_sql": []
    },
    "4215": {
        "db_id": "simpson_episodes",
        "question": "List the award name and persons who won the award in 2009.",
        "ground_truth": "SELECT award, person FROM Award WHERE result = 'Winner' AND SUBSTR(year, 1, 4) = '2009';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT award_name, person_name FROM awards WHERE year = 2009;"
        ],
        "rule_sql": []
    },
    "8045": {
        "db_id": "university",
        "question": "What are the top three universities with the most international students?",
        "ground_truth": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id GROUP BY T2.university_name ORDER BY SUM(T1.num_students * T1.pct_international_students / 100) DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_name, COUNT(*) as student_count FROM students WHERE nationality != 'USA' GROUP BY university_name ORDER BY student_count DESC LIMIT 3;"
        ],
        "rule_sql": []
    },
    "6941": {
        "db_id": "ice_hockey_draft",
        "question": "What is the average weight in pounds of all the players with the highest prospects for the draft?",
        "ground_truth": "SELECT CAST(SUM(T2.weight_in_lbs) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.CSS_rank = ( SELECT MAX(CSS_rank) FROM PlayerInfo )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(weight) FROM players WHERE prospect_rating = (SELECT MAX(prospect_rating) FROM players);"
        ],
        "rule_sql": []
    },
    "8696": {
        "db_id": "chicago_crime",
        "question": "List crimes that the FBI has classified as Drug Abuse by their report number.",
        "ground_truth": "SELECT T2.report_no FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T1.title = 'Drug Abuse'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM crimes WHERE classification = 'Drug Abuse' AND agency = 'FBI';"
        ],
        "rule_sql": []
    },
    "7818": {
        "db_id": "hockey",
        "question": "In 1998, How many wins were made by team 'CAR' per game played? Who contributed the most goals? State the player ID.",
        "ground_truth": "SELECT CAST(T1.W AS REAL) / T1.G, T2.playerID FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'CAR' AND T1.year = 1998 GROUP BY T1.W / T1.G, T2.playerID ORDER BY SUM(T2.G) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(wins) / COUNT(DISTINCT game_id) AS wins_per_game,\n    player_id,\n    MAX(goals) AS most_goals\nFROM games \nWHERE team = 'CAR' \n    AND year = 1998\nGROUP BY player_id\nORDER BY most_goals DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7324": {
        "db_id": "works_cycles",
        "question": "Among the employees in Adventure Works, calculate the percentage of them working as sales representatives.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM HumanResources.Employee WHERE JobTitle = 'Sales Representative') AS percentage FROM HumanResources.Employee"
        ],
        "rule_sql": []
    },
    "4692": {
        "db_id": "disney",
        "question": "Among Frank Welker's voice-acted movies, list the movie titles and the total gross when the estimated inflation rate was less than 2.",
        "ground_truth": "SELECT T1.movie_title, T1.total_gross FROM movies_total_gross AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T2.`voice-actor` = 'Frank Welker' AND CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) * 1.0 / CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) * 1.0 < 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, m.total_gross \nFROM movies m\nJOIN voice_actors va ON m.movie_id = va.movie_id\nWHERE va.actor_name = 'Frank Welker'\nAND m.inflation_rate < 2;"
        ],
        "rule_sql": []
    },
    "8201": {
        "db_id": "sales_in_weather",
        "question": "What is the maximum and minimum temperature for station number 1 on 15 January 2012?",
        "ground_truth": "SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND `date` = '2012-01-15'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(temperature), MIN(temperature) FROM weather WHERE station_id = 1 AND date = '2012-01-15';"
        ],
        "rule_sql": []
    },
    "7935": {
        "db_id": "music_platform_2",
        "question": "Which category does the podcast titled 'SciFi Tech Talk' belong to?",
        "ground_truth": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'SciFi Tech Talk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM podcasts WHERE title = 'SciFi Tech Talk';"
        ],
        "rule_sql": []
    },
    "8284": {
        "db_id": "mondial_geo",
        "question": "In which province is the highest volcano mountain located in?",
        "ground_truth": "SELECT T1.Province FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcano' ORDER BY T3.Height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT province FROM volcanoes ORDER BY height ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2506": {
        "db_id": "genes",
        "question": "What type of interactions occurs in genes whose function is cellular transport and transport medicine and are classified as non-essential?",
        "ground_truth": "SELECT T2.Type FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'Non-Essential'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT interaction_type \nFROM gene_interactions \nWHERE gene_function = 'cellular transport' \nAND gene_function = 'transport medicine' \nAND essentiality = 'non-essential';"
        ],
        "rule_sql": []
    },
    "5324": {
        "db_id": "beer_factory",
        "question": "Give me the brewery and brand names of canned root beer that were purchased before 6/6/2015.",
        "ground_truth": "SELECT DISTINCT T2.BreweryName, T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate < '2015-06-06' AND T1.ContainerType = 'Can'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brewery_name, brand_name FROM root_beer WHERE container_type = 'can' AND purchase_date > '2015-06-06';"
        ],
        "rule_sql": []
    },
    "2815": {
        "db_id": "professional_basketball",
        "question": "Between the years 1990 and 2007, of the total rebounds achieved by each player, how many managed to exceed 75% of defensive rebounds?",
        "ground_truth": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE CAST(d_rebounds AS REAL) * 100 / rebounds > 75 AND season_id BETWEEN 1990 AND 2007",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, \n       total_rebounds,\n       defensive_rebounds,\n       (defensive_rebounds * 1.0 / total_rebounds) * 100 AS defensive_percentage\nFROM player_stats\nWHERE year BETWEEN 1990 AND 2007\n  AND defensive_percentage > 75\nORDER BY defensive_percentage DESC;"
        ],
        "rule_sql": []
    },
    "4977": {
        "db_id": "olympics",
        "question": "Which region has the highest medal number?",
        "ground_truth": "SELECT T5.region_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.id != 4 GROUP BY T5.region_name ORDER BY COUNT(T2.competitor_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region, COUNT(*) as medal_count FROM medals GROUP BY region ORDER BY medal_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2451": {
        "db_id": "superstore",
        "question": "Please give the name of customers from the West region that bought exactly 8 items in their purchase.",
        "ground_truth": "SELECT DISTINCT T2.`Customer Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Quantity = 8 AND T1.Region = 'West'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE region = 'West' AND items_purchased = 8;"
        ],
        "rule_sql": []
    },
    "3955": {
        "db_id": "public_review_platform",
        "question": "Provide the number of Yelp businesses in \"Gilbert\" which got a\" high\" review count.",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'High' AND city = 'Gilbert'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Gilbert' AND review_count = 'high';"
        ],
        "rule_sql": []
    },
    "9272": {
        "db_id": "movie_3",
        "question": "What is the title of the films in which Cuba Allen acted?",
        "ground_truth": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Cuba' AND T1.last_name = 'Allen'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE actor = 'Cuba Allen'"
        ],
        "rule_sql": []
    },
    "468": {
        "db_id": "movies_4",
        "question": "What is the title of the highest-budget film to date? Please include the revenue and name the country.",
        "ground_truth": "SELECT T1.title, T1.revenue, T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id ORDER BY T1.budget DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, revenue, country \nFROM films \nORDER BY budget DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8238": {
        "db_id": "mondial_geo",
        "question": "Among the countries with more than 3% population growth rate, state the country name in full along with its GDP.",
        "ground_truth": "SELECT T1.Name, T3.GDP FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Population_Growth > 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name, gdp FROM countries WHERE population_growth_rate > 3;"
        ],
        "rule_sql": []
    },
    "2647": {
        "db_id": "regional_sales",
        "question": "List all the name of products with the ID of 30 to 40.",
        "ground_truth": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN `Product Name` ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE id BETWEEN 30 AND 40;"
        ],
        "rule_sql": []
    },
    "3017": {
        "db_id": "shakespeare",
        "question": "How many chapters are there in \"Midsummer Night's Dream\"?",
        "ground_truth": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Midsummer Night''s Dream'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM chapters WHERE book_title = 'Midsummer Night''s Dream';"
        ],
        "rule_sql": []
    },
    "4545": {
        "db_id": "student_loan",
        "question": "Among all students, calculate the percentage of male students.",
        "ground_truth": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM students WHERE gender = 'male')) AS male_percentage FROM students;"
        ],
        "rule_sql": []
    },
    "8881": {
        "db_id": "cookbook",
        "question": "Which recipe needs the most frozen raspberries in light syrup? State its title.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'frozen raspberries in light syrup' AND T2.max_qty = T2.min_qty",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM recipes ORDER BY frozen_raspberries_in_light_syrup DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4102": {
        "db_id": "public_review_platform",
        "question": "List by ID the businesses with the reviews with the lowest veracity of Paradise Valley.",
        "ground_truth": "SELECT business_id FROM Business WHERE stars > 3 AND city = 'Paradise Valley' AND review_count = 'Low'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id FROM businesses WHERE city = 'Paradise Valley' ORDER BY veracity ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3817": {
        "db_id": "public_review_platform",
        "question": "How many businesses in the fashion industry are rated 5 stars?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 5 AND T3.category_name LIKE 'Fashion'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE industry = 'fashion' AND rating = 5;"
        ],
        "rule_sql": []
    },
    "1344": {
        "db_id": "law_episode",
        "question": "What is the average ranking episodes that are nominated for an award?",
        "ground_truth": "SELECT SUM(T1.rating) / COUNT(T1.episode) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(ranking) FROM episodes WHERE award_nominated = 'yes';"
        ],
        "rule_sql": []
    },
    "5375": {
        "db_id": "sales",
        "question": "What is the last name of the customer who placed an order for sales id 178?",
        "ground_truth": "SELECT T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesID = 178",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.sales_id = 178;"
        ],
        "rule_sql": []
    },
    "3449": {
        "db_id": "video_games",
        "question": "Which platform is the most popular in Europe?",
        "ground_truth": "SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform FROM games WHERE region = 'Europe' ORDER BY sales DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3228": {
        "db_id": "donor",
        "question": "State the number of public magnet schools in New York Manhattan.",
        "ground_truth": "SELECT COUNT(schoolid) FROM projects WHERE school_county = 'New York (Manhattan)' AND school_magnet = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM schools WHERE type = 'magnet' AND city = 'New York' AND borough = 'Manhattan' AND public = 'yes';"
        ],
        "rule_sql": []
    },
    "641": {
        "db_id": "codebase_comments",
        "question": "What is the percentage of Forks to Stars of repository for solution \"104086\"?",
        "ground_truth": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (Forks / Stars) * 100 AS percentage FROM repositories WHERE solution_id = '104086';"
        ],
        "rule_sql": []
    },
    "9061": {
        "db_id": "bike_share_1",
        "question": "How many bikes can be borrowed in San Jose Diridon Caltrain Station at 12:06:01 on 2013/8/29?",
        "ground_truth": "SELECT T2.bikes_available FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 12:06:01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM bikes WHERE station = 'San Jose Diridon Caltrain Station' AND time = '12:06:01' AND date = '2013/8/29';"
        ],
        "rule_sql": []
    },
    "4661": {
        "db_id": "disney",
        "question": "How many horror movies are there?",
        "ground_truth": "SELECT COUNT(movie_title) FROM `movies_total_gross` WHERE genre = 'Horror'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE genre = 'comedy';"
        ],
        "rule_sql": []
    },
    "1142": {
        "db_id": "talkingdata",
        "question": "Please list the app IDs of all the users in the Securities category.",
        "ground_truth": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Securities'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id FROM apps WHERE category = 'Securities';"
        ],
        "rule_sql": []
    },
    "2332": {
        "db_id": "movielens",
        "question": "How many of the worst actors are men and how many of the worst actors are women? Indicate your answer in ratio form.",
        "ground_truth": "SELECT CAST(SUM(IIF(a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(a_gender = 'F', 1, 0)) FROM actors WHERE a_quality = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(CASE WHEN gender = 'male' THEN 1 END) AS male_count,\n    COUNT(CASE WHEN gender = 'female' THEN 1 END) AS female_count,\n    COUNT(CASE WHEN gender = 'male' THEN 1 END) || ':' || COUNT(CASE WHEN gender = 'female' THEN 1 END) AS ratio\nFROM actors\nWHERE rating < 5;"
        ],
        "rule_sql": []
    },
    "5906": {
        "db_id": "airline",
        "question": "What are the air carriers of the flights that flew on August 25, 2018 that have departure delay of -5?",
        "ground_truth": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.FL_DATE = '2018/8/25' GROUP BY T1.Description",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT carrier FROM flights WHERE date = '2018-08-25' AND departure_delay = -5;"
        ],
        "rule_sql": []
    },
    "5096": {
        "db_id": "address",
        "question": "What is the area code of the city with the female median age over 32 years old?",
        "ground_truth": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN ZIP_Data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.female_median_age > 32 GROUP BY T1.area_code",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT area_code FROM cities WHERE female_median_age > 32;"
        ],
        "rule_sql": []
    },
    "1698": {
        "db_id": "restaurant",
        "question": "What percentage of restaurants in Monterey County have Mexican food?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.food_type = 'mexican', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'monterey county'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM restaurants)) AS percentage\nFROM restaurants \nWHERE county = 'Monterey' AND cuisine = 'Mexican';"
        ],
        "rule_sql": []
    },
    "3811": {
        "db_id": "public_review_platform",
        "question": "How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count.",
        "ground_truth": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(DISTINCT c.city) AS total_cities,\n    (COUNT(DISTINCT CASE WHEN r.stars < 3 THEN c.city END) * 100.0 / COUNT(DISTINCT c.city)) AS percentage_low_review_cities\nFROM business b\nJOIN category cat ON b.id = cat.business_id\nJOIN city c ON b.city_id = c.id\nJOIN review r ON b.id = r.business_id\nWHERE cat.category = 'Active Life'\nAND b.is_open = 1;"
        ],
        "rule_sql": []
    },
    "3894": {
        "db_id": "public_review_platform",
        "question": "What is the attribute value of an active business with a high review count and 3 stars which is located at Mesa, AZ?",
        "ground_truth": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT attribute_value FROM businesses WHERE city = 'Mesa' AND state = 'AZ' AND stars = 3 AND review_count > 100 AND is_active = 1"
        ],
        "rule_sql": []
    },
    "5264": {
        "db_id": "beer_factory",
        "question": "What is the percentage of 5 star ratings River City brand root beer get?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.StarRating = 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.StarRating) FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'River City'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM ratings WHERE brand = 'River City' AND root_beer = 1)) AS percentage\nFROM ratings \nWHERE brand = 'River City' \nAND root_beer = 1 \nAND rating = 5;"
        ],
        "rule_sql": []
    },
    "4174": {
        "db_id": "simpson_episodes",
        "question": "What is the percentage of Primetime Emmy nominated episodes with a rating over 7 to all the episodes that have a rating over 7?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.award_category = 'Primetime Emmy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating > 7 AND T1.result = 'Nominee';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN rating > 7 AND Primetime_Emmy_nomination = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM episodes\nWHERE rating > 7;"
        ],
        "rule_sql": []
    },
    "6097": {
        "db_id": "books",
        "question": "Provide the title of the books published in British-English.",
        "ground_truth": "SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE language = 'British-English';"
        ],
        "rule_sql": []
    },
    "7062": {
        "db_id": "works_cycles",
        "question": "How many male employees have the job position of sales person?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'SP'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE gender = 'female' AND job_position = 'sales person';"
        ],
        "rule_sql": []
    },
    "5622": {
        "db_id": "shipping",
        "question": "Where was shipment no. 1002 headed?",
        "ground_truth": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT destination FROM shipments WHERE shipment_id = 1001;"
        ],
        "rule_sql": []
    },
    "7196": {
        "db_id": "works_cycles",
        "question": "State the last name and job title of owner for document \"Crank Arm and Tire Maintenance\".",
        "ground_truth": "SELECT T1.LastName, T3.JobTitle FROM Person AS T1 INNER JOIN Document AS T2 ON T1.BusinessEntityID = T2.Owner INNER JOIN Employee AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Title = 'Crank Arm and Tire Maintenance'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name, job_title FROM owners WHERE document_name = 'Crank Arm and Tire Maintenance'"
        ],
        "rule_sql": []
    },
    "6048": {
        "db_id": "books",
        "question": "How many books written by Akira Watanabe are available on Gravity?",
        "ground_truth": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'Akira Watanabe'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books WHERE author = 'Akira Watanabe' AND publisher = 'Gravity';"
        ],
        "rule_sql": []
    },
    "6717": {
        "db_id": "retails",
        "question": "What are the countries in the region of Asia?",
        "ground_truth": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM countries WHERE region = 'Europe';"
        ],
        "rule_sql": []
    },
    "6244": {
        "db_id": "food_inspection_2",
        "question": "How many of the inspections with serious point levels have no fines?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM inspections \nWHERE point_level = 'serious' \nAND fine_amount IS NULL;"
        ],
        "rule_sql": []
    },
    "6878": {
        "db_id": "retails",
        "question": "Among all the parts under the type \"promo brushed steel\", how many of them have a total available quantity from all suppliers of under 5000?",
        "ground_truth": "SELECT SUM(num) FROM ( SELECT COUNT(T3.s_name) AS num FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_type = 'PROMO BRUSHED STEEL' GROUP BY T2.ps_partkey HAVING SUM(T2.ps_availqty) < 5000 ) T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM parts \nWHERE type = 'promo brushed steel' \nAND quantity < 5000;"
        ],
        "rule_sql": []
    },
    "4536": {
        "db_id": "student_loan",
        "question": "How many students are enlisted to the air force?",
        "ground_truth": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE branch = 'Navy';"
        ],
        "rule_sql": []
    },
    "421": {
        "db_id": "movies_4",
        "question": "What is the average revenue of the movie in which Dariusz Wolski works as the director of photography?",
        "ground_truth": "SELECT CAST(SUM(T1.revenue) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(revenue) FROM movies WHERE director_of_photography = 'Dariusz Wolski'"
        ],
        "rule_sql": []
    },
    "7192": {
        "db_id": "works_cycles",
        "question": "Among the sales people, who are hired prior to 2010?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM sales_people WHERE hire_date > '2010-01-01';"
        ],
        "rule_sql": []
    },
    "4518": {
        "db_id": "student_loan",
        "question": "Calculate the ratio of unemployed students who have never been absent from school.",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.month = 0, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM students WHERE employment_status = 'unemployed') AS ratio\nFROM students \nWHERE employment_status = 'unemployed' AND absences = 0;"
        ],
        "rule_sql": []
    },
    "4897": {
        "db_id": "legislator",
        "question": "What is the full official name of the current legislator that has served for the most number of terms?",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.bioguide ORDER BY COUNT(T2.bioguide) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM legislators ORDER BY terms_served DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2822": {
        "db_id": "professional_basketball",
        "question": "What is the name of the coach during whose period of coaching, a team has the most numbers of games won in the post-season games?",
        "ground_truth": "SELECT coachID FROM coaches ORDER BY post_wins DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM coaches c\nJOIN teams t ON c.team_id = t.team_id\nJOIN post_season_games psg ON t.team_id = psg.team_id\nWHERE psg.result = 'win'\nGROUP BY c.coach_id\nORDER BY COUNT(psg.game_id) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3294": {
        "db_id": "donor",
        "question": "Which item provided for projects with Mathematics as a primary subject is the most expensive?",
        "ground_truth": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Mathematics' ORDER BY T1.item_unit_price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT item_name, MAX(price) FROM project_items WHERE subject = 'Mathematics' GROUP BY item_name ORDER BY price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3644": {
        "db_id": "authors",
        "question": "List all of the papers written by the author \"Karin Rengefors.\"",
        "ground_truth": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Karin Rengefors'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM papers WHERE author = 'Karin Rengefors';"
        ],
        "rule_sql": []
    },
    "5962": {
        "db_id": "books",
        "question": "What is the language of the book with ISBN 23755004321?",
        "ground_truth": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.isbn13 = 23755004321",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE isbn = '23755004321';"
        ],
        "rule_sql": []
    },
    "3612": {
        "db_id": "authors",
        "question": "List all the title of the paper that Jianli Hua published.",
        "ground_truth": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jianli Hua'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM papers WHERE author = 'Jianli Hua';"
        ],
        "rule_sql": []
    },
    "5484": {
        "db_id": "menu",
        "question": "How many dishes are there in total in the menus with the name \"Waldorf Astoria\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.name = 'Waldorf Astoria' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM menus WHERE name = 'Waldorf Astoria';"
        ],
        "rule_sql": []
    },
    "7779": {
        "db_id": "hockey",
        "question": "Which coach was the first one to teach the Montreal Canadiens, please give his first name.",
        "ground_truth": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' ORDER BY T1.year LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM coaches WHERE team = 'Montreal Canadiens' ORDER BY start_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8016": {
        "db_id": "university",
        "question": "Calculate the total number of students in universities located in Sweden.",
        "ground_truth": "SELECT SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Sweden'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE country = 'Sweden';"
        ],
        "rule_sql": []
    },
    "1289": {
        "db_id": "law_episode",
        "question": "How many people were not credited at the end of the \"Admissions\" episode?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Admissions' AND T2.credited = 'false'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE credited = 0 AND episode = 'Admissions';"
        ],
        "rule_sql": []
    },
    "827": {
        "db_id": "social_media",
        "question": "Tweet with ID tw-682723090279841798 was posted from which country?",
        "ground_truth": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM tweets WHERE tweet_id = 'tw-682723090279841798';"
        ],
        "rule_sql": []
    },
    "5174": {
        "db_id": "address",
        "question": "Provide the zip codes and their affiliated organization for the postal point under Kingsport-Bristol, TN-VA.",
        "ground_truth": "SELECT T2.zip_code, T2.organization FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Kingsport-Bristol, TN-VA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code, organization FROM postal_points WHERE city = 'Kingsport-Bristol' AND state = 'TN-VA';"
        ],
        "rule_sql": []
    },
    "1371": {
        "db_id": "synthea",
        "question": "According to all the observations of Elly Koss, what was her average weight?",
        "ground_truth": "SELECT AVG(T2.VALUE), T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Weight'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(weight) FROM observations WHERE name = 'Elly Koss';"
        ],
        "rule_sql": []
    },
    "8417": {
        "db_id": "mondial_geo",
        "question": "In which city is the sea whose depth is 4232 meters less than that of the Bay of Bengal?",
        "ground_truth": "SELECT T2.City FROM sea AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Sea INNER JOIN city AS T3 ON T3.Name = T2.City WHERE ( SELECT Depth FROM sea WHERE Name LIKE '%Bengal%' ) - T1.Depth = 4235",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM seas WHERE depth = (SELECT depth FROM seas WHERE name = 'Bay of Bengal') - 4232;"
        ],
        "rule_sql": []
    },
    "8879": {
        "db_id": "cookbook",
        "question": "How many times do seedless red grapes appear in the recipes?",
        "ground_truth": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'seedless red grapes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM recipes WHERE ingredient = 'seedless red grapes';"
        ],
        "rule_sql": []
    },
    "7485": {
        "db_id": "image_and_language",
        "question": "How many images have at least one pair of object samples with the relation \"parked on\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT image_id) \nFROM object_relations \nWHERE relation_type = 'parked on';"
        ],
        "rule_sql": []
    },
    "2828": {
        "db_id": "professional_basketball",
        "question": "Among the players from the NBL league, how many of them were born in Spencer?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Spencer' AND T2.lgID = 'NBL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE league = 'NBL' AND birth_city = 'Spencer';"
        ],
        "rule_sql": []
    },
    "5257": {
        "db_id": "beer_factory",
        "question": "What is the phone number of the customer who owns the credit card of number 6011179359005380?",
        "ground_truth": "SELECT DISTINCT T1.PhoneNumber FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardNumber = 6011179359005382",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM customers WHERE credit_card_number = '6011179359005380';"
        ],
        "rule_sql": []
    },
    "1367": {
        "db_id": "synthea",
        "question": "What medication did Elly Koss take when she had Streptococcal sore throat?",
        "ground_truth": "SELECT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.reasondescription = 'Streptococcal sore throat (disorder)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medication_name FROM medications WHERE patient_name = 'Elly Koss' AND diagnosis = 'Streptococcal sore throat';"
        ],
        "rule_sql": []
    },
    "8980": {
        "db_id": "human_resources",
        "question": "List the full name and social security number of the account representative with average performance.",
        "ground_truth": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Average'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT full_name, social_security_number FROM account_representatives WHERE performance = 'average';"
        ],
        "rule_sql": []
    },
    "2723": {
        "db_id": "regional_sales",
        "question": "In the West, how many stores are there in the city whose land area is below 20,000,000?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.`Land Area` < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stores s JOIN cities c ON s.city_id = c.city_id WHERE c.region = 'West' AND c.land_area > 20000000;"
        ],
        "rule_sql": []
    },
    "949": {
        "db_id": "cs_semester",
        "question": "List the full name of the professors who advised students with intelligence 1.",
        "ground_truth": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.intelligence = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.first_name, p.last_name FROM professors p JOIN students s ON p.professor_id = s.advisor_id WHERE s.intelligence = 1;"
        ],
        "rule_sql": []
    },
    "774": {
        "db_id": "movie",
        "question": "Among the movies with drama genre, what is the percentage of the actors with net worth greater than $400,000,000.00?",
        "ground_truth": "SELECT SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 400000000 THEN 1 ELSE 0 END) - SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) < 400000000 THEN 1 ELSE 0 END) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Drama'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(DISTINCT CASE WHEN a.net_worth > 400000000 THEN a.actor_id END) * 100.0 / COUNT(DISTINCT a.actor_id)) AS percentage\nFROM actors a\nJOIN movie_actors ma ON a.actor_id = ma.actor_id\nJOIN movies m ON ma.movie_id = m.movie_id\nWHERE m.genre = 'Drama';"
        ],
        "rule_sql": []
    },
    "8554": {
        "db_id": "software_company",
        "question": "Of customers who provide other services, how many are from places where inhabitants are more than 20000?",
        "ground_truth": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM customers c\nJOIN services s ON c.customer_id = s.customer_id\nWHERE s.service_type = 'other'\nAND c.population > 20000;"
        ],
        "rule_sql": []
    },
    "9243": {
        "db_id": "movie_3",
        "question": "List the address in Texas in the ascending order of city id.",
        "ground_truth": "SELECT address FROM address WHERE district = 'Texas' AND city_id = ( SELECT MIN(city_id) FROM address WHERE district = 'Texas' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM locations WHERE state = 'Texas' ORDER BY city_id DESC;"
        ],
        "rule_sql": []
    },
    "9053": {
        "db_id": "bike_share_1",
        "question": "What is the average duration of trips that ended on a foggy day?",
        "ground_truth": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Fog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(duration) FROM trips WHERE weather_condition = 'foggy';"
        ],
        "rule_sql": []
    },
    "703": {
        "db_id": "trains",
        "question": "Please list the shapes of all the head cars on the trains that run in the east direction.",
        "ground_truth": "SELECT T1.shape FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.position = 1 GROUP BY T1.shape",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shape FROM trains WHERE direction = 'east' AND position = 'head'"
        ],
        "rule_sql": []
    },
    "5284": {
        "db_id": "beer_factory",
        "question": "List the brands of root beer produced by Dr Pepper Snapple Group and calculate their percentage of purchases between 2014 to 2016.",
        "ground_truth": "SELECT T1.BrandName , CAST(SUM(CASE WHEN T2.PurchaseDate >= '2014-01-01' AND T2.PurchaseDate <= '2016-12-31' THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.BrandID) AS purchase FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BreweryName = 'Dr Pepper Snapple Group' GROUP BY T2.BrandID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT brand, \n       (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM purchases WHERE purchase_date BETWEEN '2014-01-01' AND '2016-12-31')) AS percentage\nFROM products\nWHERE manufacturer = 'Dr Pepper Snapple Group' AND category = 'root beer'\nGROUP BY brand\nORDER BY percentage DESC;"
        ],
        "rule_sql": []
    },
    "8878": {
        "db_id": "cookbook",
        "question": "Which recipe in the database contains the most total fat? Give its title.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM recipes ORDER BY fat DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4489": {
        "db_id": "student_loan",
        "question": "List any five female students' names who enlisted for the air force.",
        "ground_truth": "SELECT T1.name FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T2.name IS NULL AND T1.organ = 'air_force' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE gender = 'male' AND branch = 'air force' LIMIT 5;"
        ],
        "rule_sql": []
    },
    "3667": {
        "db_id": "authors",
        "question": "Provide the name of the author who is affiliated with the organization named 'ABB Electrical Machines'.",
        "ground_truth": "SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM authors WHERE organization = 'ABB Electrical Machines';"
        ],
        "rule_sql": []
    },
    "8527": {
        "db_id": "software_company",
        "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are teenagers?",
        "ground_truth": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age >= 13 AND T1.age <= 19 AND T2.RESPONSE = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE customer_id <= 60000 AND response = 'true' AND age < 20;"
        ],
        "rule_sql": []
    },
    "4648": {
        "db_id": "disney",
        "question": "The character Donald Duck has appeared in two Disney movies, which one has more grossing?",
        "ground_truth": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Donald Duck' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS REAL) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_title, gross_revenue \nFROM disney_movies \nWHERE characters LIKE '%Donald Duck%' \nORDER BY gross_revenue DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7819": {
        "db_id": "world",
        "question": "Which country has the shortest life expectancy?",
        "ground_truth": "SELECT Name FROM Country ORDER BY LifeExpectancy LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM countries ORDER BY life_expectancy DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6679": {
        "db_id": "retails",
        "question": "Please list the order keys of all the orders made by a customer whose account is in debt.",
        "ground_truth": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_key FROM orders WHERE customer_id IN (SELECT customer_id FROM accounts WHERE balance > 0);"
        ],
        "rule_sql": []
    },
    "6851": {
        "db_id": "retails",
        "question": "List the phone numbers of suppliers from Japan.",
        "ground_truth": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM suppliers WHERE country = 'Japan';"
        ],
        "rule_sql": []
    },
    "6197": {
        "db_id": "food_inspection_2",
        "question": "What is the job title of employee who did inspection ID 52269?",
        "ground_truth": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52269",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT job_title FROM employees WHERE inspection_id = 52269;"
        ],
        "rule_sql": []
    },
    "3074": {
        "db_id": "cars",
        "question": "What is the maximum acceleration of a car with price over $40000?",
        "ground_truth": "SELECT MAX(T1.acceleration) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(acceleration) FROM cars WHERE price > 40000;"
        ],
        "rule_sql": []
    },
    "645": {
        "db_id": "codebase_comments",
        "question": "Please provide the id of the solution whose repository has the most watchers.",
        "ground_truth": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT MAX(Watchers) FROM Repo )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM solutions ORDER BY watchers DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1339": {
        "db_id": "law_episode",
        "question": "What is the difference of 10 stars votes between the first episode and the last episode?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.episode = 24 THEN T1.votes ELSE 0 END) - SUM(CASE WHEN T2.episode = 1 THEN T1.votes ELSE 0 END) FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT votes_10_stars FROM episodes WHERE episode_number = 1) - \n    (SELECT votes_10_stars FROM episodes WHERE episode_number = (SELECT MAX(episode_number) FROM episodes)) \nAS difference_in_10_star_votes;"
        ],
        "rule_sql": []
    },
    "9187": {
        "db_id": "movie_3",
        "question": "What is the full name of the actor who starred in most movies?",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.first_name, a.last_name, COUNT(*) as movie_count\nFROM actors a\nJOIN movie_actors ma ON a.actor_id = ma.actor_id\nGROUP BY a.actor_id\nORDER BY movie_count DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5897": {
        "db_id": "airline",
        "question": "Among the flights with air carrier described as Asap Air Inc.: ASP, what is the tail number of the flight with the longest departure delay?",
        "ground_truth": "SELECT T2.TAIL_NUM FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Tail_Number FROM flights WHERE Air_Carrier = 'Asap Air Inc.: ASP' ORDER BY Departure_Delay DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8977": {
        "db_id": "human_resources",
        "question": "Which city and address has zip code of above 90000?",
        "ground_truth": "SELECT locationcity, address FROM location WHERE zipcode > 90000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, address FROM locations WHERE zip_code > 90000;"
        ],
        "rule_sql": []
    },
    "8099": {
        "db_id": "university",
        "question": "For the University of Southampton in 2015, on which criteria did it score the best?",
        "ground_truth": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Southampton' AND T2.year = 2015 ORDER BY T2.score DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT criteria FROM university_scores WHERE university = 'University of Southampton' AND year = 2015 ORDER BY score DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6288": {
        "db_id": "coinmarketcap",
        "question": "When is the highest closed price of CHNCoin?",
        "ground_truth": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'CHNCoin' ORDER BY T2.close DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(open_price) FROM stocks WHERE symbol = 'CHNCoin';"
        ],
        "rule_sql": []
    },
    "1277": {
        "db_id": "law_episode",
        "question": "How many people gave the most enjoyed episode a 10-star rating?",
        "ground_truth": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM ratings WHERE episode_id = (SELECT episode_id FROM episodes ORDER BY enjoyment_score DESC LIMIT 1) AND rating = 10;"
        ],
        "rule_sql": []
    },
    "7401": {
        "db_id": "works_cycles",
        "question": "Where can I get the demographic information about the Valley Bicycle Specialists store?",
        "ground_truth": "SELECT Demographics FROM Store WHERE Name = 'Valley Bicycle Specialists'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM store_demographics WHERE store_name = 'Valley Bicycle Specialists';"
        ],
        "rule_sql": []
    },
    "8443": {
        "db_id": "mondial_geo",
        "question": "What province did the river Klaeaelv travel through and how long is the river?",
        "ground_truth": "SELECT T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Klaraelv'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT province, length FROM rivers WHERE name = 'Klaeaelv';"
        ],
        "rule_sql": []
    },
    "929": {
        "db_id": "cs_semester",
        "question": "Give the student's last name that gave the highest student satisfaction for the course \"Intro to Database 2\".",
        "ground_truth": "SELECT T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to Database 2' ORDER BY T2.sat DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.last_name \nFROM students s\nJOIN student_satisfaction ss ON s.student_id = ss.student_id\nJOIN courses c ON ss.course_id = c.course_id\nWHERE c.course_name = 'Intro to Database 2'\nORDER BY ss.satisfaction_score ASC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "2906": {
        "db_id": "professional_basketball",
        "question": "How many times between 1975 and 1980 did the player abdulka01 play for LAL?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.year) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'LAL' AND T2.year BETWEEN 1975 AND 1980 AND T1.playerID = 'abdulka01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM player_teams \nWHERE playerID = 'abdulka01' \nAND teamID = 'LAL' \nAND yearID BETWEEN 1975 AND 1980;"
        ],
        "rule_sql": []
    },
    "5032": {
        "db_id": "olympics",
        "question": "What is the percentage of female competitors whose heights are over 170 that participated in the game in 1988?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' AND T3.height > 170 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_year = 1988",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM competitors WHERE gender = 'F')) AS percentage\nFROM competitors \nWHERE gender = 'F' AND height > 170 AND year = 1988;"
        ],
        "rule_sql": []
    },
    "3127": {
        "db_id": "cars",
        "question": "Among the cars produced in 1975, provide IDs, names, and producing countries of the cars with the maximum number of cylinders.",
        "ground_truth": "SELECT T1.ID, T1.car_name, T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1975 ORDER BY T1.cylinders DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT car_id, name, country, cylinders FROM cars WHERE year = 1975 ORDER BY cylinders ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2605": {
        "db_id": "regional_sales",
        "question": "How many orders have order date in 5/31/2018?",
        "ground_truth": "SELECT SUM(IIF(OrderDate = '5/31/18', 1, 0)) FROM `Sales Orders`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE order_date = '2018-31-5';"
        ],
        "rule_sql": []
    },
    "2937": {
        "db_id": "professional_basketball",
        "question": "Which team that didn't play in playoffs had the most total rebounds in the year 1997?",
        "ground_truth": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 1997 ORDER BY T1.rebounds DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, SUM(total_rebounds) as total_rebounds\nFROM team_stats\nWHERE year = 1997\nGROUP BY team_name\nORDER BY total_rebounds DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8956": {
        "db_id": "human_resources",
        "question": "Who is the employee in \u201cNew York City\u201d with a good performance? Give the social security number of the employee.",
        "ground_truth": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'New York City' AND T1.performance = 'Good'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ssn FROM employees WHERE city = 'New York City' AND performance = 'good';"
        ],
        "rule_sql": []
    },
    "2949": {
        "db_id": "professional_basketball",
        "question": "Which team had the most same starting players througout the season? Give the full name of the team.",
        "ground_truth": "SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = T2.GS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name \nFROM teams \nWHERE player_count = (SELECT MAX(player_count) FROM teams) \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "661": {
        "db_id": "codebase_comments",
        "question": "How many more stars in percentage are there for the repository of solution \"1\" than solution \"2\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ((s1.stars - s2.stars) / s2.stars) * 100 AS percentage_difference\nFROM solutions s1, solutions s2\nWHERE s1.name = '1' AND s2.name = '2';"
        ],
        "rule_sql": []
    },
    "4895": {
        "db_id": "legislator",
        "question": "Please list the full official names of all the current legislators who served the term that started on 2013/1/3.",
        "ground_truth": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM legislators WHERE term_start = '2013/1/3' AND current = 1;"
        ],
        "rule_sql": []
    },
    "6022": {
        "db_id": "books",
        "question": "Who published the book \"The Secret Garden\"?",
        "ground_truth": "SELECT DISTINCT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Secret Garden'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author FROM books WHERE title = 'The Secret Garden';"
        ],
        "rule_sql": []
    },
    "6161": {
        "db_id": "food_inspection_2",
        "question": "Give the address of the schools that passed the inspection in March 2010.",
        "ground_truth": "SELECT DISTINCT T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-03' AND T2.results = 'Pass' AND T1.facility_type = 'School'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM schools WHERE inspection_date LIKE '2010-03%' AND inspection_result = 'passed';"
        ],
        "rule_sql": []
    },
    "2448": {
        "db_id": "superstore",
        "question": "Who order from the west region on August 12, 2013, and received a discount of 0.2?",
        "ground_truth": "SELECT DISTINCT T2.`Customer Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Order Date` = '2013-08-12' AND T1.Discount = 0.2 AND T1.Region = 'West'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM orders WHERE region = 'west' AND order_date = '2013-08-12' AND discount = 0.2;"
        ],
        "rule_sql": []
    },
    "884": {
        "db_id": "cs_semester",
        "question": "Who were the students who failed the course \"Applied Deep Learning\"? Give the full name.",
        "ground_truth": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM students WHERE course = 'Applied Deep Learning' AND grade = 'F';"
        ],
        "rule_sql": []
    },
    "1291": {
        "db_id": "law_episode",
        "question": "How many roles did Julia Roberts play in the series?",
        "ground_truth": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Julia Roberts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actors WHERE name = 'Julia Roberts';"
        ],
        "rule_sql": []
    },
    "5259": {
        "db_id": "beer_factory",
        "question": "For the customer who leaves the review content of \"Tastes like Australia.\", when was his/her first purchase date?",
        "ground_truth": "SELECT T1.FirstPurchaseDate FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Review = 'Tastes like Australia.'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(purchase_date) FROM customers c JOIN reviews r ON c.customer_id = r.customer_id WHERE r.review_content = 'Tastes like Australia.'"
        ],
        "rule_sql": []
    },
    "3072": {
        "db_id": "cars",
        "question": "Among the cars with an acceleration of over 10 miles per squared hour, how many of them cost more than $20000 and less than $30000?",
        "ground_truth": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.acceleration > 10 AND T2.price BETWEEN 20000 AND 30000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cars WHERE acceleration > 10 AND price > 20000 AND price < 30000;"
        ],
        "rule_sql": []
    },
    "277": {
        "db_id": "retail_complains",
        "question": "Calculate the average age of clients from the Midwest region.",
        "ground_truth": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T3.Region) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM clients WHERE region = 'Midwest';"
        ],
        "rule_sql": []
    },
    "4723": {
        "db_id": "disney",
        "question": "Which actor voices Akela from The Jungle Book?",
        "ground_truth": "SELECT `voice-actor` FROM `voice-actors` WHERE character = 'Akela'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM actors WHERE character_name = 'Akela' AND movie_title = 'The Jungle Book';"
        ],
        "rule_sql": []
    },
    "7643": {
        "db_id": "hockey",
        "question": "For all the goalies born in year 1987, who are good in both right hand and left hand? Calculate his percentage of winning for every season he played.",
        "ground_truth": "SELECT T1.firstName, T1.lastName, T2.year, CAST(T2.W AS REAL) / T2.GP FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.birthYear = 1987 AND T1.shootCatch IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    p.player_name,\n    s.season,\n    COUNT(CASE WHEN g.winner_team_id = t.team_id THEN 1 END) * 100.0 / COUNT(*) AS win_percentage\nFROM players p\nJOIN teams t ON p.team_id = t.team_id\nJOIN games g ON t.team_id = g.home_team_id OR t.team_id = g.away_team_id\nJOIN seasons s ON g.season_id = s.season_id\nWHERE p.position = 'Goalie' \n    AND p.birth_year = 1987\n    AND p.handedness = 'Right'\n    AND p.handedness = 'Left'\nGROUP BY p.player_id, s.season\nORDER BY p.player_name, s.season;"
        ],
        "rule_sql": []
    },
    "7695": {
        "db_id": "hockey",
        "question": "Who is the youngest goalie among those who had more than 150 goal againsts in 2002 season?",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2002 AND T2.GA > 150 GROUP BY T2.playerID, T1.birthYear, T1.birthMon, T1.birthMon HAVING SUM(T2.GA) ORDER BY T1.birthYear DESC, T1.birthMon DESC, SUM(T1.birthDay) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, MIN(age) \nFROM goalies \nWHERE season = 2002 AND goals_against > 150 \nGROUP BY player_name \nORDER BY age ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7610": {
        "db_id": "image_and_language",
        "question": "How many 'blue' attribute classes are there on image ID 2355735?",
        "ground_truth": "SELECT COUNT(T1.ATT_CLASS) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 2355735 AND T1.ATT_CLASS = 'blue'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM attributes WHERE color = 'blue' AND image_id = 2355735;"
        ],
        "rule_sql": []
    },
    "2336": {
        "db_id": "movielens",
        "question": "What non-English American film/s has received the lowest user ratings? Mention the movie's I.D.",
        "ground_truth": "SELECT T2.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' AND T1.country = 'USA' ORDER BY T2.rating LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT movie_id FROM movies WHERE language != 'English' AND country = 'USA' ORDER BY user_rating ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5246": {
        "db_id": "beer_factory",
        "question": "Among the root beer brands that do not advertise on Twitter, how many of them have root beers sold in August, 2014?",
        "ground_truth": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.Twitter IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM root_beer_brands rb\nJOIN root_beer_sales rs ON rb.brand_id = rs.brand_id\nWHERE rb.twitter_advertising = 1\nAND strftime('%Y-%m', rs.sale_date) = '2014-08';"
        ],
        "rule_sql": []
    },
    "6768": {
        "db_id": "retails",
        "question": "List the name and phone number of customers in India who have an above-average account balance.",
        "ground_truth": "SELECT T1.c_name, T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > ( SELECT AVG(c_acctbal) FROM customer ) ORDER BY T1.c_name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, phone FROM customers WHERE country = 'India' AND balance > (SELECT AVG(balance) FROM customers WHERE country = 'India')"
        ],
        "rule_sql": []
    },
    "7413": {
        "db_id": "works_cycles",
        "question": "In which year will the David Bradley's credit card expire?",
        "ground_truth": "SELECT T3.ExpYear FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT expiration_year FROM credit_cards WHERE cardholder_name = 'David Bradley';"
        ],
        "rule_sql": []
    },
    "7642": {
        "db_id": "hockey",
        "question": "List all goalies with more lost than won games for two seasons or more. State the name of the player and team he played.",
        "ground_truth": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.pos = 'G' AND T2.L > T2.W GROUP BY T1.firstName, T1.lastName, T3.name HAVING COUNT(T3.year) > 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.name, t.name \nFROM players p \nJOIN teams t ON p.team_id = t.id \nWHERE p.position = 'goalie' \nAND p.games_lost > p.games_won \nAND p.seasons_played >= 2;"
        ],
        "rule_sql": []
    },
    "7680": {
        "db_id": "hockey",
        "question": "What is the average BMI of all the coaches who have gotten in the Hall of Fame?",
        "ground_truth": "SELECT SUM(T1.weight / (T1.height * T1.height)) / COUNT(T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(BMI) FROM Coaches WHERE HallOfFame = 'Yes';"
        ],
        "rule_sql": []
    },
    "3400": {
        "db_id": "video_games",
        "question": "Which is the publisher for the game \"Prism: Light the Way\"?",
        "ground_truth": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Prism: Light the Way'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher FROM games WHERE title = 'Prism: Light the Way';"
        ],
        "rule_sql": []
    },
    "1444": {
        "db_id": "synthea",
        "question": "Calculate the total type of allergies for German people.",
        "ground_truth": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM allergies WHERE nationality = 'German';"
        ],
        "rule_sql": []
    },
    "390": {
        "db_id": "retail_complains",
        "question": "Please list all clients' phone numbers and complaint IDs which are still in progress.",
        "ground_truth": "SELECT T1.phone, T2.`Complaint ID` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'In progress'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number, complaint_id FROM clients WHERE status = 'completed';"
        ],
        "rule_sql": []
    },
    "8227": {
        "db_id": "mondial_geo",
        "question": "For country with area greater than 600000, what is agriculture percentage of GDP the country contributes?",
        "ground_truth": "SELECT T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area > 600000 AND T2.Agriculture IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, agriculture_percentage FROM countries WHERE area > 600000"
        ],
        "rule_sql": []
    },
    "2040": {
        "db_id": "soccer_2016",
        "question": "Among the matches held in St. George's Park, give the match ID of the match with the highest winning margin points.",
        "ground_truth": "SELECT T2.Match_Id FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T1.Venue_Name = 'St George''s Park' ORDER BY T2.Win_Margin DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT match_id FROM matches WHERE venue = \"St. George's Park\" ORDER BY winning_margin DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8664": {
        "db_id": "chicago_crime",
        "question": "List the case numbers of domestic violence crimes reported in Lincoln Square.",
        "ground_truth": "SELECT T2.case_number FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Lincoln Square' AND T2.domestic = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT case_number FROM crimes WHERE crime_type = 'domestic violence' AND location = 'Lincoln Square';"
        ],
        "rule_sql": []
    },
    "2697": {
        "db_id": "regional_sales",
        "question": "What percentage of sell orders on 04/04/2020 were for the state of New York?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE order_date = '2020-04-04' AND order_type = 'sell')) AS percentage\nFROM orders \nWHERE order_date = '2020-04-04' \nAND order_type = 'sell' \nAND customer_state = 'New York'"
        ],
        "rule_sql": []
    },
    "8226": {
        "db_id": "mondial_geo",
        "question": "List the infant mortality of country with the least Amerindian.",
        "ground_truth": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT infant_mortality FROM country WHERE amerindian = (SELECT MIN(amerindian) FROM country);"
        ],
        "rule_sql": []
    },
    "8366": {
        "db_id": "mondial_geo",
        "question": "Which religion is most prevalent in Asia?",
        "ground_truth": "SELECT T4.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN religion AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Asia' GROUP BY T4.Name ORDER BY SUM(T4.Percentage) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT religion, COUNT(*) as count FROM countries WHERE continent = 'Asia' GROUP BY religion ORDER BY count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9001": {
        "db_id": "bike_share_1",
        "question": "For all trips which took less 5 minutes, state the station name where the bike were borrowed and returned. Indicate mean temperature of the day.",
        "ground_truth": "SELECT T1.start_station_name, T1.end_station_name, T2.mean_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.duration < 300",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT start_station_name, end_station_name, AVG(temperature) as mean_temperature\nFROM trips\nWHERE duration < 5\nGROUP BY start_station_name, end_station_name;"
        ],
        "rule_sql": []
    },
    "1574": {
        "db_id": "car_retails",
        "question": "Determine the email and Code of employee who are working at United State, state MA",
        "ground_truth": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.state = 'MA' AND T2.country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email, Code FROM employees WHERE country = 'United States' AND state = 'MA'"
        ],
        "rule_sql": []
    },
    "5630": {
        "db_id": "shipping",
        "question": "How many cities which belong to New Jersey have transported weight greater than 20000?",
        "ground_truth": "SELECT COUNT(*) FROM ( SELECT T2.city_id AS CITYID FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.state = 'New Jersey' GROUP BY T2.city_id HAVING SUM(T1.weight) > 20000 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cities WHERE state = 'New Jersey' AND transported_weight > 20000;"
        ],
        "rule_sql": []
    },
    "2112": {
        "db_id": "world_development_indicators",
        "question": "List down the top 3 Latin American & Caribbean countries with the highest average value in \"CO2 emissions (kt)\" indicator since 1965. Give their highest value and in what year.",
        "ground_truth": "SELECT DISTINCT T1.CountryCode, T1.Year, T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Latin America & Caribbean' AND T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year > 1965 AND T1.Year < 1980 ORDER BY T1.Value DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, MAX(value) as highest_value, year\nFROM co2_emissions\nWHERE region = 'Latin America & Caribbean'\nAND year >= 1965\nGROUP BY country\nORDER BY highest_value DESC\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "148": {
        "db_id": "movie_platform",
        "question": "For the list with more than 200 followers, state the title and how long the list has been created?",
        "ground_truth": "SELECT list_title , 365 * (strftime('%Y', 'now') - strftime('%Y', list_creation_timestamp_utc)) + 30 * (strftime('%m', 'now') - strftime('%m', list_creation_timestamp_utc)) + strftime('%d', 'now') - strftime('%d', list_creation_timestamp_utc) FROM lists WHERE list_followers > 200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, created_at FROM lists WHERE followers > 200;"
        ],
        "rule_sql": []
    },
    "3167": {
        "db_id": "donor",
        "question": "Who is the largest donor by amount? Give the donation id and the total amount of the donation.",
        "ground_truth": "SELECT donationid, donation_total FROM donations ORDER BY donation_total DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT donor_name, MAX(amount) FROM donations GROUP BY donor_name ORDER BY amount DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3501": {
        "db_id": "video_games",
        "question": "List the platform ID of the game titled Airborne Troops: Countdown to D-Day.",
        "ground_truth": "SELECT T1.platform_id FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Airborne Troops: Countdown to D-Day'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_id FROM games WHERE title = 'Airborne Troops: Countdown to D-Day';"
        ],
        "rule_sql": []
    },
    "4587": {
        "db_id": "mental_health_survey",
        "question": "Please list all the answers to the question \"Any additional notes or comments\" that are not null in 2014's survey.",
        "ground_truth": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Any additional notes or comments' AND T2.SurveyID = 2014 AND T2.AnswerText <> -1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT answer FROM survey_responses WHERE question = 'Any additional notes or comments' AND year = 2014 AND answer IS NULL;"
        ],
        "rule_sql": []
    },
    "8024": {
        "db_id": "university",
        "question": "List the criteria names under the ranking system called Center for World University Ranking.",
        "ground_truth": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT criteria_name FROM ranking_systems WHERE system_name = 'Center for World University Ranking';"
        ],
        "rule_sql": []
    },
    "1729": {
        "db_id": "restaurant",
        "question": "What are the regions with Greek restaurants?",
        "ground_truth": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM restaurants WHERE cuisine = 'Greek';"
        ],
        "rule_sql": []
    },
    "5159": {
        "db_id": "address",
        "question": "Provide the average elevation of the cities with alias Amherst.",
        "ground_truth": "SELECT AVG(T2.elevation) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Amherst'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(elevation) FROM cities WHERE name = 'Amherst';"
        ],
        "rule_sql": []
    },
    "6882": {
        "db_id": "retails",
        "question": "Among all the suppliers in debt, how many of them are in Europe?",
        "ground_truth": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE' AND T3.s_acctbal < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM suppliers WHERE debt > 0 AND region = 'Europe';"
        ],
        "rule_sql": []
    },
    "2648": {
        "db_id": "regional_sales",
        "question": "Calculate ratio between the highest unit cost and the lowest unit cost?",
        "ground_truth": "SELECT ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 ) / ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') ASC LIMIT 1 ) ORDER BY REPLACE(`Unit Cost`, ',', '') ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(unit_cost) / MIN(unit_cost) AS ratio FROM products;"
        ],
        "rule_sql": []
    },
    "9116": {
        "db_id": "movie_3",
        "question": "How many films are in English?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films WHERE language = 'English';"
        ],
        "rule_sql": []
    },
    "7821": {
        "db_id": "world",
        "question": "Calculate the average population per city in Karnataka district.",
        "ground_truth": "SELECT AVG(Population) FROM City WHERE District = 'Karnataka' GROUP BY ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(population) FROM cities WHERE district = 'Karnataka';"
        ],
        "rule_sql": []
    },
    "603": {
        "db_id": "codebase_comments",
        "question": "What is the language of the method ''PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn\"?",
        "ground_truth": "SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM methods WHERE name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn';"
        ],
        "rule_sql": []
    },
    "773": {
        "db_id": "movie",
        "question": "What is the runtime of the movie starred by Jackie Chan with a rating greater than 7?",
        "ground_truth": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Jackie Chan' AND T1.Rating > 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT runtime FROM movies WHERE actor = 'Jackie Chan' AND rating > 7;"
        ],
        "rule_sql": []
    },
    "5105": {
        "db_id": "address",
        "question": "List all the zip codes in the county of New Castle in Delaware.",
        "ground_truth": "SELECT DISTINCT T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T2.county = 'NEW CASTLE' AND T1.name = 'Delaware'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT zip_code FROM zip_codes WHERE county = 'New Castle' AND state = 'Delaware';"
        ],
        "rule_sql": []
    },
    "7748": {
        "db_id": "hockey",
        "question": "What is the name of the coach whose team placed 4th in the 1969 game? Indicate their coachID.",
        "ground_truth": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1969 AND T2.rank = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coachID, name FROM coaches WHERE team_placement = 4 AND year = 1969;"
        ],
        "rule_sql": []
    },
    "6693": {
        "db_id": "retails",
        "question": "Give customer No.106936's region name.",
        "ground_truth": "SELECT T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_custkey = 106936",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region_name FROM customers WHERE customer_id = 106936"
        ],
        "rule_sql": []
    },
    "404": {
        "db_id": "retail_complains",
        "question": "In complaints about the credit card product, list the phone number of the oldest client.",
        "ground_truth": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card' ORDER BY T1.age DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number FROM clients WHERE product = 'credit card' ORDER BY birth_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9160": {
        "db_id": "movie_3",
        "question": "How many addresses are there in Woodridge city?",
        "ground_truth": "SELECT COUNT(T1.address_id) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = 'Woodridge'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM addresses WHERE city = 'Woodridge';"
        ],
        "rule_sql": []
    },
    "8277": {
        "db_id": "mondial_geo",
        "question": "What is the quantity of the mountains does Japan have?",
        "ground_truth": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM mountains WHERE country = 'Japan';"
        ],
        "rule_sql": []
    },
    "7139": {
        "db_id": "works_cycles",
        "question": "Where is the address 15873 located, in what city and state? Does that city belong to a province where the code exists?",
        "ground_truth": "SELECT T2.City, T1.Name, T1.IsOnlyStateProvinceFlag FROM StateProvince AS T1 INNER JOIN Address AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.AddressID = 15873",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city, state FROM addresses WHERE address = '15873';"
        ],
        "rule_sql": []
    },
    "2249": {
        "db_id": "movielens",
        "question": "List the genres of the movies which actor id 851 is the star.",
        "ground_truth": "SELECT T2.genre FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T1.actorid = T3.actorid WHERE T3.actorid = 851",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM movies WHERE actor_id = 851"
        ],
        "rule_sql": []
    },
    "2716": {
        "db_id": "regional_sales",
        "question": "How many sales teams are there in the Midwest?",
        "ground_truth": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM `Sales Team`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales_teams WHERE region = 'Midwest';"
        ],
        "rule_sql": []
    },
    "6552": {
        "db_id": "retail_world",
        "question": "How many orders were made by the customers in Ireland.",
        "ground_truth": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE country = 'Ireland';"
        ],
        "rule_sql": []
    },
    "6123": {
        "db_id": "food_inspection_2",
        "question": "What is the average number of inspections carried out in the year 2010 by a sanitarian whose salary is over 70000?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.inspection_date LIKE '2010%' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.salary > 70000 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(inspection_count) \nFROM sanitarian s\nJOIN inspection i ON s.sanitarian_id = i.sanitarian_id\nWHERE s.salary > 70000\nAND i.inspection_date LIKE '2010%';"
        ],
        "rule_sql": []
    },
    "8668": {
        "db_id": "chicago_crime",
        "question": "List the report number of crimes against property happened in Riverdale.",
        "ground_truth": "SELECT SUM(CASE WHEN T1.crime_against = 'Property' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T3.community_area_name = 'Riverdale'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT report_number FROM crimes WHERE crime_type = 'property' AND location = 'Riverdale';"
        ],
        "rule_sql": []
    },
    "3857": {
        "db_id": "public_review_platform",
        "question": "How many Yelp_Business in Anthem are under the category of \"Food\"?",
        "ground_truth": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' AND T3.city LIKE 'Anthem'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Business WHERE city = 'Anthem' AND category = 'Food';"
        ],
        "rule_sql": []
    },
    "8860": {
        "db_id": "craftbeer",
        "question": "Which city and state produces the most and least bitter beer, and what is the difference in bitterness between the two? List also the names of the beer.",
        "ground_truth": "SELECT T1.state, T1.city, T2.name, T2.ibu FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.id = T2.brewery_id GROUP BY T1.state, T1.city, T2.name, T2.ibu HAVING MAX(ibu) AND MIN(ibu) LIMIT 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c.city, \n    c.state, \n    b.name AS beer_name,\n    MAX(b.ibu) AS max_bitterness,\n    MIN(b.ibu) AS min_bitterness,\n    MAX(b.ibu) - MIN(b.ibu) AS bitterness_difference\nFROM beers b\nJOIN breweries br ON b.brewery_id = br.id\nJOIN cities c ON br.city_id = c.id\nGROUP BY c.city, c.state, b.name\nORDER BY bitterness_difference DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4345": {
        "db_id": "simpson_episodes",
        "question": "What are the keywords of the episode which has title as Dangerous Curves?",
        "ground_truth": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT keywords FROM episodes WHERE title = 'Dangerous Curves';"
        ],
        "rule_sql": []
    },
    "7497": {
        "db_id": "image_and_language",
        "question": "What is the relationship between object sample no.12 and no.8 of image no.2345511?",
        "ground_truth": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345511 AND T2.OBJ1_SAMPLE_ID = 12 AND T2.OBJ2_SAMPLE_ID = 8",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM relationships WHERE object_sample_no = 12 AND object_sample_no = 8 AND image_no = 2345511;"
        ],
        "rule_sql": []
    },
    "8652": {
        "db_id": "chicago_crime",
        "question": "Among the crimes in the Central, calculate the percentage of larceny incidents.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T3.title = 'Larceny' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.side = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN crime_type = 'larceny' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_larceny\nFROM crimes\nWHERE district = 'Central';"
        ],
        "rule_sql": []
    },
    "8949": {
        "db_id": "human_resources",
        "question": "By what percentage is the average salary of Trainees higher than the minimum salary of this postion?",
        "ground_truth": "SELECT 100 * (AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (AVG(salary) - MIN(salary)) / MIN(salary) * 100 AS percentage_difference FROM employees WHERE position = 'Trainee';"
        ],
        "rule_sql": []
    },
    "743": {
        "db_id": "movie",
        "question": "How much longer in percentage is the screen time of the most important character in Batman than the least important one?",
        "ground_truth": "SELECT (MAX(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) - MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL))) * 100 / MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (MAX(screen_time) - MIN(screen_time)) / MIN(screen_time) * 100 AS percentage_longer\nFROM characters\nWHERE movie = 'Batman'\nORDER BY importance DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4858": {
        "db_id": "legislator",
        "question": "How many female legislators become representatives for California in 2015?",
        "ground_truth": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE STRFTIME('%Y', T2.start) = '2015' AND T2.state = 'CA' AND T1.gender_bio = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM legislators WHERE gender = 'male' AND state = 'California' AND year = 2015 AND position = 'representative';"
        ],
        "rule_sql": []
    },
    "3533": {
        "db_id": "authors",
        "question": "List the authors and journal short name of the papers with \"chemiluminescence\" in its title and has a journal ID from 245 to 250.",
        "ground_truth": "SELECT T2.Name, T3.ShortName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.JournalId BETWEEN 245 AND 250 AND T1.Title LIKE '%chemiluminescence%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author, journal_short_name FROM papers WHERE title LIKE '%chemiluminescence%' AND journal_id BETWEEN 245 AND 250;"
        ],
        "rule_sql": []
    },
    "5551": {
        "db_id": "menu",
        "question": "Among the menus that include milk, what is the menu page id of the menu that has the highest price?",
        "ground_truth": "SELECT T1.menu_page_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.name = 'Milk' ORDER BY T1.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_page_id FROM menu_items WHERE ingredient = 'milk' ORDER BY price ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5913": {
        "db_id": "books",
        "question": "What is the publication date of the book with the most pages?",
        "ground_truth": "SELECT publication_date FROM book ORDER BY num_pages DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publication_date FROM books ORDER BY pages DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2225": {
        "db_id": "world_development_indicators",
        "question": "What are the indicator codes for the Republic of Albania in the year 1960?",
        "ground_truth": "SELECT DISTINCT T1.IndicatorCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1960 AND T2.LongName = 'Republic of Albania'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT indicator_code FROM indicators WHERE country_name = 'Republic of Albania' AND year = 1960;"
        ],
        "rule_sql": []
    },
    "2901": {
        "db_id": "professional_basketball",
        "question": "Which player selected by Portland in 2nd draftRound won Rookie of the Year in 1971?",
        "ground_truth": "SELECT T1.playerID FROM draft AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' AND T1.draftYear = 1971 AND T1.draftRound = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.playerName \nFROM Players p\nJOIN Draft d ON p.playerID = d.playerID\nWHERE d.draftTeam = 'Portland' \nAND d.draftRound = 2\nAND p.rookieOfTheYear = 1971;"
        ],
        "rule_sql": []
    },
    "5372": {
        "db_id": "sales",
        "question": "Calculate the total sales ids that were sales of Flat Washer 8.",
        "ground_truth": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Flat Washer 8'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE product_name = 'Flat Washer 8';"
        ],
        "rule_sql": []
    },
    "449": {
        "db_id": "movies_4",
        "question": "List the names of the production companies that made at least 200 movies.",
        "ground_truth": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T2.movie_id) > 200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_name, COUNT(*) as movie_count \nFROM production_companies \nWHERE movie_count >= 200 \nGROUP BY company_name"
        ],
        "rule_sql": []
    },
    "8996": {
        "db_id": "bike_share_1",
        "question": "What was the hottest temperature on the day of trip ID 4080?",
        "ground_truth": "SELECT MAX(T2.max_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.id = 4080",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(temperature) FROM weather WHERE date = (SELECT date FROM trips WHERE trip_id = 4080);"
        ],
        "rule_sql": []
    },
    "5788": {
        "db_id": "language_corpus",
        "question": "How much higher in percentage does the word \"grec\" occur on the page titled \"\u00c0bac\" than on the page titled \"Astronomia\"?",
        "ground_truth": "SELECT CAST((SUM(CASE WHEN T3.title = '\u00c0bac' THEN T2.occurrences END) - SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END)) AS REAL) * 100 / SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    ((SELECT COUNT(*) FROM page_content WHERE page_title = '\u00c0bac' AND content LIKE '%grec%') \n     - \n     (SELECT COUNT(*) FROM page_content WHERE page_title = 'Astronomia' AND content LIKE '%grec%')) \n    * 100.0 \n    / \n    (SELECT COUNT(*) FROM page_content WHERE page_title = 'Astronomia' AND content LIKE '%grec%') \n    AS percentage_difference;"
        ],
        "rule_sql": []
    },
    "2196": {
        "db_id": "world_development_indicators",
        "question": "How many countries are using the same type of currency? Please list the short names of any 3 countries.",
        "ground_truth": "SELECT ShortName FROM country WHERE currencyunit = 'U.S. dollar' LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) as country_count, currency_type \nFROM countries \nGROUP BY currency_type \nHAVING COUNT(*) > 1 \nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "5441": {
        "db_id": "sales",
        "question": "List the customer's ID and last name of the customer that purchased a product with a quantity greater than 90% of the average quantity of all listed products.",
        "ground_truth": "SELECT T2.CustomerID, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity > ( SELECT AVG(Quantity) FROM Sales ) * 0.9",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.customer_id, c.last_name \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nWHERE oi.quantity > (SELECT AVG(quantity) * 0.9 FROM products)"
        ],
        "rule_sql": []
    },
    "6860": {
        "db_id": "retails",
        "question": "Among the products under the type \"promo brushed steel\", how many of them are manufactured by Manufacturer#5?",
        "ground_truth": "SELECT COUNT(p_partkey) FROM part WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE type = 'promo brushed steel' AND manufacturer_id = 5;"
        ],
        "rule_sql": []
    },
    "4023": {
        "db_id": "public_review_platform",
        "question": "Among the users who received low compliments from other users, which users joined Yelp in 2012?",
        "ground_truth": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2012 AND T2.number_of_compliments = 'Low'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, name, join_date \nFROM users \nWHERE join_date LIKE '2012%' \nAND compliment_count < 10;"
        ],
        "rule_sql": []
    },
    "6290": {
        "db_id": "coinmarketcap",
        "question": "When is Devcoin most valuable in the market?",
        "ground_truth": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Devcoin' ORDER BY T2.market_cap DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(price) FROM market_data WHERE currency = 'Devcoin' ORDER BY date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "234": {
        "db_id": "book_publishing_company",
        "question": "In the books published by US publishers, which book has the highest royalty? List these books in the descending order of royalty.",
        "ground_truth": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, royalty FROM books WHERE publisher_country = 'US' ORDER BY royalty ASC;"
        ],
        "rule_sql": []
    },
    "2087": {
        "db_id": "music_tracker",
        "question": "From 1980 to 2000, which artist had the most disco releases?",
        "ground_truth": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1980 AND 2000 AND T2.tag LIKE 'disco' GROUP BY T1.artist ORDER BY COUNT(T2.tag) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name, COUNT(*) as release_count \nFROM releases \nWHERE genre = 'disco' AND release_year BETWEEN 1980 AND 2000 \nGROUP BY artist_name \nORDER BY release_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4403": {
        "db_id": "student_loan",
        "question": "What is the percentage ratio of students who are enlisted in foreign legions that have a due payment?",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.bool = 'pos', 1, 0)) AS REAL) * 100 / SUM(IIF(T1.bool = 'neg', 1, 0)) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T2.organ = 'foreign_legion'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM students WHERE legion = 'foreign') AS percentage FROM students WHERE legion = 'foreign' AND payment_status = 'due';"
        ],
        "rule_sql": []
    },
    "1345": {
        "db_id": "law_episode",
        "question": "How many winners have been awarded a Television award by the \"American Bar Association Silver Gavel Awards for Media and the Arts\"?",
        "ground_truth": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM awards WHERE award_name = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts';"
        ],
        "rule_sql": []
    },
    "5448": {
        "db_id": "sales",
        "question": "What is the name of the sales person who handled the highest number of sales?",
        "ground_truth": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T2.SalesPersonID = T1.EmployeeID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM sales_persons ORDER BY COUNT(sales_id) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2027": {
        "db_id": "soccer_2016",
        "question": "How many times did SC Ganguly be the man of the match?",
        "ground_truth": "SELECT COUNT(T2.Man_of_the_Match) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id WHERE T1.Player_Name = 'SC Ganguly'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM matches WHERE player_of_match = 'SC Ganguly'"
        ],
        "rule_sql": []
    },
    "9133": {
        "db_id": "movie_3",
        "question": "How many films rented to the customer RUTH MARTINEZ were returned in August, 2005?",
        "ground_truth": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' AND STRFTIME('%m',T2.return_date) = '8' AND STRFTIME('%Y', T2.return_date) = '2005'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM rental r\nJOIN customer c ON r.customer_id = c.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ'\nAND r.return_date BETWEEN '2005-08-01' AND '2005-08-31';"
        ],
        "rule_sql": []
    },
    "3902": {
        "db_id": "public_review_platform",
        "question": "How many users received high compliment type in photo?",
        "ground_truth": "SELECT COUNT(T1.user_id) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'High' AND T2.compliment_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE compliment_type = 'high' AND photo IS NOT NULL"
        ],
        "rule_sql": []
    },
    "9331": {
        "db_id": "movie_3",
        "question": "List movie titles with duration over 120 minutes that are in the action category.",
        "ground_truth": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.`name` = 'action' AND T1.length > 120",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE duration > 120 AND category = 'action';"
        ],
        "rule_sql": []
    },
    "5710": {
        "db_id": "language_corpus",
        "question": "List down the page id of titles start with alphabet \"b\".",
        "ground_truth": "SELECT pid FROM pages WHERE title LIKE 'b%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_id FROM titles WHERE title LIKE 'b%';"
        ],
        "rule_sql": []
    },
    "2449": {
        "db_id": "superstore",
        "question": "What is the order ID of the security-Tint Envelopes product ordered on June 3, 2013, in the Central region?",
        "ground_truth": "SELECT DISTINCT T1.`Order ID` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Security-Tint Envelopes' AND T1.`Order Date` = '2013-06-03'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_id FROM orders WHERE product_name = 'security-Tint Envelopes' AND order_date = '2013-06-03' AND region = 'Central';"
        ],
        "rule_sql": []
    },
    "7862": {
        "db_id": "world",
        "question": "What is the capital city of the Philippines?",
        "ground_truth": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Philipiines'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM capitals WHERE country = 'Philippines';"
        ],
        "rule_sql": []
    },
    "482": {
        "db_id": "movies_4",
        "question": "Who is the director for the movie 'Transformers?'",
        "ground_truth": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Transformers' AND T2.job = 'Director'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_name FROM movies WHERE title = 'Transformers';"
        ],
        "rule_sql": []
    },
    "4693": {
        "db_id": "disney",
        "question": "Who directed the most popular movie?",
        "ground_truth": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6265": {
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency was not opened on 2013/5/3?",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-03' AND T2.open IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM cryptocurrencies WHERE open_date != '2013-05-03';"
        ],
        "rule_sql": []
    },
    "7481": {
        "db_id": "image_and_language",
        "question": "Please list the classes of all the object samples in image no.1.",
        "ground_truth": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 GROUP BY T1.OBJ_CLASS",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT class FROM objects WHERE image_id = 1;"
        ],
        "rule_sql": []
    },
    "8629": {
        "db_id": "chicago_crime",
        "question": "In Albany Park, how many arrests were made in an apartment due to criminal sexual abuse?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.title = 'Criminal Sexual Abuse' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.district_name = 'Albany Park' AND T2.arrest = 'TRUE' AND T2.location_description = 'APARTMENT'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM arrests WHERE location = 'Albany Park' AND crime_type = 'criminal sexual abuse' AND location_description = 'apartment';"
        ],
        "rule_sql": []
    },
    "3788": {
        "db_id": "public_review_platform",
        "question": "User No.\"63469\" has got \"1\" like for a tip to the Yelp business, which city is that business located in?",
        "ground_truth": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.likes = 1 AND T2.user_id = 63469",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM business WHERE user_id = '63469' AND likes = 1;"
        ],
        "rule_sql": []
    },
    "4551": {
        "db_id": "student_loan",
        "question": "Among the students enrolled in UCLA, what is the percentage of male students in the air force department?",
        "ground_truth": "SELECT CAST(COUNT(T4.name) AS REAL) * 100 / COUNT(T2.name) FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name INNER JOIN enrolled AS T3 ON T3.name = T2.name LEFT JOIN male AS T4 ON T2.name = T4.name WHERE T3.school = 'ucla' AND T1.organ = 'air_force'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN gender = 'Male' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage\nFROM students\nWHERE university = 'UCLA' AND department = 'Air Force';"
        ],
        "rule_sql": []
    },
    "5426": {
        "db_id": "sales",
        "question": "Calculate the percentage of sold blades in the total number of transactions.",
        "ground_truth": "SELECT CAST(SUM(IIF(T1.Name = 'Blade', T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN product_type = 'blade' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_sold\nFROM transactions;"
        ],
        "rule_sql": []
    },
    "4775": {
        "db_id": "legislator",
        "question": "Give the YouTube ID of the channel 'RepWassermanSchultz.'",
        "ground_truth": "SELECT youtube_id FROM `social-media` WHERE youtube = 'RepWassermanSchultz'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT channel_id FROM channels WHERE channel_name = 'RepWassermanSchultz';"
        ],
        "rule_sql": []
    },
    "4015": {
        "db_id": "public_review_platform",
        "question": "Identify the operating hours of businesses in Black Canyon City with review count greater than average.",
        "ground_truth": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' GROUP BY t2.business_id HAVING T1.review_count > AVG(T1.review_count)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, hours FROM businesses WHERE city = 'Black Canyon City' AND review_count > (SELECT AVG(review_count) FROM businesses) ORDER BY name;"
        ],
        "rule_sql": []
    },
    "417": {
        "db_id": "movies_4",
        "question": "In how many movie does Dariusz Wolski work as the director of photography?",
        "ground_truth": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE director_of_photography = 'Dariusz Wolski'"
        ],
        "rule_sql": []
    },
    "3007": {
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in the longest chapter where Sir Richard Ratcliff appeared?",
        "ground_truth": "SELECT MAX(T2.ParagraphNum) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Richard Ratcliff'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM paragraphs \nJOIN chapters ON paragraphs.chapter_id = chapters.id \nJOIN character_appearances ON chapters.id = character_appearances.chapter_id \nJOIN characters ON character_appearances.character_id = characters.id \nWHERE characters.name = 'Sir Richard Ratcliff' \nORDER BY chapters.word_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7537": {
        "db_id": "image_and_language",
        "question": "How many attributes are related to the object sample no. 7 on image no. 4?",
        "ground_truth": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM attributes WHERE object_sample_no = 7 AND image_no = 4;"
        ],
        "rule_sql": []
    },
    "48": {
        "db_id": "movie_platform",
        "question": "What are the names of the movie that was rated by the user between 1/1/2013 to 12/31/2013 by the user who created the list \"100 Greatest Living American Filmmakers\"? Calculate for the average rating score of those movies in 2013.",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T1.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND T3.list_title = '100 Greatest Living American Filmmakers'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, AVG(r.rating) as average_rating\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN users u ON r.user_id = u.user_id\nJOIN lists l ON u.user_id = l.user_id\nWHERE l.list_name = '100 Greatest Living American Filmmakers'\nAND r.rating_date BETWEEN '2013-01-01' AND '2013-12-31'\nGROUP BY m.title;"
        ],
        "rule_sql": []
    },
    "523": {
        "db_id": "movies_4",
        "question": "How many movies were produced by \"Eddie Murphy Productions\"?",
        "ground_truth": "SELECT COUNT(T1.movie_id) FROM movie_company AS T1 INNER JOIN production_company AS T2 ON T1.company_id = T2.company_id WHERE T2.company_name = 'Eddie Murphy Productions'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE production_company = 'Eddie Murphy Productions';"
        ],
        "rule_sql": []
    },
    "3899": {
        "db_id": "public_review_platform",
        "question": "How many businesses are with high review count?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'High'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE review_count > 1000;"
        ],
        "rule_sql": []
    },
    "8854": {
        "db_id": "food_inspection",
        "question": "List the business' name and risk category of businesses with a score greater than the 80% of average score of all businesses.",
        "ground_truth": "SELECT DISTINCT T1.name, T3.risk_category FROM businesses AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN violations AS T3 ON T1.business_id = T3.business_id WHERE T2.score > 0.8 * ( SELECT AVG(score) FROM inspections )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name, risk_category FROM businesses WHERE score > (SELECT AVG(score) * 0.8 FROM businesses);"
        ],
        "rule_sql": []
    },
    "9388": {
        "db_id": "movie_3",
        "question": "List all the films that are rated as PG-13.",
        "ground_truth": "SELECT title FROM film WHERE rating = 'PG-13'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM films WHERE rating = 'PG'"
        ],
        "rule_sql": []
    },
    "4004": {
        "db_id": "public_review_platform",
        "question": "How many active businesses from Casa Grande are registered in the database?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE active = 'true' AND city = 'Casa Grande'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE city = 'Casa Grande' AND status = 'active';"
        ],
        "rule_sql": []
    },
    "741": {
        "db_id": "movie",
        "question": "How many movies star a male African American actor?",
        "ground_truth": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Gender = 'Male' AND T2.Ethnicity = 'African American'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE actor_gender = 'male' AND actor_race = 'African American';"
        ],
        "rule_sql": []
    },
    "5215": {
        "db_id": "address",
        "question": "What is the average of the white population in the cities with area code 920?",
        "ground_truth": "SELECT AVG(T2.white_population) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 920",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(black_population) FROM cities WHERE area_code = 920;"
        ],
        "rule_sql": []
    },
    "8356": {
        "db_id": "mondial_geo",
        "question": "How many people in Montenegro speaks Serbian?",
        "ground_truth": "SELECT T1.Percentage * T2.Population FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Serbian' AND T2.Name = 'Montenegro'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM people WHERE country = 'Montenegro' AND language = 'Serbian';"
        ],
        "rule_sql": []
    },
    "2638": {
        "db_id": "regional_sales",
        "question": "What is the detailed position of the store which has order SO - 000115?",
        "ground_truth": "SELECT T2.Latitude, T2.Longitude FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM stores WHERE order_id = 'SO - 000115';"
        ],
        "rule_sql": []
    },
    "690": {
        "db_id": "trains",
        "question": "How many trains are there that run in the east direction?",
        "ground_truth": "SELECT COUNT(id) FROM trains WHERE direction = 'east'",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trains WHERE direction = 'west';"
        ],
        "rule_sql": []
    },
    "3369": {
        "db_id": "video_games",
        "question": "What is the release year of the game that gained 350000 sales in North America?",
        "ground_truth": "SELECT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 = 350000 AND T1.region_name = 'North America'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT release_year FROM games WHERE north_america_sales = 350000;"
        ],
        "rule_sql": []
    },
    "4328": {
        "db_id": "simpson_episodes",
        "question": "Out of the rating of 6.8 scored by title \"No Loan Again, Naturally\", how many percent of it consists of scores 5 to 10?",
        "ground_truth": "SELECT SUM(T2.percent) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T1.rating = 6.8 AND T2.stars BETWEEN 5 AND 10;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM ratings WHERE title = 'No Loan Again, Naturally' AND rating = 6.8)) AS percentage\nFROM ratings \nWHERE title = 'No Loan Again, Naturally' \nAND rating BETWEEN 5 AND 10;"
        ],
        "rule_sql": []
    },
    "4832": {
        "db_id": "legislator",
        "question": "What are the first and last name of the representatives of the house in district 9?",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.district = 9",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM representatives WHERE district = '9';"
        ],
        "rule_sql": []
    },
    "900": {
        "db_id": "cs_semester",
        "question": "What are the names of the courses that the students with the lowest intelligence are least satisfied with?",
        "ground_truth": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.name \nFROM courses c\nJOIN satisfaction s ON c.id = s.course_id\nJOIN students st ON s.student_id = st.id\nWHERE st.intelligence = (SELECT MIN(intelligence) FROM students)\nORDER BY s.satisfaction_score DESC\nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "8713": {
        "db_id": "chicago_crime",
        "question": "Who is the crime against criminal sexual abuse?",
        "ground_truth": "SELECT crime_against FROM FBI_Code WHERE title = 'Criminal Sexual Abuse'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM criminals WHERE crime = 'sexual abuse';"
        ],
        "rule_sql": []
    },
    "9365": {
        "db_id": "movie_3",
        "question": "From 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM, how many times did Susan Wilson pay for film rentals?",
        "ground_truth": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM payments p\nJOIN customers c ON p.customer_id = c.customer_id\nWHERE c.first_name = 'Susan' AND c.last_name = 'Wilson'\nAND p.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 22:08:29';"
        ],
        "rule_sql": []
    },
    "2131": {
        "db_id": "world_development_indicators",
        "question": "Which upper middle income country has the lowest value of CO2 emissions (kt)?",
        "ground_truth": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income' AND T2.IndicatorName = 'CO2 emissions (kt)' ORDER BY T2.Value ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country_name FROM countries WHERE income_group = 'Upper middle income' ORDER BY co2_emissions_kt ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8549": {
        "db_id": "software_company",
        "question": "In customers with marital status of never married, what is the percentage of customers with income of 2500 and above?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.INCOME_K > 2500 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Never-married'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN income >= 2500 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM customers\nWHERE marital_status = 'never married'"
        ],
        "rule_sql": []
    },
    "3702": {
        "db_id": "college_completion",
        "question": "Which cohort had the higher percentage of students who graduated from Central Alabama Community College in 2011 within 150 percent of normal/expected time, female White students or male White students?",
        "ground_truth": "SELECT IIF(SUM(CASE WHEN T2.gender = 'F' THEN T2.grad_150 ELSE 0 END) > SUM(CASE WHEN T2.gender = 'M' THEN T2.grad_150 ELSE 0 END), 'female White students', 'male White students') FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.race = 'W'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN gender = 'Female' THEN 'Female White students'\n        WHEN gender = 'Male' THEN 'Male White students'\n    END AS cohort,\n    COUNT(*) AS total_students,\n    SUM(CASE WHEN graduated = 'Yes' THEN 1 ELSE 0 END) AS graduated_count,\n    (SUM(CASE WHEN graduated = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS graduation_percentage\nFROM students\nWHERE college = 'Central Alabama Community College'\n    AND year = 2011\n    AND race = 'White'\n    AND time_to_graduation <= 1.5 * expected_time\nGROUP BY gender\nORDER BY graduation_percentage DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3310": {
        "db_id": "video_games",
        "question": "What is the genre of 3D Lemmings?",
        "ground_truth": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '3D Lemmings'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre FROM games WHERE title = '3D Lemmings';"
        ],
        "rule_sql": []
    },
    "5915": {
        "db_id": "books",
        "question": "How many books were published by publisher \"Thomas Nelson\"?",
        "ground_truth": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM books WHERE publisher = 'Thomas Nelson';"
        ],
        "rule_sql": []
    },
    "2132": {
        "db_id": "world_development_indicators",
        "question": "What is the minimum of International migrant stock, total of heavily indebted poor countries?",
        "ground_truth": "SELECT MIN(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.OtherGroups = 'HIPC' AND T2.IndicatorName = 'International migrant stock, total'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(International_migrant_stock_total) FROM heavily_indebted_poor_countries;"
        ],
        "rule_sql": []
    },
    "8885": {
        "db_id": "cookbook",
        "question": "Name the recipe with the most Vitamin C.",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT recipe_name FROM recipes ORDER BY vitamin_c DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6166": {
        "db_id": "food_inspection_2",
        "question": "What is the title of the employee involved in inspection ID 60332?",
        "ground_truth": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM employees WHERE inspection_id = 60332"
        ],
        "rule_sql": []
    },
    "5403": {
        "db_id": "sales",
        "question": "How many sales people managed to sell Headlights - Weatherproof?",
        "ground_truth": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Headlights - Weatherproof'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales_people WHERE product_sold = 'Headlights - Weatherproof';"
        ],
        "rule_sql": []
    },
    "7208": {
        "db_id": "works_cycles",
        "question": "What is the name of the product with the id \"475\"?",
        "ground_truth": "SELECT Name FROM Product WHERE ProductID = 475",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products WHERE id = '475';"
        ],
        "rule_sql": []
    },
    "4918": {
        "db_id": "olympics",
        "question": "The Olympic competitor John Aalberg is from which region?",
        "ground_truth": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM olympics WHERE name = 'John Aalberg';"
        ],
        "rule_sql": []
    },
    "4420": {
        "db_id": "student_loan",
        "question": "What is the average of absence for an employed students?",
        "ground_truth": "SELECT AVG(month) FROM longest_absense_from_school WHERE name NOT IN ( SELECT name FROM unemployed )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(absence) FROM students WHERE employment_status = 'unemployed';"
        ],
        "rule_sql": []
    },
    "6084": {
        "db_id": "books",
        "question": "How many orders got returned in 2022?",
        "ground_truth": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2022'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE return_date LIKE '2022%';"
        ],
        "rule_sql": []
    },
    "670": {
        "db_id": "codebase_comments",
        "question": "How many methods in the same repository share a tokenized name that begins with \"query language...\"?",
        "ground_truth": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized LIKE 'query language%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM methods WHERE repository_id = 1 AND name LIKE 'query language%';"
        ],
        "rule_sql": []
    },
    "9327": {
        "db_id": "movie_3",
        "question": "List the full names of customers who have paid more than 10$.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE payment_amount > 10"
        ],
        "rule_sql": []
    },
    "1341": {
        "db_id": "law_episode",
        "question": "How many credits have been displayed from episode 1 until 10?",
        "ground_truth": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.credited = 'true' AND T2.episode BETWEEN 1 AND 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM credits WHERE episode_number = 1 AND episode_number = 10;"
        ],
        "rule_sql": []
    },
    "7489": {
        "db_id": "image_and_language",
        "question": "What is the average difference in the y coordinate of 2 object samples with the relation \"parked on\" in image no.1?",
        "ground_truth": "SELECT CAST(SUM(T3.Y) AS REAL) / COUNT(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE NULL END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(ABS(o1.y - o2.y)) \nFROM objects o1 \nJOIN objects o2 ON o1.object_id = o2.object_id \nJOIN relations r ON o1.object_id = r.subject_id AND o2.object_id = r.object_id \nWHERE r.relation = 'parked on' AND o1.image_id = 1 AND o2.image_id = 1;"
        ],
        "rule_sql": []
    },
    "6115": {
        "db_id": "food_inspection_2",
        "question": "Please list the location coordinates of all the facilities that had an inspection on 2010/5/11.",
        "ground_truth": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM facilities WHERE inspection_date = '2010/5/11';"
        ],
        "rule_sql": []
    },
    "8873": {
        "db_id": "cookbook",
        "question": "At least how many cups of graham cracker crumbs does the recipe \"Raspberry Chiffon Pie\" need?",
        "ground_truth": "SELECT T2.min_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(graham_cracker_crumbs) FROM recipes WHERE recipe_name = 'Raspberry Chiffon Pie';"
        ],
        "rule_sql": []
    },
    "6186": {
        "db_id": "food_inspection_2",
        "question": "How much did Hacienda Los Torres from ward 36 fine for failing an inspection?",
        "ground_truth": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.dba_name = 'HACIENDA LOS TORRES' AND T1.ward = 36 AND T2.results = 'Fail'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT amount FROM fines WHERE restaurant_name = 'Hacienda Los Torres' AND ward = 36 AND violation_type = 'failed inspection';"
        ],
        "rule_sql": []
    },
    "5921": {
        "db_id": "books",
        "question": "Please list the titles of all the books in British English.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE language = 'British English';"
        ],
        "rule_sql": []
    },
    "7668": {
        "db_id": "hockey",
        "question": "Please list the birth cities of the players who have won an award in the year 1970.",
        "ground_truth": "SELECT DISTINCT T1.birthCity FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1970",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birth_city FROM players WHERE award_year = 1970;"
        ],
        "rule_sql": []
    },
    "412": {
        "db_id": "movies_4",
        "question": "What is the name of the director of photography of the movie \"Pirates of the Caribbean: At World's End\"?",
        "ground_truth": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Director of Photography'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies WHERE title = 'Pirates of the Caribbean: At World's End';"
        ],
        "rule_sql": []
    },
    "7482": {
        "db_id": "image_and_language",
        "question": "What is the relation between object sample no.8 and object sample no.4 in image no.1?",
        "ground_truth": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM objects WHERE object_id = 8 AND object_id = 4 AND image_id = 1;"
        ],
        "rule_sql": []
    },
    "1691": {
        "db_id": "restaurant",
        "question": "On which streets in the city of San Francisco are there restaurants with a review of 1.7?",
        "ground_truth": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT street FROM restaurants WHERE city = 'San Francisco' AND review = 1.7;"
        ],
        "rule_sql": []
    },
    "1918": {
        "db_id": "soccer_2016",
        "question": "Which teams have had a player awarded the Purple Cap and another with the Orange Cap in the same season?",
        "ground_truth": "SELECT T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Season_Id = T2.Season_Id INNER JOIN Player_Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Player AS T4 ON T3.Player_Id = T4.Player_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id GROUP BY T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name \nFROM teams t\nJOIN players p1 ON t.team_id = p1.team_id\nJOIN players p2 ON t.team_id = p2.team_id\nWHERE p1.award = 'Purple Cap' \nAND p2.award = 'Orange Cap'\nAND p1.season = p2.season;"
        ],
        "rule_sql": []
    },
    "1559": {
        "db_id": "car_retails",
        "question": "What is the total value of cancelled orders?",
        "ground_truth": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T2.status = 'Cancelled'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(amount) FROM orders WHERE status = 'completed';"
        ],
        "rule_sql": []
    },
    "8957": {
        "db_id": "human_resources",
        "question": "How many \"account representatives\" are there in Chicago with a good performance?",
        "ground_truth": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T2.locationcity = 'Chicago' AND T1.performance = 'Good'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE title = 'account representative' AND city = 'Chicago' AND performance = 'good';"
        ],
        "rule_sql": []
    },
    "4584": {
        "db_id": "mental_health_survey",
        "question": "How many users answered \"No\" to the question \"Would you bring up a mental health issue with a potential employer in an interview?\" in 2014's survey?",
        "ground_truth": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND T2.SurveyID = 2014 AND T2.AnswerText LIKE 'NO'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM survey_responses WHERE question = 'Would you bring up a mental health issue with a potential employer in an interview?' AND answer = 'No' AND year = 2014;"
        ],
        "rule_sql": []
    },
    "7678": {
        "db_id": "hockey",
        "question": "Which country has the most players in the Hall of Fame?",
        "ground_truth": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID GROUP BY T1.birthCountry ORDER BY COUNT(T1.playerID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as player_count FROM hall_of_fame GROUP BY country ORDER BY player_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6702": {
        "db_id": "retails",
        "question": "What is the percentage of the European countries among the given countries?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.r_name = 'EUROPE', 1, 0)) AS REAL) * 100 / COUNT(T1.n_name) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN continent = 'Europe' THEN 1 END) / COUNT(*)) * 100 AS percentage_european FROM countries;"
        ],
        "rule_sql": []
    },
    "5104": {
        "db_id": "address",
        "question": "What is the difference in the most populated city of Allentown-Bethlehem-Easton, PA-NJ in 2020 against its population in 2010?",
        "ground_truth": "SELECT T1.population_2020 - T1.population_2010 AS result_data FROM zip_data AS T1 INNER JOIN CBSA AS T2 ON T1.CBSA = T2.CBSA WHERE T2.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ' ORDER BY T1.population_2020 DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT population FROM cities WHERE metro_area = 'Allentown-Bethlehem-Easton, PA-NJ' AND year = 2020 ORDER BY population DESC LIMIT 1) - \n    (SELECT population FROM cities WHERE metro_area = 'Allentown-Bethlehem-Easton, PA-NJ' AND year = 2010 ORDER BY population DESC LIMIT 1) AS population_difference;"
        ],
        "rule_sql": []
    },
    "5742": {
        "db_id": "language_corpus",
        "question": "Which Wikipedia page number has the highest number of words in the Catalan language?",
        "ground_truth": "SELECT page FROM pages WHERE words = ( SELECT MAX(words) FROM pages )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_id FROM wikipedia WHERE language = 'Catalan' ORDER BY word_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1030": {
        "db_id": "computer_student",
        "question": "How many students that are undergoing the pre-phase of qualification have advisors?",
        "ground_truth": "SELECT COUNT(T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.inPhase = 'Pre_Quals' AND T2.student = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE phase = 'pre-phase' AND advisor_id IS NULL;"
        ],
        "rule_sql": []
    },
    "34": {
        "db_id": "movie_platform",
        "question": "Which year has the least number of movies that was released and what is the title of the movie in that year that has the highest number of rating score of 1?",
        "ground_truth": "SELECT DISTINCT T1.movie_release_year, T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = ( SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1 ) AND T2.rating_score = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, title \nFROM movies \nWHERE rating = 1 \nGROUP BY year \nORDER BY COUNT(*) ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1933": {
        "db_id": "soccer_2016",
        "question": "Between match nos. 335989 and 337000, how many times did a batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches?",
        "ground_truth": "SELECT SUM(CASE WHEN Runs_Scored > 3 THEN 1 ELSE 0 END) FROM Batsman_Scored WHERE 335989 < Match_Id < 337000 AND Innings_No = 1 AND Over_Id = 1 AND Ball_Id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM ball_by_ball \nWHERE match_no BETWEEN 335989 AND 337000 \nAND over_no = 1 \nAND ball_no = 1 \nAND inning_no = 1 \nAND runs_scored > 3"
        ],
        "rule_sql": []
    },
    "2753": {
        "db_id": "european_football_1",
        "question": "What is the name of the home team in division P1 with the highest final time goal in all seasons?",
        "ground_truth": "SELECT HomeTeam FROM matchs WHERE Div = 'P1' AND season = 2021 ORDER BY FTHG DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT home_team FROM matches WHERE division = 'P1' ORDER BY final_time_goal DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5244": {
        "db_id": "beer_factory",
        "question": "How many root beers of the Bulldog were purchased in August, 2014?",
        "ground_truth": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM purchases WHERE product_name = 'Bulldog' AND product_type = 'root beer' AND purchase_date BETWEEN '2014-08-01' AND '2014-08-31';"
        ],
        "rule_sql": []
    },
    "8789": {
        "db_id": "food_inspection",
        "question": "Which business had the most number of inspections? Give the Id number for that business.",
        "ground_truth": "SELECT business_id FROM inspections GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Id, COUNT(*) as inspection_count FROM inspections GROUP BY Id ORDER BY inspection_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1191": {
        "db_id": "talkingdata",
        "question": "What is the category of the label that represented the behavior category of app id 5902120154267990000?",
        "ground_truth": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT category FROM labels WHERE app_id = 5902120154267990000 AND behavior = 'category';"
        ],
        "rule_sql": []
    },
    "2692": {
        "db_id": "regional_sales",
        "question": "In which city is the store with the highest sales order unit price located?",
        "ground_truth": "SELECT T2.`City Name` FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE REPLACE(T1.`Unit Price`, ',', '') = ( SELECT REPLACE(T1.`Unit Price`, ',', '') FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.`Unit Price`, ',', '') DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city FROM stores ORDER BY unit_price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9040": {
        "db_id": "bike_share_1",
        "question": "How many stations in San Francisco are installed in 2014?",
        "ground_truth": "SELECT SUM(CASE WHEN city = 'San Francisco' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM stations WHERE city = 'San Francisco' AND installation_year = 2014;"
        ],
        "rule_sql": []
    },
    "5511": {
        "db_id": "menu",
        "question": "List down the image IDs for menu located at Manhattan Hotel.",
        "ground_truth": "SELECT T1.image_id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.location = 'Manhattan Hotel'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT image_id FROM menu WHERE location = 'Manhattan Hotel';"
        ],
        "rule_sql": []
    },
    "6208": {
        "db_id": "food_inspection_2",
        "question": "Which establishments did Joshua Rosa inspect?",
        "ground_truth": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT establishment_name FROM inspections WHERE inspector_name = 'Joshua Rosa';"
        ],
        "rule_sql": []
    },
    "7092": {
        "db_id": "works_cycles",
        "question": "Calculate the number of products if we add the products of the accessories and components categories.",
        "ground_truth": "SELECT COUNT(ProductID) FROM Product WHERE Name LIKE '%accessories %' OR Name LIKE '%components%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM products WHERE category = 'accessories' OR category = 'components';"
        ],
        "rule_sql": []
    },
    "6956": {
        "db_id": "ice_hockey_draft",
        "question": "What is the birthplace of Aaron Gagnon?",
        "ground_truth": "SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT birthplace FROM people WHERE first_name = 'Aaron' AND last_name = 'Gagnon'"
        ],
        "rule_sql": []
    },
    "985": {
        "db_id": "computer_student",
        "question": "Which course has more teachers, course no.16 or course no.18?",
        "ground_truth": "SELECT course_id FROM taughtBy WHERE course_id = 11 OR course_id = 18 GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN (SELECT COUNT(*) FROM teachers WHERE course_id = 16) > (SELECT COUNT(*) FROM teachers WHERE course_id = 18) THEN 'Course 16'\n        WHEN (SELECT COUNT(*) FROM teachers WHERE course_id = 16) < (SELECT COUNT(*) FROM teachers WHERE course_id = 18) THEN 'Course 18'\n        ELSE 'Equal'\n    END AS course_with_more_teachers;"
        ],
        "rule_sql": []
    },
    "8405": {
        "db_id": "mondial_geo",
        "question": "What is the population density of Hanoi's home country?",
        "ground_truth": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Hanoi'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT population / area FROM countries WHERE capital = 'Hanoi';"
        ],
        "rule_sql": []
    },
    "2799": {
        "db_id": "professional_basketball",
        "question": "For team who has more home won than home lost more than 80%, list the team name and the offense points.",
        "ground_truth": "SELECT name, o_pts FROM teams WHERE CAST((homeWon - homeLost) AS REAL) * 100 / games > 80",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT team_name, offense_points \nFROM teams \nWHERE home_won > home_lost \nAND (home_won / (home_won + home_lost)) > 0.8;"
        ],
        "rule_sql": []
    },
    "300": {
        "db_id": "retail_complains",
        "question": "Lists the last name of all clients who made a PS-type complaint and were served by TOVA.",
        "ground_truth": "SELECT t1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'PS' AND T2.server = 'TOVA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT last_name FROM clients WHERE complaint_type = 'PS' AND served_by = 'TOVA';"
        ],
        "rule_sql": []
    },
    "181": {
        "db_id": "book_publishing_company",
        "question": "Name all employees who were hired before year 1990.",
        "ground_truth": "SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM employees WHERE hire_date > '1990-01-01';"
        ],
        "rule_sql": []
    },
    "2802": {
        "db_id": "professional_basketball",
        "question": "Who is the longest serving coach from year 1970 to 1980. List the coach ID and the team(s) he served.",
        "ground_truth": "SELECT coachID, tmID FROM coaches WHERE year BETWEEN 1970 AND 1980 ORDER BY stint DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT coach_id, team_name \nFROM coaches \nWHERE start_year <= 1970 AND end_year >= 1980 \nORDER BY (end_year - start_year) DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "5794": {
        "db_id": "language_corpus",
        "question": "State the word ID for \"periodograma\".",
        "ground_truth": "SELECT wid FROM words WHERE word = 'periodograma'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT word_id FROM words WHERE word = 'periodograma';"
        ],
        "rule_sql": []
    },
    "7087": {
        "db_id": "works_cycles",
        "question": "Lists all companies by BusinessEntityID that increased their current year sales by more than 60% over last year's sales and have a bonus greater than 3,000.",
        "ground_truth": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesYTD > SalesLastYear + SalesLastyear * 0.6 AND Bonus > 3000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT BusinessEntityID \nFROM Sales \nWHERE (CurrentYearSales - LastYearSales) / LastYearSales > 0.6 \nAND Bonus > 3000;"
        ],
        "rule_sql": []
    },
    "273": {
        "db_id": "retail_complains",
        "question": "Please list the full name, date of birth, and email id of the elderly clients in descending order of age.",
        "ground_truth": "SELECT first, middle, last, year, month , day, email FROM client WHERE age > 65 ORDER BY age DESC",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name, date_of_birth, email FROM clients WHERE age > 65 ORDER BY age ASC;"
        ],
        "rule_sql": []
    },
    "4113": {
        "db_id": "public_review_platform",
        "question": "How many users who have received a low cool vote have also received at least 1 low cool vote for some of their reviews?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_votes_cool = 'Low' AND T2.review_votes_cool = 'Low'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT user_id) \nFROM votes \nWHERE vote_type = 'cool' AND vote_value = 'low' \nAND user_id IN (\n    SELECT user_id \n    FROM votes \n    WHERE vote_type = 'cool' AND vote_value = 'low'\n);"
        ],
        "rule_sql": []
    },
    "5789": {
        "db_id": "language_corpus",
        "question": "How many pages does the Catalan language have in Wikipedia?",
        "ground_truth": "SELECT pages FROM langs WHERE lang = 'ca'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM pages WHERE language = 'Catalan';"
        ],
        "rule_sql": []
    },
    "3230": {
        "db_id": "donor",
        "question": "How many teachers that have Literature & Writing as their primary focus subject use 'Mr' as their teacher prefix?",
        "ground_truth": "SELECT COUNT(teacher_acctid) FROM projects WHERE teacher_prefix = 'Mr.' AND primary_focus_subject = 'Literature & Writing'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM teachers WHERE primary_subject = 'Literature & Writing' AND teacher_prefix = 'Mr';"
        ],
        "rule_sql": []
    },
    "1557": {
        "db_id": "car_retails",
        "question": "How many different orders with a total price greater than 4000 are cancelled?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered * T1.priceEach > 4000 AND T2.status = 'Cancelled'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE total_price > 4000 AND status = 'cancelled';"
        ],
        "rule_sql": []
    },
    "9174": {
        "db_id": "movie_3",
        "question": "What are the special features for the film \"Smoochy Control\"?",
        "ground_truth": "SELECT special_features FROM film WHERE title = 'SMOOCHY CONTROL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT special_features FROM film WHERE title = 'Smoochy Control';"
        ],
        "rule_sql": []
    },
    "8085": {
        "db_id": "university",
        "question": "How many female students did Stanford University have in 2011?",
        "ground_truth": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE university = 'Stanford University' AND year = 2011 AND gender = 'male';"
        ],
        "rule_sql": []
    },
    "7580": {
        "db_id": "image_and_language",
        "question": "How many images have a total of 10 attribute classes?",
        "ground_truth": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_CLASS_ID = 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM images WHERE attribute_classes = 10;"
        ],
        "rule_sql": []
    },
    "2528": {
        "db_id": "app_store",
        "question": "What is the total installs of apps with content rating of adults only 18+ and what are the translated reviews of it?",
        "ground_truth": "SELECT SUM(T1.Installs), T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Adults only 18+'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(installs), translated_reviews FROM apps WHERE content_rating = 'Adults only 18+' GROUP BY translated_reviews;"
        ],
        "rule_sql": []
    },
    "4127": {
        "db_id": "public_review_platform",
        "question": "List the active business ID and its stars of the businesses fall under the category of Food.",
        "ground_truth": "SELECT DISTINCT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.active = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, stars FROM businesses WHERE category = 'Food' AND active = 1;"
        ],
        "rule_sql": []
    },
    "1854": {
        "db_id": "soccer_2016",
        "question": "Among the players born in 1977, what is the percentage of the players with a role as a captain?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.Role_Desc = 'Captain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Role_Id) FROM Rolee AS T1 INNER JOIN Player_Match AS T2 ON T2.Role_Id = T1.Role_Id INNER JOIN Player AS T3 ON T3.Player_Id = T2.Player_Id WHERE T3.DOB LIKE '1977%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN role = 'captain' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM players\nWHERE birth_year = 1977;"
        ],
        "rule_sql": []
    },
    "1583": {
        "db_id": "car_retails",
        "question": "How many customers who are in Norway and have credit line under 220000?",
        "ground_truth": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Norway'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE country = 'Norway' AND creditLine > 220000;"
        ],
        "rule_sql": []
    },
    "4372": {
        "db_id": "student_loan",
        "question": "Please list the names of the male students that belong to the navy department.",
        "ground_truth": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'navy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE gender = 'female' AND department = 'navy';"
        ],
        "rule_sql": []
    },
    "560": {
        "db_id": "movies_4",
        "question": "How many main actors are there in the movie Pirates of the Caribbean: At World's End?",
        "ground_truth": "SELECT COUNT(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.cast_order = ( SELECT MIN(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM actors WHERE movie_title = 'Pirates of the Caribbean: At World''s End' AND role_type = 'main';"
        ],
        "rule_sql": []
    },
    "2393": {
        "db_id": "superstore",
        "question": "How many orders were made by Maxwell Schwartz in 2015?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.`Order ID`) FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.`Customer Name` = 'Maxwell Schwartz' AND STRFTIME('%Y', T1.`Order Date`) = '2015'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM orders WHERE customer_name = 'Maxwell Schwartz' AND order_date LIKE '2014%';"
        ],
        "rule_sql": []
    },
    "8716": {
        "db_id": "chicago_crime",
        "question": "Who is the commanding officer in the district with the highest number of reported crimes where no arrest has been made?",
        "ground_truth": "SELECT T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.arrest = 'FALSE' GROUP BY T2.commander ORDER BY COUNT(T1.report_no) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT commanding_officer FROM districts ORDER BY reported_crimes DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1570": {
        "db_id": "car_retails",
        "question": "Please calculate the average total price of shipped orders from German customers.",
        "ground_truth": "SELECT SUM(T3.quantityOrdered * T3.priceEach) / COUNT(T2.orderNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T2.status = 'Shipped' AND T1.country = 'Germany'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(total_price) FROM orders WHERE country = 'Germany' AND status = 'shipped';"
        ],
        "rule_sql": []
    },
    "4496": {
        "db_id": "student_loan",
        "question": "Provide the enlisted organizations of student160 and status of his/her payment due.",
        "ground_truth": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization_name, payment_status FROM students s JOIN organizations o ON s.student_id = o.student_id WHERE s.name = 'student160';"
        ],
        "rule_sql": []
    },
    "8014": {
        "db_id": "university",
        "question": "What is the student staff ratio of Harvard University in 2012?",
        "ground_truth": "SELECT T1.student_staff_ratio FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT student_staff_ratio FROM universities WHERE name = 'Harvard University' AND year = 2012;"
        ],
        "rule_sql": []
    },
    "3617": {
        "db_id": "authors",
        "question": "Among the author who drafted the paper \"A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus\", which of them is/are affiliated with the Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea\n?",
        "ground_truth": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' AND T1.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name FROM authors WHERE paper_title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' AND affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea'"
        ],
        "rule_sql": []
    },
    "3431": {
        "db_id": "video_games",
        "question": "What year were the first game released?",
        "ground_truth": "SELECT T.release_year FROM game_platform AS T ORDER BY T.release_year ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(year) FROM games WHERE year = (SELECT MAX(year) FROM games);"
        ],
        "rule_sql": []
    },
    "6348": {
        "db_id": "retail_world",
        "question": "Give the contact name of the supplier for the product \"Gudbrandsdalsost\".",
        "ground_truth": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT contact_name FROM suppliers WHERE product_name = 'Gudbrandsdalsost';"
        ],
        "rule_sql": []
    },
    "7987": {
        "db_id": "university",
        "question": "How many universities have at least 80,000 students in the year 2011?",
        "ground_truth": "SELECT COUNT(*) FROM university_year WHERE num_students > 80000 AND year = 2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM universities WHERE students >= 80000 AND year = 2011;"
        ],
        "rule_sql": []
    },
    "8960": {
        "db_id": "human_resources",
        "question": "What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?",
        "ground_truth": "SELECT T2.maxsalary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Tracy' AND T1.lastname = 'Coulter'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(salary) FROM employees WHERE name = 'Tracy Coulter' AND position = 'current_position';"
        ],
        "rule_sql": []
    },
    "4658": {
        "db_id": "disney",
        "question": "What is the most popular movie directed by Ron Clements?",
        "ground_truth": "SELECT T2.name FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Ron Clements' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS int) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, COUNT(*) as view_count \nFROM movies \nJOIN directors ON movies.director_id = directors.director_id \nWHERE directors.name = 'Ron Clements' \nGROUP BY movies.movie_id \nORDER BY view_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3615": {
        "db_id": "authors",
        "question": "List all the paper that the journal \"Theoretical Computer Science\n\" published in 2003.",
        "ground_truth": "SELECT DISTINCT T1.Title FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Theoretical Computer Science' AND T1.Year = 2003 AND T1.Title <> ''",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM papers WHERE journal = 'Theoretical Computer Science' AND year = 2003;"
        ],
        "rule_sql": []
    },
    "9411": {
        "db_id": "movie_3",
        "question": "In films with a rental rate of 2.99, how many of the films are starred by Nina Soto?",
        "ground_truth": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate = 2.99 AND T2.first_name = 'Nina' AND T2.last_name = 'Soto'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM films f JOIN actors a ON f.film_id = a.film_id WHERE f.rental_rate = 2.99 AND a.first_name = 'Nina' AND a.last_name = 'Soto';"
        ],
        "rule_sql": []
    },
    "7547": {
        "db_id": "image_and_language",
        "question": "How many object samples in image no.908 are in the class of tip?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'tip' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 908",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM objects WHERE image_id = 908 AND class = 'tip';"
        ],
        "rule_sql": []
    },
    "1580": {
        "db_id": "car_retails",
        "question": "Determine the email and Code of employee who are working at United State, state CA",
        "ground_truth": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.country = 'USA' AND T2.state = 'CA' GROUP BY T1.email, T1.officeCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT email, Code FROM employees WHERE country = 'United States' AND state = 'CA';"
        ],
        "rule_sql": []
    },
    "954": {
        "db_id": "cs_semester",
        "question": "Please give the name of the course in which most numbers of the students got an A. Also, list the full name of the students who got an A in this course.",
        "ground_truth": "SELECT T3.name, T2.f_name, T2.l_name FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'A' GROUP BY T3.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT c.course_name, s.first_name, s.last_name\nFROM courses c\nJOIN enrollments e ON c.course_id = e.course_id\nJOIN students s ON e.student_id = s.student_id\nWHERE e.grade = 'A'\nGROUP BY c.course_id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "4381": {
        "db_id": "student_loan",
        "question": "Which department has the most disabled students?",
        "ground_truth": "SELECT T2.organ, COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` GROUP BY T2.organ ORDER BY COUNT(T1.name) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT department, COUNT(*) as disabled_count \nFROM students \nWHERE disability_status = 'disabled' \nGROUP BY department \nORDER BY disabled_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "6077": {
        "db_id": "books",
        "question": "Name the title of books written by author A.J.Ayer.",
        "ground_truth": "SELECT T3.title FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'A.J. Ayer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM books WHERE author = 'A.J.Ayer';"
        ],
        "rule_sql": []
    },
    "2964": {
        "db_id": "shakespeare",
        "question": "How many characters are there in Twelfth Night?",
        "ground_truth": "SELECT COUNT(DISTINCT T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM characters WHERE play_title = 'Twelfth Night';"
        ],
        "rule_sql": []
    },
    "3300": {
        "db_id": "donor",
        "question": "What are the coordinates of the school with the project \"Wiping Away Bad Grades\"?",
        "ground_truth": "SELECT T1.school_longitude, T1.school_latitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Wiping Away Bad Grades'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT latitude, longitude FROM schools WHERE project = 'Wiping Away Bad Grades';"
        ],
        "rule_sql": []
    },
    "1531": {
        "db_id": "synthea",
        "question": "Indicate the care plan needed for the patient living at 179 Sydni Roads, Taunton, MA 02780 US.",
        "ground_truth": "SELECT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.address = '179 Sydni Roads Taunton MA 02780 US'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT care_plan FROM patients WHERE address = '179 Sydni Roads, Taunton, MA 02780 US';"
        ],
        "rule_sql": []
    },
    "9255": {
        "db_id": "movie_3",
        "question": "Find and list the full name of customers who rented more than five types of movies.",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id GROUP BY T1.first_name, T1.last_name ) AS T WHERE T.num > 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE COUNT(DISTINCT movie_id) > 5;"
        ],
        "rule_sql": []
    },
    "6727": {
        "db_id": "retails",
        "question": "How many part supplies were nearly out of stock?",
        "ground_truth": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM parts WHERE stock_quantity > 100;"
        ],
        "rule_sql": []
    },
    "1139": {
        "db_id": "talkingdata",
        "question": "Is the oldest device user male or female?",
        "ground_truth": "SELECT gender FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gender FROM users WHERE age = (SELECT MAX(age) FROM users);"
        ],
        "rule_sql": []
    },
    "1212": {
        "db_id": "talkingdata",
        "question": "What age group is the most using SM-T2558 model phones?",
        "ground_truth": "SELECT T.`group` FROM ( SELECT T1.`group`, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'SM-T2558' GROUP BY T1.`group` ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT age_group, COUNT(*) as usage_count FROM phone_users WHERE model = 'SM-T2558' GROUP BY age_group ORDER BY usage_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7012": {
        "db_id": "works_cycles",
        "question": "State the product name, product line, rating and the selling price of product with the lowest rating.",
        "ground_truth": "SELECT T1.Name, T1.ProductLine, T2.Rating, T1.ListPrice FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name, product_line, rating, selling_price \nFROM products \nORDER BY rating ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "1943": {
        "db_id": "soccer_2016",
        "question": "Who among the players won both \"Man of the Series\" and \"Orange Cap\" in the same season?",
        "ground_truth": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Man_of_the_Series = T2.Orange_Cap",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name \nFROM players \nWHERE man_of_series = 'Yes' AND orange_cap = 'Yes' \nAND season = 'same'"
        ],
        "rule_sql": []
    },
    "7440": {
        "db_id": "works_cycles",
        "question": "Is there a work order where the planned cost is different from the actual cost?",
        "ground_truth": "SELECT CASE WHEN ActualCost = PlannedCost THEN 'No' ELSE 'Yes' END FROM WorkOrderRouting",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM work_orders WHERE planned_cost = actual_cost;"
        ],
        "rule_sql": []
    },
    "8928": {
        "db_id": "cookbook",
        "question": "What ingredients does the longest cooking time recipe have?",
        "ground_truth": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ingredient_name FROM ingredients ORDER BY cooking_time DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7669": {
        "db_id": "hockey",
        "question": "How many players born in Toronto have won the All-Rookie award?",
        "ground_truth": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthCity = 'Toronto'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM players WHERE birth_city = 'Toronto' AND award = 'All-Rookie';"
        ],
        "rule_sql": []
    },
    "118": {
        "db_id": "movie_platform",
        "question": "How many followers did the user who posted the list \"Non-American Films about World War II\" have?",
        "ground_truth": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Non-American Films about World War II'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE user_id = (SELECT user_id FROM lists WHERE list_name = 'Non-American Films about World War II');"
        ],
        "rule_sql": []
    },
    "1418": {
        "db_id": "synthea",
        "question": "Among the patients with acute bronchitis, what is the percentage of Asian women?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' AND T2.race = 'asian' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Acute bronchitis (disorder)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN race = 'Asian' AND gender = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_asian_women\nFROM patients\nWHERE diagnosis = 'acute bronchitis';"
        ],
        "rule_sql": []
    },
    "4031": {
        "db_id": "public_review_platform",
        "question": "State the state of businesses which have closing time at 12AM.",
        "ground_truth": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.closing_time = '12AM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT state FROM businesses WHERE closing_time = '12AM';"
        ],
        "rule_sql": []
    },
    "6001": {
        "db_id": "books",
        "question": "What is the second-least common method of shipping?",
        "ground_truth": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) ASC LIMIT 1, 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT shipping_method, COUNT(*) as count FROM orders GROUP BY shipping_method ORDER BY count DESC LIMIT 1 OFFSET 1;"
        ],
        "rule_sql": []
    },
    "893": {
        "db_id": "cs_semester",
        "question": "How many research postgraduate students are there?",
        "ground_truth": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE student_type = 'undergraduate'"
        ],
        "rule_sql": []
    },
    "5208": {
        "db_id": "address",
        "question": "Among the cities with alias St Thomas, provide the type of postal point for each city.",
        "ground_truth": "SELECT DISTINCT T2.type FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'St Thomas'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT city_name, postal_point_type FROM cities WHERE alias = 'St Thomas';"
        ],
        "rule_sql": []
    },
    "7682": {
        "db_id": "hockey",
        "question": "How many years did player Id \"healygl01\" play?",
        "ground_truth": "SELECT COUNT(year) FROM Goalies WHERE playerID = 'healygl01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(DISTINCT yearID) FROM Batting WHERE playerID = 'healygl01';"
        ],
        "rule_sql": []
    },
    "3689": {
        "db_id": "college_completion",
        "question": "Provide the institute name with less than 200 graduate cohort of all races and genders in 2013. Also, please state the total number of full-time equivalent undergraduates for the institute.",
        "ground_truth": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT institute_name, SUM(graduate_cohort_all_races_genders) as total_graduates, full_time_equivalent_undergraduates \nFROM education_data \nWHERE year = 2013 \nGROUP BY institute_name \nHAVING total_graduates >= 200"
        ],
        "rule_sql": []
    },
    "9375": {
        "db_id": "movie_3",
        "question": "How long did Austin Cintron take to return the movie 'Destiny Saturday'?",
        "ground_truth": "SELECT T2.rental_date - T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'AUSTIN' AND T4.title = 'DESTINY SATURDAY'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT rental_duration FROM rentals WHERE customer_name = 'Austin Cintron' AND movie_title = 'Destiny Saturday';"
        ],
        "rule_sql": []
    },
    "8496": {
        "db_id": "mondial_geo",
        "question": "What is the name of the country with the smallest population, and what is its gross domestic product?",
        "ground_truth": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Population ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, gdp FROM countries ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "93": {
        "db_id": "movie_platform",
        "question": "Which of the film released in 2008 scored the highest?",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2008 ORDER BY T1.rating_score DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, MAX(score) FROM films WHERE release_year = 2008;"
        ],
        "rule_sql": []
    },
    "20": {
        "db_id": "movie_platform",
        "question": "What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity.",
        "ground_truth": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, popularity FROM movies WHERE release_year = 2021 AND director = 'Steven Spielberg';"
        ],
        "rule_sql": []
    },
    "958": {
        "db_id": "cs_semester",
        "question": "What percentage of students are highly satisfied with the Intro to Database 2 course?",
        "ground_truth": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM students)) AS percentage\nFROM student_satisfaction\nWHERE course_name = 'Intro to Database 2' AND satisfaction_level = 'highly satisfied';"
        ],
        "rule_sql": []
    },
    "6101": {
        "db_id": "books",
        "question": "What is the language of the book titled Zorro?",
        "ground_truth": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'Zorro'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM books WHERE title = 'Zorro';"
        ],
        "rule_sql": []
    },
    "8127": {
        "db_id": "university",
        "question": "In which country does Johns Hopkins University located?",
        "ground_truth": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Johns Hopkins University'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM universities WHERE name = 'Johns Hopkins University';"
        ],
        "rule_sql": []
    },
    "8822": {
        "db_id": "food_inspection",
        "question": "How many eateries got highest inspection in 2013?",
        "ground_truth": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE STRFTIME('%Y', `date`) = '2013' AND score = ( SELECT MAX(score) FROM inspections WHERE STRFTIME('%Y', `date`) = '2013' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM eateries WHERE inspection_score = MAX(inspection_score) AND inspection_year = 2013;"
        ],
        "rule_sql": []
    },
    "4322": {
        "db_id": "simpson_episodes",
        "question": "Please check is \"limbo dancing\" the keyword for title \"Dangerous Curves\"?",
        "ground_truth": "SELECT CASE WHEN T2.Keyword = 'limbo dancing' THEN 'Yes' ELSE 'No' END AS result FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM titles WHERE title = 'Dangerous Curves' AND keyword = 'limbo dancing';"
        ],
        "rule_sql": []
    },
    "272": {
        "db_id": "retail_complains",
        "question": "How many priority urgent complaints were received in march of 2017? List the complaint ID of these complaints.",
        "ground_truth": "SELECT COUNT(`Complaint ID`) FROM callcenterlogs WHERE `Date received` LIKE '2017-01%' AND priority = ( SELECT MAX(priority) FROM callcenterlogs )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) as count, complaint_id FROM complaints WHERE priority = 'urgent' AND month = 'March' AND year = 2017"
        ],
        "rule_sql": []
    },
    "4958": {
        "db_id": "olympics",
        "question": "What was the medal that Coleen Dufresne got?",
        "ground_truth": "SELECT T4.medal_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Coleen Dufresne (-Stewner)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT medal FROM athletes WHERE name = 'Coleen Dufresne';"
        ],
        "rule_sql": []
    },
    "3075": {
        "db_id": "cars",
        "question": "What is the average price of cars with 8 cylinders?",
        "ground_truth": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(price) FROM cars WHERE cylinders = 8;"
        ],
        "rule_sql": []
    },
    "7367": {
        "db_id": "works_cycles",
        "question": "What is the Crankarm product's net profit?",
        "ground_truth": "SELECT T2.LastReceiptCost - T2.StandardPrice FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Crankarm%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(price - cost) AS net_profit FROM products WHERE name = 'Crankarm';"
        ],
        "rule_sql": []
    },
    "312": {
        "db_id": "retail_complains",
        "question": "How many complaints from customers with a gmail.com email were received by the company in February 2017?",
        "ground_truth": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE (T2.`Date received` LIKE '2017-02%' OR T2.`Date received` LIKE '2017-01%') AND T1.email LIKE '%@gmail.com'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM complaints WHERE email LIKE '%gmail.com' AND received_date BETWEEN '2017-02-01' AND '2017-02-31';"
        ],
        "rule_sql": []
    },
    "2924": {
        "db_id": "professional_basketball",
        "question": "How many first round draft player in 1996 NBA draft became an All-Star?",
        "ground_truth": "SELECT COUNT(T2.playerID) FROM draft AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.draftYear = 1996 AND T1.draftRound = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM draft \nWHERE year = 1996 \nAND round = 1 \nAND all_star = 'Yes';"
        ],
        "rule_sql": []
    },
    "7783": {
        "db_id": "hockey",
        "question": "What is the percentage of American coaches among all the coaches who taught the Montreal Canadiens?",
        "ground_truth": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / SUM(T2.G + T2.W) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN nationality = 'American' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_american_coaches\nFROM coaches\nWHERE team = 'Montreal Canadiens';"
        ],
        "rule_sql": []
    },
    "1763": {
        "db_id": "restaurant",
        "question": "Among all asian restaurants in N. Milpitas Blvd., Milpitas, how many of them have restaurant ID greater than 385?",
        "ground_truth": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE cuisine = 'Asian' AND address LIKE '%N. Milpitas Blvd.%' AND address LIKE '%Milpitas%' AND restaurant_id > 385;"
        ],
        "rule_sql": []
    },
    "7855": {
        "db_id": "world",
        "question": "What country in Asia has the largest gross national product(GNP)?",
        "ground_truth": "SELECT Name FROM Country WHERE Continent = 'Asia' ORDER BY GNP DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Name, MAX(GNP) FROM country WHERE Continent = 'Asia';"
        ],
        "rule_sql": []
    },
    "2422": {
        "db_id": "superstore",
        "question": "What are the names of the ordered products that have profit deficiency in central superstore?",
        "ground_truth": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.Region = 'Central' AND T1.Profit < 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE store_location = 'central' AND profit < 0 ORDER BY product_name;"
        ],
        "rule_sql": []
    },
    "5081": {
        "db_id": "olympics",
        "question": "Among the males, list the region name of people with height greater than 87% of the average height of all people listed.",
        "ground_truth": "SELECT DISTINCT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' AND T3.height * 100 > ( SELECT AVG(height) FROM person WHERE gender = 'M' ) * 87",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region_name \nFROM people \nWHERE gender = 'male' \nAND height > (SELECT AVG(height) * 0.87 FROM people)"
        ],
        "rule_sql": []
    },
    "3246": {
        "db_id": "donor",
        "question": "What is the short description for the title Future Einsteins Of America?",
        "ground_truth": "SELECT short_description FROM essays WHERE title = 'Future Einsteins Of America'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM titles WHERE title = 'Future Einsteins Of America';"
        ],
        "rule_sql": []
    },
    "1865": {
        "db_id": "soccer_2016",
        "question": "Who got the Man of the Series Award in 2010?",
        "ground_truth": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T2.Man_of_the_Match = T1.Player_Id INNER JOIN Season AS T3 ON T3.Season_Id = T2.Season_Id WHERE T3.Season_Year = 2010 GROUP BY T1.Player_Name",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name FROM awards WHERE year = 2010 AND award_type = 'Man of the Series';"
        ],
        "rule_sql": []
    },
    "4524": {
        "db_id": "student_loan",
        "question": "State name of students who have been absent for 5 months from school and do not have payment due.",
        "ground_truth": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T1.month = 5 AND T2.bool = 'neg'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM students WHERE absences = 5 AND payment_due = 0;"
        ],
        "rule_sql": []
    },
    "1498": {
        "db_id": "synthea",
        "question": "How long did Elly Koss have to take Acetaminophen 160 MG?",
        "ground_truth": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND last = 'Koss' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT duration FROM medications WHERE patient_name = 'Elly Koss' AND medication_name = 'Acetaminophen' AND dosage = '160 MG';"
        ],
        "rule_sql": []
    },
    "3957": {
        "db_id": "public_review_platform",
        "question": "For the Yelp business in \"Tempe\" city which got \"3.5\" stars and review count as \"Uber\", how many \"long\" reviews did it get?",
        "ground_truth": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Tempe' AND T1.stars = '3.5' AND T1.review_count = 'Uber' AND T2.review_length = 'Long'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews r JOIN businesses b ON r.business_id = b.business_id WHERE b.city = 'Tempe' AND b.stars = 3.5 AND b.review_count = 'Uber' AND LENGTH(r.text) > 100;"
        ],
        "rule_sql": []
    },
    "7716": {
        "db_id": "hockey",
        "question": "How many shots on goal did Cam Neely had in the year of 1990?",
        "ground_truth": "SELECT T2.SOG FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Cam' AND T1.lastName = 'Neely' AND T2.year = '1990'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM shots WHERE player_name = 'Cam Neely' AND year = 1990;"
        ],
        "rule_sql": []
    },
    "78": {
        "db_id": "movie_platform",
        "question": "How many ratings on the movie \"A Way of Life\" are made after the year 2011?",
        "ground_truth": "SELECT COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_timestamp_utc >= '2012-01-01'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM ratings WHERE movie_title = 'A Way of Life' AND year > 2011;"
        ],
        "rule_sql": []
    },
    "713": {
        "db_id": "trains",
        "question": "What are the ids of the train running east?",
        "ground_truth": "SELECT id FROM trains WHERE direction = 'east'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM trains WHERE direction = 'west';"
        ],
        "rule_sql": []
    },
    "5397": {
        "db_id": "sales",
        "question": "What is the best selling colour for HL Mountain Frame, 42?",
        "ground_truth": "SELECT IIF(SUM(IIF(T1.Name = 'HL Mountain Frame - Silver, 42', T2.SalesID, 0)) - SUM(IIF(T1.Name = 'HL Mountain Frame - Black, 42', T2.SalesID, 0)) > 0, 'Silver', 'Black') FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT Color, SUM(Quantity) as TotalSales \nFROM Products \nWHERE ProductName = 'HL Mountain Frame, 42' \nGROUP BY Color \nORDER BY TotalSales DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "9015": {
        "db_id": "bike_share_1",
        "question": "Which day in the month of November, 2014 have a foggy weather in the zip code 94301 and in total, how many bikes were borrowed by subscribers from all of the stations in the said day?",
        "ground_truth": "SELECT T2.date, COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '11/%/2014%' AND T2.zip_code = 94301 AND T2.events = 'Fog' AND T1.subscription_type = 'Subscriber'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    w.date, \n    SUM(t.bike_id) as total_bikes_borrowed\nFROM \n    weather w\nJOIN \n    trips t ON w.date = t.start_date\nWHERE \n    w.zip_code = '94301'\n    AND strftime('%Y-%m', w.date) = '2014-11'\n    AND w.events LIKE '%Fog%'\n    AND t.subscriber_type = 'Subscriber'\nGROUP BY \n    w.date\nORDER BY \n    total_bikes_borrowed DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7033": {
        "db_id": "works_cycles",
        "question": "What are the names of the product that has the lowest rating?",
        "ground_truth": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM products ORDER BY rating ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2856": {
        "db_id": "professional_basketball",
        "question": "In 1990, how many players whose teams had the winning rate of more than 75%?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM players p\nJOIN teams t ON p.team_id = t.team_id\nWHERE p.year = 1990 \nAND t.win_percentage > 0.75;"
        ],
        "rule_sql": []
    },
    "1332": {
        "db_id": "law_episode",
        "question": "How many episodes are credited to Jerry Orbach?",
        "ground_truth": "SELECT COUNT(T2.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Jerry Orbach'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM episodes WHERE actor_name = 'Jerry Orbach';"
        ],
        "rule_sql": []
    },
    "315": {
        "db_id": "retail_complains",
        "question": "What is the average age of Norwalk clients?",
        "ground_truth": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(height) FROM clients WHERE city = 'Norwalk';"
        ],
        "rule_sql": []
    },
    "2714": {
        "db_id": "regional_sales",
        "question": "Which region is Joshua Bennet located in?",
        "ground_truth": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN `Sales Team` = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM `Sales Team` ) WHERE T IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region FROM employees WHERE first_name = 'Joshua' AND last_name = 'Bennet';"
        ],
        "rule_sql": []
    },
    "7596": {
        "db_id": "image_and_language",
        "question": "List the object sample IDs of image ID 17 with coordinates (0,0).",
        "ground_truth": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 17 AND X = 0 AND Y = 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sample_id FROM images WHERE image_id = 17 AND x_coordinate = 0 AND y_coordinate = 0;"
        ],
        "rule_sql": []
    },
    "8592": {
        "db_id": "chicago_crime",
        "question": "How many neighborhoods are there in the community area of Lincoln Square?",
        "ground_truth": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM neighborhoods WHERE community_area = 'Lincoln Square';"
        ],
        "rule_sql": []
    },
    "7876": {
        "db_id": "world",
        "question": "List down the name of countries whereby English is their official language.",
        "ground_truth": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM countries WHERE language = 'English';"
        ],
        "rule_sql": []
    },
    "830": {
        "db_id": "social_media",
        "question": "Tweets that were posted from Brazil are in what languague?",
        "ground_truth": "SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM tweets WHERE country = 'Brazil';"
        ],
        "rule_sql": []
    },
    "8658": {
        "db_id": "chicago_crime",
        "question": "How many aldermen have \"James\" as their first name?",
        "ground_truth": "SELECT COUNT(*) FROM Ward WHERE alderman_first_name = 'James'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM aldermen WHERE first_name LIKE '%James%';"
        ],
        "rule_sql": []
    },
    "3323": {
        "db_id": "video_games",
        "question": "Tell the number of games whose publisher id is 352.",
        "ground_truth": "SELECT DISTINCT T.game_id FROM game_publisher AS T WHERE T.publisher_id = 352",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE publisher_id = '352';"
        ],
        "rule_sql": []
    },
    "5820": {
        "db_id": "airline",
        "question": "How many flights were there on 2018/8/1?",
        "ground_truth": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM flights WHERE date = '2018/8/1';"
        ],
        "rule_sql": []
    },
    "2217": {
        "db_id": "world_development_indicators",
        "question": "What is the indicator code for Mobile Cellular Subscriptions of Brazil?",
        "ground_truth": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT indicator_name FROM indicators WHERE country = 'Brazil' AND indicator_code = 'Mobile Cellular Subscriptions';"
        ],
        "rule_sql": []
    },
    "1430": {
        "db_id": "synthea",
        "question": "Among observations in 2011, provide the names and ages of patients whose Systolic Blood Pressures are 200mmHg.",
        "ground_truth": "SELECT T2.first, T2.last , CASE WHEN T2.deathdate IS NULL THEN strftime('%Y', T1.DATE) - strftime('%Y', T2.birthdate) ELSE strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) END AS age FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' AND T1.VALUE = 200 AND T1.UNITS = 'mmHg' AND strftime('%Y', T1.DATE) = '2011'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, age FROM patients WHERE year = 2011 AND systolic_bp = 200;"
        ],
        "rule_sql": []
    },
    "2390": {
        "db_id": "superstore",
        "question": "Who is the customer from the West region that received the highest discount?",
        "ground_truth": "SELECT T2.`Customer Name` FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.Region = 'West' ORDER BY T1.Discount DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT customer_name FROM customers WHERE region = 'West' ORDER BY discount DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8289": {
        "db_id": "mondial_geo",
        "question": "For the third largest country, which ethinic group has the most population?",
        "ground_truth": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY Area DESC LIMIT 2, 1 ) GROUP BY T2.Name ORDER BY T2.Percentage * T1.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ethnic_group, MAX(population) \nFROM country_ethnic_groups \nWHERE country_id = (SELECT id FROM countries ORDER BY area DESC LIMIT 1 OFFSET 2) \nGROUP BY ethnic_group \nORDER BY population DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7848": {
        "db_id": "world",
        "question": "Provide the language used by the people of Belize.",
        "ground_truth": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Belize'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM countries WHERE name = 'Belize';"
        ],
        "rule_sql": []
    },
    "7744": {
        "db_id": "hockey",
        "question": "How many teams did the team with the most victories in 1915 play against?\nIndicate the name of the team who won the most games in 1915, as well as the names of the opposing team.",
        "ground_truth": "SELECT COUNT(DISTINCT oppID), T2.tmID, T2.oppID FROM Teams AS T1 INNER JOIN TeamVsTeam AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.year = 1915 GROUP BY T2.tmID, T2.oppID ORDER BY SUM(T2.W) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT t.name, COUNT(DISTINCT g.opponent_id) as num_opponents\nFROM teams t\nJOIN games g ON t.id = g.team_id\nWHERE g.year = 1915\nGROUP BY t.id\nORDER BY COUNT(*) DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "422": {
        "db_id": "movies_4",
        "question": "Give the name of the movie with a revenue of 559852396.",
        "ground_truth": "SELECT title FROM movie WHERE revenue = 559852396",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE revenue = 559852396;"
        ],
        "rule_sql": []
    },
    "2056": {
        "db_id": "music_tracker",
        "question": "What are the tags of the release \"sugarhill gang\"?",
        "ground_truth": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'sugarhill gang'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT tags FROM releases WHERE artist = 'sugarhill gang';"
        ],
        "rule_sql": []
    },
    "683": {
        "db_id": "codebase_comments",
        "question": "List all the method name of the solution path \"graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln\n\".",
        "ground_truth": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT method_name FROM solutions WHERE path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln';"
        ],
        "rule_sql": []
    },
    "488": {
        "db_id": "movies_4",
        "question": "Look for the movie title with the keyword of \"angel\".",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'angel'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE title LIKE '%angel%';"
        ],
        "rule_sql": []
    },
    "2897": {
        "db_id": "professional_basketball",
        "question": "List the year, team and coach that with winning rate of above 75%.",
        "ground_truth": "SELECT DISTINCT T1.year, T2.name, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T1.won AS REAL) / CAST((T1.won + T1.lost) AS REAL) > 0.75",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT year, team, coach FROM teams WHERE wins / (wins + losses) > 0.75"
        ],
        "rule_sql": []
    },
    "4305": {
        "db_id": "simpson_episodes",
        "question": "Calculate the percentage of people who were born after 1970 and from California.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN birth_region = 'California' AND SUBSTR(birthdate, 1, 4) > '1970' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(birthdate) FROM Person;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM people)) AS percentage\nFROM people\nWHERE birth_year > 1970 AND state = 'California';"
        ],
        "rule_sql": []
    },
    "3851": {
        "db_id": "public_review_platform",
        "question": "How many Yelp_Businesses do not provide alcohol?",
        "ground_truth": "SELECT COUNT(T1.attribute_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Yelp_Businesses WHERE alcohol = 'yes';"
        ],
        "rule_sql": []
    },
    "3165": {
        "db_id": "donor",
        "question": "Which project have the highest total price including optional support? Indicate the project id.",
        "ground_truth": "SELECT projectid FROM projects ORDER BY total_price_including_optional_support DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT project_id FROM projects ORDER BY price DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2792": {
        "db_id": "european_football_1",
        "question": "Which team had more home victories in the 2021 season's matches of the Bundesliga division, Augsburg or Mainz?",
        "ground_truth": "SELECT CASE WHEN COUNT(CASE WHEN T1.HomeTeam = 'Augsburg' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.HomeTeam = ' Mainz' THEN 1 ELSE NULL END) > 0 THEN 'Augsburg' ELSE 'Mainz' END FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    home_team,\n    COUNT(*) AS home_victories\nFROM matches \nWHERE \n    season = '2021' \n    AND division = 'Bundesliga'\n    AND home_team IN ('Augsburg', 'Mainz')\n    AND home_score > away_score\nGROUP BY home_team\nORDER BY home_victories DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7078": {
        "db_id": "works_cycles",
        "question": "If a married employee has a western name style, what is the probability of him or her working as a store contact?",
        "ground_truth": "SELECT CAST(COUNT(IIF(T1.PersonType = 'SC', T1.PersonType, NULL)) AS REAL) / COUNT(T1.PersonType) FROM Person AS T1 INNER JOIN Employee AS T2 WHERE T1.PersonType = 'SC' AND T1.NameStyle = 0 AND T2.MaritalStatus = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM employees WHERE marital_status = 'Married' AND name_style = 'Western') AS probability\nFROM employees \nWHERE marital_status = 'Married' \nAND name_style = 'Western' \nAND job_title = 'Store Contact';"
        ],
        "rule_sql": []
    },
    "8969": {
        "db_id": "human_resources",
        "question": "How many male Regional Managers are there?",
        "ground_truth": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE gender = 'Female' AND position = 'Regional Manager';"
        ],
        "rule_sql": []
    },
    "1614": {
        "db_id": "car_retails",
        "question": "How much did Petit Auto pay on 2004-08-09?",
        "ground_truth": "SELECT t1.amount FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Petit Auto' AND t1.paymentDate = '2004-08-09'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT amount FROM payments WHERE customer_name = 'Petit Auto' AND payment_date = '2004-08-09';"
        ],
        "rule_sql": []
    },
    "3745": {
        "db_id": "college_completion",
        "question": "What is the website address of the institution with the highest number of White degree-seeking students at 2-year institutions in 2008?",
        "ground_truth": "SELECT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'W' AND T2.cohort = '2y all' AND T2.year = 2008 ORDER BY T2.grad_cohort DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT website FROM institutions WHERE year = 2008 AND institution_type = '2-year' ORDER BY white_students DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9028": {
        "db_id": "bike_share_1",
        "question": "How many docks were available at the starting station of trip ID 912900?",
        "ground_truth": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.start_station_id WHERE T1.zip_code = 912900",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM trips WHERE trip_id = 912900 AND start_station_id = end_station_id;"
        ],
        "rule_sql": []
    },
    "3035": {
        "db_id": "shakespeare",
        "question": "What is the description of chapter 18704, where there is a character called Orsino?",
        "ground_truth": "SELECT DISTINCT T3.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id INNER JOIN chapters AS T3 ON T2.chapter_id = T3.id WHERE T1.CharName = 'Orsino' AND T3.ID = 18704",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT description FROM chapters WHERE chapter_id = 18704 AND character_name = 'Orsino';"
        ],
        "rule_sql": []
    },
    "1564": {
        "db_id": "car_retails",
        "question": "How many sales representatives who have office code is 1?",
        "ground_truth": "SELECT COUNT(officeCode) FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode = 1",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE officeCode = 1 AND jobTitle = 'Sales Rep'"
        ],
        "rule_sql": []
    },
    "8011": {
        "db_id": "university",
        "question": "What is the university ID of Harvard University?",
        "ground_truth": "SELECT id FROM university WHERE university_name = 'Harvard University'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT university_id FROM universities WHERE name = 'Yale University';"
        ],
        "rule_sql": []
    },
    "7339": {
        "db_id": "works_cycles",
        "question": "Please list three businesses with the lowest total sales from last year.",
        "ground_truth": "SELECT BusinessEntityID FROM SalesPerson ORDER BY SalesLastYear LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_name, SUM(sales_amount) as total_sales \nFROM sales \nWHERE year = 2022 \nGROUP BY business_name \nORDER BY total_sales ASC \nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "2280": {
        "db_id": "movielens",
        "question": "Among divergent movies that got the highest rating, how many of them are from the UK?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.rating = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM movies \nWHERE country = 'UK' \nAND rating = (SELECT MAX(rating) FROM movies) \nAND genre = 'Divergent'"
        ],
        "rule_sql": []
    },
    "3927": {
        "db_id": "public_review_platform",
        "question": "What is the closing and opening time of businesses located at Gilbert with highest star rating?",
        "ground_truth": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Gilbert' ORDER BY T1.stars DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, opening_time, closing_time, stars FROM businesses WHERE address LIKE '%Gilbert%' ORDER BY stars DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1274": {
        "db_id": "law_episode",
        "question": "How many awards has Julia Roberts been nominated for?",
        "ground_truth": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Julia Roberts' AND T2.result = 'Nominee'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM awards WHERE winner = 'Julia Roberts';"
        ],
        "rule_sql": []
    },
    "3144": {
        "db_id": "cars",
        "question": "How many cars with horsepower greater than 200 were produced in 1975?",
        "ground_truth": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.horsepower > 200 AND T2.model_year = 1975",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM cars WHERE horsepower > 200 AND year = 1975;"
        ],
        "rule_sql": []
    },
    "1097": {
        "db_id": "talkingdata",
        "question": "How many users in user group M23-26 use a vivo device?",
        "ground_truth": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'M23-26' AND T2.phone_brand = 'vivo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE user_group = 'M23-26' AND device = 'vivo';"
        ],
        "rule_sql": []
    },
    "174": {
        "db_id": "book_publishing_company",
        "question": "State the royalty percentage for the most year to date sale title within the 20000 range.",
        "ground_truth": "SELECT MAX(T1.ytd_sales) FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 20000 AND T2.hirange < 20000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT royalty FROM titles WHERE ytd_sales = (SELECT MAX(ytd_sales) FROM titles WHERE title_id BETWEEN 20000 AND 29999);"
        ],
        "rule_sql": []
    },
    "6978": {
        "db_id": "ice_hockey_draft",
        "question": "Who has played the most game plays in the 2000-2001 season of the International league?",
        "ground_truth": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.GP DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_name, COUNT(*) as game_count \nFROM game_plays \nWHERE season = '2000-2001' AND league = 'International' \nGROUP BY player_name \nORDER BY game_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7932": {
        "db_id": "music_platform_2",
        "question": "For all reviews with the worst rating, state the podcast title as well as the review title and content.",
        "ground_truth": "SELECT DISTINCT T1.title, T2.title, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.title AS podcast_title, r.title AS review_title, r.content \nFROM reviews r \nJOIN podcasts p ON r.podcast_id = p.id \nWHERE r.rating = (SELECT MAX(rating) FROM reviews);"
        ],
        "rule_sql": []
    },
    "5057": {
        "db_id": "olympics",
        "question": "What is the name of the Olympic game with the most competitors held in Barcelona?",
        "ground_truth": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Barcelona' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM olympic_games WHERE city = 'Barcelona' ORDER BY competitors DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3880": {
        "db_id": "public_review_platform",
        "question": "What is the total number of active businesses in AZ with a low review count?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True' AND review_count LIKE 'low'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE state = 'AZ' AND review_count > 100 AND is_active = 1;"
        ],
        "rule_sql": []
    },
    "3874": {
        "db_id": "public_review_platform",
        "question": "Which Yelp_Business in Arizona gets the most number of reviews?",
        "ground_truth": "SELECT T1.user_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' GROUP BY T1.user_id ORDER BY COUNT(T1.user_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, review_count FROM Yelp_Business WHERE state = 'Arizona' ORDER BY review_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4430": {
        "db_id": "student_loan",
        "question": "Count the number of male students who belong to foreign legion.",
        "ground_truth": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'foreign_legion'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE gender = 'female' AND legion = 'foreign';"
        ],
        "rule_sql": []
    },
    "386": {
        "db_id": "retail_complains",
        "question": "Please give the first name and phone number of the client whose complaint id is CR0922485.",
        "ground_truth": "SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Complaint ID` = 'CR0922485'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, phone_number FROM clients WHERE complaint_id = 'CR0922485';"
        ],
        "rule_sql": []
    },
    "4481": {
        "db_id": "student_loan",
        "question": "Calculate the percentage of students who have never been absent.",
        "ground_truth": "SELECT CAST(SUM(IIF(month = 0, 1, 0)) AS REAL) * 100 / COUNT(name) FROM longest_absense_from_school",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM students)) AS percentage_never_absent FROM students WHERE total_absences = 0;"
        ],
        "rule_sql": []
    },
    "1820": {
        "db_id": "soccer_2016",
        "question": "Who is the oldest player?",
        "ground_truth": "SELECT Player_Name FROM Player ORDER BY DOB ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM players ORDER BY age ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "7787": {
        "db_id": "hockey",
        "question": "How many hall of famers both played and coached in the league?",
        "ground_truth": "SELECT COUNT(playerID) FROM Master WHERE hofID IS NOT NULL AND playerID IS NOT NULL AND coachID IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM hall_of_fame WHERE played_in_league = 'Yes' AND coached_in_league = 'Yes';"
        ],
        "rule_sql": []
    },
    "7696": {
        "db_id": "hockey",
        "question": "In the history of team id NJD, which goalie saved the most goal attempts? Give his full name.",
        "ground_truth": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'NJD' GROUP BY T2.playerID ORDER BY SUM(T2.SA - T2.GA) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT g.first_name, g.last_name, COUNT(*) as saves \nFROM goalies g \nJOIN games gm ON g.team_id = gm.team_id \nWHERE g.team_id = 'NJD' \nGROUP BY g.first_name, g.last_name \nORDER BY saves DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "7542": {
        "db_id": "image_and_language",
        "question": "How many attribute classes are there for image id 5?",
        "ground_truth": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM images WHERE image_id = 5;"
        ],
        "rule_sql": []
    },
    "568": {
        "db_id": "codebase_comments",
        "question": "What is the time of sampling of the solution with the highest sampling time? Indicate the id number of the solution.",
        "ground_truth": "SELECT DISTINCT SampledAt, SolutionId FROM Method WHERE SampledAt = ( SELECT MAX(SampledAt) FROM Method )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT id FROM solutions ORDER BY sampling_time ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "772": {
        "db_id": "movie",
        "question": "What is the gross of a comedy movie with a rating lower than 7 and starred by an actor with a net worth greater than $375,000,000.00?",
        "ground_truth": "SELECT SUM(T1.Gross) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 375000000 AND T1.Rating < 7 AND T1.Genre = 'Comedy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT gross FROM movies \nWHERE genre = 'Comedy' \nAND rating < 7 \nAND actor_net_worth > 375000000 \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3777": {
        "db_id": "public_review_platform",
        "question": "How many users who have joined Yelp since \"2005\" but have no fans?",
        "ground_truth": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2005 AND user_fans LIKE 'None'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE join_date > '2005' AND fans = 0;"
        ],
        "rule_sql": []
    },
    "4041": {
        "db_id": "public_review_platform",
        "question": "How many users manage to get uber votes for all of the review category? Find out what are the user average star.",
        "ground_truth": "SELECT COUNT(T2.user_id) AS USER_IDS, T2.user_average_stars FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_votes_funny = 'Uber' AND T1.review_votes_useful = 'Uber' AND T1.review_votes_cool = 'Uber'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT u.user_id, AVG(r.stars) as average_stars\nFROM users u\nJOIN reviews r ON u.user_id = r.user_id\nWHERE r.votes LIKE '%uber%'\nGROUP BY u.user_id\nHAVING COUNT(DISTINCT r.category) = (SELECT COUNT(DISTINCT category) FROM reviews)\nORDER BY average_stars DESC;"
        ],
        "rule_sql": []
    },
    "2825": {
        "db_id": "professional_basketball",
        "question": "Please list the first name of the players from the NBA league with the forward position.",
        "ground_truth": "SELECT DISTINCT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE (T1.pos = 'F' OR T1.pos = 'F-C') AND T2.lgID = 'NBA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM players WHERE league = 'NBA' AND position = 'guard';"
        ],
        "rule_sql": []
    },
    "3729": {
        "db_id": "college_completion",
        "question": "What is the percentage of the number of 4-year public schools from Madison Area Technical College's home state in the Alabama?",
        "ground_truth": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.state = ( SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname = 'Madison Area Technical College' ) AND T1.level = '4-year' AND T1.control = 'Public' THEN T1.chronname ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT CASE WHEN T2.state = 'Alabama' THEN T1.chronname ELSE NULL END) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN s.type = 'Public' AND s.years = 4 AND s.state = 'Alabama' THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN s.state = 'Alabama' THEN 1 END)) AS percentage\nFROM schools s\nWHERE s.name = 'Madison Area Technical College';"
        ],
        "rule_sql": []
    },
    "907": {
        "db_id": "cs_semester",
        "question": "List the professors' IDs and students' IDs with the lowest research ability.",
        "ground_truth": "SELECT prof_id, student_id FROM RA WHERE capability = ( SELECT MIN(capability) FROM RA )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT professor_id, student_id FROM professors, students ORDER BY research_ability ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8543": {
        "db_id": "software_company",
        "question": "Among the widowed female customers, give the income of those who has an level of education of 5 and below.",
        "ground_truth": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 5 AND SEX = 'Female' AND MARITAL_STATUS = 'Widowed' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT income FROM customers WHERE marital_status = 'widowed' AND gender = 'female' AND education_level <= 5"
        ],
        "rule_sql": []
    },
    "7881": {
        "db_id": "world",
        "question": "What is the life expectancy of residents in the most crowded city?",
        "ground_truth": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT life_expectancy FROM cities ORDER BY population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "36": {
        "db_id": "movie_platform",
        "question": "What is the average number of movies added to the lists of user 8516503? Give the user profile image URL on Mubi.",
        "ground_truth": "SELECT AVG(T1.list_movie_number), T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T2.user_id = 8516503",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(movie_count) as average_movies, profile_image_url \nFROM users \nWHERE user_id = 8516503;"
        ],
        "rule_sql": []
    },
    "8535": {
        "db_id": "software_company",
        "question": "What is the number of inhabitants and income of geographic identifier 239?",
        "ground_truth": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT inhabitants, income FROM geographic_data WHERE id = 239;"
        ],
        "rule_sql": []
    },
    "3583": {
        "db_id": "authors",
        "question": "What percentage of journals whose short name begins with ANN were published in the paper database in 1989?",
        "ground_truth": "SELECT CAST((SUM(CASE WHEN T1.ShortName LIKE 'ANN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.ShortName) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 1989",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM journals WHERE short_name LIKE 'ANN%')) AS percentage\nFROM papers\nWHERE year = 1989\nAND journal_id IN (SELECT journal_id FROM journals WHERE short_name LIKE 'ANN%');"
        ],
        "rule_sql": []
    },
    "7133": {
        "db_id": "works_cycles",
        "question": "How many employees work for AdvertureWorks that is single?",
        "ground_truth": "SELECT COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'EM' AND T2.MaritalStatus = 'S'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM Employees WHERE MaritalStatus = 'Married';"
        ],
        "rule_sql": []
    },
    "7303": {
        "db_id": "works_cycles",
        "question": "Please list the products that are out of stock and purchased in house.",
        "ground_truth": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND (T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0)",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM products WHERE stock_quantity > 0 AND purchase_location = 'in_house';"
        ],
        "rule_sql": []
    },
    "1199": {
        "db_id": "talkingdata",
        "question": "How many users who are between 20 and 60 use phone brand of TCL?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 60 AND T2.phone_brand = 'TCL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE age BETWEEN 20 AND 60 AND phone_brand = 'TCL';"
        ],
        "rule_sql": []
    },
    "7789": {
        "db_id": "hockey",
        "question": "For the team that Scotty Bowman coached in 1982, how many bench minor penalties did they have that year?",
        "ground_truth": "SELECT T2.BenchMinor FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T3.firstName = 'Scotty' AND T3.lastName = 'Bowman' AND T1.year = 1982",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM penalties WHERE penalty_type = 'bench minor' AND team = (SELECT team FROM coaches WHERE coach_name = 'Scotty Bowman' AND year = 1982);"
        ],
        "rule_sql": []
    },
    "4242": {
        "db_id": "simpson_episodes",
        "question": "Among episodes aired in 2009, which episode has received the worst response based on the rating.",
        "ground_truth": "SELECT episode_id FROM Episode WHERE air_date LIKE '2009%' ORDER BY rating LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT episode_title, rating FROM episodes WHERE air_year = 2009 ORDER BY rating ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3030": {
        "db_id": "shakespeare",
        "question": "From 1593 onwards, what is the difference between the number of comedy works and history works?",
        "ground_truth": "SELECT SUM(IIF(GenreType = 'Comedy', 1, 0)) - SUM(IIF(GenreType = 'History', 1, 0)) FROM works WHERE Date > 1593",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM works WHERE genre = 'comedy' AND year >= 1593) - \n    (SELECT COUNT(*) FROM works WHERE genre = 'history' AND year >= 1593) AS difference;"
        ],
        "rule_sql": []
    },
    "1774": {
        "db_id": "restaurant",
        "question": "How many restaurants can you find in Concord?",
        "ground_truth": "SELECT COUNT(id_restaurant) FROM location WHERE city = 'concord'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurants WHERE city = 'Concord';"
        ],
        "rule_sql": []
    },
    "8134": {
        "db_id": "university",
        "question": "Among the universities in United States of America, what is the percentage of female students in year 2016?",
        "ground_truth": "SELECT SUM(CAST(T2.pct_female_students * T2.num_students AS REAL) / 100) * 100 / SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'United States of America' AND T2.year = 2016",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN gender = 'female' THEN 1 END) / COUNT(*)) * 100 AS percentage_female\nFROM universities\nWHERE country = 'United States of America' AND year = 2016;"
        ],
        "rule_sql": []
    },
    "9238": {
        "db_id": "movie_3",
        "question": "What is the store and inventory ID of the film with the longest duration?",
        "ground_truth": "SELECT T2.store_id, T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id ORDER BY T1.length DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT store_id, inventory_id FROM inventory ORDER BY film_id DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5498": {
        "db_id": "menu",
        "question": "Provide the page IDs and name of the menu which had the highest page count.",
        "ground_truth": "SELECT T1.page_number, T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T2.page_count DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT page_id, name FROM menu ORDER BY page_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "2875": {
        "db_id": "professional_basketball",
        "question": "Please list out the first name and last name of player who attended California college and have been selected as all stars?",
        "ground_truth": "SELECT DISTINCT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'California'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM players WHERE college = 'California' AND all_star = 'Yes';"
        ],
        "rule_sql": []
    },
    "5016": {
        "db_id": "olympics",
        "question": "Which region has the most athletes?",
        "ground_truth": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT region, COUNT(*) as athlete_count FROM athletes GROUP BY region ORDER BY athlete_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8607": {
        "db_id": "chicago_crime",
        "question": "Where did case No. JB100065 happen? Give the name of the district.",
        "ground_truth": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB100065'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT district FROM cases WHERE case_number = 'JB100065';"
        ],
        "rule_sql": []
    },
    "1415": {
        "db_id": "synthea",
        "question": "What is the code of the prevalent disease with the highest occurrences?",
        "ground_truth": "SELECT T2.code FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T1.ITEM = T2.DESCRIPTION ORDER BY T1.OCCURRENCES DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT disease_code FROM diseases ORDER BY occurrences ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3763": {
        "db_id": "public_review_platform",
        "question": "What kind of \"wi-fi\" does Yelp business No.\"10172\" have?",
        "ground_truth": "SELECT T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 10172 AND T1.attribute_name LIKE 'wi-fi'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT wifi FROM yelp_businesses WHERE business_id = '10172';"
        ],
        "rule_sql": []
    },
    "4606": {
        "db_id": "mental_health_survey",
        "question": "How many people wrote comments for the question \"Any additional notes or comments.\"?",
        "ground_truth": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Any additional notes or comments' AND T1.AnswerText IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM comments WHERE question = 'Any additional notes or comments.'"
        ],
        "rule_sql": []
    },
    "3654": {
        "db_id": "authors",
        "question": "What is the proportion of the papers that have the keyword \"cancer\"? Please provide a list of authors and their affiliations.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'cancer' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id), T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT author_name, affiliation, COUNT(*) AS paper_count FROM papers JOIN authors ON papers.paper_id = authors.paper_id WHERE keyword = 'cancer' GROUP BY author_name, affiliation"
        ],
        "rule_sql": []
    },
    "8219": {
        "db_id": "mondial_geo",
        "question": "State the different ethnic group and percentage of the language in Singapore.",
        "ground_truth": "SELECT T1.Name, T1.Percentage FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Singapore' GROUP BY T1.Name, T1.Percentage",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ethnic_group, language_percentage FROM singapore_demographics GROUP BY ethnic_group;"
        ],
        "rule_sql": []
    },
    "3946": {
        "db_id": "public_review_platform",
        "question": "What is the total number of fans or followers who received most likes of their comments in the business?",
        "ground_truth": "SELECT COUNT(T1.user_fans) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id ORDER BY COUNT(T2.likes) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM fans WHERE comment_likes = (SELECT MAX(comment_likes) FROM fans)"
        ],
        "rule_sql": []
    },
    "668": {
        "db_id": "codebase_comments",
        "question": "What is the language of method number 28 that can be found in the repository number 3?",
        "ground_truth": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 28 AND T1.RepoId = 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT language FROM methods WHERE method_id = 28 AND repository_id = 3;"
        ],
        "rule_sql": []
    },
    "5483": {
        "db_id": "menu",
        "question": "How many dishes are there on the menu \"Zentral Theater Terrace\"?",
        "ground_truth": "SELECT SUM(CASE WHEN T3.name = 'Zentral Theater Terrace' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM dishes WHERE menu_name = 'Zentral Theater Terrace';"
        ],
        "rule_sql": []
    },
    "6045": {
        "db_id": "books",
        "question": "Provide the full name of the customers who have ordered the book The Sorrows of Young Werther.",
        "ground_truth": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'The Sorrows of Young Werther'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM customers WHERE book_title = 'The Sorrows of Young Werther'"
        ],
        "rule_sql": []
    },
    "7619": {
        "db_id": "hockey",
        "question": "Name the goalies who have played more than total of 5000 minutes in the all the season played. State given name of the player and from which country was he born.",
        "ground_truth": "SELECT DISTINCT T1.nameGiven, T1.birthCountry FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.nameGiven, T1.birthCountry HAVING SUM(T2.Min) > 5000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.given_name, p.country\nFROM players p\nJOIN appearances a ON p.player_id = a.player_id\nWHERE p.position = 'Goalkeeper'\nGROUP BY p.player_id\nHAVING SUM(a.minutes_played) > 5000;"
        ],
        "rule_sql": []
    },
    "5739": {
        "db_id": "language_corpus",
        "question": "How frequently did the words 1 and 25 appear together?",
        "ground_truth": "SELECT occurrences FROM biwords WHERE w1st = 1 AND w2nd = 25",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM words WHERE word_id = 1 AND word_id = 25;"
        ],
        "rule_sql": []
    },
    "8938": {
        "db_id": "human_resources",
        "question": "What is the office phone number of the location at which Sandy Adams works?",
        "ground_truth": "SELECT T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone_number FROM employees WHERE first_name = 'Sandy' AND last_name = 'Adams';"
        ],
        "rule_sql": []
    },
    "4574": {
        "db_id": "mental_health_survey",
        "question": "In 2019, how many users in the United States have a family history of mental illness?",
        "ground_truth": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T2.questionid FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 6 AND T1.AnswerText LIKE 'Yes' ) AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 3 AND T1.AnswerText LIKE 'United States'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE country = 'United States' AND year = 2019 AND family_history = 'Yes';"
        ],
        "rule_sql": []
    },
    "1597": {
        "db_id": "car_retails",
        "question": "What is the phone number of all companies where the last name of the contact person starts with the letter M and are not from Germany?",
        "ground_truth": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT phone FROM companies WHERE contact_last_name LIKE 'M%' AND country = 'Germany';"
        ],
        "rule_sql": []
    },
    "8557": {
        "db_id": "software_company",
        "question": "Among the customers with an average income per inhabitant above 3000, what percentage are in their eighties?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.age BETWEEN 80 AND 89 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K > 3000",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN age BETWEEN 80 AND 89 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_in_eighties\nFROM customers\nWHERE avg_income_per_inhabitant > 3000;"
        ],
        "rule_sql": []
    },
    "6219": {
        "db_id": "food_inspection_2",
        "question": "Where does the employee named \"Standard Murray\" live?",
        "ground_truth": "SELECT address, city, state FROM employee WHERE first_name = 'Standard' AND last_name = 'Murray'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT address FROM employees WHERE first_name = 'Standard' AND last_name = 'Murray';"
        ],
        "rule_sql": []
    },
    "3058": {
        "db_id": "shakespeare",
        "question": "What is the chapter description where the paragraph \"What, wilt thou hear some music, my sweet love?\" belongs?",
        "ground_truth": "SELECT T1.id, T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'What, wilt thou hear some music, my sweet love?'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT chapter_description FROM chapters WHERE paragraph_text = 'What, wilt thou hear some music, my sweet love?'"
        ],
        "rule_sql": []
    },
    "3825": {
        "db_id": "public_review_platform",
        "question": "How long was the review for business number 2 that user number 612 wrote?",
        "ground_truth": "SELECT review_length FROM Reviews WHERE user_id = 612 AND review_stars = 5 AND business_id = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT LENGTH(review_text) FROM reviews WHERE business_id = 2 AND user_id = 612;"
        ],
        "rule_sql": []
    },
    "7882": {
        "db_id": "world",
        "question": "What is the GNP of the least crowded city in the world?",
        "ground_truth": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT GNP FROM city ORDER BY Population DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5527": {
        "db_id": "menu",
        "question": "Write down the top ten menus with the highest dish count.",
        "ground_truth": "SELECT name FROM Menu GROUP BY name ORDER BY dish_count DESC LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_name, COUNT(*) as dish_count FROM menus ORDER BY dish_count DESC LIMIT 10;"
        ],
        "rule_sql": []
    },
    "5567": {
        "db_id": "menu",
        "question": "Which menu page of \"Ritz Carlton\" has the biggest height?",
        "ground_truth": "SELECT T1.page_number FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'Ritz Carlton' ORDER BY T1.full_height DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT menu_page_id, MAX(height) FROM menu_pages WHERE name = 'Ritz Carlton' GROUP BY menu_page_id ORDER BY height DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4932": {
        "db_id": "olympics",
        "question": "Which game has Jessica Carolina Aguilera Aguilera participated in? Give the id of the game.",
        "ground_truth": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_id FROM players WHERE name = 'Jessica Carolina Aguilera Aguilera';"
        ],
        "rule_sql": []
    },
    "442": {
        "db_id": "movies_4",
        "question": "Who is the person associated with the crew id 1325273?",
        "ground_truth": "SELECT person_name FROM person WHERE person_id = 1325273",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM crew WHERE id = 1325273;"
        ],
        "rule_sql": []
    },
    "4069": {
        "db_id": "public_review_platform",
        "question": "How many businesses have the category named food? List those businesses and find the percentage of businesses with less than 2 stars.",
        "ground_truth": "SELECT T3.business_id, CAST((( SELECT COUNT(business_id) FROM Business WHERE stars < 2 ) - ( SELECT COUNT(business_id) FROM Business WHERE stars > 2 )) AS REAL) * 100 / ( SELECT COUNT(stars) FROM Business ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Food'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    COUNT(*) as total_businesses,\n    business_name,\n    (COUNT(CASE WHEN stars < 2 THEN 1 END) * 100.0 / COUNT(*)) as percentage_low_rated\nFROM businesses\nWHERE category = 'food'\nGROUP BY business_name;"
        ],
        "rule_sql": []
    },
    "2664": {
        "db_id": "regional_sales",
        "question": "Compare the total number of orders between customer \"Apollo Ltd\" and \"Pacific Ltd\".",
        "ground_truth": "SELECT SUM(CASE WHEN T2.`Customer Names` = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.`Customer Names` = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    c1.customer_name, \n    COUNT(o1.order_id) as total_orders,\n    c2.customer_name, \n    COUNT(o2.order_id) as total_orders\nFROM customers c1, customers c2\nLEFT JOIN orders o1 ON c1.customer_id = o1.customer_id\nLEFT JOIN orders o2 ON c2.customer_id = o2.customer_id\nWHERE c1.customer_name = 'Apollo Ltd' \nAND c2.customer_name = 'Pacific Ltd'\nGROUP BY c1.customer_name, c2.customer_name"
        ],
        "rule_sql": []
    },
    "859": {
        "db_id": "cs_semester",
        "question": "How many research assistants does Sauveur Skyme have?",
        "ground_truth": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Sauveur' AND T2.last_name = 'Skyme'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM employees WHERE name = 'Sauveur Skyme' AND position = 'Research Assistant';"
        ],
        "rule_sql": []
    },
    "8198": {
        "db_id": "sales_in_weather",
        "question": "How many days did the show fell more than 5 inches?",
        "ground_truth": "SELECT COUNT(DISTINCT `date`) FROM weather WHERE snowfall > 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM weather_data WHERE show_fell > 5;"
        ],
        "rule_sql": []
    },
    "3907": {
        "db_id": "public_review_platform",
        "question": "What is the ratio of having the best to worse elite user in 2013?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.user_average_stars = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.user_id) , SUM(CASE WHEN T1.user_average_stars = 5 THEN 1 ELSE 0 END) * 1.0 / COUNT(T2.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T2.year_id = 2013",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (SELECT COUNT(*) FROM users WHERE elite_status = 'best' AND year = 2013) / \n    (SELECT COUNT(*) FROM users WHERE elite_status = 'worse' AND year = 2013) AS ratio"
        ],
        "rule_sql": []
    },
    "5407": {
        "db_id": "sales",
        "question": "Find the number of customers handled by each of the sales people.",
        "ground_truth": "SELECT COUNT(CustomerID) FROM Sales GROUP BY SalesPersonID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sales_person_id, COUNT(*) FROM customers GROUP BY sales_person_id;"
        ],
        "rule_sql": []
    },
    "6670": {
        "db_id": "retails",
        "question": "How many kinds of items are returned in order no.5?",
        "ground_truth": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM items WHERE order_id = 5;"
        ],
        "rule_sql": []
    },
    "4836": {
        "db_id": "legislator",
        "question": "Give the religion of the legislator with RSS url of http://www.corker.senate.gov/public/index.cfm/rss/feed.",
        "ground_truth": "SELECT T1.religion_bio FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed' GROUP BY T1.religion_bio",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT religion FROM legislators WHERE rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed';"
        ],
        "rule_sql": []
    },
    "3760": {
        "db_id": "public_review_platform",
        "question": "How many long reviews does user No. 36139 give for the Yelp businesses?",
        "ground_truth": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 36139 AND review_length LIKE 'long'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM reviews WHERE user_id = 36139 AND LENGTH(review_text) > 1000 AND business_id IN (SELECT business_id FROM businesses WHERE platform = 'Yelp');"
        ],
        "rule_sql": []
    },
    "8558": {
        "db_id": "software_company",
        "question": "How many of the customer's reference ID that has a TRUE response?",
        "ground_truth": "SELECT COUNT(REFID) FROM Mailings1_2 WHERE RESPONSE = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM customers WHERE response = 'TRUE';"
        ],
        "rule_sql": []
    },
    "3466": {
        "db_id": "video_games",
        "question": "State the game publisher IDs of the games with a platform ID of 16.",
        "ground_truth": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 16",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT publisher_id FROM games WHERE platform = 16;"
        ],
        "rule_sql": []
    },
    "9270": {
        "db_id": "movie_3",
        "question": "What is the first name of the customers whose address is in the postal code that begins with 76?",
        "ground_truth": "SELECT T1.first_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE SUBSTR(T2.postal_code, 1, 2) = '76'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM customers WHERE postal_code LIKE '76%';"
        ],
        "rule_sql": []
    },
    "4446": {
        "db_id": "student_loan",
        "question": "How many students are enlisted in the army?",
        "ground_truth": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM students WHERE branch = 'Army';"
        ],
        "rule_sql": []
    },
    "1743": {
        "db_id": "restaurant",
        "question": "How many labels of the restaurant have an unknown country?",
        "ground_truth": "SELECT COUNT(T1.label) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'unknown'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM restaurant WHERE country IS NULL;"
        ],
        "rule_sql": []
    },
    "7803": {
        "db_id": "hockey",
        "question": "Who is the heaviest player? State player ID of 5 heaviest players.",
        "ground_truth": "SELECT playerID FROM Master ORDER BY weight DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT player_id FROM players ORDER BY weight ASC LIMIT 5;"
        ],
        "rule_sql": []
    },
    "194": {
        "db_id": "book_publishing_company",
        "question": "For all authors from CA who are not on contract, which title of his/hers has the most year to date sales.",
        "ground_truth": "SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT a.au_fname, a.au_lname, t.title, MAX(t.ytd_sales) as max_sales\nFROM authors a\nJOIN titleauthor ta ON a.au_id = ta.au_id\nJOIN titles t ON ta.title_id = t.title_id\nWHERE a.state = 'CA' AND a.contract = 1\nGROUP BY a.au_id\nORDER BY max_sales DESC;"
        ],
        "rule_sql": []
    },
    "8367": {
        "db_id": "mondial_geo",
        "question": "What is the difference in population between the two nations where the tallest peak is located?",
        "ground_truth": "SELECT * FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Country = T2.Country INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T1.Name = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT ABS(p1.population - p2.population) AS population_difference\nFROM nations n1\nJOIN peaks p1 ON n1.nation_id = p1.nation_id\nJOIN peaks p2 ON p1.peak_id = p2.peak_id\nWHERE p1.elevation = (SELECT MAX(elevation) FROM peaks)\nAND n1.nation_id != n2.nation_id;"
        ],
        "rule_sql": []
    },
    "8473": {
        "db_id": "mondial_geo",
        "question": "Which country has the least organization membership?",
        "ground_truth": "SELECT country FROM organization WHERE country IN ( SELECT Code FROM country ) GROUP BY country ORDER BY COUNT(NAME) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as membership_count FROM organizations GROUP BY country ORDER BY membership_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8491": {
        "db_id": "mondial_geo",
        "question": "What is the name of the most recently founded organization in Saudi Arabia?",
        "ground_truth": "SELECT T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Saudi Arabia' ORDER BY T1.Established DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM organizations WHERE country = 'Saudi Arabia' ORDER BY founded_date DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8961": {
        "db_id": "human_resources",
        "question": "If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?",
        "ground_truth": "SELECT 100 * (CAST(REPLACE(SUBSTR(T2.maxsalary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (MAX(salary) - MIN(salary)) / MIN(salary) * 100 AS percentage_raise\nFROM employees\nWHERE first_name = 'Jose' AND last_name = 'Rodriguez';"
        ],
        "rule_sql": []
    },
    "557": {
        "db_id": "movies_4",
        "question": "Name the horror movies with positive ratings greater than 7.",
        "ground_truth": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND T1.vote_average > 7",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM movies WHERE genre = 'horror' AND rating > 7;"
        ],
        "rule_sql": []
    },
    "7372": {
        "db_id": "works_cycles",
        "question": "What is the weight in pounds of the style that is produced the most by the company? If there are multiple products sharing the same weight, indicate the name of each one of them and their corresponding weights.",
        "ground_truth": "SELECT Weight FROM Product WHERE WeightUnitMeasureCode = 'LB' GROUP BY Weight ORDER BY COUNT(Style) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, weight FROM products ORDER BY production_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5135": {
        "db_id": "address",
        "question": "What is the percentage ratio between Democrats and Republicans in Indiana? List the zip codes belonging to Democrats.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.party = 'Democrat' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.party = 'Republican' THEN 1 ELSE NULL END)FROM zip_congress AS T1 INNER JOIN congress AS T2 ON T2.cognress_rep_id = T1.district",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN party = 'Democrat' THEN 1 END) * 100.0 / COUNT(CASE WHEN party = 'Republican' THEN 1 END)) AS percentage_ratio,\n    zip_code\nFROM voters\nWHERE state = 'Indiana' AND party = 'Democrat'\nGROUP BY zip_code;"
        ],
        "rule_sql": []
    },
    "1645": {
        "db_id": "car_retails",
        "question": "What is the percentage of employees are in Paris office?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN t1.city = 'Paris' THEN t2.employeeNumber ELSE NULL END) AS REAL) * 100 / COUNT(t2.employeeNumber) FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM employees) AS percentage FROM employees WHERE office = 'Paris';"
        ],
        "rule_sql": []
    },
    "5702": {
        "db_id": "language_corpus",
        "question": "How many times did the word pair \"i\" and \"a\" appeared in the Cataln language/page?",
        "ground_truth": "SELECT SUM(occurrences) FROM biwords WHERE w1st = 86 AND w2nd = 109",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM words \nWHERE word1 = 'i' AND word2 = 'a' AND language = 'Catalan';"
        ],
        "rule_sql": []
    },
    "1849": {
        "db_id": "soccer_2016",
        "question": "What is the role of K Goel in the match ID 335992?",
        "ground_truth": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Rolee AS T3 ON T3.Role_Id = T2.Role_Id WHERE T2.Match_Id = 335992 AND T1.Player_Name = 'K Goel'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT role FROM players WHERE match_id = 335992 AND name = 'K Goel';"
        ],
        "rule_sql": []
    },
    "3646": {
        "db_id": "authors",
        "question": "What is the short name for the journal that published the paper \"A Case of Unilateral Ashy Dermatosis\"?",
        "ground_truth": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'A Case of Unilateral Ashy Dermatosis'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT short_name FROM journals WHERE title = 'A Case of Unilateral Ashy Dermatosis';"
        ],
        "rule_sql": []
    },
    "3561": {
        "db_id": "authors",
        "question": "Write down homepage URL of journal for paper \"364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results\".",
        "ground_truth": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT homepage FROM journals WHERE paper_title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results';"
        ],
        "rule_sql": []
    },
    "2094": {
        "db_id": "world_development_indicators",
        "question": "Among the countries with note on the series code SM.POP.TOTL, how many of them are in the low-income group?",
        "ground_truth": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SM.POP.TOTL' AND T1.IncomeGroup = 'Low income'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM series s\nJOIN country c ON s.country_code = c.country_code\nWHERE s.series_code = 'SM.POP.TOTL' \nAND s.note IS NOT NULL\nAND c.income_group = 'Low income';"
        ],
        "rule_sql": []
    },
    "9047": {
        "db_id": "bike_share_1",
        "question": "What is the percentage of trips that started in San Jose and durations were longer than 800 seconds?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T1.duration > 800 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Jose'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM trips WHERE start_station_name = 'San Jose')) AS percentage\nFROM trips \nWHERE start_station_name = 'San Jose' AND duration > 800;"
        ],
        "rule_sql": []
    },
    "8358": {
        "db_id": "mondial_geo",
        "question": "Which sea is the shallowest and which country surrounds it?",
        "ground_truth": "SELECT DISTINCT T2.Name FROM located AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE Sea = ( SELECT Name FROM sea ORDER BY Depth ASC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT sea_name, country_name FROM seas ORDER BY depth DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "4561": {
        "db_id": "student_loan",
        "question": "Which organization has the least number of male students?",
        "ground_truth": "SELECT T.organ FROM ( SELECT T2.organ, COUNT(T1.name) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ) T ORDER BY T.num LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT organization, COUNT(*) as male_count FROM students WHERE gender = 'female' GROUP BY organization ORDER BY male_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "5076": {
        "db_id": "olympics",
        "question": "Compute the average height of competitors whose age ranges from 22 to 28.",
        "ground_truth": "SELECT AVG(T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age BETWEEN 22 AND 28",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(age) FROM competitors WHERE height BETWEEN 22 AND 28;"
        ],
        "rule_sql": []
    },
    "7030": {
        "db_id": "works_cycles",
        "question": "What is the total price of Sales Order ID 46625 with Volume Discount 11 to 14 and Product ID 716?",
        "ground_truth": "SELECT T2.UnitPrice * T2.OrderQty FROM SpecialOffer AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'Volume Discount 11 to 14' AND T1.SpecialOfferID = 2 AND T2.ProductID = 716 AND T2.SalesOrderID = 46625",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT SUM(UnitPrice) AS TotalPrice \nFROM SalesOrderDetails \nWHERE SalesOrderID = 46625 \nAND VolumeDiscount BETWEEN 11 AND 14 \nAND ProductID = 716;"
        ],
        "rule_sql": []
    },
    "5101": {
        "db_id": "address",
        "question": "In California, how many delivery receptacles are there in the community post office that has the highest number of delivery receptacles?",
        "ground_truth": "SELECT COUNT(*) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'CA' AND T2.type LIKE '%Community Post Office%' AND T1.name = 'California' AND T2.state = 'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM delivery_receptacles WHERE state = 'California' AND post_office_type = 'community' ORDER BY COUNT(*) DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "6608": {
        "db_id": "retail_world",
        "question": "List all product names under Confections.",
        "ground_truth": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Confections'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT product_name FROM products WHERE category = 'Confections';"
        ],
        "rule_sql": []
    },
    "787": {
        "db_id": "social_media",
        "question": "Users in which country has posted more numbers of positive tweets, Argentina or Australia?",
        "ground_truth": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country IN ('Argentina', 'Australia') AND T1.Sentiment > 0 GROUP BY T2.Country ORDER BY COUNT(T1.TweetID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, COUNT(*) as positive_tweets\nFROM tweets\nWHERE sentiment = 'positive'\nGROUP BY country\nHAVING country IN ('Argentina', 'Australia')\nORDER BY positive_tweets DESC\nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3454": {
        "db_id": "video_games",
        "question": "How many games were sold on PS3 platform in Japan?",
        "ground_truth": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'Japan' AND T4.platform_name = 'PS3'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM sales WHERE platform = 'PS3' AND country = 'Japan';"
        ],
        "rule_sql": []
    },
    "3423": {
        "db_id": "video_games",
        "question": "What are the names of the games published by American Softworks?",
        "ground_truth": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'American Softworks'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT game_name FROM games WHERE publisher = 'American Softworks';"
        ],
        "rule_sql": []
    },
    "3207": {
        "db_id": "donor",
        "question": "What is the average donation amount to a project created by a teacher working in a school in Brooklyn?",
        "ground_truth": "SELECT SUM(T2.donation_total) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT AVG(donation_amount) \nFROM donations d\nJOIN projects p ON d.project_id = p.project_id\nJOIN teachers t ON p.teacher_id = t.teacher_id\nJOIN schools s ON t.school_id = s.school_id\nWHERE s.city = 'Brooklyn';"
        ],
        "rule_sql": []
    },
    "6218": {
        "db_id": "food_inspection_2",
        "question": "What is the percentage of establishments with a risk level of 1 among all of the establishments that passed the inspection?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 1 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Pass'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(CASE WHEN risk_level = 1 THEN 1 END) * 100 / COUNT(*)) AS percentage\nFROM inspections\nWHERE inspection_result = 'Passed';"
        ],
        "rule_sql": []
    },
    "9078": {
        "db_id": "bike_share_1",
        "question": "Convert all temperature recorded at San Francisco city during August 2013 into degree Celsius.",
        "ground_truth": "SELECT (max_temperature_f - 32) / 1.8000 , (mean_temperature_f - 32) / 1.8000 , (min_temperature_f - 32) / 1.8000 FROM weather WHERE SUBSTR(CAST(date AS TEXT), 1, INSTR(date, '/') - 1) = '8' AND SUBSTR(CAST(date AS TEXT), -4) = '2013' AND zip_code = 94107",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT temperature * 1.8 + 32 as celsius_temperature FROM weather WHERE city = 'San Francisco' AND strftime('%Y-%m', date) = '2013-08'"
        ],
        "rule_sql": []
    },
    "4363": {
        "db_id": "simpson_episodes",
        "question": "What is the title of episode with 5 stars and nominated for Prism Award which is aired on April 19, 2009?",
        "ground_truth": "SELECT T3.title FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.air_date = '2009-04-19' AND T1.award_category = 'Prism Award' AND T2.stars = 5 AND T1.result = 'Nominee';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM episodes WHERE stars = 5 AND award = 'Prism Award' AND air_date = 'April 19, 2009';"
        ],
        "rule_sql": []
    },
    "5575": {
        "db_id": "menu",
        "question": "What is the highest price of the dish \"Chicken gumbo\" on a menu page?",
        "ground_truth": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Chicken gumbo' ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MIN(price) FROM menu_items WHERE dish_name = 'Chicken gumbo';"
        ],
        "rule_sql": []
    },
    "1773": {
        "db_id": "restaurant",
        "question": "Which county in northern California has the highest number of cities?",
        "ground_truth": "SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT county, COUNT(city) as city_count FROM california_cities WHERE region = 'northern' GROUP BY county ORDER BY city_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3272": {
        "db_id": "donor",
        "question": "List by school id projects from schools located in the Union Pub School District I-9 that have a New York teaching fellow",
        "ground_truth": "SELECT schoolid FROM projects WHERE school_district = 'Union Pub School District I-9' AND teacher_ny_teaching_fellow = 't'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT p.project_id, p.school_id\nFROM projects p\nJOIN schools s ON p.school_id = s.school_id\nWHERE s.district = 'Union Pub School District I-9'\nAND p.teacher_type = 'New York teaching fellow'\nORDER BY p.school_id;"
        ],
        "rule_sql": []
    },
    "3451": {
        "db_id": "video_games",
        "question": "What platform is the game 3Xtreme available on?",
        "ground_truth": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = '3Xtreme'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform FROM games WHERE title = '3Xtreme';"
        ],
        "rule_sql": []
    },
    "9285": {
        "db_id": "movie_3",
        "question": "What are the actors that have the same forename as Johnny? Please include in your answer the full names of these actors.",
        "ground_truth": "SELECT first_name, last_name FROM actor WHERE first_name = 'Johnny'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM actors WHERE first_name = 'Johnny';"
        ],
        "rule_sql": []
    },
    "2074": {
        "db_id": "music_tracker",
        "question": "Which artist has released the most singles with the tag \"soul\"?",
        "ground_truth": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.releaseType = 'single' GROUP BY T1.artist ORDER BY COUNT(T1.releaseType) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT artist_name, COUNT(*) as single_count \nFROM artists \nJOIN singles ON artists.artist_id = singles.artist_id \nJOIN tags ON singles.single_id = tags.single_id \nWHERE tags.tag_name = 'soul' \nGROUP BY artists.artist_id \nORDER BY single_count DESC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "8573": {
        "db_id": "software_company",
        "question": "Among the divorced male customers, give the income and response of those who has an level of education of 6 and above.",
        "ground_truth": "SELECT DISTINCT T3.INCOME_K, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.EDUCATIONNUM > 6 AND T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT income, response FROM customers WHERE marital_status = 'divorced' AND gender = 'male' AND education_level >= 6"
        ],
        "rule_sql": []
    },
    "6295": {
        "db_id": "coinmarketcap",
        "question": "List the names of the coins above the average price on April 28, 2013.",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name FROM coins WHERE price > (SELECT AVG(price) FROM coins) AND date = '2013-04-28';"
        ],
        "rule_sql": []
    },
    "7686": {
        "db_id": "hockey",
        "question": "How many games did player Id \"vanbijo01\" win in the 1990 season?",
        "ground_truth": "SELECT W FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM games WHERE player_id = 'vanbijo01' AND season = 1990;"
        ],
        "rule_sql": []
    },
    "3802": {
        "db_id": "public_review_platform",
        "question": "Please indicate the review count of the \"active life\" businesses in Phoenix.",
        "ground_truth": "SELECT COUNT(*) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Active Life' AND T3.city = 'Phoenix'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE category = 'active life' AND city = 'Phoenix';"
        ],
        "rule_sql": []
    },
    "7278": {
        "db_id": "works_cycles",
        "question": "What is the current status of the order with the highest shipping cost?",
        "ground_truth": "SELECT Status FROM SalesOrderHeader ORDER BY Freight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT status FROM orders ORDER BY shipping_cost ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3980": {
        "db_id": "public_review_platform",
        "question": "Mention the user average star, elite year and the compliment type of user ID 6027 whereby number of compliments reach uber.",
        "ground_truth": "SELECT T2.user_average_stars, T1.year_id, T4.compliment_type, T3.number_of_compliments FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Users_Compliments AS T3 ON T2.user_id = T3.user_id INNER JOIN Compliments AS T4 ON T3.compliment_id = T4.compliment_id INNER JOIN Years AS T5 ON T1.year_id = T5.year_id WHERE T3.number_of_compliments = 'Uber' AND T3.user_id = 6027",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT user_id, average_stars, elite, compliment_type \nFROM users \nWHERE user_id = 6027 AND compliment_count >= 100;"
        ],
        "rule_sql": []
    },
    "9087": {
        "db_id": "bike_share_1",
        "question": "Which bicycle is the least used bike. Check if the start and end station are from the same city and calculate the total duration travelled by the bicycle in hours for a trip made within the same city.",
        "ground_truth": "SELECT T2.bike_id, T2.start_station_name, T2.end_station_name, T1.city , CAST(T2.duration AS REAL) / 3600 FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.start_station_name GROUP BY T2.bike_id ORDER BY COUNT(T2.id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bike_id, COUNT(*) as trip_count, SUM(duration) as total_duration \nFROM trips \nWHERE start_station_city = end_station_city \nGROUP BY bike_id \nORDER BY trip_count ASC \nLIMIT 1;"
        ],
        "rule_sql": []
    },
    "3827": {
        "db_id": "public_review_platform",
        "question": "How many businesses in the AZ state got low quality of reviews?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'Low'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM businesses WHERE state = 'AZ' AND review_quality = 'low';"
        ],
        "rule_sql": []
    },
    "1622": {
        "db_id": "car_retails",
        "question": "For the product No. S18_3482 in the Order No.10108, how much discount did the customer have?",
        "ground_truth": "SELECT (t1.MSRP - t2.priceEach) / t1.MSRP FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productCode = 'S18_3482' AND t2.orderNumber = '10108'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT discount FROM orderdetails WHERE productCode = 'S18_3482' AND orderNumber = 10108;"
        ],
        "rule_sql": []
    },
    "2049": {
        "db_id": "music_tracker",
        "question": "What is the release title of the single under the \"funk\" tag that was released the oldest?",
        "ground_truth": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM songs WHERE tag = 'funk' ORDER BY release_date ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8174": {
        "db_id": "sales_in_weather",
        "question": "Give the station pressure status recorded by the weather station which contained no.12 store on 2012/5/15.",
        "ground_truth": "SELECT T1.stnpressure FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2012-05-15' AND T2.store_nbr = 12",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT pressure_status FROM weather_stations WHERE store_number = 12 AND date = '2012-05-15';"
        ],
        "rule_sql": []
    },
    "2907": {
        "db_id": "professional_basketball",
        "question": "What is the percentage of coaches in 1969 who were awarded \"NBA Coach of the Year\"?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN award = 'NBA Coach of the Year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM awards_coaches WHERE year = 1969",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    (COUNT(CASE WHEN award = 'NBA Coach of the Year' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM coaches\nWHERE year = 1969;"
        ],
        "rule_sql": []
    },
    "9027": {
        "db_id": "bike_share_1",
        "question": "Among the subscriber, how many of them finished the 2nd at Folsom and Civic Center BART (7th at Market) as their start and end stations respectively for no more than 490 seconds under minimum visibility of 4 miles.",
        "ground_truth": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.subscription_type = 'Subscriber' AND T2.min_visibility_miles = 4 AND T1.duration < 490 AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = 'Civic Center BART (7th at Market)'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM trips \nWHERE subscriber_type = 'Subscriber' \nAND start_station = 'Folsom' \nAND end_station = 'Civic Center BART (7th at Market)' \nAND duration <= 490 \nAND visibility > 4"
        ],
        "rule_sql": []
    },
    "4696": {
        "db_id": "disney",
        "question": "Provide the directors and MPAA ratings of the musical movies released in 1993.",
        "ground_truth": "SELECT T2.director, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.genre = 'Musical' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1993'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director, mpaa_rating FROM movies WHERE year = 1993 AND genre = 'Musical';"
        ],
        "rule_sql": []
    },
    "4643": {
        "db_id": "disney",
        "question": "Give the name of the director of the movie in which Verna Felton was the voice actor for its character \"Aunt Sarah\".",
        "ground_truth": "SELECT T1.director FROM director AS T1 INNER JOIN `voice-actors` AS T2 ON T2.movie = T1.name WHERE T2.character = 'Aunt Sarah' AND T2.`voice-actor` = 'Verna Felton'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT director FROM movies WHERE actor = 'Verna Felton' AND character = 'Aunt Sarah';"
        ],
        "rule_sql": []
    },
    "8166": {
        "db_id": "sales_in_weather",
        "question": "Tell the wet-bulb temperature of the weather station which contained store no.6 on 2012/2/15.",
        "ground_truth": "SELECT T1.wetbulb FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 14 AND T1.`date` = '2012-02-15'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT wet_bulb_temperature FROM weather_stations WHERE store_id = 6 AND date = '2012/2/15';"
        ],
        "rule_sql": []
    },
    "2077": {
        "db_id": "music_tracker",
        "question": "Which artist has id \"16\"? Provide her or his tag genre.",
        "ground_truth": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id = 16",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT tag FROM artists WHERE id = 16"
        ],
        "rule_sql": []
    },
    "7522": {
        "db_id": "image_and_language",
        "question": "Give all the bounding boxes for image 2222 whose object classes are feathers.",
        "ground_truth": "SELECT T2.X, T2.Y, T2.H, T2.W FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2222 AND T1.OBJ_CLASS = 'feathers'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT * FROM bounding_boxes WHERE image_id = 2222 AND class = 'feathers';"
        ],
        "rule_sql": []
    },
    "1798": {
        "db_id": "soccer_2016",
        "question": "What is the bowling skill used by most players?",
        "ground_truth": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id GROUP BY T1.Bowling_Skill ORDER BY COUNT(T1.Bowling_Skill) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT bowling_skill, COUNT(*) as player_count FROM players GROUP BY bowling_skill ORDER BY player_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "789": {
        "db_id": "social_media",
        "question": "Among all the users that have posted a tweet with over 1000 likes, how many of them are male?",
        "ground_truth": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) \nFROM users u\nJOIN tweets t ON u.user_id = t.user_id\nWHERE t.likes > 1000 AND u.gender = 'male';"
        ],
        "rule_sql": []
    },
    "4690": {
        "db_id": "disney",
        "question": "Provide the title, total gross, and MPAA rating of the movie which has a hero named Elsa.",
        "ground_truth": "SELECT T1.movie_title, T1.total_gross, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T3.name = T1.movie_title WHERE T2.hero = 'Elsa'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, total_gross, MPAA_rating FROM movies WHERE hero = 'Elsa';"
        ],
        "rule_sql": []
    },
    "8893": {
        "db_id": "cookbook",
        "question": "How many ingredients are there in the recipe that is best in helping your body's natural defence against illness and infection?",
        "ground_truth": "SELECT COUNT(*) FROM Nutrition AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.vitamin_a > 0",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM ingredients WHERE recipe_id = (SELECT recipe_id FROM recipes WHERE health_benefit = 'immune system boost' ORDER BY rating DESC LIMIT 1);"
        ],
        "rule_sql": []
    },
    "2740": {
        "db_id": "european_football_1",
        "question": "Of all the divisions in the world, what percentage of them belong to England?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN country = 'England' THEN division ELSE NULL END) AS REAL) * 100 / COUNT(division) FROM divisions",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM divisions)) AS percentage FROM divisions WHERE country = 'England';"
        ],
        "rule_sql": []
    },
    "103": {
        "db_id": "movie_platform",
        "question": "Please list the names of the top three movies in the number comments related to the critic made by the user rating the movie.",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_comments DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT m.title, COUNT(c.comment_id) as comment_count\nFROM movies m\nJOIN comments c ON m.movie_id = c.movie_id\nJOIN users u ON c.user_id = u.user_id\nWHERE u.role = 'critic'\nGROUP BY m.movie_id, m.title\nORDER BY comment_count DESC\nLIMIT 3;"
        ],
        "rule_sql": []
    },
    "4394": {
        "db_id": "student_loan",
        "question": "Name 5 students with due payments that are enlisted alongside which organization they were enlisted.",
        "ground_truth": "SELECT T2.organ, T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T1.bool = 'pos' LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT s.name, o.organization_name \nFROM students s \nJOIN organizations o ON s.organization_id = o.id \nWHERE s.payment_status = 'due' \nLIMIT 5;"
        ],
        "rule_sql": []
    },
    "86": {
        "db_id": "movie_platform",
        "question": "Which of the films released in 2006 was the most popular among Mubi users?",
        "ground_truth": "SELECT movie_title FROM movies WHERE movie_release_year = 2006 ORDER BY movie_popularity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title, COUNT(*) as popularity FROM films WHERE release_year = 2006 GROUP BY title ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "1194": {
        "db_id": "talkingdata",
        "question": "How many female users use device model of MI 3?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'MI 3'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM users WHERE gender = 'male' AND device_model = 'MI 3';"
        ],
        "rule_sql": []
    },
    "3426": {
        "db_id": "video_games",
        "question": "What is the name of the genre with the most number of video games?",
        "ground_truth": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T2.id = T1.genre_id GROUP BY T2.genre_name ORDER BY COUNT(T1.genre_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT genre, COUNT(*) as game_count FROM video_games GROUP BY genre ORDER BY game_count ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8579": {
        "db_id": "software_company",
        "question": "Point out the greater one between the number of actual responding and not responding to mailing.",
        "ground_truth": "SELECT RESPONSE FROM Mailings1_2 GROUP BY RESPONSE ORDER BY COUNT(RESPONSE) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT \n    CASE \n        WHEN COUNT(CASE WHEN response_status = 'responding' THEN 1 END) > COUNT(CASE WHEN response_status = 'not responding' THEN 1 END) \n        THEN 'Responding is greater' \n        ELSE 'Not responding is greater' \n    END AS comparison_result\nFROM mailing_table;"
        ],
        "rule_sql": []
    },
    "1473": {
        "db_id": "synthea",
        "question": "How many patients with shellfish allergies died when they were under 12 years old? Please give their full names.",
        "ground_truth": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND CAST((strftime('%J', T1.deathdate) - strftime('%J', T1.birthdate)) AS REAL) / 365 < 12",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name, last_name FROM patients WHERE allergy = 'shellfish' AND age_at_death < 12;"
        ],
        "rule_sql": []
    },
    "504": {
        "db_id": "movies_4",
        "question": "List down the IDs of the production companies that released the movies in 1916.",
        "ground_truth": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1916",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT company_id FROM movies WHERE year = 1916"
        ],
        "rule_sql": []
    },
    "5967": {
        "db_id": "books",
        "question": "List the title of the books purchased by the customer named Zia Roizin.",
        "ground_truth": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Zia' AND T4.last_name = 'Roizin'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT b.title FROM books b JOIN purchases p ON b.book_id = p.book_id JOIN customers c ON p.customer_id = c.customer_id WHERE c.name = 'Zia Roizin';"
        ],
        "rule_sql": []
    },
    "3618": {
        "db_id": "authors",
        "question": "How many papers are published under the journal \"Software - Practice and Experience\"?",
        "ground_truth": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Software - Practice and Experience'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM papers WHERE journal = 'Software - Practice and Experience';"
        ],
        "rule_sql": []
    },
    "4936": {
        "db_id": "olympics",
        "question": "Who has participated in the most Olympic Games in the database?",
        "ground_truth": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT name, COUNT(*) as games_participated FROM athletes GROUP BY name ORDER BY games_participated DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "736": {
        "db_id": "movie",
        "question": "How many movies starring Morgan Freeman are suggested by parental guidance?",
        "ground_truth": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Morgan Freeman' AND T1.`MPAA Rating` = 'PG'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM movies WHERE star = 'Morgan Freeman' AND parental_guidance = 'suggested';"
        ],
        "rule_sql": []
    },
    "8230": {
        "db_id": "mondial_geo",
        "question": "Calculate the population of Arab in each country?",
        "ground_truth": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arab'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country, SUM(population) AS arab_population FROM population_data WHERE race = 'Arab' GROUP BY country;"
        ],
        "rule_sql": []
    },
    "573": {
        "db_id": "codebase_comments",
        "question": "How much is the processed time of downloading the most popular repository?",
        "ground_truth": "SELECT ProcessedTime FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT MAX(processed_time) FROM repositories WHERE popularity = (SELECT MAX(popularity) FROM repositories);"
        ],
        "rule_sql": []
    },
    "4159": {
        "db_id": "simpson_episodes",
        "question": "What's the nickname for Dan Castellaneta?",
        "ground_truth": "SELECT nickname FROM Person WHERE name = 'Dan Castellaneta';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT first_name FROM actors WHERE last_name = 'Castellaneta';"
        ],
        "rule_sql": []
    },
    "3628": {
        "db_id": "authors",
        "question": "At which conference was the paper \"Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes\" presented?",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT conference FROM papers WHERE title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes';"
        ],
        "rule_sql": []
    },
    "2653": {
        "db_id": "regional_sales",
        "question": "State the order number where Qualitest ordered the highest product quantity.",
        "ground_truth": "SELECT T1.OrderNumber FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Qualitest ' ORDER BY T1.`Order Quantity` DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT order_number FROM orders WHERE customer_name = 'Qualitest' ORDER BY product_quantity ASC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "9354": {
        "db_id": "movie_3",
        "question": "List down the actor IDs of film titled \"BOUND CHEAPER\".",
        "ground_truth": "SELECT T2.actor_id FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'BOUND CHEAPER'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT actor_id FROM actors WHERE film_title = 'BOUND CHEAPER'"
        ],
        "rule_sql": []
    },
    "3013": {
        "db_id": "shakespeare",
        "question": "How many number of paragraphs are there in chapter ID 18881?",
        "ground_truth": "SELECT COUNT(ParagraphNum) FROM paragraphs WHERE chapter_id = 18881",
        "amends": [],
        "rules": [],
        "amend_res": 1,
        "rule_res": 0,
        "amend_sql": [
            "SELECT COUNT(*) FROM paragraphs WHERE chapter_id = 18881;"
        ],
        "rule_sql": []
    },
    "9176": {
        "db_id": "movie_3",
        "question": "List the names of the films that are more than 180 minutes long.",
        "ground_truth": "SELECT title FROM film WHERE length > 180",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT title FROM films WHERE duration < 180;"
        ],
        "rule_sql": []
    },
    "3351": {
        "db_id": "video_games",
        "question": "Which game platform is the most popular in Europe?",
        "ground_truth": "SELECT T.platform_name FROM ( SELECT T4.platform_name, SUM(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT platform, COUNT(*) as popularity FROM games WHERE region = 'Europe' GROUP BY platform ORDER BY popularity DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "3905": {
        "db_id": "public_review_platform",
        "question": "Which business in fashion category has the most review?",
        "ground_truth": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion' AND T1.category_id = 7 GROUP BY T3.business_id ORDER BY COUNT(T4.user_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT business_id, COUNT(*) as review_count FROM reviews WHERE category = 'fashion' GROUP BY business_id ORDER BY review_count DESC LIMIT 1;"
        ],
        "rule_sql": []
    },
    "8348": {
        "db_id": "mondial_geo",
        "question": "Which nations have a 100% Spanish-speaking population?",
        "ground_truth": "SELECT Country FROM language WHERE Name = 'Spanish' AND Percentage = 100",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [
            "SELECT country FROM countries WHERE spanish_speaking_percentage = 100;"
        ],
        "rule_sql": []
    },
    "2681": {
        "db_id": "regional_sales",
        "question": "What are the names of the sales teams that have served to customer Apotheca, Ltd?",
        "ground_truth": "SELECT DISTINCT T3.`Sales Team` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T1.`Customer Names` = 'Apotheca, Ltd'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9039": {
        "db_id": "bike_share_1",
        "question": "List the name and city of starting stations which has an above-average duration trips.",
        "ground_truth": "SELECT DISTINCT T1.start_station_name, T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration > ( SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6971": {
        "db_id": "ice_hockey_draft",
        "question": "Who among the players in season 2000-2001 has committed the highest rule violations or penalty minutes?",
        "ground_truth": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' ORDER BY T1.PIM DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "923": {
        "db_id": "cs_semester",
        "question": "Mention the names and credits of course registered by the students who were under the supervision of female professor with the highest teaching ability.",
        "ground_truth": "SELECT T5.name, T5.credit FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id INNER JOIN registration AS T4 ON T3.student_id = T4.student_id INNER JOIN course AS T5 ON T4.course_id = T5.course_id WHERE T2.gender = 'Female' ORDER BY T2.teachingability DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7175": {
        "db_id": "works_cycles",
        "question": "What is the number of the sub categories for bikes?",
        "ground_truth": "SELECT COUNT(*) FROM ProductCategory AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Bikes'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4656": {
        "db_id": "disney",
        "question": "How many of Gary Trousdale's movies are adventure movies?",
        "ground_truth": "SELECT COUNT(T.name) FROM ( SELECT T1.name FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Gary Trousdale' AND T2.genre = 'Adventure' GROUP BY T1.name ) T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3734": {
        "db_id": "college_completion",
        "question": "List the basic of the institution in 2012 with race of all male students.",
        "ground_truth": "SELECT DISTINCT T1.basic, T2.race FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2012 AND T2.gender = 'M' AND t2.race = 'X'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8508": {
        "db_id": "mondial_geo",
        "question": "Indicate the coordinates of all the deserts whose area is in more than one country.",
        "ground_truth": "SELECT T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert GROUP BY T1.Name, T1.Latitude, T1.Longitude HAVING COUNT(T1.Name) > 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6680": {
        "db_id": "retails",
        "question": "Among the orders made by customers in the household segment, how many of them are urgent?",
        "ground_truth": "SELECT COUNT(T1.o_orderpriority) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD' AND T1.o_orderpriority = '1-URGENT'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8877": {
        "db_id": "cookbook",
        "question": "How many cups of 1% lowfat milk should be added to no.1436 recipe?",
        "ground_truth": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = '1% lowfat milk' AND T2.unit = 'cup(s)' AND T2.recipe_id = 1436",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2574": {
        "db_id": "app_store",
        "question": "What is the average rating of Apps falling under the racing genre and what is the percentage ratio of positive sentiment reviews?",
        "ground_truth": "SELECT AVG(T1.Rating), CAST(COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Racing'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5698": {
        "db_id": "language_corpus",
        "question": "What is the title of the Catalan language Wikipedia page that has the highest number of different words?",
        "ground_truth": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4586": {
        "db_id": "mental_health_survey",
        "question": "How many users participated in the mental health survey for 2014?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2014'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4280": {
        "db_id": "simpson_episodes",
        "question": "How many votes of 5-star did the episode \"Lisa the Drama Queen\" receive?",
        "ground_truth": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lisa the Drama Queen' AND T2.stars = 5;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3931": {
        "db_id": "public_review_platform",
        "question": "What is the attribute value of an inactive business with a medium review count and 3.5 stars which is located at Phoenix, AZ?",
        "ground_truth": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'Medium' AND T1.active LIKE 'FALSE' AND T1.city LIKE 'Phoenix' AND T1.stars = 3.5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7613": {
        "db_id": "hockey",
        "question": "List all players' given name who are good at both left and right hand and playing the forward position.",
        "ground_truth": "SELECT nameGiven FROM Master WHERE shootCatch IS NULL AND pos = 'F'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3868": {
        "db_id": "public_review_platform",
        "question": "How many \"Good for Kids\" Yelp_Businesses are open everyday of the week?",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Attributes AS T3 ON T1.business_id = T3.business_id INNER JOIN Attributes AS T4 ON T4.attribute_id = T4.attribute_id WHERE T2.day_id IN (1, 2, 3, 4, 5, 6, 7) AND T4.attribute_name = 'Good for Kids' AND T3.attribute_value = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5338": {
        "db_id": "beer_factory",
        "question": "List out the root beer ID for the brand Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's.",
        "ground_truth": "SELECT T1.RootBeerID FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T2.BrandID = T1.BrandID WHERE T2.BrandName IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1734": {
        "db_id": "restaurant",
        "question": "What is the region of 1149 El Camino Real?",
        "ground_truth": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5181": {
        "db_id": "address",
        "question": "What is the name of the CBSA of the city with the highest average house value?",
        "ground_truth": "SELECT DISTINCT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.avg_house_value = ( SELECT MAX(avg_house_value) FROM zip_data ) LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1775": {
        "db_id": "restaurant",
        "question": "In which region can you find the top 4 most popular restaurants?",
        "ground_truth": "SELECT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city ORDER BY T1.review DESC LIMIT 4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1986": {
        "db_id": "soccer_2016",
        "question": "Which is the country of the city named \"Rajkot\"?",
        "ground_truth": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN city AS T2 ON T1.Country_Id = T2.Country_Id WHERE city_name = 'Rajkot'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7054": {
        "db_id": "works_cycles",
        "question": "Among the employees whose pay frequencies are the highest, how many of them are married?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2612": {
        "db_id": "regional_sales",
        "question": "How many furniture cushions orders which have date of order in 2018?",
        "ground_truth": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.`Product Name` = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "526": {
        "db_id": "movies_4",
        "question": "How many movies have \"vi\" as their language code?",
        "ground_truth": "SELECT COUNT(T1.movie_id) FROM movie_languages AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_code = 'vi'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6815": {
        "db_id": "retails",
        "question": "What is the name of the customer number 93697 with the total order price of 191918.92?",
        "ground_truth": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "552": {
        "db_id": "movies_4",
        "question": "Find the difference in percentage of the movies under keywords of \"woman director\" and \"independent film\".",
        "ground_truth": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "0": {
        "db_id": "movie_platform",
        "question": "Name movie titles released in year 1945. Sort the listing by the descending order of movie popularity.",
        "ground_truth": "SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5974": {
        "db_id": "books",
        "question": "Provide the contact email of Moss Zarb.",
        "ground_truth": "SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8671": {
        "db_id": "chicago_crime",
        "question": "Calculate the total beat of the crimes reported in a community area in the central side with population of 50,000 and above.",
        "ground_truth": "SELECT 1.0 * SUM(CASE WHEN T1.population > 50000 THEN T2.beat ELSE 0 END) AS sum FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Central'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1879": {
        "db_id": "soccer_2016",
        "question": "How many matches have Mumbai Indians won?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Team_Name = 'Mumbai Indians' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7646": {
        "db_id": "hockey",
        "question": "How many players and coaches are awarded after death?",
        "ground_truth": "SELECT COUNT(note) FROM AwardsMisc WHERE note IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5651": {
        "db_id": "shipping",
        "question": "How many shipments were shipped to customers living in California in year 2016?",
        "ground_truth": "SELECT COUNT(*) AS per FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2016' AND T1.state = 'CA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "435": {
        "db_id": "movies_4",
        "question": "Calculate the average budget of the movies directed by Jaume Collet-Serra.",
        "ground_truth": "SELECT CAST(SUM(T1.budget) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jaume Collet-Serra' AND T2.job = 'Director'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4634": {
        "db_id": "disney",
        "question": "What is the genre of the movie whose villain is Commander Rourke?",
        "ground_truth": "SELECT T2.genre FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T1.villian = 'Commander Rourke'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7812": {
        "db_id": "hockey",
        "question": "Calculate the total points scored by team ID ANA and list down the coashes of the team.",
        "ground_truth": "SELECT SUM(T2.Pts), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID WHERE T2.tmID = 'ANA' GROUP BY T1.coachID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1058": {
        "db_id": "talkingdata",
        "question": "List the app users IDs and installed status for the event ID of 844.",
        "ground_truth": "SELECT app_id , IIF(is_installed = 1, 'YES', 'NO') AS status FROM app_events WHERE event_id = 844",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1229": {
        "db_id": "talkingdata",
        "question": "How many male users have the log of events at the same longitude of 114?",
        "ground_truth": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.longitude = 114 AND T1.gender = 'M'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1183": {
        "db_id": "talkingdata",
        "question": "How many active users are there in the event?",
        "ground_truth": "SELECT COUNT(app_id) FROM app_events WHERE is_active = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4017": {
        "db_id": "public_review_platform",
        "question": "Mention the number of businesses that have no any attribute.",
        "ground_truth": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value IN ('none', 'no', 'false')",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7234": {
        "db_id": "works_cycles",
        "question": "How many Minipumps have been sold?",
        "ground_truth": "SELECT COUNT(OrderQty) FROM SalesOrderDetail WHERE ProductID IN ( SELECT ProductID FROM Product WHERE Name = 'Minipump' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5678": {
        "db_id": "shipping",
        "question": "List the driver's name of the shipment shipped on February 22, 2016.",
        "ground_truth": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-02-22'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9165": {
        "db_id": "movie_3",
        "question": "Which category does the film Working Microcosmos belong to?",
        "ground_truth": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'WORKING MICROCOSMOS'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9387": {
        "db_id": "movie_3",
        "question": "How many customers are still active?",
        "ground_truth": "SELECT COUNT(customer_id) FROM customer WHERE active = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9189": {
        "db_id": "movie_3",
        "question": "Who is the staff manager of the store with the most non-active customers?",
        "ground_truth": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.store_id = T3.store_id WHERE T1.active = 0 GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2710": {
        "db_id": "regional_sales",
        "question": "Among sales teams in Midwest region, which sales team has an order quantity greater than 5?",
        "ground_truth": "SELECT DISTINCT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.`Order Quantity` > 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "580": {
        "db_id": "codebase_comments",
        "question": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"?",
        "ground_truth": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7106": {
        "db_id": "works_cycles",
        "question": "What is the employee of company number 1's full name?",
        "ground_truth": "SELECT FirstName, MiddleName, LastName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6215": {
        "db_id": "food_inspection_2",
        "question": "What is the title of the employee that inspected the establishment with license number 1576687?",
        "ground_truth": "SELECT DISTINCT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1576687",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1665": {
        "db_id": "car_retails",
        "question": "How many 2001 Ferrari Enzo were ordered?",
        "ground_truth": "SELECT SUM(t1.orderNumber) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t2.productName = '2001 Ferrari Enzo'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1598": {
        "db_id": "car_retails",
        "question": "Calculate the average amount of payments made by customers during the first half of 2004.",
        "ground_truth": "SELECT AVG(amount) FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-06-30'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "89": {
        "db_id": "movie_platform",
        "question": "When was the movie Cops released?",
        "ground_truth": "SELECT movie_release_year FROM movies WHERE movie_title = 'Cops'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "986": {
        "db_id": "computer_student",
        "question": "How many teachers are faculty employees?",
        "ground_truth": "SELECT COUNT(*) FROM person WHERE hasPosition = 'Faculty_eme'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7894": {
        "db_id": "world",
        "question": "What is the year of independence of Brunei?",
        "ground_truth": "SELECT IndepYear FROM Country WHERE Name = 'Brunei'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8164": {
        "db_id": "sales_in_weather",
        "question": "For the weather station which recorded the highest temperature above the 30-year normal, how many stores does it have?",
        "ground_truth": "SELECT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY depart DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2288": {
        "db_id": "movielens",
        "question": "What is the highest average rating for action movies made in the USA?",
        "ground_truth": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "801": {
        "db_id": "social_media",
        "question": "For the tweet which got a reach number of 547851, which country did it come from?",
        "ground_truth": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Reach = 547851",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3095": {
        "db_id": "cars",
        "question": "How many times was Ford Maverick introduced to the market?",
        "ground_truth": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8256": {
        "db_id": "mondial_geo",
        "question": "Among the countries with a population of under 1000000, how many of them have over 2 languages?",
        "ground_truth": "SELECT T2.Country FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000 GROUP BY T2.Country HAVING COUNT(T1.Name) > 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4121": {
        "db_id": "public_review_platform",
        "question": "What is the total number of active businesses in AZ with a medium review count?",
        "ground_truth": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'Medium' AND state = 'AZ' AND active = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "957": {
        "db_id": "cs_semester",
        "question": "Among the professors with more than average teaching ability, list the full name and email address of the professors who advise two or more students.",
        "ground_truth": "SELECT T2.first_name, T2.last_name, T2.email FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability > ( SELECT AVG(teachingability) FROM prof ) GROUP BY T2.prof_id HAVING COUNT(T1.student_id) >= 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1599": {
        "db_id": "car_retails",
        "question": "Of all the orders placed and shipped throughout the year 2005, what percentage of those orders corresponds to customer number 186?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN customerNumber = 186 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(orderNumber) FROM orders WHERE status = 'Shipped' AND shippedDate BETWEEN '2005-01-01' AND '2005-12-31'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4735": {
        "db_id": "disney",
        "question": "Among all Disney movies directed by Gary Trousdale, determine the percentage that earned over USD100m based on actual grossing.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Gary Trousdale'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1926": {
        "db_id": "soccer_2016",
        "question": "In what percentage of games played at the Dr DY Patil Sports Academy venue did the winning team win by a margin of less than 10?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.Win_Margin < 10 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Venue_Id) FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name = 'Dr DY Patil Sports Academy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7853": {
        "db_id": "world",
        "question": "What country declared its independence in 1994?",
        "ground_truth": "SELECT Name FROM Country WHERE IndepYear = 1994",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4339": {
        "db_id": "simpson_episodes",
        "question": "List out the star scores of episode which has title of \"How the Test Was Won\".",
        "ground_truth": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'How the Test Was Won';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2561": {
        "db_id": "app_store",
        "question": "List down the rating for the App Learn C++.",
        "ground_truth": "SELECT DISTINCT Rating FROM playstore WHERE App = 'Learn C++'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6254": {
        "db_id": "coinmarketcap",
        "question": "Name the coin with the highest percentage price changed in 24 hours. State the transaction date and price.",
        "ground_truth": "SELECT T1.name, T2.DATE, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_24h = ( SELECT MAX(percent_change_24h) FROM historical )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1365": {
        "db_id": "synthea",
        "question": "Please list all the medication that are prescribed to Elly Koss.",
        "ground_truth": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2915": {
        "db_id": "professional_basketball",
        "question": "Among the NBA winning coaches, which are from STL team? Please list their coach id.",
        "ground_truth": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'STL' AND T1.lgID = 'NBA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "681": {
        "db_id": "codebase_comments",
        "question": "List 5 solution path that has sampling time of 636431758961741000.",
        "ground_truth": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SampledAt = 636431758961741000 LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1985": {
        "db_id": "soccer_2016",
        "question": "Count the matches with a total of two innings.",
        "ground_truth": "SELECT COUNT(Match_Id) FROM Wicket_Taken WHERE innings_no = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4888": {
        "db_id": "legislator",
        "question": "What is the religion with the most occurrrence of the current legislators?",
        "ground_truth": "SELECT religion_bio FROM current GROUP BY religion_bio ORDER BY COUNT(religion_bio) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7500": {
        "db_id": "image_and_language",
        "question": "Give the number of images containing the object sample of \"suit\".",
        "ground_truth": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'suit' GROUP BY T2.IMG_ID ) T",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4750": {
        "db_id": "legislator",
        "question": "Please list the official full names of all the current legislators who were once a senator during his or her terms.",
        "ground_truth": "SELECT T2.official_full_name FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank IS NOT NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9237": {
        "db_id": "movie_3",
        "question": "What is the inventory ID of the films starred by Russell Close with a duration between 110 to 150 minutes?",
        "ground_truth": "SELECT T4.inventory_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "984": {
        "db_id": "computer_student",
        "question": "How many people teaches course no.11?",
        "ground_truth": "SELECT COUNT(*) FROM taughtBy WHERE course_id = 11",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "637": {
        "db_id": "codebase_comments",
        "question": "How many methods with solutions with path 'maravillas_linq-to-delicious\\tasty.sln'?",
        "ground_truth": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious\\tasty.sln'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7671": {
        "db_id": "hockey",
        "question": "Among the players who died in Massachussets, how many of them have won an award?",
        "ground_truth": "SELECT COUNT(DISTINCT T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathState = 'MA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2960": {
        "db_id": "shakespeare",
        "question": "Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night.",
        "ground_truth": "SELECT T3.PlainText FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8182": {
        "db_id": "sales_in_weather",
        "question": "In March 2014, which weather stations recorded the highest number of days whose temperature is below the 30-year normal?",
        "ground_truth": "SELECT station_nbr FROM weather WHERE SUBSTR(`date`, 1, 4) = '2014' AND SUBSTR(`date`, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr HAVING COUNT(DISTINCT `date`) = ( SELECT COUNT(DISTINCT `date`) FROM weather WHERE SUBSTR(`date`, 1, 4) = '2014' AND SUBSTR(`date`, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY COUNT(`date`) DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5278": {
        "db_id": "beer_factory",
        "question": "How many Henry Weinhard's were bought by Nicholas Sparks?",
        "ground_truth": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Nicholas' AND T1.Last = 'Sparks' AND T4.BrandName LIKE 'Henry Weinhard%s'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2302": {
        "db_id": "movielens",
        "question": "Among the actors who acted in UK movies, what percentage of actors received a rating of at least 3?",
        "ground_truth": "SELECT CAST(SUM(IIF(T3.a_quality >= 3, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8723": {
        "db_id": "chicago_crime",
        "question": "What is the precise coordinate of the location where simple assault incidents happened the most in Chatham?",
        "ground_truth": "SELECT T2.latitude, T2.longitude FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Simple Assault' AND T3.community_area_name = 'Chatham' AND T3.community_area_no = 44 ORDER BY T2.latitude DESC, T2.longitude DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1845": {
        "db_id": "soccer_2016",
        "question": "How many of the matches are Superover?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.Outcome_Type = 'Superover' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Outcome AS T2 ON T2.Outcome_Id = T1.Outcome_type",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2687": {
        "db_id": "regional_sales",
        "question": "List the 5 sales teams that have made sales with the highest net profits.",
        "ground_truth": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3873": {
        "db_id": "public_review_platform",
        "question": "Among the users who have posted more than 10 reviews, how many users are elite users?",
        "ground_truth": "SELECT COUNT(T4.user_id) FROM ( SELECT T1.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.user_id IS NOT NULL GROUP BY T3.user_id HAVING COUNT(T3.user_id) > 10 ) T4",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5079": {
        "db_id": "olympics",
        "question": "Among the competitors with age ranges 24 and below, calculate the difference between the number of competitors who weighed greater than 70 kg and competitors who weighted less than 70 kg.",
        "ground_truth": "SELECT COUNT(CASE WHEN T1.weight > 70 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.weight < 70 THEN 1 ELSE NULL END) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age < 24",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8571": {
        "db_id": "software_company",
        "question": "List the marital status and response of female customers with an level of education of 8 and above.",
        "ground_truth": "SELECT DISTINCT T1.MARITAL_STATUS, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.EDUCATIONNUM > 8 AND T1.SEX = 'Female'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4798": {
        "db_id": "legislator",
        "question": "When was the last serving date of Matt Salmon?",
        "ground_truth": "SELECT T1.END FROM `historical-terms` AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Matt Salmon'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6748": {
        "db_id": "retails",
        "question": "Among the customers from Brazil, how many customers are in automobile market segment?",
        "ground_truth": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'AUTOMOBILE' AND T2.n_name = 'BRAZIL'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5512": {
        "db_id": "menu",
        "question": "State the full height and width for menu called \"El Fuerte Del Palmar\".",
        "ground_truth": "SELECT T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'El Fuerte Del Palmar'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "455": {
        "db_id": "movies_4",
        "question": "List the person IDs of the second film editors in Movie No. 12.",
        "ground_truth": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2258": {
        "db_id": "movielens",
        "question": "Among the most rated UK movies, how many of them has running time of less than 2?",
        "ground_truth": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T2.runningtime < 2 AND T1.rating = 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1672": {
        "db_id": "restaurant",
        "question": "How many restaurants in the city of Richmond serve Mediterranean food?",
        "ground_truth": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'mediterranean' AND city = 'richmond'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "39": {
        "db_id": "movie_platform",
        "question": "What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372?",
        "ground_truth": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 22030372 AND T2.rating_score = 5 AND T1.movie_title = 'Riff-Raff'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "520": {
        "db_id": "movies_4",
        "question": "What is the longest runtime of all movies?",
        "ground_truth": "SELECT MAX(runtime) FROM movie",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1422": {
        "db_id": "synthea",
        "question": "Provide the body weight of Elly Koss in every observation.",
        "ground_truth": "SELECT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.DESCRIPTION = 'Body Weight'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4084": {
        "db_id": "public_review_platform",
        "question": "Write down the ID and opening day of a week for the business which are running in Black Canyon City.",
        "ground_truth": "SELECT T2.business_id, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' AND T1.active = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "640": {
        "db_id": "codebase_comments",
        "question": "List all the solutions of repositories with the Forks higher than half of the watchers.",
        "ground_truth": "SELECT DISTINCT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > T1.Watchers / 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2533": {
        "db_id": "app_store",
        "question": "List the top 5 shopping apps with the most reviews.",
        "ground_truth": "SELECT DISTINCT App FROM playstore WHERE Genres = 'Shopping' GROUP BY App ORDER BY COUNT(App) DESC LIMIT 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1872": {
        "db_id": "soccer_2016",
        "question": "Among the matches held in Mumbai, how many percent of them were held in Wankhede Stadium?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.Venue_Name = 'Wankhede Stadium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Match_Id) FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Match AS T3 ON T3.Venue_Id = T2.Venue_Id WHERE T1.City_Name = 'Mumbai'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "825": {
        "db_id": "social_media",
        "question": "How many female users reshared their tweets?",
        "ground_truth": "SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3355": {
        "db_id": "video_games",
        "question": "What is the genre ID of the game named 25 to Life?",
        "ground_truth": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '25 to Life'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "71": {
        "db_id": "movie_platform",
        "question": "What's the url of user 39115684's rating on the movie 'When Will I Be Loved'?",
        "ground_truth": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5986": {
        "db_id": "books",
        "question": "How many orders were delivered in December 2019?",
        "ground_truth": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2019'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "691": {
        "db_id": "trains",
        "question": "How many cars are there on train no.1?",
        "ground_truth": "SELECT COUNT(id) FROM cars WHERE train_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3045": {
        "db_id": "shakespeare",
        "question": "What is the percentage of act number 5 in Titus Andronicus?",
        "ground_truth": "SELECT CAST(SUM(IIF(T2.act = 5, 1, 0)) AS REAL) * 100 / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Titus Andronicus'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4376": {
        "db_id": "student_loan",
        "question": "How many female students are disabled?",
        "ground_truth": "SELECT COUNT(name) FROM disabled WHERE name NOT IN ( SELECT name FROM male )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4000": {
        "db_id": "public_review_platform",
        "question": "List the business located in Mesa that have alcohol attribute.",
        "ground_truth": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T3.attribute_name = 'Alcohol'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9377": {
        "db_id": "movie_3",
        "question": "Name the movie with the highest rental revenue among the shortest films.",
        "ground_truth": "SELECT title FROM film WHERE length = ( SELECT MIN(length) FROM film ) ORDER BY rental_duration * rental_rate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7416": {
        "db_id": "works_cycles",
        "question": "How many departments have David Bradley been in?",
        "ground_truth": "SELECT COUNT(T3.DepartmentID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "880": {
        "db_id": "cs_semester",
        "question": "Give the grade score for Rik Unsworth in \"Computer Network\".",
        "ground_truth": "SELECT CASE grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 ELSE 1 END AS result FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE f_name = 'Rik' AND l_name = 'Unsworth' AND course_id IN ( SELECT course_id FROM course WHERE name = 'Computer Network' ) )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9372": {
        "db_id": "movie_3",
        "question": "Name the most recent movie rented by Dorothy Taylor.",
        "ground_truth": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'DOROTHY' AND T1.last_name = 'TAYLOR' ORDER BY T2.rental_date DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3964": {
        "db_id": "public_review_platform",
        "question": "How many \"cool\" type compliments does user No. 41717 get?",
        "ground_truth": "SELECT COUNT(T2.number_of_compliments) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'cool' AND T2.user_id = 41717",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9163": {
        "db_id": "movie_3",
        "question": "Give the email address of the person who lives in \"1411 Lillydale Drive\".",
        "ground_truth": "SELECT T2.email FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T1.address = '1411 Lillydale Drive'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6787": {
        "db_id": "retails",
        "question": "How many European suppliers are there?",
        "ground_truth": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6134": {
        "db_id": "food_inspection_2",
        "question": "For the sanitarian who lives on 5000 N Wolcott Ave, how many establishments did he/she inspect in the May of 2011?",
        "ground_truth": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND strftime('%Y-%m', T1.inspection_date) = '2011-05'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2763": {
        "db_id": "european_football_1",
        "question": "How many times did Valencia's home team win in the LaLiga division?",
        "ground_truth": "SELECT COUNT(T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T1.HomeTeam = 'Valencia' AND T1.FTR = 'H'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4532": {
        "db_id": "student_loan",
        "question": "Count the number of female students who belong to marines organization.",
        "ground_truth": "SELECT COUNT(*) FROM person AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T2.organ = 'marines' AND T3.name IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8206": {
        "db_id": "sales_in_weather",
        "question": "List out stations number and items sold by store 17.",
        "ground_truth": "SELECT T1.station_nbr, T2.item_nbr FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.store_nbr = 17 GROUP BY T1.station_nbr, T2.item_nbr",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "953": {
        "db_id": "cs_semester",
        "question": "Find the full name and popularity of the professor who advises the most number of students.",
        "ground_truth": "SELECT T1.first_name, T1.last_name, T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7597": {
        "db_id": "image_and_language",
        "question": "List all bounding box widths and heights of object sample ID 2.",
        "ground_truth": "SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1875": {
        "db_id": "soccer_2016",
        "question": "List down the ID of toss winners who decided to bat after winning the \"toss of the coin\".",
        "ground_truth": "SELECT Toss_Winner FROM Match WHERE Toss_Decide = 2",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5908": {
        "db_id": "airline",
        "question": "Give the air carrier description of the flights that have an earlier arrival and departure.",
        "ground_truth": "SELECT T1.Description FROM `Air Carriers` AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_DELAY < 0 AND T2.DEP_DELAY < 0 GROUP BY T1.Description",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7878": {
        "db_id": "world",
        "question": "What is the percentage of English used in Australia?",
        "ground_truth": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Australia' AND T2.Language = 'English'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5129": {
        "db_id": "address",
        "question": "List 10 cities with a median age over 40. Include their zip codes and area codes.",
        "ground_truth": "SELECT T2.city, T2.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.median_age >= 40 LIMIT 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5360": {
        "db_id": "beer_factory",
        "question": "Which location sold more bottles of beer?",
        "ground_truth": "SELECT T2.LocationName FROM rootbeer AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ContainerType = 'Bottle' GROUP BY T2.LocationID ORDER BY COUNT(T1.LocationID) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5292": {
        "db_id": "beer_factory",
        "question": "Calculate the percentage of sales done at Sac State American River Courtyard.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T2.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.TransactionID) FROM `transaction` AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5169": {
        "db_id": "address",
        "question": "Among the daylight savings areas in the Midwest region, how many postal points are there in Illinois?",
        "ground_truth": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Illinois' AND T2.daylight_savings = 'Yes' AND T2.region = 'Midwest'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3413": {
        "db_id": "video_games",
        "question": "Which year has the most number of video game releases?",
        "ground_truth": "SELECT T1.release_year FROM ( SELECT T.release_year, COUNT(id) FROM game_platform AS T GROUP BY T.release_year ORDER BY COUNT(T.id) DESC LIMIT 1 ) T1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6235": {
        "db_id": "food_inspection_2",
        "question": "What type of inspection was done on July 07, 2010, involving the employee named \"Lisa Tillman\"?",
        "ground_truth": "SELECT DISTINCT T2.inspection_type FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Lisa' AND T1.last_name = 'Tillman' AND T2.inspection_date = '2010-07-07'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5621": {
        "db_id": "shipping",
        "question": "What was the maximum weight of the shipment carried to Boston? Name the customer of that shipment.",
        "ground_truth": "SELECT T1.weight, T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Boston' ORDER BY T1.weight DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3152": {
        "db_id": "donor",
        "question": "Name the project titles meant for school whereby 65% of the students are on reduced lunch.",
        "ground_truth": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level LIKE 'highest%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4204": {
        "db_id": "simpson_episodes",
        "question": "How many episodes was Dell Hake not included in the credit list?",
        "ground_truth": "SELECT COUNT(*) FROM Credit WHERE person = 'Dell Hake' AND credited = 'false';",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5763": {
        "db_id": "language_corpus",
        "question": "What is the locale of the language of the page titled \"Abril\"?",
        "ground_truth": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Abril'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1620": {
        "db_id": "car_retails",
        "question": "How many French customers does Gerard Hernandez take care of?",
        "ground_truth": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.country = 'France' AND t2.firstName = 'Gerard' AND t2.lastName = 'Hernandez'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8073": {
        "db_id": "university",
        "question": "How many students did Harvard University have in 2011?",
        "ground_truth": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2011",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3010": {
        "db_id": "shakespeare",
        "question": "On average, how many scenes are there in each of the comedy works written by Shakespeare?",
        "ground_truth": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2827": {
        "db_id": "professional_basketball",
        "question": "For the players who belongs to the east conference, please list the name of the college they went to.",
        "ground_truth": "SELECT DISTINCT T1.college FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1071": {
        "db_id": "talkingdata",
        "question": "How many app IDs were included under science fiction category?",
        "ground_truth": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'science fiction'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7891": {
        "db_id": "world",
        "question": "Provide the district of the city with a population of 201843.",
        "ground_truth": "SELECT District FROM City WHERE population = 201843",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2543": {
        "db_id": "app_store",
        "question": "List all the comments on the lowest rated Mature 17+ app.",
        "ground_truth": "SELECT T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Mature 17+' ORDER BY T1.Rating LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8905": {
        "db_id": "cookbook",
        "question": "Which recipes contain almond extract?",
        "ground_truth": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'almond extract'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4640": {
        "db_id": "disney",
        "question": "Which song is associated with the most popular Disney movie in 1970s?",
        "ground_truth": "SELECT T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE CAST(SUBSTR(T1.release_date, INSTR(T1.release_date, ', ') + 1) AS int) BETWEEN 1970 AND 1979 ORDER BY CAST(REPLACE(SUBSTR(T1.total_gross, 2), ',', '') AS float) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "355": {
        "db_id": "retail_complains",
        "question": "What is the product complained by Alexander Bronx Lewis?",
        "ground_truth": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1018": {
        "db_id": "computer_student",
        "question": "Which professor taught the least amount of courses?",
        "ground_truth": "SELECT p_id FROM taughtBy GROUP BY p_id ORDER BY COUNT(course_id) ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7455": {
        "db_id": "works_cycles",
        "question": "How many days did it take to end the work order \"425\"?",
        "ground_truth": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7713": {
        "db_id": "hockey",
        "question": "What's the weight of the player who had the most Power Play Goals in the 21st century?",
        "ground_truth": "SELECT T1.weight FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year > 2000 GROUP BY T1.playerID, T1.weight ORDER BY SUM(T2.PPG) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7414": {
        "db_id": "works_cycles",
        "question": "Please list the names of all the store contact employees whose credit cards expired in 2007.",
        "ground_truth": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.ExpYear = 2007 AND T1.PersonType = 'SC'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7684": {
        "db_id": "hockey",
        "question": "What was the total number of the games that player Id \"rutlewa01\" played in 1967?",
        "ground_truth": "SELECT GP FROM Goalies WHERE playerID = 'rutlewa01' AND year = 1967",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4814": {
        "db_id": "legislator",
        "question": "Among male legislators, state number of the legislators who are not the senator.",
        "ground_truth": "SELECT COUNT(T3.state) FROM ( SELECT T2.state FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND (T2.class IS NULL OR T2.class = '') GROUP BY T2.state ) T3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7918": {
        "db_id": "music_platform_2",
        "question": "How many podcasts are there in the category which has the most podcasts?",
        "ground_truth": "SELECT COUNT(podcast_id) FROM categories WHERE category = ( SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1578": {
        "db_id": "car_retails",
        "question": "How many Australian customers who have credit line under 220000?",
        "ground_truth": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2594": {
        "db_id": "regional_sales",
        "question": "Describe the ID, city and region of the stores which are in Allen country.",
        "ground_truth": "SELECT DISTINCT T2.StoreID, T2.`City Name`, T1.Region FROM Regions AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StateCode = T1.StateCode WHERE T2.County = 'Allen County'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2446": {
        "db_id": "superstore",
        "question": "What is the percentage of orders with 0.2 discount in the Central superstore were purchased by customers who live in Texas?",
        "ground_truth": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0.2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.State = 'Texas'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3069": {
        "db_id": "cars",
        "question": "Please list the names of all the car models whose origin country is the USA.",
        "ground_truth": "SELECT DISTINCT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T2.country = T3.origin WHERE T3.country = 'USA'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3403": {
        "db_id": "video_games",
        "question": "What are the games that were released in 2006?",
        "ground_truth": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2006",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1923": {
        "db_id": "soccer_2016",
        "question": "In which country do most players have the 'slow left-arm chinaman' bowling style?",
        "ground_truth": "SELECT T3.Country_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Bowling_skill = 'Slow left-arm chinaman'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7025": {
        "db_id": "works_cycles",
        "question": "Which currency pair's average exchange rate for the day is the highest?",
        "ground_truth": "SELECT FromCurrencyCode, ToCurrencyCode FROM CurrencyRate ORDER BY AverageRate DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5364": {
        "db_id": "sales",
        "question": "Count the total quantity for sales from id 1 to 10.",
        "ground_truth": "SELECT SUM(Quantity) FROM Sales WHERE SalesID BETWEEN 1 AND 10",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4534": {
        "db_id": "student_loan",
        "question": "State name of female students who filed for bankruptcy.",
        "ground_truth": "SELECT T1.name FROM person AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "439": {
        "db_id": "movies_4",
        "question": "When was the first movie released?",
        "ground_truth": "SELECT MIN(release_date) FROM movie WHERE movie_status = 'Released'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3469": {
        "db_id": "video_games",
        "question": "What are the sales made by the games in Japan region?",
        "ground_truth": "SELECT SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) AS nums FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7418": {
        "db_id": "works_cycles",
        "question": "How many people were there in the Engineering Department in the year 2009?",
        "ground_truth": "SELECT COUNT(T1.BusinessEntityID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND STRFTIME('%Y', T2.EndDate) > '2009' AND STRFTIME('%Y', T2.StartDate) < '2009'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9094": {
        "db_id": "bike_share_1",
        "question": "What is the average duration of trips for the starting station of Santa Clara at Almaden and what is the latitude and longitude of this station?",
        "ground_truth": "SELECT AVG(T1.duration), T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name LEFT JOIN station AS T3 ON T3.name = T1.end_station_name WHERE T1.start_station_name = 'Santa Clara at Almaden'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1228": {
        "db_id": "talkingdata",
        "question": "What is the age and gender of the person who uses the device number 29182687948017100 on event number 1?",
        "ground_truth": "SELECT T1.age, T1.gender FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id = 29182687948017100 AND T2.event_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4169": {
        "db_id": "simpson_episodes",
        "question": "How many stars did most of the voters give in star score for the episode Lost Verizon?",
        "ground_truth": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' ORDER BY T2.votes DESC LIMIT 1;",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7975": {
        "db_id": "music_platform_2",
        "question": "What is the content of the earliest review for the \"Stuff You Should Know\" podcast?",
        "ground_truth": "SELECT T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Stuff You Should Know' ORDER BY T2.created_at ASC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3307": {
        "db_id": "video_games",
        "question": "How many more games were sold on game platform ID 50 than on game platform ID 51 in region ID 1?",
        "ground_truth": "SELECT (SUM(CASE WHEN T.game_platform_id = 50 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.game_platform_id = 51 THEN T.num_sales ELSE 0 END)) * 100000 AS nums FROM region_sales AS T WHERE T.region_id = 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4025": {
        "db_id": "public_review_platform",
        "question": "Among the businesses with average rating, how many business has attribute of full_bar.",
        "ground_truth": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'full_bar'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1437": {
        "db_id": "synthea",
        "question": "List down the last name of patients who are allergic to dairy products.",
        "ground_truth": "SELECT DISTINCT T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to dairy product'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6150": {
        "db_id": "food_inspection_2",
        "question": "How much is the salary of the employee who has the highest number of inspections done of all time?",
        "ground_truth": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT employee_id, COUNT(inspection_id) FROM inspection GROUP BY employee_id ORDER BY COUNT(inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7636": {
        "db_id": "hockey",
        "question": "Name the goalies and season they played when Boston Bruins won number 1 in rank.",
        "ground_truth": "SELECT T1.firstName, T1.lastName, T3.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.deathYear IS NOT NULL AND T3.name = 'Boston Bruins' AND T3.rank = 1 AND T1.pos = 'G'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7989": {
        "db_id": "university",
        "question": "How many state universities are there?",
        "ground_truth": "SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3141": {
        "db_id": "cars",
        "question": "List the name of the most expensive car.",
        "ground_truth": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3036": {
        "db_id": "shakespeare",
        "question": "How many scenes can be found in \"Twelfth Night, Or What You Will\"?",
        "ground_truth": "SELECT COUNT(T2.Scene) AS cnt FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Cymbeline, King of Britain'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8537": {
        "db_id": "software_company",
        "question": "List down the number of inhabitants of customers with a divorced marital status and older than 50 years old.",
        "ground_truth": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Divorced' AND T1.age < 50",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5531": {
        "db_id": "menu",
        "question": "How many dishes have appeared on the menu in less than 5 years?",
        "ground_truth": "SELECT COUNT(*) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared < 5",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5060": {
        "db_id": "olympics",
        "question": "Calculate the percentage of bronze medals won by men's basketball players.",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2720": {
        "db_id": "regional_sales",
        "question": "What is the name of the product with the highest net profit?",
        "ground_truth": "SELECT T2.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '') DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8481": {
        "db_id": "mondial_geo",
        "question": "What is the height of mountain Dhaulagiri located and in which province is it located?",
        "ground_truth": "SELECT T1.Height, T2.Province FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Dhaulagiri'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4891": {
        "db_id": "legislator",
        "question": "Please list the username of the current official Facebook presence of all the current legislators that are famous or impact.",
        "ground_truth": "SELECT T2.facebook FROM current AS T1 INNER JOIN `social-media` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL GROUP BY T2.facebook",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6146": {
        "db_id": "food_inspection_2",
        "question": "What is the full name of the employee who was responsible for the most inspection in March 2016?",
        "ground_truth": "SELECT T3.first_name, T3.last_name FROM ( SELECT T1.employee_id, COUNT(T1.inspection_id) FROM inspection AS T1 WHERE strftime('%Y-%m', T1.inspection_date) = '2016-03' GROUP BY T1.employee_id ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T2 INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5502": {
        "db_id": "menu",
        "question": "Provide the sponsor and event of the menu which includes Cerealine with Milk.",
        "ground_truth": "SELECT T3.name, T3.event FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Cerealine with Milk'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3580": {
        "db_id": "authors",
        "question": "What is the full name of the journals that are published in the database papers whose topic is Sustainability?",
        "ground_truth": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword = 'Sustainability'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3166": {
        "db_id": "donor",
        "question": "Which state have the highest number of PayPal donations for an honoree whose portion of a donation included corporate sponsored giftcard?",
        "ground_truth": "SELECT DISTINCT donor_state FROM donations WHERE for_honoree = 't' AND payment_included_campaign_gift_card = 't' AND payment_method = 'paypal' AND donor_state = ( SELECT donor_state FROM donations GROUP BY donor_state ORDER BY SUM(donation_total) DESC LIMIT 1 )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2044": {
        "db_id": "soccer_2016",
        "question": "Among the matches of Delhi Daredevils in 2009, what is the percentage of their matches won by wickets?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "426": {
        "db_id": "movies_4",
        "question": "For the movie \"Land of the Dead\", who is its director?",
        "ground_truth": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8963": {
        "db_id": "human_resources",
        "question": "Who is the employee with the highest salary? Specify his/her full name.",
        "ground_truth": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4633": {
        "db_id": "disney",
        "question": "Which character is the villain of the most popular movie?",
        "ground_truth": "SELECT T2.villian FROM `movies_total_gross` AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3681": {
        "db_id": "authors",
        "question": "What is the full name of the conference in which the paper \"2004 YD5\" was published?",
        "ground_truth": "SELECT T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Title = '2004 YD5'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3358": {
        "db_id": "video_games",
        "question": "Give the game publisher ID of records with platform ID 15.",
        "ground_truth": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 15",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5786": {
        "db_id": "language_corpus",
        "question": "What is the total occurrence of the biwords pairs with \"\u00e0bac\" as its first word?",
        "ground_truth": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = '\u00e0bac'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1710": {
        "db_id": "restaurant",
        "question": "What are the restaurants that are located at \"19th St. Oakland\"?",
        "ground_truth": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'Oakland' AND T2.street_name = '19th St'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1761": {
        "db_id": "restaurant",
        "question": "Among all indian restaurants in Castro St., Mountainview, how many of them is about cookhouse in their label?",
        "ground_truth": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'castro st' AND T1.city = 'mountain view' AND T2.food_type = 'indian' AND T2.label LIKE '%cookhouse%'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1400": {
        "db_id": "synthea",
        "question": "What is the most common condition among the patients who received influenza seasonal injectable preservative free immunization?",
        "ground_truth": "SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "513": {
        "db_id": "movies_4",
        "question": "Provide the homepage of the Bahasa Indonesia movies.",
        "ground_truth": "SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "254": {
        "db_id": "retail_complains",
        "question": "Which division is Diesel Galloway in?",
        "ground_truth": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8644": {
        "db_id": "chicago_crime",
        "question": "List down the titles and descriptions of the crimes cases against persons.",
        "ground_truth": "SELECT title, description FROM FBI_Code WHERE crime_against = 'Persons'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "229": {
        "db_id": "book_publishing_company",
        "question": "Among all the employees, how many percent more for the publishers than designers?",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN T2.job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.job_desc = 'designer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "121": {
        "db_id": "movie_platform",
        "question": "Which movie got the most critic comments? Give the name of the movie.",
        "ground_truth": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY COUNT(T1.critic_comments) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3973": {
        "db_id": "public_review_platform",
        "question": "Based on all user compliments, find the percentage of low number of compliments on all compliments ID.",
        "ground_truth": "SELECT CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users_compliments",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8997": {
        "db_id": "bike_share_1",
        "question": "At what date and time did San Jose Diridon Caltrain Station have most bikes available.",
        "ground_truth": "SELECT T2.time FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.bikes_available = ( SELECT MAX(T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3138": {
        "db_id": "cars",
        "question": "Which car consumes fuel the most and has the highest price?",
        "ground_truth": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.mpg DESC, T2.price DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5073": {
        "db_id": "olympics",
        "question": "In which city the 2004 Summer was held?",
        "ground_truth": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6179": {
        "db_id": "food_inspection_2",
        "question": "Provide the names and inspection results of the facilities located in Burnham.",
        "ground_truth": "SELECT DISTINCT T1.dba_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'BURNHAM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "9096": {
        "db_id": "bike_share_1",
        "question": "How many bikes have been borrowed at San Jose Diridon Caltrain Station on the date and time of 10/20/2013 8:11:01 AM and indicate the station's coordinates.",
        "ground_truth": "SELECT SUM(T2.bikes_available), T1.long, T1.lat FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/10/20 8:11:01' AND T1.name = 'San Jose Diridon Caltrain Station'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6827": {
        "db_id": "retails",
        "question": "What is the total price of all orders from the customer with the phone number \"627-220-3983\"?",
        "ground_truth": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_phone = '627-220-3983'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1641": {
        "db_id": "car_retails",
        "question": "Find the customer who made the highest payment in 2005.",
        "ground_truth": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8435": {
        "db_id": "mondial_geo",
        "question": "Which lake is the largest in terms of both surface area and depth?",
        "ground_truth": "SELECT Name FROM lake ORDER BY Area * Depth DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2962": {
        "db_id": "shakespeare",
        "question": "Please list the IDs of the paragraphs in which the character \"son to Tamora\" appears.",
        "ground_truth": "SELECT T1.id FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.Description = 'son to Tamora'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4520": {
        "db_id": "student_loan",
        "question": "State the number of students who filed for bankruptcy and have payment due.",
        "ground_truth": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2398": {
        "db_id": "superstore",
        "question": "Compare the numbers of orders between the Eastern and Western stores in 2015.",
        "ground_truth": "SELECT east, west FROM ( SELECT COUNT(`Order ID`) AS east , ( SELECT COUNT(`Order ID`) FROM west_superstore WHERE `Order Date` LIKE '2015%' ) AS west FROM east_superstore WHERE `Order Date` LIKE '2015%' )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "5443": {
        "db_id": "sales",
        "question": "What is the name of the most expensive product?",
        "ground_truth": "SELECT Name FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1961": {
        "db_id": "soccer_2016",
        "question": "Which country is the youngest player from?",
        "ground_truth": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name ORDER BY T2.DOB DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6975": {
        "db_id": "ice_hockey_draft",
        "question": "List the names of all players from Avangard Omsk that have played for playoffs in season 2000-2001.",
        "ground_truth": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk' AND T1.GAMETYPE = 'Playoffs'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6286": {
        "db_id": "coinmarketcap",
        "question": "What is the name of the coin that creates the most total value in the past 24 hours?",
        "ground_truth": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical )",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3362": {
        "db_id": "video_games",
        "question": "When was the game titled 3DS Classic Collection released?",
        "ground_truth": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = '3DS Classic Collection'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "3809": {
        "db_id": "public_review_platform",
        "question": "How many businesses in Glendale city that are still running is opened from 8AM to 6PM?",
        "ground_truth": "SELECT COUNT(T1.category_name) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T3.city LIKE 'Glendale' AND T4.opening_time LIKE '8AM' AND T4.closing_time LIKE '6PM'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1655": {
        "db_id": "car_retails",
        "question": "How many 2003 Harley-Davidson Eagle Drag Bikes were ordered?",
        "ground_truth": "SELECT SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productName = '2003 Harley-Davidson Eagle Drag Bike'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "8057": {
        "db_id": "university",
        "question": "How many international students attended Harvard University in 2012?",
        "ground_truth": "SELECT CAST(T2.num_students * T2.pct_international_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Harvard University' AND T2.year = 2012",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "7370": {
        "db_id": "works_cycles",
        "question": "How many Vista cards expired before the year 2007?",
        "ground_truth": "SELECT COUNT(CreditCardID) FROM CreditCard WHERE CardType = 'Vista' AND ExpYear < 2007",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1753": {
        "db_id": "restaurant",
        "question": "List down the restaurant ID of restaurants located in Sunnyvale.",
        "ground_truth": "SELECT id_restaurant FROM location WHERE city = 'sunnyvale'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1893": {
        "db_id": "soccer_2016",
        "question": "Among the matches, what percentage have a winning margin above 100?",
        "ground_truth": "SELECT CAST(COUNT(CASE WHEN Win_Margin > 100 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(Match_Id) FROM `Match`",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1261": {
        "db_id": "law_episode",
        "question": "For season 9, episode 17 of the show Law and Order, how many roles have been included in the credit?",
        "ground_truth": "SELECT COUNT(T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 17 AND T2.credited = 'true'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "582": {
        "db_id": "codebase_comments",
        "question": "What is the linearized sequenced of API calls of the method whose solution path is \"mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln\"?",
        "ground_truth": "SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6889": {
        "db_id": "retails",
        "question": "Which part is ordered in a bigger amount in order no.1, \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\"?",
        "ground_truth": "SELECT T.p_name FROM ( SELECT T2.p_name, SUM(T1.l_quantity) AS num FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY T1.l_partkey ) AS T ORDER BY T.num DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6919": {
        "db_id": "ice_hockey_draft",
        "question": "How much does David Bornhammar weigh in kilograms?",
        "ground_truth": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "717": {
        "db_id": "trains",
        "question": "Which direction do most of the trains with rectangle-shaped second cars run?",
        "ground_truth": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4630": {
        "db_id": "disney",
        "question": "Among the movies directed by Wolfgang Reitherman, how many of them are Comedies?",
        "ground_truth": "SELECT COUNT(T3.name) FROM ( SELECT T2.name FROM `movies_total_gross` AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.genre = 'Comedy' GROUP BY T2.name ) T3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "2731": {
        "db_id": "regional_sales",
        "question": "What are the names of the top 3 customers who paid the highest amount of price per order after discount?",
        "ground_truth": "SELECT `Customer Names` FROM ( SELECT T1.`Customer Names` , REPLACE(T2.`Unit Price`, ',', '') * T2.`Order Quantity` - REPLACE(T2.`Unit Price`, ',', '') * T2.`Discount Applied` AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY T DESC LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "4662": {
        "db_id": "disney",
        "question": "Who is the villain in the movie \"The Great Mouse Detective\"?",
        "ground_truth": "SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective'",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "6859": {
        "db_id": "retails",
        "question": "How many parts have a retail price of over 1900?",
        "ground_truth": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    },
    "1358": {
        "db_id": "law_episode",
        "question": "Please list any three episodes that were most enjoyed by the viewers.",
        "ground_truth": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 LIMIT 3",
        "amends": [],
        "rules": [],
        "amend_res": 0,
        "rule_res": 0,
        "amend_sql": [],
        "rule_sql": []
    }
}